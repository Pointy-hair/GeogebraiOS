//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/probcalculator/ProbabilityCalculatorView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/gui/view/data/PlotSettings.h"
#include "geogebra/common/gui/view/probcalculator/ProbabilityCalculatorView.h"
#include "geogebra/common/gui/view/probcalculator/ProbabilityManager.h"
#include "geogebra/common/gui/view/probcalculator/ProbabilityTable.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/ModeSetter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoListElement.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoRayPointVector.h"
#include "geogebra/common/kernel/algos/AlgoSequence.h"
#include "geogebra/common/kernel/algos/AlgoStepGraph.h"
#include "geogebra/common/kernel/algos/AlgoStickGraph.h"
#include "geogebra/common/kernel/algos/AlgoTake.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoBinomialDist.h"
#include "geogebra/common/kernel/statistics/AlgoCauchyDF.h"
#include "geogebra/common/kernel/statistics/AlgoChiSquaredDF.h"
#include "geogebra/common/kernel/statistics/AlgoDistributionDF.h"
#include "geogebra/common/kernel/statistics/AlgoExponentialDF.h"
#include "geogebra/common/kernel/statistics/AlgoFDistributionDF.h"
#include "geogebra/common/kernel/statistics/AlgoGammaDF.h"
#include "geogebra/common/kernel/statistics/AlgoHyperGeometric.h"
#include "geogebra/common/kernel/statistics/AlgoInversePascal.h"
#include "geogebra/common/kernel/statistics/AlgoInversePoisson.h"
#include "geogebra/common/kernel/statistics/AlgoLogNormalDF.h"
#include "geogebra/common/kernel/statistics/AlgoLogisticDF.h"
#include "geogebra/common/kernel/statistics/AlgoNormalDF.h"
#include "geogebra/common/kernel/statistics/AlgoPascal.h"
#include "geogebra/common/kernel/statistics/AlgoPoisson.h"
#include "geogebra/common/kernel/statistics/AlgoTDistributionDF.h"
#include "geogebra/common/kernel/statistics/AlgoWeibullDF.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoGebraColorConstants.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/ProbabilityCalculatorSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/TreeSet.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView () {
 @public
  jdouble low_;
  jdouble high_;
  JavaUtilTreeSet *tempSet_;
}

- (GeogebraCommonKernelGeosGeoElement *)createGeoFromStringWithNSString:(NSString *)text
                                                            withBoolean:(jboolean)suppressLabelCreation;

- (void)hideAllGeosFromViews;

- (void)hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)hideToolTips;

- (void)createDiscreteLists;

- (void)clearPlotGeoList;

- (JavaUtilTreeSet *)getTempSet;

- (void)updateRounding;

- (void)removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce;

- (void)removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo;

- (GeogebraCommonKernelGeosGeoFunction *)buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)type
                                                                                                                             withBoolean:(jboolean)cumulative;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView, tempSet_, JavaUtilTreeSet *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView, COLOR_PDF_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_NORMALOVERLAY_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView, COLOR_NORMALOVERLAY_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView, COLOR_PDF_FILL_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView, COLOR_POINT_, GeogebraCommonAwtGColor *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, NSString *text, jboolean suppressLabelCreation);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideAllGeosFromViews(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideToolTips(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createDiscreteLists(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_clearPlotGeoList(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static JavaUtilTreeSet *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_getTempSet(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_updateRounding(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonKernelAlgosAlgoElement *algo);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunction *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withBoolean_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *type, jboolean cumulative);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView)

@implementation GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (void)setLabelArrays {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_distributionMap_(self, [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) getDistributionMap]);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_reverseDistributionMap_(self, [probManager_ getReverseDistributionMap]);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_parameterLabels_(self, GeogebraCommonGuiViewProbcalculatorProbabilityManager_getParameterLabelArrayWithGeogebraCommonMainApp_(app_));
}

- (jint)getDiscreteXMax {
  if (discreteValueList_ != nil) {
    GeogebraCommonKernelGeosGeoNumeric *geo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([discreteValueList_ getWithInt:[discreteValueList_ size] - 1], [GeogebraCommonKernelGeosGeoNumeric class]);
    return J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getDouble]);
  }
  return -1;
}

- (jint)getDiscreteXMin {
  if (discreteValueList_ != nil) {
    GeogebraCommonKernelGeosGeoNumeric *geo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([discreteValueList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class]);
    return J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(geo)) getDouble]);
  }
  return -1;
}

- (void)setGraphTypeWithInt:(jint)type {
  if (graphType_ == type) return;
  graphType_ = type;
  if (isCumulative__) graphTypeCDF_ = type;
  else graphTypePDF_ = type;
  [self updateAll];
}

- (jint)getGraphType {
  return graphType_;
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setProbabilityCalculatorWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)distributionType
                                                                                     withDoubleArray:(IOSDoubleArray *)parameters
                                                                                         withBoolean:(jboolean)isCumulative {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_selectedDist_(self, distributionType);
  self->isCumulative__ = isCumulative;
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_parameters_(self, parameters);
  if (parameters == nil) GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_parameters_(self, GeogebraCommonGuiViewProbcalculatorProbabilityManager_getDefaultParametersWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_(selectedDist_));
  [self updateAll];
}

- (GeogebraCommonGuiViewDataPlotSettings *)getPlotSettings {
  return plotSettings_;
}

- (void)setPlotSettingsWithGeogebraCommonGuiViewDataPlotSettings:(GeogebraCommonGuiViewDataPlotSettings *)plotSettings {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_plotSettings_(self, plotSettings);
}

- (jboolean)isShowNormalOverlay {
  return showNormalOverlay_;
}

- (void)setShowNormalOverlayWithBoolean:(jboolean)showNormalOverlay {
  self->showNormalOverlay_ = showNormalOverlay;
}

- (void)updateAll {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)getSelectedDist {
  return selectedDist_;
}

- (jdouble)getLow {
  return low_;
}

- (jdouble)getHigh {
  return high_;
}

- (jint)getProbMode {
  return probMode_;
}

- (jboolean)isCumulative {
  return isCumulative__;
}

- (void)createGeoElements {
  [self removeGeos];
  NSString *expr;
  GeogebraCommonKernelGeosGeoAxis *path = (GeogebraCommonKernelGeosGeoAxis *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"xAxis"]], [GeogebraCommonKernelGeosGeoAxis class]);
  GeogebraCommonKernelAlgosAlgoPointOnPath *algoLow = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_(cons_, path, 0.0, 0.0) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoLow];
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_lowPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algoLow getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_];
  [lowPoint_ setPointSizeWithInt:4];
  [lowPoint_ setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH];
  [lowPoint_ setLayerWithInt:5];
  [((JavaUtilArrayList *) nil_chk(plotGeoList_)) addWithId:lowPoint_];
  GeogebraCommonKernelAlgosAlgoPointOnPath *algoHigh = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_(cons_, path, 0.0, 0.0) autorelease];
  [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoHigh];
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_highPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([algoHigh getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_];
  [highPoint_ setPointSizeWithInt:4];
  [highPoint_ setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH];
  [highPoint_ setLayerWithInt:5];
  [plotGeoList_ addWithId:highPoint_];
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_pointList_(self, new_JavaUtilArrayList_init());
  [pointList_ addWithId:lowPoint_];
  [pointList_ addWithId:highPoint_];
  [self setXAxisPoints];
  if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) {
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createDiscreteLists(self);
    if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP) {
      GeogebraCommonKernelGeosGeoBoolean *t = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [t setValueWithBoolean:YES];
      GeogebraCommonKernelAlgosAlgoStepGraph *algoStepGraph = [new_GeogebraCommonKernelAlgosAlgoStepGraph_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, discreteValueList_, discreteProbList_, t) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoStepGraph];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteGraph_(self, IOSObjectArray_Get(nil_chk([algoStepGraph getGeoElements]), 0));
    }
    else {
      GeogebraCommonKernelAlgosAlgoBarChart *algoBarChart;
      if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE) {
        id<GeogebraCommonKernelArithmeticNumberValue> zeroWidth = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 0) autorelease];
        algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, discreteValueList_, discreteProbList_, zeroWidth) autorelease];
      }
      else {
        id<GeogebraCommonKernelArithmeticNumberValue> oneWidth = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 1) autorelease];
        algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, discreteValueList_, discreteProbList_, oneWidth) autorelease];
      }
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoBarChart];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteGraph_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) getGeoElements]), 0));
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteGraph_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_];
    [discreteGraph_ setAlphaValueWithFloat:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityDiscrete];
    [discreteGraph_ setLineThicknessWithInt:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessBarChart];
    [discreteGraph_ setLayerWithInt:1];
    [discreteGraph_ setFixedWithBoolean:YES];
    [discreteGraph_ setSelectionAllowedWithBoolean:NO];
    [discreteGraph_ setEuclidianVisibleWithBoolean:YES];
    [plotGeoList_ addWithId:discreteGraph_];
    jdouble firstX = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(discreteValueList_)) getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    GeogebraCommonKernelArithmeticMyDouble *offset = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0 - firstX + 0.5) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *low = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, lowPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *high = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, highPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *lowPlusOffset = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, low, GeogebraCommonPluginOperationEnum_get_PLUS(), offset) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *highPlusOffset = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, high, GeogebraCommonPluginOperationEnum_get_PLUS(), offset) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentNumber *xLow;
    if (isCumulative__) xLow = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, highPlusOffset, NO) autorelease];
    else xLow = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, lowPlusOffset, NO) autorelease];
    [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xLow];
    GeogebraCommonKernelAlgosAlgoDependentNumber *xHigh = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, highPlusOffset, NO) autorelease];
    [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xHigh];
    GeogebraCommonKernelAlgosAlgoTake *take = [new_GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, discreteValueList_, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoDependentNumber *) nil_chk(xLow)) getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]), (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
    [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:take];
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_intervalValueList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([take getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
    GeogebraCommonKernelAlgosAlgoTake *take2 = [new_GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, discreteProbList_, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]), (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
    [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:take2];
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_intervalProbList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([take2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
    if (isCumulative__) {
      GeogebraCommonKernelGeosGeoBoolean *t = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [t setValueWithBoolean:YES];
      GeogebraCommonKernelAlgosAlgoStickGraph *algoStickGraph = [new_GeogebraCommonKernelAlgosAlgoStickGraph_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, intervalValueList_, intervalProbList_, t) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoStickGraph];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteIntervalGraph_(self, IOSObjectArray_Get(nil_chk([algoStickGraph getGeoElements]), 0));
    }
    else if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP) {
      GeogebraCommonKernelGeosGeoBoolean *t = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [t setValueWithBoolean:YES];
      GeogebraCommonKernelAlgosAlgoStepGraph *algoStepGraph2 = [new_GeogebraCommonKernelAlgosAlgoStepGraph_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, intervalValueList_, intervalProbList_, t) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoStepGraph2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteIntervalGraph_(self, IOSObjectArray_Get(nil_chk([algoStepGraph2 getGeoElements]), 0));
    }
    else {
      GeogebraCommonKernelAlgosAlgoBarChart *barChart;
      if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE) {
        id<GeogebraCommonKernelArithmeticNumberValue> zeroWidth2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 0.0) autorelease];
        barChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, intervalValueList_, intervalProbList_, zeroWidth2) autorelease];
      }
      else {
        id<GeogebraCommonKernelArithmeticNumberValue> oneWidth2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 1) autorelease];
        barChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, intervalValueList_, intervalProbList_, oneWidth2) autorelease];
      }
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteIntervalGraph_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(barChart)) getGeoElements]), 0));
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:barChart];
    }
    if (isCumulative__) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteIntervalGraph_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_red_()];
      [discreteIntervalGraph_ setLineThicknessWithInt:3];
      [discreteIntervalGraph_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
    }
    else if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE || graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteIntervalGraph_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_];
      [discreteIntervalGraph_ setLineThicknessWithInt:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessBarChart + 2];
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteIntervalGraph_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_];
      [discreteIntervalGraph_ setAlphaValueWithFloat:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityDiscreteInterval];
      [discreteIntervalGraph_ setLineThicknessWithInt:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessBarChart];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteIntervalGraph_)) setEuclidianVisibleWithBoolean:showProbGeos_];
    [discreteIntervalGraph_ setLayerWithInt:[discreteGraph_ getLayer] + 1];
    [discreteIntervalGraph_ setFixedWithBoolean:YES];
    [discreteIntervalGraph_ setSelectionAllowedWithBoolean:NO];
    [discreteIntervalGraph_ updateCascade];
    [plotGeoList_ addWithId:discreteIntervalGraph_];
    GeogebraCommonKernelGeosGeoLine *axis = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [axis setCoordsWithDouble:0 withDouble:1 withDouble:0];
    [axis setLayerWithInt:4];
    [axis setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1])) getAxesColor]];
    [axis setLineThicknessWithInt:discreteIntervalGraph_->lineThickness_];
    [axis setFixedWithBoolean:YES];
    [axis setSelectionAllowedWithBoolean:NO];
    [axis updateCascade];
    [plotGeoList_ addWithId:axis];
  }
  else {
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_densityCurve_(self, GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withBoolean_(self, selectedDist_, isCumulative__));
    if (isCumulative__ && (selectedDist_ == GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_F() || selectedDist_ == GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_EXPONENTIAL())) {
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_pdfCurve_(self, GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withBoolean_(self, selectedDist_, NO));
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pdfCurve_];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(densityCurve_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_];
    [densityCurve_ setLineThicknessWithInt:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessCurve];
    [densityCurve_ setFixedWithBoolean:YES];
    [densityCurve_ setSelectionAllowedWithBoolean:NO];
    [densityCurve_ setEuclidianVisibleWithBoolean:YES];
    [plotGeoList_ addWithId:densityCurve_];
    if (hasIntegral_) {
      GeogebraCommonKernelGeosGeoBoolean *f = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [f setValueWithBoolean:NO];
      GeogebraCommonKernelArithmeticExpressionNode *low = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, lowPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *high = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, highPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
      GeogebraCommonKernelAlgosAlgoDependentNumber *xLow = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, low, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xLow];
      GeogebraCommonKernelAlgosAlgoDependentNumber *xHigh = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, high, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xHigh];
      GeogebraCommonKernelCasAlgoIntegralDefinite *algoIntegral = [new_GeogebraCommonKernelCasAlgoIntegralDefinite_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(cons_, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve_, [GeogebraCommonKernelGeosGeoFunction class]), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), f) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoIntegral];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_integral_(self, IOSObjectArray_Get(nil_chk([algoIntegral getGeoElements]), 0));
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(integral_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_];
      [integral_ setAlphaValueWithFloat:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityIntegral];
      [integral_ setEuclidianVisibleWithBoolean:showProbGeos_];
      [integral_ setSelectionAllowedWithBoolean:NO];
      [plotGeoList_ addWithId:integral_];
    }
    if (isCumulative__) {
      GeogebraCommonKernelGeosGeoFunction *f = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(densityCurve_, [GeogebraCommonKernelGeosGeoFunction class]);
      GeogebraCommonKernelArithmeticExpressionNode *highPointX = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, highPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *curveY = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, f, GeogebraCommonPluginOperationEnum_get_FUNCTION(), highPointX) autorelease];
      GeogebraCommonKernelArithmeticMyVecNode *curveVec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, highPointX, curveY) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *curvePointNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, curveVec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      [curvePointNode setForcePoint];
      GeogebraCommonKernelAlgosAlgoDependentPoint *pAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, curvePointNode, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pAlgo];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_curvePoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(curvePoint_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_];
      [curvePoint_ setPointSizeWithInt:4];
      [curvePoint_ setLayerWithInt:[f getLayer] + 1];
      [curvePoint_ setSelectionAllowedWithBoolean:NO];
      [plotGeoList_ addWithId:curvePoint_];
      GeogebraCommonKernelArithmeticExpressionNode *xcoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, curvePoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
      GeogebraCommonKernelArithmeticMyVecNode *vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, xcoord, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease]) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *point = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      [point setForcePoint];
      GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, point, NO) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
      GeogebraCommonKernelAlgosAlgoJoinPointsSegment *seg1 = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(cons_, curvePoint_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:seg1];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_xSegment_(self, IOSObjectArray_Get(nil_chk([seg1 getGeoElements]), 0));
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(xSegment_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_blue_()];
      [xSegment_ setLineThicknessWithInt:3];
      [xSegment_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
      [xSegment_ setEuclidianVisibleWithBoolean:showProbGeos_];
      [xSegment_ setFixedWithBoolean:YES];
      [xSegment_ setSelectionAllowedWithBoolean:NO];
      [plotGeoList_ addWithId:xSegment_];
      GeogebraCommonKernelArithmeticExpressionNode *ycoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, curvePoint_, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
      GeogebraCommonKernelArithmeticMyVecNode *vecy = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], ycoord) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *pointy = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, vecy, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
      [pointy setForcePoint];
      GeogebraCommonKernelGeosGeoVector *v = [new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [v setCoordsWithDouble:-1.0 withDouble:0.0 withDouble:1.0];
      GeogebraCommonKernelAlgosAlgoRayPointVector *seg2 = [new_GeogebraCommonKernelAlgosAlgoRayPointVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVector_(cons_, curvePoint_, v) autorelease];
      [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:seg2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_ySegment_(self, IOSObjectArray_Get(nil_chk([seg2 getGeoElements]), 0));
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ySegment_)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_red_()];
      [ySegment_ setLineThicknessWithInt:3];
      [ySegment_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
      [ySegment_ setEuclidianVisibleWithBoolean:showProbGeos_];
      [ySegment_ setFixedWithBoolean:YES];
      [ySegment_ setSelectionAllowedWithBoolean:NO];
      [plotGeoList_ addWithId:ySegment_];
    }
  }
  if (showNormalOverlay_) {
    IOSObjectArray *m = [probManager_ getDistributionMeasuresWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_ withDoubleArray:parameters_];
    if (IOSObjectArray_Get(nil_chk(m), 0) != nil && IOSObjectArray_Get(m, 1) != nil) {
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_normalOverlay_(self, [self createNormalCurveOverlayWithDouble:[((JavaLangDouble *) nil_chk(IOSObjectArray_Get(m, 0))) doubleValue] withDouble:[((JavaLangDouble *) nil_chk(IOSObjectArray_Get(m, 1))) doubleValue]]);
      [plotGeoList_ addWithId:normalOverlay_];
    }
  }
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideAllGeosFromViews(self);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideToolTips(self);
}

- (GeogebraCommonKernelGeosGeoElement *)createGeoFromStringWithNSString:(NSString *)text
                                                            withBoolean:(jboolean)suppressLabelCreation {
  return GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, text, suppressLabelCreation);
}

- (void)hideAllGeosFromViews {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideAllGeosFromViews(self);
}

- (void)hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)hideToolTips {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideToolTips(self);
}

- (GeogebraCommonKernelAlgosAlgoPolyLine *)createStepFunctionWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)xList
                                                             withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)probList {
  IOSDoubleArray *xCoords = [IOSDoubleArray arrayWithLength:[((GeogebraCommonKernelGeosGeoList *) nil_chk(xList)) size]];
  IOSDoubleArray *yCoords = [IOSDoubleArray arrayWithLength:[((GeogebraCommonKernelGeosGeoList *) nil_chk(probList)) size]];
  jint n = yCoords->size_;
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(xCoords, i) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([xList getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(yCoords, i) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([probList getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:2 * n - 1 type:GeogebraCommonKernelGeosGeoPoint_class_()];
  jboolean suppressLabelCreation = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  IOSObjectArray_SetAndConsume(points, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, IOSDoubleArray_Get(xCoords, 0), IOSDoubleArray_Get(yCoords, 0), 1.0));
  for (jint i = 1; i < n; i++) {
    IOSObjectArray_SetAndConsume(points, 2 * i - 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, IOSDoubleArray_Get(xCoords, i), IOSDoubleArray_Get(yCoords, i - 1), 1.0));
    IOSObjectArray_SetAndConsume(points, 2 * i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons_, nil, IOSDoubleArray_Get(xCoords, i), IOSDoubleArray_Get(yCoords, i), 1.0));
  }
  [cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
  GeogebraCommonKernelAlgosAlgoPolyLine *polyLine = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(cons_, points, NO) autorelease];
  return polyLine;
}

- (GeogebraCommonKernelGeosGeoElement *)createNormalCurveOverlayWithDouble:(jdouble)mean
                                                                withDouble:(jdouble)sigma {
  GeogebraCommonKernelStatisticsAlgoNormalDF *algo = [new_GeogebraCommonKernelStatisticsAlgoNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(cons_, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, mean) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, sigma) autorelease], [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, isCumulative__) autorelease]) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
  GeogebraCommonKernelGeosGeoElement *geo = [algo getResult];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_NORMALOVERLAY_];
  [geo setLineThicknessWithInt:GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessCurve - 1];
  [geo setEuclidianVisibleWithBoolean:YES];
  [geo setFixedWithBoolean:YES];
  [geo setSelectionAllowedWithBoolean:NO];
  return geo;
}

- (IOSDoubleArray *)getPlotDimensions {
  return [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) getPlotDimensionsWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_ withDoubleArray:parameters_ withGeogebraCommonKernelGeosGeoElement:pdfCurve_ == nil ? densityCurve_ : pdfCurve_ withBoolean:isCumulative__];
}

- (NSString *)formatWithDouble:(jdouble)x {
  GeogebraCommonKernelStringTemplate *highPrecision;
  if (printDecimals_ >= 0) {
    jint d = printDecimals_ < 4 ? 4 : printDecimals_;
    highPrecision = GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), d, NO);
  }
  else {
    highPrecision = GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), printFigures_, NO);
  }
  NSString *result = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:highPrecision];
  return result;
}

- (void)updatePlotSettings {
  jdouble xMin, xMax, yMin, yMax;
  IOSDoubleArray *d = [self getPlotDimensions];
  xMin = IOSDoubleArray_Get(nil_chk(d), 0);
  xMax = IOSDoubleArray_Get(d, 1);
  yMin = IOSDoubleArray_Get(d, 2);
  yMax = IOSDoubleArray_Get(d, 3);
  if (plotSettings_ == nil) GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_plotSettings_(self, new_GeogebraCommonGuiViewDataPlotSettings_init());
  ((GeogebraCommonGuiViewDataPlotSettings *) nil_chk(plotSettings_))->xMin_ = xMin;
  plotSettings_->xMax_ = xMax;
  plotSettings_->yMin_ = yMin;
  plotSettings_->yMax_ = yMax;
  plotSettings_->showYAxis_ = [self isCumulative];
  *IOSBooleanArray_GetRef(nil_chk(plotSettings_->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(plotSettings_->isEdgeAxis_, 1) = YES;
  plotSettings_->forceXAxisBuffer_ = YES;
  if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) {
    plotSettings_->pointCaptureStyle_ = GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_ON_GRID;
    *IOSDoubleArray_GetRef(nil_chk(plotSettings_->gridInterval_), 0) = 1;
    plotSettings_->gridIntervalAuto_ = NO;
    plotSettings_->xAxesIntervalAuto_ = YES;
  }
  else {
    plotSettings_->pointCaptureStyle_ = GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_OFF;
    plotSettings_->xAxesIntervalAuto_ = YES;
    [self plotPanelUpdateSettingsWithGeogebraCommonGuiViewDataPlotSettings:plotSettings_];
  }
  [self plotPanelUpdateSettingsWithGeogebraCommonGuiViewDataPlotSettings:plotSettings_];
}

- (void)plotPanelUpdateSettingsWithGeogebraCommonGuiViewDataPlotSettings:(GeogebraCommonGuiViewDataPlotSettings *)settings {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setXAxisPoints {
  isSettingAxisPoints_ = YES;
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) setCoordsWithDouble:[self getLow] withDouble:0.0 withDouble:1.0];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) setCoordsWithDouble:[self getHigh] withDouble:0.0 withDouble:1.0];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(plotPanel_)) repaint];
  GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(pointList_, GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_getTempSet(self), NO);
  [((JavaUtilTreeSet *) nil_chk(tempSet_)) clear];
  if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) [((GeogebraCommonGuiViewProbcalculatorProbabilityTable *) nil_chk(table_)) setSelectionByRowValueWithInt:J2ObjCFpToInt([self getLow]) withInt:J2ObjCFpToInt([self getHigh])];
  isSettingAxisPoints_ = NO;
}

- (void)removeGeos {
  if (pointList_ != nil) [pointList_ clear];
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_clearPlotGeoList(self);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(plotPanel_)) clearView];
}

- (void)createDiscreteLists {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createDiscreteLists(self);
}

- (void)clearPlotGeoList {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_clearPlotGeoList(self);
}

- (JavaUtilTreeSet *)getTempSet {
  return GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_getTempSet(self);
}

- (void)exportGeosToEVWithInt:(jint)euclidianViewID {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  JavaUtilArrayList *newGeoList = [new_JavaUtilArrayList_init() autorelease];
  NSString *expr;
  @try {
    [app_ storeUndoInfo];
    expr = JreStrcat("$$C", @"Point[", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"xAxis"], ']');
    GeogebraCommonKernelGeosGeoPoint *lowPointCopy = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO), [GeogebraCommonKernelGeosGeoPoint class]);
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPointCopy)) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:lowPoint_];
    [lowPointCopy setLabelVisibleWithBoolean:NO];
    [lowPointCopy setCoordsWithDouble:[self getLow] withDouble:0 withDouble:1];
    [lowPointCopy setLabelWithNSString:nil];
    [newGeoList addWithId:lowPointCopy];
    GeogebraCommonKernelGeosGeoPoint *highPointCopy = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO), [GeogebraCommonKernelGeosGeoPoint class]);
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPointCopy)) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:lowPoint_];
    [highPointCopy setLabelVisibleWithBoolean:NO];
    [highPointCopy setCoordsWithDouble:[self getHigh] withDouble:0 withDouble:1];
    [highPointCopy setLabelWithNSString:nil];
    [newGeoList addWithId:highPointCopy];
    GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_maxPrecision_();
    if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) {
      GeogebraCommonKernelGeosGeoElement *discreteProbListCopy = [((GeogebraCommonKernelGeosGeoList *) nil_chk(discreteProbList_)) copy__];
      [newGeoList addWithId:discreteProbListCopy];
      GeogebraCommonKernelGeosGeoElement *discreteValueListCopy = [((GeogebraCommonKernelGeosGeoList *) nil_chk(discreteValueList_)) copy__];
      [newGeoList addWithId:discreteValueList_];
      if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE) {
        expr = JreStrcat("$$C$$", @"BarChart[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteValueListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()], ',', [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteProbListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()], @",0]");
      }
      else if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_BAR) {
        expr = JreStrcat("$$C$$", @"BarChart[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteValueListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()], ',', [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteProbListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()], @",1]");
      }
      else if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP) {
      }
      GeogebraCommonKernelGeosGeoElement *discreteGraphCopy = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteGraphCopy)) setLabelWithNSString:nil];
      [discreteGraphCopy setVisualStyleWithGeogebraCommonKernelGeosGeoElement:discreteGraph_];
      [newGeoList addWithId:discreteGraphCopy];
      jdouble offset = 1 - [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([discreteValueList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + 0.5;
      expr = JreStrcat("$$$$$D$$$DC", @"Take[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteProbListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], @", x(", [lowPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @")+", offset, @", x(", [highPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @")+", offset, ']');
      GeogebraCommonKernelGeosGeoElement *intervalProbList = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO);
      [newGeoList addWithId:intervalProbList];
      expr = JreStrcat("$$$$$D$$$DC", @"Take[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteValueListCopy)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], @", x(", [lowPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @")+", offset, @", x(", [highPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @")+", offset, ']');
      GeogebraCommonKernelGeosGeoElement *intervalValueList = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO);
      [newGeoList addWithId:intervalValueList];
      if (graphType_ == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE) expr = JreStrcat("$$C$$", @"BarChart[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(intervalValueList)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], ',', [((GeogebraCommonKernelGeosGeoElement *) nil_chk(intervalProbList)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], @",0]");
      else expr = JreStrcat("$$C$$", @"BarChart[", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(intervalValueList)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], ',', [((GeogebraCommonKernelGeosGeoElement *) nil_chk(intervalProbList)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], @",1]");
      GeogebraCommonKernelGeosGeoElement *discreteIntervalGraphCopy = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(discreteIntervalGraphCopy)) setLabelWithNSString:nil];
      [discreteIntervalGraphCopy setVisualStyleWithGeogebraCommonKernelGeosGeoElement:discreteIntervalGraph_];
      [newGeoList addWithId:discreteIntervalGraphCopy];
    }
    else {
      GeogebraCommonKernelGeosGeoElement *densityCurveCopy = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(densityCurve_)) copyInternalWithGeogebraCommonKernelConstruction:cons_];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(densityCurveCopy)) setLabelWithNSString:nil];
      [densityCurveCopy setVisualStyleWithGeogebraCommonKernelGeosGeoElement:densityCurve_];
      [newGeoList addWithId:densityCurveCopy];
      if (!isCumulative__) {
        expr = JreStrcat("$$$$$$$", @"Integral[", [densityCurveCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @", x(", [lowPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @"), x(", [highPointCopy getLabelWithGeogebraCommonKernelStringTemplate:tpl], @") , true ]");
        GeogebraCommonKernelGeosGeoElement *integralCopy = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(self, expr, NO);
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(integralCopy)) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:integral_];
        [integralCopy setLabelWithNSString:nil];
        [newGeoList addWithId:integralCopy];
      }
    }
    if (showNormalOverlay_) {
      GeogebraCommonKernelGeosGeoElement *normalOverlayCopy = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(normalOverlay_)) copyInternalWithGeogebraCommonKernelConstruction:cons_];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(normalOverlayCopy)) setLabelWithNSString:nil];
      [normalOverlayCopy setVisualStyleWithGeogebraCommonKernelGeosGeoElement:normalOverlay_];
      [newGeoList addWithId:normalOverlayCopy];
    }
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in newGeoList) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAuxiliaryObjectWithBoolean:NO];
      if (euclidianViewID == GeogebraCommonMainApp_VIEW_EUCLIDIAN) {
        [geo addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
        [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        [geo update];
      }
      else if (euclidianViewID == GeogebraCommonMainApp_VIEW_EUCLIDIAN2) {
        [geo addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
        [geo update];
      }
    }
    GeogebraCommonEuclidianEuclidianView *ev = (GeogebraCommonEuclidianEuclidianView *) check_class_cast([app_ getViewWithInt:euclidianViewID], [GeogebraCommonEuclidianEuclidianView class]);
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) setRealWorldCoordSystemWithDouble:((GeogebraCommonGuiViewDataPlotSettings *) nil_chk(plotSettings_))->xMin_ withDouble:plotSettings_->xMax_ withDouble:plotSettings_->yMin_ withDouble:plotSettings_->yMax_];
    [ev setAutomaticAxesNumberingDistanceWithBoolean:plotSettings_->xAxesIntervalAuto_ withInt:0];
    [ev setAutomaticAxesNumberingDistanceWithBoolean:plotSettings_->yAxesIntervalAuto_ withInt:1];
    if (!plotSettings_->xAxesIntervalAuto_) {
      [ev setAxesNumberingDistanceWithDouble:plotSettings_->xAxesInterval_ withInt:0];
    }
    if (!plotSettings_->yAxesIntervalAuto_) {
      [ev setAxesNumberingDistanceWithDouble:plotSettings_->yAxesInterval_ withInt:1];
    }
    [ev updateBackground];
    [newGeoList clear];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [app_ setDefaultCursor];
  }
  [app_ setDefaultCursor];
}

- (jint)getViewID {
  return GeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR;
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  GeogebraCommonMainSettingsProbabilityCalculatorSettings *pcSettings = (GeogebraCommonMainSettingsProbabilityCalculatorSettings *) check_class_cast(settings, [GeogebraCommonMainSettingsProbabilityCalculatorSettings class]);
  [self setProbabilityCalculatorWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:[((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk(pcSettings)) getDistributionType] withDoubleArray:[pcSettings getParameters] withBoolean:[pcSettings isCumulative]];
  if ([pcSettings isIntervalSet]) {
    self->probMode_ = [pcSettings getProbMode];
    [self setIntervalWithDouble:[pcSettings getLow] withDouble:[pcSettings getHigh]];
  }
}

- (void)setIntervalWithDouble:(jdouble)low2
                   withDouble:(jdouble)high2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)renameWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!isSettingAxisPoints_ && !isIniting_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEqual:lowPoint_]) {
      if ([self isValidIntervalWithInt:probMode_ withDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) getInhomX] withDouble:[self getHigh]]) {
        [self setLowWithDouble:[lowPoint_ getInhomX]];
        [self updateIntervalProbability];
        [self updateGUI];
        if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) [((GeogebraCommonGuiViewProbcalculatorProbabilityTable *) nil_chk(table_)) setSelectionByRowValueWithInt:J2ObjCFpToInt([self getLow]) withInt:J2ObjCFpToInt([self getHigh])];
      }
      else {
        [self setXAxisPoints];
      }
    }
    if ([geo isEqual:highPoint_]) {
      if ([self isValidIntervalWithInt:probMode_ withDouble:[self getLow] withDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) getInhomX]]) {
        [self setHighWithDouble:[highPoint_ getInhomX]];
        [self updateIntervalProbability];
        [self updateGUI];
        if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_]) [((GeogebraCommonGuiViewProbcalculatorProbabilityTable *) nil_chk(table_)) setSelectionByRowValueWithInt:J2ObjCFpToInt([self getLow]) withInt:J2ObjCFpToInt([self getHigh])];
      }
      else {
        [self setXAxisPoints];
      }
    }
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_updateRounding(self);
  }
}

- (jdouble)intervalProbability {
  return [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) intervalProbabilityWithDouble:[self getLow] withDouble:[self getHigh] withGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_ withDoubleArray:parameters_ withInt:probMode_];
}

- (jdouble)inverseProbabilityWithDouble:(jdouble)prob {
  return [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) inverseProbabilityWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_ withDouble:prob withDoubleArray:parameters_];
}

- (void)updateIntervalProbability {
  probability_ = [self intervalProbability];
  if ([self probmanagerIsDiscrete]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->discreteIntervalGraph_)) updateCascade];
  else if (hasIntegral_) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->integral_)) updateCascade];
}

- (jboolean)isValidIntervalWithInt:(jint)probMode
                        withDouble:(jdouble)xLow
                        withDouble:(jdouble)xHigh {
  if (probMode == GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_INTERVAL && xHigh < xLow) return NO;
  if ([((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_] && (JavaLangMath_floorWithDouble_(xLow) != xLow || JavaLangMath_floorWithDouble_(xHigh) != xHigh)) {
    return NO;
  }
  jboolean isValid = YES;
  switch ([selectedDist_ ordinal]) {
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    isValid = (xLow >= [self getDiscreteXMin] && xHigh <= [self getDiscreteXMax]);
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    isValid = (xLow >= [self getDiscreteXMin]);
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    if (probMode != GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_LEFT) isValid = (xLow >= 0);
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    if (probMode != GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_LEFT) isValid = (xLow > 0);
    break;
  }
  return isValid;
}

- (jboolean)isValidParameterWithDouble:(jdouble)parameter
                               withInt:(jint)index {
  IOSBooleanArray *isValid = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3];
  switch ([selectedDist_ ordinal]) {
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    if (index == 0) {
      *IOSBooleanArray_GetRef(isValid, 0) = (parameter > 0);
    }
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    if (index == 1) {
      *IOSBooleanArray_GetRef(isValid, 1) = (index == 1 && parameter > 0);
    }
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    if (index == 0) {
      *IOSBooleanArray_GetRef(isValid, 0) = (JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 1);
    }
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    if (index == 0) {
      *IOSBooleanArray_GetRef(isValid, 0) = (JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 0);
    }
    else if (index == 1) {
      *IOSBooleanArray_GetRef(isValid, 1) = (parameter >= 0 && parameter <= 1);
    }
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    if (index == 0) {
      *IOSBooleanArray_GetRef(isValid, 0) = (JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 1);
    }
    else if (index == 1) {
      *IOSBooleanArray_GetRef(isValid, 1) = (index == 1 && parameter >= 0 && parameter <= 1);
    }
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    if (index == 0) {
      *IOSBooleanArray_GetRef(isValid, 0) = (index == 0 && JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 1);
    }
    else if (index == 1) {
      *IOSBooleanArray_GetRef(isValid, 1) = (index == 1 && JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 0 && parameter <= IOSDoubleArray_Get(nil_chk(parameters_), 0));
    }
    else if (index == 2) {
      *IOSBooleanArray_GetRef(isValid, 2) = (index == 2 && JavaLangMath_floorWithDouble_(parameter) == parameter && parameter >= 1 && parameter <= IOSDoubleArray_Get(nil_chk(parameters_), 0));
    }
    break;
  }
  return IOSBooleanArray_Get(isValid, 0) && IOSBooleanArray_Get(isValid, 1) && IOSBooleanArray_Get(isValid, 2);
}

- (void)updateRounding {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_updateRounding(self);
}

- (void)updateDiscreteTable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateGUI {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)probmanagerIsDiscrete {
  return [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) isDiscreteWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_];
}

- (IOSIntArray *)generateFirstXLastXCommon {
  IOSIntArray *firstXLastX = [IOSIntArray arrayWithLength:2];
  if (discreteValueList_ == nil) {
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createDiscreteLists(self);
  }
  *IOSIntArray_GetRef(firstXLastX, 0) = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(discreteValueList_)) getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
  *IOSIntArray_GetRef(firstXLastX, 1) = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([discreteValueList_ getWithInt:[discreteValueList_ size] - 1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
  return firstXLastX;
}

- (void)updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)attachView {
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) attachWithGeogebraCommonKernelView:self];
}

- (void)detachView {
  [self removeGeos];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) detachWithGeogebraCommonKernelView:self];
}

- (void)updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)repaintView {
}

- (void)reset {
}

- (void)clearView {
}

- (void)setModeWithInt:(jint)mode
withGeogebraCommonKernelModeSetterEnum:(GeogebraCommonKernelModeSetterEnum *)m {
}

- (jboolean)hasFocus {
  return NO;
}

- (jboolean)isShowing {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) showViewWithInt:GeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR];
}

- (jboolean)doRemoveFromConstruction {
  return removeFromConstruction_;
}

- (void)setRemoveFromConstructionWithBoolean:(jboolean)removeFromConstruction {
  self->removeFromConstruction_ = removeFromConstruction;
}

- (void)removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce {
  if (removeFromConstruction_) [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:ce];
}

- (void)removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(self, algo);
}

- (GeogebraCommonKernelGeosGeoFunction *)buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:(GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *)type
                                                                                                                             withBoolean:(jboolean)cumulative {
  return GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withBoolean_(self, type, cumulative);
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if (selectedDist_ == nil) return;
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<probabilityCalculator>\n"];
  [sb appendWithNSString:@"\t<distribution"];
  [sb appendWithNSString:@" type=\""];
  [sb appendWithInt:[((GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *) nil_chk(selectedDist_)) ordinal]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" isCumulative=\""];
  [sb appendWithNSString:isCumulative__ ? @"true" : @"false"];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" parameters=\""];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(parameters_))->size_; i++) {
    [sb appendWithDouble:IOSDoubleArray_Get(parameters_, i)];
    [sb appendWithNSString:@","];
  }
  [sb deleteCharAtWithInt:[sb lastIndexOfWithNSString:@","]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
  [sb appendWithNSString:@"\t<interval"];
  [sb appendWithNSString:@" mode=\""];
  [sb appendWithInt:self->probMode_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" low=\""];
  [sb appendWithDouble:[self getLow]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" high=\""];
  [sb appendWithDouble:[self getHigh]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
  [sb appendWithNSString:@"</probabilityCalculator>\n"];
}

- (void)startBatchUpdate {
}

- (void)endBatchUpdate {
}

- (NSString *)getMeanSigma {
  IOSObjectArray *val = [((GeogebraCommonGuiViewProbcalculatorProbabilityManager *) nil_chk(probManager_)) getDistributionMeasuresWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:selectedDist_ withDoubleArray:parameters_];
  NSString *mean = IOSObjectArray_Get(nil_chk(val), 0) == nil ? @"?" : [self formatWithDouble:[((JavaLangDouble *) nil_chk(IOSObjectArray_Get(val, 0))) doubleValue]];
  NSString *sigma = IOSObjectArray_Get(val, 1) == nil ? @"?" : [self formatWithDouble:[((JavaLangDouble *) nil_chk(IOSObjectArray_Get(val, 1))) doubleValue]];
  NSString *meanSigmaStr = JreStrcat("C$$$C$$", GeogebraCommonUtilUnicode_mu, @" = ", mean, @"   ", GeogebraCommonUtilUnicode_sigma, @" = ", sigma);
  return meanSigmaStr;
}

- (void)setHighWithDouble:(jdouble)high {
  self->high_ = high;
}

- (void)setLowWithDouble:(jdouble)low {
  self->low_ = low;
}

- (jboolean)isOverlayDefined {
  return !((selectedDist_ == GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_CAUCHY()) || (selectedDist_ == GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_F() && IOSDoubleArray_Get(nil_chk(parameters_), 1) < 4));
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(loc_);
  RELEASE_(cons_);
  RELEASE_(plotPanel_);
  RELEASE_(table_);
  RELEASE_(selectedDist_);
  RELEASE_(parameterLabels_);
  RELEASE_(parameters_);
  RELEASE_(distributionMap_);
  RELEASE_(reverseDistributionMap_);
  RELEASE_(plotGeoList_);
  RELEASE_(lowPoint_);
  RELEASE_(highPoint_);
  RELEASE_(curvePoint_);
  RELEASE_(densityCurve_);
  RELEASE_(integral_);
  RELEASE_(ySegment_);
  RELEASE_(xSegment_);
  RELEASE_(discreteGraph_);
  RELEASE_(discreteIntervalGraph_);
  RELEASE_(normalOverlay_);
  RELEASE_(discreteValueList_);
  RELEASE_(discreteProbList_);
  RELEASE_(intervalProbList_);
  RELEASE_(intervalValueList_);
  RELEASE_(pointList_);
  RELEASE_(plotSettings_);
  RELEASE_(probManager_);
  RELEASE_(pdfCurve_);
  RELEASE_(tempSet_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView class]) {
    JreStrongAssign(&GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_, nil, GeogebraCommonMainGeoGebraColorConstants_get_DARKBLUE_());
    JreStrongAssign(&GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_NORMALOVERLAY_, nil, GeogebraCommonMainGeoGebraColorConstants_get_RED_());
    JreStrongAssign(&GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_, nil, GeogebraCommonMainGeoGebraColorConstants_get_BLUE_());
    JreStrongAssign(&GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_, nil, GeogebraCommonAwtGColor_get_BLACK_());
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "ProbabilityCalculatorView", NULL, 0x1, NULL, NULL },
    { "setLabelArrays", NULL, "V", 0x4, NULL, NULL },
    { "getDiscreteXMax", NULL, "I", 0x1, NULL, NULL },
    { "getDiscreteXMin", NULL, "I", 0x1, NULL, NULL },
    { "setGraphTypeWithInt:", "setGraphType", "V", 0x1, NULL, NULL },
    { "getGraphType", NULL, "I", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setProbabilityCalculatorWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withDoubleArray:withBoolean:", "setProbabilityCalculator", "V", 0x1, NULL, NULL },
    { "getPlotSettings", NULL, "Lgeogebra.common.gui.view.data.PlotSettings;", 0x1, NULL, NULL },
    { "setPlotSettingsWithGeogebraCommonGuiViewDataPlotSettings:", "setPlotSettings", "V", 0x1, NULL, NULL },
    { "isShowNormalOverlay", NULL, "Z", 0x1, NULL, NULL },
    { "setShowNormalOverlayWithBoolean:", "setShowNormalOverlay", "V", 0x1, NULL, NULL },
    { "updateAll", NULL, "V", 0x401, NULL, NULL },
    { "getSelectedDist", NULL, "Lgeogebra.common.main.settings.ProbabilityCalculatorSettings$DIST;", 0x1, NULL, NULL },
    { "getLow", NULL, "D", 0x1, NULL, NULL },
    { "getHigh", NULL, "D", 0x1, NULL, NULL },
    { "getProbMode", NULL, "I", 0x1, NULL, NULL },
    { "isCumulative", NULL, "Z", 0x1, NULL, NULL },
    { "createGeoElements", NULL, "V", 0x4, NULL, NULL },
    { "createGeoFromStringWithNSString:withBoolean:", "createGeoFromString", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "hideAllGeosFromViews", NULL, "V", 0x2, NULL, NULL },
    { "hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement:", "hideGeoFromViews", "V", 0x2, NULL, NULL },
    { "hideToolTips", NULL, "V", 0x2, NULL, NULL },
    { "createStepFunctionWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "createStepFunction", "Lgeogebra.common.kernel.algos.AlgoPolyLine;", 0x1, NULL, NULL },
    { "createNormalCurveOverlayWithDouble:withDouble:", "createNormalCurveOverlay", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPlotDimensions", NULL, "[D", 0x4, NULL, NULL },
    { "formatWithDouble:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updatePlotSettings", NULL, "V", 0x1, NULL, NULL },
    { "plotPanelUpdateSettingsWithGeogebraCommonGuiViewDataPlotSettings:", "plotPanelUpdateSettings", "V", 0x404, NULL, NULL },
    { "setXAxisPoints", NULL, "V", 0x1, NULL, NULL },
    { "removeGeos", NULL, "V", 0x1, NULL, NULL },
    { "createDiscreteLists", NULL, "V", 0x2, NULL, NULL },
    { "clearPlotGeoList", NULL, "V", 0x2, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0x2, NULL, NULL },
    { "exportGeosToEVWithInt:", "exportGeosToEV", "V", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "setIntervalWithDouble:withDouble:", "setInterval", "V", 0x404, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "renameWithGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "intervalProbability", NULL, "D", 0x4, NULL, NULL },
    { "inverseProbabilityWithDouble:", "inverseProbability", "D", 0x4, NULL, NULL },
    { "updateIntervalProbability", NULL, "V", 0x4, NULL, NULL },
    { "isValidIntervalWithInt:withDouble:withDouble:", "isValidInterval", "Z", 0x4, NULL, NULL },
    { "isValidParameterWithDouble:withInt:", "isValidParameter", "Z", 0x4, NULL, NULL },
    { "updateRounding", NULL, "V", 0x2, NULL, NULL },
    { "updateDiscreteTable", NULL, "V", 0x404, NULL, NULL },
    { "updateGUI", NULL, "V", 0x404, NULL, NULL },
    { "probmanagerIsDiscrete", NULL, "Z", 0x4, NULL, NULL },
    { "generateFirstXLastXCommon", NULL, "[I", 0x4, NULL, NULL },
    { "updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x11, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "detachView", NULL, "V", 0x1, NULL, NULL },
    { "updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:withGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "hasFocus", NULL, "Z", 0x1, NULL, NULL },
    { "isShowing", NULL, "Z", 0x1, NULL, NULL },
    { "doRemoveFromConstruction", NULL, "Z", 0x1, NULL, NULL },
    { "setRemoveFromConstructionWithBoolean:", "setRemoveFromConstruction", "V", 0x1, NULL, NULL },
    { "removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:", "removeFromConstructionList", "V", 0x2, NULL, NULL },
    { "removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:", "removeFromAlgorithmList", "V", 0x2, NULL, NULL },
    { "buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:withBoolean:", "buildDensityCurveExpression", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x2, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:", "getXML", "V", 0x1, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "getMeanSigma", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setHighWithDouble:", "setHigh", "V", 0x4, NULL, NULL },
    { "setLowWithDouble:", "setLow", "V", 0x4, NULL, NULL },
    { "isOverlayDefined", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "loc_", NULL, 0x4, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "COLOR_PDF_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_, NULL,  },
    { "COLOR_NORMALOVERLAY_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_NORMALOVERLAY_, NULL,  },
    { "COLOR_PDF_FILL_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_PDF_FILL_, NULL,  },
    { "COLOR_POINT_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_COLOR_POINT_, NULL,  },
    { "defaultDividerSize_", NULL, 0x4, "I", NULL, NULL,  },
    { "plotPanel_", NULL, 0x1, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "table_", NULL, 0x4, "Lgeogebra.common.gui.view.probcalculator.ProbabilityTable;", NULL, NULL,  },
    { "hasIntegral_", NULL, 0x4, "Z", NULL, NULL,  },
    { "selectedDist_", NULL, 0x4, "Lgeogebra.common.main.settings.ProbabilityCalculatorSettings$DIST;", NULL, NULL,  },
    { "parameterLabels_", NULL, 0x4, "[[Ljava.lang.String;", NULL, NULL,  },
    { "maxParameterCount_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_maxParameterCount },
    { "parameters_", NULL, 0x4, "[D", NULL, NULL,  },
    { "isCumulative__", "isCumulative", 0x4, "Z", NULL, NULL,  },
    { "distributionMap_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/main/settings/ProbabilityCalculatorSettings$DIST;Ljava/lang/String;>;",  },
    { "reverseDistributionMap_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/main/settings/ProbabilityCalculatorSettings$DIST;>;",  },
    { "plotGeoList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "lowPoint_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "highPoint_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "curvePoint_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "densityCurve_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "integral_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "ySegment_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "xSegment_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "discreteGraph_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "discreteIntervalGraph_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "normalOverlay_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "discreteValueList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "discreteProbList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "intervalProbList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "intervalValueList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "pointList_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "isIniting_", NULL, 0x4, "Z", NULL, NULL,  },
    { "isSettingAxisPoints_", NULL, 0x4, "Z", NULL, NULL,  },
    { "PROB_INTERVAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_INTERVAL },
    { "PROB_LEFT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_LEFT },
    { "PROB_RIGHT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_RIGHT },
    { "probMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "low_", NULL, 0x2, "D", NULL, NULL,  },
    { "high_", NULL, 0x2, "D", NULL, NULL,  },
    { "probability_", NULL, 0x4, "D", NULL, NULL,  },
    { "printDecimals_", NULL, 0x4, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x4, "I", NULL, NULL,  },
    { "validProb_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showProbGeos_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showNormalOverlay_", NULL, 0x4, "Z", NULL, NULL,  },
    { "opacityIntegral_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityIntegral },
    { "opacityDiscrete_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityDiscrete },
    { "opacityDiscreteInterval_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_opacityDiscreteInterval },
    { "thicknessCurve_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessCurve },
    { "thicknessBarChart_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_thicknessBarChart },
    { "removeFromConstruction_", NULL, 0x4, "Z", NULL, NULL,  },
    { "nearlyOne_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_nearlyOne },
    { "GRAPH_BAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_BAR },
    { "GRAPH_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_LINE },
    { "GRAPH_STEP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP },
    { "graphTypePDF_", NULL, 0x4, "I", NULL, NULL,  },
    { "graphTypeCDF_", NULL, 0x4, "I", NULL, NULL,  },
    { "graphType_", NULL, 0x4, "I", NULL, NULL,  },
    { "plotSettings_", NULL, 0x4, "Lgeogebra.common.gui.view.data.PlotSettings;", NULL, NULL,  },
    { "probManager_", NULL, 0x4, "Lgeogebra.common.gui.view.probcalculator.ProbabilityManager;", NULL, NULL,  },
    { "pdfCurve_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "tempSet_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView = { 2, "ProbabilityCalculatorView", "geogebra.common.gui.view.probcalculator", NULL, 0x401, 75, methods, 66, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView;
}

@end

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_initWithGeogebraCommonMainApp_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->hasIntegral_ = YES;
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_selectedDist_(self, GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_get_NORMAL());
  self->isCumulative__ = NO;
  self->isSettingAxisPoints_ = NO;
  self->probMode_ = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_PROB_INTERVAL;
  self->low_ = 0;
  self->high_ = 1;
  self->printDecimals_ = 4;
  self->printFigures_ = -1;
  self->showProbGeos_ = YES;
  self->showNormalOverlay_ = NO;
  self->removeFromConstruction_ = YES;
  self->graphTypePDF_ = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_BAR;
  self->graphTypeCDF_ = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_STEP;
  self->graphType_ = GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_GRAPH_BAR;
  self->isIniting_ = YES;
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_app_(self, app);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getLocalization]);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_kernel_(self, [app getKernel]);
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
  [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getProbCalcSettings])) addListenerWithGeogebraCommonMainSettingsSettingListener:self];
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_probManager_(self, new_GeogebraCommonGuiViewProbcalculatorProbabilityManager_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_(app, self));
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_plotSettings_(self, new_GeogebraCommonGuiViewDataPlotSettings_init());
  GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_plotGeoList_(self, new_JavaUtilArrayList_init());
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createGeoFromStringWithNSString_withBoolean_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, NSString *text, jboolean suppressLabelCreation) {
  @try {
    jboolean oldSuppressLabelMode = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    if (suppressLabelCreation) [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    jboolean oldEnableUndo = [self->cons_ isUndoEnabled];
    [self->cons_ setUndoEnabledWithBoolean:NO];
    IOSObjectArray *geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:text withBoolean:NO];
    [self->cons_ setUndoEnabledWithBoolean:oldEnableUndo];
    if (suppressLabelCreation) [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabelMode];
    return IOSObjectArray_Get(nil_chk(geos), 0);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideAllGeosFromViews(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(self->plotGeoList_)) {
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideGeoFromViewsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonKernelGeosGeoElement *geo) {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->plotPanel_)) getViewID]];
  [self->plotPanel_ addWithGeogebraCommonKernelGeosGeoElement:geo];
  [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getEuclidianView1])) removeWithGeogebraCommonKernelGeosGeoElement:geo];
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_hideToolTips(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(self->plotGeoList_)) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setTooltipModeWithInt:GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF];
  }
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_createDiscreteLists(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  GeogebraCommonKernelArithmeticExpressionNode *nPlusOne;
  GeogebraCommonKernelAlgosAlgoDependentNumber *plusOneAlgo;
  {
    GeogebraCommonKernelGeosGeoNumeric *k;
    GeogebraCommonKernelGeosGeoNumeric *k2;
    GeogebraCommonKernelGeosGeoNumeric *nGeo;
    GeogebraCommonKernelGeosGeoNumeric *nPlusOneGeo;
    GeogebraCommonKernelGeosGeoNumeric *pGeo;
    GeogebraCommonKernelAlgosAlgoSequence *algoSeq;
    GeogebraCommonKernelAlgosAlgoListElement *algo;
    GeogebraCommonKernelStatisticsAlgoBinomialDist *algo2;
    GeogebraCommonKernelAlgosAlgoSequence *algoSeq2;
    GeogebraCommonKernelStatisticsAlgoInversePascal *n2;
    GeogebraCommonKernelGeosGeoElement *n2Geo;
    GeogebraCommonKernelStatisticsAlgoPascal *ppascal;
    GeogebraCommonKernelGeosGeoNumeric *meanGeo;
    GeogebraCommonKernelStatisticsAlgoInversePoisson *maxSequenceValue;
    GeogebraCommonKernelGeosGeoElement *maxDiscreteGeo;
    GeogebraCommonKernelStatisticsAlgoPoisson *poisson;
    jdouble p;
    jdouble n;
    jdouble s;
    jdouble lowBound;
    jdouble highBound;
    jdouble length;
    GeogebraCommonKernelGeosGeoNumeric *lowGeo;
    GeogebraCommonKernelGeosGeoNumeric *highGeo;
    GeogebraCommonKernelGeosGeoNumeric *lengthGeo;
    GeogebraCommonKernelGeosGeoNumeric *sGeo;
    GeogebraCommonKernelStatisticsAlgoHyperGeometric *hyperGeometric;
    switch ([self->selectedDist_ ordinal]) {
      case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
      k = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      k2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      nGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(self->parameters_), 0)) autorelease];
      nPlusOneGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(self->parameters_, 0) + 1) autorelease];
      pGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(self->parameters_, 1)) autorelease];
      algoSeq = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, k2, k2, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease], nGeo, nil) autorelease];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteValueList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      algo = [new_GeogebraCommonKernelAlgosAlgoListElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, self->discreteValueList_, k) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      algo2 = [new_GeogebraCommonKernelStatisticsAlgoBinomialDist_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, nGeo, pGeo, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self->cons_, self->isCumulative__) autorelease]) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo2];
      algoSeq2 = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, IOSObjectArray_Get(nil_chk([algo2 getGeoElements]), 0), k, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], nPlusOneGeo, nil) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSeq2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteProbList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      break;
      case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
      nGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(self->parameters_), 0)) autorelease];
      pGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(self->parameters_, 1)) autorelease];
      k = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      k2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      n2 = [new_GeogebraCommonKernelStatisticsAlgoInversePascal_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, nGeo, pGeo, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_nearlyOne) autorelease]) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:n2];
      n2Geo = IOSObjectArray_Get(nil_chk([n2 getGeoElements]), 0);
      algoSeq = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, k, k, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease], (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(n2Geo, @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil) autorelease];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(self, algoSeq);
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteValueList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      algo = [new_GeogebraCommonKernelAlgosAlgoListElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, self->discreteValueList_, k2) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      ppascal = [new_GeogebraCommonKernelStatisticsAlgoPascal_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, nGeo, pGeo, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self->cons_, self->isCumulative__) autorelease]) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:ppascal];
      nPlusOne = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, n2Geo, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease]) autorelease];
      plusOneAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, nPlusOne, NO) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:plusOneAlgo];
      algoSeq2 = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, IOSObjectArray_Get(nil_chk([ppascal getGeoElements]), 0), k2, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([plusOneAlgo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSeq2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteProbList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      break;
      case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
      meanGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(self->parameters_), 0)) autorelease];
      k = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      k2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      maxSequenceValue = [new_GeogebraCommonKernelStatisticsAlgoInversePoisson_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, meanGeo, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_nearlyOne) autorelease]) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:maxSequenceValue];
      maxDiscreteGeo = IOSObjectArray_Get(nil_chk([maxSequenceValue getGeoElements]), 0);
      algoSeq = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, k, k, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease], (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(maxDiscreteGeo, @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil) autorelease];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(self, algoSeq);
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteValueList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      algo = [new_GeogebraCommonKernelAlgosAlgoListElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, self->discreteValueList_, k2) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      poisson = [new_GeogebraCommonKernelStatisticsAlgoPoisson_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, meanGeo, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self->cons_, self->isCumulative__) autorelease]) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:poisson];
      nPlusOne = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, maxDiscreteGeo, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease]) autorelease];
      plusOneAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, nPlusOne, NO) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:plusOneAlgo];
      algoSeq2 = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, IOSObjectArray_Get(nil_chk([poisson getGeoElements]), 0), k2, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([plusOneAlgo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSeq2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteProbList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      break;
      case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
      p = IOSDoubleArray_Get(nil_chk(self->parameters_), 0);
      n = IOSDoubleArray_Get(self->parameters_, 1);
      s = IOSDoubleArray_Get(self->parameters_, 2);
      lowBound = JavaLangMath_maxWithDouble_withDouble_(0, n + s - p);
      highBound = JavaLangMath_minWithDouble_withDouble_(n, s);
      length = highBound - lowBound + 1;
      lowGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, lowBound) autorelease];
      highGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, highBound) autorelease];
      lengthGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, length) autorelease];
      pGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, p) autorelease];
      nGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, n) autorelease];
      sGeo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, s) autorelease];
      k = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      k2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      algoSeq = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, k, k, lowGeo, highGeo, nil) autorelease];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(self, algoSeq);
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteValueList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      algo = [new_GeogebraCommonKernelAlgosAlgoListElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, self->discreteValueList_, k2) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      hyperGeometric = [new_GeogebraCommonKernelStatisticsAlgoHyperGeometric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, pGeo, nGeo, sGeo, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self->cons_, self->isCumulative__) autorelease]) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:hyperGeometric];
      algoSeq2 = [new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, IOSObjectArray_Get(nil_chk([hyperGeometric getGeoElements]), 0), k2, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1.0) autorelease], lengthGeo, nil) autorelease];
      [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoSeq2];
      GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_set_discreteProbList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algoSeq2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]));
      break;
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->plotGeoList_)) addWithId:self->discreteProbList_];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->discreteProbList_)) setEuclidianVisibleWithBoolean:YES];
  [self->discreteProbList_ setAuxiliaryObjectWithBoolean:YES];
  [self->discreteProbList_ setLabelVisibleWithBoolean:NO];
  [self->discreteProbList_ setFixedWithBoolean:YES];
  [self->discreteProbList_ setSelectionAllowedWithBoolean:NO];
  return;
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_clearPlotGeoList(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(self->plotGeoList_)) {
    if (geo != nil) {
      [geo setFixedWithBoolean:NO];
      [geo remove];
    }
  }
  [self->plotGeoList_ clear];
}

JavaUtilTreeSet *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_getTempSet(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  if (self->tempSet_ == nil) {
    GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_setAndConsume_tempSet_(self, new_JavaUtilTreeSet_init());
  }
  return self->tempSet_;
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_updateRounding(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self) {
  if (((GeogebraCommonKernelKernel *) nil_chk(self->kernel_))->useSignificantFigures_) {
    if (self->printFigures_ != [self->kernel_ getPrintFigures]) {
      self->printFigures_ = [self->kernel_ getPrintFigures];
      self->printDecimals_ = -1;
      [self updateDiscreteTable];
      [self updateGUI];
    }
  }
  else if (self->printDecimals_ != [self->kernel_ getPrintDecimals]) {
    self->printDecimals_ = [self->kernel_ getPrintDecimals];
    [self updateDiscreteTable];
    [self updateGUI];
  }
}

void GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonKernelAlgosAlgoElement *algo) {
  if (self->removeFromConstruction_) [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:algo];
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView_buildDensityCurveExpressionWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_withBoolean_(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView *self, GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum *type, jboolean cumulative) {
  GeogebraCommonKernelArithmeticMyDouble *param1 = nil, *param2 = nil;
  if (((IOSDoubleArray *) nil_chk(self->parameters_))->size_ > 0) {
    param1 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, IOSDoubleArray_Get(self->parameters_, 0)) autorelease];
  }
  if (self->parameters_->size_ > 1) {
    param2 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, IOSDoubleArray_Get(self->parameters_, 1)) autorelease];
  }
  id<GeogebraCommonKernelStatisticsAlgoDistributionDF> ret = nil;
  GeogebraCommonKernelGeosGeoBoolean *cumulativeGeo = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self->cons_, cumulative) autorelease];
  switch ([type ordinal]) {
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_NORMAL:
    ret = [new_GeogebraCommonKernelStatisticsAlgoNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_STUDENT:
    ret = [new_GeogebraCommonKernelStatisticsAlgoTDistributionDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CHISQUARE:
    ret = [new_GeogebraCommonKernelStatisticsAlgoChiSquaredDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_F:
    ret = [new_GeogebraCommonKernelStatisticsAlgoFDistributionDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_CAUCHY:
    ret = [new_GeogebraCommonKernelStatisticsAlgoCauchyDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_EXPONENTIAL:
    ret = [new_GeogebraCommonKernelStatisticsAlgoExponentialDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_GAMMA:
    ret = [new_GeogebraCommonKernelStatisticsAlgoGammaDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_WEIBULL:
    ret = [new_GeogebraCommonKernelStatisticsAlgoWeibullDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGNORMAL:
    ret = [new_GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_LOGISTIC:
    ret = [new_GeogebraCommonKernelStatisticsAlgoLogisticDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self->cons_, param1, param2, cumulativeGeo) autorelease];
    break;
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_BINOMIAL:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_PASCAL:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_POISSON:
    case GeogebraCommonMainSettingsProbabilityCalculatorSettings_DIST_HYPERGEOMETRIC:
    GeogebraCommonMainApp_errorWithNSString_(@"not continuous");
    break;
    default:
    GeogebraCommonMainApp_errorWithNSString_(@"missing case");
  }
  if (ret != nil) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ret, [GeogebraCommonKernelAlgosAlgoElement class])];
  }
  return [((id<GeogebraCommonKernelStatisticsAlgoDistributionDF>) nil_chk(ret)) getResult];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewProbcalculatorProbabilityCalculatorView)
