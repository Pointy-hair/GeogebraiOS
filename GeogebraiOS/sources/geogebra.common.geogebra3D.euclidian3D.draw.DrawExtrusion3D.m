//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusion3D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusion3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusionOrConify3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoForExtrusion.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPrismForExtrusion.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedConicHeightCylinderForExtrusion.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPolygons
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedConics {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(self, a_view3D, selectedPolygons, selectedConics);
  return self;
}

- (id<GeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>)getAlgoWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)basis
                                                                    withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)height {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrismForExtrusion_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel])) getConstruction], nil, basis, height) autorelease];
}

- (id<GeogebraCommonGeogebra3DKernel3DAlgosAlgoForExtrusion>)getAlgoWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)basis
                                                                        withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)height {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedConicHeightCylinderForExtrusion_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel])) getConstruction], nil, basis, height) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:withJavaUtilArrayList:", "DrawExtrusion3D", NULL, 0x1, NULL, NULL },
    { "getAlgoWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelGeosGeoNumeric:", "getAlgo", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoForExtrusion;", 0x4, NULL, NULL },
    { "getAlgoWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelGeosGeoNumeric:", "getAlgo", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoForExtrusion;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D = { 2, "DrawExtrusion3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPolygons, JavaUtilArrayList *selectedConics) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusionOrConify3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(self, a_view3D, selectedPolygons, selectedConics);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPolygons, JavaUtilArrayList *selectedConics) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(self, a_view3D, selectedPolygons, selectedConics);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D)
