//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitImplicit.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/statistics/AlgoFitImplicit.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/linear/SingularValueDecomposition.h"
#include "org/apache/commons/math/linear/SingularValueDecompositionImpl.h"

@interface GeogebraCommonKernelStatisticsAlgoFitImplicit () {
 @public
  GeogebraCommonKernelGeosGeoList *pointlist_;
  GeogebraCommonKernelGeosGeoElement *orderGeo_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *fitfunction_;
  jint datasize_;
  id<OrgApacheCommonsMathLinearRealMatrix> M_, V_;
}

- (jboolean)makeMatrixes;

- (void)makeFunction;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitImplicit, pointlist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitImplicit, orderGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitImplicit, fitfunction_, GeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitImplicit, M_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitImplicit, V_, id<OrgApacheCommonsMathLinearRealMatrix>)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitImplicit_compute(GeogebraCommonKernelStatisticsAlgoFitImplicit *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelStatisticsAlgoFitImplicit_makeMatrixes(GeogebraCommonKernelStatisticsAlgoFitImplicit *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitImplicit_makeFunction(GeogebraCommonKernelStatisticsAlgoFitImplicit *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitImplicit

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointlist
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)arg {
  GeogebraCommonKernelStatisticsAlgoFitImplicit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, pointlist, arg);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitImplicit();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, pointlist_);
  IOSObjectArray_Set(input_, 1, orderGeo_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:fitfunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)getFit {
  return fitfunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitImplicit_compute(self);
}

- (jboolean)makeMatrixes {
  return GeogebraCommonKernelStatisticsAlgoFitImplicit_makeMatrixes(self);
}

+ (jdouble)powerWithDouble:(jdouble)x
                   withInt:(jint)power {
  return GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(x, power);
}

- (void)makeFunction {
  GeogebraCommonKernelStatisticsAlgoFitImplicit_makeFunction(self);
}

- (void)dealloc {
  RELEASE_(pointlist_);
  RELEASE_(orderGeo_);
  RELEASE_(fitfunction_);
  RELEASE_(M_);
  RELEASE_(V_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoFitImplicit", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFit", NULL, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "makeMatrixes", NULL, "Z", 0x12, NULL, NULL },
    { "powerWithDouble:withInt:", "power", "D", 0x9, NULL, NULL },
    { "makeFunction", NULL, "V", 0x12, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pointlist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "orderGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "fitfunction_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "datasize_", NULL, 0x2, "I", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "V_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitImplicit = { 2, "AlgoFitImplicit", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitImplicit;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitImplicit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelStatisticsAlgoFitImplicit *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *pointlist, id<GeogebraCommonKernelGeosGeoNumberValue> arg) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitImplicit_setAndConsume_orderGeo_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, 2));
  self->datasize_ = 0;
  GeogebraCommonKernelStatisticsAlgoFitImplicit_set_M_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFitImplicit_set_pointlist_(self, pointlist);
  GeogebraCommonKernelStatisticsAlgoFitImplicit_set_orderGeo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(arg, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelStatisticsAlgoFitImplicit_setAndConsume_fitfunction_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitImplicit_compute(self);
  [self->fitfunction_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitImplicit *new_GeogebraCommonKernelStatisticsAlgoFitImplicit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *pointlist, id<GeogebraCommonKernelGeosGeoNumberValue> arg) {
  GeogebraCommonKernelStatisticsAlgoFitImplicit *self = [GeogebraCommonKernelStatisticsAlgoFitImplicit alloc];
  GeogebraCommonKernelStatisticsAlgoFitImplicit_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, pointlist, arg);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitImplicit_compute(GeogebraCommonKernelStatisticsAlgoFitImplicit *self) {
  jint order = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->orderGeo_)) evaluateDouble]);
  self->datasize_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) size];
  if (![self->pointlist_ isDefined] || self->datasize_ < order * (order + 3) / 2) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->fitfunction_)) setUndefined];
    return;
  }
  if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->pointlist_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->fitfunction_)) setUndefined];
    return;
  }
  @try {
    if (!GeogebraCommonKernelStatisticsAlgoFitImplicit_makeMatrixes(self)) {
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->fitfunction_)) setUndefined];
      return;
    }
    id<OrgApacheCommonsMathLinearSingularValueDecomposition> svd = [new_OrgApacheCommonsMathLinearSingularValueDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(self->M_) autorelease];
    GeogebraCommonKernelStatisticsAlgoFitImplicit_set_V_(self, [svd getV]);
    GeogebraCommonKernelStatisticsAlgoFitImplicit_makeFunction(self);
  }
  @catch (JavaLangThrowable *t) {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->fitfunction_)) setUndefined];
    [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
  }
}

jboolean GeogebraCommonKernelStatisticsAlgoFitImplicit_makeMatrixes(GeogebraCommonKernelStatisticsAlgoFitImplicit *self) {
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelGeosGeoPoint *point = nil;
  jdouble x, y;
  jint order = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->orderGeo_)) evaluateDouble]);
  GeogebraCommonKernelStatisticsAlgoFitImplicit_setAndConsume_M_(self, new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(self->datasize_, (order + 1) * (order + 2) / 2));
  for (jint r = 0; r < self->datasize_; r++) {
    geo = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->pointlist_)) getWithInt:r];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      return NO;
    }
    point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
    x = [point getX];
    y = [point getY];
    jint c = 0;
    for (jint i = 0; i <= order; i++) {
      for (jint xpower = 0; xpower <= i; xpower++) {
        jint ypower = i - xpower;
        jdouble val = GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(x, xpower) * GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(y, ypower);
        [self->M_ setEntryWithInt:r withInt:c++ withDouble:val];
      }
    }
  }
  return YES;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(jdouble x, jint power) {
  GeogebraCommonKernelStatisticsAlgoFitImplicit_initialize();
  if (power == 0) {
    return 1;
  }
  if (power == 1) {
    return x;
  }
  jdouble ret = x;
  while (power > 1) {
    ret *= x;
    power--;
  }
  return ret;
}

void GeogebraCommonKernelStatisticsAlgoFitImplicit_makeFunction(GeogebraCommonKernelStatisticsAlgoFitImplicit *self) {
  jint order = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->orderGeo_)) evaluateDouble]);
  IOSObjectArray *coeffs = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ order + 1, order + 1 }];
  id<OrgApacheCommonsMathLinearRealVector> coeffsRV = [self->V_ getColumnVectorWithInt:[((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(self->V_)) getColumnDimension] - 1];
  jint c = 0;
  for (jint i = 0; i <= order; i++) {
    for (jint j = 0; j <= i; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeffs, j)), i - j) = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(coeffsRV)) getEntryWithInt:c++];
    }
  }
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->fitfunction_)) setCoeffWithDoubleArray2:coeffs];
  [self->fitfunction_ setDefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitImplicit)
