//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPyramid.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNet.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronNetPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedronNet.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid () {
 @public
  GeogebraCommonKernelMatrixCoords *p1_;
}

- (void)createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *)net
                                                                       withInt:(jint)index
                                                                       withInt:(jint)newBottomPointsLength;

- (void)setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)polygon;

- (void)updateSideWithInt:(jint)index
                  withInt:(jint)newBottomPointsLength;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid, p1_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_withInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *net, jint index, jint newBottomPointsLength);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_updateSideWithInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, jint index, jint newBottomPointsLength);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
   withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)p
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)v {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, p, v);
  return self;
}

- (jint)getPointLengthFromLabelsLengthWithInt:(jint)length {
  return (length - 2) / 6;
}

- (void)createNetWithInt:(jint)n {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *net = [self getNet];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsBottom_)) adjustOutputSizeWithInt:n withBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsSide_)) adjustOutputSizeWithInt:n withBoolean:NO];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *) nil_chk(net)) startNewFace];
  for (jint i = 0; i < n; i++) {
    [net addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:[outputPointsBottom_ getElementWithInt:i]];
  }
  [net endCurrentFace];
  for (jint i = 0; i < n; i++) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_withInt_withInt_(self, net, i, n);
  }
}

- (void)createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *)net
                                                                       withInt:(jint)index
                                                                       withInt:(jint)newBottomPointsLength {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_withInt_withInt_(self, net, index, newBottomPointsLength);
}

- (void)setOutputSideTopWithInt:(jint)n
withGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)polygon
                        withInt:(jint)step
withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)segments {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_(self, polygon);
}

- (void)setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)polygon {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_(self, polygon);
}

- (void)adjustOutputSizeWithInt:(jint)newBottomPointsLength {
  [super adjustOutputSizeWithInt:newBottomPointsLength];
  jint nOld = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsSide_)) size];
  if (newBottomPointsLength > bottomPointsLength_) {
    for (jint i = bottomPointsLength_; i < newBottomPointsLength && i <= nOld; i++) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> segmentBottom = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) getElementWithInt:i - 1];
      [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segmentBottom)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsBottom_)) getElementWithInt:i - 1] withGeogebraCommonKernelKernelNDGeoPointND:[outputPointsBottom_ getElementWithInt:i]];
    }
    for (jint i = bottomPointsLength_ - 1; i < newBottomPointsLength && i < nOld; i++) {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_updateSideWithInt_withInt_(self, i, newBottomPointsLength);
    }
  }
  if (newBottomPointsLength > nOld) {
    [outputPointsSide_ adjustOutputSizeWithInt:newBottomPointsLength withBoolean:NO];
    [outputPointsSide_ setLabelsWithNSStringArray:nil];
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *net = [self getNet];
    for (jint i = nOld; i < newBottomPointsLength; i++) {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_withInt_withInt_(self, net, i, newBottomPointsLength);
      GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *) nil_chk(net)) createPolygonWithInt:i + 1];
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_(self, polygon);
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) getSegments]), 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
    }
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) setLabelsWithNSStringArray:nil];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) setLabelsWithNSStringArray:nil];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) setLabelsWithNSStringArray:nil];
    [self refreshOutput];
  }
  if (newBottomPointsLength > bottomPointsLength_) {
    [self updateBottomWithInt:newBottomPointsLength];
  }
  else if (newBottomPointsLength < bottomPointsLength_) {
    for (jint i = newBottomPointsLength; i < bottomPointsLength_; i++) {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([outputPointsSide_ getElementWithInt:i])) setUndefined];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsBottom_)) getElementWithInt:i])) setUndefined];
    }
    id<GeogebraCommonKernelKernelNDGeoSegmentND> segmentBottom = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) getElementWithInt:newBottomPointsLength - 1];
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segmentBottom)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsBottom_)) getElementWithInt:newBottomPointsLength - 1] withGeogebraCommonKernelKernelNDGeoPointND:[outputPointsBottom_ getElementWithInt:0]];
    [self updateBottomWithInt:newBottomPointsLength];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_updateSideWithInt_withInt_(self, newBottomPointsLength - 1, newBottomPointsLength);
  }
  bottomPointsLength_ = newBottomPointsLength;
}

- (void)updateSideWithInt:(jint)index
                  withInt:(jint)newBottomPointsLength {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_updateSideWithInt_withInt_(self, index, newBottomPointsLength);
}

- (void)computeWithDouble:(jdouble)f
withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)bottomPolygon
withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)points {
  if (p1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setAndConsume_p1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  GeogebraCommonKernelMatrixCoords *topCoords = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(p_)) getTopPoint];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(topCoords)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(bottomPolygon)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:p1_];
  jdouble d1 = [p_ getOrientedHeight];
  GeogebraCommonKernelMatrixCoords *faceDirection = [bottomPolygon getDirectionInD3];
  if (d1 < 0) {
    f *= -1;
    d1 *= -1;
  }
  if ([bottomPolygon isConvexInverseDirection]) {
    f *= -1;
    faceDirection = [((GeogebraCommonKernelMatrixCoords *) nil_chk(faceDirection)) mulWithDouble:-1];
  }
  jint n = ((IOSObjectArray *) nil_chk(points))->size_;
  GeogebraCommonKernelMatrixCoords *o2 = IOSObjectArray_Get(points, 0);
  for (jint i = 0; i < n; i++) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *wpoint = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPointsSide_)) getElementWithInt:i];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(wpoint)) setCoordsWithGeogebraCommonKernelMatrixCoords:topCoords withBoolean:NO];
    GeogebraCommonKernelMatrixCoords *o = o2;
    o2 = IOSObjectArray_Get(points, (i + 1) % n);
    GeogebraCommonKernelMatrixCoords *vs = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(o2)) subWithGeogebraCommonKernelMatrixCoords:o])) normalized];
    [self rotateWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:wpoint withGeogebraCommonKernelMatrixCoords:topCoords withGeogebraCommonKernelMatrixCoords:p1_ withGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:vs withDouble:f withGeogebraCommonKernelMatrixCoords:faceDirection withDouble:d1 withBoolean:NO];
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *) nil_chk([self getNet])) setAreaWithDouble:[p_ getArea]];
}

- (void)dealloc {
  RELEASE_(p1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoPolyhedronNetPyramid", NULL, 0x1, NULL, NULL },
    { "getPointLengthFromLabelsLengthWithInt:", "getPointLengthFromLabelsLength", "I", 0x4, NULL, NULL },
    { "createNetWithInt:", "createNet", "V", 0x4, NULL, NULL },
    { "createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet:withInt:withInt:", "createSideFace", "V", 0x2, NULL, NULL },
    { "setOutputSideTopWithInt:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D:withInt:withGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "setOutputSideTop", "V", 0x4, NULL, NULL },
    { "setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D:", "setOutputSide", "V", 0x2, NULL, NULL },
    { "adjustOutputSizeWithInt:", "adjustOutputSize", "V", 0x4, NULL, NULL },
    { "updateSideWithInt:withInt:", "updateSide", "V", 0x2, NULL, NULL },
    { "computeWithDouble:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelMatrixCoordsArray:", "compute", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid = { 2, "AlgoPolyhedronNetPyramid", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, id<GeogebraCommonKernelArithmeticNumberValue> v) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNet_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, p, v);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *p, id<GeogebraCommonKernelArithmeticNumberValue> v) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, p, v);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_createSideFaceWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet_withInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *net, jint index, jint newBottomPointsLength) {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedronNet *) nil_chk(net)) startNewFace];
  [net addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPointsBottom_)) getElementWithInt:index]];
  [net addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:[self->outputPointsBottom_ getElementWithInt:(index + 1) % newBottomPointsLength]];
  [net addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPointsSide_)) getElementWithInt:index]];
  [net endCurrentFace];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_setOutputSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon) {
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygonsSide_)) addOutputWithGeogebraCommonKernelGeosGeoElement:polygon withBoolean:NO];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegmentsSide_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) getSegments]), 2), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
  [self->outputSegmentsSide_ addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(nil_chk([polygon getSegments]), 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid_updateSideWithInt_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid *self, jint index, jint newBottomPointsLength) {
  id<GeogebraCommonKernelKernelNDGeoPointND> pointBottom1 = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPointsBottom_)) getElementWithInt:index];
  id<GeogebraCommonKernelKernelNDGeoPointND> pointBottom2 = [self->outputPointsBottom_ getElementWithInt:(index + 1) % newBottomPointsLength];
  id<GeogebraCommonKernelKernelNDGeoPointND> pointSide = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPointsSide_)) getElementWithInt:index];
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segmentBottom = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegmentsBottom_)) getElementWithInt:index];
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segmentSide1 = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegmentsSide_)) getElementWithInt:2 * index];
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segmentSide2 = [self->outputSegmentsSide_ getElementWithInt:(2 * index + 1) % (2 * newBottomPointsLength)];
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segmentSide2)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:pointBottom2 withGeogebraCommonKernelKernelNDGeoPointND:pointSide];
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segmentSide1)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:pointSide withGeogebraCommonKernelKernelNDGeoPointND:pointBottom1];
  GeogebraCommonKernelGeosGeoPolygon *polygon = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygonsSide_)) getElementWithInt:index];
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(points, 0, pointBottom1);
  IOSObjectArray_Set(points, 1, pointBottom2);
  IOSObjectArray_Set(points, 2, pointSide);
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  IOSObjectArray_Set(s, 0, segmentBottom);
  IOSObjectArray_Set(s, 1, segmentSide2);
  IOSObjectArray_Set(s, 2, segmentSide1);
  [polygon setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:s];
  [polygon calcArea];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronNetPyramid)
