//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/TransformablePoint.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/geom/TransformablePoint.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/Misc.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList.h"
#include "geogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple.h"
#include "java/lang/System.h"

@interface GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint () {
 @public
  IOSIntArray *goalIndices_;
  IOSDoubleArray *transformPercents_;
  IOSObjectArray *states_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint, goalIndices_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint, transformPercents_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint, states_, IOSObjectArray *)

@interface GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State () {
 @public
  jboolean real_;
}

@end

@implementation GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint

- (instancetype)initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)points
                                                                                                       withInt:(jint)firstGoalIndex
       withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *)state {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_(self, points, firstGoalIndex, state);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *)points
                                                                                                       withInt:(jint)firstGoalIndex {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(self, points, firstGoalIndex);
  return self;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)getGoalPointWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points_)) getWithInt:IOSIntArray_Get(nil_chk(goalIndices_), i)];
}

- (jboolean)equalsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *)T {
  IOSClass *tClass = [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk(T)) getClass];
  if ([self getClass] != tClass) return NO;
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *t = (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *) check_class_cast(T, [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint class]);
  if ([super equalsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:t] && points_ == t->points_) {
    if (((IOSIntArray *) nil_chk(goalIndices_))->size_ == t->goalIndices_->size_ && ((IOSDoubleArray *) nil_chk(transformPercents_))->size_ == t->transformPercents_->size_) {
      for (jint i = 0; i < goalIndices_->size_; ++i) if (IOSIntArray_Get(goalIndices_, i) != IOSIntArray_Get(t->goalIndices_, i)) return NO;
      for (jint i = 0; i < transformPercents_->size_; ++i) if (IOSDoubleArray_Get(transformPercents_, i) != IOSDoubleArray_Get(t->transformPercents_, i)) return NO;
      return YES;
    }
  }
  return NO;
}

- (GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *)getStateWithDouble:(jdouble)truncPercent {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *state = nil;
  if (truncPercent < 0) {
    truncPercent = 0;
  }
  else if (truncPercent >= IOSDoubleArray_Get(transformPercents_, ((IOSDoubleArray *) nil_chk(transformPercents_))->size_ - 1)) {
    truncPercent = IOSDoubleArray_Get(transformPercents_, transformPercents_->size_ - 1);
  }
  if (truncPercent < IOSDoubleArray_Get(nil_chk(transformPercents_), 0)) {
    state = IOSObjectArray_Get(nil_chk(states_), 0);
  }
  else {
    for (jint i = transformPercents_->size_ - 1; i >= 0; --i) {
      if (truncPercent >= IOSDoubleArray_Get(transformPercents_, i)) {
        state = IOSObjectArray_Get(nil_chk(states_), i);
        break;
      }
    }
  }
  return state;
}

- (void)transformWithDouble:(jdouble)truncPercent {
  truncPercent = GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsMisc_clampWithDouble_withDouble_withDouble_(truncPercent, IOSDoubleArray_Get(nil_chk(transformPercents_), 0), IOSDoubleArray_Get(transformPercents_, transformPercents_->size_ - 1));
  if (truncPercent == IOSDoubleArray_Get(transformPercents_, 0)) {
    [self becomeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getGoalPointWithInt:0]];
    return;
  }
  for (jint i = 1; i < transformPercents_->size_; ++i) {
    if (truncPercent <= IOSDoubleArray_Get(transformPercents_, i)) {
      truncPercent -= IOSDoubleArray_Get(transformPercents_, i - 1);
      [self becomeWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple *) nil_chk([self getGoalPointWithInt:i - 1])) midWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:[self getGoalPointWithInt:i] withDouble:truncPercent * 100 / (IOSDoubleArray_Get(transformPercents_, i) - IOSDoubleArray_Get(transformPercents_, i - 1))]];
      return;
    }
  }
}

- (void)addStageWithInt:(jint)goalIndex
             withDouble:(jdouble)truncPercent {
  [self addStageWithInt:goalIndex withDouble:truncPercent withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init() autorelease]];
}

- (void)addStageWithInt:(jint)goalIndex
             withDouble:(jdouble)truncPercent
withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *)state {
  if (goalIndices_ == nil) {
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_setAndConsume_goalIndices_(self, [IOSIntArray newArrayWithInts:(jint[]){ goalIndex } count:1]);
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_setAndConsume_transformPercents_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ truncPercent } count:1]);
  }
  else {
    IOSIntArray *tempGoals = [IOSIntArray arrayWithLength:goalIndices_->size_ + 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(goalIndices_, 0, tempGoals, 0, goalIndices_->size_);
    *IOSIntArray_GetRef(tempGoals, tempGoals->size_ - 1) = goalIndex;
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_set_goalIndices_(self, tempGoals);
    IOSDoubleArray *tempTruncPercents = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(transformPercents_))->size_ + 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(transformPercents_, 0, tempTruncPercents, 0, transformPercents_->size_);
    *IOSDoubleArray_GetRef(tempTruncPercents, tempTruncPercents->size_ - 1) = truncPercent;
    GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_set_transformPercents_(self, tempTruncPercents);
  }
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(goalIndices_);
  RELEASE_(transformPercents_);
  RELEASE_(states_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withInt:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:", "TransformablePoint", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList:withInt:", "TransformablePoint", NULL, 0x0, NULL, NULL },
    { "getGoalPointWithInt:", "getGoalPoint", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.OrderedTriple;", 0x0, NULL, NULL },
    { "equalsWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple:", "equals", "Z", 0x1, NULL, NULL },
    { "getStateWithDouble:", "getState", "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.TransformablePoint$State;", 0x11, NULL, NULL },
    { "transformWithDouble:", "transform", "V", 0x11, NULL, NULL },
    { "addStageWithInt:withDouble:", "addStage", "V", 0x1, NULL, NULL },
    { "addStageWithInt:withDouble:withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:", "addStage", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "points_", NULL, 0x4, "Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.utils.ObjectList;", NULL, "Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/ObjectList<Lgeogebra/common/geogebra3D/archimedean/com/quantimegroup/solutions/archimedean/utils/OrderedTriple;>;",  },
    { "goalIndices_", NULL, 0x2, "[I", NULL, NULL,  },
    { "transformPercents_", NULL, 0x2, "[D", NULL, NULL,  },
    { "states_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.TransformablePoint$State;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom.TransformablePoint$State;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint = { 2, "TransformablePoint", "geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", NULL, 0x0, 8, methods, 4, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint;
}

@end

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *self, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points, jint firstGoalIndex, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *state) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(self, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points)) getWithInt:firstGoalIndex]);
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_set_points_(self, points);
  [self addStageWithInt:firstGoalIndex withDouble:0 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:state];
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points, jint firstGoalIndex, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *state) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_(self, points, firstGoalIndex, state);
  return self;
}

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *self, GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points, jint firstGoalIndex) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsOrderedTriple_(self, [((GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *) nil_chk(points)) getWithInt:firstGoalIndex]);
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_set_points_(self, points);
  [self addStageWithInt:firstGoalIndex withDouble:0 withGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State:[new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init() autorelease]];
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList *points, jint firstGoalIndex) {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_initWithGeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanUtilsObjectList_withInt_(self, points, firstGoalIndex);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint)

@implementation GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State

- (jboolean)isReal {
  return real_;
}

- (instancetype)init {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isReal", NULL, "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "real_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State = { 2, "State", "geogebra.common.geogebra3D.archimedean.com.quantimegroup.solutions.archimedean.geom", "TransformablePoint", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State;
}

@end

void GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *self) {
  NSObject_init(self);
  self->real_ = YES;
}

GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *new_GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init() {
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State *self = [GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State alloc];
  GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DArchimedeanComQuantimegroupSolutionsArchimedeanGeomTransformablePoint_State)
