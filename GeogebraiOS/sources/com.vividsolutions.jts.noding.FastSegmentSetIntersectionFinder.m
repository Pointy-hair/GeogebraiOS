//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/noding/FastSegmentSetIntersectionFinder.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/noding/FastSegmentSetIntersectionFinder.h"
#include "com/vividsolutions/jts/noding/MCIndexSegmentSetMutualIntersector.h"
#include "com/vividsolutions/jts/noding/SegmentIntersectionDetector.h"
#include "com/vividsolutions/jts/noding/SegmentSetMutualIntersector.h"
#include "java/util/Collection.h"

@interface ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder () {
 @public
  ComVividsolutionsJtsNodingSegmentSetMutualIntersector *segSetMutInt_;
}

- (void)init__WithJavaUtilCollection:(id<JavaUtilCollection>)baseSegStrings OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder, segSetMutInt_, ComVividsolutionsJtsNodingSegmentSetMutualIntersector *)

static ComVividsolutionsJtsAlgorithmLineIntersector *ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_li_;
J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_STATIC_FIELD_SETTER(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)

__attribute__((unused)) static void ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_init__WithJavaUtilCollection_(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *self, id<JavaUtilCollection> baseSegStrings);

J2OBJC_INITIALIZED_DEFN(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder)

@implementation ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)baseSegStrings {
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_initWithJavaUtilCollection_(self, baseSegStrings);
  return self;
}

- (void)init__WithJavaUtilCollection:(id<JavaUtilCollection>)baseSegStrings {
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_init__WithJavaUtilCollection_(self, baseSegStrings);
}

- (ComVividsolutionsJtsNodingSegmentSetMutualIntersector *)getSegmentSetIntersector {
  return segSetMutInt_;
}

- (jboolean)intersectsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings {
  ComVividsolutionsJtsNodingSegmentIntersectionDetector *intFinder = [new_ComVividsolutionsJtsNodingSegmentIntersectionDetector_initWithComVividsolutionsJtsAlgorithmLineIntersector_(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_li_) autorelease];
  [((ComVividsolutionsJtsNodingSegmentSetMutualIntersector *) nil_chk(segSetMutInt_)) setSegmentIntersectorWithComVividsolutionsJtsNodingSegmentIntersector:intFinder];
  [segSetMutInt_ processWithJavaUtilCollection:segStrings];
  return [intFinder hasIntersection];
}

- (jboolean)intersectsWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
withComVividsolutionsJtsNodingSegmentIntersectionDetector:(ComVividsolutionsJtsNodingSegmentIntersectionDetector *)intDetector {
  [((ComVividsolutionsJtsNodingSegmentSetMutualIntersector *) nil_chk(segSetMutInt_)) setSegmentIntersectorWithComVividsolutionsJtsNodingSegmentIntersector:intDetector];
  [segSetMutInt_ processWithJavaUtilCollection:segStrings];
  return [((ComVividsolutionsJtsNodingSegmentIntersectionDetector *) nil_chk(intDetector)) hasIntersection];
}

- (void)dealloc {
  RELEASE_(segSetMutInt_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder class]) {
    JreStrongAssignAndConsume(&ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_li_, nil, new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init());
    J2OBJC_SET_INITIALIZED(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilCollection:", "FastSegmentSetIntersectionFinder", NULL, 0x1, NULL, NULL },
    { "init__WithJavaUtilCollection:", "init", "V", 0x2, NULL, NULL },
    { "getSegmentSetIntersector", NULL, "Lcom.vividsolutions.jts.noding.SegmentSetMutualIntersector;", 0x1, NULL, NULL },
    { "intersectsWithJavaUtilCollection:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithJavaUtilCollection:withComVividsolutionsJtsNodingSegmentIntersectionDetector:", "intersects", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segSetMutInt_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.SegmentSetMutualIntersector;", NULL, NULL,  },
    { "li_", NULL, 0xa, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", &ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_li_, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder = { 2, "FastSegmentSetIntersectionFinder", "com.vividsolutions.jts.noding", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder;
}

@end

void ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_initWithJavaUtilCollection_(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *self, id<JavaUtilCollection> baseSegStrings) {
  NSObject_init(self);
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_init__WithJavaUtilCollection_(self, baseSegStrings);
}

ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *new_ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_initWithJavaUtilCollection_(id<JavaUtilCollection> baseSegStrings) {
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *self = [ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder alloc];
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_initWithJavaUtilCollection_(self, baseSegStrings);
  return self;
}

void ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_init__WithJavaUtilCollection_(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *self, id<JavaUtilCollection> baseSegStrings) {
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_setAndConsume_segSetMutInt_(self, new_ComVividsolutionsJtsNodingMCIndexSegmentSetMutualIntersector_init());
  [self->segSetMutInt_ setBaseSegmentsWithJavaUtilCollection:baseSegStrings];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder)
