//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/io/MyXMLHandler.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/DrawEquation.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/io/MyXMLHandler.h"
#include "geogebra/common/io/layout/DockPanelData.h"
#include "geogebra/common/io/layout/DockSplitPaneData.h"
#include "geogebra/common/io/layout/Perspective.h"
#include "geogebra/common/javax/swing/SwingConstants.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/KernelCAS.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/MacroKernel.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/PathRegionHandling.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "geogebra/common/kernel/geos/AngleProperties.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/LimitedPath.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/geos/TextProperties.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/CoordStyle.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/settings/AlgebraSettings.h"
#include "geogebra/common/main/settings/CASSettings.h"
#include "geogebra/common/main/settings/ConstructionProtocolSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/KeyboardSettings.h"
#include "geogebra/common/main/settings/LayoutSettings.h"
#include "geogebra/common/main/settings/ProbabilityCalculatorSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/main/settings/SpreadsheetSettings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/ScriptManager.h"
#include "geogebra/common/plugin/ScriptType.h"
#include "geogebra/common/plugin/script/Script.h"
#include "geogebra/common/util/SpreadsheetTraceSettings.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/Set.h"
#include "org/xml/sax/SAXException.h"

#define GeogebraCommonIoMyXMLHandler_MODE_INVALID -1
#define GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA 1
#define GeogebraCommonIoMyXMLHandler_MODE_MACRO 50
#define GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW 100
#define GeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW 150
#define GeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW 151
#define GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL 161
#define GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR 162
#define GeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL 163
#define GeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL 164
#define GeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL 165
#define GeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR 170
#define GeogebraCommonIoMyXMLHandler_MODE_KERNEL 200
#define GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION 300
#define GeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT 301
#define GeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND 302
#define GeogebraCommonIoMyXMLHandler_MODE_GUI 400
#define GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES 401
#define GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE 402
#define GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES 403
#define GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS 404
#define GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT 1
#define GeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT 0
#define GeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE 4.0

@interface GeogebraCommonIoMyXMLHandler () {
 @public
  jint mode_;
  jint constMode_;
  jint casMode_;
  GeogebraCommonKernelGeosGeoCasCell *geoCasCell_;
  GeogebraCommonKernelArithmeticCommand *cmd_;
  GeogebraCommonKernelMacro *macro_;
  IOSObjectArray *macroInputLabels_, *macroOutputLabels_;
  IOSObjectArray *cmdOutput_;
  jboolean startAnimation_;
  jint docPointStyle_;
  GeogebraCommonKernelKernel *kernel_, *origKernel_;
  GeogebraCommonKernelConstruction *origCons_;
  GeogebraCommonKernelParserParser *parser_, *origParser_;
  JavaUtilLinkedList *startPointList_;
  JavaUtilLinkedList *linkedGeoList_;
  JavaUtilLinkedList *showObjectConditionList_;
  JavaUtilLinkedList *dynamicColorList_;
  JavaUtilLinkedList *animationSpeedList_;
  JavaUtilLinkedList *animationStepList_;
  JavaUtilLinkedList *animatingList_;
  JavaUtilLinkedList *minMaxList_;
  jint consStep_;
  jdouble ggbFileFormat_;
  jboolean hasGuiElement_;
  GeogebraCommonIoLayoutPerspective *tmp_perspective_;
  JavaUtilArrayList *tmp_perspectives_;
  JavaUtilArrayList *tmp_panes_;
  JavaUtilArrayList *tmp_views_;
  jint tmp_sp1_, tmp_sp2_;
  jboolean tmp_spHorizontal_;
  jboolean tmp_showAlgebra_, tmp_showSpreadsheet_;
  JavaUtilHashMap *xmin_, *xmax_, *ymin_, *ymax_;
}

- (void)resetWithBoolean:(jboolean)start;

- (void)initKernelVars OBJC_METHOD_FAMILY_NONE;

- (void)startScriptingElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGeoGebraElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)handleKeyboardWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startMacroElementWithNSString:(NSString *)eName
            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleExtraTagWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startEuclidianViewElementWithNSString:(NSString *)eName
                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startSpreadsheetViewElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startProbabilityCalculatorElementWithNSString:(NSString *)eName
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleProbabilityDistributionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleProbabilityIntervalWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startAlgebraViewElementWithNSString:(NSString *)eName
                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetColumnWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetFormatWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetRowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGridWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startKernelElementWithNSString:(NSString *)eName
             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAngleUnitWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelInvTrigWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelStartAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelLocalizationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelContinuousWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)createCompabilityLayout;

+ (jboolean)handleConsProtColumnsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleConsProtocolWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleConsProtNavigationBarWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleGuiShowWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleGuiSettingsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleGraphicsSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSplitDividerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleToolbarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleWindowSizeWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleFontWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleMenuFontWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleTooltipSettingsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleMouseWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jboolean)handleLabelingStyleWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiPerspectivesElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePerspectiveWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endGuiPerspectivesElement;

- (void)startGuiPerspectiveElementWithNSString:(NSString *)eName
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDockBarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endGuiPerspectiveElement;

- (void)startGuiViewsElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleViewWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startGuiPanesElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePaneWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)handleConstructionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)initMacroWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs OBJC_METHOD_FAMILY_NONE;

- (void)endMacro;

- (void)handleWorksheetTextWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCasCellWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endCasCellWithNSString:(NSString *)eName;

- (void)startCellPair;

- (void)endCellPairWithNSString:(NSString *)eName;

- (void)startCellOutputElementWithNSString:(NSString *)eName
                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCellInputElementWithNSString:(NSString *)eName
                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCellTextElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startConstructionElementWithNSString:(NSString *)eName
                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)endConstructionElementWithNSString:(NSString *)eName;

- (void)processEvSizes;

- (GeogebraCommonKernelGeosGeoElement *)getGeoElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDimensionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (jchar)firstCharWithNSString:(NSString *)eName;

- (jboolean)handleShowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleShowOnAxisWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleObjColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleBgColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (GeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (GeogebraCommonAwtGColor *)handleColorAlphaAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLineStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleDecorationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEqnStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCurveParamWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleListenersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCaptionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleScriptWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
           withGeogebraCommonPluginScriptTypeEnum:(GeogebraCommonPluginScriptTypeEnum *)type;

- (jboolean)handleConditionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCheckboxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleValueWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePointSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handlePointStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLayerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasCellInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCasCellOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSliderWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSpreadsheetTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleShowTrimmedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSelectionAllowedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSelectedIndexWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleFixedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleBreakpointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleFileWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextFontWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTextFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleInBackgroundWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleInterpolateWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAuxiliaryWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleIsLaTeXWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleArcSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAllowReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleComboBoxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAngleStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleForceReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)processStartPointList;

- (jboolean)handleLengthWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleListTypeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLinkedGeoWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)processLinkedGeoList;

- (void)processShowObjectConditionList;

- (void)processAnimationSpeedList;

- (void)processAnimationStepList;

- (void)processAnimatingList;

- (void)processMinMaxList;

- (void)processDynamicColorList;

- (jboolean)handleEigenvectorsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleMatrixWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLabelOffsetWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleLabelModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleTooltipModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCoefficientsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleUserInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (GeogebraCommonKernelArithmeticCommand *)getCommandWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startCommandElementWithNSString:(NSString *)eName
              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleCmdOutputSizesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

+ (IOSObjectArray *)getAttributeStringsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (void)startExpressionElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

- (jboolean)handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, geoCasCell_, GeogebraCommonKernelGeosGeoCasCell *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, cmd_, GeogebraCommonKernelArithmeticCommand *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, macro_, GeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, macroInputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, macroOutputLabels_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, cmdOutput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, origKernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, origCons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, parser_, GeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, origParser_, GeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, startPointList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, linkedGeoList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, showObjectConditionList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, dynamicColorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, animationSpeedList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, animationStepList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, animatingList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, minMaxList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, tmp_perspective_, GeogebraCommonIoLayoutPerspective *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, tmp_perspectives_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, tmp_panes_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, tmp_views_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, xmin_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, xmax_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, ymin_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler, ymax_, JavaUtilHashMap *)

static jdouble GeogebraCommonIoMyXMLHandler_FORMAT_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, FORMAT_, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_INVALID, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GEOGEBRA, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_MACRO, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_EUCLIDIAN_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_SPREADSHEET_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_ALGEBRA_VIEW, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CONST_CAS_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CAS_CELL_PAIR, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CAS_INPUT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CAS_OUTPUT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CAS_TEXT_CELL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_PROBABILITY_CALCULATOR, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_KERNEL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CONSTRUCTION, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CONST_GEO_ELEMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_CONST_COMMAND, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GUI, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVES, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE_PANES, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MODE_GUI_PERSPECTIVE_VIEWS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, JSplitPane_HORIZONTAL_SPLIT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, JSplitPane_VERTICAL_SPLIT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, MIN_TEXT_SIZE, jdouble)

static jboolean GeogebraCommonIoMyXMLHandler_isPreferencesXML_ = NO;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoMyXMLHandler, isPreferencesXML_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonIoMyXMLHandler, isPreferencesXML_, jboolean)

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_resetWithBoolean_(GeogebraCommonIoMyXMLHandler *self, jboolean start);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_initKernelVars(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleGridWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_createCompabilityLayout(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleGuiShowWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleGuiSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleWindowSizeWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleMenuFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleMouseWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLabelingStyleWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endMacro(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCellPair(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processEvSizes(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jchar GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(NSString *eName);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static GeogebraCommonAwtGColor *GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static GeogebraCommonAwtGColor *GeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withGeogebraCommonPluginScriptTypeEnum_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs, GeogebraCommonPluginScriptTypeEnum *type);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processStartPointList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processLinkedGeoList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processShowObjectConditionList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processAnimationSpeedList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processAnimationStepList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processAnimatingList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processMinMaxList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_processDynamicColorList(GeogebraCommonIoMyXMLHandler *self);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static GeogebraCommonKernelArithmeticCommand *GeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

__attribute__((unused)) static jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs);

@interface GeogebraCommonIoMyXMLHandler_GeoExpPair : NSObject {
 @public
  GeogebraCommonKernelGeosGeoElement *geoElement_;
  NSString *exp_;
}

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                                        withNSString:(NSString *)exp;

- (GeogebraCommonKernelGeosGeoElement *)getGeo;

- (void)setGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonIoMyXMLHandler_GeoExpPair)

J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_GeoExpPair, geoElement_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_GeoExpPair, exp_, NSString *)

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonIoMyXMLHandler_GeoExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *exp);

__attribute__((unused)) static GeogebraCommonIoMyXMLHandler_GeoExpPair *new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *exp) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonIoMyXMLHandler_GeoExpPair)

@interface GeogebraCommonIoMyXMLHandler_GeoNumericMinMax : NSObject {
 @public
  GeogebraCommonKernelGeosGeoElement *geoElement_;
  NSString *min_;
  NSString *max_;
}

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                                        withNSString:(NSString *)min
                                        withNSString:(NSString *)max;

- (GeogebraCommonKernelGeosGeoElement *)getGeo;

- (void)setGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax, geoElement_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax, min_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax, max_, NSString *)

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self, GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max);

__attribute__((unused)) static GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *new_GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

@interface GeogebraCommonIoMyXMLHandler_LocateableExpPair : NSObject {
 @public
  id<GeogebraCommonKernelLocateable> locateable_;
  NSString *exp_;
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  jint number_;
}

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
                  withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)g
                                        withNSString:(NSString *)s
                                             withInt:(jint)n;

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
                  withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)g
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                             withInt:(jint)n;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonIoMyXMLHandler_LocateableExpPair)

J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_LocateableExpPair, locateable_, id<GeogebraCommonKernelLocateable>)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_LocateableExpPair, exp_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoMyXMLHandler_LocateableExpPair, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(GeogebraCommonIoMyXMLHandler_LocateableExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, NSString *s, jint n);

__attribute__((unused)) static GeogebraCommonIoMyXMLHandler_LocateableExpPair *new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, NSString *s, jint n) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonIoMyXMLHandler_LocateableExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, id<GeogebraCommonKernelKernelNDGeoPointND> p, jint n);

__attribute__((unused)) static GeogebraCommonIoMyXMLHandler_LocateableExpPair *new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, id<GeogebraCommonKernelKernelNDGeoPointND> p, jint n) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonIoMyXMLHandler_LocateableExpPair)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonIoMyXMLHandler)

IOSIntArray *GeogebraCommonIoMyXMLHandler_menuFontSizes_;
IOSObjectArray *GeogebraCommonIoMyXMLHandler_tooltipTimeouts_;
IOSObjectArray *GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_;

@implementation GeogebraCommonIoMyXMLHandler

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
              withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonIoMyXMLHandler_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

- (void)resetWithBoolean:(jboolean)start {
  GeogebraCommonIoMyXMLHandler_resetWithBoolean_(self, start);
}

- (void)initKernelVars {
  GeogebraCommonIoMyXMLHandler_initKernelVars(self);
}

- (jint)getConsStep {
  return consStep_;
}

+ (JavaLangInteger *)getTimeoutOptionWithLong:(jlong)integer {
  return GeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(integer);
}

- (void)textWithNSString:(NSString *)str {
}

- (void)startDocument {
  GeogebraCommonIoMyXMLHandler_resetWithBoolean_(self, YES);
}

- (void)endDocument {
  if (mode_ == GeogebraCommonIoMyXMLHandler_MODE_INVALID) @throw [new_OrgXmlSaxSAXException_initWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"XMLTagANotFound" withNSString:@"<geogebra>"]) autorelease];
}

- (void)startElementWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  switch (mode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA:
    GeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW:
    GeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D:
    [self startEuclidianView3DElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW:
    GeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW:
    GeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR:
    GeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_KERNEL:
    GeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_MACRO:
    GeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    GeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI:
    GeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES:
    GeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE:
    GeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES:
    GeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS:
    GeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_INVALID:
    if ([@"geogebra" isEqual:eName]) {
      mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
      @try {
        ggbFileFormat_ = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"format"]);
        ggbFileFormat_ = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(ggbFileFormat_);
        if (ggbFileFormat_ > GeogebraCommonIoMyXMLHandler_FORMAT_) {
          GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$D", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"FileFormatNewer"], @": ", ggbFileFormat_));
        }
        if (ggbFileFormat_ < 3.0) {
          if (!([kernel_ isKindOfClass:[GeogebraCommonKernelMacroKernel class]])) [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setContinuousWithBoolean:YES];
          *GeogebraCommonPluginEuclidianStyleConstants_getRef_automaticGridDistanceFactor_() = 0.5;
        }
      }
      @catch (JavaLangException *e) {
        @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, @"FileFormatUnknown") autorelease];
      }
      NSString *ggbVersion = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"version"];
      [((GeogebraCommonMainApp *) nil_chk(app_)) setFileVersionWithNSString:ggbVersion];
      NSString *uniqueId = [attrs getWithId:@"id"];
      if (uniqueId != nil) [app_ setUniqueIdWithNSString:uniqueId];
    }
    break;
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I", @"unknown mode: ", mode_)];
  }
}

- (void)startScriptingElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endElementWithNSString:(NSString *)eName {
  switch (mode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet]) {
      GeogebraCommonAwtGDimension *gd = [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSet_)) getPreferredSize];
      if ([((GeogebraCommonAwtGDimension *) nil_chk(gd)) getWidth] == 0 || [gd getHeight] == 0) {
        jint width = 0;
        jint height = 0;
        if (!GeogebraCommonMainApp_isFullAppGui()) {
          width = [app_ getAppletWidth] - 2;
          height = [app_ getAppletHeight] - 2;
          if (width == 0 || height == 0) {
            width = 598;
            height = 438;
          }
        }
        else {
          width = [app_ getAppCanvasWidth];
          height = [app_ getAppCanvasHeight];
        }
        [evSet_ setPreferredSizeWithGeogebraCommonAwtGDimension:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
      }
    }
    if ([@"euclidianView" isEqual:eName]) {
      GeogebraCommonIoMyXMLHandler_set_evSet_(self, nil);
      mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D:
    if ([@"euclidianView3D" isEqual:eName]) {
      GeogebraCommonIoMyXMLHandler_set_evSet_(self, nil);
      mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW:
    if ([@"algebraView" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW:
    if ([@"spreadsheetView" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR:
    if ([@"probabilityCalculator" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_KERNEL:
    if ([@"kernel" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI:
    if ([@"gui" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES:
    if ([@"perspectives" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI;
    GeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(self);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE:
    if ([@"perspective" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES;
    GeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(self);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES:
    if ([@"panes" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS:
    if ([@"views" isEqual:eName]) mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    GeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(self, eName);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_MACRO:
    if ([@"macro" isEqual:eName]) {
      GeogebraCommonIoMyXMLHandler_endMacro(self);
      mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA:
    if ([@"geogebra" isEqual:eName]) {
      if (startAnimation_) {
        if ([((GeogebraCommonMainApp *) nil_chk(app_)) isApplet] && ![app_ isHTML5Applet]) [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setWantAnimationStarted];
        else [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager])) startAnimation];
      }
      if (hasGuiElement_) {
        if (ggbFileFormat_ < 3.3) {
          GeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
        }
        else if (!GeogebraCommonIoMyXMLHandler_isPreferencesXML_ && [((JavaUtilArrayList *) nil_chk(tmp_perspectives_)) isEmpty]) {
          GeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
        }
      }
    }
    break;
  }
}

- (void)startGeoGebraElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)handleKeyboardWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startMacroElementWithNSString:(NSString *)eName
            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startEuclidianView3DElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonMainApp_debugWithNSString_(@"TODO : warn that it's a 3D file");
}

- (void)startEuclidianViewElementCheckViewIdWithNSString:(NSString *)eName
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
}

- (jboolean)startEuclidianViewElementSwitchWithNSString:(NSString *)eName
                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
                                               withChar:(jchar)firstChar {
  jboolean ok = YES;
  switch (firstChar) {
    case 'a':
    if ([@"axesColor" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    else if ([@"axis" isEqual:eName]) {
      ok = [self handleAxisWithGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'b':
    if ([@"bgColor" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleBgColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 'c':
    if ([@"coordSystem" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, evSet_, attrs);
      break;
    }
    case 'e':
    if ([@"evSettings" isEqual:eName]) {
      ok = [self handleEvSettingsWithGeogebraCommonMainSettingsEuclidianSettings:evSet_ withJavaUtilLinkedHashMap:attrs];
      break;
    }
    case 'g':
    if ([@"grid" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleGridWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    else if ([@"gridColor" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 'l':
    if ([@"lineStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet_, attrs);
      break;
    }
    case 's':
    if ([@"size" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, evSet_, attrs);
      break;
    }
    break;
    case 'v':
    if ([@"viewNumber" isEqual:eName]) {
      ok = YES;
      break;
    }
    else if ([@"viewId" isEqual:eName]) {
      ok = YES;
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <euclidianView>: ", eName)];
  }
  return ok;
}

- (jboolean)handleExtraTagWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startEuclidianViewElementWithNSString:(NSString *)eName
                    withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startSpreadsheetViewElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startProbabilityCalculatorElementWithNSString:(NSString *)eName
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleProbabilityDistributionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleProbabilityIntervalWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startAlgebraViewElementWithNSString:(NSString *)eName
                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, ev, attrs);
}

- (jboolean)handleEvSettingsWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                  withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    NSString *strAxes = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"axes"];
    if (strAxes != nil) {
      jboolean showAxes = [self parseBooleanWithNSString:strAxes];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setShowAxesWithBoolean:showAxes withBoolean:showAxes];
    }
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) showGridWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"grid"]]];
    @try {
      [ev setGridIsBoldWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"gridIsBold"]]];
    }
    @catch (JavaLangException *e) {
    }
    @try {
      if ([attrs getWithId:@"lockedAxesRatio"] != nil) {
        [ev setLockedAxesRatioWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"lockedAxesRatio"])];
      }
    }
    @catch (JavaLangException *e) {
    }
    @try {
      [ev setGridTypeWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"gridType"])];
    }
    @catch (JavaLangException *e) {
    }
    NSString *str = [attrs getWithId:@"pointCapturing"];
    if (str != nil) {
      jint pointCapturingMode;
      if ([str isEqual:@"false"]) {
        pointCapturingMode = 0;
      }
      else if ([str isEqual:@"true"]) {
        pointCapturingMode = 1;
      }
      else {
        pointCapturingMode = JavaLangInteger_parseIntWithNSString_(str);
        if (pointCapturingMode > GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_XML_MAX) {
          pointCapturingMode = GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_DEFAULT;
        }
      }
      [ev setPointCapturingWithInt:pointCapturingMode];
    }
    else {
      [ev setPointCapturingWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC];
    }
    if (ggbFileFormat_ < 3.3) {
      NSString *strPointStyle = [attrs getWithId:@"pointStyle"];
      if (strPointStyle != nil) {
        docPointStyle_ = JavaLangInteger_parseIntWithNSString_(strPointStyle);
      }
      else {
        docPointStyle_ = GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
      }
    }
    else {
      docPointStyle_ = -1;
    }
    NSString *strBooleanSize = [attrs getWithId:@"checkboxSize"];
    if (strBooleanSize != nil) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) setCheckboxSizeWithInt:JavaLangInteger_parseIntWithNSString_(strBooleanSize)];
    }
    jboolean asm_ = [self parseBooleanWithNSString:[attrs getWithId:@"allowShowMouseCoords"]];
    [ev setAllowShowMouseCoordsWithBoolean:asm_];
    NSString *att = [attrs getWithId:@"allowToolTips"];
    if (att != nil) [ev setAllowToolTipsWithInt:JavaLangInteger_parseIntWithNSString_(att)];
    else [ev setAllowToolTipsWithInt:GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC];
    NSString *del = [attrs getWithId:@"deleteToolSize"];
    if (del != nil) [ev setDeleteToolSizeWithInt:JavaLangInteger_parseIntWithNSString_(del)];
    NSString *strRightAngleStyle = [attrs getWithId:@"rightAngleStyle"];
    if (strRightAngleStyle == nil) {
      if (![ev is3D]) {
        ((GeogebraCommonMainApp *) nil_chk(app_))->rightAngleStyle_ = GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT;
      }
      else {
        [((GeogebraCommonMainApp *) nil_chk(app_)) setRightAngleStyleLocalDefault];
      }
    }
    else {
      if (![ev isViewForPlane]) {
        ((GeogebraCommonMainApp *) nil_chk(app_))->rightAngleStyle_ = JavaLangInteger_parseIntWithNSString_(strRightAngleStyle);
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (jboolean)handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(self, ev, attrs);
}

- (jboolean)handleSpreadsheetSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetColumnWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetFormatWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetRowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jboolean)handleBgColorWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)evSet
                                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleBgColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(evSet, attrs);
}

+ (jboolean)handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

+ (jboolean)handleGridWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleGridWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(ev, attrs);
}

- (jboolean)handleAxisWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)ev
                                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  @try {
    jint axis = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    NSString *strShowAxis = [attrs getWithId:@"show"];
    NSString *label = [attrs getWithId:@"label"];
    NSString *unitLabel = [attrs getWithId:@"unitLabel"];
    jboolean showNumbers = [self parseBooleanWithNSString:[attrs getWithId:@"showNumbers"]];
    if (strShowAxis != nil) {
      jboolean showAxis = [self parseBooleanWithNSString:strShowAxis];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setShowAxisWithInt:axis withBoolean:showAxis];
    }
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxisLabelWithInt:axis withNSString:label];
    if (unitLabel != nil && ((jint) [unitLabel length]) > 0) {
      IOSObjectArray *unitLabels = [ev getAxesUnitLabels];
      IOSObjectArray_Set(nil_chk(unitLabels), axis, unitLabel);
      [ev setAxesUnitLabelsWithNSStringArray:unitLabels];
    }
    [ev setShowAxisNumbersWithInt:axis withBoolean:showNumbers];
    NSString *strTickDist = [attrs getWithId:@"tickDistance"];
    if (strTickDist != nil) {
      jdouble tickDist = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strTickDist);
      [ev setAxesNumberingDistanceWithDouble:tickDist withInt:axis];
    }
    NSString *strTickStyle = [attrs getWithId:@"tickStyle"];
    if (strTickStyle != nil) {
      jint tickStyle = JavaLangInteger_parseIntWithNSString_(strTickStyle);
      [ev setAxisTickStyleWithInt:axis withInt:tickStyle];
    }
    else {
      [ev setAxisTickStyleWithInt:axis withInt:GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR_MINOR];
    }
    NSString *axisCross = [attrs getWithId:@"axisCross"];
    NSString *axisCrossEdge = [attrs getWithId:@"axisCrossEdge"];
    jboolean acb = NO;
    if (axisCrossEdge != nil) {
      acb = [self parseBooleanWithNSString:axisCrossEdge];
    }
    if (acb) {
      [ev setAxisCrossWithInt:axis withDouble:0];
      [ev setDrawBorderAxesWithInt:axis withBoolean:YES];
    }
    else if (axisCross != nil) {
      jdouble ac = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(axisCross);
      [ev setAxisCrossWithInt:axis withDouble:ac];
      [ev setDrawBorderAxesWithInt:axis withBoolean:NO];
    }
    else {
      [ev setAxisCrossWithInt:axis withDouble:0];
      [ev setDrawBorderAxesWithInt:axis withBoolean:NO];
    }
    NSString *posAxis = [attrs getWithId:@"positiveAxis"];
    if (posAxis != nil) {
      jboolean isPositive = JavaLangBoolean_parseBooleanWithNSString_(posAxis);
      [ev setPositiveAxisWithInt:axis withBoolean:isPositive];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

- (void)startKernelElementWithNSString:(NSString *)eName
             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleAngleUnitWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelInvTrigWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelStartAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelLocalizationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelContinuousWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGuiElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)createCompabilityLayout {
  GeogebraCommonIoMyXMLHandler_createCompabilityLayout(self);
}

+ (jboolean)handleConsProtColumnsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (jboolean)handleConsProtocolWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleConsProtNavigationBarWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, app1, attrs);
}

- (jboolean)handleGuiShowWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app1
                         withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleGuiShowWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, app1, attrs);
}

+ (jboolean)handleGuiSettingsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                             withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleGuiSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (jboolean)handleGraphicsSettingsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSplitDividerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleToolbarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jboolean)handleWindowSizeWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                            withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleWindowSizeWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleFontWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleMenuFontWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleMenuFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleTooltipSettingsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleMouseWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleMouseWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

+ (jboolean)handleLabelingStyleWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLabelingStyleWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(app, attrs);
}

- (void)startGuiPerspectivesElementWithNSString:(NSString *)eName
                      withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handlePerspectiveWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endGuiPerspectivesElement {
  GeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(self);
}

- (void)startGuiPerspectiveElementWithNSString:(NSString *)eName
                     withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleAlgebraInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleDockBarWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endGuiPerspectiveElement {
  GeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(self);
}

- (void)startGuiViewsElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleViewWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGuiPanesElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handlePaneWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)handleConstructionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)initMacroWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)endMacro {
  GeogebraCommonIoMyXMLHandler_endMacro(self);
}

- (void)handleWorksheetTextWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startCasCellWithNSString:(NSString *)eName
       withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)endCasCellWithNSString:(NSString *)eName {
  GeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(self, eName);
}

- (void)startCellPair {
  GeogebraCommonIoMyXMLHandler_startCellPair(self);
}

- (void)endCellPairWithNSString:(NSString *)eName {
  GeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(self, eName);
}

- (void)startCellOutputElementWithNSString:(NSString *)eName
                 withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startCellInputElementWithNSString:(NSString *)eName
                withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startCellTextElementWithNSString:(NSString *)eName
               withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)startConstructionElementWithNSString:(NSString *)eName
                   withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (void)endConstructionElementWithNSString:(NSString *)eName {
  GeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(self, eName);
}

- (void)processEvSizes {
  GeogebraCommonIoMyXMLHandler_processEvSizes(self);
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startGeoElementWithNSString:(NSString *)eName
          withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if (geo_ == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$C", @"no element set for <", eName, '>')];
    return;
  }
  jboolean ok = YES;
  GeogebraCommonPluginScriptTypeEnum *scriptType = GeogebraCommonPluginScriptTypeEnum_getTypeWithXMLNameWithNSString_(eName);
  if (scriptType != nil) {
    ok = GeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withGeogebraCommonPluginScriptTypeEnum_(self, attrs, scriptType);
  }
  else switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'a':
    if ([@"auxiliary" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"animation" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"arcSize" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"allowReflexAngle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"absoluteScreenLocation" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"angleStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'b':
    if ([@"breakpoint" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"bgColor" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'c':
    if ([@"coords" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"coordStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"caption" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"condition" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"checkbox" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"coefficients" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"comboBox" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"curveParam" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'd':
    if ([@"decoration" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"decimals" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"dimensions" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'e':
    if ([@"eqnStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"eigenvectors" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"emphasizeRightAngle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'f':
    if ([@"fixed" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"file" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"font" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"forceReflexAngle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"isLaTeX" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"inBackground" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"interpolate" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'k':
    if ([@"keepTypeOnTransform" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'l':
    if ([@"lineStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"labelOffset" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"labelMode" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"layer" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"linkedGeo" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"length" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"listType" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"listener" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'm':
    if ([@"matrix" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'o':
    if ([@"objColor" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"outlyingIntersections" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"pointSize" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"pointStyle" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 's':
    if ([@"show" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"showOnAxis" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"startPoint" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"slider" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"slopeTriangleSize" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"significantfigures" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"spreadsheetTrace" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"showTrimmed" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"selectionAllowed" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"selectedIndex" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 't':
    if ([@"trace" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tooltipMode" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tag" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    else if ([@"tags" isEqual:eName]) {
      ok = YES;
      break;
    }
    case 'u':
    if ([@"userinput" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'v':
    if ([@"value" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <element>: ", eName)];
  }
  if (!ok) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <element>: ", eName)];
  }
}

- (jboolean)handleDimensionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (jchar)firstCharWithNSString:(NSString *)eName {
  return GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName);
}

- (jboolean)handleShowWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleShowOnAxisWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleObjColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleBgColorWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (GeogebraCommonAwtGColor *)handleColorAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
}

+ (GeogebraCommonAwtGColor *)handleColorAlphaAttrsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(attrs);
}

- (jboolean)handleLineStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleDecorationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleEqnStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCurveParamWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoordsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoordStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleListenersWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCaptionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleScriptWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs
           withGeogebraCommonPluginScriptTypeEnum:(GeogebraCommonPluginScriptTypeEnum *)type {
  return GeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withGeogebraCommonPluginScriptTypeEnum_(self, attrs, type);
}

- (jboolean)handleConditionWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCheckboxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleValueWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handlePointSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handlePointStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLayerWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasCellInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCasCellOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSliderWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSpreadsheetTraceWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleShowTrimmedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSelectionAllowedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSelectedIndexWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAnimationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleFixedWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleBreakpointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleFileWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextFontWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextDecimalsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTextFiguresWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleInBackgroundWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleInterpolateWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAuxiliaryWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleIsLaTeXWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleArcSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAllowReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleComboBoxWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAngleStyleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleForceReflexAngleWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(self, attrs);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)handleAbsoluteStartPointWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  jdouble x = JavaLangDouble_NaN;
  jdouble y = JavaLangDouble_NaN;
  jdouble z = JavaLangDouble_NaN;
  x = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
  y = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y"]);
  z = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z"]);
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [p setCoordsWithDouble:x withDouble:y withDouble:z];
  return p;
}

- (void)processStartPointList {
  GeogebraCommonIoMyXMLHandler_processStartPointList(self);
}

- (jboolean)handleLengthWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleListTypeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLinkedGeoWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)processLinkedGeoList {
  GeogebraCommonIoMyXMLHandler_processLinkedGeoList(self);
}

- (void)processShowObjectConditionList {
  GeogebraCommonIoMyXMLHandler_processShowObjectConditionList(self);
}

- (void)processAnimationSpeedList {
  GeogebraCommonIoMyXMLHandler_processAnimationSpeedList(self);
}

- (void)processAnimationStepList {
  GeogebraCommonIoMyXMLHandler_processAnimationStepList(self);
}

- (void)processAnimatingList {
  GeogebraCommonIoMyXMLHandler_processAnimatingList(self);
}

- (void)processMinMaxList {
  GeogebraCommonIoMyXMLHandler_processMinMaxList(self);
}

- (void)processDynamicColorList {
  GeogebraCommonIoMyXMLHandler_processDynamicColorList(self);
}

- (jboolean)handleEigenvectorsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleMatrixWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isGeoConic]) {
    GeogebraCommonKernelGeosGeoConic *conic = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoConic class]);
    IOSDoubleArray *matrix = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"A0"]), GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A1"]), GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A2"]), GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A3"]), GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A4"]), GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"A5"]) } count:6];
    [conic setMatrixWithDoubleArray:matrix];
  }
}

- (jboolean)handleLabelOffsetWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleLabelModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleTooltipModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCoefficientsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleUserInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (GeogebraCommonKernelArithmeticCommand *)getCommandWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(self, attrs);
}

- (void)startCommandElementWithNSString:(NSString *)eName
              withJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
}

- (jboolean)handleCmdInputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCmdOutputWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleCmdOutputSizesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(self, attrs);
}

+ (IOSObjectArray *)getAttributeStringsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs);
}

- (void)startExpressionElementWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  GeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewModeWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:(JavaUtilLinkedHashMap *)attrs {
  return GeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(self, attrs);
}

- (jboolean)parseBooleanWithNSString:(NSString *)str {
  return [@"true" isEqual:str];
}

- (jboolean)parseBooleanRevWithNSString:(NSString *)str {
  return ![@"false" isEqual:str];
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(geoCasCell_);
  RELEASE_(cmd_);
  RELEASE_(macro_);
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(macroInputLabels_);
  RELEASE_(macroOutputLabels_);
  RELEASE_(cmdOutput_);
  RELEASE_(kernel_);
  RELEASE_(origKernel_);
  RELEASE_(cons_);
  RELEASE_(origCons_);
  RELEASE_(parser_);
  RELEASE_(origParser_);
  RELEASE_(startPointList_);
  RELEASE_(linkedGeoList_);
  RELEASE_(showObjectConditionList_);
  RELEASE_(dynamicColorList_);
  RELEASE_(animationSpeedList_);
  RELEASE_(animationStepList_);
  RELEASE_(animatingList_);
  RELEASE_(minMaxList_);
  RELEASE_(tmp_perspective_);
  RELEASE_(tmp_perspectives_);
  RELEASE_(tmp_panes_);
  RELEASE_(tmp_views_);
  RELEASE_(evSet_);
  RELEASE_(xmin_);
  RELEASE_(xmax_);
  RELEASE_(ymin_);
  RELEASE_(ymax_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonIoMyXMLHandler class]) {
    GeogebraCommonIoMyXMLHandler_FORMAT_ = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_());
    JreStrongAssignAndConsume(&GeogebraCommonIoMyXMLHandler_menuFontSizes_, nil, [IOSIntArray newArrayWithInts:(jint[]){ 12, 14, 16, 18, 20, 24, 28, 32, 48 } count:9]);
    JreStrongAssignAndConsume(&GeogebraCommonIoMyXMLHandler_tooltipTimeouts_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"1", @"3", @"5", @"10", @"20", @"30", @"60", @"0" } count:8 type:NSString_class_()]);
    JreStrongAssignAndConsume(&GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(5), JavaLangInteger_valueOfWithInt_(10), JavaLangInteger_valueOfWithInt_(20), JavaLangInteger_valueOfWithInt_(30), JavaLangInteger_valueOfWithInt_(60) } count:5 type:JavaLangInteger_class_()]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonIoMyXMLHandler)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelConstruction:", "MyXMLHandler", NULL, 0x1, NULL, NULL },
    { "resetWithBoolean:", "reset", "V", 0x2, NULL, NULL },
    { "initKernelVars", NULL, "V", 0x2, NULL, NULL },
    { "getConsStep", NULL, "I", 0x1, NULL, NULL },
    { "getTimeoutOptionWithLong:", "getTimeoutOption", "Ljava.lang.Integer;", 0x9, NULL, NULL },
    { "textWithNSString:", "text", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startDocument", NULL, "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "endDocument", NULL, "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startElementWithNSString:withJavaUtilLinkedHashMap:", "startElement", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startScriptingElementWithJavaUtilLinkedHashMap:", "startScriptingElement", "V", 0x2, NULL, NULL },
    { "endElementWithNSString:", "endElement", "V", 0x11, "Lorg.xml.sax.SAXException;", NULL },
    { "startGeoGebraElementWithNSString:withJavaUtilLinkedHashMap:", "startGeoGebraElement", "V", 0x2, NULL, NULL },
    { "handleKeyboardWithJavaUtilLinkedHashMap:", "handleKeyboard", "V", 0x2, NULL, NULL },
    { "startMacroElementWithNSString:withJavaUtilLinkedHashMap:", "startMacroElement", "V", 0x2, NULL, NULL },
    { "startEuclidianView3DElementWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianView3DElement", "V", 0x4, NULL, NULL },
    { "startEuclidianViewElementCheckViewIdWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianViewElementCheckViewId", "V", 0x4, NULL, NULL },
    { "startEuclidianViewElementSwitchWithNSString:withJavaUtilLinkedHashMap:withChar:", "startEuclidianViewElementSwitch", "Z", 0x4, NULL, NULL },
    { "handleExtraTagWithJavaUtilLinkedHashMap:", "handleExtraTag", "Z", 0x2, NULL, NULL },
    { "startEuclidianViewElementWithNSString:withJavaUtilLinkedHashMap:", "startEuclidianViewElement", "V", 0x2, NULL, NULL },
    { "startSpreadsheetViewElementWithNSString:withJavaUtilLinkedHashMap:", "startSpreadsheetViewElement", "V", 0x2, NULL, NULL },
    { "startProbabilityCalculatorElementWithNSString:withJavaUtilLinkedHashMap:", "startProbabilityCalculatorElement", "V", 0x2, NULL, NULL },
    { "handleProbabilityDistributionWithJavaUtilLinkedHashMap:", "handleProbabilityDistribution", "Z", 0x2, NULL, NULL },
    { "handleProbabilityIntervalWithJavaUtilLinkedHashMap:", "handleProbabilityInterval", "Z", 0x2, NULL, NULL },
    { "startAlgebraViewElementWithNSString:withJavaUtilLinkedHashMap:", "startAlgebraViewElement", "V", 0x2, NULL, NULL },
    { "handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleCoordSystem", "Z", 0x2, NULL, NULL },
    { "handleEvSettingsWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleEvSettings", "Z", 0x4, NULL, NULL },
    { "handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleEvSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetSizeWithJavaUtilLinkedHashMap:", "handleSpreadsheetSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetColumnWithJavaUtilLinkedHashMap:", "handleSpreadsheetColumn", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap:", "handleSpreadsheetCellSize", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetFormatWithJavaUtilLinkedHashMap:", "handleSpreadsheetFormat", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetRowWithJavaUtilLinkedHashMap:", "handleSpreadsheetRow", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetLayoutWithJavaUtilLinkedHashMap:", "handleSpreadsheetLayout", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap:", "handleSpreadsheetInitalSelection", "Z", 0x2, NULL, NULL },
    { "handleBgColorWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleBgColor", "Z", 0xc, NULL, NULL },
    { "handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleAxesColor", "Z", 0xa, NULL, NULL },
    { "handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleGridColor", "Z", 0xa, NULL, NULL },
    { "handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleLineStyle", "Z", 0xa, NULL, NULL },
    { "handleGridWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleGrid", "Z", 0xa, NULL, NULL },
    { "handleAxisWithGeogebraCommonMainSettingsEuclidianSettings:withJavaUtilLinkedHashMap:", "handleAxis", "Z", 0x4, NULL, NULL },
    { "startKernelElementWithNSString:withJavaUtilLinkedHashMap:", "startKernelElement", "V", 0x2, NULL, NULL },
    { "handleAngleUnitWithJavaUtilLinkedHashMap:", "handleAngleUnit", "Z", 0x2, NULL, NULL },
    { "handleAlgebraStyleWithJavaUtilLinkedHashMap:", "handleAlgebraStyle", "Z", 0x2, NULL, NULL },
    { "handleKernelCoordStyleWithJavaUtilLinkedHashMap:", "handleKernelCoordStyle", "Z", 0x2, NULL, NULL },
    { "handleKernelInvTrigWithJavaUtilLinkedHashMap:", "handleKernelInvTrig", "Z", 0x2, NULL, NULL },
    { "handleKernelDecimalsWithJavaUtilLinkedHashMap:", "handleKernelDecimals", "Z", 0x2, NULL, NULL },
    { "handleKernelStartAnimationWithJavaUtilLinkedHashMap:", "handleKernelStartAnimation", "Z", 0x2, NULL, NULL },
    { "handleKernelLocalizationWithJavaUtilLinkedHashMap:", "handleKernelLocalization", "Z", 0x2, NULL, NULL },
    { "handleCasSettingsWithJavaUtilLinkedHashMap:", "handleCasSettings", "Z", 0x2, NULL, NULL },
    { "handleKernelFiguresWithJavaUtilLinkedHashMap:", "handleKernelFigures", "Z", 0x2, NULL, NULL },
    { "handleKernelContinuousWithJavaUtilLinkedHashMap:", "handleKernelContinuous", "Z", 0x2, NULL, NULL },
    { "handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap:", "handleKernelUsePathAndRegionParameters", "Z", 0x2, NULL, NULL },
    { "startGuiElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiElement", "V", 0x2, NULL, NULL },
    { "createCompabilityLayout", NULL, "V", 0x2, NULL, NULL },
    { "handleConsProtColumnsWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleConsProtColumns", "Z", 0xa, NULL, NULL },
    { "handleConsProtocolWithJavaUtilLinkedHashMap:", "handleConsProtocol", "Z", 0x2, NULL, NULL },
    { "handleConsProtNavigationBarWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleConsProtNavigationBar", "Z", 0x2, NULL, NULL },
    { "handleGuiShowWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleGuiShow", "Z", 0x2, NULL, NULL },
    { "handleGuiSettingsWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleGuiSettings", "Z", 0xa, NULL, NULL },
    { "handleGraphicsSettingsWithJavaUtilLinkedHashMap:", "handleGraphicsSettings", "Z", 0x2, NULL, NULL },
    { "handleSplitDividerWithJavaUtilLinkedHashMap:", "handleSplitDivider", "Z", 0x2, NULL, NULL },
    { "handleToolbarWithJavaUtilLinkedHashMap:", "handleToolbar", "Z", 0x2, NULL, NULL },
    { "handleWindowSizeWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleWindowSize", "Z", 0xa, NULL, NULL },
    { "handleFontWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleFont", "Z", 0xa, NULL, NULL },
    { "handleMenuFontWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleMenuFont", "Z", 0xa, NULL, NULL },
    { "handleTooltipSettingsWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleTooltipSettings", "Z", 0xa, NULL, NULL },
    { "handleMouseWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleMouse", "Z", 0xa, NULL, NULL },
    { "handleLabelingStyleWithGeogebraCommonMainApp:withJavaUtilLinkedHashMap:", "handleLabelingStyle", "Z", 0xa, NULL, NULL },
    { "startGuiPerspectivesElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPerspectivesElement", "V", 0x2, NULL, NULL },
    { "handlePerspectiveWithJavaUtilLinkedHashMap:", "handlePerspective", "Z", 0x2, NULL, NULL },
    { "endGuiPerspectivesElement", NULL, "V", 0x2, NULL, NULL },
    { "startGuiPerspectiveElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPerspectiveElement", "V", 0x2, NULL, NULL },
    { "handleAlgebraInputWithJavaUtilLinkedHashMap:", "handleAlgebraInput", "Z", 0x2, NULL, NULL },
    { "handleDockBarWithJavaUtilLinkedHashMap:", "handleDockBar", "Z", 0x2, NULL, NULL },
    { "endGuiPerspectiveElement", NULL, "V", 0x2, NULL, NULL },
    { "startGuiViewsElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiViewsElement", "V", 0x2, NULL, NULL },
    { "handleViewWithJavaUtilLinkedHashMap:", "handleView", "Z", 0x2, NULL, NULL },
    { "startGuiPanesElementWithNSString:withJavaUtilLinkedHashMap:", "startGuiPanesElement", "V", 0x2, NULL, NULL },
    { "handlePaneWithJavaUtilLinkedHashMap:", "handlePane", "Z", 0x2, NULL, NULL },
    { "handleConstructionWithJavaUtilLinkedHashMap:", "handleConstruction", "V", 0x2, NULL, NULL },
    { "initMacroWithJavaUtilLinkedHashMap:", "initMacro", "V", 0x2, NULL, NULL },
    { "endMacro", NULL, "V", 0x2, NULL, NULL },
    { "handleWorksheetTextWithJavaUtilLinkedHashMap:", "handleWorksheetText", "V", 0x2, NULL, NULL },
    { "startCasCellWithNSString:withJavaUtilLinkedHashMap:", "startCasCell", "V", 0x2, NULL, NULL },
    { "endCasCellWithNSString:", "endCasCell", "V", 0x2, NULL, NULL },
    { "startCellPair", NULL, "V", 0x2, NULL, NULL },
    { "endCellPairWithNSString:", "endCellPair", "V", 0x2, NULL, NULL },
    { "startCellOutputElementWithNSString:withJavaUtilLinkedHashMap:", "startCellOutputElement", "V", 0x2, NULL, NULL },
    { "startCellInputElementWithNSString:withJavaUtilLinkedHashMap:", "startCellInputElement", "V", 0x2, NULL, NULL },
    { "startCellTextElementWithNSString:withJavaUtilLinkedHashMap:", "startCellTextElement", "V", 0x2, NULL, NULL },
    { "startConstructionElementWithNSString:withJavaUtilLinkedHashMap:", "startConstructionElement", "V", 0x2, NULL, NULL },
    { "endConstructionElementWithNSString:", "endConstructionElement", "V", 0x2, NULL, NULL },
    { "processEvSizes", NULL, "V", 0x2, NULL, NULL },
    { "getGeoElementWithJavaUtilLinkedHashMap:", "getGeoElement", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "startGeoElementWithNSString:withJavaUtilLinkedHashMap:", "startGeoElement", "V", 0x4, NULL, NULL },
    { "handleDimensionsWithJavaUtilLinkedHashMap:", "handleDimensions", "Z", 0x2, NULL, NULL },
    { "firstCharWithNSString:", "firstChar", "C", 0xa, NULL, NULL },
    { "handleShowWithJavaUtilLinkedHashMap:", "handleShow", "Z", 0x2, NULL, NULL },
    { "handleShowOnAxisWithJavaUtilLinkedHashMap:", "handleShowOnAxis", "Z", 0x2, NULL, NULL },
    { "handleObjColorWithJavaUtilLinkedHashMap:", "handleObjColor", "Z", 0x2, NULL, NULL },
    { "handleBgColorWithJavaUtilLinkedHashMap:", "handleBgColor", "Z", 0x2, NULL, NULL },
    { "handleColorAttrsWithJavaUtilLinkedHashMap:", "handleColorAttrs", "Lgeogebra.common.awt.GColor;", 0xa, NULL, NULL },
    { "handleColorAlphaAttrsWithJavaUtilLinkedHashMap:", "handleColorAlphaAttrs", "Lgeogebra.common.awt.GColor;", 0xa, NULL, NULL },
    { "handleLineStyleWithJavaUtilLinkedHashMap:", "handleLineStyle", "Z", 0x2, NULL, NULL },
    { "handleDecorationWithJavaUtilLinkedHashMap:", "handleDecoration", "Z", 0x2, NULL, NULL },
    { "handleEqnStyleWithJavaUtilLinkedHashMap:", "handleEqnStyle", "Z", 0x2, NULL, NULL },
    { "handleCurveParamWithJavaUtilLinkedHashMap:", "handleCurveParam", "Z", 0x2, NULL, NULL },
    { "handleCoordsWithJavaUtilLinkedHashMap:", "handleCoords", "Z", 0x2, NULL, NULL },
    { "handleCoordStyleWithJavaUtilLinkedHashMap:", "handleCoordStyle", "Z", 0x2, NULL, NULL },
    { "handleListenersWithJavaUtilLinkedHashMap:", "handleListeners", "Z", 0x2, NULL, NULL },
    { "handleCaptionWithJavaUtilLinkedHashMap:", "handleCaption", "Z", 0x2, NULL, NULL },
    { "handleScriptWithJavaUtilLinkedHashMap:withGeogebraCommonPluginScriptTypeEnum:", "handleScript", "Z", 0x2, NULL, NULL },
    { "handleConditionWithJavaUtilLinkedHashMap:", "handleCondition", "Z", 0x2, NULL, NULL },
    { "handleCheckboxWithJavaUtilLinkedHashMap:", "handleCheckbox", "Z", 0x2, NULL, NULL },
    { "handleValueWithJavaUtilLinkedHashMap:", "handleValue", "Z", 0x2, NULL, NULL },
    { "handlePointSizeWithJavaUtilLinkedHashMap:", "handlePointSize", "Z", 0x2, NULL, NULL },
    { "handlePointStyleWithJavaUtilLinkedHashMap:", "handlePointStyle", "Z", 0x2, NULL, NULL },
    { "handleLayerWithJavaUtilLinkedHashMap:", "handleLayer", "Z", 0x2, NULL, NULL },
    { "handleCasCellInputWithJavaUtilLinkedHashMap:", "handleCasCellInput", "Z", 0x2, NULL, NULL },
    { "handleCasCellOutputWithJavaUtilLinkedHashMap:", "handleCasCellOutput", "Z", 0x2, NULL, NULL },
    { "handleSliderWithJavaUtilLinkedHashMap:", "handleSlider", "Z", 0x2, NULL, NULL },
    { "handleTraceWithJavaUtilLinkedHashMap:", "handleTrace", "Z", 0x2, NULL, NULL },
    { "handleSpreadsheetTraceWithJavaUtilLinkedHashMap:", "handleSpreadsheetTrace", "Z", 0x2, NULL, NULL },
    { "handleShowTrimmedWithJavaUtilLinkedHashMap:", "handleShowTrimmed", "Z", 0x2, NULL, NULL },
    { "handleSelectionAllowedWithJavaUtilLinkedHashMap:", "handleSelectionAllowed", "Z", 0x2, NULL, NULL },
    { "handleSelectedIndexWithJavaUtilLinkedHashMap:", "handleSelectedIndex", "Z", 0x2, NULL, NULL },
    { "handleAnimationWithJavaUtilLinkedHashMap:", "handleAnimation", "Z", 0x2, NULL, NULL },
    { "handleFixedWithJavaUtilLinkedHashMap:", "handleFixed", "Z", 0x2, NULL, NULL },
    { "handleBreakpointWithJavaUtilLinkedHashMap:", "handleBreakpoint", "Z", 0x2, NULL, NULL },
    { "handleFileWithJavaUtilLinkedHashMap:", "handleFile", "Z", 0x2, NULL, NULL },
    { "handleTextFontWithJavaUtilLinkedHashMap:", "handleTextFont", "Z", 0x2, NULL, NULL },
    { "handleTextDecimalsWithJavaUtilLinkedHashMap:", "handleTextDecimals", "Z", 0x2, NULL, NULL },
    { "handleTextFiguresWithJavaUtilLinkedHashMap:", "handleTextFigures", "Z", 0x2, NULL, NULL },
    { "handleInBackgroundWithJavaUtilLinkedHashMap:", "handleInBackground", "Z", 0x2, NULL, NULL },
    { "handleInterpolateWithJavaUtilLinkedHashMap:", "handleInterpolate", "Z", 0x2, NULL, NULL },
    { "handleAuxiliaryWithJavaUtilLinkedHashMap:", "handleAuxiliary", "Z", 0x2, NULL, NULL },
    { "handleIsLaTeXWithJavaUtilLinkedHashMap:", "handleIsLaTeX", "Z", 0x2, NULL, NULL },
    { "handleArcSizeWithJavaUtilLinkedHashMap:", "handleArcSize", "Z", 0x2, NULL, NULL },
    { "handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap:", "handleAbsoluteScreenLocation", "Z", 0x2, NULL, NULL },
    { "handleAllowReflexAngleWithJavaUtilLinkedHashMap:", "handleAllowReflexAngle", "Z", 0x2, NULL, NULL },
    { "handleEmphasizeRightAngleWithJavaUtilLinkedHashMap:", "handleEmphasizeRightAngle", "Z", 0x2, NULL, NULL },
    { "handleComboBoxWithJavaUtilLinkedHashMap:", "handleComboBox", "Z", 0x2, NULL, NULL },
    { "handleAngleStyleWithJavaUtilLinkedHashMap:", "handleAngleStyle", "Z", 0x2, NULL, NULL },
    { "handleForceReflexAngleWithJavaUtilLinkedHashMap:", "handleForceReflexAngle", "Z", 0x2, NULL, NULL },
    { "handleOutlyingIntersectionsWithJavaUtilLinkedHashMap:", "handleOutlyingIntersections", "Z", 0x2, NULL, NULL },
    { "handleKeepTypeOnTransformWithJavaUtilLinkedHashMap:", "handleKeepTypeOnTransform", "Z", 0x2, NULL, NULL },
    { "handleSlopeTriangleSizeWithJavaUtilLinkedHashMap:", "handleSlopeTriangleSize", "Z", 0x2, NULL, NULL },
    { "handleStartPointWithJavaUtilLinkedHashMap:", "handleStartPoint", "Z", 0x2, NULL, NULL },
    { "handleAbsoluteStartPointWithJavaUtilLinkedHashMap:", "handleAbsoluteStartPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "processStartPointList", NULL, "V", 0x2, NULL, NULL },
    { "handleLengthWithJavaUtilLinkedHashMap:", "handleLength", "Z", 0x2, NULL, NULL },
    { "handleListTypeWithJavaUtilLinkedHashMap:", "handleListType", "Z", 0x2, NULL, NULL },
    { "handleLinkedGeoWithJavaUtilLinkedHashMap:", "handleLinkedGeo", "Z", 0x2, NULL, NULL },
    { "processLinkedGeoList", NULL, "V", 0x2, NULL, NULL },
    { "processShowObjectConditionList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimationSpeedList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimationStepList", NULL, "V", 0x2, NULL, NULL },
    { "processAnimatingList", NULL, "V", 0x2, NULL, NULL },
    { "processMinMaxList", NULL, "V", 0x2, NULL, NULL },
    { "processDynamicColorList", NULL, "V", 0x2, NULL, NULL },
    { "handleEigenvectorsWithJavaUtilLinkedHashMap:", "handleEigenvectors", "Z", 0x2, NULL, NULL },
    { "handleMatrixWithJavaUtilLinkedHashMap:", "handleMatrix", "Z", 0x2, NULL, NULL },
    { "handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:", "handleMatrixConicOrQuadric", "V", 0x4, "Ljava.lang.Exception;", NULL },
    { "handleLabelOffsetWithJavaUtilLinkedHashMap:", "handleLabelOffset", "Z", 0x2, NULL, NULL },
    { "handleLabelModeWithJavaUtilLinkedHashMap:", "handleLabelMode", "Z", 0x2, NULL, NULL },
    { "handleTooltipModeWithJavaUtilLinkedHashMap:", "handleTooltipMode", "Z", 0x2, NULL, NULL },
    { "handleCoefficientsWithJavaUtilLinkedHashMap:", "handleCoefficients", "Z", 0x2, NULL, NULL },
    { "handleUserInputWithJavaUtilLinkedHashMap:", "handleUserInput", "Z", 0x2, NULL, NULL },
    { "getCommandWithJavaUtilLinkedHashMap:", "getCommand", "Lgeogebra.common.kernel.arithmetic.Command;", 0x2, NULL, NULL },
    { "startCommandElementWithNSString:withJavaUtilLinkedHashMap:", "startCommandElement", "V", 0x2, NULL, NULL },
    { "handleCmdInputWithJavaUtilLinkedHashMap:", "handleCmdInput", "Z", 0x2, NULL, NULL },
    { "handleCmdOutputWithJavaUtilLinkedHashMap:", "handleCmdOutput", "Z", 0x2, NULL, NULL },
    { "handleCmdOutputSizesWithJavaUtilLinkedHashMap:", "handleCmdOutputSizes", "Z", 0x2, NULL, NULL },
    { "getAttributeStringsWithJavaUtilLinkedHashMap:", "getAttributeStrings", "[Ljava.lang.String;", 0xa, NULL, NULL },
    { "startExpressionElementWithJavaUtilLinkedHashMap:", "startExpressionElement", "V", 0x2, NULL, NULL },
    { "handleAlgebraViewModeWithJavaUtilLinkedHashMap:", "handleAlgebraViewMode", "Z", 0x2, NULL, NULL },
    { "handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap:", "handleAlgebraViewShowAuxiliaryObjects", "Z", 0x2, NULL, NULL },
    { "handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap:", "handleAlgebraViewCollapsedNodes", "Z", 0x2, NULL, NULL },
    { "parseBooleanWithNSString:", "parseBoolean", "Z", 0x4, NULL, NULL },
    { "parseBooleanRevWithNSString:", "parseBooleanRev", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "FORMAT_", NULL, 0x1a, "D", &GeogebraCommonIoMyXMLHandler_FORMAT_, NULL,  },
    { "MODE_INVALID_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_INVALID },
    { "MODE_GEOGEBRA_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA },
    { "MODE_MACRO_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_MACRO },
    { "MODE_EUCLIDIAN_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW },
    { "MODE_EUCLIDIAN_VIEW3D_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D },
    { "MODE_SPREADSHEET_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW },
    { "MODE_ALGEBRA_VIEW_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW },
    { "MODE_CONST_CAS_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL },
    { "MODE_CAS_CELL_PAIR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR },
    { "MODE_CAS_INPUT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL },
    { "MODE_CAS_OUTPUT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL },
    { "MODE_CAS_TEXT_CELL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL },
    { "MODE_PROBABILITY_CALCULATOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR },
    { "MODE_KERNEL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_KERNEL },
    { "MODE_CONSTRUCTION_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION },
    { "MODE_CONST_GEO_ELEMENT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT },
    { "MODE_CONST_COMMAND_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND },
    { "MODE_GUI_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GUI },
    { "MODE_GUI_PERSPECTIVES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES },
    { "MODE_GUI_PERSPECTIVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE },
    { "MODE_GUI_PERSPECTIVE_PANES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES },
    { "MODE_GUI_PERSPECTIVE_VIEWS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS },
    { "menuFontSizes_", NULL, 0x19, "[I", &GeogebraCommonIoMyXMLHandler_menuFontSizes_, NULL,  },
    { "tooltipTimeouts_", NULL, 0x19, "[Ljava.lang.String;", &GeogebraCommonIoMyXMLHandler_tooltipTimeouts_, NULL,  },
    { "cbTimeoutOptions_", NULL, 0x19, "[Ljava.lang.Integer;", &GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, NULL,  },
    { "JSplitPane_HORIZONTAL_SPLIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT },
    { "JSplitPane_VERTICAL_SPLIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT },
    { "MIN_TEXT_SIZE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "constMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "casMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "geo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "geoCasCell_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
    { "cmd_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Command;", NULL, NULL,  },
    { "macro_", NULL, 0x2, "Lgeogebra.common.kernel.Macro;", NULL, NULL,  },
    { "app_", NULL, 0x14, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x14, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "macroInputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "macroOutputLabels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "cmdOutput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "startAnimation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "docPointStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "origKernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "origCons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "parser_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "origParser_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "startPointList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$LocateableExpPair;>;",  },
    { "linkedGeoList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "showObjectConditionList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "dynamicColorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animationSpeedList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animationStepList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoExpPair;>;",  },
    { "animatingList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "minMaxList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/io/MyXMLHandler$GeoNumericMinMax;>;",  },
    { "consStep_", NULL, 0x2, "I", NULL, NULL,  },
    { "ggbFileFormat_", NULL, 0x2, "D", NULL, NULL,  },
    { "hasGuiElement_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_perspective_", NULL, 0x2, "Lgeogebra.common.io.layout.Perspective;", NULL, NULL,  },
    { "tmp_perspectives_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/io/layout/Perspective;>;",  },
    { "tmp_panes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/io/layout/DockSplitPaneData;>;",  },
    { "tmp_views_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/io/layout/DockPanelData;>;",  },
    { "tmp_sp1_", NULL, 0x2, "I", NULL, NULL,  },
    { "tmp_sp2_", NULL, 0x2, "I", NULL, NULL,  },
    { "tmp_spHorizontal_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_showAlgebra_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmp_showSpreadsheet_", NULL, 0x2, "Z", NULL, NULL,  },
    { "resetEVsettingsNeeded_", NULL, 0x4, "Z", NULL, NULL,  },
    { "evSet_", NULL, 0x4, "Lgeogebra.common.main.settings.EuclidianSettings;", NULL, NULL,  },
    { "xmin_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "xmax_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "ymin_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "ymax_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/main/settings/EuclidianSettings;Ljava/lang/String;>;",  },
    { "isPreferencesXML_", NULL, 0xa, "Z", &GeogebraCommonIoMyXMLHandler_isPreferencesXML_, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.io.MyXMLHandler$GeoExpPair;", "Lgeogebra.common.io.MyXMLHandler$GeoNumericMinMax;", "Lgeogebra.common.io.MyXMLHandler$LocateableExpPair;"};
  static const J2ObjcClassInfo _GeogebraCommonIoMyXMLHandler = { 2, "MyXMLHandler", "geogebra.common.io", NULL, 0x1, 180, methods, 76, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_GeogebraCommonIoMyXMLHandler;
}

@end

void GeogebraCommonIoMyXMLHandler_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelConstruction *cons) {
  NSObject_init(self);
  GeogebraCommonIoMyXMLHandler_setAndConsume_startPointList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_linkedGeoList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_showObjectConditionList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_dynamicColorList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_animationSpeedList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_animationStepList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_animatingList_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_minMaxList_(self, new_JavaUtilLinkedList_init());
  self->hasGuiElement_ = NO;
  GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_perspectives_(self, new_JavaUtilArrayList_init());
  self->resetEVsettingsNeeded_ = NO;
  GeogebraCommonIoMyXMLHandler_set_evSet_(self, nil);
  GeogebraCommonIoMyXMLHandler_setAndConsume_xmin_(self, new_JavaUtilHashMap_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_xmax_(self, new_JavaUtilHashMap_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_ymin_(self, new_JavaUtilHashMap_init());
  GeogebraCommonIoMyXMLHandler_setAndConsume_ymax_(self, new_JavaUtilHashMap_init());
  GeogebraCommonIoMyXMLHandler_set_origKernel_(self, kernel);
  GeogebraCommonIoMyXMLHandler_set_origCons_(self, cons);
  GeogebraCommonIoMyXMLHandler_setAndConsume_origParser_(self, new_GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self->origKernel_, self->origCons_));
  GeogebraCommonIoMyXMLHandler_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) getApplication]);
  GeogebraCommonIoMyXMLHandler_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  GeogebraCommonIoMyXMLHandler_initKernelVars(self);
  self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_INVALID;
  self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
}

GeogebraCommonIoMyXMLHandler *new_GeogebraCommonIoMyXMLHandler_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonIoMyXMLHandler *self = [GeogebraCommonIoMyXMLHandler alloc];
  GeogebraCommonIoMyXMLHandler_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

void GeogebraCommonIoMyXMLHandler_resetWithBoolean_(GeogebraCommonIoMyXMLHandler *self, jboolean start) {
  [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) clear];
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
  if (start) self->consStep_ = -2;
  self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_INVALID;
  self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
  self->hasGuiElement_ = NO;
  GeogebraCommonIoMyXMLHandler_initKernelVars(self);
  [((JavaUtilHashMap *) nil_chk(self->xmin_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->xmax_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->ymin_)) clear];
  [((JavaUtilHashMap *) nil_chk(self->ymax_)) clear];
}

void GeogebraCommonIoMyXMLHandler_initKernelVars(GeogebraCommonIoMyXMLHandler *self) {
  GeogebraCommonIoMyXMLHandler_set_kernel_(self, self->origKernel_);
  GeogebraCommonIoMyXMLHandler_set_parser_(self, self->origParser_);
  GeogebraCommonIoMyXMLHandler_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) getConstruction]);
}

JavaLangInteger *GeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(jlong integer) {
  GeogebraCommonIoMyXMLHandler_initialize();
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_))->size_; i++) if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, i))) intValue] == integer) return IOSObjectArray_Get(GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, i);
  return IOSObjectArray_Get(GeogebraCommonIoMyXMLHandler_cbTimeoutOptions_, 0);
}

void GeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *scriptingLanguage = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"language"];
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) setScriptingLanguageWithNSString:scriptingLanguage];
    jboolean blockScripting = [@"true" isEqual:[attrs getWithId:@"blocked"]];
    [self->app_ setBlockUpdateScriptsWithBoolean:blockScripting];
    jboolean scriptingDisabled = [@"true" isEqual:[attrs getWithId:@"disabled"]];
    [self->app_ setScriptingDisabledWithBoolean:scriptingDisabled];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"error in element <scripting>"];
  }
}

void GeogebraCommonIoMyXMLHandler_startGeoGebraElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"euclidianView" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW;
    self->resetEVsettingsNeeded_ = YES;
  }
  else if ([@"euclidianView3D" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_EUCLIDIAN_VIEW3D;
    self->resetEVsettingsNeeded_ = YES;
  }
  else if ([@"algebraView" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_ALGEBRA_VIEW;
  }
  else if ([@"kernel" isEqual:eName]) {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setUsePathAndRegionParametersWithGeogebraCommonKernelPathRegionHandlingEnum:GeogebraCommonKernelPathRegionHandlingEnum_get_ON()];
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_KERNEL;
  }
  else if ([@"spreadsheetView" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_SPREADSHEET_VIEW;
  }
  else if ([@"scripting" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_startScriptingElementWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"probabilityCalculator" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_PROBABILITY_CALCULATOR;
  }
  else if ([@"gui" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI;
    self->hasGuiElement_ = YES;
    GeogebraCommonIoMyXMLHandler_isPreferencesXML_ = NO;
    GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_perspective_(self, new_GeogebraCommonIoLayoutPerspective_initWithNSString_(@"tmp"));
    [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) clear];
  }
  else if ([@"macro" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_MACRO;
    GeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"construction" isEqual:eName]) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"parsing start", JavaLangSystem_currentTimeMillis()));
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    GeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"casSession" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
  }
  else if ([@"keyboard" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <geogebra>: ", eName)];
  }
}

void GeogebraCommonIoMyXMLHandler_handleKeyboardWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    GeogebraCommonMainSettingsKeyboardSettings *kbs = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getKeyboard];
    [((GeogebraCommonMainSettingsKeyboardSettings *) nil_chk(kbs)) setKeyboardWidthWithInt:width];
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [kbs setKeyboardHeightWithInt:height];
    jfloat opacity = JavaLangFloat_parseFloatWithNSString_([attrs getWithId:@"opacity"]);
    [kbs setKeyboardOpacityWithFloat:opacity];
    jboolean showOnStart = JavaLangBoolean_parseBooleanWithNSString_([attrs getWithId:@"show"]);
    [kbs setShowKeyboardOnStartWithBoolean:showOnStart];
    [kbs setKeyboardLocaleWithNSString:[attrs getWithId:@"language"]];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"error in element <keyboard>"];
  }
}

void GeogebraCommonIoMyXMLHandler_startMacroElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"macroInput" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_set_macroInputLabels_(self, GeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs));
  }
  else if ([@"macroOutput" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_set_macroOutputLabels_(self, GeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(attrs));
  }
  else if ([@"construction" isEqual:eName]) {
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    GeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <macro>: ", eName)];
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleExtraTagWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonKernelAlgosAlgoBarChart *algo = (GeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoBarChart class]);
  if (![@"" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"key"]] && ![@"" isEqual:[attrs getWithId:@"value"]] && ![@"" isEqual:[attrs getWithId:@"barNumber"]]) {
    if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barAlpha"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarAlphaWithFloat:JavaLangFloat_parseFloatWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barHatchDistance"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarHatchDistanceWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barFillType"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:IOSObjectArray_Get(nil_chk(GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"])) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barHatchAngle"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarHatchAngleWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"value"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barImage"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarImageWithNSString:[attrs getWithId:@"value"] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barSymbol"]) {
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarSymbolWithNSString:[attrs getWithId:@"value"] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
    else if ([((NSString *) nil_chk([attrs getWithId:@"key"])) isEqual:@"barColor"]) {
      IOSObjectArray *c = [((NSString *) nil_chk([attrs getWithId:@"value"])) split:@","];
      [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algo)) setBarColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(c), 0))) substring:5]) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(c, 1)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(c, 2))] withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"barNumber"])];
      return YES;
    }
  }
  return NO;
}

void GeogebraCommonIoMyXMLHandler_startEuclidianViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"viewNumber" isEqual:eName]) {
    jint number = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"viewNo"]);
    if (number == 2) GeogebraCommonIoMyXMLHandler_set_evSet_(self, [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:2]);
    else GeogebraCommonIoMyXMLHandler_set_evSet_(self, [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1]);
  }
  else {
    [self startEuclidianViewElementCheckViewIdWithNSString:eName withJavaUtilLinkedHashMap:attrs];
  }
  if (self->evSet_ == nil) GeogebraCommonIoMyXMLHandler_set_evSet_(self, [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1]);
  if (self->resetEVsettingsNeeded_) {
    self->resetEVsettingsNeeded_ = NO;
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(self->evSet_)) reset];
  }
  if (![self startEuclidianViewElementSwitchWithNSString:eName withJavaUtilLinkedHashMap:attrs withChar:GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)]) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <euclidianView>: ", eName)];
}

void GeogebraCommonIoMyXMLHandler_startSpreadsheetViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'l':
    if ([@"layout" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"prefCellSize" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 's':
    if ([@"size" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetColumn" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetRow" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"selection" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    if ([@"spreadsheetCellFormat" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <spreadsheetView>: ", eName)];
  }
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <spreadsheetView>: ", eName)];
}

void GeogebraCommonIoMyXMLHandler_startProbabilityCalculatorElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'd':
    if ([@"distribution" isEqual:eName]) {
      if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) isUsingFullGui]) ok = GeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"interval" isEqual:eName]) {
      if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) isUsingFullGui]) ok = GeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <probabilityCalculator>: ", eName)];
  }
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <probabilityCalculator>: ", eName)];
}

jboolean GeogebraCommonIoMyXMLHandler_handleProbabilityDistributionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint distributionType = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"]);
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getProbCalcSettings])) setDistributionTypeWithGeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum:IOSObjectArray_Get(nil_chk(GeogebraCommonMainSettingsProbabilityCalculatorSettings_DISTEnum_values()), distributionType)];
    jboolean isCumulative = [self parseBooleanWithNSString:[attrs getWithId:@"isCumulative"]];
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setCumulativeWithBoolean:isCumulative];
    NSString *parmString = [attrs getWithId:@"parameters"];
    IOSObjectArray *parmStringArray = [((NSString *) nil_chk(parmString)) split:@","];
    IOSDoubleArray *parameters = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(parmStringArray))->size_];
    for (jint i = 0; i < parmStringArray->size_; i++) *IOSDoubleArray_GetRef(parameters, i) = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(IOSObjectArray_Get(parmStringArray, i));
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setParametersWithDoubleArray:parameters];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleProbabilityIntervalWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint probMode = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"mode"]);
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getProbCalcSettings])) setProbModeWithInt:probMode];
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setLowWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"low"])];
    [((GeogebraCommonMainSettingsProbabilityCalculatorSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getProbCalcSettings])) setHighWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"high"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_startAlgebraViewElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'a':
    if ([@"auxiliary" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'c':
    if ([@"collapsed" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'm':
    if ([@"mode" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <algebraView>: ", eName)];
  }
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <algebraView>: ", eName)];
}

jboolean GeogebraCommonIoMyXMLHandler_handleCoordSystemWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  if ([((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(self->xmin_)) keySet])) size] > 1) {
    [self->xmin_ clear];
    [((JavaUtilHashMap *) nil_chk(self->xmax_)) clear];
    [((JavaUtilHashMap *) nil_chk(self->ymin_)) clear];
    [((JavaUtilHashMap *) nil_chk(self->ymax_)) clear];
  }
  if ([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"xZero"] != nil) {
    @try {
      jdouble xZero = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"xZero"]);
      jdouble yZero = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"yZero"]);
      jdouble scale_ = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"scale"]);
      jdouble yscale = scale_;
      NSString *strYscale = [attrs getWithId:@"yscale"];
      if (strYscale != nil) {
        yscale = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strYscale);
      }
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setCoordSystemWithDouble:xZero withDouble:yZero withDouble:scale_ withDouble:yscale];
      [self->xmin_ putWithId:ev withId:nil];
      [((JavaUtilHashMap *) nil_chk(self->xmax_)) putWithId:ev withId:nil];
      [((JavaUtilHashMap *) nil_chk(self->ymin_)) putWithId:ev withId:nil];
      [((JavaUtilHashMap *) nil_chk(self->ymax_)) putWithId:ev withId:nil];
      return YES;
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  @try {
    [self->xmin_ putWithId:ev withId:[attrs getWithId:@"xMin"]];
    [((JavaUtilHashMap *) nil_chk(self->xmax_)) putWithId:ev withId:[attrs getWithId:@"xMax"]];
    [((JavaUtilHashMap *) nil_chk(self->ymin_)) putWithId:ev withId:[attrs getWithId:@"yMin"]];
    [((JavaUtilHashMap *) nil_chk(self->ymax_)) putWithId:ev withId:[attrs getWithId:@"yMax"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleEvSizeWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width;
    jint height;
    if (!GeogebraCommonMainApp_isFullAppGui()) {
      width = ([((GeogebraCommonMainApp *) nil_chk(self->app_)) getAppletWidth] > 2 && ![self->app_ getUseFullGui]) ? [self->app_ getAppletWidth] - 2 : JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
      height = ([self->app_ getAppletHeight] > 2 && ![self->app_ getUseFullGui]) ? [self->app_ getAppletHeight] - 2 : JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"height"]);
    }
    else {
      width = [((GeogebraCommonMainApp *) nil_chk(self->app_)) getAppCanvasWidth];
      height = [self->app_ getAppCanvasHeight];
    }
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setPreferredSizeWithGeogebraCommonAwtGDimension:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((GeogebraCommonMainApp *) nil_chk(self->app_)) isApplet] && ![self->app_ isHTML5Applet]) return YES;
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) setPreferredSizeWithGeogebraCommonAwtGDimension:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:width withInt:height]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetColumnWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint col = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    jint width = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"width"]);
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) addWidthWithInt:col withInt:width];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetCellSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint width = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) setPreferredColumnWidthWithInt:width];
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) setPreferredRowHeightWithInt:height];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetFormatWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *cellFormat = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"formatMap"];
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) setCellFormatWithNSString:cellFormat];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_printStacktraceWithId_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetRowWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint row = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    jint height = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"]);
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet])) addHeightWithInt:row withInt:height];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetLayoutWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonMainSettingsSpreadsheetSettings *settings = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet];
  @try {
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk(settings)) setShowFormulaBarWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showFormulaBar"]]];
    [settings setShowGridWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showGrid"]]];
    [settings setShowColumnHeaderWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showColumnHeader"]]];
    [settings setShowRowHeaderWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showRowHeader"]]];
    [settings setShowHScrollBarWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showHScrollBar"]]];
    [settings setShowVScrollBarWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"showVScrollBar"]]];
    [settings setAllowSpecialEditorWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"allowSpecialEditor"]]];
    [settings setAllowToolTipsWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"allowToolTips"]]];
    [settings setEqualsRequiredWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"equalsRequired"]]];
    [settings setEnableAutoCompleteWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"autoComplete"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetInitalSelectionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonMainSettingsSpreadsheetSettings *settings = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getSpreadsheet];
  @try {
    jint hScroll = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"hScroll"]);
    jint vScroll = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"vScroll"]);
    [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk(settings)) setScrollPositionWithGeogebraCommonAwtGPoint:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_(hScroll, vScroll) autorelease]];
    jint row = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"row"]);
    jint column = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"column"]);
    [settings setScrollPositionWithGeogebraCommonAwtGPoint:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_(row, column) autorelease]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleBgColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *evSet, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  GeogebraCommonAwtGColor *col = GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evSet)) setBackgroundWithGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleAxesColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  GeogebraCommonAwtGColor *col = GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxesColorWithGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleGridColorWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  GeogebraCommonAwtGColor *col = GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setGridColorWithGeogebraCommonAwtGColor:col];
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleLineStyleWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setAxesLineStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"axes"])];
    [ev setGridLineStyleWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"grid"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleGridWithGeogebraCommonMainSettingsEuclidianSettings_withJavaUtilLinkedHashMap_(GeogebraCommonMainSettingsEuclidianSettings *ev, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    IOSDoubleArray *dists = [IOSDoubleArray arrayWithLength:3];
    *IOSDoubleArray_GetRef(dists, 0) = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"distX"]);
    *IOSDoubleArray_GetRef(dists, 1) = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"distY"]);
    NSString *theta = [attrs getWithId:@"distTheta"];
    if (theta != nil) *IOSDoubleArray_GetRef(dists, 2) = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"distTheta"]);
    else *IOSDoubleArray_GetRef(dists, 2) = JavaLangMath_PI / 6;
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setGridDistancesWithDoubleArray:dists];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_startKernelElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if ([@"angleUnit" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"algebraStyle" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"coordStyle" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"angleFromInvTrig" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"continuous" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"usePathAndRegionParameters" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"decimals" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"significantfigures" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"startAnimation" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"localization" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"casSettings" isEqual:eName]) {
    GeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <kernel>: ", eName)];
}

jboolean GeogebraCommonIoMyXMLHandler_handleAngleUnitWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (attrs == nil) return NO;
  NSString *angleUnit = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if (angleUnit == nil) return NO;
  if ([((NSString *) nil_chk(angleUnit)) isEqual:@"degree"]) [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAngleUnitWithInt:GeogebraCommonKernelKernel_ANGLE_DEGREE];
  else if ([angleUnit isEqual:@"radiant"]) [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAngleUnitWithInt:GeogebraCommonKernelKernel_ANGLE_RADIANT];
  else return NO;
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setAlgebraStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelCoordStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setCoordStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelInvTrigWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setInverseTrigReturnsAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelDecimalsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setPrintDecimalsWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelStartAnimationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->startAnimation_ = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelLocalizationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean digits = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"digits"]];
    [((GeogebraCommonMainLocalization *) nil_chk(self->loc_)) setUseLocalizedDigitsWithBoolean:digits withGeogebraCommonMainApp:self->app_];
    jboolean labels = [self parseBooleanWithNSString:[attrs getWithId:@"labels"]];
    [self->loc_ setUseLocalizedLabelsWithBoolean:labels];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCasSettingsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean expRoots = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"expRoots"]];
    [((GeogebraCommonMainSettingsCASSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getCasSettings])) setShowExpAsRootsWithBoolean:expRoots];
    jint timeout = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"timeout"]);
    if (timeout > 0) [((GeogebraCommonMainSettingsCASSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getCasSettings])) setTimeoutMillisecondsWithLong:[((JavaLangInteger *) nil_chk(GeogebraCommonIoMyXMLHandler_getTimeoutOptionWithLong_(timeout))) intValue] * 1000];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelFiguresWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setPrintFiguresWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelContinuousWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setContinuousWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKernelUsePathAndRegionParametersWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) setUsePathAndRegionParametersWithGeogebraCommonKernelPathRegionHandlingEnum:GeogebraCommonKernelPathRegionHandlingEnum_parseWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_startGuiElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'c':
    if ([@"consProtColumns" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    else if ([@"consProtocol" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"consProtNavigationBar" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
    break;
    case 'f':
    if ([@"font" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'g':
    if ([@"graphicsSettings" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(self, attrs);
    break;
    case 'm':
    if ([@"menuFont" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleMenuFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    else if ([@"mouse" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleMouseWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'l':
    if ([@"labelingStyle" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleLabelingStyleWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'p':
    if ([@"perspectives" isEqual:eName]) {
      self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVES;
      [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) clear];
    }
    break;
    case 's':
    if ([@"show" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleGuiShowWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
    else if ([@"splitDivider" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"settings" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleGuiSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 't':
    if ([@"toolbar" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
    else if ([@"tooltipSettings" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    case 'w':
    if ([@"window" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleWindowSizeWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self->app_, attrs);
    break;
    default:
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"unknown tag in <gui>: ", eName));
  }
  if (!ok) GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"error in <gui>: ", eName));
}

void GeogebraCommonIoMyXMLHandler_createCompabilityLayout(GeogebraCommonIoMyXMLHandler *self) {
  jint splitOrientation = self->tmp_spHorizontal_ ? GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT : GeogebraCommonIoMyXMLHandler_JSplitPane_VERTICAL_SPLIT;
  NSString *defEV, *defSV, *defAV;
  if (splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
    if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
      defEV = @"1,3";
      defSV = @"1,1";
      defAV = @"3";
    }
    else {
      if (self->tmp_showSpreadsheet_) {
        defEV = @"3";
        defSV = @"1";
        defAV = @"3,3";
      }
      else {
        defEV = @"1";
        defAV = @"3";
        defSV = @"1,1";
      }
    }
  }
  else {
    if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
      defEV = @"0";
      defAV = @"2,0";
      defSV = @"2,2";
    }
    else {
      if (self->tmp_showSpreadsheet_) {
        defEV = @"0";
        defSV = @"2";
        defAV = @"0,0";
      }
      else {
        defEV = @"2";
        defAV = @"0";
        defSV = @"2,2";
      }
    }
  }
  GeogebraCommonAwtGDimension *evSize = [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getEuclidianWithInt:1])) getPreferredSize];
  jint width = [((GeogebraCommonAwtGDimension *) nil_chk(evSize)) getWidth];
  jint height = [evSize getHeight];
  if (width <= 100 || height <= 100) {
    width = 600;
    height = 440;
  }
  jint ssize = 200;
  if (self->tmp_showSpreadsheet_) {
    if (splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
      ssize = [((GeogebraCommonAwtGDimension *) nil_chk([((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) preferredSize])) getWidth];
    }
    else {
      ssize = [((GeogebraCommonAwtGDimension *) nil_chk([((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([self->app_ getSettings])) getSpreadsheet])) preferredSize])) getHeight];
    }
  }
  IOSObjectArray *dpXml = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withGeogebraCommonAwtGRectangle_withNSString_withInt_(GeogebraCommonMainApp_VIEW_EUCLIDIAN, nil, YES, NO, NO, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:400 withInt:400], defEV, width) autorelease], [new_GeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withGeogebraCommonAwtGRectangle_withNSString_withInt_(GeogebraCommonMainApp_VIEW_ALGEBRA, nil, self->tmp_showAlgebra_, NO, NO, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithInt:200 withInt:400], defAV, (self->tmp_showAlgebra_ && self->tmp_sp2_ > 0) ? self->tmp_sp2_ : 200) autorelease], [new_GeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withGeogebraCommonAwtGRectangle_withNSString_withInt_(GeogebraCommonMainApp_VIEW_SPREADSHEET, nil, self->tmp_showSpreadsheet_, NO, NO, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithInt:400 withInt:400], defSV, ssize) autorelease] } count:3 type:GeogebraCommonIoLayoutDockPanelData_class_()];
  [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setDockPanelDataWithGeogebraCommonIoLayoutDockPanelDataArray:dpXml];
  [self->tmp_perspective_ setShowToolBarWithBoolean:YES];
  if (splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT) {
    if (self->tmp_showSpreadsheet_) {
      width += 5 + ssize;
    }
    if (self->tmp_showAlgebra_) {
      width += 5 + self->tmp_sp2_;
    }
  }
  else {
    if (self->tmp_showSpreadsheet_) {
      height += 5 + ssize;
    }
    if (self->tmp_showAlgebra_) {
      height += 5 + self->tmp_sp2_;
    }
  }
  IOSObjectArray *spXml;
  if (self->tmp_showSpreadsheet_ && self->tmp_showAlgebra_) {
    jint total = (splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? width : height);
    jfloat relative1 = (jfloat) self->tmp_sp2_ / total;
    jfloat relative2 = (jfloat) self->tmp_sp1_ / (total - self->tmp_sp2_);
    spXml = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(@"", relative1, splitOrientation) autorelease], [new_GeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_((splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? @"1" : @"2"), relative2, splitOrientation) autorelease] } count:2 type:GeogebraCommonIoLayoutDockSplitPaneData_class_()];
  }
  else {
    jint total = (splitOrientation == GeogebraCommonIoMyXMLHandler_JSplitPane_HORIZONTAL_SPLIT ? width : height);
    jfloat relative;
    if (self->tmp_showSpreadsheet_) {
      relative = (jfloat) self->tmp_sp1_ / total;
    }
    else {
      relative = (jfloat) self->tmp_sp2_ / total;
    }
    spXml = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(@"", relative, splitOrientation) autorelease] } count:1 type:GeogebraCommonIoLayoutDockSplitPaneData_class_()];
  }
  width += 15;
  height += 90;
  if ([self->tmp_perspective_ getShowInputPanel]) {
    height += 50;
  }
  [self->tmp_perspective_ setSplitPaneDataWithGeogebraCommonIoLayoutDockSplitPaneDataArray:spXml];
  GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_perspectives_(self, new_JavaUtilArrayList_init());
  [self->tmp_perspectives_ addWithId:self->tmp_perspective_];
  [self->app_ setPreferredSizeWithGeogebraCommonAwtGDimension:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newDimensionWithInt:width withInt:height]];
  [self->app_ setTmpPerspectivesWithJavaUtilArrayList:self->tmp_perspectives_];
}

jboolean GeogebraCommonIoMyXMLHandler_handleConsProtColumnsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    IOSBooleanArray *colsVis = [IOSBooleanArray arrayWithLength:[((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet])) size]];
    JavaUtilArrayList *keys = [new_JavaUtilArrayList_initWithJavaUtilCollection_([attrs keySet]) autorelease];
    for (NSString * __strong key in keys) {
      jint k = JavaLangInteger_parseIntWithNSString_([((NSString *) nil_chk(key)) substring:3]);
      *IOSBooleanArray_GetRef(colsVis, k) = JavaLangBoolean_parseBooleanWithNSString_([attrs getWithId:key]);
    }
    GeogebraCommonMainSettingsConstructionProtocolSettings *cpSettings = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getSettings])) getConstructionProtocol];
    [((GeogebraCommonMainSettingsConstructionProtocolSettings *) nil_chk(cpSettings)) setColsVisibilityWithBooleanArray:colsVis];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonUtilDebugLog_debugWithId_(e);
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleConsProtocolWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean showOnlyBreakpoints = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showOnlyBreakpoints"]];
    [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) setShowOnlyBreakpointsWithBoolean:showOnlyBreakpoints];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleConsProtNavigationBarWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean show = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"]];
    jboolean playButton = [self parseBooleanWithNSString:[attrs getWithId:@"playButton"]];
    jdouble playDelay = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"playDelay"]);
    jboolean showProtButton = [self parseBooleanWithNSString:[attrs getWithId:@"protButton"]];
    [((GeogebraCommonMainApp *) nil_chk(app1)) setShowConstructionProtocolNavigationWithBoolean:show withBoolean:playButton withDouble:playDelay withBoolean:showProtButton];
    NSString *strConsStep = [attrs getWithId:@"consStep"];
    if (strConsStep != nil) self->consStep_ = JavaLangInteger_parseIntWithNSString_(strConsStep);
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleGuiShowWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, GeogebraCommonMainApp *app1, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->tmp_showAlgebra_ = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"algebraView"]];
    self->tmp_showSpreadsheet_ = [self parseBooleanWithNSString:[attrs getWithId:@"spreadsheetView"]];
    NSString *str = [attrs getWithId:@"auxiliaryObjects"];
    jboolean auxiliaryObjects = (str != nil && [str isEqual:@"true"]);
    [((GeogebraCommonMainApp *) nil_chk(app1)) setShowAuxiliaryObjectsWithBoolean:auxiliaryObjects];
    str = [attrs getWithId:@"algebraInput"];
    jboolean algebraInput = (str == nil || [str isEqual:@"true"]);
    [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowInputPanelWithBoolean:algebraInput];
    str = [attrs getWithId:@"cmdList"];
    jboolean cmdList = (str == nil || [str isEqual:@"true"]);
    [self->tmp_perspective_ setShowInputPanelCommandsWithBoolean:cmdList];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$@", [e getMessage], @": ", [e getCause])];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleGuiSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  GeogebraCommonIoMyXMLHandler_isPreferencesXML_ = YES;
  @try {
    jboolean ignoreDocument = ![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"ignoreDocument"])) isEqual:@"false"];
    [((GeogebraCommonMainSettingsLayoutSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getSettings])) getLayout])) setIgnoreDocumentLayoutWithBoolean:ignoreDocument];
    jboolean showTitleBar = ![((NSString *) nil_chk([attrs getWithId:@"showTitleBar"])) isEqual:@"false"];
    [((GeogebraCommonMainSettingsLayoutSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getLayout])) setShowTitleBarWithBoolean:showTitleBar];
    if ([attrs containsKeyWithId:@"allowStyleBar"]) {
      jboolean allowStyleBar = ![((NSString *) nil_chk([attrs getWithId:@"allowStyleBar"])) isEqual:@"false"];
      [((GeogebraCommonMainSettingsLayoutSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getLayout])) setAllowStyleBarWithBoolean:allowStyleBar];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [e getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleGraphicsSettingsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([@"true" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"javaLatexFonts"]]) [((GeogebraCommonEuclidianDrawEquation *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getDrawEquation])) setUseJavaFontsForLaTeXWithGeogebraCommonMainApp:self->app_ withBoolean:YES];
    else if ([@"false" isEqual:[attrs getWithId:@"javaLatexFonts"]]) [((GeogebraCommonEuclidianDrawEquation *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getDrawEquation])) setUseJavaFontsForLaTeXWithGeogebraCommonMainApp:self->app_ withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [e getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSplitDividerWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    self->tmp_sp1_ = 0;
    self->tmp_sp2_ = 0;
    self->tmp_spHorizontal_ = ![@"false" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"horizontal"]];
    if ([attrs getWithId:@"loc2"] == nil) {
      [attrs putWithId:@"loc2" withId:[attrs getWithId:@"loc"]];
      [attrs putWithId:@"loc" withId:@"0"];
    }
    if (self->tmp_spHorizontal_) {
      self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc"]);
      self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc2"]);
    }
    else {
      NSString *strLocVert = [attrs getWithId:@"locVertical"];
      if (strLocVert != nil) {
        self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_(strLocVert);
      }
      else {
        self->tmp_sp1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc"]);
      }
      NSString *strLocVert2 = [attrs getWithId:@"locVertical2"];
      if (strLocVert2 != nil) {
        self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_(strLocVert2);
      }
      else {
        self->tmp_sp2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"loc2"]);
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    self->tmp_sp1_ = 0;
    self->tmp_sp2_ = 0;
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *toolbarStr = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"str"];
    if (toolbarStr != nil) {
      JavaLangStringBuilder *converted = [new_JavaLangStringBuilder_init() autorelease];
      for (jint lv = 0; lv < ((jint) [toolbarStr length]); lv++) {
        jchar c = [toolbarStr charAtWithInt:lv];
        if (JavaLangCharacter_isDigitWithChar_(c)) {
          JavaLangStringBuilder *numStr = [new_JavaLangStringBuilder_init() autorelease];
          jchar cc;
          while (lv < ((jint) [toolbarStr length]) && JavaLangCharacter_isDigitWithChar_(cc = [toolbarStr charAtWithInt:lv])) {
            [numStr appendWithChar:cc];
            lv++;
          }
          jint num = JavaLangInteger_parseIntWithNSString_([numStr description]);
          if (num > 999) {
            num = num + 100000 - 1000;
          }
          [converted appendWithInt:num];
          [converted appendWithNSString:@" "];
        }
        else {
          [converted appendWithChar:c];
        }
      }
      toolbarStr = [converted description];
      [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:YES];
      [self->tmp_perspective_ setToolbarDefinitionWithNSString:toolbarStr];
    }
    else {
      NSString *showToolBar = [attrs getWithId:@"show"];
      if (showToolBar == nil) {
        [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:YES];
      }
      else {
        [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowToolBarWithBoolean:[showToolBar isEqual:@"true"]];
      }
      [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setToolbarDefinitionWithNSString:[attrs getWithId:@"items"]];
      if ([attrs getWithId:@"position"] != nil) {
        JavaLangInteger *toolBarPosition = JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"position"]));
        [self->tmp_perspective_ setToolBarPositionWithInt:[toolBarPosition intValue]];
        [self->tmp_perspective_ setShowToolBarHelpWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"help"])) isEqual:@"false"]];
      }
      else {
        [self->tmp_perspective_ setToolBarPositionWithInt:GeogebraCommonJavaxSwingSwingConstants_NORTH];
        [self->tmp_perspective_ setShowToolBarHelpWithBoolean:YES];
      }
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleWindowSizeWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    GeogebraCommonAwtGDimension *size = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newDimensionWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"]) withInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"height"])];
    [((GeogebraCommonMainApp *) nil_chk(app)) setPreferredSizeWithGeogebraCommonAwtGDimension:size];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint guiSize = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"size"]);
    [((GeogebraCommonMainApp *) nil_chk(app)) setFontSizeWithInt:guiSize];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleMenuFontWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint guiSize = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"size"]);
    if (guiSize <= 0) {
      [((GeogebraCommonMainApp *) nil_chk(app)) setGUIFontSizeWithInt:-1];
    }
    else {
      for (jint i = 0; i < ((IOSIntArray *) nil_chk(GeogebraCommonIoMyXMLHandler_menuFontSizes_))->size_; i++) {
        if (IOSIntArray_Get(GeogebraCommonIoMyXMLHandler_menuFontSizes_, i) >= guiSize) {
          guiSize = IOSIntArray_Get(GeogebraCommonIoMyXMLHandler_menuFontSizes_, i);
          break;
        }
      }
      if (guiSize > IOSIntArray_Get(GeogebraCommonIoMyXMLHandler_menuFontSizes_, GeogebraCommonIoMyXMLHandler_menuFontSizes_->size_ - 1)) guiSize = IOSIntArray_Get(GeogebraCommonIoMyXMLHandler_menuFontSizes_, GeogebraCommonIoMyXMLHandler_menuFontSizes_->size_ - 1);
      [((GeogebraCommonMainApp *) nil_chk(app)) setGUIFontSizeWithInt:guiSize];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTooltipSettingsWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    NSString *ttl = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"language"];
    if ([@"" isEqual:ttl]) {
      [((GeogebraCommonMainApp *) nil_chk(app)) setTooltipLanguageWithNSString:nil];
    }
    else if (ttl != nil) {
      [((GeogebraCommonMainApp *) nil_chk(app)) setTooltipLanguageWithNSString:ttl];
    }
    jint ttt = -1;
    @try {
      ttt = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"timeout"]);
    }
    @catch (JavaLangNumberFormatException *e) {
    }
    [((GeogebraCommonMainApp *) nil_chk(app)) setTooltipTimeoutWithInt:ttt];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleMouseWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  [((GeogebraCommonMainApp *) nil_chk(app)) reverseMouseWheelWithBoolean:[@"true" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"reverseWheel"]]];
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleLabelingStyleWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(GeogebraCommonMainApp *app, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint style = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    [((GeogebraCommonMainApp *) nil_chk(app)) setLabelingStyleWithInt:style];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_startGuiPerspectivesElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"perspective" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(self, attrs);
  else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <perspectives>: ", eName));
  if (!ok) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <perspectives>: ", eName));
}

jboolean GeogebraCommonIoMyXMLHandler_handlePerspectiveWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_perspective_(self, new_GeogebraCommonIoLayoutPerspective_initWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]));
    [((JavaUtilArrayList *) nil_chk(self->tmp_perspectives_)) addWithId:self->tmp_perspective_];
    if (self->tmp_panes_ == nil) {
      GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_panes_(self, new_JavaUtilArrayList_init());
    }
    else {
      [self->tmp_panes_ clear];
    }
    if (self->tmp_views_ == nil) {
      GeogebraCommonIoMyXMLHandler_setAndConsume_tmp_views_(self, new_JavaUtilArrayList_init());
    }
    else {
      [self->tmp_views_ clear];
    }
    self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE;
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_endGuiPerspectivesElement(GeogebraCommonIoMyXMLHandler *self) {
  [((GeogebraCommonMainApp *) nil_chk(self->app_)) setTmpPerspectivesWithJavaUtilArrayList:self->tmp_perspectives_];
}

void GeogebraCommonIoMyXMLHandler_startGuiPerspectiveElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'd':
    if ([@"dockBar" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'i':
    if ([@"input" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'p':
    if ([@"panes" isEqual:eName]) {
      self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_PANES;
      break;
    }
    case 's':
    if ([@"show" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleGuiShowWithGeogebraCommonMainApp_withJavaUtilLinkedHashMap_(self, self->app_, attrs);
      break;
    }
    case 't':
    if ([@"toolbar" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleToolbarWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    case 'v':
    if ([@"views" isEqual:eName]) {
      self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GUI_PERSPECTIVE_VIEWS;
      break;
    }
    default:
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <perspective>: ", eName));
  }
  if (!ok) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <perspective>: ", eName));
}

jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowInputPanelWithBoolean:![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"])) isEqual:@"false"]];
    [self->tmp_perspective_ setShowInputPanelCommandsWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"cmd"])) isEqual:@"false"]];
    GeogebraCommonMainApp_InputPositonEnum *ip = [((NSString *) nil_chk([attrs getWithId:@"top"])) isEqual:@"true"] ? GeogebraCommonMainApp_InputPositonEnum_get_top() : ([@"false" isEqual:[attrs getWithId:@"top"]] ? GeogebraCommonMainApp_InputPositonEnum_get_bottom() : GeogebraCommonMainApp_InputPositonEnum_get_algebraView());
    [self->tmp_perspective_ setInputPositionWithGeogebraCommonMainApp_InputPositonEnum:ip];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleDockBarWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setShowDockBarWithBoolean:![((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"])) isEqual:@"false"]];
    [self->tmp_perspective_ setDockBarEastWithBoolean:![((NSString *) nil_chk([attrs getWithId:@"east"])) isEqual:@"false"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_endGuiPerspectiveElement(GeogebraCommonIoMyXMLHandler *self) {
  IOSObjectArray *dpInfo = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->tmp_views_)) size] type:GeogebraCommonIoLayoutDockPanelData_class_()];
  IOSObjectArray *spInfo = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(self->tmp_panes_)) size] type:GeogebraCommonIoLayoutDockSplitPaneData_class_()];
  [((GeogebraCommonIoLayoutPerspective *) nil_chk(self->tmp_perspective_)) setDockPanelDataWithGeogebraCommonIoLayoutDockPanelDataArray:[self->tmp_views_ toArrayWithNSObjectArray:dpInfo]];
  [self->tmp_perspective_ setSplitPaneDataWithGeogebraCommonIoLayoutDockSplitPaneDataArray:[self->tmp_panes_ toArrayWithNSObjectArray:spInfo]];
}

void GeogebraCommonIoMyXMLHandler_startGuiViewsElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"view" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(self, attrs);
  else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <views>: ", eName));
  if (!ok) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <views>: ", eName));
}

jboolean GeogebraCommonIoMyXMLHandler_handleViewWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint viewId = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"id"]);
    NSString *toolbar = [attrs getWithId:@"toolbar"];
    jboolean isVisible = ![((NSString *) nil_chk([attrs getWithId:@"visible"])) isEqual:@"false"];
    jboolean openInFrame = ![((NSString *) nil_chk([attrs getWithId:@"inframe"])) isEqual:@"false"];
    NSString *showStyleBarStr = [attrs getWithId:@"stylebar"];
    jboolean showStyleBar = (showStyleBarStr != nil ? ![showStyleBarStr isEqual:@"false"] : NO);
    IOSObjectArray *window = [((NSString *) nil_chk([attrs getWithId:@"window"])) split:@","];
    id<GeogebraCommonAwtGRectangle> windowRect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(window), 0)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 1)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 2)) withInt:JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(window, 3))];
    NSString *embeddedDef = [attrs getWithId:@"location"];
    jint embeddedSize = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"size"]);
    NSString *plane = [attrs getWithId:@"plane"];
    [((JavaUtilArrayList *) nil_chk(self->tmp_views_)) addWithId:[new_GeogebraCommonIoLayoutDockPanelData_initWithInt_withNSString_withBoolean_withBoolean_withBoolean_withGeogebraCommonAwtGRectangle_withNSString_withInt_withNSString_(viewId, toolbar, isVisible, openInFrame, showStyleBar, windowRect, embeddedDef, embeddedSize, plane) autorelease]];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_startGuiPanesElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"pane" isEqual:eName]) ok = GeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(self, attrs);
  else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown tag in <panes>: ", eName));
  if (!ok) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <panes>: ", eName));
}

jboolean GeogebraCommonIoMyXMLHandler_handlePaneWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *location = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"location"];
    jdouble dividerLocation = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"divider"]);
    jint orientation = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"orientation"]);
    [((JavaUtilArrayList *) nil_chk(self->tmp_panes_)) addWithId:[new_GeogebraCommonIoLayoutDockSplitPaneData_initWithNSString_withDouble_withInt_(location, dividerLocation, orientation) autorelease]];
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$@", [((JavaLangException *) nil_chk(e)) getMessage], @": ", [e getCause]));
    return NO;
  }
}

void GeogebraCommonIoMyXMLHandler_handleConstructionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setAllowUnboundedAnglesWithBoolean:GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(self->ggbFileFormat_, 4.4)];
    NSString *title = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"title"];
    NSString *author = [attrs getWithId:@"author"];
    NSString *date = [attrs getWithId:@"date"];
    if (title != nil) [self->cons_ setTitleWithNSString:title];
    if (author != nil) [self->cons_ setAuthorWithNSString:author];
    if (date != nil) [self->cons_ setDateWithNSString:date];
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"error in <construction>"];
  }
}

void GeogebraCommonIoMyXMLHandler_initMacroWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *cmdName = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"cmdName"];
    NSString *toolName = [attrs getWithId:@"toolName"];
    NSString *toolHelp = [attrs getWithId:@"toolHelp"];
    NSString *iconFile = [attrs getWithId:@"iconFile"];
    jboolean copyCaptions = [self parseBooleanWithNSString:[attrs getWithId:@"copyCaptions"]];
    NSString *strShowInToolBar = [attrs getWithId:@"showInToolBar"];
    jint n = 0;
    NSString *myCmdName = cmdName;
    while ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getMacroWithNSString:myCmdName] != nil) {
      n++;
      myCmdName = JreStrcat("$I", cmdName, n);
    }
    GeogebraCommonIoMyXMLHandler_setAndConsume_macro_(self, new_GeogebraCommonKernelMacro_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, myCmdName));
    [self->macro_ setToolNameWithNSString:toolName];
    [self->macro_ setCopyCaptionsAndVisibilityWithBoolean:copyCaptions];
    [self->macro_ setToolHelpWithNSString:toolHelp];
    [self->macro_ setIconFileNameWithNSString:iconFile];
    jboolean showTool = strShowInToolBar == nil ? YES : [self parseBooleanWithNSString:strShowInToolBar];
    [self->macro_ setShowInToolBarWithBoolean:showTool];
    GeogebraCommonKernelMacroKernel *macroKernel = [self->kernel_ newMacroKernel];
    [((GeogebraCommonKernelMacroKernel *) nil_chk(macroKernel)) setContinuousWithBoolean:NO];
    GeogebraCommonIoMyXMLHandler_set_kernel_(self, macroKernel);
    GeogebraCommonIoMyXMLHandler_set_cons_(self, [macroKernel getConstruction]);
    GeogebraCommonIoMyXMLHandler_setAndConsume_parser_(self, new_GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(macroKernel, self->cons_));
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"error in <macro>"];
  }
}

void GeogebraCommonIoMyXMLHandler_endMacro(GeogebraCommonIoMyXMLHandler *self) {
  [((GeogebraCommonKernelMacro *) nil_chk(self->macro_)) initMacroWithGeogebraCommonKernelConstruction:self->cons_ withNSStringArray:self->macroInputLabels_ withNSStringArray:self->macroOutputLabels_];
  [((GeogebraCommonKernelKernel *) nil_chk(self->origKernel_)) addMacroWithGeogebraCommonKernelMacro:self->macro_];
  GeogebraCommonIoMyXMLHandler_initKernelVars(self);
}

void GeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *above = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"above"];
  NSString *below = [attrs getWithId:@"below"];
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setWorksheetTextWithNSString:above withInt:0];
  [self->cons_ setWorksheetTextWithNSString:below withInt:1];
}

void GeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  switch (self->casMode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    if ([@"cellPair" isEqual:eName]) {
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
      GeogebraCommonIoMyXMLHandler_startCellPair(self);
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <cellPair>: ", eName)];
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR:
    if ([@"inputCell" isEqual:eName]) {
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL;
    }
    else if ([@"outputCell" isEqual:eName]) {
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL;
    }
    else if ([@"useAsText" isEqual:eName]) {
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL;
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <cellPair>: ", eName)];
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL:
    GeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL:
    GeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL:
    GeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I", @"unknown cas session mode:", self->constMode_)];
  }
}

void GeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  switch (self->casMode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    if ([@"cascell" isEqual:eName]) {
      self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
      self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      GeogebraCommonIoMyXMLHandler_set_geoCasCell_(self, nil);
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR:
    if ([@"cellPair" isEqual:eName]) {
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      GeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(self, eName);
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_TEXT_CELL:
    if ([@"useAsText" isEqual:eName]) self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_INPUT_CELL:
    if ([@"inputCell" isEqual:eName]) self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CAS_OUTPUT_CELL:
    if ([@"outputCell" isEqual:eName]) self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CAS_CELL_PAIR;
    break;
    default:
    self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I", @"unknown cas session mode:", self->constMode_)];
  }
}

void GeogebraCommonIoMyXMLHandler_startCellPair(GeogebraCommonIoMyXMLHandler *self) {
  GeogebraCommonIoMyXMLHandler_setAndConsume_geoCasCell_(self, new_GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_(self->cons_));
}

void GeogebraCommonIoMyXMLHandler_endCellPairWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  if (self->geoCasCell_ == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$C", @"no element set for <", eName, '>')];
    return;
  }
  @try {
    jboolean independentCell = ![((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) hasVariablesOrCommands];
    if (independentCell) {
      if ([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getCasCellWithInt:0] == nil && [((NSString *) nil_chk([self->geoCasCell_ getInputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@""]) {
        return;
      }
      [self->cons_ addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->geoCasCell_ withBoolean:YES];
      [self->cons_ addToGeoSetWithCasCellsWithGeogebraCommonKernelGeosGeoCasCell:self->geoCasCell_];
      if ([self->geoCasCell_ isAssignmentVariableDefined]) {
        if ([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) isUpdateConstructionRunning]) {
          [self->geoCasCell_ computeOutput];
        }
        else {
          [self->geoCasCell_ updateTwinGeoWithBoolean:NO];
        }
        [self->geoCasCell_ setLabelOfTwinGeo];
        if ([self->geoCasCell_ hasTwinGeo] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) isInConstructionList]) {
          if (![((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) getParentAlgorithm])) isInConstructionList]) [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoCasCell_ getTwinGeo])) getParentAlgorithm])) addToConstructionList];
        }
      }
      else if ([self->geoCasCell_ isOutputEmpty] && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isGeoGebraCASready]) {
        [self->geoCasCell_ computeOutput];
      }
    }
    else {
      GeogebraCommonKernelKernelCAS_DependentCasCellWithGeogebraCommonKernelGeosGeoCasCell_(self->geoCasCell_);
    }
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error when processing <cellpair>: ", [((JavaLangException *) nil_chk(e)) getMessage])];
    [e printStackTrace];
  }
}

void GeogebraCommonIoMyXMLHandler_startCellOutputElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$C", @"no element set for <", eName, '>')];
    return;
  }
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'e':
    if ([@"expression" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <outputCell>: ", eName)];
  }
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <outputCell>: ", eName)];
}

void GeogebraCommonIoMyXMLHandler_startCellInputElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$C", @"no element set for <", eName, '>')];
    return;
  }
  jboolean ok = YES;
  switch (GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(eName)) {
    case 'e':
    if ([@"expression" isEqual:eName]) {
      ok = GeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(self, attrs);
      break;
    }
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <inputCell>: ", eName)];
  }
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <inputCell>: ", eName)];
}

void GeogebraCommonIoMyXMLHandler_startCellTextElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  if (self->geoCasCell_ == nil) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$C", @"no element set for <", eName, '>')];
    return;
  }
  [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) setUseAsTextWithBoolean:YES];
  jboolean ok = YES;
  if ([@"FontStyle" isEqual:eName]) {
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    [self->geoCasCell_ setFontStyleWithInt:JavaLangInteger_parseIntWithNSString_(style)];
  }
  else if ([@"FontSizeM" isEqual:eName]) {
    NSString *size = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    if (GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size) > 0) [self->geoCasCell_ setFontSizeMultiplierWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size)];
  }
  else if ([@"FontColor" isEqual:eName]) {
    NSString *r = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"];
    NSString *b = [attrs getWithId:@"b"];
    NSString *g = [attrs getWithId:@"g"];
    [self->geoCasCell_ setFontColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:JavaLangInteger_parseIntWithNSString_(r) withInt:JavaLangInteger_parseIntWithNSString_(g) withInt:JavaLangInteger_parseIntWithNSString_(b)]];
  }
  else [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <useAsText>: ", eName)];
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <useAsText>: ", eName)];
}

void GeogebraCommonIoMyXMLHandler_startConstructionElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  switch (self->constMode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    if ([@"element" isEqual:eName]) {
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT;
      GeogebraCommonIoMyXMLHandler_set_geo_(self, GeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(self, attrs));
    }
    else if ([@"command" isEqual:eName]) {
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND;
      GeogebraCommonIoMyXMLHandler_set_cmd_(self, GeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(self, attrs));
    }
    else if ([@"expression" isEqual:eName]) {
      GeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else if ([@"cascell" isEqual:eName]) {
      self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
      self->casMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL;
    }
    else if ([@"worksheetText" isEqual:eName]) {
      GeogebraCommonIoMyXMLHandler_handleWorksheetTextWithJavaUtilLinkedHashMap_(self, attrs);
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <construction>: ", eName)];
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT:
    [self startGeoElementWithNSString:eName withJavaUtilLinkedHashMap:attrs];
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND:
    GeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    GeogebraCommonIoMyXMLHandler_startCasCellWithNSString_withJavaUtilLinkedHashMap_(self, eName, attrs);
    break;
    default:
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I", @"unknown construction mode:", self->constMode_)];
  }
}

void GeogebraCommonIoMyXMLHandler_endConstructionElementWithNSString_(GeogebraCommonIoMyXMLHandler *self, NSString *eName) {
  switch (self->constMode_) {
    case GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION:
    if ([@"construction" isEqual:eName]) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"cons tag end", JavaLangSystem_currentTimeMillis()));
      GeogebraCommonIoMyXMLHandler_processStartPointList(self);
      GeogebraCommonIoMyXMLHandler_processLinkedGeoList(self);
      GeogebraCommonIoMyXMLHandler_processShowObjectConditionList(self);
      GeogebraCommonIoMyXMLHandler_processDynamicColorList(self);
      GeogebraCommonIoMyXMLHandler_processAnimationSpeedList(self);
      GeogebraCommonIoMyXMLHandler_processAnimationStepList(self);
      GeogebraCommonIoMyXMLHandler_processMinMaxList(self);
      GeogebraCommonIoMyXMLHandler_processEvSizes(self);
      GeogebraCommonIoMyXMLHandler_processAnimatingList(self);
      if (self->kernel_ == self->origKernel_) {
        self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_GEOGEBRA;
      }
      else {
        self->mode_ = GeogebraCommonIoMyXMLHandler_MODE_MACRO;
      }
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_GEO_ELEMENT:
    if ([@"element" isEqual:eName]) self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_COMMAND:
    if ([@"command" isEqual:eName]) {
      [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:nil];
      self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    }
    break;
    case GeogebraCommonIoMyXMLHandler_MODE_CONST_CAS_CELL:
    GeogebraCommonIoMyXMLHandler_endCasCellWithNSString_(self, eName);
    break;
    default:
    self->constMode_ = GeogebraCommonIoMyXMLHandler_MODE_CONSTRUCTION;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I", @"unknown construction mode:", self->constMode_)];
  }
}

void GeogebraCommonIoMyXMLHandler_processEvSizes(GeogebraCommonIoMyXMLHandler *self) {
  JavaUtilArrayList *eSet = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(self->xmin_)) keySet]) autorelease];
  for (GeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([self->xmin_ getWithId:ev] == nil) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<GeogebraCommonKernelArithmeticNumberValue> n = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->xmin_ getWithId:ev] withBoolean:YES];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (GeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->xmax_)) getWithId:ev] == nil) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<GeogebraCommonKernelArithmeticNumberValue> n = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->xmax_ getWithId:ev] withBoolean:YES];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (GeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->ymin_)) getWithId:ev] == nil) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<GeogebraCommonKernelArithmeticNumberValue> n = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->ymin_ getWithId:ev] withBoolean:YES];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
  for (GeogebraCommonMainSettingsEuclidianSettings * __strong ev in eSet) {
    if ([((JavaUtilHashMap *) nil_chk(self->ymax_)) getWithId:ev] == nil) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:nil withBoolean:YES];
    }
    else {
      id<GeogebraCommonKernelArithmeticNumberValue> n = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:[self->ymax_ getWithId:ev] withBoolean:YES];
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(ev)) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:n withBoolean:YES];
    }
  }
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonIoMyXMLHandler_getGeoElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonKernelGeosGeoElement *geo1 = nil;
  NSString *label = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"label"];
  NSString *type = [attrs getWithId:@"type"];
  NSString *defaultset = [attrs getWithId:@"default"];
  if (label == nil || type == nil) {
    GeogebraCommonUtilDebugLog_errorWithNSString_(@"attributes missing in <element>");
    return geo1;
  }
  if (defaultset == nil || ![((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getElementDefaultAllowed]) {
    geo1 = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:label];
    if (geo1 == nil) {
      geo1 = [self->kernel_ createGeoElementWithGeogebraCommonKernelConstruction:self->cons_ withNSString:type];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setLoadedLabelWithNSString:label];
      [geo1 setEuclidianVisibleWithBoolean:NO];
    }
  }
  else {
    jint defset = JavaLangInteger_parseIntWithNSString_(defaultset);
    geo1 = [((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:defset];
    if (geo1 == nil) {
      geo1 = [self->kernel_ lookupLabelWithNSString:label];
      if (geo1 == nil) {
        geo1 = [self->kernel_ createGeoElementWithGeogebraCommonKernelConstruction:self->cons_ withNSString:type];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setLoadedLabelWithNSString:label];
        [geo1 setEuclidianVisibleWithBoolean:NO];
      }
    }
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getGeoClassType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()] && self->ggbFileFormat_ < 3.3) {
    [((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosPointProperties))) setPointStyleWithInt:self->docPointStyle_];
  }
  if ([geo1 isLimitedPath]) {
    id<GeogebraCommonKernelGeosLimitedPath> lp = (id<GeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosLimitedPath));
    [lp setAllowOutlyingIntersectionsWithBoolean:YES];
    [lp setKeepTypeOnGeometricTransformWithBoolean:NO];
  }
  return geo1;
}

jboolean GeogebraCommonIoMyXMLHandler_handleDimensionsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *width = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"width"];
  NSString *height = [attrs getWithId:@"height"];
  if (width != nil && height != nil) {
    if ([width matches:@"\\d{2,3}"] && [height matches:@"\\d{2,3}"]) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoButton]) {
        GeogebraCommonKernelGeosGeoButton *button = (GeogebraCommonKernelGeosGeoButton *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoButton class]);
        [button setWidthWithInt:JavaLangInteger_parseIntWithNSString_(width)];
        [button setHeightWithInt:JavaLangInteger_parseIntWithNSString_(height)];
        [button setFixedSizeWithBoolean:YES];
        return YES;
      }
      return NO;
    }
    return YES;
  }
  return NO;
}

jchar GeogebraCommonIoMyXMLHandler_firstCharWithNSString_(NSString *eName) {
  GeogebraCommonIoMyXMLHandler_initialize();
  if (eName == nil || ((jint) [eName length]) == 0) return '?';
  return [((NSString *) nil_chk(eName)) charAtWithInt:0];
}

jboolean GeogebraCommonIoMyXMLHandler_handleShowWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setEuclidianVisibleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"object"]]];
    [self->geo_ setLabelVisibleWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"label"]]];
    jint EVs = 0;
    NSString *str = [attrs getWithId:@"ev"];
    if (str != nil) EVs = JavaLangInteger_parseIntWithNSString_(str);
    if ((EVs & 1) == 0) [self->geo_ addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
    else [self->geo_ removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
    if ((EVs & 2) == 2) {
      [self->geo_ addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    else {
      [self->geo_ removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    if ((EVs & 4) == 4) {
      [self->geo_ addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    if ((EVs & 8) == 8) {
      [self->geo_ removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleShowOnAxisWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if (!([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]])) return NO;
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoFunction class])))) setShowOnAxisWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleObjColorWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonAwtGColor *col = GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setObjColorWithGeogebraCommonAwtGColor:col];
  NSString *red = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"dynamicr"];
  NSString *green = [attrs getWithId:@"dynamicg"];
  NSString *blue = [attrs getWithId:@"dynamicb"];
  NSString *alpha = [attrs getWithId:@"dynamica"];
  NSString *colorSpace = [attrs getWithId:@"colorSpace"];
  if (red != nil && green != nil && blue != nil) @try {
    if (![red isEqual:@""] || ![green isEqual:@""] || ![blue isEqual:@""]) {
      if ([red isEqual:@""]) red = @"0";
      if ([green isEqual:@""]) green = @"0";
      if ([blue isEqual:@""]) blue = @"0";
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithChar:'{'];
      [sb appendWithNSString:red];
      [sb appendWithChar:','];
      [sb appendWithNSString:green];
      [sb appendWithChar:','];
      [sb appendWithNSString:blue];
      if (alpha != nil && ![alpha isEqual:@""]) {
        [sb appendWithChar:','];
        [sb appendWithNSString:alpha];
      }
      [sb appendWithChar:'}'];
      [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, [sb description]) autorelease]];
      [self->geo_ setColorSpaceWithInt:colorSpace == nil ? GeogebraCommonKernelGeosGeoElement_COLORSPACE_RGB : JavaLangInteger_parseIntWithNSString_(colorSpace)];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:@"Error loading Dynamic Colors"];
  }
  NSString *angle = [attrs getWithId:@"hatchAngle"];
  if (angle != nil) {
    [self->geo_ setHatchingAngleWithInt:JavaLangInteger_parseIntWithNSString_(angle)];
  }
  NSString *inverse = [attrs getWithId:@"inverseFill"];
  if (inverse != nil) {
    [self->geo_ setInverseFillWithBoolean:JavaLangBoolean_parseBooleanWithNSString_(inverse)];
  }
  NSString *distance = [attrs getWithId:@"hatchDistance"];
  if (angle != nil) {
    [self->geo_ setHatchingDistanceWithInt:JavaLangInteger_parseIntWithNSString_(distance)];
    [self->geo_ setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_HATCH()];
  }
  NSString *fillType = [attrs getWithId:@"fillType"];
  if (fillType != nil) {
    [self->geo_ setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:IOSObjectArray_Get(nil_chk(GeogebraCommonKernelGeosGeoElement_FillTypeEnum_values()), JavaLangInteger_parseIntWithNSString_(fillType))];
  }
  NSString *fillSymbol = [attrs getWithId:@"fillSymbol"];
  if (fillSymbol != nil) {
    [self->geo_ setFillSymbolWithNSString:fillSymbol];
  }
  NSString *filename = [attrs getWithId:@"image"];
  if (filename != nil) {
    [self->geo_ setFillImageWithNSString:filename];
    [self->geo_ setFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()];
  }
  alpha = [attrs getWithId:@"alpha"];
  if (alpha != nil && (![self->geo_ isGeoList] || self->ggbFileFormat_ > 3.19)) [self->geo_ setAlphaValueWithFloat:JavaLangFloat_parseFloatWithNSString_(alpha)];
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleBgColorWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonAwtGColor *col = GeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(attrs);
  if (col == nil) return NO;
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setBackgroundColorWithGeogebraCommonAwtGColor:col];
  [self->geo_ updateRepaint];
  return YES;
}

GeogebraCommonAwtGColor *GeogebraCommonIoMyXMLHandler_handleColorAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint red = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"]);
    jint green = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"g"]);
    jint blue = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"b"]);
    return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

GeogebraCommonAwtGColor *GeogebraCommonIoMyXMLHandler_handleColorAlphaAttrsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  @try {
    jint red = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"r"]);
    jint green = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"g"]);
    jint blue = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"b"]);
    jint alpha = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"alpha"]);
    return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue withInt:alpha];
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleLineStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLineTypeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"])];
    [self->geo_ setLineThicknessWithInt:JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"thickness"])];
    NSString *typeHidden = [attrs getWithId:@"typeHidden"];
    if (typeHidden != nil) [self->geo_ setLineTypeHiddenWithInt:JavaLangInteger_parseIntWithNSString_(typeHidden)];
    NSString *opacity = [attrs getWithId:@"opacity"];
    if (opacity != nil) {
      [self->geo_ setLineOpacityWithInt:JavaLangInteger_parseIntWithNSString_(opacity)];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleDecorationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setDecorationTypeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleEqnStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoLine]) {
    id<GeogebraCommonKernelKernelNDGeoLineND> line = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelKernelNDGeoLineND));
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
    if ([((NSString *) nil_chk(style)) isEqual:@"implicit"]) {
      [line setToImplicit];
    }
    else if ([style isEqual:@"explicit"]) {
      [line setToExplicit];
    }
    else if ([style isEqual:@"parametric"]) {
      NSString *parameter = [attrs getWithId:@"parameter"];
      [line setToParametricWithNSString:parameter];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown style for line in <eqnStyle>: ", style)];
      return NO;
    }
  }
  else if ([self->geo_ isGeoConic]) {
    GeogebraCommonKernelKernelNDGeoConicND *conic = (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(self->geo_, [GeogebraCommonKernelKernelNDGeoConicND class]);
    NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
    if ([((NSString *) nil_chk(style)) isEqual:@"implicit"]) {
      [conic setToImplicit];
    }
    else if ([style isEqual:@"specific"]) {
      [conic setToSpecific];
    }
    else if ([style isEqual:@"explicit"]) {
      [conic setToExplicit];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown style for conic in <eqnStyle>: ", style)];
      return NO;
    }
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <eqnStyle>: ", [self->geo_ getClass])];
    return NO;
  }
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleCurveParamWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoVec3D class]])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <curveParam>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  GeogebraCommonKernelGeosGeoVec3D *v = (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoVec3D class]);
  @try {
    NSString *tAttr = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"t"];
    if (tAttr != nil) {
      jdouble t = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(tAttr);
      [((GeogebraCommonKernelPathParameter *) nil_chk([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(v, [GeogebraCommonKernelGeosGeoPoint class])))) getPathParameter])) setTWithDouble:t];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$$", @"problem in <curveParam>: ", [((JavaLangException *) nil_chk(e)) getMessage]));
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCoordsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) handleCoordsWithGeogebraCommonKernelGeosGeoElement:self->geo_ withJavaUtilLinkedHashMap:attrs];
}

jboolean GeogebraCommonIoMyXMLHandler_handleCoordStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelKernelNDCoordStyle_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <coordStyle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  id<GeogebraCommonKernelKernelNDCoordStyle> v = (id<GeogebraCommonKernelKernelNDCoordStyle>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelKernelNDCoordStyle));
  NSString *style = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"style"];
  if ([((NSString *) nil_chk(style)) isEqual:@"cartesian"]) {
    [((id<GeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setCartesian];
  }
  else if ([style isEqual:@"polar"]) {
    [((id<GeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setPolar];
  }
  else if ([style isEqual:@"complex"]) {
    [((id<GeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setComplex];
  }
  else if ([style isEqual:@"cartesian3d"]) {
    [((id<GeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setCartesian3D];
  }
  else if ([style isEqual:@"spherical"]) {
    [((id<GeogebraCommonKernelKernelNDCoordStyle>) nil_chk(v)) setSpherical];
  }
  else {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown style in <coordStyle>: ", style)];
    return NO;
  }
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleListenersWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([@"objectUpdate" isEqual:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"type"]]) {
      [((JavaUtilHashMap *) nil_chk([((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getScriptManager])) getUpdateListenerMap])) putWithId:self->geo_ withId:[attrs getWithId:@"val"]];
    }
    if ([@"objectClick" isEqual:[attrs getWithId:@"type"]]) {
      [((JavaUtilHashMap *) nil_chk([((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getScriptManager])) getClickListenerMap])) putWithId:self->geo_ withId:[attrs getWithId:@"val"]];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonUtilDebugLog_errorWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCaptionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setCaptionWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleScriptWithJavaUtilLinkedHashMap_withGeogebraCommonPluginScriptTypeEnum_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs, GeogebraCommonPluginScriptTypeEnum *type) {
  @try {
    NSString *text = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (text != nil && ((jint) [text length]) > 0) {
      GeogebraCommonPluginScriptScript *script = [((GeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithGeogebraCommonPluginScriptTypeEnum:type withNSString:text withBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setClickScriptWithGeogebraCommonPluginScriptScript:script];
    }
    text = [attrs getWithId:@"onUpdate"];
    if (text != nil && ((jint) [text length]) > 0) {
      GeogebraCommonPluginScriptScript *script = [((GeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithGeogebraCommonPluginScriptTypeEnum:type withNSString:text withBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setUpdateScriptWithGeogebraCommonPluginScriptScript:script];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleConditionWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *strShowObjectCond = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"showObject"];
    if (strShowObjectCond != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strShowObjectCond) autorelease]];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCheckboxWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoBoolean])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <checkbox>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    GeogebraCommonKernelGeosGeoBoolean *bool_ = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoBoolean class]);
    [bool_ setCheckboxFixedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"fixed"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleValueWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  jboolean isBoolean = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoBoolean];
  jboolean isNumber = [self->geo_ isGeoNumeric];
  jboolean isButton = [self->geo_ isGeoButton];
  if (!(isNumber || isBoolean || isButton)) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <value>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    NSString *strVal = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
    if (isNumber) {
      GeogebraCommonKernelGeosGeoNumeric *n = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoNumeric class]);
      [n setValueWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(strVal)];
      [n setRandomWithBoolean:[@"true" isEqual:[attrs getWithId:@"random"]]];
    }
    else if (isBoolean) {
      GeogebraCommonKernelGeosGeoBoolean *bool_ = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoBoolean class]);
      [bool_ setValueWithBoolean:[self parseBooleanWithNSString:strVal]];
    }
    else if (isButton) {
      GeogebraCommonKernelGeosGeoButton *button = (GeogebraCommonKernelGeosGeoButton *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoButton class]);
      GeogebraCommonPluginScriptScript *script = [((GeogebraCommonMainApp *) nil_chk(self->app_)) createScriptWithGeogebraCommonPluginScriptTypeEnum:GeogebraCommonPluginScriptTypeEnum_get_JAVASCRIPT() withNSString:strVal withBoolean:NO];
      [button setClickScriptWithGeogebraCommonPluginScriptScript:script];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handlePointSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosPointProperties_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <pointSize>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosPointProperties> p = (id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosPointProperties));
    [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(p)) setPointSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handlePointStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosPointProperties_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <pointStyle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosPointProperties> p = (id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosPointProperties));
    jint style = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    if (style == -1) {
      style = self->docPointStyle_;
    }
    [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(p)) setPointStyleWithInt:style];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleLayerWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLayerWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCasCellInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *input = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) setInputWithNSString:input withBoolean:YES];
    jboolean pointList = [self parseBooleanWithNSString:[attrs getWithId:@"pointList"]];
    [self->geoCasCell_ setPointListWithBoolean:pointList];
    NSString *prefix = [attrs getWithId:@"prefix"];
    NSString *eval = [attrs getWithId:@"eval"];
    NSString *postfix = [attrs getWithId:@"postfix"];
    if (eval != nil) {
      [self->geoCasCell_ setProcessingInformationWithNSString:prefix withNSString:eval withNSString:postfix];
    }
    NSString *evalCmd = [attrs getWithId:@"evalCmd"];
    [self->geoCasCell_ setEvalCommandWithNSString:evalCmd];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCasCellOutputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if ([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->geoCasCell_)) isUseAsText]) return YES;
  @try {
    NSString *output = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
    jboolean error = [self parseBooleanWithNSString:[attrs getWithId:@"error"]];
    jboolean nativeOutput = [self parseBooleanWithNSString:[attrs getWithId:@"native"]];
    [self->geoCasCell_ setNativeWithBoolean:nativeOutput];
    if (error) {
      [self->geoCasCell_ setErrorWithNSString:output];
    }
    else {
      if (!nativeOutput) {
        [self->geoCasCell_ computeOutput];
      }
      else {
        [self->geoCasCell_ setOutputWithNSString:output withBoolean:NO];
      }
    }
    NSString *evalCommandComment = [attrs getWithId:@"evalCommand"];
    if (evalCommandComment != nil) {
      [self->geoCasCell_ setEvalCommandWithNSString:evalCommandComment];
    }
    else {
      [self->geoCasCell_ setEvalCommandWithNSString:@""];
    }
    NSString *evalComment = [attrs getWithId:@"evalComment"];
    if (evalComment != nil) {
      [self->geoCasCell_ setEvalCommentWithNSString:evalComment];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSliderWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoNumeric])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <slider>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    if ([((GeogebraCommonKernelKernel *) nil_chk([self->geo_ getKernel])) isMacroKernel]) return YES;
    GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoNumeric class]);
    NSString *strMin = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"min"];
    NSString *strMax = [attrs getWithId:@"max"];
    if (strMin != nil || strMax != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, self->geo_, strMin, strMax) autorelease]];
    }
    NSString *str = [attrs getWithId:@"absoluteScreenLocation"];
    if (str != nil) {
      [num setAbsoluteScreenLocActiveWithBoolean:[self parseBooleanWithNSString:str]];
    }
    else {
      [num setAbsoluteScreenLocActiveWithBoolean:NO];
    }
    jdouble x = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"x"]);
    jdouble y = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y"]);
    [num setSliderLocationWithDouble:x withDouble:y withBoolean:YES];
    [num setSliderWidthWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"width"])];
    [num setSliderFixedWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"fixed"]]];
    [num setSliderHorizontalWithBoolean:[self parseBooleanWithNSString:[attrs getWithId:@"horizontal"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTraceWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosTraceable_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <trace>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosTraceable> t = (id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosTraceable));
    [((id<GeogebraCommonKernelGeosTraceable>) nil_chk(t)) setTraceWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSpreadsheetTraceWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isSpreadsheetTraceable]) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <trace>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    [self->geo_ setSpreadsheetTraceWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    GeogebraCommonUtilSpreadsheetTraceSettings *t = [self->geo_ getTraceSettings];
    ((GeogebraCommonUtilSpreadsheetTraceSettings *) nil_chk(t))->traceColumn1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceColumn1"]);
    t->traceColumn2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceColumn2"]);
    t->traceRow1_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceRow1"]);
    t->traceRow2_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"traceRow2"]);
    t->tracingRow_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"tracingRow"]);
    t->numRows_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"numRows"]);
    t->headerOffset_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"headerOffset"]);
    t->doColumnReset_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doColumnReset"]]);
    t->doRowLimit_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doRowLimit"]]);
    t->showLabel_ = ([self parseBooleanWithNSString:[attrs getWithId:@"showLabel"]]);
    t->showTraceList_ = ([self parseBooleanWithNSString:[attrs getWithId:@"showTraceList"]]);
    t->doTraceGeoCopy_ = ([self parseBooleanWithNSString:[attrs getWithId:@"doTraceGeoCopy"]]);
    NSString *stringPause = [attrs getWithId:@"pause"];
    if (stringPause == nil) {
      t->pause_ = NO;
    }
    else {
      t->pause_ = [self parseBooleanWithNSString:stringPause];
    }
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) setNeedsSpreadsheetTableModel];
    return YES;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleShowTrimmedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setShowTrimmedIntersectionLinesWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSelectionAllowedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setSelectionAllowedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSelectedIndexWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoList]) [((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoList class])) setSelectedIndexWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAnimationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *strStep = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"step"];
    if (strStep != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strStep) autorelease]];
    }
    NSString *strSpeed = [attrs getWithId:@"speed"];
    if (strSpeed != nil) {
      [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, strSpeed) autorelease]];
    }
    NSString *type = [attrs getWithId:@"type"];
    if (type != nil) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setAnimationTypeWithInt:JavaLangInteger_parseIntWithNSString_(type)];
    if ([self parseBooleanWithNSString:[attrs getWithId:@"playing"]]) [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) addWithId:self->geo_];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleFixedWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setFixedWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleBreakpointWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setConsProtocolBreakpointWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleFileWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage] || [self->geo_ isGeoButton] || [self->geo_ isGeoTurtle])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <file>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    [self->geo_ setImageFileNameWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"name"]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTextFontWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <font>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  id serif = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"serif"];
  id style = [attrs getWithId:@"style"];
  @try {
    id<GeogebraCommonKernelGeosTextProperties> text = (id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosTextProperties));
    NSString *oldSize = [attrs getWithId:@"size"];
    NSString *size = [attrs getWithId:@"sizeM"];
    if (size == nil) {
      jdouble appSize = [((GeogebraCommonMainApp *) nil_chk(self->app_)) getFontSize];
      jdouble oldSizeInt = JavaLangInteger_parseIntWithNSString_(oldSize);
      [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:JavaLangMath_maxWithDouble_withDouble_(appSize + oldSizeInt, GeogebraCommonIoMyXMLHandler_MIN_TEXT_SIZE) / appSize];
    }
    else {
      [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(size)];
    }
    if (serif != nil) [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setSerifFontWithBoolean:[self parseBooleanWithNSString:(NSString *) check_class_cast(serif, [NSString class])]];
    if (style != nil) [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontStyleWithInt:JavaLangInteger_parseIntWithNSString_((NSString *) check_class_cast(style, [NSString class]))];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTextDecimalsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <decimals>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosTextProperties> text = (id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosTextProperties));
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintDecimalsWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTextFiguresWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosTextProperties_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <decimals>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosTextProperties> text = (id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosTextProperties));
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintFiguresWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]) withBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleInBackgroundWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <inBackground>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    [((GeogebraCommonKernelGeosGeoImage *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoImage class])) setInBackgroundWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleInterpolateWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImage])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <interpolate>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    [((GeogebraCommonKernelGeosGeoImage *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoImage class])) setInterpolateWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAuxiliaryWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setAuxiliaryObjectWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleIsLaTeXWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoText class])))) setLaTeXWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]] withBoolean:NO];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleArcSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <arcSize>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAngleProperties> angle = (id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAngleProperties));
    [((id<GeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setArcSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAbsoluteScreenLocationWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <absoluteScreenLocation>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAbsoluteScreenLocateable> absLoc = (id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable));
    jint x = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    jint y = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"y"]);
    [((id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) nil_chk(absLoc)) setAbsoluteScreenLocWithInt:x withInt:y];
    [absLoc setAbsoluteScreenLocActiveWithBoolean:YES];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAllowReflexAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <allowReflexAngle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAngleProperties> angle = (id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAngleProperties));
    [((id<GeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setAllowReflexAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleEmphasizeRightAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$@", @"wrong element type for <emphasizeRightAngle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAngleProperties> angle = (id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAngleProperties));
    [((id<GeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setEmphasizeRightAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleComboBoxWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoList])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <comboBox>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoList class]);
    [list setDrawAsComboBoxWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAngleStyleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <angleStyle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAngleProperties> angle = (id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAngleProperties));
    [((id<GeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setAngleStyleWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleForceReflexAngleWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosAngleProperties_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <forceReflexAngle>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosAngleProperties> angle = (id<GeogebraCommonKernelGeosAngleProperties>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosAngleProperties));
    [((id<GeogebraCommonKernelGeosAngleProperties>) nil_chk(angle)) setForceReflexAngleWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleOutlyingIntersectionsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosLimitedPath_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <outlyingIntersections>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosLimitedPath> lpath = (id<GeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosLimitedPath));
    [((id<GeogebraCommonKernelGeosLimitedPath>) nil_chk(lpath)) setAllowOutlyingIntersectionsWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleKeepTypeOnTransformWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelGeosLimitedPath_class_() isInstance:self->geo_])) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"wrong element type for <outlyingIntersections>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]));
    return NO;
  }
  @try {
    id<GeogebraCommonKernelGeosLimitedPath> lpath = (id<GeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosLimitedPath));
    [((id<GeogebraCommonKernelGeosLimitedPath>) nil_chk(lpath)) setKeepTypeOnGeometricTransformWithBoolean:[self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]]];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleSlopeTriangleSizeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoNumeric])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <slopeTriangleSize>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoNumeric class]);
    [num setSlopeTriangleSizeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleStartPointWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([GeogebraCommonKernelLocateable_class_() isInstance:self->geo_])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <startPoint>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass])];
    return NO;
  }
  id<GeogebraCommonKernelLocateable> locGeo = (id<GeogebraCommonKernelLocateable>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelLocateable));
  NSString *exp = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"exp"];
  if (exp == nil) exp = [attrs getWithId:@"label"];
  jint number = 0;
  @try {
    number = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"number"]);
  }
  @catch (JavaLangException *e) {
  }
  if (exp != nil) {
    [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(self, locGeo, exp, number) autorelease]];
    [((id<GeogebraCommonKernelLocateable>) nil_chk(locGeo)) setWaitForStartPoint];
  }
  else {
    @try {
      id<GeogebraCommonKernelKernelNDGeoPointND> p = [self handleAbsoluteStartPointWithJavaUtilLinkedHashMap:attrs];
      if (number == 0) {
        [((id<GeogebraCommonKernelLocateable>) nil_chk(locGeo)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:p];
      }
      else {
        [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, locGeo, p, number) autorelease]];
        [((id<GeogebraCommonKernelLocateable>) nil_chk(locGeo)) setWaitForStartPoint];
      }
    }
    @catch (JavaLangException *e) {
      return NO;
    }
  }
  return YES;
}

void GeogebraCommonIoMyXMLHandler_processStartPointList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_LocateableExpPair *pair = [it next];
      id<GeogebraCommonKernelKernelNDGeoPointND> P = ((GeogebraCommonIoMyXMLHandler_LocateableExpPair *) nil_chk(pair))->point_ != nil ? pair->point_ : [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToPointWithNSString:pair->exp_ withBoolean:YES withBoolean:YES];
      [((id<GeogebraCommonKernelLocateable>) nil_chk(pair->locateable_)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:P withInt:pair->number_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processStartPointList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->startPointList_)) clear];
}

jboolean GeogebraCommonIoMyXMLHandler_handleLengthWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *val = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if ([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]]) {
    [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(((GeogebraCommonKernelGeosGeoTextField *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoTextField class])))) setLengthWithInt:JavaLangInteger_parseIntWithNSString_(val)];
  }
  else {
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"handleLength: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType])) autorelease];
  }
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleListTypeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *val = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"];
  if ([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoList class])))) setTypeStringForXMLWithNSString:val];
  }
  else {
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"handleLength: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType])) autorelease];
  }
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleLinkedGeoWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *exp = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"exp"];
  if (exp != nil) {
    [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) addWithId:[new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, self->geo_, exp) autorelease]];
  }
  else return NO;
  return YES;
}

void GeogebraCommonIoMyXMLHandler_processLinkedGeoList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(((GeogebraCommonKernelGeosGeoTextField *) check_class_cast([((GeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair)) getGeo], [GeogebraCommonKernelGeosGeoTextField class])))) setLinkedGeoWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:pair->exp_]];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processlinkedGeoList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->linkedGeoList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processShowObjectConditionList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      GeogebraCommonKernelGeosGeoBoolean *condition = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToBooleanWithNSString:((GeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:condition];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processShowObjectConditionList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->showObjectConditionList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processAnimationSpeedList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      id<GeogebraCommonKernelArithmeticNumberValue> num = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:((GeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_ withBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setAnimationSpeedObjectWithGeogebraCommonKernelArithmeticNumberValue:num];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimationSpeedList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processAnimationStepList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      id<GeogebraCommonKernelArithmeticNumberValue> num = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:((GeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair))->exp_ withBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:num];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animationStepList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimationStepList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->animationSpeedList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processAnimatingList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *geo1 = [it next];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setAnimatingWithBoolean:YES];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processAnimatingList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->animatingList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processMinMaxList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *pair = [it next];
      jboolean wasDefined = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *) nil_chk(pair)) getGeo])) isDefined];
      if (pair->min_ != nil) {
        id<GeogebraCommonKernelArithmeticNumberValue> num = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:pair->min_ withBoolean:NO];
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([pair getGeo], [GeogebraCommonKernelGeosGeoNumeric class])))) setIntervalMinWithGeogebraCommonKernelArithmeticNumberValue:num];
      }
      if (pair->max_ != nil) {
        id<GeogebraCommonKernelArithmeticNumberValue> num2 = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToNumericWithNSString:pair->max_ withBoolean:NO];
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([pair getGeo], [GeogebraCommonKernelGeosGeoNumeric class])))) setIntervalMaxWithGeogebraCommonKernelArithmeticNumberValue:num2];
      }
      if (!wasDefined) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([pair getGeo])) setUndefined];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"processMinMaxList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->minMaxList_)) clear];
}

void GeogebraCommonIoMyXMLHandler_processDynamicColorList(GeogebraCommonIoMyXMLHandler *self) {
  @try {
    id<JavaUtilIterator> it = [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) iterator];
    GeogebraCommonKernelCommandsAlgebraProcessor *algProc = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonIoMyXMLHandler_GeoExpPair *pair = [it next];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonIoMyXMLHandler_GeoExpPair *) nil_chk(pair)) getGeo])) setColorFunctionWithGeogebraCommonKernelGeosGeoList:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk(algProc)) evaluateToListWithNSString:pair->exp_]];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"dynamicColorList: ", [e description])) autorelease];
  }
  [((JavaUtilLinkedList *) nil_chk(self->dynamicColorList_)) clear];
}

jboolean GeogebraCommonIoMyXMLHandler_handleEigenvectorsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoConic])) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <eigenvectors>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    GeogebraCommonKernelGeosGeoConic *conic = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoConic class]);
    [conic setEigenvectorsWithDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x0"]) withDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y0"]) withDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z0"]) withDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"x1"]) withDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"y1"]) withDouble:GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([attrs getWithId:@"z1"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleMatrixWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoConic] && ![self->geo_ isGeoQuadric]) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$@", @"wrong element type for <matrix>: ", [self->geo_ getClass])];
    return NO;
  }
  @try {
    [self handleMatrixConicOrQuadricWithJavaUtilLinkedHashMap:attrs];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleLabelOffsetWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    ((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->labelOffsetX_ = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"x"]);
    self->geo_->labelOffsetY_ = JavaLangInteger_parseIntWithNSString_([attrs getWithId:@"y"]);
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleLabelModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLabelModeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleTooltipModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setTooltipModeWithInt:JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCoefficientsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoImplicitPoly])) {
    GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"wrong element type for <coefficients>: ", [self->geo_ getClass]));
    return NO;
  }
  @try {
    NSString *rep = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"rep"];
    if (rep == nil) return NO;
    if ([((NSString *) nil_chk([attrs getWithId:@"rep"])) isEqual:@"array"]) {
      NSString *data = [attrs getWithId:@"data"];
      if (data == nil) return NO;
      JavaUtilArrayList *collect = [new_JavaUtilArrayList_init() autorelease];
      JavaUtilArrayList *newRow = [new_JavaUtilArrayList_init() autorelease];
      jint start = 0;
      for (jint c = 1; c < ((jint) [((NSString *) nil_chk(data)) length]); c++) {
        switch ([data charAtWithInt:c]) {
          case '[':
          if ([newRow size] > 0) return NO;
          start = c + 1;
          break;
          case ']':
          [newRow addWithId:JavaLangDouble_valueOfWithDouble_(GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([data substring:start endIndex:c]))];
          start = c + 1;
          [collect addWithId:newRow];
          newRow = [new_JavaUtilArrayList_init() autorelease];
          c++;
          break;
          case ',':
          [newRow addWithId:JavaLangDouble_valueOfWithDouble_(GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([data substring:start endIndex:c]))];
          start = c + 1;
        }
      }
      IOSObjectArray *coeff = [IOSObjectArray arrayWithLength:[collect size] type:IOSClass_doubleArray(1)];
      for (jint i = 0; i < [collect size]; i++) {
        JavaUtilArrayList *row = [collect getWithInt:i];
        IOSObjectArray_SetAndConsume(coeff, i, [IOSDoubleArray newArrayWithLength:[((JavaUtilArrayList *) nil_chk(row)) size]]);
        for (jint j = 0; j < [row size]; j++) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(coeff, i)), j) = [((JavaLangDouble *) nil_chk([row getWithInt:j])) doubleValue];
        }
      }
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geo_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) setCoeffWithDoubleArray2:coeff];
      return YES;
    }
  }
  @catch (JavaLangException *e) {
    return NO;
  }
  return NO;
}

jboolean GeogebraCommonIoMyXMLHandler_handleUserInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  if (!([self->geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoUserInputElement class]])) {
    GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$@", @"wrong element type for <userinput>: ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getClass]));
    return NO;
  }
  @try {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isIndependent]) {
      NSString *value = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"value"];
      if (value == nil) return NO;
      GeogebraCommonKernelArithmeticValidExpression *ve = [((GeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseGeoGebraExpressionWithNSString:value];
      [((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoUserInputElement class])) setUserInputWithGeogebraCommonKernelArithmeticValidExpression:ve];
    }
    if ([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"] != nil && [((NSString *) nil_chk([attrs getWithId:@"show"])) isEqual:@"true"]) [((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoUserInputElement class])) setInputForm];
    else [((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoUserInputElement class])) setExtendedForm];
    if ([attrs getWithId:@"valid"] != nil) {
      [((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoUserInputElement class])) setValidInputFormWithBoolean:[((NSString *) nil_chk([attrs getWithId:@"valid"])) isEqual:@"true"]];
    }
    return YES;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
}

GeogebraCommonKernelArithmeticCommand *GeogebraCommonIoMyXMLHandler_getCommandWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonKernelArithmeticCommand *command = nil;
  NSString *name = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"name"];
  NSString *type = [attrs getWithId:@"type"];
  if (type != nil) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) setOutputGeoWithNSString:type];
  }
  NSString *var = [attrs getWithId:@"var"];
  if (var != nil) {
    GeogebraCommonMainApp_debugWithNSString_(@"reading var");
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:var];
  }
  if (name != nil) command = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(self->kernel_, name, NO) autorelease];
  else @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, @"name missing in <command>") autorelease];
  return command;
}

void GeogebraCommonIoMyXMLHandler_startCommandElementWithNSString_withJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, NSString *eName, JavaUtilLinkedHashMap *attrs) {
  jboolean ok = YES;
  if ([@"input" isEqual:eName]) {
    if (self->cmd_ == nil) @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, @"no command set for <input>") autorelease];
    ok = GeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"output" isEqual:eName]) {
    ok = GeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else if ([@"outputSizes" isEqual:eName]) {
    ok = GeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(self, attrs);
  }
  else [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"unknown tag in <command>: ", eName)];
  if (!ok) [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$", @"error in <command>: ", eName)];
}

jboolean GeogebraCommonIoMyXMLHandler_handleCmdInputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonKernelGeosGeoElement *geo1;
  GeogebraCommonKernelArithmeticExpressionNode *en;
  NSString *arg = nil;
  JavaUtilArrayList *keys = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet]) autorelease];
  for (NSString * __strong key in keys) {
    @try {
      arg = [attrs getWithId:key];
      if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) getName])) isEqual:@"Sequence"] || [((NSString *) nil_chk([self->cmd_ getName])) isEqual:@"CurveCartesian"] || [((NSString *) nil_chk([self->cmd_ getName])) isEqual:@"Surface"]) geo1 = nil;
      else geo1 = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:arg];
      if (geo1 != nil && [((NSString *) nil_chk(arg)) indexOf:'$'] < 0) {
        en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geo1) autorelease];
      }
      else {
        en = [((GeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseCmdExpressionWithNSString:arg];
      }
      [self->cmd_ addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"unknown command input: ", arg)) autorelease];
    }
    @catch (JavaLangError *e) {
      [((JavaLangError *) nil_chk(e)) printStackTrace];
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$$", @"unknown command input: ", arg)) autorelease];
    }
  }
  return YES;
}

jboolean GeogebraCommonIoMyXMLHandler_handleCmdOutputWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    NSString *label;
    jint countLabels = 0;
    JavaUtilArrayList *attrKeys = [new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) keySet]) autorelease];
    for (NSString * __strong key in attrKeys) {
      label = [attrs getWithId:key];
      if ([@"" isEqual:label]) label = nil;
      else countLabels++;
      [((GeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) addLabelWithNSString:label];
    }
    if (countLabels == 0) return YES;
    GeogebraCommonIoMyXMLHandler_set_cmdOutput_(self, [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) processCommandWithGeogebraCommonKernelArithmeticCommand:self->cmd_ withBoolean:YES]);
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:nil];
    NSString *cmdName = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) getName];
    if (self->cmdOutput_ == nil) @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@$", @"processing of command ", self->cmd_, @" failed")) autorelease];
    GeogebraCommonIoMyXMLHandler_set_cmd_(self, nil);
    if ([attrs size] != ((IOSObjectArray *) nil_chk(self->cmdOutput_))->size_) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in <output>: wrong number of labels for command ", cmdName));
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$I$I", @"   cmdOutput.length = ", self->cmdOutput_->size_, @", labels = ", [attrs size])];
      return NO;
    }
    jint i = 0;
    for (NSString * __strong key in attrKeys) {
      label = [attrs getWithId:key];
      if ([@"" isEqual:label]) label = nil;
      if (label != nil && IOSObjectArray_Get(self->cmdOutput_, i) != nil) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->cmdOutput_, i))) setLoadedLabelWithNSString:label];
      }
      i++;
    }
    return YES;
  }
  @catch (GeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"processing of command: ", self->cmd_)) autorelease];
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleCmdOutputSizesWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    IOSObjectArray *vals = [((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])) split:@","];
    IOSIntArray *sizes = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(vals))->size_];
    for (jint i = 0; i < vals->size_; i++) {
      *IOSIntArray_GetRef(sizes, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(vals, i));
    }
    [((GeogebraCommonKernelArithmeticCommand *) nil_chk(self->cmd_)) setOutputSizesWithIntArray:sizes];
    return YES;
  }
  @catch (GeogebraCommonMainMyError *e) {
    @throw e;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, JreStrcat("$@", @"processing of command: ", self->cmd_)) autorelease];
  }
}

IOSObjectArray *GeogebraCommonIoMyXMLHandler_getAttributeStringsWithJavaUtilLinkedHashMap_(JavaUtilLinkedHashMap *attrs) {
  GeogebraCommonIoMyXMLHandler_initialize();
  id<JavaUtilCollection> values = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) values];
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk(values)) iterator];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:[values size] type:NSString_class_()];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(ret, i, [it next]);
    i++;
  }
  return ret;
}

void GeogebraCommonIoMyXMLHandler_startExpressionElementWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  NSString *label = [((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"label"];
  GeogebraCommonKernelGeosGeoElement *geo1 = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:label];
  if (geo1 != nil && [geo1 getCorrespondingCasCell] != nil) return;
  NSString *exp = [attrs getWithId:@"exp"];
  if (exp == nil) @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, @"exp missing in <expression>") autorelease];
  NSString *type = [attrs getWithId:@"type"];
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [((GeogebraCommonKernelParserParser *) nil_chk(self->parser_)) parseGeoGebraExpressionWithNSString:exp];
    if (label != nil) [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) setLabelWithNSString:label];
    if (type != nil) {
      if ([type isEqual:@"point"] && [ve isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [GeogebraCommonKernelArithmeticExpressionNode class])))) setForcePoint];
      }
      else if ([type isEqual:@"vector"] && [ve isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ve, [GeogebraCommonKernelArithmeticExpressionNode class])))) setForceVector];
      }
      else if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
        if ([type isEqual:@"line"]) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) setForceLine];
        }
        else if ([type isEqual:@"plane"]) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) setForcePlane];
        }
        else if ([type isEqual:@"conic"]) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) setForceConic];
        }
        else if ([type isEqual:@"quadric"]) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) setForceQuadric];
        }
        else if ([type isEqual:@"implicitPoly"]) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(((GeogebraCommonKernelArithmeticEquation *) check_class_cast(ve, [GeogebraCommonKernelArithmeticEquation class])))) setForceImplicitPoly];
        }
      }
    }
    IOSObjectArray *result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) processValidExpressionWithGeogebraCommonKernelArithmeticValidExpression:ve];
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) registerFunctionVariableWithNSString:nil];
    if (result != nil && label != nil && result->size_ == 1) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(result, 0))) setLoadedLabelWithNSString:label];
    }
    else {
      [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:JreStrcat("$$$$", @"error in <expression>: ", exp, @", label: ", label)];
    }
  }
  @catch (JavaLangException *e) {
    NSString *msg = JreStrcat("$$$$", @"error in <expression>: label=", label, @", exp= ", exp);
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:msg];
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, msg) autorelease];
  }
  @catch (JavaLangError *e) {
    NSString *msg = JreStrcat("$$$$", @"error in <expression>: label = ", label, @", exp = ", exp);
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:msg];
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, msg) autorelease];
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewModeWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jint val = JavaLangInteger_parseIntWithNSString_([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"]);
    [((GeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setTreeModeWithInt:val];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewShowAuxiliaryObjectsWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    jboolean b = [self parseBooleanWithNSString:[((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"show"]];
    [((GeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setShowAuxiliaryObjectsWithBoolean:b];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

jboolean GeogebraCommonIoMyXMLHandler_handleAlgebraViewCollapsedNodesWithJavaUtilLinkedHashMap_(GeogebraCommonIoMyXMLHandler *self, JavaUtilLinkedHashMap *attrs) {
  @try {
    IOSObjectArray *strings = [((NSString *) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(attrs)) getWithId:@"val"])) split:@","];
    IOSIntArray *vals = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(strings))->size_];
    for (jint i = 0; i < strings->size_; i++) *IOSIntArray_GetRef(vals, i) = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(strings, i));
    [((GeogebraCommonMainSettingsAlgebraSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getSettings])) getAlgebra])) setCollapsedNodesWithIntArray:vals];
    return YES;
  }
  @catch (JavaLangException *e) {
    return NO;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoMyXMLHandler)

@implementation GeogebraCommonIoMyXMLHandler_GeoExpPair

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                                        withNSString:(NSString *)exp {
  GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, outer$, g, exp);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeo {
  return geoElement_;
}

- (void)setGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonIoMyXMLHandler_GeoExpPair_set_geoElement_(self, geo);
}

- (void)dealloc {
  RELEASE_(geoElement_);
  RELEASE_(exp_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonIoMyXMLHandler:withGeogebraCommonKernelGeosGeoElement:withNSString:", "GeoExpPair", NULL, 0x0, NULL, NULL },
    { "getGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "setGeoWithGeogebraCommonKernelGeosGeoElement:", "setGeo", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoElement_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "exp_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonIoMyXMLHandler_GeoExpPair = { 2, "GeoExpPair", "geogebra.common.io", "MyXMLHandler", 0x2, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonIoMyXMLHandler_GeoExpPair;
}

@end

void GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonIoMyXMLHandler_GeoExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *exp) {
  NSObject_init(self);
  [self setGeoWithGeogebraCommonKernelGeosGeoElement:g];
  GeogebraCommonIoMyXMLHandler_GeoExpPair_set_exp_(self, exp);
}

GeogebraCommonIoMyXMLHandler_GeoExpPair *new_GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *exp) {
  GeogebraCommonIoMyXMLHandler_GeoExpPair *self = [GeogebraCommonIoMyXMLHandler_GeoExpPair alloc];
  GeogebraCommonIoMyXMLHandler_GeoExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_(self, outer$, g, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoMyXMLHandler_GeoExpPair)

@implementation GeogebraCommonIoMyXMLHandler_GeoNumericMinMax

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                                        withNSString:(NSString *)min
                                        withNSString:(NSString *)max {
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, outer$, g, min, max);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeo {
  return geoElement_;
}

- (void)setGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_set_geoElement_(self, geo);
}

- (void)dealloc {
  RELEASE_(geoElement_);
  RELEASE_(min_);
  RELEASE_(max_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonIoMyXMLHandler:withGeogebraCommonKernelGeosGeoElement:withNSString:withNSString:", "GeoNumericMinMax", NULL, 0x0, NULL, NULL },
    { "getGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "setGeoWithGeogebraCommonKernelGeosGeoElement:", "setGeo", "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoElement_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "min_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "max_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonIoMyXMLHandler_GeoNumericMinMax = { 2, "GeoNumericMinMax", "geogebra.common.io", "MyXMLHandler", 0x2, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonIoMyXMLHandler_GeoNumericMinMax;
}

@end

void GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self, GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) {
  NSObject_init(self);
  [self setGeoWithGeogebraCommonKernelGeosGeoElement:g];
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_set_min_(self, min);
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_set_max_(self, max);
}

GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *new_GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonIoMyXMLHandler *outer$, GeogebraCommonKernelGeosGeoElement *g, NSString *min, NSString *max) {
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax *self = [GeogebraCommonIoMyXMLHandler_GeoNumericMinMax alloc];
  GeogebraCommonIoMyXMLHandler_GeoNumericMinMax_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(self, outer$, g, min, max);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoMyXMLHandler_GeoNumericMinMax)

@implementation GeogebraCommonIoMyXMLHandler_LocateableExpPair

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
                  withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)g
                                        withNSString:(NSString *)s
                                             withInt:(jint)n {
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(self, outer$, g, s, n);
  return self;
}

- (instancetype)initWithGeogebraCommonIoMyXMLHandler:(GeogebraCommonIoMyXMLHandler *)outer$
                  withGeogebraCommonKernelLocateable:(id<GeogebraCommonKernelLocateable>)g
          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                             withInt:(jint)n {
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, outer$, g, p, n);
  return self;
}

- (void)dealloc {
  RELEASE_(locateable_);
  RELEASE_(exp_);
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonIoMyXMLHandler:withGeogebraCommonKernelLocateable:withNSString:withInt:", "LocateableExpPair", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonIoMyXMLHandler:withGeogebraCommonKernelLocateable:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "LocateableExpPair", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locateable_", NULL, 0x0, "Lgeogebra.common.kernel.Locateable;", NULL, NULL,  },
    { "exp_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "point_", NULL, 0x0, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "number_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonIoMyXMLHandler_LocateableExpPair = { 2, "LocateableExpPair", "geogebra.common.io", "MyXMLHandler", 0x2, 2, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonIoMyXMLHandler_LocateableExpPair;
}

@end

void GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(GeogebraCommonIoMyXMLHandler_LocateableExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, NSString *s, jint n) {
  NSObject_init(self);
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_set_locateable_(self, g);
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_set_exp_(self, s);
  self->number_ = n;
}

GeogebraCommonIoMyXMLHandler_LocateableExpPair *new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, NSString *s, jint n) {
  GeogebraCommonIoMyXMLHandler_LocateableExpPair *self = [GeogebraCommonIoMyXMLHandler_LocateableExpPair alloc];
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withNSString_withInt_(self, outer$, g, s, n);
  return self;
}

void GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonIoMyXMLHandler_LocateableExpPair *self, GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, id<GeogebraCommonKernelKernelNDGeoPointND> p, jint n) {
  NSObject_init(self);
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_set_locateable_(self, g);
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_set_point_(self, p);
  self->number_ = n;
}

GeogebraCommonIoMyXMLHandler_LocateableExpPair *new_GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonIoMyXMLHandler *outer$, id<GeogebraCommonKernelLocateable> g, id<GeogebraCommonKernelKernelNDGeoPointND> p, jint n) {
  GeogebraCommonIoMyXMLHandler_LocateableExpPair *self = [GeogebraCommonIoMyXMLHandler_LocateableExpPair alloc];
  GeogebraCommonIoMyXMLHandler_LocateableExpPair_initWithGeogebraCommonIoMyXMLHandler_withGeogebraCommonKernelLocateable_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, outer$, g, p, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoMyXMLHandler_LocateableExpPair)
