//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAngleVectors.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoAngleVectors.h"
#include "geogebra/common/kernel/algos/AlgoAngleVectorsND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "java/lang/Math.h"

@implementation GeogebraCommonKernelAlgosAlgoAngleVectors

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
             withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
             withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)w {
  GeogebraCommonKernelAlgosAlgoAngleVectors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, v, w);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (void)compute {
  jdouble det = ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVector class]))))->x_ * ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoVector class]))))->y_ - ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVector class]))))->y_ * ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoVector class]))))->x_;
  jdouble prod = ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVector class]))))->x_ * ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoVector class]))))->x_ + ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVector class]))))->y_ * ((GeogebraCommonKernelGeosGeoVector *) nil_chk(((GeogebraCommonKernelGeosGeoVector *) check_class_cast(w_, [GeogebraCommonKernelGeosGeoVector class]))))->y_;
  jdouble value = JavaLangMath_atan2WithDouble_withDouble_(det, prod);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(angle_)) setValueWithDouble:value];
}

- (jint)getInputLengthForXML {
  return [self getInputLengthForXMLMayNeedXOYPlane];
}

- (jint)getInputLengthForCommandDescription {
  return [self getInputLengthForCommandDescriptionMayNeedXOYPlane];
}

- (GeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return [self getInputMaybeXOYPlaneWithInt:i];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:", "AlgoAngleVectors", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAngleVectors = { 2, "AlgoAngleVectors", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAngleVectors;
}

@end

void GeogebraCommonKernelAlgosAlgoAngleVectors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonKernelAlgosAlgoAngleVectors *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoVectorND> v, id<GeogebraCommonKernelKernelNDGeoVectorND> w) {
  GeogebraCommonKernelAlgosAlgoAngleVectorsND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, v, w, nil);
}

GeogebraCommonKernelAlgosAlgoAngleVectors *new_GeogebraCommonKernelAlgosAlgoAngleVectors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoVectorND> v, id<GeogebraCommonKernelKernelNDGeoVectorND> w) {
  GeogebraCommonKernelAlgosAlgoAngleVectors *self = [GeogebraCommonKernelAlgosAlgoAngleVectors alloc];
  GeogebraCommonKernelAlgosAlgoAngleVectors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoVectorND_withGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, label, v, w);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAngleVectors)
