//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianPen.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianPen.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/event/AbstractEvent.h"
#include "geogebra/common/euclidian/modes/ModeDelete.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAttachCopyToView.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFocus.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoFitImplicit.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/linear/SingularValueDecomposition.h"
#include "org/apache/commons/math/linear/SingularValueDecompositionImpl.h"

@class GeogebraCommonEuclidianEuclidianPen_Inertia;
@class GeogebraCommonEuclidianEuclidianPen_RecoSegment;

#define GeogebraCommonEuclidianEuclidianPen_PEN_SIZE_FACTOR 2
#define GeogebraCommonEuclidianEuclidianPen_CONIC_AXIS_ERROR_RATIO 10.0

@interface GeogebraCommonEuclidianEuclidianPen () {
 @public
  GeogebraCommonKernelAlgosAlgoElement *lastAlgo_;
  JavaUtilArrayList *temp_;
  jint minX_, maxX_;
  jdouble score_;
  jdouble ARROW_MAXSIZE_;
  jdouble ARROW_ANGLE_MIN_;
  jdouble ARROW_ANGLE_MAX_;
  jdouble ARROW_ASYMMETRY_MAX_ANGLE_;
  jdouble ARROW_ASYMMETRY_MAX_LINEAR_;
  jdouble ARROW_TIP_LINEAR_TOLERANCE_;
  jdouble ARROW_SIDEWAYS_GAP_TOLERANCE_;
  jdouble ARROW_MAIN_LINEAR_GAP_MIN_;
  jdouble ARROW_MAIN_LINEAR_GAP_MAX_;
  IOSIntArray *brk_;
  jint count_;
  jint recognizer_queue_length_;
  jint MAX_POLYGON_SIDES_;
  jdouble LINE_MAX_DET_;
  jdouble SLANT_TOLERANCE_;
  GeogebraCommonEuclidianEuclidianPen_Inertia *a_;
  GeogebraCommonEuclidianEuclidianPen_Inertia *b_;
  GeogebraCommonEuclidianEuclidianPen_Inertia *c_;
  GeogebraCommonEuclidianEuclidianPen_Inertia *d_;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *reco_queue_a_;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *reco_queue_b_;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *reco_queue_c_;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *reco_queue_d_;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *reco_queue_e_;
  jint gridSize_;
  GeogebraCommonAwtGPoint *startPoint_;
  JavaLangStringBuffer *gesture_;
  jint deltaX_;
  jint deltaY_;
  jint absDeltaX_;
  jint absDeltaY_;
  jfloat absTangent_;
  jboolean startNewStroke_;
  jint penSize_;
  jint eraserSize_;
  jint penLineStyle_;
  GeogebraCommonAwtGColor *penColor_;
  jboolean freehand_;
  jboolean absoluteScreenPosition_;
}

- (void)drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2D
                               withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point1
                               withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point2;

- (void)addPointsToPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)penPoints2;

+ (GeogebraCommonKernelAlgosAlgoPolyLine *)getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)al;

- (void)mouseReleasedFreehandWithInt:(jint)x
                             withInt:(jint)y;

- (jint)findPolygonalWithInt:(jint)start
                     withInt:(jint)end
                     withInt:(jint)n
                     withInt:(jint)offset1
                     withInt:(jint)offset2;

- (void)calc_inertiaWithInt:(jint)start
                    withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

- (jdouble)score_circleWithInt:(jint)start
                       withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

+ (jdouble)I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s;

- (GeogebraCommonKernelGeosGeoConic *)makeACircleWithDouble:(jdouble)x
                                                 withDouble:(jdouble)y
                                                 withDouble:(jdouble)r;

- (GeogebraCommonKernelGeosGeoConic *)makeAConic;

+ (jint)getDeltaXWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startPoint2
                 withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point;

+ (jint)getDeltaYWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startPoint2
                 withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point;

- (void)saveMoveWithNSString:(NSString *)move;

- (NSString *)getGesture;

- (void)clearTemporaryInfo;

- (void)optimize_polygonalWithInt:(jint)nsides;

- (void)incr_inertiaWithInt:(jint)start
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s
                    withInt:(jint)coeff;

- (void)get_segment_geometryWithInt:(jint)begin
                            withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s
withGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r;

- (GeogebraCommonKernelGeosGeoElement *)try_rectangle;

- (GeogebraCommonKernelGeosGeoElement *)try_arrow;

- (GeogebraCommonKernelGeosGeoElement *)try_closed_polygonWithInt:(jint)nsides;

+ (void)calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r1
                       withGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r2
                                                           withDoubleArray:(IOSDoubleArray *)pt;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, lastAlgo_, GeogebraCommonKernelAlgosAlgoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, temp_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, brk_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, a_, GeogebraCommonEuclidianEuclidianPen_Inertia *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, b_, GeogebraCommonEuclidianEuclidianPen_Inertia *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, c_, GeogebraCommonEuclidianEuclidianPen_Inertia *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, d_, GeogebraCommonEuclidianEuclidianPen_Inertia *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, reco_queue_a_, GeogebraCommonEuclidianEuclidianPen_RecoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, reco_queue_b_, GeogebraCommonEuclidianEuclidianPen_RecoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, reco_queue_c_, GeogebraCommonEuclidianEuclidianPen_RecoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, reco_queue_d_, GeogebraCommonEuclidianEuclidianPen_RecoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, reco_queue_e_, GeogebraCommonEuclidianEuclidianPen_RecoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, startPoint_, GeogebraCommonAwtGPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, gesture_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen, penColor_, GeogebraCommonAwtGColor *)

static NSString *GeogebraCommonEuclidianEuclidianPen_LEFT_UP_ = @"Q";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, LEFT_UP_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_RIGHT_UP_ = @"W";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, RIGHT_UP_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_RIGHT_DOWN_ = @"E";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, RIGHT_DOWN_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_LEFT_DOWN_ = @"T";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, LEFT_DOWN_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_LEFT_MOVE_ = @"L";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, LEFT_MOVE_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_RIGHT_MOVE_ = @"R";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, RIGHT_MOVE_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_UP_MOVE_ = @"U";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, UP_MOVE_, NSString *)

static NSString *GeogebraCommonEuclidianEuclidianPen_DOWN_MOVE_ = @"D";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, DOWN_MOVE_, NSString *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, PEN_SIZE_FACTOR, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianPen, CONIC_AXIS_ERROR_RATIO, jdouble)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonEuclidianEuclidianPen *self, id<GeogebraCommonAwtGGraphics2D> g2D, GeogebraCommonAwtGPoint *point1, GeogebraCommonAwtGPoint *point2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_addPointsToPolyLineWithJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianPen *self, JavaUtilArrayList *penPoints2);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoPolyLine *GeogebraCommonEuclidianEuclidianPen_getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonKernelAlgosAlgoElement *al);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_mouseReleasedFreehandWithInt_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint x, jint y);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, jint n, jint offset1, jint offset2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_calc_inertiaWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_score_circleWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianPen_I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoConic *GeogebraCommonEuclidianEuclidianPen_makeACircleWithDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianPen *self, jdouble x, jdouble y, jdouble r);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoConic *GeogebraCommonEuclidianEuclidianPen_makeAConic(GeogebraCommonEuclidianEuclidianPen *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianPen_getDeltaXWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonAwtGPoint *startPoint2, GeogebraCommonAwtGPoint *point);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianPen_getDeltaYWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonAwtGPoint *startPoint2, GeogebraCommonAwtGPoint *point);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(GeogebraCommonEuclidianEuclidianPen *self, NSString *move);

__attribute__((unused)) static NSString *GeogebraCommonEuclidianEuclidianPen_getGesture(GeogebraCommonEuclidianEuclidianPen *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_clearTemporaryInfo(GeogebraCommonEuclidianEuclidianPen *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_optimize_polygonalWithInt_(GeogebraCommonEuclidianEuclidianPen *self, jint nsides);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint start, GeogebraCommonEuclidianEuclidianPen_Inertia *s, jint coeff);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_get_segment_geometryWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_(GeogebraCommonEuclidianEuclidianPen *self, jint begin, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s, GeogebraCommonEuclidianEuclidianPen_RecoSegment *r);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_rectangle(GeogebraCommonEuclidianEuclidianPen *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_arrow(GeogebraCommonEuclidianEuclidianPen *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_closed_polygonWithInt_(GeogebraCommonEuclidianEuclidianPen *self, jint nsides);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(GeogebraCommonEuclidianEuclidianPen_RecoSegment *r1, GeogebraCommonEuclidianEuclidianPen_RecoSegment *r2, IOSDoubleArray *pt);

@interface GeogebraCommonEuclidianEuclidianPen_RecoSegment : NSObject {
 @public
  jint startpt_, endpt_;
  jdouble xcenter_, ycenter_, angle_, radius_;
  jdouble x1_, y1_, x2_, y2_;
  jboolean reversed_;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianPen_RecoSegment)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen_RecoSegment *self, GeogebraCommonEuclidianEuclidianPen *outer$);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianPen_RecoSegment *new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianPen_RecoSegment)

@interface GeogebraCommonEuclidianEuclidianPen_Inertia : NSObject {
 @public
  jdouble mass_;
  jdouble sx_;
  jdouble sxx_;
  jdouble sy_;
  jdouble sxy_;
  jdouble syy_;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianPen_Inertia)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen_Inertia *self, GeogebraCommonEuclidianEuclidianPen *outer$);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianPen_Inertia *new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianPen_Inertia)

@interface GeogebraCommonEuclidianEuclidianPen_$1 : GeogebraCommonKernelGeosGeoPolyLine {
 @public
  GeogebraCommonEuclidianEuclidianPen *this$0_;
}

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color;

- (void)setLineThicknessWithInt:(jint)th;

- (void)setLineTypeWithInt:(jint)i;

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$
                       withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonEuclidianEuclidianPen_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianPen_$1, this$0_, GeogebraCommonEuclidianEuclidianPen *)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(GeogebraCommonEuclidianEuclidianPen_$1 *self, GeogebraCommonEuclidianEuclidianPen *outer$, GeogebraCommonKernelConstruction *arg$0);

__attribute__((unused)) static GeogebraCommonEuclidianEuclidianPen_$1 *new_GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(GeogebraCommonEuclidianEuclidianPen *outer$, GeogebraCommonKernelConstruction *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonEuclidianEuclidianPen_$1)

@implementation GeogebraCommonEuclidianEuclidianPen

- (jint)getPenSize {
  return penSize_;
}

- (void)setPenSizeWithInt:(jint)penSize {
  if (self->penSize_ != penSize) {
    startNewStroke_ = YES;
  }
  self->penSize_ = penSize;
}

- (jint)getPenLineStyle {
  return penLineStyle_;
}

- (void)setPenLineStyleWithInt:(jint)penLineStyle {
  if (self->penLineStyle_ != penLineStyle) {
    startNewStroke_ = YES;
  }
  self->penLineStyle_ = penLineStyle;
}

- (GeogebraCommonAwtGColor *)getPenColor {
  return penColor_;
}

- (void)setInitialPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)point
                                                withBoolean:(jboolean)deletePoint {
  GeogebraCommonEuclidianEuclidianPen_set_initialPoint_(self, point);
  self->deleteInitialPoint_ = deletePoint;
}

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
     withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonEuclidianEuclidianPen_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_(self, app, view);
  return self;
}

- (void)setDefaults {
  penSize_ = 3;
  eraserSize_ = GeogebraCommonEuclidianEuclidianConstants_DEFAULT_ERASER_SIZE;
  penLineStyle_ = GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL;
  GeogebraCommonEuclidianEuclidianPen_set_penColor_(self, GeogebraCommonAwtGColor_get_BLACK_());
  [self setAbsoluteScreenPositionWithBoolean:YES];
}

- (jboolean)isErasingEventWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) isRightClickWithGeogebraCommonEuclidianEventAbstractEvent:e] && !freehand_;
}

- (void)setPenGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)penGeo {
  if (penGeo == nil) {
    GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, nil);
  }
  else if ([[penGeo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolyLine class]]) {
    GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, [penGeo getParentAlgorithm]);
  }
}

- (void)resetPenOffsets {
  GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, nil);
}

- (void)handleMouseDraggedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setTransparentCursor];
  if ([self isErasingEventWithGeogebraCommonEuclidianEventAbstractEvent:e]) {
    [((GeogebraCommonEuclidianModesModeDelete *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([view_ getEuclidianController])) getDeleteMode])) handleMouseDraggedForDeleteWithGeogebraCommonEuclidianEventAbstractEvent:e withInt:eraserSize_ withBoolean:YES];
  }
  else {
    [self addPointPenModeWithGeogebraCommonEuclidianEventAbstractEvent:e withGeogebraCommonEuclidianHits:nil];
  }
}

- (void)handleMousePressedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e
                                                  withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if (![self isErasingEventWithGeogebraCommonEuclidianEventAbstractEvent:e]) {
    [((JavaUtilArrayList *) nil_chk(penPoints_)) clear];
    [self addPointPenModeWithGeogebraCommonEuclidianEventAbstractEvent:e withGeogebraCommonEuclidianHits:hits];
  }
}

- (void)addPointPenModeWithGeogebraCommonEuclidianEventAbstractEvent:(GeogebraCommonEuclidianEventAbstractEvent *)e
                                     withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)h {
  JavaUtilArrayList *selGeos = [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos];
  if ([((JavaUtilArrayList *) nil_chk(selGeos)) size] == 1 && [[selGeos getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoPolyLine class]]) {
    GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([selGeos getWithInt:0])) getParentAlgorithm]);
  }
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setTransparentCursor];
  GeogebraCommonAwtGPoint *newPoint = [new_GeogebraCommonAwtGPoint_initWithInt_withInt_([((GeogebraCommonEuclidianEventAbstractEvent *) nil_chk(e)) getX], [e getY]) autorelease];
  id<GeogebraCommonAwtGGraphics2D> g2D = [view_ getGraphicsForPen];
  if (minX_ > [e getX]) minX_ = [e getX];
  if (maxX_ < [e getX]) maxX_ = [e getX];
  if ([((JavaUtilArrayList *) nil_chk(penPoints_)) size] == 0) [penPoints_ addWithId:newPoint];
  else {
    GeogebraCommonAwtGPoint *lastPoint = [penPoints_ getWithInt:[penPoints_ size] - 1];
    GeogebraCommonEuclidianEuclidianPen_drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(self, g2D, newPoint, lastPoint);
    if ([((GeogebraCommonAwtGPoint *) nil_chk(lastPoint)) distanceWithGeogebraCommonAwtGPoint:newPoint] > 3) [penPoints_ addWithId:newPoint];
  }
  GeogebraCommonAwtGPoint *point = [e getPoint];
  if (startPoint_ == nil) GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, [e getPoint]);
  deltaX_ = GeogebraCommonEuclidianEuclidianPen_getDeltaXWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(startPoint_, point);
  deltaY_ = GeogebraCommonEuclidianEuclidianPen_getDeltaYWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(startPoint_, point);
  absDeltaX_ = JavaLangMath_absWithInt_(deltaX_);
  absDeltaY_ = JavaLangMath_absWithInt_(deltaY_);
  absTangent_ = ((jfloat) absDeltaX_) / absDeltaY_;
  if (!((absDeltaX_ < gridSize_) && (absDeltaY_ < gridSize_))) {
    if (absTangent_ < 0.5) {
      if (deltaY_ < 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_UP_MOVE_);
      else GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_DOWN_MOVE_);
      GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, point);
    }
    if (absTangent_ >= 0.5 && absTangent_ <= 2) {
      if (deltaX_ > 0 && deltaY_ < 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_LEFT_UP_);
      if (deltaX_ < 0 && deltaY_ < 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_RIGHT_UP_);
      if (deltaX_ < 0 && deltaY_ > 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_RIGHT_DOWN_);
      if (deltaX_ > 0 && deltaY_ > 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_LEFT_DOWN_);
      GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, point);
    }
    if (absTangent_ > 2) {
      if (deltaX_ < 0) GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_LEFT_MOVE_);
      else GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, GeogebraCommonEuclidianEuclidianPen_RIGHT_MOVE_);
      GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, point);
    }
  }
}

- (void)drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2D
                               withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point1
                               withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point2 {
  GeogebraCommonEuclidianEuclidianPen_drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(self, g2D, point1, point2);
}

- (void)handleMouseReleasedForPenModeWithBoolean:(jboolean)right
                                         withInt:(jint)x
                                         withInt:(jint)y {
  if (right && !freehand_) {
    return;
  }
  if (freehand_) {
    GeogebraCommonEuclidianEuclidianPen_mouseReleasedFreehandWithInt_withInt_(self, x, y);
    [((JavaUtilArrayList *) nil_chk(penPoints_)) clear];
    [((GeogebraCommonMainApp *) nil_chk(app_)) refreshViews];
    minX_ = JavaLangInteger_MAX_VALUE;
    maxX_ = JavaLangInteger_MIN_VALUE;
    return;
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) setDefaultCursor];
  GeogebraCommonEuclidianEuclidianPen_addPointsToPolyLineWithJavaUtilArrayList_(self, penPoints_);
  [((JavaUtilArrayList *) nil_chk(penPoints_)) clear];
}

- (GeogebraCommonKernelGeosGeoElement *)checkShapesWithInt:(jint)x
                                                   withInt:(jint)y {
  count_ = 0;
  GeogebraCommonMainApp_debugWithNSString_(GeogebraCommonEuclidianEuclidianPen_getGesture(self));
  GeogebraCommonEuclidianEuclidianPen_clearTemporaryInfo(self);
  GeogebraCommonAwtGPoint *newPoint = [new_GeogebraCommonAwtGPoint_initWithInt_withInt_(x, y) autorelease];
  [((JavaUtilArrayList *) nil_chk(penPoints_)) addWithId:newPoint];
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_brk_(self, [IOSIntArray newArrayWithLength:5]);
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_a_(self, new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_b_(self, new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_c_(self, new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_d_(self, new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  jint j = 0;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *rs = nil;
  GeogebraCommonEuclidianEuclidianPen_Inertia *ss = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *temp1 = nil;
  GeogebraCommonEuclidianEuclidianPen_Inertia *s = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  GeogebraCommonEuclidianEuclidianPen_calc_inertiaWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(self, 0, [penPoints_ size] - 1, s);
  jint n = GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(self, 0, [penPoints_ size] - 1, MAX_POLYGON_SIDES_, 0, 0);
  if (n > 0) {
    GeogebraCommonEuclidianEuclidianPen_optimize_polygonalWithInt_(self, n);
    while (n + recognizer_queue_length_ > MAX_POLYGON_SIDES_) {
      j = 1;
      temp1 = reco_queue_b_;
      while (j < recognizer_queue_length_ && ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->startpt_ != 0) {
        j++;
        if (j == 2) temp1 = reco_queue_c_;
        if (j == 3) temp1 = reco_queue_d_;
        if (j == 4) temp1 = reco_queue_e_;
      }
      recognizer_queue_length_ = recognizer_queue_length_ - j;
      jint te1 = 0;
      jint te2 = j;
      GeogebraCommonEuclidianEuclidianPen_RecoSegment *t1 = nil;
      GeogebraCommonEuclidianEuclidianPen_RecoSegment *t2 = nil;
      for (jint k = 0; k < recognizer_queue_length_; ++k) {
        if (te1 == 0) t1 = reco_queue_a_;
        if (te1 == 1) t1 = reco_queue_b_;
        if (te1 == 2) t1 = reco_queue_c_;
        if (te1 == 3) t1 = reco_queue_d_;
        if (te1 == 4) t1 = reco_queue_e_;
        if (te2 == 0) t2 = reco_queue_a_;
        if (te2 == 1) t2 = reco_queue_b_;
        if (te2 == 2) t2 = reco_queue_c_;
        if (te2 == 3) t2 = reco_queue_d_;
        if (te2 == 4) t2 = reco_queue_e_;
        ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(t1))->startpt_ = ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(t2))->startpt_;
        t1->endpt_ = t2->endpt_;
        t1->xcenter_ = t2->xcenter_;
        t1->ycenter_ = t2->ycenter_;
        t1->angle_ = t2->angle_;
        t1->radius_ = t2->radius_;
        t1->x1_ = t2->x1_;
        t1->x2_ = t2->x2_;
        t1->y1_ = t2->y2_;
        t1->y2_ = t2->y2_;
        t1->reversed_ = t2->reversed_;
        te1++;
        te2++;
      }
    }
    jint temp_reco = recognizer_queue_length_;
    recognizer_queue_length_ = recognizer_queue_length_ + n;
    for (j = 0; j < n; ++j) {
      if (temp_reco + j == 0) rs = reco_queue_a_;
      if (temp_reco + j == 1) rs = reco_queue_b_;
      if (temp_reco + j == 2) rs = reco_queue_c_;
      if (temp_reco + j == 3) rs = reco_queue_d_;
      if (temp_reco + j == 4) rs = reco_queue_e_;
      if (j == 0) ss = a_;
      if (j == 1) ss = b_;
      if (j == 2) ss = c_;
      if (j == 3) ss = d_;
      ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(rs))->startpt_ = IOSIntArray_Get(brk_, j);
      rs->endpt_ = IOSIntArray_Get(brk_, j + 1);
      GeogebraCommonEuclidianEuclidianPen_get_segment_geometryWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_(self, IOSIntArray_Get(brk_, j), IOSIntArray_Get(brk_, j + 1), ss, rs);
    }
    GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonEuclidianEuclidianPen_try_rectangle(self);
    if (geo != nil) {
      recognizer_queue_length_ = 0;
      GeogebraCommonMainApp_debugWithNSString_(@"Rectangle Recognized");
      return geo;
    }
    geo = GeogebraCommonEuclidianEuclidianPen_try_arrow(self);
    if (geo != nil) {
      recognizer_queue_length_ = 0;
      GeogebraCommonMainApp_debugWithNSString_(@"Arrow Recognized");
      return geo;
    }
    geo = GeogebraCommonEuclidianEuclidianPen_try_closed_polygonWithInt_(self, 3);
    if (geo != nil) {
      recognizer_queue_length_ = 0;
      GeogebraCommonMainApp_debugWithNSString_(@"Triangle Recognized");
      return geo;
    }
    geo = GeogebraCommonEuclidianEuclidianPen_try_closed_polygonWithInt_(self, 4);
    if (geo != nil) {
      recognizer_queue_length_ = 0;
      GeogebraCommonMainApp_debugWithNSString_(@"Quadrilateral Recognized");
      return geo;
    }
    if (n == 1) {
      GeogebraCommonMainApp_debugWithNSString_(@"Current stroke is a line");
      if (JavaLangMath_absWithDouble_(((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(rs))->angle_) < SLANT_TOLERANCE_) {
        rs->angle_ = 0;
        rs->y1_ = rs->y2_ = rs->ycenter_;
      }
      if (JavaLangMath_absWithDouble_(rs->angle_) > JavaLangMath_PI / 2 - SLANT_TOLERANCE_) {
        rs->angle_ = (rs->angle_ > 0) ? (JavaLangMath_PI / 2) : (-JavaLangMath_PI / 2);
        rs->x1_ = rs->x2_ = rs->xcenter_;
      }
      jdouble x_first = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:rs->x1_];
      jdouble y_first = [view_ toRealWorldCoordYWithDouble:rs->y1_];
      jdouble x_last = [view_ toRealWorldCoordXWithDouble:rs->x2_];
      jdouble y_last = [view_ toRealWorldCoordYWithDouble:rs->y2_];
      GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = nil;
      GeogebraCommonKernelGeosGeoPoint *p;
      if (self->initialPoint_ != nil) {
        p = initialPoint_;
      }
      else {
        p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction], nil, x_first, y_first, 1.0) autorelease];
      }
      GeogebraCommonKernelGeosGeoPoint *q = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction], nil, x_last, y_last, 1.0) autorelease];
      algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_([((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getConstruction], nil, p, q) autorelease];
      GeogebraCommonKernelGeosGeoElement *line = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(line)) updateRepaint];
      return line;
    }
  }
  if (GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s) > CIRCLE_MIN_DET_) {
    score_ = GeogebraCommonEuclidianEuclidianPen_score_circleWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(self, 0, [penPoints_ size] - 1, s);
    if (score_ < CIRCLE_MAX_SCORE_) {
      return GeogebraCommonEuclidianEuclidianPen_makeACircleWithDouble_withDouble_withDouble_(self, GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s), GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s), GeogebraCommonEuclidianEuclidianPen_I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s));
    }
  }
  if (self->deleteInitialPoint_ && self->initialPoint_ != nil) {
    [self->initialPoint_ remove];
  }
  GeogebraCommonEuclidianEuclidianPen_set_initialPoint_(self, nil);
  return GeogebraCommonEuclidianEuclidianPen_makeAConic(self);
}

- (void)addPointsToPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)penPoints2 {
  GeogebraCommonEuclidianEuclidianPen_addPointsToPolyLineWithJavaUtilArrayList_(self, penPoints2);
}

+ (GeogebraCommonKernelAlgosAlgoPolyLine *)getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)al {
  return GeogebraCommonEuclidianEuclidianPen_getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement_(al);
}

- (void)mouseReleasedFreehandWithInt:(jint)x
                             withInt:(jint)y {
  GeogebraCommonEuclidianEuclidianPen_mouseReleasedFreehandWithInt_withInt_(self, x, y);
}

- (void)setFreehandWithBoolean:(jboolean)b {
  freehand_ = b;
}

- (jint)findPolygonalWithInt:(jint)start
                     withInt:(jint)end
                     withInt:(jint)n
                     withInt:(jint)offset1
                     withInt:(jint)offset2 {
  return GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(self, start, end, n, offset1, offset2);
}

- (void)calc_inertiaWithInt:(jint)start
                    withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  GeogebraCommonEuclidianEuclidianPen_calc_inertiaWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(self, start, end, s);
}

+ (jdouble)I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

+ (jdouble)I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

+ (jdouble)I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

+ (jdouble)I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

- (jdouble)score_circleWithInt:(jint)start
                       withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_score_circleWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(self, start, end, s);
}

+ (jdouble)center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

+ (jdouble)center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

+ (jdouble)I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s {
  return GeogebraCommonEuclidianEuclidianPen_I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
}

- (GeogebraCommonKernelGeosGeoConic *)makeACircleWithDouble:(jdouble)x
                                                 withDouble:(jdouble)y
                                                 withDouble:(jdouble)r {
  return GeogebraCommonEuclidianEuclidianPen_makeACircleWithDouble_withDouble_withDouble_(self, x, y, r);
}

- (GeogebraCommonKernelGeosGeoConic *)makeAConic {
  return GeogebraCommonEuclidianEuclidianPen_makeAConic(self);
}

+ (jint)getDeltaXWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startPoint2
                 withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point {
  return GeogebraCommonEuclidianEuclidianPen_getDeltaXWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(startPoint2, point);
}

+ (jint)getDeltaYWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)startPoint2
                 withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point {
  return GeogebraCommonEuclidianEuclidianPen_getDeltaYWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(startPoint2, point);
}

- (void)saveMoveWithNSString:(NSString *)move {
  GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(self, move);
}

- (NSString *)getGesture {
  return GeogebraCommonEuclidianEuclidianPen_getGesture(self);
}

- (void)clearTemporaryInfo {
  GeogebraCommonEuclidianEuclidianPen_clearTemporaryInfo(self);
}

- (void)optimize_polygonalWithInt:(jint)nsides {
  GeogebraCommonEuclidianEuclidianPen_optimize_polygonalWithInt_(self, nsides);
}

- (void)incr_inertiaWithInt:(jint)start
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s
                    withInt:(jint)coeff {
  GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, start, s, coeff);
}

- (void)get_segment_geometryWithInt:(jint)begin
                            withInt:(jint)end
withGeogebraCommonEuclidianEuclidianPen_Inertia:(GeogebraCommonEuclidianEuclidianPen_Inertia *)s
withGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r {
  GeogebraCommonEuclidianEuclidianPen_get_segment_geometryWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_(self, begin, end, s, r);
}

- (GeogebraCommonKernelGeosGeoElement *)try_rectangle {
  return GeogebraCommonEuclidianEuclidianPen_try_rectangle(self);
}

- (GeogebraCommonKernelGeosGeoElement *)try_arrow {
  return GeogebraCommonEuclidianEuclidianPen_try_arrow(self);
}

- (GeogebraCommonKernelGeosGeoElement *)try_closed_polygonWithInt:(jint)nsides {
  return GeogebraCommonEuclidianEuclidianPen_try_closed_polygonWithInt_(self, nsides);
}

+ (void)calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r1
                       withGeogebraCommonEuclidianEuclidianPen_RecoSegment:(GeogebraCommonEuclidianEuclidianPen_RecoSegment *)r2
                                                           withDoubleArray:(IOSDoubleArray *)pt {
  GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(r1, r2, pt);
}

- (void)setPenColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  if (![((GeogebraCommonAwtGColor *) nil_chk(self->penColor_)) isEqual:color]) {
    startNewStroke_ = YES;
  }
  GeogebraCommonEuclidianEuclidianPen_set_penColor_(self, color);
}

- (void)setAbsoluteScreenPositionWithBoolean:(jboolean)b {
  absoluteScreenPosition_ = b;
}

- (GeogebraCommonKernelGeosGeoElement *)getCreatedShape {
  return nil;
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(view_);
  RELEASE_(DEFAULT_PEN_LINE_);
  RELEASE_(lastAlgo_);
  RELEASE_(penPoints_);
  RELEASE_(temp_);
  RELEASE_(brk_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(c_);
  RELEASE_(d_);
  RELEASE_(reco_queue_a_);
  RELEASE_(reco_queue_b_);
  RELEASE_(reco_queue_c_);
  RELEASE_(reco_queue_d_);
  RELEASE_(reco_queue_e_);
  RELEASE_(startPoint_);
  RELEASE_(gesture_);
  RELEASE_(initialPoint_);
  RELEASE_(penColor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getPenSize", NULL, "I", 0x1, NULL, NULL },
    { "setPenSizeWithInt:", "setPenSize", "V", 0x1, NULL, NULL },
    { "getPenLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setPenLineStyleWithInt:", "setPenLineStyle", "V", 0x1, NULL, NULL },
    { "getPenColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setInitialPointWithGeogebraCommonKernelGeosGeoPoint:withBoolean:", "setInitialPoint", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonMainApp:withGeogebraCommonEuclidianEuclidianView:", "EuclidianPen", NULL, 0x1, NULL, NULL },
    { "setDefaults", NULL, "V", 0x1, NULL, NULL },
    { "isErasingEventWithGeogebraCommonEuclidianEventAbstractEvent:", "isErasingEvent", "Z", 0x1, NULL, NULL },
    { "setPenGeoWithGeogebraCommonKernelGeosGeoElement:", "setPenGeo", "V", 0x1, NULL, NULL },
    { "resetPenOffsets", NULL, "V", 0x1, NULL, NULL },
    { "handleMouseDraggedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:", "handleMouseDraggedForPenMode", "V", 0x1, NULL, NULL },
    { "handleMousePressedForPenModeWithGeogebraCommonEuclidianEventAbstractEvent:withGeogebraCommonEuclidianHits:", "handleMousePressedForPenMode", "V", 0x1, NULL, NULL },
    { "addPointPenModeWithGeogebraCommonEuclidianEventAbstractEvent:withGeogebraCommonEuclidianHits:", "addPointPenMode", "V", 0x1, NULL, NULL },
    { "drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGPoint:withGeogebraCommonAwtGPoint:", "drawPenPreviewLine", "V", 0x2, NULL, NULL },
    { "handleMouseReleasedForPenModeWithBoolean:withInt:withInt:", "handleMouseReleasedForPenMode", "V", 0x1, NULL, NULL },
    { "checkShapesWithInt:withInt:", "checkShapes", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "addPointsToPolyLineWithJavaUtilArrayList:", "addPointsToPolyLine", "V", 0x2, NULL, NULL },
    { "getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement:", "getAlgoPolyline", "Lgeogebra.common.kernel.algos.AlgoPolyLine;", 0xa, NULL, NULL },
    { "mouseReleasedFreehandWithInt:withInt:", "mouseReleasedFreehand", "V", 0x2, NULL, NULL },
    { "setFreehandWithBoolean:", "setFreehand", "V", 0x1, NULL, NULL },
    { "findPolygonalWithInt:withInt:withInt:withInt:withInt:", "findPolygonal", "I", 0x2, NULL, NULL },
    { "calc_inertiaWithInt:withInt:withGeogebraCommonEuclidianEuclidianPen_Inertia:", "calc_inertia", "V", 0x2, NULL, NULL },
    { "I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "I_det", "D", 0x1a, NULL, NULL },
    { "I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "I_xx", "D", 0xa, NULL, NULL },
    { "I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "I_xy", "D", 0xa, NULL, NULL },
    { "I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "I_yy", "D", 0xa, NULL, NULL },
    { "score_circleWithInt:withInt:withGeogebraCommonEuclidianEuclidianPen_Inertia:", "score_circle", "D", 0x2, NULL, NULL },
    { "center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "center_x", "D", 0xa, NULL, NULL },
    { "center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "center_y", "D", 0xa, NULL, NULL },
    { "I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia:", "I_rad", "D", 0xa, NULL, NULL },
    { "makeACircleWithDouble:withDouble:withDouble:", "makeACircle", "Lgeogebra.common.kernel.geos.GeoConic;", 0x2, NULL, NULL },
    { "makeAConic", NULL, "Lgeogebra.common.kernel.geos.GeoConic;", 0x2, NULL, NULL },
    { "getDeltaXWithGeogebraCommonAwtGPoint:withGeogebraCommonAwtGPoint:", "getDeltaX", "I", 0xa, NULL, NULL },
    { "getDeltaYWithGeogebraCommonAwtGPoint:withGeogebraCommonAwtGPoint:", "getDeltaY", "I", 0xa, NULL, NULL },
    { "saveMoveWithNSString:", "saveMove", "V", 0x2, NULL, NULL },
    { "getGesture", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "clearTemporaryInfo", NULL, "V", 0x2, NULL, NULL },
    { "optimize_polygonalWithInt:", "optimize_polygonal", "V", 0x2, NULL, NULL },
    { "incr_inertiaWithInt:withGeogebraCommonEuclidianEuclidianPen_Inertia:withInt:", "incr_inertia", "V", 0x2, NULL, NULL },
    { "get_segment_geometryWithInt:withInt:withGeogebraCommonEuclidianEuclidianPen_Inertia:withGeogebraCommonEuclidianEuclidianPen_RecoSegment:", "get_segment_geometry", "V", 0x2, NULL, NULL },
    { "try_rectangle", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "try_arrow", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "try_closed_polygonWithInt:", "try_closed_polygon", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment:withGeogebraCommonEuclidianEuclidianPen_RecoSegment:withDoubleArray:", "calc_edge_isect", "V", 0xa, NULL, NULL },
    { "setPenColorWithGeogebraCommonAwtGColor:", "setPenColor", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenPositionWithBoolean:", "setAbsoluteScreenPosition", "V", 0x1, NULL, NULL },
    { "getCreatedShape", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "CIRCLE_MIN_DET_", NULL, 0x4, "D", NULL, NULL,  },
    { "CIRCLE_MAX_SCORE_", NULL, 0x4, "D", NULL, NULL,  },
    { "RECTANGLE_LINEAR_TOLERANCE_", NULL, 0x4, "D", NULL, NULL,  },
    { "POLYGON_LINEAR_TOLERANCE_", NULL, 0x4, "D", NULL, NULL,  },
    { "RECTANGLE_ANGLE_TOLERANCE_", NULL, 0x4, "D", NULL, NULL,  },
    { "DEFAULT_PEN_LINE_", NULL, 0x11, "Lgeogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "lastAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "penPoints_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/awt/GPoint;>;",  },
    { "temp_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/awt/GPoint;>;",  },
    { "minX_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxX_", NULL, 0x2, "I", NULL, NULL,  },
    { "score_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_MAXSIZE_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_ANGLE_MIN_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_ANGLE_MAX_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_ASYMMETRY_MAX_ANGLE_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_ASYMMETRY_MAX_LINEAR_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_TIP_LINEAR_TOLERANCE_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_SIDEWAYS_GAP_TOLERANCE_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_MAIN_LINEAR_GAP_MIN_", NULL, 0x2, "D", NULL, NULL,  },
    { "ARROW_MAIN_LINEAR_GAP_MAX_", NULL, 0x2, "D", NULL, NULL,  },
    { "brk_", NULL, 0x2, "[I", NULL, NULL,  },
    { "count_", NULL, 0x2, "I", NULL, NULL,  },
    { "recognizer_queue_length_", NULL, 0x2, "I", NULL, NULL,  },
    { "MAX_POLYGON_SIDES_", NULL, 0x2, "I", NULL, NULL,  },
    { "LINE_MAX_DET_", NULL, 0x2, "D", NULL, NULL,  },
    { "SLANT_TOLERANCE_", NULL, 0x2, "D", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$Inertia;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$Inertia;", NULL, NULL,  },
    { "c_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$Inertia;", NULL, NULL,  },
    { "d_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$Inertia;", NULL, NULL,  },
    { "reco_queue_a_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", NULL, NULL,  },
    { "reco_queue_b_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", NULL, NULL,  },
    { "reco_queue_c_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", NULL, NULL,  },
    { "reco_queue_d_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", NULL, NULL,  },
    { "reco_queue_e_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", NULL, NULL,  },
    { "LEFT_UP_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_LEFT_UP_, NULL,  },
    { "RIGHT_UP_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_RIGHT_UP_, NULL,  },
    { "RIGHT_DOWN_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_RIGHT_DOWN_, NULL,  },
    { "LEFT_DOWN_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_LEFT_DOWN_, NULL,  },
    { "LEFT_MOVE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_LEFT_MOVE_, NULL,  },
    { "RIGHT_MOVE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_RIGHT_MOVE_, NULL,  },
    { "UP_MOVE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_UP_MOVE_, NULL,  },
    { "DOWN_MOVE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianPen_DOWN_MOVE_, NULL,  },
    { "gridSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "gesture_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL,  },
    { "deltaX_", NULL, 0x2, "I", NULL, NULL,  },
    { "deltaY_", NULL, 0x2, "I", NULL, NULL,  },
    { "absDeltaX_", NULL, 0x2, "I", NULL, NULL,  },
    { "absDeltaY_", NULL, 0x2, "I", NULL, NULL,  },
    { "absTangent_", NULL, 0x2, "F", NULL, NULL,  },
    { "PEN_SIZE_FACTOR_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianPen_PEN_SIZE_FACTOR },
    { "CONIC_AXIS_ERROR_RATIO_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianPen_CONIC_AXIS_ERROR_RATIO },
    { "startNewStroke_", NULL, 0x2, "Z", NULL, NULL,  },
    { "penSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "initialPoint_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "deleteInitialPoint_", NULL, 0x4, "Z", NULL, NULL,  },
    { "eraserSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "penLineStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "penColor_", NULL, 0x2, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "freehand_", NULL, 0x2, "Z", NULL, NULL,  },
    { "absoluteScreenPosition_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.euclidian.EuclidianPen$RecoSegment;", "Lgeogebra.common.euclidian.EuclidianPen$Inertia;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianPen = { 2, "EuclidianPen", "geogebra.common.euclidian", NULL, 0x1, 48, methods, 65, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianPen;
}

@end

void GeogebraCommonEuclidianEuclidianPen_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianPen *self, GeogebraCommonMainApp *app, GeogebraCommonEuclidianEuclidianView *view) {
  NSObject_init(self);
  self->CIRCLE_MIN_DET_ = 0.95;
  self->CIRCLE_MAX_SCORE_ = 0.10;
  self->RECTANGLE_LINEAR_TOLERANCE_ = 0.20;
  self->POLYGON_LINEAR_TOLERANCE_ = 0.20;
  self->RECTANGLE_ANGLE_TOLERANCE_ = 15 * JavaLangMath_PI / 180;
  GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_penPoints_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianPen_set_temp_(self, nil);
  self->minX_ = JavaLangInteger_MAX_VALUE;
  self->maxX_ = JavaLangInteger_MIN_VALUE;
  self->score_ = 0;
  self->ARROW_MAXSIZE_ = 0.8;
  self->ARROW_ANGLE_MIN_ = (5 * JavaLangMath_PI / 180);
  self->ARROW_ANGLE_MAX_ = (50 * JavaLangMath_PI / 180);
  self->ARROW_ASYMMETRY_MAX_ANGLE_ = (30 * JavaLangMath_PI / 180);
  self->ARROW_ASYMMETRY_MAX_LINEAR_ = 1.0;
  self->ARROW_TIP_LINEAR_TOLERANCE_ = 0.30;
  self->ARROW_SIDEWAYS_GAP_TOLERANCE_ = 0.25;
  self->ARROW_MAIN_LINEAR_GAP_MIN_ = -0.3;
  self->ARROW_MAIN_LINEAR_GAP_MAX_ = 0.7;
  self->count_ = 0;
  self->recognizer_queue_length_ = 0;
  self->MAX_POLYGON_SIDES_ = 4;
  self->LINE_MAX_DET_ = 0.015;
  self->SLANT_TOLERANCE_ = 5 * JavaLangMath_PI / 180;
  GeogebraCommonEuclidianEuclidianPen_set_a_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_set_b_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_set_c_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_set_d_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_reco_queue_a_(self, new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_reco_queue_b_(self, new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_reco_queue_c_(self, new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_reco_queue_d_(self, new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_reco_queue_e_(self, new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self));
  self->gridSize_ = 15;
  GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, nil);
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_gesture_(self, new_JavaLangStringBuffer_init());
  self->deltaX_ = 0;
  self->deltaY_ = 0;
  self->absDeltaX_ = 0;
  self->absDeltaY_ = 0;
  self->absTangent_ = 0;
  self->startNewStroke_ = NO;
  GeogebraCommonEuclidianEuclidianPen_set_initialPoint_(self, nil);
  self->deleteInitialPoint_ = NO;
  self->freehand_ = NO;
  GeogebraCommonEuclidianEuclidianPen_set_view_(self, view);
  GeogebraCommonEuclidianEuclidianPen_set_app_(self, app);
  [self setDefaults];
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_DEFAULT_PEN_LINE_(self, new_GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(self, [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) getConstruction]));
  [self->DEFAULT_PEN_LINE_ setObjColorWithGeogebraCommonAwtGColor:self->penColor_];
  [self->DEFAULT_PEN_LINE_ setLineThicknessWithInt:self->penSize_];
}

GeogebraCommonEuclidianEuclidianPen *new_GeogebraCommonEuclidianEuclidianPen_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonMainApp *app, GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonEuclidianEuclidianPen *self = [GeogebraCommonEuclidianEuclidianPen alloc];
  GeogebraCommonEuclidianEuclidianPen_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_(self, app, view);
  return self;
}

void GeogebraCommonEuclidianEuclidianPen_drawPenPreviewLineWithGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonEuclidianEuclidianPen *self, id<GeogebraCommonAwtGGraphics2D> g2D, GeogebraCommonAwtGPoint *point1, GeogebraCommonAwtGPoint *point2) {
  id<GeogebraCommonAwtGLine2D> line = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D];
  [((id<GeogebraCommonAwtGLine2D>) nil_chk(line)) setLineWithDouble:[((GeogebraCommonAwtGPoint *) nil_chk(point1)) getX] withDouble:[point1 getY] withDouble:[((GeogebraCommonAwtGPoint *) nil_chk(point2)) getX] withDouble:[point2 getY]];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2D)) setStrokeWithGeogebraCommonAwtGBasicStroke:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:12 withInt:GeogebraCommonAwtGBasicStroke_CAP_ROUND withInt:GeogebraCommonAwtGBasicStroke_JOIN_ROUND]];
  [g2D setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_GRAY_()];
  [g2D fillWithGeogebraCommonAwtGShape:line];
  [g2D drawWithGeogebraCommonAwtGShape:line];
}

void GeogebraCommonEuclidianEuclidianPen_addPointsToPolyLineWithJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianPen *self, JavaUtilArrayList *penPoints2) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  IOSObjectArray *newPts;
  jint offset;
  if (self->startNewStroke_) {
    GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, nil);
    self->startNewStroke_ = NO;
  }
  if (self->lastAlgo_ == nil) {
    newPts = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(penPoints2)) size] type:GeogebraCommonKernelGeosGeoPoint_class_()];
    offset = 0;
  }
  else {
    IOSObjectArray *pts = [((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(GeogebraCommonEuclidianEuclidianPen_getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement_(self->lastAlgo_))) getPoints];
    newPts = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(penPoints2)) size] + 1 + ((IOSObjectArray *) nil_chk(pts))->size_ type:GeogebraCommonKernelGeosGeoPoint_class_()];
    for (jint i = 0; i < pts->size_; i++) {
      IOSObjectArray_Set(newPts, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) copyInternalWithGeogebraCommonKernelConstruction:cons], [GeogebraCommonKernelGeosGeoPoint class]));
    }
    IOSObjectArray_SetAndConsume(newPts, pts->size_, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, JavaLangDouble_NaN, JavaLangDouble_NaN, 1));
    offset = pts->size_ + 1;
  }
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(penPoints2)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonAwtGPoint *p = [it next];
    IOSObjectArray_SetAndConsume(nil_chk(newPts), offset++, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:[((GeogebraCommonAwtGPoint *) nil_chk(p)) getX]], [self->view_ toRealWorldCoordYWithDouble:[p getY]], 1));
  }
  GeogebraCommonKernelAlgosAlgoElement *algo;
  GeogebraCommonKernelAlgosAlgoPolyLine *newPolyLine;
  if (!self->absoluteScreenPosition_) {
    newPolyLine = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(cons, nil, newPts, nil, YES) autorelease];
    algo = newPolyLine;
  }
  else {
    newPolyLine = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(cons, newPts, nil, YES) autorelease];
    id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [self->app_ getActiveEuclidianView];
    GeogebraCommonKernelKernel *kernelA = [self->app_ getKernel];
    GeogebraCommonKernelGeosGeoPoint *corner1 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernelA)) getConstruction]) autorelease];
    GeogebraCommonKernelGeosGeoPoint *corner3 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([kernelA getConstruction]) autorelease];
    GeogebraCommonKernelGeosGeoPoint *screenCorner1 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([kernelA getConstruction]) autorelease];
    GeogebraCommonKernelGeosGeoPoint *screenCorner3 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([kernelA getConstruction]) autorelease];
    if (ev != nil) {
      [corner1 setCoordsWithDouble:[ev getXmin] withDouble:[ev getYmin] withDouble:1];
      [corner3 setCoordsWithDouble:[ev getXmax] withDouble:[ev getYmax] withDouble:1];
      [screenCorner1 setCoordsWithDouble:0 withDouble:[ev getHeight] withDouble:1];
      [screenCorner3 setCoordsWithDouble:[ev getWidth] withDouble:0 withDouble:1];
    }
    GeogebraCommonKernelArithmeticMyDouble *evNo = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernelA, [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getEuclidianViewNo]) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:newPolyLine];
    algo = [new_GeogebraCommonKernelAlgosAlgoAttachCopyToView_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons, nil, IOSObjectArray_Get(nil_chk([newPolyLine getGeoElements]), 0), evNo, corner1, corner3, screenCorner1, screenCorner3) autorelease];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(newPolyLine)) getGeoElements]), 0))) setTooltipModeWithInt:GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF];
  if (self->lastAlgo_ == nil) {
  }
  else {
    @try {
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) replaceWithGeogebraCommonKernelGeosGeoElement:[self->lastAlgo_ getOutputWithInt:0] withGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputWithInt:0]];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  GeogebraCommonEuclidianEuclidianPen_set_lastAlgo_(self, algo);
  GeogebraCommonKernelGeosGeoPolyLine *poly = (GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutputWithInt:0], [GeogebraCommonKernelGeosGeoPolyLine class]);
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly)) setLineThicknessWithInt:self->penSize_ * GeogebraCommonEuclidianEuclidianPen_PEN_SIZE_FACTOR];
  [poly setLineTypeWithInt:self->penLineStyle_];
  [poly setObjColorWithGeogebraCommonAwtGColor:self->penColor_];
  [((GeogebraCommonMainSelectionManager *) nil_chk([self->app_ getSelectionManager])) clearSelectedGeosWithBoolean:NO];
  [((GeogebraCommonMainSelectionManager *) nil_chk([self->app_ getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:poly];
  [poly updateRepaint];
  [self->app_ storeUndoInfo];
}

GeogebraCommonKernelAlgosAlgoPolyLine *GeogebraCommonEuclidianEuclidianPen_getAlgoPolylineWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonKernelAlgosAlgoElement *al) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  if ([al isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolyLine class]]) return (GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast(al, [GeogebraCommonKernelAlgosAlgoPolyLine class]);
  return (GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(al)) getInput]), 0))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolyLine class]);
}

void GeogebraCommonEuclidianEuclidianPen_mouseReleasedFreehandWithInt_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint x, jint y) {
  jint n = self->maxX_ - self->minX_ + 1;
  IOSDoubleArray *freehand1 = [IOSDoubleArray arrayWithLength:n];
  GeogebraCommonKernelGeosGeoElement *shape = [self checkShapesWithInt:x withInt:y];
  if (shape != nil && [shape isGeoLine]) {
    [((JavaUtilArrayList *) nil_chk(self->penPoints_)) clear];
    return;
  }
  if ([shape isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(shape, [GeogebraCommonKernelGeosGeoConic class])))) isCircle]) {
    NSString *equation = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(shape)) getAlgebraDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    @try {
      [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:equation withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:YES];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    [((JavaUtilArrayList *) nil_chk(self->penPoints_)) clear];
    return;
  }
  jdouble monotonicTest = 0;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->penPoints_)) size] - 1; i++) {
    GeogebraCommonAwtGPoint *p1 = [self->penPoints_ getWithInt:i];
    GeogebraCommonAwtGPoint *p2 = [self->penPoints_ getWithInt:i + 1];
    if (JavaLangMath_signumWithFloat_(((GeogebraCommonAwtGPoint *) nil_chk(p2))->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(p1))->x_) != 1) {
      monotonicTest++;
    }
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$DCD", @"mono", monotonicTest, ' ', monotonicTest / [self->penPoints_ size]));
  monotonicTest = monotonicTest / [self->penPoints_ size];
  jboolean monotonic = monotonicTest > 0.9 || monotonicTest < 0.1;
  if (!monotonic) {
    [self->penPoints_ clear];
    return;
  }
  if (shape != nil) {
    {
      IOSObjectArray *a__ = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([shape getParentAlgorithm])) getInput];
      GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *geo = *b__++;
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
      }
    }
    [shape remove];
  }
  for (jint i = 0; i < n; i++) {
    *IOSDoubleArray_GetRef(freehand1, i) = JavaLangDouble_NaN;
  }
  for (jint i = 0; i < [self->penPoints_ size]; i++) {
    GeogebraCommonAwtGPoint *p = [self->penPoints_ getWithInt:i];
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(freehand1, ((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ - self->minX_))) {
      *IOSDoubleArray_GetRef(freehand1, p->x_ - self->minX_) = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordYWithDouble:p->y_];
    }
  }
  jdouble val = IOSDoubleArray_Get(freehand1, 0);
  jint valIndex = 0;
  jdouble nextVal = JavaLangDouble_NaN;
  jint nextValIndex = -1;
  for (jint i = 0; i < n; i++) {
    if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(freehand1, i))) {
      if (i > nextValIndex) {
        nextValIndex = i;
        while (nextValIndex < n && JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(freehand1, nextValIndex))) nextValIndex++;
      }
      if (nextValIndex >= n) *IOSDoubleArray_GetRef(freehand1, i) = val;
      else {
        nextVal = IOSDoubleArray_Get(freehand1, nextValIndex);
        *IOSDoubleArray_GetRef(freehand1, i) = (val * (nextValIndex - i) + nextVal * (i - valIndex)) / (nextValIndex - valIndex);
      }
    }
    else {
      val = IOSDoubleArray_Get(freehand1, i);
      valIndex = i;
    }
  }
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  GeogebraCommonKernelGeosGeoList *list = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [list addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:self->minX_])) autorelease]];
  [list addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([self->view_ toRealWorldCoordXWithDouble:self->maxX_])) autorelease]];
  for (jint i = 0; i < n; i++) {
    [list addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(freehand1, i))) autorelease]];
  }
  GeogebraCommonKernelAlgosAlgoFunctionFreehand *algo = [new_GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(cons, nil, list) autorelease];
  GeogebraCommonKernelGeosGeoElement *fun = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  self->minX_ = JavaLangInteger_MAX_VALUE;
  self->maxX_ = JavaLangInteger_MIN_VALUE;
}

jint GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, jint n, jint offset1, jint offset2) {
  GeogebraCommonEuclidianEuclidianPen_Inertia *s = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  GeogebraCommonEuclidianEuclidianPen_Inertia *s1 = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  GeogebraCommonEuclidianEuclidianPen_Inertia *s2 = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  jint k, i1 = 0, i2 = 0, n1 = 0, n2;
  jdouble det1, det2;
  jint nsides = n;
  if (end == start) return 0;
  if (nsides <= 0) return 0;
  if (end - start < 5) nsides = 1;
  for (k = 0; k < nsides; ++k) {
    i1 = start + (k * (end - start)) / nsides;
    i2 = start + ((k + 1) * (end - start)) / nsides;
    GeogebraCommonEuclidianEuclidianPen_calc_inertiaWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(self, i1, i2, s);
    if (GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s) < self->LINE_MAX_DET_) break;
  }
  if (k == nsides) return 0;
  while (YES) {
    if (i1 > start) {
      s1->mass_ = s->mass_;
      s1->sx_ = s->sx_;
      s1->sxx_ = s->sxx_;
      s1->sxy_ = s->sxy_;
      s1->syy_ = s->syy_;
      s1->sy_ = s->sy_;
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, i1 - 1, s1, 1);
      det1 = GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s1);
    }
    else det1 = 1;
    if (i2 < end) {
      s2->mass_ = s->mass_;
      s2->sx_ = s->sx_;
      s2->sxx_ = s->sxx_;
      s2->sxy_ = s->sxy_;
      s2->syy_ = s->syy_;
      s2->sy_ = s->sy_;
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, i2, s2, 1);
      det2 = GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s2);
    }
    else det2 = 1;
    if (det1 < det2 && det1 < self->LINE_MAX_DET_) {
      i1--;
      s->mass_ = s1->mass_;
      s->sx_ = s1->sx_;
      s->sxx_ = s1->sxx_;
      s->sxy_ = s1->sxy_;
      s->syy_ = s1->syy_;
      s->sy_ = s1->sy_;
    }
    else if (det2 < det1 && det2 < self->LINE_MAX_DET_) {
      i2++;
      s->mass_ = s2->mass_;
      s->sx_ = s2->sx_;
      s->sxx_ = s2->sxx_;
      s->sxy_ = s2->sxy_;
      s->syy_ = s2->syy_;
      s->sy_ = s2->sy_;
    }
    else break;
  }
  if (i1 > start) {
    n1 = GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(self, start, i1, (i2 == end) ? (nsides - 1) : (nsides - 2), offset1, offset2);
    if (n1 == 0) return 0;
  }
  else n1 = 0;
  *IOSIntArray_GetRef(nil_chk(self->brk_), n1 + offset1) = i1;
  *IOSIntArray_GetRef(self->brk_, n1 + 1 + offset1) = i2;
  if (offset2 + n1 == 0) {
    ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->a_))->mass_ = s->mass_;
    self->a_->sx_ = s->sx_;
    self->a_->sxx_ = s->sxx_;
    self->a_->sxy_ = s->sxy_;
    self->a_->syy_ = s->syy_;
    self->a_->sy_ = s->sy_;
  }
  if (offset2 + n1 == 1) {
    ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_ = s->mass_;
    self->b_->sx_ = s->sx_;
    self->b_->sxx_ = s->sxx_;
    self->b_->sxy_ = s->sxy_;
    self->b_->syy_ = s->syy_;
    self->b_->sy_ = s->sy_;
  }
  if (offset2 + n1 == 2) {
    ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_ = s->mass_;
    self->c_->sx_ = s->sx_;
    self->c_->sxx_ = s->sxx_;
    self->c_->sxy_ = s->sxy_;
    self->c_->syy_ = s->syy_;
    self->c_->sy_ = s->sy_;
  }
  if (offset2 + n1 == 3) {
    ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->d_))->mass_ = s->mass_;
    self->d_->sx_ = s->sx_;
    self->d_->sxx_ = s->sxx_;
    self->d_->sxy_ = s->sxy_;
    self->d_->syy_ = s->syy_;
    self->d_->sy_ = s->sy_;
  }
  if (i2 < end) {
    n2 = GeogebraCommonEuclidianEuclidianPen_findPolygonalWithInt_withInt_withInt_withInt_withInt_(self, i2, end, nsides - n1 - 1, offset1 + n1 + 1, offset2 + n1 + 1);
    if (n2 == 0.) return 0;
  }
  else n2 = 0;
  return n1 + n2 + 1;
}

void GeogebraCommonEuclidianEuclidianPen_calc_inertiaWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  jint i;
  jint coeff = 1;
  IOSIntArray *temp1 = [IOSIntArray arrayWithLength:4];
  jdouble dm = 0;
  ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ = 0.;
  s->sx_ = 0.;
  s->sxx_ = 0.;
  s->sxy_ = 0.;
  s->sy_ = 0.;
  s->syy_ = 0.;
  *IOSIntArray_GetRef(temp1, 0) = ((GeogebraCommonAwtGPoint *) nil_chk([((JavaUtilArrayList *) nil_chk(self->penPoints_)) getWithInt:start]))->x_;
  *IOSIntArray_GetRef(temp1, 1) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start]))->y_;
  *IOSIntArray_GetRef(temp1, 2) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start + 1]))->x_;
  *IOSIntArray_GetRef(temp1, 3) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start + 1]))->y_;
  dm = coeff * JavaLangMath_hypotWithDouble_withDouble_(IOSIntArray_Get(temp1, 2) - IOSIntArray_Get(temp1, 0), IOSIntArray_Get(temp1, 3) - IOSIntArray_Get(temp1, 1));
  s->mass_ = s->mass_ + dm;
  s->sx_ = s->sx_ + (dm * IOSIntArray_Get(temp1, 0));
  s->sxx_ = s->sxx_ + (dm * IOSIntArray_Get(temp1, 0) * IOSIntArray_Get(temp1, 0));
  s->sxy_ = s->sxy_ + (dm * IOSIntArray_Get(temp1, 0) * IOSIntArray_Get(temp1, 1));
  s->sy_ = s->sy_ + (dm * IOSIntArray_Get(temp1, 1));
  s->syy_ = s->syy_ + (dm * IOSIntArray_Get(temp1, 1) * IOSIntArray_Get(temp1, 1));
  for (i = start + 1; i < end; ++i) {
    *IOSIntArray_GetRef(temp1, 0) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->x_;
    *IOSIntArray_GetRef(temp1, 1) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->y_;
    *IOSIntArray_GetRef(temp1, 2) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i + 1]))->x_;
    *IOSIntArray_GetRef(temp1, 3) = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i + 1]))->y_;
    dm = coeff * JavaLangMath_hypotWithDouble_withDouble_(IOSIntArray_Get(temp1, 2) - IOSIntArray_Get(temp1, 0), IOSIntArray_Get(temp1, 3) - IOSIntArray_Get(temp1, 1));
    s->mass_ = s->mass_ + dm;
    s->sx_ = s->sx_ + (dm * IOSIntArray_Get(temp1, 0));
    s->sxx_ = s->sxx_ + (dm * IOSIntArray_Get(temp1, 0) * IOSIntArray_Get(temp1, 0));
    s->sxy_ = s->sxy_ + (dm * IOSIntArray_Get(temp1, 0) * IOSIntArray_Get(temp1, 1));
    s->sy_ = s->sy_ + (dm * IOSIntArray_Get(temp1, 1));
    s->syy_ = s->syy_ + (dm * IOSIntArray_Get(temp1, 1) * IOSIntArray_Get(temp1, 1));
  }
}

jdouble GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  jdouble ixx = GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  jdouble iyy = GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  jdouble ixy = GeogebraCommonEuclidianEuclidianPen_I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  if (((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ <= 0.) return 0.;
  if (ixx + iyy <= 0.) return 0.;
  return 4 * (ixx * iyy - ixy * ixy) / (ixx + iyy) / (ixx + iyy);
}

jdouble GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  if (((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ <= 0.) return 0.;
  return (s->sxx_ - s->sx_ * s->sx_ / s->mass_) / s->mass_;
}

jdouble GeogebraCommonEuclidianEuclidianPen_I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  if (((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ <= 0.) return 0.;
  return (s->sxy_ - s->sx_ * s->sy_ / s->mass_) / s->mass_;
}

jdouble GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  if (((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ <= 0.) return 0.;
  return (s->syy_ - s->sy_ * s->sy_ / s->mass_) / s->mass_;
}

jdouble GeogebraCommonEuclidianEuclidianPen_score_circleWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen *self, jint start, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  jdouble sum, x0, y0, r0, dm, deltar;
  jint i;
  if (((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ == 0.) return 0;
  sum = 0.;
  x0 = GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  y0 = GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  r0 = GeogebraCommonEuclidianEuclidianPen_I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  for (i = start; i < end; ++i) {
    dm = JavaLangMath_hypotWithDouble_withDouble_(((GeogebraCommonAwtGPoint *) nil_chk([((JavaUtilArrayList *) nil_chk(self->penPoints_)) getWithInt:i + 1]))->x_ - ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->x_, ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i + 1]))->y_ - ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->y_);
    deltar = JavaLangMath_hypotWithDouble_withDouble_(((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->x_ - x0, ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:i]))->y_ - y0) - r0;
    sum = sum + (dm * JavaLangMath_absWithDouble_(deltar));
  }
  return sum / (s->mass_ * r0);
}

jdouble GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  return ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->sx_ / s->mass_;
}

jdouble GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  return ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->sy_ / s->mass_;
}

jdouble GeogebraCommonEuclidianEuclidianPen_I_radWithGeogebraCommonEuclidianEuclidianPen_Inertia_(GeogebraCommonEuclidianEuclidianPen_Inertia *s) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  jdouble ixx = GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  jdouble iyy = GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  if (ixx + iyy <= 0.) return 0.;
  return JavaLangMath_sqrtWithDouble_(ixx + iyy);
}

GeogebraCommonKernelGeosGeoConic *GeogebraCommonEuclidianEuclidianPen_makeACircleWithDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianPen *self, jdouble x, jdouble y, jdouble r) {
  GeogebraCommonEuclidianEuclidianPen_setAndConsume_temp_(self, new_JavaUtilArrayList_init());
  jint npts, i = 0;
  npts = J2ObjCFpToInt((2 * r));
  if (npts < 12) npts = 12;
  GeogebraCommonAwtGPoint *p;
  for (i = 0; i <= npts; i++) {
    p = [new_GeogebraCommonAwtGPoint_init() autorelease];
    p->x_ = J2ObjCFpToInt((x + r * JavaLangMath_cosWithDouble_((2 * i * JavaLangMath_PI) / npts)));
    p->y_ = J2ObjCFpToInt((y + r * JavaLangMath_sinWithDouble_((2 * i * JavaLangMath_PI) / npts)));
    [self->temp_ addWithId:p];
  }
  jint size = [self->temp_ size];
  jdouble x1 = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:0]))->x_];
  jdouble y1 = [self->view_ toRealWorldCoordYWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:0]))->y_];
  jdouble x2 = [self->view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:size / 3]))->x_];
  jdouble y2 = [self->view_ toRealWorldCoordYWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:size / 3]))->y_];
  jdouble x3 = [self->view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:2 * size / 3]))->x_];
  jdouble y3 = [self->view_ toRealWorldCoordYWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:2 * size / 3]))->y_];
  if (x2 == x1) {
    x1 = [self->view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:size / 4]))->x_];
    y1 = [self->view_ toRealWorldCoordYWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:size / 4]))->y_];
  }
  if (x2 == x3) {
    x3 = [self->view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:11 * size / 12]))->x_];
    y3 = [self->view_ toRealWorldCoordYWithDouble:((GeogebraCommonAwtGPoint *) nil_chk([self->temp_ getWithInt:11 * size / 12]))->y_];
  }
  GeogebraCommonKernelGeosGeoPoint *p1 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction], x1, y1, 1.0) autorelease];
  GeogebraCommonKernelGeosGeoPoint *q = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getConstruction], x2, y2, 1.0) autorelease];
  GeogebraCommonKernelGeosGeoPoint *z = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getConstruction], x3, y3, 1.0) autorelease];
  GeogebraCommonKernelAlgosAlgoCircleThreePoints *algo = [new_GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getConstruction], nil, p1, q, z) autorelease];
  GeogebraCommonKernelGeosGeoConic *circle = (GeogebraCommonKernelGeosGeoConic *) check_class_cast([algo getCircle], [GeogebraCommonKernelGeosGeoConic class]);
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(circle)) updateRepaint];
  return circle;
}

GeogebraCommonKernelGeosGeoConic *GeogebraCommonEuclidianEuclidianPen_makeAConic(GeogebraCommonEuclidianEuclidianPen *self) {
  jdouble px, py;
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  jint order = 2;
  jint datasize = 10;
  if ([((JavaUtilArrayList *) nil_chk(self->penPoints_)) size] < datasize) {
    return nil;
  }
  jint step = [self->penPoints_ size] / datasize;
  OrgApacheCommonsMathLinearArray2DRowRealMatrix *M = [new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithInt_withInt_(datasize, order * (order + 1)) autorelease];
  IOSDoubleArray *coeffs = [IOSDoubleArray arrayWithLength:6];
  @try {
    jint r = 0;
    for (jint j = 0; j < datasize; j++) {
      GeogebraCommonAwtGPoint *point = [self->penPoints_ getWithInt:r];
      r += step;
      px = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:[((GeogebraCommonAwtGPoint *) nil_chk(point)) getX]];
      py = [self->view_ toRealWorldCoordYWithDouble:[point getY]];
      jint c1 = 0;
      for (jint i = 0; i <= order; i++) {
        for (jint xpower = 0; xpower <= i; xpower++) {
          jint ypower = i - xpower;
          jdouble val = GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(px, xpower) * GeogebraCommonKernelStatisticsAlgoFitImplicit_powerWithDouble_withInt_(py, ypower);
          [M setEntryWithInt:j withInt:c1++ withDouble:val];
        }
      }
    }
    id<OrgApacheCommonsMathLinearSingularValueDecomposition> svd = [new_OrgApacheCommonsMathLinearSingularValueDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(M) autorelease];
    id<OrgApacheCommonsMathLinearRealMatrix> V = [svd getV];
    id<OrgApacheCommonsMathLinearRealVector> coeffsRV = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(V)) getColumnVectorWithInt:5];
    for (jint i = 0; i < 6; i++) {
      *IOSDoubleArray_GetRef(coeffs, 5 - i) = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(coeffsRV)) getEntryWithInt:i];
    }
  }
  @catch (JavaLangThrowable *t) {
    [((JavaLangThrowable *) nil_chk(t)) printStackTrace];
    return nil;
  }
  GeogebraCommonKernelGeosGeoConic *conic = [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getConstruction], nil, coeffs) autorelease];
  GeogebraCommonKernelGeosGeoPoint *point = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getConstruction], 0, 0, 1) autorelease];
  jdouble error = 0;
  for (GeogebraCommonAwtGPoint * __strong p in self->penPoints_) {
    [point setCoordsWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(p))->x_] withDouble:[self->view_ toRealWorldCoordYWithDouble:p->y_] withDouble:1];
    error += [conic distanceWithGeogebraCommonKernelGeosGeoPoint:point];
  }
  error /= [self->penPoints_ size];
  if ([conic isDefined] && [conic getHalfAxisWithInt:0] / error > GeogebraCommonEuclidianEuclidianPen_CONIC_AXIS_ERROR_RATIO && [conic getHalfAxisWithInt:1] / error > GeogebraCommonEuclidianEuclidianPen_CONIC_AXIS_ERROR_RATIO) {
    GeogebraCommonKernelAlgosAlgoFocus *algo = [new_GeogebraCommonKernelAlgosAlgoFocus_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_(cons, [IOSObjectArray arrayWithObjects:(id[]){ nil, nil } count:2 type:NSString_class_()], conic) autorelease];
    IOSObjectArray *focus = [algo getFocus];
    jint type = [conic getType];
    GeogebraCommonKernelGeosGeoPoint *pointOnConic = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getAlgoDispatcher])) PointWithNSString:nil withGeogebraCommonKernelPath:conic withGeogebraCommonKernelArithmeticNumberValue:nil];
    [conic remove];
    GeogebraCommonKernelGeosGeoPoint *f0 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(focus), 0))) getInhomX], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(focus, 0))) getInhomY], 1) autorelease];
    GeogebraCommonKernelGeosGeoPoint *f1 = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(focus, 1))) getInhomX], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(focus, 1))) getInhomY], 1) autorelease];
    GeogebraCommonKernelGeosGeoPoint *additionalPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(pointOnConic)) getInhomX], [pointOnConic getInhomY], 1) autorelease];
    conic = (GeogebraCommonKernelGeosGeoConic *) check_class_cast([((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([self->app_ getKernel])) getAlgoDispatcher])) EllipseHyperbolaWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:f0 withGeogebraCommonKernelKernelNDGeoPointND:f1 withGeogebraCommonKernelKernelNDGeoPointND:additionalPoint withInt:type], [GeogebraCommonKernelGeosGeoConic class]);
  }
  else {
    [conic remove];
    conic = nil;
  }
  return conic;
}

jint GeogebraCommonEuclidianEuclidianPen_getDeltaXWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonAwtGPoint *startPoint2, GeogebraCommonAwtGPoint *point) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  return ((GeogebraCommonAwtGPoint *) nil_chk(point))->x_ - ((GeogebraCommonAwtGPoint *) nil_chk(startPoint2))->x_;
}

jint GeogebraCommonEuclidianEuclidianPen_getDeltaYWithGeogebraCommonAwtGPoint_withGeogebraCommonAwtGPoint_(GeogebraCommonAwtGPoint *startPoint2, GeogebraCommonAwtGPoint *point) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  return ((GeogebraCommonAwtGPoint *) nil_chk(point))->y_ - ((GeogebraCommonAwtGPoint *) nil_chk(startPoint2))->y_;
}

void GeogebraCommonEuclidianEuclidianPen_saveMoveWithNSString_(GeogebraCommonEuclidianEuclidianPen *self, NSString *move) {
  if (([((JavaLangStringBuffer *) nil_chk(self->gesture_)) length] == 0) || ([self->gesture_ charAtWithInt:[self->gesture_ length] - 1] == [((NSString *) nil_chk(move)) charAtWithInt:0]) || self->count_ == 1) self->count_++;
  else self->count_ = 1;
  if (([self->gesture_ length] > 0) && (([self->gesture_ charAtWithInt:[self->gesture_ length] - 1] == [((NSString *) nil_chk(move)) charAtWithInt:0]) || self->count_ != 2)) return;
  [self->gesture_ appendWithNSString:move];
}

NSString *GeogebraCommonEuclidianEuclidianPen_getGesture(GeogebraCommonEuclidianEuclidianPen *self) {
  return [((JavaLangStringBuffer *) nil_chk(self->gesture_)) description];
}

void GeogebraCommonEuclidianEuclidianPen_clearTemporaryInfo(GeogebraCommonEuclidianEuclidianPen *self) {
  GeogebraCommonEuclidianEuclidianPen_set_startPoint_(self, nil);
  [self->gesture_ delete__WithInt:0 withInt:[((JavaLangStringBuffer *) nil_chk(self->gesture_)) length]];
}

void GeogebraCommonEuclidianEuclidianPen_optimize_polygonalWithInt_(GeogebraCommonEuclidianEuclidianPen *self, jint nsides) {
  jint i;
  jdouble cost, newcost;
  jboolean improved;
  GeogebraCommonEuclidianEuclidianPen_Inertia *temp1 = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  GeogebraCommonEuclidianEuclidianPen_Inertia *temp2 = [new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self) autorelease];
  for (i = 1; i < nsides; ++i) {
    if ((i - 1) == 0) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->a_))->mass_;
      temp1->sx_ = self->a_->sx_;
      temp1->sxx_ = self->a_->sxx_;
      temp1->sxy_ = self->a_->sxy_;
      temp1->sy_ = self->a_->sy_;
      temp1->syy_ = self->a_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_;
      temp2->sx_ = self->b_->sx_;
      temp2->sxx_ = self->b_->sxx_;
      temp2->sxy_ = self->b_->sxy_;
      temp2->sy_ = self->b_->sy_;
      temp2->syy_ = self->b_->syy_;
    }
    if ((i - 1) == 1) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_;
      temp1->sx_ = self->b_->sx_;
      temp1->sxx_ = self->b_->sxx_;
      temp1->sxy_ = self->b_->sxy_;
      temp1->sy_ = self->b_->sy_;
      temp1->syy_ = self->b_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_;
      temp2->sx_ = self->c_->sx_;
      temp2->sxx_ = self->c_->sxx_;
      temp2->sxy_ = self->c_->sxy_;
      temp2->sy_ = self->c_->sy_;
      temp2->syy_ = self->c_->syy_;
    }
    if ((i - 1) == 2) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_;
      temp1->sx_ = self->c_->sx_;
      temp1->sxx_ = self->c_->sxx_;
      temp1->sxy_ = self->c_->sxy_;
      temp1->sy_ = self->c_->sy_;
      temp1->syy_ = self->c_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->d_))->mass_;
      temp2->sx_ = self->d_->sx_;
      temp2->sxx_ = self->d_->sxx_;
      temp2->sxy_ = self->d_->sxy_;
      temp2->sy_ = self->d_->sy_;
      temp2->syy_ = self->d_->syy_;
    }
    cost = GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1) + GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2);
    improved = NO;
    while (IOSIntArray_Get(nil_chk(self->brk_), i) > IOSIntArray_Get(self->brk_, i - 1) + 1) {
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, IOSIntArray_Get(self->brk_, i) - 1, temp1, -1);
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, IOSIntArray_Get(self->brk_, i) - 1, temp2, 1);
      newcost = GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1) + GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2);
      if (newcost >= cost) break;
      improved = YES;
      cost = newcost;
      (*IOSIntArray_GetRef(self->brk_, i))--;
      if (i - 1 == 0) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->a_))->mass_ = temp1->mass_;
        self->a_->sx_ = temp1->sx_;
        self->a_->sy_ = temp1->sy_;
        self->a_->sxx_ = temp1->sxx_;
        self->a_->sxy_ = temp1->sxy_;
        self->a_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_ = temp2->mass_;
        self->b_->sx_ = temp2->sx_;
        self->b_->sy_ = temp2->sy_;
        self->b_->sxx_ = temp2->sxx_;
        self->b_->sxy_ = temp2->sxy_;
        self->b_->syy_ = temp2->syy_;
      }
      if (i - 1 == 1) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_ = temp1->mass_;
        self->b_->sx_ = temp1->sx_;
        self->b_->sy_ = temp1->sy_;
        self->b_->sxx_ = temp1->sxx_;
        self->b_->sxy_ = temp1->sxy_;
        self->b_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_ = temp2->mass_;
        self->c_->sx_ = temp2->sx_;
        self->c_->sy_ = temp2->sy_;
        self->c_->sxx_ = temp2->sxx_;
        self->c_->sxy_ = temp2->sxy_;
        self->c_->syy_ = temp2->syy_;
      }
      if (i - 1 == 2) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_ = temp1->mass_;
        self->c_->sx_ = temp1->sx_;
        self->c_->sy_ = temp1->sy_;
        self->c_->sxx_ = temp1->sxx_;
        self->c_->sxy_ = temp1->sxy_;
        self->c_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->d_))->mass_ = temp2->mass_;
        self->d_->sx_ = temp2->sx_;
        self->d_->sy_ = temp2->sy_;
        self->d_->sxx_ = temp2->sxx_;
        self->d_->sxy_ = temp2->sxy_;
        self->d_->syy_ = temp2->syy_;
      }
    }
    if (improved) continue;
    if ((i - 1) == 0) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->a_))->mass_;
      temp1->sx_ = self->a_->sx_;
      temp1->sxx_ = self->a_->sxx_;
      temp1->sxy_ = self->a_->sxy_;
      temp1->sy_ = self->a_->sy_;
      temp1->syy_ = self->a_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_;
      temp2->sx_ = self->b_->sx_;
      temp2->sxx_ = self->b_->sxx_;
      temp2->sxy_ = self->b_->sxy_;
      temp2->sy_ = self->b_->sy_;
      temp2->syy_ = self->b_->syy_;
    }
    if ((i - 1) == 1) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_;
      temp1->sx_ = self->b_->sx_;
      temp1->sxx_ = self->b_->sxx_;
      temp1->sxy_ = self->b_->sxy_;
      temp1->sy_ = self->b_->sy_;
      temp1->syy_ = self->b_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_;
      temp2->sx_ = self->c_->sx_;
      temp2->sxx_ = self->c_->sxx_;
      temp2->sxy_ = self->c_->sxy_;
      temp2->sy_ = self->c_->sy_;
      temp2->syy_ = self->c_->syy_;
    }
    if ((i - 1) == 2) {
      temp1->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_;
      temp1->sx_ = self->c_->sx_;
      temp1->sxx_ = self->c_->sxx_;
      temp1->sxy_ = self->c_->sxy_;
      temp1->sy_ = self->c_->sy_;
      temp1->syy_ = self->c_->syy_;
      temp2->mass_ = ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->d_))->mass_;
      temp2->sx_ = self->d_->sx_;
      temp2->sxx_ = self->d_->sxx_;
      temp2->sxy_ = self->d_->sxy_;
      temp2->sy_ = self->d_->sy_;
      temp2->syy_ = self->d_->syy_;
    }
    while (IOSIntArray_Get(self->brk_, i) < IOSIntArray_Get(self->brk_, i + 1) - 1) {
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, IOSIntArray_Get(self->brk_, i), temp1, 1);
      GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(self, IOSIntArray_Get(self->brk_, i), temp2, -1);
      newcost = (GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp1)) + (GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2) * GeogebraCommonEuclidianEuclidianPen_I_detWithGeogebraCommonEuclidianEuclidianPen_Inertia_(temp2));
      if (newcost >= cost) break;
      cost = newcost;
      (*IOSIntArray_GetRef(self->brk_, i))++;
      if (i - 1 == 0) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->a_))->mass_ = temp1->mass_;
        self->a_->sx_ = temp1->sx_;
        self->a_->sy_ = temp1->sy_;
        self->a_->sxx_ = temp1->sxx_;
        self->a_->sxy_ = temp1->sxy_;
        self->a_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_ = temp2->mass_;
        self->b_->sx_ = temp2->sx_;
        self->b_->sy_ = temp2->sy_;
        self->b_->sxx_ = temp2->sxx_;
        self->b_->sxy_ = temp2->sxy_;
        self->b_->syy_ = temp2->syy_;
      }
      if (i - 1 == 1) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->b_))->mass_ = temp1->mass_;
        self->b_->sx_ = temp1->sx_;
        self->b_->sy_ = temp1->sy_;
        self->b_->sxx_ = temp1->sxx_;
        self->b_->sxy_ = temp1->sxy_;
        self->b_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_ = temp2->mass_;
        self->c_->sx_ = temp2->sx_;
        self->c_->sy_ = temp2->sy_;
        self->c_->sxx_ = temp2->sxx_;
        self->c_->sxy_ = temp2->sxy_;
        self->c_->syy_ = temp2->syy_;
      }
      if (i - 1 == 2) {
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->c_))->mass_ = temp1->mass_;
        self->c_->sx_ = temp1->sx_;
        self->c_->sy_ = temp1->sy_;
        self->c_->sxx_ = temp1->sxx_;
        self->c_->sxy_ = temp1->sxy_;
        self->c_->syy_ = temp1->syy_;
        ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(self->d_))->mass_ = temp2->mass_;
        self->d_->sx_ = temp2->sx_;
        self->d_->sy_ = temp2->sy_;
        self->d_->sxx_ = temp2->sxx_;
        self->d_->sxy_ = temp2->sxy_;
        self->d_->syy_ = temp2->syy_;
      }
    }
  }
}

void GeogebraCommonEuclidianEuclidianPen_incr_inertiaWithInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withInt_(GeogebraCommonEuclidianEuclidianPen *self, jint start, GeogebraCommonEuclidianEuclidianPen_Inertia *s, jint coeff) {
  jdouble pt1_x = ((GeogebraCommonAwtGPoint *) nil_chk([((JavaUtilArrayList *) nil_chk(self->penPoints_)) getWithInt:start]))->x_;
  jdouble pt1_y = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start]))->y_;
  jdouble pt2_x = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start + 1]))->x_;
  jdouble pt2_y = ((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start + 1]))->y_;
  jdouble dm = 0;
  dm = coeff * JavaLangMath_hypotWithDouble_withDouble_(pt2_x - pt1_x, pt2_y - pt1_y);
  ((GeogebraCommonEuclidianEuclidianPen_Inertia *) nil_chk(s))->mass_ = s->mass_ + dm;
  s->sx_ = s->sx_ + (dm * pt1_x);
  s->sy_ = s->sy_ + (dm * pt1_y);
  s->sxx_ = s->sxx_ + (dm * pt1_x * pt1_x);
  s->syy_ = s->syy_ + (dm * pt1_y * pt1_y);
  s->sxy_ = s->sxy_ + (dm * pt1_x * pt1_y);
}

void GeogebraCommonEuclidianEuclidianPen_get_segment_geometryWithInt_withInt_withGeogebraCommonEuclidianEuclidianPen_Inertia_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_(GeogebraCommonEuclidianEuclidianPen *self, jint begin, jint end, GeogebraCommonEuclidianEuclidianPen_Inertia *s, GeogebraCommonEuclidianEuclidianPen_RecoSegment *r) {
  jdouble a1, b1, c1, lmin, lmax, l;
  jint i;
  jint start = begin;
  ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r))->xcenter_ = GeogebraCommonEuclidianEuclidianPen_center_xWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  r->ycenter_ = GeogebraCommonEuclidianEuclidianPen_center_yWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  a1 = GeogebraCommonEuclidianEuclidianPen_I_xxWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  b1 = GeogebraCommonEuclidianEuclidianPen_I_xyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  c1 = GeogebraCommonEuclidianEuclidianPen_I_yyWithGeogebraCommonEuclidianEuclidianPen_Inertia_(s);
  r->angle_ = JavaLangMath_atan2WithDouble_withDouble_(2 * b1, a1 - c1) / 2;
  r->radius_ = JavaLangMath_sqrtWithDouble_(3 * (a1 + c1));
  lmin = lmax = 0;
  for (i = start; i <= end; ++i) {
    l = (((GeogebraCommonAwtGPoint *) nil_chk([((JavaUtilArrayList *) nil_chk(self->penPoints_)) getWithInt:start]))->x_ - r->xcenter_) * JavaLangMath_cosWithDouble_(r->angle_) + (((GeogebraCommonAwtGPoint *) nil_chk([self->penPoints_ getWithInt:start]))->y_ - r->ycenter_) * JavaLangMath_sinWithDouble_(r->angle_);
    if (l < lmin) lmin = l;
    if (l > lmax) lmax = l;
    start++;
  }
  r->x1_ = r->xcenter_ + lmin * JavaLangMath_cosWithDouble_(r->angle_);
  r->y1_ = r->ycenter_ + lmin * JavaLangMath_sinWithDouble_(r->angle_);
  r->x2_ = r->xcenter_ + lmax * JavaLangMath_cosWithDouble_(r->angle_);
  r->y2_ = r->ycenter_ + lmax * JavaLangMath_sinWithDouble_(r->angle_);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_rectangle(GeogebraCommonEuclidianEuclidianPen *self) {
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *rs = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *r1 = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *r2 = nil;
  jint i;
  jdouble dist, avg_angle = 0;
  IOSDoubleArray *pt = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  GeogebraCommonKernelAlgosAlgoPolygon *algo = nil;
  jdouble x_first = 0;
  jdouble y_first = 0;
  IOSDoubleArray *points = [IOSDoubleArray arrayWithLength:10];
  if (self->recognizer_queue_length_ < 4) return nil;
  if (self->recognizer_queue_length_ - 4 == 0) rs = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 4 == 1) rs = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 4 == 2) rs = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 4 == 3) rs = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 4 == 4) rs = self->reco_queue_e_;
  if (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(rs))->startpt_ != 0) return nil;
  for (i = 0; i <= 3; ++i) {
    if (self->recognizer_queue_length_ - 4 + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 4) r2 = self->reco_queue_e_;
    if (JavaLangMath_absWithDouble_(JavaLangMath_absWithDouble_(((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->angle_ - ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r2))->angle_) - JavaLangMath_PI / 2) > self->RECTANGLE_ANGLE_TOLERANCE_) return nil;
    avg_angle = avg_angle + r1->angle_;
    if (r2->angle_ > r1->angle_) avg_angle = avg_angle + ((i + 1) * JavaLangMath_PI / 2);
    else avg_angle = avg_angle - ((i + 1) * JavaLangMath_PI / 2);
    r1->reversed_ = (((r1->x2_ - r1->x1_) * (r2->xcenter_ - r1->xcenter_) + (r1->y2_ - r1->y1_) * (r2->ycenter_ - r1->ycenter_)) < 0);
  }
  for (i = 0; i <= 3; ++i) {
    if (self->recognizer_queue_length_ - 4 + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + ((i + 1) % 4) == 4) r2 = self->reco_queue_e_;
    dist = JavaLangMath_hypotWithDouble_withDouble_((((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->reversed_ ? r1->x1_ : r1->x2_) - (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r2))->reversed_ ? r2->x2_ : r2->x1_), (r1->reversed_ ? r1->y1_ : r1->y2_) - (r2->reversed_ ? r2->y2_ : r2->y1_));
    if (dist > self->RECTANGLE_LINEAR_TOLERANCE_ * (r1->radius_ + r2->radius_)) return nil;
  }
  avg_angle = avg_angle / 4;
  if (JavaLangMath_absWithDouble_(avg_angle) < self->SLANT_TOLERANCE_) avg_angle = 0;
  if (JavaLangMath_absWithDouble_(avg_angle) > JavaLangMath_PI / 2 - self->SLANT_TOLERANCE_) avg_angle = JavaLangMath_PI / 2;
  for (i = 0; i <= 3; ++i) {
    if (self->recognizer_queue_length_ - 4 + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + i == 4) r1 = self->reco_queue_e_;
    ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->angle_ = avg_angle + i * JavaLangMath_PI / 2;
  }
  for (i = 0; i <= 3; ++i) {
    if (self->recognizer_queue_length_ - 4 + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - 4 + (i + 1) % 4 == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 4 + (i + 1) % 4 == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 4 + (i + 1) % 4 == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 4 + (i + 1) % 4 == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 4 + (i + 1) % 4 == 4) r2 = self->reco_queue_e_;
    GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(r1, r2, pt);
    *IOSDoubleArray_GetRef(points, 2 * i + 2) = IOSDoubleArray_Get(pt, 0);
    *IOSDoubleArray_GetRef(points, 2 * i + 3) = IOSDoubleArray_Get(pt, 1);
  }
  *IOSDoubleArray_GetRef(points, 0) = IOSDoubleArray_Get(points, 8);
  *IOSDoubleArray_GetRef(points, 1) = IOSDoubleArray_Get(points, 9);
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  jdouble offsetInitialPointX = 0;
  jdouble offsetInitialPointY = 0;
  for (i = 0; i < 4; ++i) {
    x_first = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(points, 2 * i)] + offsetInitialPointX;
    y_first = [self->view_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(points, 2 * i + 1)] + offsetInitialPointY;
    if (i == 0 && self->initialPoint_ != nil && [self->initialPoint_ isIndependent]) {
      offsetInitialPointX = self->initialPoint_->x_ - x_first;
      offsetInitialPointY = self->initialPoint_->y_ - y_first;
      IOSObjectArray_Set(pts, 0, self->initialPoint_);
    }
    else {
      IOSObjectArray_SetAndConsume(pts, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, x_first, y_first, 1.0));
    }
  }
  algo = [new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil, pts) autorelease];
  GeogebraCommonKernelGeosGeoElement *poly = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(poly)) updateRepaint];
  return poly;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_arrow(GeogebraCommonEuclidianEuclidianPen *self) {
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *rs = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *temp1 = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *temp2 = nil;
  jint i, j;
  IOSDoubleArray *alpha = [IOSDoubleArray arrayWithLength:3];
  IOSDoubleArray *pt = [IOSDoubleArray arrayWithLength:2];
  jdouble dist, delta;
  jdouble x1, y1, x2, y2, angle;
  IOSBooleanArray *rev = [IOSBooleanArray arrayWithLength:3];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  GeogebraCommonKernelGeosGeoPoint *p = nil;
  GeogebraCommonKernelGeosGeoPoint *q = nil;
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = nil;
  jdouble x_first = 0;
  jdouble y_first = 0;
  jdouble x_last = 0;
  jdouble y_last = 0;
  if (self->recognizer_queue_length_ < 3) return nil;
  if (self->recognizer_queue_length_ - 3 == 0) rs = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 3 == 1) rs = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 3 == 2) rs = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 3 == 3) rs = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 3 == 4) rs = self->reco_queue_e_;
  if (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(rs))->startpt_ != 0) return nil;
  for (i = 1; i <= 2; ++i) {
    if (self->recognizer_queue_length_ - 3 + i == 0) temp1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 3 + i == 1) temp1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 3 + i == 2) temp1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 3 + i == 3) temp1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 3 + i == 4) temp1 = self->reco_queue_e_;
    if (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->radius_ > self->ARROW_MAXSIZE_ * rs->radius_) return nil;
    *IOSBooleanArray_GetRef(rev, i) = ((JavaLangMath_hypotWithDouble_withDouble_(temp1->xcenter_ - rs->x1_, temp1->ycenter_ - rs->y1_)) < (JavaLangMath_hypotWithDouble_withDouble_(temp1->xcenter_ - rs->x2_, temp1->ycenter_ - rs->y2_)));
  }
  if (IOSBooleanArray_Get(rev, 1) != IOSBooleanArray_Get(rev, 2)) return nil;
  if (IOSBooleanArray_Get(rev, 1)) {
    x1 = rs->x2_;
    y1 = rs->y2_;
    x2 = rs->x1_;
    y2 = rs->y1_;
    angle = rs->angle_ + JavaLangMath_PI;
  }
  else {
    x1 = rs->x1_;
    y1 = rs->y1_;
    x2 = rs->x2_;
    y2 = rs->y2_;
    angle = rs->angle_;
  }
  for (i = 1; i <= 2; ++i) {
    if (self->recognizer_queue_length_ - 3 + i == 0) temp1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 3 + i == 1) temp1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 3 + i == 2) temp1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 3 + i == 3) temp1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 3 + i == 4) temp1 = self->reco_queue_e_;
    ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->reversed_ = NO;
    *IOSDoubleArray_GetRef(alpha, i) = temp1->angle_ - angle;
    while (IOSDoubleArray_Get(alpha, i) < -JavaLangMath_PI / 2) {
      *IOSDoubleArray_GetRef(alpha, i) = IOSDoubleArray_Get(alpha, i) + JavaLangMath_PI;
      temp1->reversed_ = !temp1->reversed_;
    }
    while (IOSDoubleArray_Get(alpha, i) > JavaLangMath_PI / 2) {
      *IOSDoubleArray_GetRef(alpha, i) = IOSDoubleArray_Get(alpha, i) - JavaLangMath_PI;
      temp1->reversed_ = !temp1->reversed_;
    }
    if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(alpha, i)) < self->ARROW_ANGLE_MIN_ || JavaLangMath_absWithDouble_(IOSDoubleArray_Get(alpha, i)) > self->ARROW_ANGLE_MAX_) return nil;
  }
  if (IOSDoubleArray_Get(alpha, 1) * IOSDoubleArray_Get(alpha, 2) > 0 || JavaLangMath_absWithDouble_(IOSDoubleArray_Get(alpha, 1) + IOSDoubleArray_Get(alpha, 2)) > self->ARROW_ASYMMETRY_MAX_ANGLE_) return nil;
  if (self->recognizer_queue_length_ - 2 == 0) temp1 = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 2 == 1) temp1 = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 2 == 2) temp1 = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 2 == 3) temp1 = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 2 == 4) temp1 = self->reco_queue_e_;
  if (self->recognizer_queue_length_ - 1 == 0) temp2 = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 1 == 1) temp2 = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 1 == 2) temp2 = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 1 == 3) temp2 = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 1 == 4) temp2 = self->reco_queue_e_;
  if (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->radius_ / ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp2))->radius_ > 1 + self->ARROW_ASYMMETRY_MAX_LINEAR_) return nil;
  if (temp2->radius_ / temp1->radius_ > 1 + self->ARROW_ASYMMETRY_MAX_LINEAR_) return nil;
  GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(temp1, temp2, pt);
  for (j = 1; j <= 2; ++j) {
    if (self->recognizer_queue_length_ - 3 + j == 0) temp1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - 3 + j == 1) temp1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - 3 + j == 2) temp1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - 3 + j == 3) temp1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - 3 + j == 4) temp1 = self->reco_queue_e_;
    dist = JavaLangMath_hypotWithDouble_withDouble_(IOSDoubleArray_Get(pt, 0) - (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->reversed_ ? temp1->x1_ : temp1->x2_), IOSDoubleArray_Get(pt, 1) - (temp1->reversed_ ? temp1->y1_ : temp1->y2_));
    if (dist > self->ARROW_TIP_LINEAR_TOLERANCE_ * temp1->radius_) return nil;
  }
  dist = (IOSDoubleArray_Get(pt, 0) - x2) * JavaLangMath_sinWithDouble_(angle) - (IOSDoubleArray_Get(pt, 1) - y2) * JavaLangMath_cosWithDouble_(angle);
  if (self->recognizer_queue_length_ - 3 + 1 == 0) temp1 = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 3 + 1 == 1) temp1 = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 3 + 1 == 2) temp1 = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 3 + 1 == 3) temp1 = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 3 + 1 == 4) temp1 = self->reco_queue_e_;
  if (self->recognizer_queue_length_ - 3 + 2 == 0) temp2 = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - 3 + 2 == 1) temp2 = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - 3 + 2 == 2) temp2 = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - 3 + 2 == 3) temp2 = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - 3 + 2 == 4) temp2 = self->reco_queue_e_;
  dist = dist / (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp1))->radius_ + ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(temp2))->radius_);
  if (JavaLangMath_absWithDouble_(dist) > self->ARROW_SIDEWAYS_GAP_TOLERANCE_) return nil;
  dist = (IOSDoubleArray_Get(pt, 0) - x2) * JavaLangMath_cosWithDouble_(angle) + (IOSDoubleArray_Get(pt, 1) - y2) * JavaLangMath_sinWithDouble_(angle);
  dist = dist / (temp1->radius_ + temp2->radius_);
  if (dist < self->ARROW_MAIN_LINEAR_GAP_MIN_ || dist > self->ARROW_MAIN_LINEAR_GAP_MAX_) return nil;
  if (JavaLangMath_absWithDouble_(rs->angle_) < self->SLANT_TOLERANCE_) {
    angle = angle - rs->angle_;
    y1 = y2 = rs->ycenter_;
  }
  if (rs->angle_ > JavaLangMath_PI / 2 - self->SLANT_TOLERANCE_) {
    angle = angle - (rs->angle_ - JavaLangMath_PI / 2);
    x1 = x2 = rs->xcenter_;
  }
  if (rs->angle_ < -JavaLangMath_PI / 2 + self->SLANT_TOLERANCE_) {
    angle = angle - (rs->angle_ + JavaLangMath_PI / 2);
    x1 = x2 = rs->xcenter_;
  }
  delta = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(alpha, 1) - IOSDoubleArray_Get(alpha, 2)) / 2;
  dist = (JavaLangMath_hypotWithDouble_withDouble_(temp1->x1_ - temp1->x2_, temp1->y1_ - temp1->y2_) + JavaLangMath_hypotWithDouble_withDouble_(temp2->x1_ - temp2->x2_, temp2->y1_ - temp2->y2_)) / 2;
  x_first = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:x1];
  y_first = [self->view_ toRealWorldCoordYWithDouble:y1];
  x_last = [self->view_ toRealWorldCoordXWithDouble:x2];
  y_last = [self->view_ toRealWorldCoordYWithDouble:y2];
  p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, x_first, y_first, 1.0) autorelease];
  q = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, x_last, y_last, 1.0) autorelease];
  algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, nil, p, q) autorelease];
  GeogebraCommonKernelGeosGeoElement *line = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(line)) updateRepaint];
  x_first = [self->view_ toRealWorldCoordXWithDouble:(x2 - dist * JavaLangMath_cosWithDouble_(angle + delta))];
  y_first = [self->view_ toRealWorldCoordYWithDouble:(y2 - dist * JavaLangMath_sinWithDouble_(angle + delta))];
  p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, x_first, y_first, 1.0) autorelease];
  algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, nil, p, q) autorelease];
  line = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(line)) updateRepaint];
  x_first = [self->view_ toRealWorldCoordXWithDouble:(x2 - dist * JavaLangMath_cosWithDouble_(angle - delta))];
  y_first = [self->view_ toRealWorldCoordYWithDouble:(y2 - dist * JavaLangMath_sinWithDouble_(angle - delta))];
  p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons, x_first, y_first, 1.0) autorelease];
  algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, nil, p, q) autorelease];
  line = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(line)) updateRepaint];
  return line;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonEuclidianEuclidianPen_try_closed_polygonWithInt_(GeogebraCommonEuclidianEuclidianPen *self, jint nsides) {
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *rs = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *r1 = nil;
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *r2 = nil;
  jint i;
  jdouble dist = 0;
  IOSDoubleArray *pt = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction];
  GeogebraCommonKernelAlgosAlgoPolygon *algo = nil;
  jdouble x_first = 0;
  jdouble y_first = 0;
  IOSDoubleArray *points = [IOSDoubleArray arrayWithLength:nsides * 2 + 2];
  if (self->recognizer_queue_length_ < nsides) return nil;
  if (self->recognizer_queue_length_ - nsides == 0) rs = self->reco_queue_a_;
  if (self->recognizer_queue_length_ - nsides == 1) rs = self->reco_queue_b_;
  if (self->recognizer_queue_length_ - nsides == 2) rs = self->reco_queue_c_;
  if (self->recognizer_queue_length_ - nsides == 3) rs = self->reco_queue_d_;
  if (self->recognizer_queue_length_ - nsides == 4) rs = self->reco_queue_e_;
  if (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(rs))->startpt_ != 0) return nil;
  for (i = 0; i < nsides; ++i) {
    if (self->recognizer_queue_length_ - nsides + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 4) r2 = self->reco_queue_e_;
    GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(r1, r2, pt);
    ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->reversed_ = ((JavaLangMath_hypotWithDouble_withDouble_(IOSDoubleArray_Get(pt, 0) - r1->x1_, IOSDoubleArray_Get(pt, 1) - r1->y1_)) < (JavaLangMath_hypotWithDouble_withDouble_(IOSDoubleArray_Get(pt, 0) - r1->x2_, IOSDoubleArray_Get(pt, 1) - r1->y2_)));
  }
  for (i = 0; i < nsides; ++i) {
    if (self->recognizer_queue_length_ - nsides + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 4) r2 = self->reco_queue_e_;
    GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(r1, r2, pt);
    dist = JavaLangMath_hypotWithDouble_withDouble_((((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->reversed_ ? r1->x1_ : r1->x2_) - IOSDoubleArray_Get(pt, 0), (r1->reversed_ ? r1->y1_ : r1->y2_) - IOSDoubleArray_Get(pt, 1)) + JavaLangMath_hypotWithDouble_withDouble_((((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r2))->reversed_ ? r2->x2_ : r2->x1_) - IOSDoubleArray_Get(pt, 0), (r2->reversed_ ? r2->y2_ : r2->y1_) - IOSDoubleArray_Get(pt, 1));
    if (dist > self->POLYGON_LINEAR_TOLERANCE_ * (r1->radius_ + r2->radius_)) return nil;
  }
  for (i = 0; i < nsides; ++i) {
    if (self->recognizer_queue_length_ - nsides + i == 0) r1 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + i == 1) r1 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + i == 2) r1 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + i == 3) r1 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + i == 4) r1 = self->reco_queue_e_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 0) r2 = self->reco_queue_a_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 1) r2 = self->reco_queue_b_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 2) r2 = self->reco_queue_c_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 3) r2 = self->reco_queue_d_;
    if (self->recognizer_queue_length_ - nsides + (i + 1) % nsides == 4) r2 = self->reco_queue_e_;
    GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(r1, r2, pt);
    *IOSDoubleArray_GetRef(points, 2 * i + 2) = IOSDoubleArray_Get(pt, 0);
    *IOSDoubleArray_GetRef(points, 2 * i + 3) = IOSDoubleArray_Get(pt, 1);
  }
  *IOSDoubleArray_GetRef(points, 0) = IOSDoubleArray_Get(points, 2 * nsides);
  *IOSDoubleArray_GetRef(points, 1) = IOSDoubleArray_Get(points, 2 * nsides + 1);
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:nsides type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (i = 0; i < nsides; ++i) {
    x_first = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(points, 2 * i)];
    y_first = [self->view_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(points, 2 * i + 1)];
    if (i == 0 && self->initialPoint_ != nil) {
      IOSObjectArray_Set(pts, 0, self->initialPoint_);
      GeogebraCommonEuclidianEuclidianPen_set_initialPoint_(self, nil);
    }
    else {
      IOSObjectArray_SetAndConsume(pts, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, x_first, y_first, 1.0));
    }
  }
  algo = [new_GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil, pts) autorelease];
  GeogebraCommonKernelGeosGeoElement *poly = IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(poly)) updateRepaint];
  return poly;
}

void GeogebraCommonEuclidianEuclidianPen_calc_edge_isectWithGeogebraCommonEuclidianEuclidianPen_RecoSegment_withGeogebraCommonEuclidianEuclidianPen_RecoSegment_withDoubleArray_(GeogebraCommonEuclidianEuclidianPen_RecoSegment *r1, GeogebraCommonEuclidianEuclidianPen_RecoSegment *r2, IOSDoubleArray *pt) {
  GeogebraCommonEuclidianEuclidianPen_initialize();
  jdouble t;
  t = (((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r2))->xcenter_ - ((GeogebraCommonEuclidianEuclidianPen_RecoSegment *) nil_chk(r1))->xcenter_) * JavaLangMath_sinWithDouble_(r2->angle_) - (r2->ycenter_ - r1->ycenter_) * JavaLangMath_cosWithDouble_(r2->angle_);
  t = t / JavaLangMath_sinWithDouble_(r2->angle_ - r1->angle_);
  *IOSDoubleArray_GetRef(nil_chk(pt), 0) = r1->xcenter_ + t * JavaLangMath_cosWithDouble_(r1->angle_);
  *IOSDoubleArray_GetRef(pt, 1) = r1->ycenter_ + t * JavaLangMath_sinWithDouble_(r1->angle_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianPen)

@implementation GeogebraCommonEuclidianEuclidianPen_RecoSegment

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$ {
  GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianPen:", "RecoSegment", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startpt_", NULL, 0x0, "I", NULL, NULL,  },
    { "endpt_", NULL, 0x0, "I", NULL, NULL,  },
    { "xcenter_", NULL, 0x0, "D", NULL, NULL,  },
    { "ycenter_", NULL, 0x0, "D", NULL, NULL,  },
    { "angle_", NULL, 0x0, "D", NULL, NULL,  },
    { "radius_", NULL, 0x0, "D", NULL, NULL,  },
    { "x1_", NULL, 0x0, "D", NULL, NULL,  },
    { "y1_", NULL, 0x0, "D", NULL, NULL,  },
    { "x2_", NULL, 0x0, "D", NULL, NULL,  },
    { "y2_", NULL, 0x0, "D", NULL, NULL,  },
    { "reversed_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianPen_RecoSegment = { 2, "RecoSegment", "geogebra.common.euclidian", "EuclidianPen", 0x2, 1, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianPen_RecoSegment;
}

@end

void GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen_RecoSegment *self, GeogebraCommonEuclidianEuclidianPen *outer$) {
  NSObject_init(self);
  self->startpt_ = 0;
  self->endpt_ = 0;
  self->xcenter_ = 0;
  self->ycenter_ = 0;
  self->angle_ = 0;
  self->radius_ = 0;
  self->x1_ = 0;
  self->y1_ = 0;
  self->x2_ = 0;
  self->y2_ = 0;
}

GeogebraCommonEuclidianEuclidianPen_RecoSegment *new_GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen *outer$) {
  GeogebraCommonEuclidianEuclidianPen_RecoSegment *self = [GeogebraCommonEuclidianEuclidianPen_RecoSegment alloc];
  GeogebraCommonEuclidianEuclidianPen_RecoSegment_initWithGeogebraCommonEuclidianEuclidianPen_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianPen_RecoSegment)

@implementation GeogebraCommonEuclidianEuclidianPen_Inertia

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$ {
  GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianPen:", "Inertia", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mass_", NULL, 0x0, "D", NULL, NULL,  },
    { "sx_", NULL, 0x0, "D", NULL, NULL,  },
    { "sxx_", NULL, 0x0, "D", NULL, NULL,  },
    { "sy_", NULL, 0x0, "D", NULL, NULL,  },
    { "sxy_", NULL, 0x0, "D", NULL, NULL,  },
    { "syy_", NULL, 0x0, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianPen_Inertia = { 2, "Inertia", "geogebra.common.euclidian", "EuclidianPen", 0x2, 1, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianPen_Inertia;
}

@end

void GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen_Inertia *self, GeogebraCommonEuclidianEuclidianPen *outer$) {
  NSObject_init(self);
  self->mass_ = 0;
  self->sx_ = 0;
  self->sxx_ = 0;
  self->sy_ = 0;
  self->sxy_ = 0;
  self->syy_ = 0;
}

GeogebraCommonEuclidianEuclidianPen_Inertia *new_GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(GeogebraCommonEuclidianEuclidianPen *outer$) {
  GeogebraCommonEuclidianEuclidianPen_Inertia *self = [GeogebraCommonEuclidianEuclidianPen_Inertia alloc];
  GeogebraCommonEuclidianEuclidianPen_Inertia_initWithGeogebraCommonEuclidianEuclidianPen_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianPen_Inertia)

@implementation GeogebraCommonEuclidianEuclidianPen_$1

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [super setObjColorWithGeogebraCommonAwtGColor:color];
  [this$0_ setPenColorWithGeogebraCommonAwtGColor:color];
}

- (void)setLineThicknessWithInt:(jint)th {
  [super setLineThicknessWithInt:th];
  [this$0_ setPenSizeWithInt:th];
}

- (void)setLineTypeWithInt:(jint)i {
  [super setLineTypeWithInt:i];
  [this$0_ setPenLineStyleWithInt:i];
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianPen:(GeogebraCommonEuclidianEuclidianPen *)outer$
                       withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0 {
  GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setObjColorWithGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianPen:withGeogebraCommonKernelConstruction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.EuclidianPen;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonEuclidianEuclidianPen", "initWithGeogebraCommonMainApp:withGeogebraCommonEuclidianEuclidianView:" };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianPen_$1 = { 2, "", "geogebra.common.euclidian", "EuclidianPen", 0x8008, 4, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonEuclidianEuclidianPen_$1;
}

@end

void GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(GeogebraCommonEuclidianEuclidianPen_$1 *self, GeogebraCommonEuclidianEuclidianPen *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonEuclidianEuclidianPen_$1_set_this$0_(self, outer$);
  GeogebraCommonKernelGeosGeoPolyLine_initWithGeogebraCommonKernelConstruction_(self, arg$0);
}

GeogebraCommonEuclidianEuclidianPen_$1 *new_GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(GeogebraCommonEuclidianEuclidianPen *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonEuclidianEuclidianPen_$1 *self = [GeogebraCommonEuclidianEuclidianPen_$1 alloc];
  GeogebraCommonEuclidianEuclidianPen_$1_initWithGeogebraCommonEuclidianEuclidianPen_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianPen_$1)
