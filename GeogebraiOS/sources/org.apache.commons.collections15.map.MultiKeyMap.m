//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/map/MultiKeyMap.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/MapIterator.h"
#include "org/apache/commons/collections15/keyvalue/MultiKey.h"
#include "org/apache/commons/collections15/map/AbstractHashedMap.h"
#include "org/apache/commons/collections15/map/HashedMap.h"
#include "org/apache/commons/collections15/map/MultiKeyMap.h"

#define OrgApacheCommonsCollections15MapMultiKeyMap_serialVersionUID -1788199231038721040LL

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapMultiKeyMap, serialVersionUID, jlong)

@implementation OrgApacheCommonsCollections15MapMultiKeyMap

+ (OrgApacheCommonsCollections15MapMultiKeyMap *)decorateWithOrgApacheCommonsCollections15MapAbstractHashedMap:(OrgApacheCommonsCollections15MapAbstractHashedMap *)map {
  return OrgApacheCommonsCollections15MapMultiKeyMap_decorateWithOrgApacheCommonsCollections15MapAbstractHashedMap_(map);
}

- (instancetype)init {
  OrgApacheCommonsCollections15MapMultiKeyMap_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsCollections15MapAbstractHashedMap:(OrgApacheCommonsCollections15MapAbstractHashedMap *)map {
  OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_(self, map);
  return self;
}

- (id)getWithNSObjectArray:(IOSObjectArray *)keys {
  jint hashCode = [self hash__WithNSObjectArray:keys];
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *entry_ = IOSObjectArray_Get(((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_))->data_, [map_ hashIndexWithInt:hashCode withInt:((IOSObjectArray *) nil_chk(map_->data_))->size_]);
  while (entry_ != nil) {
    if (((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_))->hashCode__ == hashCode && [self isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withNSObjectArray:keys]) {
      return [entry_ getValue];
    }
    entry_ = entry_->next_;
  }
  return nil;
}

- (jboolean)containsKeyWithNSObjectArray:(IOSObjectArray *)keys {
  jint hashCode = [self hash__WithNSObjectArray:keys];
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *entry_ = IOSObjectArray_Get(((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_))->data_, [map_ hashIndexWithInt:hashCode withInt:((IOSObjectArray *) nil_chk(map_->data_))->size_]);
  while (entry_ != nil) {
    if (((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_))->hashCode__ == hashCode && [self isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withNSObjectArray:keys]) {
      return YES;
    }
    entry_ = entry_->next_;
  }
  return NO;
}

- (id)putWithId:(id)key1
         withId:(id)key2
         withId:(id)value {
  return [self putMultiKeyWithId:value withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ key1, key2 } count:2 type:NSObject_class_()]];
}

- (id)putWithId:(id)key1
         withId:(id)key2
         withId:(id)key3
         withId:(id)value {
  return [self putMultiKeyWithId:value withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ key1, key2, key3 } count:3 type:NSObject_class_()]];
}

- (id)putWithId:(id)key1
         withId:(id)key2
         withId:(id)key3
         withId:(id)key4
         withId:(id)value {
  return [self putMultiKeyWithId:value withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ key1, key2, key3, key4 } count:4 type:NSObject_class_()]];
}

- (id)putWithId:(id)key1
         withId:(id)key2
         withId:(id)key3
         withId:(id)key4
         withId:(id)key5
         withId:(id)value {
  return [self putMultiKeyWithId:value withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ key1, key2, key3, key4, key5 } count:5 type:NSObject_class_()]];
}

- (id)putMultiKeyWithId:(id)value
      withNSObjectArray:(IOSObjectArray *)keys {
  jint hashCode = [self hash__WithNSObjectArray:keys];
  jint index = [map_ hashIndexWithInt:hashCode withInt:((IOSObjectArray *) nil_chk(((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_))->data_))->size_];
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *entry_ = IOSObjectArray_Get(map_->data_, index);
  while (entry_ != nil) {
    if (((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_))->hashCode__ == hashCode && [self isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withNSObjectArray:keys]) {
      id oldValue = [entry_ getValue];
      [map_ updateEntryWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withId:value];
      return oldValue;
    }
    entry_ = entry_->next_;
  }
  [map_ addMappingWithInt:index withInt:hashCode withId:[new_OrgApacheCommonsCollections15KeyvalueMultiKey_initWithNSObjectArray_(keys) autorelease] withId:value];
  return nil;
}

- (id)removeWithNSObjectArray:(IOSObjectArray *)keys {
  jint hashCode = [self hash__WithNSObjectArray:keys];
  jint index = [map_ hashIndexWithInt:hashCode withInt:((IOSObjectArray *) nil_chk(((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_))->data_))->size_];
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *entry_ = IOSObjectArray_Get(map_->data_, index);
  OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *previous = nil;
  while (entry_ != nil) {
    if (((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_))->hashCode__ == hashCode && [self isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withNSObjectArray:keys]) {
      id oldValue = [entry_ getValue];
      [map_ removeMappingWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:entry_ withInt:index withOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:previous];
      return oldValue;
    }
    previous = entry_;
    entry_ = entry_->next_;
  }
  return nil;
}

- (jint)hash__WithNSObjectArray:(IOSObjectArray *)keys {
  jint h = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(keys))->size_; i++) {
    id key = IOSObjectArray_Get(keys, i);
    if (key != nil) {
      h ^= ((jint) [key hash]);
    }
  }
  h += ~(LShift32(h, 9));
  h ^= (URShift32(h, 14));
  h += (LShift32(h, 4));
  h ^= (URShift32(h, 10));
  return h;
}

- (jboolean)isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:(OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *)entry_
                                                                    withNSObjectArray:(IOSObjectArray *)keys {
  OrgApacheCommonsCollections15KeyvalueMultiKey *multi = [((OrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry *) nil_chk(entry_)) getKey];
  if ([((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(multi)) size] != ((IOSObjectArray *) nil_chk(keys))->size_) {
    return NO;
  }
  else {
    for (jint i = 0; i < keys->size_; i++) {
      id key = IOSObjectArray_Get(keys, i);
      if ((key == nil ? [multi getKeyWithInt:i] != nil : ![key isEqual:[multi getKeyWithInt:i]])) {
        return NO;
      }
    }
  }
  return YES;
}

- (jboolean)removeAllWithId:(id)key1 {
  jboolean modified = NO;
  id<OrgApacheCommonsCollections15MapIterator> it = [self mapIterator];
  while ([((id<OrgApacheCommonsCollections15MapIterator>) nil_chk(it)) hasNext]) {
    OrgApacheCommonsCollections15KeyvalueMultiKey *multi = (OrgApacheCommonsCollections15KeyvalueMultiKey *) check_class_cast([it next], [OrgApacheCommonsCollections15KeyvalueMultiKey class]);
    if ([((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(multi)) size] >= 1 && (key1 == nil ? [multi getKeyWithInt:0] == nil : [key1 isEqual:[multi getKeyWithInt:0]])) {
      [it remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)removeAllWithId:(id)key1
                     withId:(id)key2 {
  jboolean modified = NO;
  id<OrgApacheCommonsCollections15MapIterator> it = [self mapIterator];
  while ([((id<OrgApacheCommonsCollections15MapIterator>) nil_chk(it)) hasNext]) {
    OrgApacheCommonsCollections15KeyvalueMultiKey *multi = (OrgApacheCommonsCollections15KeyvalueMultiKey *) check_class_cast([it next], [OrgApacheCommonsCollections15KeyvalueMultiKey class]);
    if ([((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(multi)) size] >= 2 && (key1 == nil ? [multi getKeyWithInt:0] == nil : [key1 isEqual:[multi getKeyWithInt:0]]) && (key2 == nil ? [multi getKeyWithInt:1] == nil : [key2 isEqual:[multi getKeyWithInt:1]])) {
      [it remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)removeAllWithId:(id)key1
                     withId:(id)key2
                     withId:(id)key3 {
  jboolean modified = NO;
  id<OrgApacheCommonsCollections15MapIterator> it = [self mapIterator];
  while ([((id<OrgApacheCommonsCollections15MapIterator>) nil_chk(it)) hasNext]) {
    OrgApacheCommonsCollections15KeyvalueMultiKey *multi = (OrgApacheCommonsCollections15KeyvalueMultiKey *) check_class_cast([it next], [OrgApacheCommonsCollections15KeyvalueMultiKey class]);
    if ([((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(multi)) size] >= 3 && (key1 == nil ? [multi getKeyWithInt:0] == nil : [key1 isEqual:[multi getKeyWithInt:0]]) && (key2 == nil ? [multi getKeyWithInt:1] == nil : [key2 isEqual:[multi getKeyWithInt:1]]) && (key3 == nil ? [multi getKeyWithInt:2] == nil : [key3 isEqual:[multi getKeyWithInt:2]])) {
      [it remove];
      modified = YES;
    }
  }
  return modified;
}

- (jboolean)removeAllWithId:(id)key1
                     withId:(id)key2
                     withId:(id)key3
                     withId:(id)key4 {
  jboolean modified = NO;
  id<OrgApacheCommonsCollections15MapIterator> it = [self mapIterator];
  while ([((id<OrgApacheCommonsCollections15MapIterator>) nil_chk(it)) hasNext]) {
    OrgApacheCommonsCollections15KeyvalueMultiKey *multi = (OrgApacheCommonsCollections15KeyvalueMultiKey *) check_class_cast([it next], [OrgApacheCommonsCollections15KeyvalueMultiKey class]);
    if ([((OrgApacheCommonsCollections15KeyvalueMultiKey *) nil_chk(multi)) size] >= 4 && (key1 == nil ? [multi getKeyWithInt:0] == nil : [key1 isEqual:[multi getKeyWithInt:0]]) && (key2 == nil ? [multi getKeyWithInt:1] == nil : [key2 isEqual:[multi getKeyWithInt:1]]) && (key3 == nil ? [multi getKeyWithInt:2] == nil : [key3 isEqual:[multi getKeyWithInt:2]]) && (key4 == nil ? [multi getKeyWithInt:3] == nil : [key4 isEqual:[multi getKeyWithInt:3]])) {
      [it remove];
      modified = YES;
    }
  }
  return modified;
}

- (void)checkKeyWithId:(id)key {
  if (key == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_(@"Key must not be null") autorelease];
  }
}

- (id)clone {
  return [new_OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_((OrgApacheCommonsCollections15MapAbstractHashedMap *) check_class_cast([((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) clone], [OrgApacheCommonsCollections15MapAbstractHashedMap class])) autorelease];
}

- (id)putWithId:(OrgApacheCommonsCollections15KeyvalueMultiKey *)key
         withId:(id)value {
  [self checkKeyWithId:key];
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) putWithId:key withId:value];
}

- (void)putAllWithJavaUtilMap:(id<JavaUtilMap>)mapToCopy {
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(mapToCopy)) keySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id key = [it next];
    [self checkKeyWithId:key];
  }
  [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) putAllWithJavaUtilMap:mapToCopy];
}

- (id<OrgApacheCommonsCollections15MapIterator>)mapIterator {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) mapIterator];
}

- (jint)size {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) size];
}

- (jboolean)isEmpty {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) isEmpty];
}

- (jboolean)containsKeyWithId:(id)key {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) containsKeyWithId:key];
}

- (jboolean)containsValueWithId:(id)value {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) containsValueWithId:value];
}

- (id)getWithId:(id)key {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) getWithId:key];
}

- (id)removeWithId:(id)key {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) removeWithId:key];
}

- (void)clear {
  [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) clear];
}

- (id<JavaUtilSet>)keySet {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) keySet];
}

- (id<JavaUtilCollection>)values {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) values];
}

- (id<JavaUtilSet>)entrySet {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) entrySet];
}

- (jboolean)isEqual:(id)obj {
  if (obj == self) {
    return YES;
  }
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) isEqual:obj];
}

- (NSUInteger)hash {
  return ((jint) [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) hash]);
}

- (NSString *)description {
  return [((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map_)) description];
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "decorateWithOrgApacheCommonsCollections15MapAbstractHashedMap:", "decorate", "Lorg.apache.commons.collections15.map.MultiKeyMap;", 0x9, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Lorg/apache/commons/collections15/map/AbstractHashedMap<Lorg/apache/commons/collections15/keyvalue/MultiKey<TK;>;TV;>;)Lorg/apache/commons/collections15/map/MultiKeyMap<TK;TV;>;" },
    { "init", "MultiKeyMap", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsCollections15MapAbstractHashedMap:", "MultiKeyMap", NULL, 0x4, NULL, NULL },
    { "getWithNSObjectArray:", "get", "TV;", 0x81, NULL, "([TK;)TV;" },
    { "containsKeyWithNSObjectArray:", "containsKey", "Z", 0x81, NULL, NULL },
    { "putWithId:withId:withId:", "put", "TV;", 0x1, NULL, "(TK;TK;TV;)TV;" },
    { "putWithId:withId:withId:withId:", "put", "TV;", 0x1, NULL, "(TK;TK;TK;TV;)TV;" },
    { "putWithId:withId:withId:withId:withId:", "put", "TV;", 0x1, NULL, "(TK;TK;TK;TK;TV;)TV;" },
    { "putWithId:withId:withId:withId:withId:withId:", "put", "TV;", 0x1, NULL, "(TK;TK;TK;TK;TK;TV;)TV;" },
    { "putMultiKeyWithId:withNSObjectArray:", "putMultiKey", "TV;", 0x81, NULL, "(TV;[TK;)TV;" },
    { "removeWithNSObjectArray:", "remove", "Ljava.lang.Object;", 0x81, NULL, NULL },
    { "hash__WithNSObjectArray:", "hash", "I", 0x84, NULL, NULL },
    { "isEqualKeyWithOrgApacheCommonsCollections15MapAbstractHashedMap_HashEntry:withNSObjectArray:", "isEqualKey", "Z", 0x84, NULL, NULL },
    { "removeAllWithId:", "removeAll", "Z", 0x1, NULL, NULL },
    { "removeAllWithId:withId:", "removeAll", "Z", 0x1, NULL, NULL },
    { "removeAllWithId:withId:withId:", "removeAll", "Z", 0x1, NULL, NULL },
    { "removeAllWithId:withId:withId:withId:", "removeAll", "Z", 0x1, NULL, NULL },
    { "checkKeyWithId:", "checkKey", "V", 0x4, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TV;", 0x1, NULL, "(Lorg/apache/commons/collections15/keyvalue/MultiKey<TK;>;TV;)TV;" },
    { "putAllWithJavaUtilMap:", "putAll", "V", 0x1, NULL, NULL },
    { "mapIterator", NULL, "Lorg.apache.commons.collections15.MapIterator;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "containsKeyWithId:", "containsKey", "Z", 0x1, NULL, NULL },
    { "containsValueWithId:", "containsValue", "Z", 0x1, NULL, NULL },
    { "getWithId:", "get", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "removeWithId:", "remove", "TV;", 0x1, NULL, "(Ljava/lang/Object;)TV;" },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "values", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "entrySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsCollections15MapMultiKeyMap_serialVersionUID },
    { "map_", NULL, 0x14, "Lorg.apache.commons.collections15.map.AbstractHashedMap;", NULL, "Lorg/apache/commons/collections15/map/AbstractHashedMap<Lorg/apache/commons/collections15/keyvalue/MultiKey<TK;>;TV;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15MapMultiKeyMap = { 2, "MultiKeyMap", "org.apache.commons.collections15.map", NULL, 0x1, 35, methods, 2, fields, 0, NULL, 0, NULL, NULL, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;Lorg/apache/commons/collections15/IterableMap<Lorg/apache/commons/collections15/keyvalue/MultiKey<TK;>;TV;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsCollections15MapMultiKeyMap;
}

@end

OrgApacheCommonsCollections15MapMultiKeyMap *OrgApacheCommonsCollections15MapMultiKeyMap_decorateWithOrgApacheCommonsCollections15MapAbstractHashedMap_(OrgApacheCommonsCollections15MapAbstractHashedMap *map) {
  OrgApacheCommonsCollections15MapMultiKeyMap_initialize();
  if (map == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Map must not be null") autorelease];
  }
  if ([((OrgApacheCommonsCollections15MapAbstractHashedMap *) nil_chk(map)) size] > 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Map must be empty") autorelease];
  }
  return [new_OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_(map) autorelease];
}

void OrgApacheCommonsCollections15MapMultiKeyMap_init(OrgApacheCommonsCollections15MapMultiKeyMap *self) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MapMultiKeyMap_setAndConsume_map_(self, new_OrgApacheCommonsCollections15MapHashedMap_init());
}

OrgApacheCommonsCollections15MapMultiKeyMap *new_OrgApacheCommonsCollections15MapMultiKeyMap_init() {
  OrgApacheCommonsCollections15MapMultiKeyMap *self = [OrgApacheCommonsCollections15MapMultiKeyMap alloc];
  OrgApacheCommonsCollections15MapMultiKeyMap_init(self);
  return self;
}

void OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_(OrgApacheCommonsCollections15MapMultiKeyMap *self, OrgApacheCommonsCollections15MapAbstractHashedMap *map) {
  NSObject_init(self);
  OrgApacheCommonsCollections15MapMultiKeyMap_set_map_(self, map);
}

OrgApacheCommonsCollections15MapMultiKeyMap *new_OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_(OrgApacheCommonsCollections15MapAbstractHashedMap *map) {
  OrgApacheCommonsCollections15MapMultiKeyMap *self = [OrgApacheCommonsCollections15MapMultiKeyMap alloc];
  OrgApacheCommonsCollections15MapMultiKeyMap_initWithOrgApacheCommonsCollections15MapAbstractHashedMap_(self, map);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15MapMultiKeyMap)
