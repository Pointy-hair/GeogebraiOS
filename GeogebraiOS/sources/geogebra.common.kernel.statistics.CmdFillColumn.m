//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/CmdFillColumn.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/CmdFillColumn.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonKernelStatisticsCmdFillColumn

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelStatisticsCmdFillColumn_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoNumeric])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoList]))) {
      jint col = -1 + J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      if (col < 0 || col > GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_()) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoList class]);
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ list } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] == 0) return ret;
      for (jint row = 0; row < [list size]; row++) {
        GeogebraCommonKernelGeosGeoElement *cellGeo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:row])) copy__];
        @try {
          [((GeogebraCommonKernelGeosGeoElementSpreadsheet *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getGeoElementSpreadsheet])) setSpreadsheetCellWithGeogebraCommonMainApp:app_ withInt:row withInt:col withGeogebraCommonKernelGeosGeoElement:cellGeo];
        }
        @catch (JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
        }
      }
      [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
      return ret;
    }
    else if (!IOSBooleanArray_Get(ok, 0)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdFillColumn", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsCmdFillColumn = { 2, "CmdFillColumn", "geogebra.common.kernel.statistics", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsCmdFillColumn;
}

@end

void GeogebraCommonKernelStatisticsCmdFillColumn_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelStatisticsCmdFillColumn *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelStatisticsCmdFillColumn *new_GeogebraCommonKernelStatisticsCmdFillColumn_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelStatisticsCmdFillColumn *self = [GeogebraCommonKernelStatisticsCmdFillColumn alloc];
  GeogebraCommonKernelStatisticsCmdFillColumn_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsCmdFillColumn)
