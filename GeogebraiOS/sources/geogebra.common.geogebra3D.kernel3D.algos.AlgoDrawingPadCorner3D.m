//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoDrawingPadCorner3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoDrawingPadCorner3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoDrawingPadCorner.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)number
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)evNum {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number, evNum);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

+ (jboolean)is3DWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)nv {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_is3DWithGeogebraCommonKernelArithmeticNumberValue_(nv);
}

- (void)compute {
  GeogebraCommonMainApp *app = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getApplication];
  if (evNum_ != nil && GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_is3DWithGeogebraCommonKernelArithmeticNumberValue_(evNum_)) {
    if (![((GeogebraCommonMainApp *) nil_chk(app)) hasEuclidianView3D] || ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) isGeoElement3D]) {
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setUndefined];
      return;
    }
    id<GeogebraCommonEuclidian3DEuclidianView3DInterface> ev = [app getEuclidianView3D];
    {
      GeogebraCommonKernelMatrixCoords *eye;
      switch (J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) getDouble])) {
        case 1:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmin] withDouble:[ev getYmin] withDouble:[ev getZmin] withDouble:1.0];
        break;
        case 2:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmax] withDouble:[ev getYmin] withDouble:[ev getZmin] withDouble:1.0];
        break;
        case 3:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmax] withDouble:[ev getYmax] withDouble:[ev getZmin] withDouble:1.0];
        break;
        case 4:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmin] withDouble:[ev getYmax] withDouble:[ev getZmin] withDouble:1.0];
        break;
        case 5:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmin] withDouble:[ev getYmin] withDouble:[ev getZmax] withDouble:1.0];
        break;
        case 6:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmax] withDouble:[ev getYmin] withDouble:[ev getZmax] withDouble:1.0];
        break;
        case 7:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmax] withDouble:[ev getYmax] withDouble:[ev getZmax] withDouble:1.0];
        break;
        case 8:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getXmin] withDouble:[ev getYmax] withDouble:[ev getZmax] withDouble:1.0];
        break;
        case 9:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getWidth] withDouble:[ev getHeight] withDouble:1.0];
        break;
        case 10:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[app getWidth] withDouble:[app getHeight] withDouble:1.0];
        break;
        case 11:
        eye = [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev)) getEyePosition];
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(eye)) getX] withDouble:[eye getY] withDouble:[eye getZ] withDouble:1.0];
        break;
        default:
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) setUndefined];
        break;
      }
    }
  }
  else {
    [super compute];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(corner_)) isGeoElement3D] && ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isSaving] || [kernel_ isGettingUndo] || [((GeogebraCommonKernelConstruction *) nil_chk([self getConstruction])) isGettingXMLForReplace])) {
    return GeogebraCommonKernelCommandsCommandsEnum_get_CornerThreeD();
  }
  return [super getClassName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoDrawingPadCorner3D", NULL, 0x1, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "is3DWithGeogebraCommonKernelArithmeticNumberValue:", "is3D", "Z", 0x19, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D = { 2, "AlgoDrawingPadCorner3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, id<GeogebraCommonKernelArithmeticNumberValue> evNum) {
  GeogebraCommonKernelAlgosAlgoDrawingPadCorner_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDouble_(self, cons, label, number, evNum, 9);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, id<GeogebraCommonKernelArithmeticNumberValue> evNum) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, number, evNum);
  return self;
}

jboolean GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_is3DWithGeogebraCommonKernelArithmeticNumberValue_(id<GeogebraCommonKernelArithmeticNumberValue> nv) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D_initialize();
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble], -1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoDrawingPadCorner3D)
