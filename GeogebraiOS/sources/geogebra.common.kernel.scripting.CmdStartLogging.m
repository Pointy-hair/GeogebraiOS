//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdStartLogging.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdStartLogging.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/UDPLogger.h"

@implementation GeogebraCommonKernelScriptingCmdStartLogging

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdStartLogging_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
  jboolean success = NO;
  id<GeogebraCommonPluginUDPLogger> logger = [((GeogebraCommonMainApp *) nil_chk(app_)) getUDPLogger];
  if (logger != nil) {
    [logger stopLogging];
    GeogebraCommonKernelGeosGeoElement *text;
    GeogebraCommonKernelGeosGeoElement *number = nil;
    GeogebraCommonKernelGeosGeoElement *limit = nil;
    for (jint i = 0; i <= n - 2; i += 2) {
      if ([(text = IOSObjectArray_Get(nil_chk(arg_), i)) isKindOfClass:[GeogebraCommonKernelGeosGeoText class]] && [(number = IOSObjectArray_Get(arg_, i + 1)) isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
        [logger registerGeoWithNSString:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(text, [GeogebraCommonKernelGeosGeoText class])))) getTextString] withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(number, [GeogebraCommonKernelGeosGeoNumeric class])];
      }
      else if ([(text = IOSObjectArray_Get(arg_, i)) isKindOfClass:[GeogebraCommonKernelGeosGeoText class]] && [(number = IOSObjectArray_Get(arg_, i + 1)) isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) {
        if ((i < n - 2) && [(limit = IOSObjectArray_Get(arg_, i + 2)) isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
          [logger registerGeoListWithNSString:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(text, [GeogebraCommonKernelGeosGeoText class])))) getTextString] withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(number, [GeogebraCommonKernelGeosGeoList class]) withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(limit, [GeogebraCommonKernelGeosGeoNumeric class])))) getValue]];
          i++;
        }
        else {
          [logger registerGeoListWithNSString:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(text, [GeogebraCommonKernelGeosGeoText class])))) getTextString] withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(number, [GeogebraCommonKernelGeosGeoList class])];
        }
      }
      else {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:([text isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) ? number : text];
      }
    }
    success = [logger startLogging];
  }
  if (!success) {
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getErrorWithNSString:@"NoLogging"]) autorelease];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdStartLogging", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdStartLogging = { 2, "CmdStartLogging", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdStartLogging;
}

@end

void GeogebraCommonKernelScriptingCmdStartLogging_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdStartLogging *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdStartLogging *new_GeogebraCommonKernelScriptingCmdStartLogging_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdStartLogging *self = [GeogebraCommonKernelScriptingCmdStartLogging alloc];
  GeogebraCommonKernelScriptingCmdStartLogging_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdStartLogging)
