//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleElement3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoAngleVectorND.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D () {
 @public
  GeogebraCommonKernelMatrixCoords *vn_, *v2_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D, vn_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D, v2_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)vec {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, vec);
  return self;
}

- (GeogebraCommonKernelGeosGeoAngle *)newGeoAngleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelGeosGeoAngle *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [ret setDrawableWithBoolean:YES];
  return ret;
}

- (GeogebraCommonKernelMatrixCoords *)getVectorCoords {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setOrigin {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D_set_v2_(self, [self getVectorCoords]);
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(v2_)) calcNorm];
  jdouble l2 = [v2_ getNorm];
  jdouble c = [v2_ getX] / l2;
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_acosWithDouble_(c)];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D_set_vn_(self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_forceNormalVectorWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoords_get_VX_(), v2_));
  [self setOrigin];
}

- (GeogebraCommonKernelMatrixCoords *)getVn {
  return vn_;
}

- (jboolean)getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk([self getOrigin])) isDefined]) {
    return NO;
  }
  IOSObjectArray_Set(nil_chk(drawCoords), 0, [self getOrigin]);
  IOSObjectArray_Set(drawCoords, 1, GeogebraCommonKernelMatrixCoords_get_VX_());
  IOSObjectArray_Set(drawCoords, 2, v2_);
  return YES;
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(vec_)) isGeoVector]) {
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk([self getOrigin])) isDefined]) {
      return NO;
    }
    if (![((GeogebraCommonEuclidianDrawDrawAngle *) nil_chk(drawable)) inViewWithGeogebraCommonKernelMatrixCoords:[self getOrigin]]) {
      return NO;
    }
  }
  if (![((GeogebraCommonEuclidianDrawDrawAngle *) nil_chk(drawable)) inViewWithGeogebraCommonKernelMatrixCoords:v2_]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = IOSDoubleArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getOrigin])) get]), 0);
  *IOSDoubleArray_GetRef(m, 1) = IOSDoubleArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getOrigin])) get]), 1);
  *IOSDoubleArray_GetRef(nil_chk(firstVec), 0) = 1;
  *IOSDoubleArray_GetRef(firstVec, 1) = 0;
  return YES;
}

- (void)dealloc {
  RELEASE_(vn_);
  RELEASE_(v2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoAngleElement3D", NULL, 0x1, NULL, NULL },
    { "newGeoAngleWithGeogebraCommonKernelConstruction:", "newGeoAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x14, NULL, NULL },
    { "getVectorCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "setOrigin", NULL, "V", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getVn", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vn_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "v2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D = { 2, "AlgoAngleElement3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *vec) {
  GeogebraCommonKernelAlgosAlgoAngleVectorND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, vec);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D)
