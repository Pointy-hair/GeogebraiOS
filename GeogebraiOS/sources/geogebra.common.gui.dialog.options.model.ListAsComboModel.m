//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ListAsComboModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/BooleanOptionModel.h"
#include "geogebra/common/gui/dialog/options/model/ListAsComboModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonGuiDialogOptionsModelListAsComboModel () {
 @public
  GeogebraCommonMainApp *app_;
  id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener> listener_ListAsComboModel_;
}

- (GeogebraCommonKernelGeosGeoList *)getGeoListAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelListAsComboModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelListAsComboModel, listener_ListAsComboModel_, id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener>)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoList *GeogebraCommonGuiDialogOptionsModelListAsComboModel_getGeoListAtWithInt_(GeogebraCommonGuiDialogOptionsModelListAsComboModel *self, jint index);

@interface GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelListAsComboModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener:(id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener>)listener {
  GeogebraCommonGuiDialogOptionsModelListAsComboModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener_(self, app, listener);
  return self;
}

- (GeogebraCommonKernelGeosGeoList *)getGeoListAtWithInt:(jint)index {
  return GeogebraCommonGuiDialogOptionsModelListAsComboModel_getGeoListAtWithInt_(self, index);
}

- (void)applyChangesWithBoolean:(jboolean)value {
  [super applyChangesWithBoolean:value];
  [((GeogebraCommonMainApp *) nil_chk(app_)) refreshViews];
}

- (jboolean)isValidAtWithInt:(jint)index {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) isGeoList];
}

- (jboolean)getValueAtWithInt:(jint)index {
  return [((GeogebraCommonKernelGeosGeoList *) nil_chk(GeogebraCommonGuiDialogOptionsModelListAsComboModel_getGeoListAtWithInt_(self, 0))) drawAsComboBox];
}

- (void)applyWithInt:(jint)index
         withBoolean:(jboolean)value {
  GeogebraCommonKernelGeosGeoList *geo = GeogebraCommonGuiDialogOptionsModelListAsComboModel_getGeoListAtWithInt_(self, index);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(geo)) setDrawAsComboBoxWithBoolean:value];
  if (value) {
    [geo setEuclidianVisibleWithBoolean:YES];
  }
  [((id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener>) nil_chk(listener_ListAsComboModel_)) drawListAsComboBoxWithGeogebraCommonKernelGeosGeoList:geo withBoolean:value];
  [geo updateRepaint];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(listener_ListAsComboModel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener:", "ListAsComboModel", NULL, 0x1, NULL, NULL },
    { "getGeoListAtWithInt:", "getGeoListAt", "Lgeogebra.common.kernel.geos.GeoList;", 0x2, NULL, NULL },
    { "applyChangesWithBoolean:", "applyChanges", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "Z", 0x1, NULL, NULL },
    { "applyWithInt:withBoolean:", "apply", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "listener_ListAsComboModel_", "listener", 0x2, "Lgeogebra.common.gui.dialog.options.model.ListAsComboModel$IListAsComboListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.ListAsComboModel$IListAsComboListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelListAsComboModel = { 2, "ListAsComboModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelListAsComboModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelListAsComboModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener_(GeogebraCommonGuiDialogOptionsModelListAsComboModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener> listener) {
  GeogebraCommonGuiDialogOptionsModelBooleanOptionModel_initWithGeogebraCommonGuiDialogOptionsModelBooleanOptionModel_IBooleanOptionListener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelListAsComboModel_set_app_(self, app);
  GeogebraCommonGuiDialogOptionsModelListAsComboModel_set_listener_ListAsComboModel_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelListAsComboModel *new_GeogebraCommonGuiDialogOptionsModelListAsComboModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener> listener) {
  GeogebraCommonGuiDialogOptionsModelListAsComboModel *self = [GeogebraCommonGuiDialogOptionsModelListAsComboModel alloc];
  GeogebraCommonGuiDialogOptionsModelListAsComboModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener_(self, app, listener);
  return self;
}

GeogebraCommonKernelGeosGeoList *GeogebraCommonGuiDialogOptionsModelListAsComboModel_getGeoListAtWithInt_(GeogebraCommonGuiDialogOptionsModelListAsComboModel *self, jint index) {
  return (GeogebraCommonKernelGeosGeoList *) check_class_cast([self getObjectAtWithInt:index], [GeogebraCommonKernelGeosGeoList class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelListAsComboModel)

@implementation GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "drawListAsComboBoxWithGeogebraCommonKernelGeosGeoList:withBoolean:", "drawListAsComboBox", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener = { 2, "IListAsComboListener", "geogebra.common.gui.dialog.options.model", "ListAsComboModel", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelListAsComboModel_IListAsComboListener)
