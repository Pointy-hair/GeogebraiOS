//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoJoinPointsRay.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsRay.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoJoinPointsRay () {
 @public
  GeogebraCommonKernelGeosGeoPoint *P_, *Q_;
  GeogebraCommonKernelGeosGeoRay *ray_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsRay, P_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsRay, Q_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsRay, ray_, GeogebraCommonKernelGeosGeoRay *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoJoinPointsRay_addIncidence(GeogebraCommonKernelAlgosAlgoJoinPointsRay *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoJoinPointsRay_compute(GeogebraCommonKernelAlgosAlgoJoinPointsRay *self);

@implementation GeogebraCommonKernelAlgosAlgoJoinPointsRay

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

- (void)addIncidence {
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_addIncidence(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Ray();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_RAY;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, P_);
  IOSObjectArray_Set(input_, 1, Q_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:ray_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoRay *)getRay {
  return ray_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return Q_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RayThroughAB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnJoinPointsRayWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(ray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoJoinPointsRay", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRay", NULL, "Lgeogebra.common.kernel.geos.GeoRay;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "ray_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoRay;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoJoinPointsRay = { 2, "AlgoJoinPointsRay", "geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoJoinPointsRay;
}

@end

void GeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoJoinPointsRay *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_set_Q_(self, Q);
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_setAndConsume_ray_(self, new_GeogebraCommonKernelGeosGeoRay_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_(cons, P));
  [self->ray_ setEndPointWithGeogebraCommonKernelGeosGeoPoint:Q];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_compute(self);
  [self->ray_ setLabelWithNSString:label];
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_addIncidence(self);
}

GeogebraCommonKernelAlgosAlgoJoinPointsRay *new_GeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoJoinPointsRay *self = [GeogebraCommonKernelAlgosAlgoJoinPointsRay alloc];
  GeogebraCommonKernelAlgosAlgoJoinPointsRay_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

void GeogebraCommonKernelAlgosAlgoJoinPointsRay_addIncidence(GeogebraCommonKernelAlgosAlgoJoinPointsRay *self) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->ray_ withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Q_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->ray_ withBoolean:YES];
}

void GeogebraCommonKernelAlgosAlgoJoinPointsRay_compute(GeogebraCommonKernelAlgosAlgoJoinPointsRay *self) {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(self->P_, self->Q_, self->ray_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoJoinPointsRay)
