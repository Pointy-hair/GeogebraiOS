//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSequence.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSequence.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoSequence () {
 @public
  GeogebraCommonKernelGeosGeoElement *expression_;
  GeogebraCommonKernelGeosGeoNumeric *var_;
  id<GeogebraCommonKernelArithmeticNumberValue> var_from_, var_to_, var_step_;
  GeogebraCommonKernelGeosGeoElement *var_from_geo_, *var_to_geo_, *var_step_geo_;
  GeogebraCommonKernelGeosGeoList *list_;
  jboolean isSimple_;
  jdouble last_from_, last_to_, last_step_;
  jboolean expIsFunctionOrCurve_, isEmpty_;
  GeogebraCommonKernelAlgosAlgoElement *expressionParentAlgo_;
  jboolean updateRunning_;
}

- (void)computeSimple;

- (void)createNewListWithDouble:(jdouble)from
                     withDouble:(jdouble)to
                     withDouble:(jdouble)step;

- (void)addElementWithInt:(jint)i;

- (GeogebraCommonKernelGeosGeoElement *)createNewListElement;

- (void)updateListItemsWithDouble:(jdouble)from
                       withDouble:(jdouble)to
                       withDouble:(jdouble)step;

- (void)updateLocalVarWithDouble:(jdouble)varVal;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, expression_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_from_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_to_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_step_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_from_geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_to_geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, var_step_geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSequence, expressionParentAlgo_, GeogebraCommonKernelAlgosAlgoElement *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_compute(GeogebraCommonKernelAlgosAlgoSequence *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_computeSimple(GeogebraCommonKernelAlgosAlgoSequence *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_createNewListWithDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble from, jdouble to, jdouble step);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_addElementWithInt_(GeogebraCommonKernelAlgosAlgoSequence *self, jint i);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoSequence_createNewListElement(GeogebraCommonKernelAlgosAlgoSequence *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_updateListItemsWithDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble from, jdouble to, jdouble step);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSequence_updateLocalVarWithDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble varVal);

@implementation GeogebraCommonKernelAlgosAlgoSequence

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)expression
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)var
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_from
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_to
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_step {
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, expression, var, var_from, var_to, var_step);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)expression
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)var
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_from
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_to
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)var_step {
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, expression, var, var_from, var_to, var_step);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)upTo {
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, upTo);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Sequence();
}

- (void)setInputOutput {
  if (isSimple_) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, var_to_geo_);
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(expression_)) getXMLtypeString]];
    jint len = var_step_ == nil ? 4 : 5;
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:len type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, expression_);
    IOSObjectArray_Set(input_, 1, var_);
    IOSObjectArray_Set(input_, 2, var_from_geo_);
    IOSObjectArray_Set(input_, 3, var_to_geo_);
    if (len == 5) IOSObjectArray_Set(input_, 4, var_step_geo_);
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (IOSObjectArray *)getInputForUpdateSetPropagation {
  if (isSimple_) return input_;
  IOSObjectArray *realInput = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(input_))->size_ - 1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray_Set(realInput, 0, expression_);
  IOSObjectArray_Set(realInput, 1, var_from_geo_);
  IOSObjectArray_Set(realInput, 2, var_to_geo_);
  if (input_->size_ == 5) {
    IOSObjectArray_Set(realInput, 3, var_step_geo_);
  }
  return realInput;
}

- (GeogebraCommonKernelGeosGeoList *)getList {
  return list_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSequence_compute(self);
}

- (void)computeSimple {
  GeogebraCommonKernelAlgosAlgoSequence_computeSimple(self);
}

- (void)createNewListWithDouble:(jdouble)from
                     withDouble:(jdouble)to
                     withDouble:(jdouble)step {
  GeogebraCommonKernelAlgosAlgoSequence_createNewListWithDouble_withDouble_withDouble_(self, from, to, step);
}

- (void)addElementWithInt:(jint)i {
  GeogebraCommonKernelAlgosAlgoSequence_addElementWithInt_(self, i);
}

- (GeogebraCommonKernelGeosGeoElement *)createNewListElement {
  return GeogebraCommonKernelAlgosAlgoSequence_createNewListElement(self);
}

- (void)updateListItemsWithDouble:(jdouble)from
                       withDouble:(jdouble)to
                       withDouble:(jdouble)step {
  GeogebraCommonKernelAlgosAlgoSequence_updateListItemsWithDouble_withDouble_withDouble_(self, from, to, step);
}

- (void)updateLocalVarWithDouble:(jdouble)varVal {
  GeogebraCommonKernelAlgosAlgoSequence_updateLocalVarWithDouble_(self, varVal);
}

- (void)dealloc {
  RELEASE_(expression_);
  RELEASE_(var_);
  RELEASE_(var_from_);
  RELEASE_(var_to_);
  RELEASE_(var_step_);
  RELEASE_(var_from_geo_);
  RELEASE_(var_to_geo_);
  RELEASE_(var_step_geo_);
  RELEASE_(list_);
  RELEASE_(expressionParentAlgo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoSequence", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoSequence", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoSequence", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getInputForUpdateSetPropagation", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "computeSimple", NULL, "V", 0x2, NULL, NULL },
    { "createNewListWithDouble:withDouble:withDouble:", "createNewList", "V", 0x2, NULL, NULL },
    { "addElementWithInt:", "addElement", "V", 0x2, NULL, NULL },
    { "createNewListElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "updateListItemsWithDouble:withDouble:withDouble:", "updateListItems", "V", 0x2, NULL, NULL },
    { "updateLocalVarWithDouble:", "updateLocalVar", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "expression_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "var_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "var_from_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "var_to_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "var_step_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "var_from_geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "var_to_geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "var_step_geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isSimple_", NULL, 0x2, "Z", NULL, NULL,  },
    { "last_from_", NULL, 0x2, "D", NULL, NULL,  },
    { "last_to_", NULL, 0x2, "D", NULL, NULL,  },
    { "last_step_", NULL, 0x2, "D", NULL, NULL,  },
    { "expIsFunctionOrCurve_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isEmpty_", NULL, 0x2, "Z", NULL, NULL,  },
    { "expressionParentAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement;", NULL, NULL,  },
    { "updateRunning_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSequence = { 2, "AlgoSequence", "geogebra.common.kernel.algos", NULL, 0x1, 14, methods, 17, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSequence;
}

@end

void GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoSequence *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *expression, GeogebraCommonKernelGeosGeoNumeric *var, id<GeogebraCommonKernelArithmeticNumberValue> var_from, id<GeogebraCommonKernelArithmeticNumberValue> var_to, id<GeogebraCommonKernelArithmeticNumberValue> var_step) {
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, expression, var, var_from, var_to, var_step);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoSequence *new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *expression, GeogebraCommonKernelGeosGeoNumeric *var, id<GeogebraCommonKernelArithmeticNumberValue> var_from, id<GeogebraCommonKernelArithmeticNumberValue> var_to, id<GeogebraCommonKernelArithmeticNumberValue> var_step) {
  GeogebraCommonKernelAlgosAlgoSequence *self = [GeogebraCommonKernelAlgosAlgoSequence alloc];
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, expression, var, var_from, var_to, var_step);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoSequence *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *expression, GeogebraCommonKernelGeosGeoNumeric *var, id<GeogebraCommonKernelArithmeticNumberValue> var_from, id<GeogebraCommonKernelArithmeticNumberValue> var_to, id<GeogebraCommonKernelArithmeticNumberValue> var_step) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->last_from_ = JavaLangDouble_MIN_VALUE;
  self->last_to_ = JavaLangDouble_MIN_VALUE;
  self->last_step_ = JavaLangDouble_MIN_VALUE;
  self->updateRunning_ = NO;
  GeogebraCommonKernelAlgosAlgoSequence_set_expression_(self, expression);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_(self, var);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_from_(self, var_from);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_from_geo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(var_from)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_to_(self, var_to);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_to_geo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(var_to)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_step_(self, var_step);
  if (var_step != nil) GeogebraCommonKernelAlgosAlgoSequence_set_var_step_geo_(self, [var_step toGeoElement]);
  GeogebraCommonKernelAlgosAlgoSequence_set_expressionParentAlgo_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(expression)) getParentAlgorithm]);
  self->expIsFunctionOrCurve_ = [GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:expression];
  self->isSimple_ = NO;
  GeogebraCommonKernelAlgosAlgoSequence_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSequence_compute(self);
}

GeogebraCommonKernelAlgosAlgoSequence *new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *expression, GeogebraCommonKernelGeosGeoNumeric *var, id<GeogebraCommonKernelArithmeticNumberValue> var_from, id<GeogebraCommonKernelArithmeticNumberValue> var_to, id<GeogebraCommonKernelArithmeticNumberValue> var_step) {
  GeogebraCommonKernelAlgosAlgoSequence *self = [GeogebraCommonKernelAlgosAlgoSequence alloc];
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, expression, var, var_from, var_to, var_step);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoSequence *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> upTo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->last_from_ = JavaLangDouble_MIN_VALUE;
  self->last_to_ = JavaLangDouble_MIN_VALUE;
  self->last_step_ = JavaLangDouble_MIN_VALUE;
  self->updateRunning_ = NO;
  self->isSimple_ = YES;
  GeogebraCommonKernelAlgosAlgoSequence_set_var_to_(self, upTo);
  GeogebraCommonKernelAlgosAlgoSequence_set_var_to_geo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->var_to_)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoSequence_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSequence_compute(self);
  [self->list_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoSequence *new_GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> upTo) {
  GeogebraCommonKernelAlgosAlgoSequence *self = [GeogebraCommonKernelAlgosAlgoSequence alloc];
  GeogebraCommonKernelAlgosAlgoSequence_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, upTo);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSequence_compute(GeogebraCommonKernelAlgosAlgoSequence *self) {
  if (self->isSimple_) {
    GeogebraCommonKernelAlgosAlgoSequence_computeSimple(self);
    return;
  }
  if (self->updateRunning_) return;
  self->updateRunning_ = YES;
  for (jint i = 1; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    if (IOSObjectArray_Get(self->input_, i) != self->var_ && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isDefined]) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setUndefined];
      self->updateRunning_ = NO;
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setDefinedWithBoolean:YES];
  jdouble from = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->var_from_)) getDouble];
  jdouble to = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->var_to_)) getDouble];
  jdouble step = self->var_step_ == nil ? 1 : [self->var_step_ getDouble];
  self->isEmpty_ = !((to - from) * step > -GeogebraCommonKernelKernel_MIN_PRECISION);
  jboolean setValuesOnly = (from == self->last_from_ && to == self->last_to_ && step == self->last_step_);
  setValuesOnly = (setValuesOnly && !self->expIsFunctionOrCurve_);
  jboolean oldSuppressLabels = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if (setValuesOnly) GeogebraCommonKernelAlgosAlgoSequence_updateListItemsWithDouble_withDouble_withDouble_(self, from, to, step);
  else GeogebraCommonKernelAlgosAlgoSequence_createNewListWithDouble_withDouble_withDouble_(self, from, to, step);
  [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabels];
  self->updateRunning_ = NO;
}

void GeogebraCommonKernelAlgosAlgoSequence_computeSimple(GeogebraCommonKernelAlgosAlgoSequence *self) {
  jdouble to = JavaLangMath_floorWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->var_to_)) getDouble]);
  if (self->last_to_ < to) for (jint k = J2ObjCFpToInt(self->last_to_); k < to; k++) if (k >= 0) [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, k + 1) autorelease]];
  if (self->last_to_ > to) for (jint k = J2ObjCFpToInt(self->last_to_); k > to; k--) if (k >= 1) {
    GeogebraCommonKernelGeosGeoElement *ge = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) getWithInt:k - 1];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ge)) remove];
    [self->list_ removeWithInt:k - 1];
  }
  self->last_to_ = to;
}

void GeogebraCommonKernelAlgosAlgoSequence_createNewListWithDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble from, jdouble to, jdouble step) {
  jint i = 0;
  jint oldListSize = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size];
  [self->list_ clear];
  if (!self->isEmpty_) {
    if (JavaLangDouble_isInfiniteWithDouble_((to - from) / step)) {
      [self->list_ setUndefined];
      return;
    }
    jint n = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_((to - from) / step)) + 1;
    [self->list_ ensureCapacityWithInt:n];
    jdouble currentVal = from;
    while ((step > 0 && currentVal <= to + GeogebraCommonKernelKernel_MIN_PRECISION) || (step < 0 && currentVal >= to - GeogebraCommonKernelKernel_MIN_PRECISION)) {
      if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) freeMemoryIsCritical]) {
        jlong mem = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) freeMemory];
        [self->list_ clearCache];
        [self->kernel_ initUndoInfo];
        GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"AlgoSequence aborted: free memory reached ", mem));
        return;
      }
      GeogebraCommonKernelAlgosAlgoSequence_updateLocalVarWithDouble_(self, currentVal);
      GeogebraCommonKernelAlgosAlgoSequence_addElementWithInt_(self, i);
      currentVal += step;
      if (GeogebraCommonKernelKernel_isIntegerWithDouble_(currentVal)) {
        currentVal = JavaLangMath_roundWithDouble_(currentVal);
      }
      i++;
    }
  }
  for (jint k = oldListSize - 1; k >= i; k--) {
    GeogebraCommonKernelGeosGeoElement *oldElement = [self->list_ getCachedWithInt:k];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldElement)) setUndefined];
    [oldElement update];
  }
  self->last_from_ = from;
  self->last_to_ = to;
  self->last_step_ = step;
}

void GeogebraCommonKernelAlgosAlgoSequence_addElementWithInt_(GeogebraCommonKernelAlgosAlgoSequence *self, jint i) {
  GeogebraCommonKernelGeosGeoElement *listElement = nil;
  jint cacheListSize = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) getCacheSize];
  if (i < cacheListSize) {
    listElement = [self->list_ getCachedWithInt:i];
    if (self->expIsFunctionOrCurve_) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:nil];
      listElement = GeogebraCommonKernelAlgosAlgoSequence_createNewListElement(self);
    }
  }
  else {
    listElement = GeogebraCommonKernelAlgosAlgoSequence_createNewListElement(self);
  }
  if (!self->expIsFunctionOrCurve_) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setWithGeogebraCommonKernelGeosGeoElement:self->expression_];
    if ([listElement isGeoList]) {
      [((GeogebraCommonKernelGeosGeoList *) check_class_cast(listElement, [GeogebraCommonKernelGeosGeoList class])) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:self->var_];
    }
    GeogebraCommonKernelAlgosAlgoElement *drawAlgo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->expression_)) getDrawAlgorithm];
    if ([listElement isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [GeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:drawAlgo]) {
      GeogebraCommonMainApp_debugWithNSString_([[((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->expression_ getDrawAlgorithm])) getClass] getName]);
      [listElement setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast(drawAlgo, @protocol(GeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
      [listElement setEuclidianVisibleWithBoolean:YES];
    }
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) update];
  [self->list_ addWithGeogebraCommonKernelGeosGeoElement:listElement];
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAlgosAlgoSequence_createNewListElement(GeogebraCommonKernelAlgosAlgoSequence *self) {
  GeogebraCommonKernelGeosGeoElement *listElement = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->expression_)) copyInternalWithGeogebraCommonKernelConstruction:self->cons_];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [listElement setConstructionDefaults];
  [listElement setUseVisualDefaultsWithBoolean:NO];
  if (self->expIsFunctionOrCurve_) {
    if ([GeogebraCommonKernelGeosCasEvaluableFunction_class_() isInstance:listElement]) {
      id<GeogebraCommonKernelGeosCasEvaluableFunction> f = (id<GeogebraCommonKernelGeosCasEvaluableFunction>) check_protocol_cast(listElement, @protocol(GeogebraCommonKernelGeosCasEvaluableFunction));
      [f replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:self->var_];
    }
  }
  return listElement;
}

void GeogebraCommonKernelAlgosAlgoSequence_updateListItemsWithDouble_withDouble_withDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble from, jdouble to, jdouble step) {
  if (self->isEmpty_ || [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size] == 0) {
    return;
  }
  jdouble currentVal = from;
  jint i = 0;
  while ((step > 0 && currentVal <= to + GeogebraCommonKernelKernel_MIN_PRECISION) || (step < 0 && currentVal >= to - GeogebraCommonKernelKernel_MIN_PRECISION)) {
    GeogebraCommonKernelGeosGeoElement *listElement = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) getWithInt:i];
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) freeMemoryIsCritical]) {
      jlong mem = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) freeMemory];
      [self->list_ clearCache];
      [self->kernel_ initUndoInfo];
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J", @"AlgoSequence aborted: free memory reached ", mem));
      return;
    }
    GeogebraCommonKernelAlgosAlgoSequence_updateLocalVarWithDouble_(self, currentVal);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->expression_)) isDefined]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setWithGeogebraCommonKernelGeosGeoElement:self->expression_];
      if ([listElement isGeoList]) {
        [((GeogebraCommonKernelGeosGeoList *) check_class_cast(listElement, [GeogebraCommonKernelGeosGeoList class])) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:self->var_];
      }
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) setUndefined];
    }
    if ([listElement isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]] && [GeogebraCommonKernelAlgosDrawInformationAlgo_class_() isInstance:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) getDrawAlgorithm]]) {
      [listElement setDrawAlgorithmWithGeogebraCommonKernelAlgosDrawInformationAlgo:[((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosDrawInformationAlgo>) check_protocol_cast([self->expression_ getDrawAlgorithm], @protocol(GeogebraCommonKernelAlgosDrawInformationAlgo))))) copy__]];
      [listElement setEuclidianVisibleWithBoolean:YES];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) update];
    currentVal += step;
    if (GeogebraCommonKernelKernel_isIntegerWithDouble_(currentVal)) {
      currentVal = JavaLangMath_roundWithDouble_(currentVal);
    }
    i++;
  }
}

void GeogebraCommonKernelAlgosAlgoSequence_updateLocalVarWithDouble_(GeogebraCommonKernelAlgosAlgoSequence *self, jdouble varVal) {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->var_)) setValueWithDouble:varVal];
  if (self->expressionParentAlgo_ != nil) {
    [self setStopUpdateCascadeWithBoolean:YES];
    jboolean oldLabelStatus = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) setSuppressLabelCreationWithBoolean:YES];
    [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->var_ getAlgoUpdateSet])) updateAllUntilWithGeogebraCommonKernelAlgosAlgoElement:self->expressionParentAlgo_];
    [((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) setSuppressLabelCreationWithBoolean:oldLabelStatus];
    [self setStopUpdateCascadeWithBoolean:NO];
    [self->expressionParentAlgo_ update];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSequence)
