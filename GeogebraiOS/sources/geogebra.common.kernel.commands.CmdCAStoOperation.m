//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdCAStoOperation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CmdCAStoOperation.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelCommandsCmdCAStoOperation () {
 @public
  GeogebraCommonPluginOperationEnum *op_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsCmdCAStoOperation, op_, GeogebraCommonPluginOperationEnum *)

@implementation GeogebraCommonKernelCommandsCmdCAStoOperation

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
             withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op {
  GeogebraCommonKernelCommandsCmdCAStoOperation_initWithGeogebraCommonKernelKernel_withGeogebraCommonPluginOperationEnum_(self, kernel, op);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  GeogebraCommonKernelArithmeticExpressionNode *en = nil;
  IOSObjectArray *args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  switch ([op_ ordinal]) {
    case GeogebraCommonPluginOperation_YCOORD:
    case GeogebraCommonPluginOperation_XCOORD:
    en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, IOSObjectArray_Get(nil_chk(args), 0), op_, nil) autorelease];
    break;
    case GeogebraCommonPluginOperation_MULTIPLY:
    case GeogebraCommonPluginOperation_VECTORPRODUCT:
    en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernelA_, IOSObjectArray_Get(nil_chk(args), 0), op_, IOSObjectArray_Get(args, 1)) autorelease];
  }
  return [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) processExpressionNodeWithGeogebraCommonKernelArithmeticExpressionNode:en];
}

- (void)dealloc {
  RELEASE_(op_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonPluginOperationEnum:", "CmdCAStoOperation", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "op_", NULL, 0x2, "Lgeogebra.common.plugin.Operation;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdCAStoOperation = { 2, "CmdCAStoOperation", "geogebra.common.kernel.commands", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdCAStoOperation;
}

@end

void GeogebraCommonKernelCommandsCmdCAStoOperation_initWithGeogebraCommonKernelKernel_withGeogebraCommonPluginOperationEnum_(GeogebraCommonKernelCommandsCmdCAStoOperation *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonPluginOperationEnum *op) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
  GeogebraCommonKernelCommandsCmdCAStoOperation_set_op_(self, op);
}

GeogebraCommonKernelCommandsCmdCAStoOperation *new_GeogebraCommonKernelCommandsCmdCAStoOperation_initWithGeogebraCommonKernelKernel_withGeogebraCommonPluginOperationEnum_(GeogebraCommonKernelKernel *kernel, GeogebraCommonPluginOperationEnum *op) {
  GeogebraCommonKernelCommandsCmdCAStoOperation *self = [GeogebraCommonKernelCommandsCmdCAStoOperation alloc];
  GeogebraCommonKernelCommandsCmdCAStoOperation_initWithGeogebraCommonKernelKernel_withGeogebraCommonPluginOperationEnum_(self, kernel, op);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdCAStoOperation)
