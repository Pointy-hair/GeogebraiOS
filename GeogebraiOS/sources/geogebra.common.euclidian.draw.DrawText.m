//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawText.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawText.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonEuclidianDrawDrawText () {
 @public
  GeogebraCommonKernelGeosGeoText *text_;
  jboolean isVisible_, isLaTeX_;
  jint fontSize_;
  jint fontStyle_;
  jboolean serifFont_;
  GeogebraCommonAwtGFont *textFont_;
  id<GeogebraCommonKernelKernelNDGeoPointND> loc_;
  jint oldXpos_, oldYpos_;
  jboolean needsBoundingBoxOld_;
}

- (jboolean)doUpdateFontSize;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawText, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawText, textFont_, GeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawText, loc_, id<GeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawText_update(GeogebraCommonEuclidianDrawDrawText *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianDrawDrawText)

GeogebraCommonAwtGColor *GeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_;

@implementation GeogebraCommonEuclidianDrawDrawText

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                         withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonEuclidianDrawDrawText_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoText_(self, view, text);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawText_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    GeogebraCommonAwtGColor *bg = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getBackgroundColor];
    if (bg != nil) {
      if (isLaTeX_) {
        [self drawMultilineLaTeXWithGeogebraCommonAwtGGraphics2D:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getTempGraphics2DWithGeogebraCommonAwtGFont:textFont_] withGeogebraCommonAwtGFont:textFont_ withGeogebraCommonAwtGColor:[geo_ getObjectColor] withGeogebraCommonAwtGColor:[view_ getBackgroundCommon]];
      }
      else {
        [self drawMultilineTextWithGeogebraCommonAwtGGraphics2D:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getTempGraphics2DWithGeogebraCommonAwtGFont:textFont_] withGeogebraCommonAwtGFont:textFont_];
      }
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 setPaintWithGeogebraCommonAwtGPaint:bg];
      [g2 fillWithGeogebraCommonAwtGShape:labelRectangle_];
    }
    if (isLaTeX_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:textFont_];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      [self drawMultilineLaTeXWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGFont:textFont_ withGeogebraCommonAwtGColor:[geo_ getObjectColor] withGeogebraCommonAwtGColor:bg != nil ? bg : [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
    }
    else {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [self drawMultilineTextWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGFont:textFont_];
    }
    if ([geo_ doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_];
      [g2 drawWithGeogebraCommonAwtGShape:labelRectangle_];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [super hitLabelWithInt:x withInt:y];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (jboolean)doUpdateFontSize {
  jint newFontSize = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(4, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontSize] * [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) getFontSizeMultiplier]));
  jint newFontStyle = [text_ getFontStyle];
  jboolean newSerifFont = [text_ isSerifFont];
  if (([text_ getTextString] != nil && [((GeogebraCommonAwtGFont *) nil_chk(textFont_)) canDisplayUpToWithNSString:[text_ getTextString]] != -1) || fontSize_ != newFontSize || fontStyle_ != newFontStyle || newSerifFont != serifFont_) {
    [super updateFontSize];
    fontSize_ = newFontSize;
    fontStyle_ = newFontStyle;
    serifFont_ = newSerifFont;
    GeogebraCommonMainApp *app = [view_ getApplication];
    GeogebraCommonEuclidianDrawDrawText_set_textFont_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:[text_ getTextString] withBoolean:serifFont_ withInt:fontStyle_ withInt:fontSize_]);
    return YES;
  }
  return NO;
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoText class])) isAbsoluteScreenLocActive] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return labelRectangle_;
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(textFont_);
  RELEASE_(loc_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianDrawDrawText class]) {
    JreStrongAssign(&GeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_, nil, GeogebraCommonAwtGColor_get_lightGray_());
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianDrawDrawText)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoText:", "DrawText", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "doUpdateFontSize", NULL, "Z", 0x2, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HIGHLIGHT_COLOR_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonEuclidianDrawDrawText_HIGHLIGHT_COLOR_, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isLaTeX_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "textFont_", NULL, 0x2, "Lgeogebra.common.awt.GFont;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "oldXpos_", NULL, 0x2, "I", NULL, NULL,  },
    { "oldYpos_", NULL, 0x2, "I", NULL, NULL,  },
    { "needsBoundingBoxOld_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawText = { 2, "DrawText", "geogebra.common.euclidian.draw", NULL, 0x11, 11, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawText;
}

@end

void GeogebraCommonEuclidianDrawDrawText_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonEuclidianDrawDrawText *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->fontSize_ = -1;
  self->fontStyle_ = -1;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawText_set_text_(self, text);
  GeogebraCommonEuclidianDrawable_set_geo_(self, text);
  GeogebraCommonEuclidianDrawDrawText_set_textFont_(self, [((GeogebraCommonAwtGFont *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getApplication])) getPlainFontCommon])) deriveFontWithInt:GeogebraCommonAwtGFont_PLAIN withInt:[view getFontSize]]);
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:text];
  GeogebraCommonEuclidianDrawDrawText_update(self);
}

GeogebraCommonEuclidianDrawDrawText *new_GeogebraCommonEuclidianDrawDrawText_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonEuclidianDrawDrawText *self = [GeogebraCommonEuclidianDrawDrawText alloc];
  GeogebraCommonEuclidianDrawDrawText_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoText_(self, view, text);
  return self;
}

void GeogebraCommonEuclidianDrawDrawText_update(GeogebraCommonEuclidianDrawDrawText *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_ && ![((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) isNeedsUpdatedBoundingBox]) return;
  if (self->isLaTeX_) [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->text_];
  if (self->isLaTeX_) [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->text_];
  NSString *newText = [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getTextString];
  jboolean textChanged = self->labelDesc_ == nil || ![self->labelDesc_ isEqual:newText] || self->isLaTeX_ != [self->text_ isLaTeX] || [self->text_ isNeedsUpdatedBoundingBox] != self->needsBoundingBoxOld_;
  GeogebraCommonEuclidianDrawable_set_labelDesc_(self, newText);
  self->isLaTeX_ = [self->text_ isLaTeX];
  self->needsBoundingBoxOld_ = [self->text_ isNeedsUpdatedBoundingBox];
  if ([self->text_ isAbsoluteScreenLocActive]) {
    self->xLabel_ = [self->text_ getAbsoluteScreenLocX];
    self->yLabel_ = [self->text_ getAbsoluteScreenLocY];
  }
  else {
    GeogebraCommonEuclidianDrawDrawText_set_loc_(self, [self->text_ getStartPoint]);
    if (self->loc_ == nil) {
      self->xLabel_ = J2ObjCFpToInt([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getxZero]);
      self->yLabel_ = J2ObjCFpToInt([self->view_ getyZero]);
    }
    else {
      if (![self->loc_ isDefined]) {
        self->isVisible_ = NO;
        return;
      }
      GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[self->loc_ getInhomCoordsInD3]];
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
        self->isVisible_ = NO;
        return;
      }
      self->xLabel_ = [self->view_ toScreenCoordXWithDouble:[p getX]];
      self->yLabel_ = [self->view_ toScreenCoordYWithDouble:[p getY]];
    }
    self->xLabel_ += self->text_->labelOffsetX_;
    self->yLabel_ += self->text_->labelOffsetY_;
  }
  jboolean positionChanged = self->xLabel_ != self->oldXpos_ || self->yLabel_ != self->oldYpos_;
  self->oldXpos_ = self->xLabel_;
  self->oldYpos_ = self->yLabel_;
  jboolean fontChanged = [self doUpdateFontSize];
  if ([self->text_ isNeedsUpdatedBoundingBox] && (textChanged || positionChanged || fontChanged || [((GeogebraCommonKernelKernel *) nil_chk([self->text_ getKernel])) getForceUpdatingBoundingBox] || [self->text_ getBoundingBox] == nil)) {
    if (self->isLaTeX_) [self drawMultilineLaTeXWithGeogebraCommonAwtGGraphics2D:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getTempGraphics2DWithGeogebraCommonAwtGFont:self->textFont_] withGeogebraCommonAwtGFont:self->textFont_ withGeogebraCommonAwtGColor:[self->geo_ getObjectColor] withGeogebraCommonAwtGColor:[self->view_ getBackgroundCommon]];
    else [self drawMultilineTextWithGeogebraCommonAwtGGraphics2D:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getTempGraphics2DWithGeogebraCommonAwtGFont:self->textFont_] withGeogebraCommonAwtGFont:self->textFont_];
    jdouble xRW = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:[((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) getX]];
    jdouble yRW = [self->view_ toRealWorldCoordYWithDouble:[self->labelRectangle_ getY]];
    [self->text_ setBoundingBoxWithDouble:xRW withDouble:yRW withDouble:[self->labelRectangle_ getWidth] * [self->view_ getInvXscale] withDouble:-[self->labelRectangle_ getHeight] * [self->view_ getInvYscale]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawText)
