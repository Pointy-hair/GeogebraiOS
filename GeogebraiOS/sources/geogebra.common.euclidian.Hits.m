//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/Hits.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/Test.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoPolyhedronInterface.h"
#include "geogebra/common/kernel/kernelND/GeoQuadric3DInterface.h"
#include "geogebra/common/kernel/kernelND/GeoQuadric3DLimitedInterface.h"
#include "geogebra/common/kernel/kernelND/GeoQuadric3DPartInterface.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/HasVolume.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

#define GeogebraCommonEuclidianHits_serialVersionUID 1LL

@interface GeogebraCommonEuclidianHits () {
 @public
  jint listCount_;
  jint polyCount_;
  jint imageCount_;
  jint cs2DCount_;
  jboolean hasXAxis__, hasYAxis__;
}

- (void)removePolygonsDependingSidePresentWithBoolean:(jboolean)sidePresentWanted;

+ (void)addFiniteVolumeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result
                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

@end

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianHits, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(GeogebraCommonEuclidianHits *self, jboolean sidePresentWanted);

__attribute__((unused)) static void GeogebraCommonEuclidianHits_removePolygons(GeogebraCommonEuclidianHits *self);

__attribute__((unused)) static GeogebraCommonEuclidianHits *GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonKernelGeosTestEnum *geoclass, jboolean other, GeogebraCommonEuclidianHits *result);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianHits_containsGeoPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonEuclidianHits *ret);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianHits_containsGeoTextWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonEuclidianHits *ret);

__attribute__((unused)) static void GeogebraCommonEuclidianHits_addFiniteVolumeWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianHits *result, GeogebraCommonKernelGeosGeoElement *geo);

@implementation GeogebraCommonEuclidianHits

- (void)init__ {
  [self clear];
  listCount_ = 0;
  polyCount_ = 0;
  imageCount_ = 0;
  cs2DCount_ = 0;
  hasXAxis__ = NO;
  hasYAxis__ = NO;
}

- (GeogebraCommonEuclidianHits *)clone {
  GeogebraCommonEuclidianHits *ret = [self newHits];
  if ([self size] > 0) {
    for (jint i = 0; i < [self size]; i++) {
      [((GeogebraCommonEuclidianHits *) nil_chk(ret)) addWithId:[self getWithInt:i]];
    }
  }
  ((GeogebraCommonEuclidianHits *) nil_chk(ret))->listCount_ = self->listCount_;
  ret->polyCount_ = self->polyCount_;
  ret->imageCount_ = self->imageCount_;
  ret->hasXAxis__ = self->hasXAxis__;
  ret->hasYAxis__ = self->hasYAxis__;
  ret->cs2DCount_ = cs2DCount_;
  return ret;
}

- (GeogebraCommonEuclidianHits *)newHits {
  return [new_GeogebraCommonEuclidianHits_init() autorelease];
}

- (jboolean)addWithId:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed]) {
    if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoList class]] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) drawAsComboBox])) {
      return NO;
    }
  }
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:geo]) {
    cs2DCount_++;
  }
  if ([geo isGeoList]) {
    listCount_++;
  }
  else if ([geo isGeoImage]) {
    imageCount_++;
  }
  else if ([geo isGeoPolygon]) {
    polyCount_++;
  }
  else if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoAxis class]]) {
    if ([((GeogebraCommonKernelGeosGeoAxis *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAxis class])) getType] == GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS) {
      hasXAxis__ = YES;
    }
    else {
      hasYAxis__ = YES;
    }
  }
  return [super addWithId:geo];
}

- (jint)getImageCount {
  return imageCount_;
}

- (jint)getListCount {
  return listCount_;
}

- (jboolean)hasXAxis {
  return hasXAxis__;
}

- (jboolean)hasYAxis {
  return hasYAxis__;
}

- (GeogebraCommonEuclidianHits *)absorbWithJavaUtilArrayList:(JavaUtilArrayList *)hits2 {
  GeogebraCommonEuclidianHits *ret = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(hits2)) size]; i++) {
    if (![self containsWithId:[hits2 getWithInt:i]]) [self addWithId:[hits2 getWithInt:i]];
    else [ret addWithId:[hits2 getWithInt:i]];
  }
  return ret;
}

- (void)removeAllPoints {
  for (jint i = [self size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if (geo == nil || [geo isGeoPoint]) [self removeWithInt:i];
  }
}

- (void)removeAllDimElements {
  for (jint i = [self size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if (geo == nil || ([geo isRegion] && ([geo getAlphaValue] < 0.1f || [geo getLineThickness] < 0.5f)) || ([geo isPath] && [geo getLineThickness] < 0.5f)) [self removeWithInt:i];
  }
}

- (void)removePolygonsIfSidePresent {
  GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(self, NO);
}

- (void)removePolygonsIfSideNotPresent {
  GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(self, YES);
}

- (void)keepOnlyHitsForNewPointMode {
  GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(self, YES);
}

- (void)removeConicsHittedOnFilling {
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConic]) {
      if ([((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()) {
        [it remove];
      }
    }
  }
}

- (void)removePolygonsDependingSidePresentWithBoolean:(jboolean)sidePresentWanted {
  GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(self, sidePresentWanted);
}

- (void)removeGeosAfterWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  for (jint i = [self size] - 1; i >= 0 && [self getWithInt:i] != geo; i--) {
    [self removeWithInt:i];
  }
}

- (void)removeSegmentsFromPolygons {
  JavaUtilArrayList *toRemove = [new_JavaUtilArrayList_init() autorelease];
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
      IOSObjectArray *sides = [((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class])) getSegments];
      for (jint k = 0; k < ((IOSObjectArray *) nil_chk(sides))->size_; k++) {
        [toRemove addWithId:IOSObjectArray_Get(sides, k)];
      }
    }
  }
  for (id<GeogebraCommonKernelKernelNDGeoSegmentND> __strong d in toRemove) {
    [self removeWithId:d];
  }
}

- (GeogebraCommonEuclidianHits *)getPointVectorNumericHits {
  GeogebraCommonEuclidianHits *ret = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < [self size]; ++i) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector] || [geo isGeoPoint]) [ret addWithId:geo];
  }
  return ret;
}

- (void)removePolygons {
  GeogebraCommonEuclidianHits_removePolygons(self);
}

- (void)removeAllPolygons {
  for (jint i = [self size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) [self removeWithInt:i];
  }
}

- (void)removeAllPlanes {
  for (jint i = [self size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPlane]) [self removeWithInt:i];
  }
}

- (void)removeAllPolygonsButOne {
  jint toRemove = polyCount_ - 1;
  for (jint i = [self size] - 1; i >= 0 && toRemove > 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
      [self removeWithInt:i];
      toRemove--;
    }
  }
}

- (jint)getPolyCount {
  return polyCount_;
}

- (GeogebraCommonEuclidianHits *)keepFirstsWithGeogebraCommonKernelGeosTestEnumArray:(IOSObjectArray *)tests {
  GeogebraCommonEuclidianHits *ret = [new_GeogebraCommonEuclidianHits_init() autorelease];
  GeogebraCommonKernelGeosTestEnum *testFound = nil;
  jboolean goFurther = YES;
  for (jint i = 0; i < [self size] && goFurther; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if (testFound == nil) {
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(tests))->size_ && testFound == nil; j++) {
        if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(tests, j))) checkWithId:geo]) {
          testFound = IOSObjectArray_Get(tests, j);
          [ret addWithId:geo];
        }
      }
    }
    else {
      if ([testFound checkWithId:geo]) {
        [ret addWithId:geo];
      }
      else {
        goFurther = NO;
      }
    }
  }
  return ret;
}

- (void)removeAllPolygonsAndQuadricsButOne {
}

- (void)removeAllButImages {
}

- (void)removeImages {
  for (jint i = [self size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoImage]) [self removeWithInt:i];
  }
}

- (GeogebraCommonEuclidianHits *)getMoveableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  return [self getMoveablesWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_MOVEABLE() withGeogebraCommonKernelKernelNDGeoPointND:nil];
}

- (GeogebraCommonEuclidianHits *)getPointRotateableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view
                                                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)rotCenter {
  return [self getMoveablesWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view withGeogebraCommonKernelGeosTestEnum:GeogebraCommonKernelGeosTestEnum_get_ROTATEMOVEABLE() withGeogebraCommonKernelKernelNDGeoPointND:rotCenter];
}

- (GeogebraCommonEuclidianHits *)getSelectableHits {
  GeogebraCommonKernelGeosGeoElement *geo;
  GeogebraCommonEuclidianHits *selectableList = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < [self size]; ++i) {
    geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed]) [selectableList addWithId:geo];
  }
  return selectableList;
}

- (GeogebraCommonEuclidianHits *)getMoveablesWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view
                                                              withGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)test
                                                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)rotCenter {
  GeogebraCommonKernelGeosGeoElement *geo;
  GeogebraCommonEuclidianHits *moveableList = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < [self size]; ++i) {
    geo = [self getWithInt:i];
    switch ([test ordinal]) {
      case GeogebraCommonKernelGeosTest_MOVEABLE:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]) {
        [moveableList addWithId:geo];
      }
      else if ([geo isGeoPoint]) {
        id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
        if ([point hasChangeableCoordParentNumbers]) [moveableList addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])];
      }
      else if ([geo hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]) {
        [moveableList addWithId:geo];
      }
      break;
      case GeogebraCommonKernelGeosTest_ROTATEMOVEABLE:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isRotateMoveable]) {
        if (rotCenter == nil || ![geo isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:rotCenter]) [moveableList addWithId:geo];
      }
      else if ([geo hasMoveableInputPointsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:view]) {
        [moveableList addWithId:geo];
      }
      break;
    }
  }
  return moveableList;
}

- (GeogebraCommonEuclidianHits *)getOtherHitsWithGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoclass
                                                  withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result {
  return GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(self, geoclass, YES, result);
}

- (GeogebraCommonEuclidianHits *)getHitsWithGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoclass
                                             withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result {
  return GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(self, geoclass, NO, result);
}

- (GeogebraCommonEuclidianHits *)getHitsWithGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoclass
                                                                 withBoolean:(jboolean)other
                                             withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result {
  return GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(self, geoclass, other, result);
}

- (GeogebraCommonEuclidianHits *)getRegionHitsWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result {
  [((GeogebraCommonEuclidianHits *) nil_chk(result)) clear];
  for (jint i = 0; i < [self size]; ++i) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getWithInt:i])) isRegion]) [result addWithId:[self getWithInt:i]];
  }
  return result;
}

- (GeogebraCommonEuclidianHits *)getHitsWithGeogebraCommonKernelGeosTestEnumArray:(IOSObjectArray *)geoclasses
                                                                      withBoolean:(jboolean)other
                                                  withGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result {
  [((GeogebraCommonEuclidianHits *) nil_chk(result)) clear];
  for (jint i = 0; i < [self size]; ++i) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(geoclasses))->size_; ++j) {
      jboolean success = [((GeogebraCommonKernelGeosTestEnum *) nil_chk(IOSObjectArray_Get(geoclasses, j))) checkWithId:[self getWithInt:i]];
      if (other) success = !success;
      if (success) [result addWithId:[self getWithInt:i]];
    }
  }
  return result;
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstHitWithGeogebraCommonKernelGeosTestEnum:(GeogebraCommonKernelGeosTestEnum *)geoclass {
  for (jint i = 0; i < [self size]; ++i) {
    if ([((GeogebraCommonKernelGeosTestEnum *) nil_chk(geoclass)) checkWithId:[self getWithInt:i]]) return [self getWithInt:i];
  }
  return nil;
}

- (GeogebraCommonEuclidianHits *)getTopHits {
  if ([self isEmpty]) return [self clone];
  GeogebraCommonEuclidianHits *topHitsList = [new_GeogebraCommonEuclidianHits_init() autorelease];
  if (GeogebraCommonEuclidianHits_containsGeoPointWithGeogebraCommonEuclidianHits_(self, topHitsList)) {
    GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(self, GeogebraCommonKernelGeosTestEnum_get_GEOPOINTND(), NO, topHitsList);
    return topHitsList;
  }
  if (GeogebraCommonEuclidianHits_containsGeoTextWithGeogebraCommonEuclidianHits_(self, topHitsList)) {
    GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(self, GeogebraCommonKernelGeosTestEnum_get_GEOTEXT(), NO, topHitsList);
    return topHitsList;
  }
  return [self clone];
}

- (GeogebraCommonEuclidianHits *)getTopHitsWithInt:(jint)nb {
  GeogebraCommonEuclidianHits *topHits = [self getTopHits];
  GeogebraCommonEuclidianHits *ret = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < nb && i < [((GeogebraCommonEuclidianHits *) nil_chk(topHits)) size]; i++) [ret addWithId:[((GeogebraCommonEuclidianHits *) nil_chk(topHits)) getWithInt:i]];
  return ret;
}

- (GeogebraCommonEuclidianHits *)getHitsWithInt:(jint)nb {
  GeogebraCommonEuclidianHits *ret = [self createNewHits];
  for (jint i = 0; i < nb && i < [self size]; i++) [((GeogebraCommonEuclidianHits *) nil_chk(ret)) addWithId:[self getWithInt:i]];
  return ret;
}

- (GeogebraCommonEuclidianHits *)createNewHits {
  return [new_GeogebraCommonEuclidianHits_init() autorelease];
}

- (GeogebraCommonEuclidianHits *)getTopHitsWithInt:(jint)depth
                                           withInt:(jint)geoN {
  return [self getTopHitsWithInt:geoN];
}

- (jboolean)containsGeoPoint {
  for (jint i = 0; i < [self size]; i++) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getWithInt:i])) isGeoPoint]) return YES;
  }
  return NO;
}

- (jboolean)containsGeoPointWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)ret {
  return GeogebraCommonEuclidianHits_containsGeoPointWithGeogebraCommonEuclidianHits_(self, ret);
}

- (jboolean)containsGeoTextWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)ret {
  return GeogebraCommonEuclidianHits_containsGeoTextWithGeogebraCommonEuclidianHits_(self, ret);
}

- (NSString *)description {
  NSString *s = JreStrcat("$I", @"hits: ", [self size]);
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self size]; i++) {
    geo = [self getWithInt:i];
    s = JreStrcat("$$", s, JreStrcat("$I$$", @"\n hits(", i, @") = ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
  }
  return s;
}

- (jboolean)intersectWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(list)) if ([self containsWithId:geo]) return YES;
  return NO;
}

- (GeogebraCommonEuclidianHits *)getFiniteVolumeIncludingMetaHits {
  GeogebraCommonEuclidianHits *result = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in self) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMetasLength] > 0) {
      {
        IOSObjectArray *a__ = [((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFromMeta))) getMetas];
        GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *meta = *b__++;
          GeogebraCommonEuclidianHits_addFiniteVolumeWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelGeosGeoElement_(result, meta);
        }
      }
    }
    else {
      GeogebraCommonEuclidianHits_addFiniteVolumeWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelGeosGeoElement_(result, geo);
    }
  }
  return result;
}

+ (void)addFiniteVolumeWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)result
                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianHits_addFiniteVolumeWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelGeosGeoElement_(result, geo);
}

- (GeogebraCommonEuclidianHits *)getPolyhedronsIncludingMetaHits {
  GeogebraCommonEuclidianHits *result = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in self) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getMetasLength] > 0) {
      {
        IOSObjectArray *a__ = [((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFromMeta))) getMetas];
        GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *meta = *b__++;
          if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(meta)) isGeoPolyhedron]) {
            [result addWithId:meta];
          }
        }
      }
    }
    else {
      if ([geo isGeoPolyhedron]) {
        [result addWithId:geo];
      }
    }
  }
  return result;
}

- (GeogebraCommonEuclidianHits *)getFirstSurfaceBeforeWithJavaUtilArrayList:(JavaUtilArrayList *)ignoredGeos {
  GeogebraCommonEuclidianHits *ret = [new_GeogebraCommonEuclidianHits_init() autorelease];
  for (jint i = 0; i < [self size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
    if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:geo] || [GeogebraCommonKernelKernelNDGeoQuadric3DInterface_class_() isInstance:geo] || [GeogebraCommonKernelKernelNDGeoQuadric3DLimitedInterface_class_() isInstance:geo] || [GeogebraCommonKernelKernelNDGeoPolyhedronInterface_class_() isInstance:geo]) {
      if (![((JavaUtilArrayList *) nil_chk(ignoredGeos)) containsWithId:geo]) {
        if ([GeogebraCommonKernelKernelNDGeoQuadric3DPartInterface_class_() isInstance:geo]) {
          GeogebraCommonKernelGeosGeoElement *meta = IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelGeosFromMeta>) nil_chk(((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosFromMeta))))) getMetas]), 0);
          if (![ignoredGeos containsWithId:meta]) {
            [ret addWithId:meta];
            return ret;
          }
        }
        [ret addWithId:geo];
        return ret;
      }
    }
  }
  return ret;
}

- (void)removePolygonsIfNotOnlyCS2D {
  if ([self size] - cs2DCount_ > 0) {
    GeogebraCommonEuclidianHits_removePolygons(self);
  }
}

- (instancetype)init {
  GeogebraCommonEuclidianHits_init(self);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init__", "init", "V", 0x1, NULL, NULL },
    { "clone", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "newHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "getImageCount", NULL, "I", 0x1, NULL, NULL },
    { "getListCount", NULL, "I", 0x1, NULL, NULL },
    { "hasXAxis", NULL, "Z", 0x1, NULL, NULL },
    { "hasYAxis", NULL, "Z", 0x1, NULL, NULL },
    { "absorbWithJavaUtilArrayList:", "absorb", "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "removeAllPoints", NULL, "V", 0x11, NULL, NULL },
    { "removeAllDimElements", NULL, "V", 0x11, NULL, NULL },
    { "removePolygonsIfSidePresent", NULL, "V", 0x11, NULL, NULL },
    { "removePolygonsIfSideNotPresent", NULL, "V", 0x11, NULL, NULL },
    { "keepOnlyHitsForNewPointMode", NULL, "V", 0x11, NULL, NULL },
    { "removeConicsHittedOnFilling", NULL, "V", 0x11, NULL, NULL },
    { "removePolygonsDependingSidePresentWithBoolean:", "removePolygonsDependingSidePresent", "V", 0x12, NULL, NULL },
    { "removeGeosAfterWithGeogebraCommonKernelGeosGeoElement:", "removeGeosAfter", "V", 0x11, NULL, NULL },
    { "removeSegmentsFromPolygons", NULL, "V", 0x11, NULL, NULL },
    { "getPointVectorNumericHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "removePolygons", NULL, "V", 0x11, NULL, NULL },
    { "removeAllPolygons", NULL, "V", 0x11, NULL, NULL },
    { "removeAllPlanes", NULL, "V", 0x11, NULL, NULL },
    { "removeAllPolygonsButOne", NULL, "V", 0x1, NULL, NULL },
    { "getPolyCount", NULL, "I", 0x1, NULL, NULL },
    { "keepFirstsWithGeogebraCommonKernelGeosTestEnumArray:", "keepFirsts", "Lgeogebra.common.euclidian.Hits;", 0x91, NULL, NULL },
    { "removeAllPolygonsAndQuadricsButOne", NULL, "V", 0x1, NULL, NULL },
    { "removeAllButImages", NULL, "V", 0x11, NULL, NULL },
    { "removeImages", NULL, "V", 0x1, NULL, NULL },
    { "getMoveableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "getMoveableHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getPointRotateableHitsWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:withGeogebraCommonKernelKernelNDGeoPointND:", "getPointRotateableHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getSelectableHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getMoveablesWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:withGeogebraCommonKernelGeosTestEnum:withGeogebraCommonKernelKernelNDGeoPointND:", "getMoveables", "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getOtherHitsWithGeogebraCommonKernelGeosTestEnum:withGeogebraCommonEuclidianHits:", "getOtherHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getHitsWithGeogebraCommonKernelGeosTestEnum:withGeogebraCommonEuclidianHits:", "getHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getHitsWithGeogebraCommonKernelGeosTestEnum:withBoolean:withGeogebraCommonEuclidianHits:", "getHits", "Lgeogebra.common.euclidian.Hits;", 0x14, NULL, NULL },
    { "getRegionHitsWithGeogebraCommonEuclidianHits:", "getRegionHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getHitsWithGeogebraCommonKernelGeosTestEnumArray:withBoolean:withGeogebraCommonEuclidianHits:", "getHits", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "getFirstHitWithGeogebraCommonKernelGeosTestEnum:", "getFirstHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "getTopHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "getTopHitsWithInt:", "getTopHits", "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "getHitsWithInt:", "getHits", "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "createNewHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x4, NULL, NULL },
    { "getTopHitsWithInt:withInt:", "getTopHits", "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "containsGeoPoint", NULL, "Z", 0x11, NULL, NULL },
    { "containsGeoPointWithGeogebraCommonEuclidianHits:", "containsGeoPoint", "Z", 0x11, NULL, NULL },
    { "containsGeoTextWithGeogebraCommonEuclidianHits:", "containsGeoText", "Z", 0x11, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "intersectWithJavaUtilArrayList:", "intersect", "Z", 0x1, NULL, NULL },
    { "getFiniteVolumeIncludingMetaHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "addFiniteVolumeWithGeogebraCommonEuclidianHits:withGeogebraCommonKernelGeosGeoElement:", "addFiniteVolume", "V", 0xa, NULL, NULL },
    { "getPolyhedronsIncludingMetaHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "getFirstSurfaceBeforeWithJavaUtilArrayList:", "getFirstSurfaceBefore", "Lgeogebra.common.euclidian.Hits;", 0x11, NULL, NULL },
    { "removePolygonsIfNotOnlyCS2D", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonEuclidianHits_serialVersionUID },
    { "listCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "polyCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "imageCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "cs2DCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "hasXAxis__", "hasXAxis", 0x2, "Z", NULL, NULL,  },
    { "hasYAxis__", "hasYAxis", 0x2, "Z", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoElement;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianHits = { 2, "Hits", "geogebra.common.euclidian", NULL, 0x1, 54, methods, 7, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonEuclidianHits;
}

@end

void GeogebraCommonEuclidianHits_removePolygonsDependingSidePresentWithBoolean_(GeogebraCommonEuclidianHits *self, jboolean sidePresentWanted) {
  id<JavaUtilIterator> it = [self iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) {
      jboolean sidePresent = NO;
      IOSObjectArray *sides = [((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class])) getSegments];
      if (sides != nil) {
        for (jint k = 0; k < sides->size_; k++) {
          if ([self containsWithId:IOSObjectArray_Get(sides, k)]) {
            sidePresent = YES;
            break;
          }
        }
      }
      if (sidePresent != sidePresentWanted) {
        [it remove];
      }
    }
  }
}

void GeogebraCommonEuclidianHits_removePolygons(GeogebraCommonEuclidianHits *self) {
  if ([self size] - self->polyCount_ > 0) {
    for (jint i = [self size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *geo = [self getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon]) [self removeWithInt:i];
    }
  }
}

GeogebraCommonEuclidianHits *GeogebraCommonEuclidianHits_getHitsWithGeogebraCommonKernelGeosTestEnum_withBoolean_withGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonKernelGeosTestEnum *geoclass, jboolean other, GeogebraCommonEuclidianHits *result) {
  [((GeogebraCommonEuclidianHits *) nil_chk(result)) clear];
  for (jint i = 0; i < [self size]; ++i) {
    jboolean success = [((GeogebraCommonKernelGeosTestEnum *) nil_chk(geoclass)) checkWithId:[self getWithInt:i]];
    if (other) success = !success;
    if (success) [result addWithId:[self getWithInt:i]];
  }
  return result;
}

jboolean GeogebraCommonEuclidianHits_containsGeoPointWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonEuclidianHits *ret) {
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self size]; i++) {
    geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((GeogebraCommonEuclidianHits *) nil_chk(ret)) addWithId:geo];
      return YES;
    }
  }
  return NO;
}

jboolean GeogebraCommonEuclidianHits_containsGeoTextWithGeogebraCommonEuclidianHits_(GeogebraCommonEuclidianHits *self, GeogebraCommonEuclidianHits *ret) {
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = 0; i < [self size]; i++) {
    geo = [self getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) {
      [((GeogebraCommonEuclidianHits *) nil_chk(ret)) addWithId:geo];
      return YES;
    }
  }
  return NO;
}

void GeogebraCommonEuclidianHits_addFiniteVolumeWithGeogebraCommonEuclidianHits_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianHits *result, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonEuclidianHits_initialize();
  if ([GeogebraCommonKernelKernelNDHasVolume_class_() isInstance:geo]) {
    if ([((id<GeogebraCommonKernelKernelNDHasVolume>) nil_chk(((id<GeogebraCommonKernelKernelNDHasVolume>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDHasVolume))))) hasFiniteVolume]) {
      [((GeogebraCommonEuclidianHits *) nil_chk(result)) addWithId:geo];
    }
  }
}

void GeogebraCommonEuclidianHits_init(GeogebraCommonEuclidianHits *self) {
  JavaUtilArrayList_init(self);
}

GeogebraCommonEuclidianHits *new_GeogebraCommonEuclidianHits_init() {
  GeogebraCommonEuclidianHits *self = [GeogebraCommonEuclidianHits alloc];
  GeogebraCommonEuclidianHits_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianHits)
