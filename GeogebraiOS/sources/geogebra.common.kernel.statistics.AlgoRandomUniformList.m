//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoRandomUniformList.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoRandomUniformList.h"
#include "geogebra/common/main/RandomUtil.h"

@interface GeogebraCommonKernelStatisticsAlgoRandomUniformList () {
 @public
  IOSDoubleArray *numberArray_, *parms_;
}

- (void)ensureListSizeWithInt:(jint)n;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRandomUniformList, numberArray_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRandomUniformList, parms_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(GeogebraCommonKernelStatisticsAlgoRandomUniformList *self, jint n);

@implementation GeogebraCommonKernelStatisticsAlgoRandomUniformList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)length {
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b, length);
  return self;
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RandomUniform();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) toGeoElement]);
  IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) toGeoElement]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:list_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return list_;
}

- (void)ensureListSizeWithInt:(jint)n {
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(self, n);
}

- (void)compute {
  if (![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) isDefined] || ![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) isDefined] || ![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  if ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(length_)) getDouble] < 1) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    return;
  }
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(self, J2ObjCFpToInt([length_ getDouble]));
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) size]; i++) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:GeogebraCommonMainRandomUtil_randomUniformWithDouble_withDouble_([a_ getDouble], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble])];
  }
}

- (void)setRandomValueWithDouble:(jdouble)d {
  if (d >= [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble] && d <= [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) updateRepaint];
  }
}

- (void)dealloc {
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(length_);
  RELEASE_(list_);
  RELEASE_(numberArray_);
  RELEASE_(parms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomUniformList", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "ensureListSizeWithInt:", "ensureListSize", "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "a_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "length_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "list_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "numberArray_", NULL, 0x2, "[D", NULL, NULL,  },
    { "parms_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoRandomUniformList = { 2, "AlgoRandomUniformList", "geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoRandomUniformList;
}

@end

void GeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoRandomUniformList *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, id<GeogebraCommonKernelArithmeticNumberValue> length) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_set_a_(self, a);
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_set_b_(self, b);
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_set_length_(self, length);
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_setAndConsume_parms_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithGeogebraCommonKernelGeosGeoElement:self->list_];
  [self setInputOutput];
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoRandomUniformList *new_GeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, id<GeogebraCommonKernelArithmeticNumberValue> length) {
  GeogebraCommonKernelStatisticsAlgoRandomUniformList *self = [GeogebraCommonKernelStatisticsAlgoRandomUniformList alloc];
  GeogebraCommonKernelStatisticsAlgoRandomUniformList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b, length);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoRandomUniformList_ensureListSizeWithInt_(GeogebraCommonKernelStatisticsAlgoRandomUniformList *self, jint n) {
  jboolean oldSuppressLabels = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size] < n) {
    for (jint i = [self->list_ size]; i < n; i++) {
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease]];
    }
  }
  else if ([self->list_ size] > n) {
    for (jint i = n - 1; i < [self->list_ size]; i++) {
      [self->list_ removeWithInt:i];
    }
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppressLabels];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoRandomUniformList)
