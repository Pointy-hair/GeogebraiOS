//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoOrthoLinePointLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoOrthoLinePointLine.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoOrthoLinePointLine () {
 @public
  GeogebraCommonKernelGeosGeoLine *g_;
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaPolynomials_;
  IOSObjectArray *botanaVars_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine, botanaPolynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine, botanaVars_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_addIncidence(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_compute(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self);

@implementation GeogebraCommonKernelAlgosAlgoOrthoLinePointLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, P, l);
  return self;
}

- (void)addIncidence {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_addIncidence(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL;
}

- (void)setInput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, P_);
  IOSObjectArray_Set(input_, 1, l_);
}

- (void)setInputOutput {
  [self setInput];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getLine {
  return g_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (GeogebraCommonKernelGeosGeoLine *)getl {
  return l_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_compute(self);
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (P_ != nil && l_ != nil) {
    [P_ getFreeVariablesWithJavaUtilHashSet:variables];
    [l_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (P_ != nil && l_ != nil) {
    IOSIntArray *degreeP = [P_ getDegrees];
    IOSIntArray *degreeL = [l_ getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = IOSIntArray_Get(nil_chk(degreeL), 1) + IOSIntArray_Get(nil_chk(degreeP), 2);
    *IOSIntArray_GetRef(result, 1) = IOSIntArray_Get(degreeL, 0) + IOSIntArray_Get(degreeP, 2);
    *IOSIntArray_GetRef(result, 2) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degreeL, 0) + IOSIntArray_Get(degreeP, 1), IOSIntArray_Get(degreeL, 1) + IOSIntArray_Get(degreeP, 0));
    return result;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (P_ != nil && l_ != nil) {
    IOSObjectArray *pP = [P_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *pL = [l_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(coords, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(pL), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(pP), 2)])) negate]);
    IOSObjectArray_Set(coords, 1, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pL, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 2)]);
    IOSObjectArray_Set(coords, 2, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pL, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 1)])) negate])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pL, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 0)]]);
    return coords;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (P_ != nil && l_ != nil) {
    IOSObjectArray *pP = [P_ getPolynomials];
    IOSObjectArray *pL = [l_ getPolynomials];
    GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(pL), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(pP), 2)])) negate]);
    IOSObjectArray_Set(polynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pL, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 2)]);
    IOSObjectArray_Set(polynomials_, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pL, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 1)])) negate])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pL, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 0)]]);
    return polynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  if (P_ != nil && l_ != nil) {
    IOSObjectArray *vP = [P_ getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:P_];
    IOSObjectArray *vL = [l_ getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:l_];
    if (botanaVars_ == nil) {
      GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
      IOSObjectArray_SetAndConsume(botanaVars_, 0, new_GeogebraCommonKernelProverPolynomialVariable_init());
      IOSObjectArray_SetAndConsume(botanaVars_, 1, new_GeogebraCommonKernelProverPolynomialVariable_init());
      IOSObjectArray_Set(botanaVars_, 2, IOSObjectArray_Get(nil_chk(vP), 0));
      IOSObjectArray_Set(botanaVars_, 3, IOSObjectArray_Get(vP, 1));
    }
    GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_setAndConsume_botanaPolynomials_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    GeogebraCommonKernelProverPolynomialPolynomial *p1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vP), 0)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *p2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(vP, 1)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *a1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(vL), 0)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *a2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(vL, 1)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *b1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(vL, 2)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *b2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(vL, 3)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *n1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVars_), 0)) autorelease];
    GeogebraCommonKernelProverPolynomialPolynomial *n2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars_, 1)) autorelease];
    IOSObjectArray_Set(botanaPolynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([b1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:a1])) addWithGeogebraCommonKernelProverPolynomialPolynomial:p2])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:n2]);
    IOSObjectArray_Set(botanaPolynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([p1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:b2])) addWithGeogebraCommonKernelProverPolynomialPolynomial:a2])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:n1]);
    return botanaPolynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnOrthoLinePointLineWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (jint)getInputLengthForXML {
  return [self getInputLengthForXMLMayNeedXOYPlane];
}

- (jint)getInputLengthForCommandDescription {
  return [self getInputLengthForCommandDescriptionMayNeedXOYPlane];
}

- (GeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return [self getInputMaybeXOYPlaneWithInt:i];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(l_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(l_);
  RELEASE_(g_);
  RELEASE_(polynomials_);
  RELEASE_(botanaPolynomials_);
  RELEASE_(botanaVars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoLine:", "AlgoOrthoLinePointLine", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInput", NULL, "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getl", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "l_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoOrthoLinePointLine = { 2, "AlgoOrthoLinePointLine", "geogebra.common.kernel.algos", NULL, 0x1, 23, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoOrthoLinePointLine;
}

@end

void GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_set_l_(self, l);
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self->g_ setStartPointWithGeogebraCommonKernelGeosGeoPoint:P];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_compute(self);
  [self->g_ setLabelWithNSString:label];
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_addIncidence(self);
}

GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *new_GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self = [GeogebraCommonKernelAlgosAlgoOrthoLinePointLine alloc];
  GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, P, l);
  return self;
}

void GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_addIncidence(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->g_ withBoolean:YES];
}

void GeogebraCommonKernelAlgosAlgoOrthoLinePointLine_compute(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine *self) {
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(self->P_, ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->l_))->x_, self->l_->y_, 0.0, self->g_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoOrthoLinePointLine)
