//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Polynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/arithmetic/Term.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"

#define GeogebraCommonKernelArithmeticPolynomial_serialVersionUID 1LL

@interface GeogebraCommonKernelArithmeticPolynomial () {
 @public
  JavaUtilArrayList *terms_;
  GeogebraCommonKernelKernel *kernel_;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

- (void)appendWithGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t;

- (void)subWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
             withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq;

- (void)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (void)subWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (void)multiplyWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ;

- (void)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number;

- (void)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number;

- (void)divideWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)poly;

- (void)powerWithInt:(jint)p
withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq;

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (JavaUtilHashSet *)getVariables;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticPolynomial, terms_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticPolynomial, kernel_, GeogebraCommonKernelKernel *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticPolynomial, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticTerm *t);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticPolynomial *e, GeogebraCommonKernelArithmeticEquation *eq);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticPolynomial *e, GeogebraCommonKernelArithmeticEquation *equ);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_divideWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, jint p, GeogebraCommonKernelArithmeticEquation *eq);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticPolynomial_toStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaUtilHashSet *GeogebraCommonKernelArithmeticPolynomial_getVariables(GeogebraCommonKernelArithmeticPolynomial *self);

@implementation GeogebraCommonKernelArithmeticPolynomial

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
            withGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(self, kernel, t);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)vars {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, vars);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
      withGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)poly {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(self, kernel, poly);
  return self;
}

- (GeogebraCommonKernelArithmeticTerm *)getTermWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:i];
}

- (jint)length {
  return [((JavaUtilArrayList *) nil_chk(terms_)) size];
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(terms_)) size] == 0;
}

- (jboolean)isVarWithNSString:(NSString *)var {
  if ([self length] != 1) return NO;
  @try {
    GeogebraCommonKernelArithmeticTerm *t = [((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:0];
    return ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) getVars])) isEqual:var] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([t getCoefficient])) isConstant] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([t getCoefficient])) evaluateDouble] == 1.0);
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return NO;
  }
}

- (void)appendWithGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t {
  GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, t);
}

- (void)addWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
             withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq {
  for (jint i = 0; i < [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(e)) length]; i++) {
    GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, [e getTermWithInt:i]);
  }
  [self simplifyWithGeogebraCommonKernelArithmeticEquation:eq];
}

- (void)subWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
             withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq {
  GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, e, eq);
}

- (void)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonKernelArithmeticPolynomial_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(self, number, equ);
}

- (void)subWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(self, number, equ);
}

- (void)multiplyWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)e
                  withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, e, equ);
}

- (void)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number {
  GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_(self, number);
}

- (void)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number {
  GeogebraCommonKernelArithmeticPolynomial_divideWithGeogebraCommonKernelArithmeticExpressionValue_(self, number);
}

- (void)divideWithGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)poly {
  GeogebraCommonKernelArithmeticPolynomial_divideWithGeogebraCommonKernelArithmeticExpressionValue_(self, [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) getConstantCoefficient]);
}

- (void)multiplyWithDouble:(jdouble)d {
  GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_(self, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, d) autorelease]);
}

- (void)powerWithInt:(jint)p
withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq {
  GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(self, p, eq);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getConstantCoefficient {
  return [self getCoefficientWithNSString:@""];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getCoefficientWithNSString:(NSString *)variables {
  GeogebraCommonKernelArithmeticTerm *t, *newTerm = [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], variables) autorelease];
  for (jint i = 0; i < [self length]; i++) {
    t = [self getTermWithInt:i];
    if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) getVars])) isEqual:variables]) [newTerm addToCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:t->coefficient_ withGeogebraCommonKernelKernel:kernel_];
  }
  return newTerm->coefficient_;
}

- (jdouble)getCoeffValueWithNSString:(NSString *)variables {
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self getCoefficientWithNSString:variables])) evaluateDouble];
}

- (void)simplifyWithGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eq {
  JavaUtilArrayList *list;
  IOSObjectArray *t;
  GeogebraCommonKernelArithmeticTerm *ti, *tj;
  NSString *vars;
  jint i, j, len;
  list = [new_JavaUtilArrayList_init() autorelease];
  t = [((JavaUtilArrayList *) nil_chk(terms_)) toArray];
  len = ((IOSObjectArray *) nil_chk(t))->size_;
  for (i = 0; i < len; i++) {
    ti = (GeogebraCommonKernelArithmeticTerm *) check_class_cast(IOSObjectArray_Get(t, i), [GeogebraCommonKernelArithmeticTerm class]);
    if (ti != nil) {
      vars = [ti getVars];
      for (j = i + 1; j < len; j++) {
        tj = (GeogebraCommonKernelArithmeticTerm *) check_class_cast(IOSObjectArray_Get(t, j), [GeogebraCommonKernelArithmeticTerm class]);
        if (tj != nil && [((NSString *) nil_chk(vars)) isEqual:[tj getVars]]) {
          [ti addToCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:tj->coefficient_ withGeogebraCommonKernelKernel:kernel_];
          IOSObjectArray_Set(t, j, nil);
        }
      }
      if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ti->coefficient_)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) {
        if (eq != nil) {
          [eq setIsPolynomialWithBoolean:NO];
        }
        return;
      }
      if (![ti->coefficient_ isConstant] || [ti->coefficient_ evaluateDouble] != 0.0) {
        [list addWithId:ti];
      }
    }
  }
  if ([list size] == 0) {
    [list addWithId:[new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.0) autorelease], @"") autorelease]];
  }
  GeogebraCommonKernelArithmeticPolynomial_set_terms_(self, list);
}

- (jboolean)containsWithNSString:(NSString *)var {
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(terms_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    if ([((GeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) containsWithNSString:var]) return YES;
  }
  return NO;
}

- (jint)degree {
  jint deg = 0;
  jint varLen;
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return -1;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    varLen = [((GeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) degree];
    if (varLen > deg) deg = varLen;
  }
  return deg;
}

- (jboolean)isFreeOfWithChar:(jchar)var {
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return YES;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    GeogebraCommonKernelArithmeticTerm *t = [i next];
    if ([((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:var] > 0) return NO;
  }
  return YES;
}

- (jint)singleDegree {
  jint deg = 0;
  jint varLen;
  if ([((JavaUtilArrayList *) nil_chk(terms_)) size] == 0) return -1;
  id<JavaUtilIterator> i = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    GeogebraCommonKernelArithmeticTerm *t = [i next];
    varLen = [((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x'];
    if (varLen > deg) deg = varLen;
    varLen = [t degreeWithChar:'y'];
    if (varLen > deg) deg = varLen;
    varLen = [t degreeWithChar:'z'];
    if (varLen > deg) deg = varLen;
  }
  return deg;
}

- (NSString *)description {
  return JreStrcat("$$", @"POLY", GeogebraCommonKernelArithmeticPolynomial_toStringWithGeogebraCommonKernelStringTemplate_(self, GeogebraCommonKernelStringTemplate_get_defaultTemplate_()));
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticPolynomial_toStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (IOSObjectArray *)getCoeff {
  [self simplifyWithGeogebraCommonKernelArithmeticEquation:nil];
  id<JavaUtilIterator> it = [((JavaUtilArrayList *) nil_chk(terms_)) iterator];
  jint degX = 0;
  jint degY = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelArithmeticTerm *t = [it next];
    degX = JavaLangMath_maxWithInt_withInt_(degX, [((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x']);
    degY = JavaLangMath_maxWithInt_withInt_(degY, [t degreeWithChar:'y']);
  }
  IOSObjectArray *coeff = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ degX + 1, degY + 1 } type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
  it = [terms_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelArithmeticTerm *t = [it next];
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(coeff, [((GeogebraCommonKernelArithmeticTerm *) nil_chk(t)) degreeWithChar:'x'])), [t degreeWithChar:'y'], [t getCoefficient]);
  }
  return coeff;
}

- (JavaUtilHashSet *)getVariables {
  return GeogebraCommonKernelArithmeticPolynomial_getVariables(self);
}

- (jboolean)isConstant {
  JavaUtilHashSet *vars = GeogebraCommonKernelArithmeticPolynomial_getVariables(self);
  return (vars == nil || [vars size] == 0);
}

+ (GeogebraCommonKernelArithmeticPolynomial *)fromNodeWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)lhs
                                                            withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)eqn {
  return GeogebraCommonKernelArithmeticPolynomial_fromNodeWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticEquation_(lhs, eqn);
}

- (GeogebraCommonKernelArithmeticPolynomial *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                            withGeogebraCommonKernelArithmeticPolynomial:(GeogebraCommonKernelArithmeticPolynomial *)rt
                                              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  switch ([operation ordinal]) {
    case GeogebraCommonPluginOperation_PLUS:
    [self addWithGeogebraCommonKernelArithmeticPolynomial:rt withGeogebraCommonKernelArithmeticEquation:equ];
    break;
    case GeogebraCommonPluginOperation_MINUS:
    GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
    break;
    case GeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
    case GeogebraCommonPluginOperation_MULTIPLY:
    GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
    break;
    case GeogebraCommonPluginOperation_DIVIDE:
    case GeogebraCommonPluginOperation_POWER:
    if ([((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(rt)) degree] != 0) {
      [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
      return rt;
    }
    return [self applyWithGeogebraCommonPluginOperationEnum:operation withGeogebraCommonKernelArithmeticExpressionValue:[rt getConstantCoefficient] withGeogebraCommonKernelArithmeticEquation:equ];
  }
  return self;
}

- (GeogebraCommonKernelArithmeticPolynomial *)applyWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                       withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)rt
                                              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ {
  {
    jdouble power;
    switch ([operation ordinal]) {
      case GeogebraCommonPluginOperation_PLUS:
      GeogebraCommonKernelArithmeticPolynomial_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
      break;
      case GeogebraCommonPluginOperation_MINUS:
      GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(self, rt, equ);
      break;
      case GeogebraCommonPluginOperation_MULTIPLY_OR_FUNCTION:
      case GeogebraCommonPluginOperation_MULTIPLY:
      GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_(self, rt);
      break;
      case GeogebraCommonPluginOperation_POWER:
      power = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(rt)) evaluateDouble];
      if ([((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_())) checkWithGeogebraCommonKernelArithmeticExpressionValue:rt]) {
        if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[rt evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) {
          [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
        }
        else {
          GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(self, J2ObjCFpToInt(power), equ);
        }
        [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) addVariableDegreeWithGeogebraCommonKernelArithmeticExpressionValue:rt];
      }
      else if ([self degree] == 0) {
        GeogebraCommonKernelArithmeticTerm_set_coefficient_(nil_chk([((JavaUtilArrayList *) nil_chk(terms_)) getWithInt:0]), [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(((GeogebraCommonKernelArithmeticTerm *) nil_chk([terms_ getWithInt:0]))->coefficient_)) wrap])) powerWithGeogebraCommonKernelArithmeticExpressionValue:rt]);
      }
      else if (!GeogebraCommonKernelKernel_isIntegerWithDouble_(power) || GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(0, power)) {
        [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) setIsPolynomialWithBoolean:NO];
      }
      else {
        GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(self, J2ObjCFpToInt(power), equ);
      }
      break;
      case GeogebraCommonPluginOperation_DIVIDE:
      GeogebraCommonKernelArithmeticPolynomial_divideWithGeogebraCommonKernelArithmeticExpressionValue_(self, rt);
      break;
    }
  }
  return self;
}

- (void)dealloc {
  RELEASE_(terms_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "Polynomial", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticTerm:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withNSString:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticPolynomial:", "Polynomial", NULL, 0x0, NULL, NULL },
    { "getTermWithInt:", "getTerm", "Lgeogebra.common.kernel.arithmetic.Term;", 0x0, NULL, NULL },
    { "length", NULL, "I", 0x0, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x0, NULL, NULL },
    { "isVarWithNSString:", "isVar", "Z", 0x0, NULL, NULL },
    { "appendWithGeogebraCommonKernelArithmeticTerm:", "append", "V", 0x2, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticPolynomial:withGeogebraCommonKernelArithmeticEquation:", "add", "V", 0x0, NULL, NULL },
    { "subWithGeogebraCommonKernelArithmeticPolynomial:withGeogebraCommonKernelArithmeticEquation:", "sub", "V", 0x2, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticEquation:", "add", "V", 0x2, NULL, NULL },
    { "subWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticEquation:", "sub", "V", 0x2, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticPolynomial:withGeogebraCommonKernelArithmeticEquation:", "multiply", "V", 0x2, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticExpressionValue:", "multiply", "V", 0x2, NULL, NULL },
    { "divideWithGeogebraCommonKernelArithmeticExpressionValue:", "divide", "V", 0x2, NULL, NULL },
    { "divideWithGeogebraCommonKernelArithmeticPolynomial:", "divide", "V", 0x2, NULL, NULL },
    { "multiplyWithDouble:", "multiply", "V", 0x0, NULL, NULL },
    { "powerWithInt:withGeogebraCommonKernelArithmeticEquation:", "power", "V", 0x2, NULL, NULL },
    { "getConstantCoefficient", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCoefficientWithNSString:", "getCoefficient", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCoeffValueWithNSString:", "getCoeffValue", "D", 0x1, NULL, NULL },
    { "simplifyWithGeogebraCommonKernelArithmeticEquation:", "simplify", "V", 0x0, NULL, NULL },
    { "containsWithNSString:", "contains", "Z", 0x0, NULL, NULL },
    { "degree", NULL, "I", 0x1, NULL, NULL },
    { "isFreeOfWithChar:", "isFreeOf", "Z", 0x1, NULL, NULL },
    { "singleDegree", NULL, "I", 0x0, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getCoeff", NULL, "[[Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x2, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "fromNodeWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticEquation:", "fromNode", "Lgeogebra.common.kernel.arithmetic.Polynomial;", 0x8, NULL, NULL },
    { "applyWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticPolynomial:withGeogebraCommonKernelArithmeticEquation:", "apply", "Lgeogebra.common.kernel.arithmetic.Polynomial;", 0x0, NULL, NULL },
    { "applyWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticEquation:", "apply", "Lgeogebra.common.kernel.arithmetic.Polynomial;", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelArithmeticPolynomial_serialVersionUID },
    { "terms_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/Term;>;",  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticPolynomial = { 2, "Polynomial", "geogebra.common.kernel.arithmetic", NULL, 0x1, 35, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticPolynomial;
}

@end

void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticPolynomial_setAndConsume_terms_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelArithmeticPolynomial_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticPolynomial *self = [GeogebraCommonKernelArithmeticPolynomial alloc];
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticTerm *t) {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:t];
}

GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticTerm *t) {
  GeogebraCommonKernelArithmeticPolynomial *self = [GeogebraCommonKernelArithmeticPolynomial alloc];
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticTerm_(self, kernel, t);
  return self;
}

void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, NSString *vars) {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:[new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(kernel, 1.0, vars) autorelease]];
}

GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *vars) {
  GeogebraCommonKernelArithmeticPolynomial *self = [GeogebraCommonKernelArithmeticPolynomial alloc];
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, vars);
  return self;
}

void GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticPolynomial *poly) {
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  for (jint i = 0; i < [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) length]; i++) {
    GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_([((JavaUtilArrayList *) nil_chk(poly->terms_)) getWithInt:i], kernel) autorelease]);
  }
}

GeogebraCommonKernelArithmeticPolynomial *new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelArithmeticPolynomial *poly) {
  GeogebraCommonKernelArithmeticPolynomial *self = [GeogebraCommonKernelArithmeticPolynomial alloc];
  GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(self, kernel, poly);
  return self;
}

void GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticTerm *t) {
  [((JavaUtilArrayList *) nil_chk(self->terms_)) addWithId:t];
}

void GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticPolynomial *e, GeogebraCommonKernelArithmeticEquation *eq) {
  GeogebraCommonKernelArithmeticPolynomial *temp = [new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(self->kernel_, e) autorelease];
  [temp multiplyWithDouble:-1.0];
  [self addWithGeogebraCommonKernelArithmeticPolynomial:temp withGeogebraCommonKernelArithmeticEquation:eq];
}

void GeogebraCommonKernelArithmeticPolynomial_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(number, @"") autorelease]);
  [self simplifyWithGeogebraCommonKernelArithmeticEquation:equ];
}

void GeogebraCommonKernelArithmeticPolynomial_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number, GeogebraCommonKernelArithmeticEquation *equ) {
  GeogebraCommonKernelArithmeticTerm *subTerm = [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(number, @"") autorelease];
  [subTerm multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease] withGeogebraCommonKernelKernel:self->kernel_];
  GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, subTerm);
  [self simplifyWithGeogebraCommonKernelArithmeticEquation:equ];
}

void GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelArithmeticPolynomial *e, GeogebraCommonKernelArithmeticEquation *equ) {
  JavaUtilArrayList *temp = [new_JavaUtilArrayList_init() autorelease];
  jint i, j;
  GeogebraCommonKernelArithmeticTerm *ti, *newTerm;
  for (i = 0; i < [self length]; i++) {
    ti = [self getTermWithInt:i];
    for (j = 0; j < [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(e)) length]; j++) {
      newTerm = [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_(ti, self->kernel_) autorelease];
      [newTerm multiplyWithGeogebraCommonKernelArithmeticTerm:[e getTermWithInt:j] withGeogebraCommonKernelKernel:self->kernel_];
      [temp addWithId:newTerm];
    }
  }
  GeogebraCommonKernelArithmeticPolynomial_set_terms_(self, temp);
  [self simplifyWithGeogebraCommonKernelArithmeticEquation:equ];
}

void GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number) {
  for (jint i = 0; i < [self length]; i++) {
    [((GeogebraCommonKernelArithmeticTerm *) nil_chk([((JavaUtilArrayList *) nil_chk(self->terms_)) getWithInt:i])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:number withGeogebraCommonKernelKernel:self->kernel_];
  }
}

void GeogebraCommonKernelArithmeticPolynomial_divideWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticPolynomial *self, id<GeogebraCommonKernelArithmeticExpressionValue> number) {
  for (jint i = 0; i < [self length]; i++) {
    [((GeogebraCommonKernelArithmeticTerm *) nil_chk([self getTermWithInt:i])) divideWithGeogebraCommonKernelArithmeticExpressionValue:number withGeogebraCommonKernelKernel:self->kernel_];
  }
}

void GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticPolynomial *self, jint p, GeogebraCommonKernelArithmeticEquation *eq) {
  if (p == 0) {
    [((JavaUtilArrayList *) nil_chk(self->terms_)) clear];
    GeogebraCommonKernelArithmeticPolynomial_appendWithGeogebraCommonKernelArithmeticTerm_(self, [new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_([new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1) autorelease], @"") autorelease]);
    return;
  }
  if (p < 2 || p == JavaLangInteger_MAX_VALUE) {
    return;
  }
  GeogebraCommonKernelArithmeticPolynomial *exp = [new_GeogebraCommonKernelArithmeticPolynomial_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticPolynomial_(self->kernel_, self) autorelease];
  GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, exp, eq);
  GeogebraCommonKernelArithmeticPolynomial_powerWithInt_withGeogebraCommonKernelArithmeticEquation_(self, p / 2, eq);
  if (p % 2 == 1) {
    GeogebraCommonKernelArithmeticPolynomial_multiplyWithGeogebraCommonKernelArithmeticPolynomial_withGeogebraCommonKernelArithmeticEquation_(self, exp, eq);
  }
}

NSString *GeogebraCommonKernelArithmeticPolynomial_toStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticPolynomial *self, GeogebraCommonKernelStringTemplate *tpl) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->terms_)) size];
  if (size == 0) return nil;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  NSString *termStr;
  jboolean first = YES;
  for (jint i = 0; i < size; i++) {
    termStr = [((GeogebraCommonKernelArithmeticTerm *) nil_chk([self->terms_ getWithInt:i])) toStringWithGeogebraCommonKernelStringTemplate:tpl];
    if (termStr != nil && ((jint) [termStr length]) > 0) {
      if (first) {
        [sb appendWithNSString:termStr];
        first = NO;
      }
      else {
        if ([termStr charAtWithInt:0] == '-') {
          [sb appendWithNSString:@" - "];
          [sb appendWithNSString:[termStr substring:1]];
        }
        else {
          [sb appendWithNSString:@" + "];
          [sb appendWithNSString:termStr];
        }
      }
    }
  }
  return [sb description];
}

JavaUtilHashSet *GeogebraCommonKernelArithmeticPolynomial_getVariables(GeogebraCommonKernelArithmeticPolynomial *self) {
  JavaUtilHashSet *temp, *vars = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(self->terms_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(i)) hasNext]) {
    temp = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticTerm *) nil_chk([i next])) getCoefficient])) getVariables];
    if (temp != nil) {
      [vars addAllWithJavaUtilCollection:temp];
    }
  }
  return vars;
}

GeogebraCommonKernelArithmeticPolynomial *GeogebraCommonKernelArithmeticPolynomial_fromNodeWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticEquation_(GeogebraCommonKernelArithmeticExpressionNode *lhs, GeogebraCommonKernelArithmeticEquation *eqn) {
  GeogebraCommonKernelArithmeticPolynomial_initialize();
  GeogebraCommonKernelArithmeticExpressionNode *leftEN = [lhs getCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs)) getKernel]];
  GeogebraCommonKernelArithmeticPolynomial *poly = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(leftEN)) makePolynomialTreeWithGeogebraCommonKernelArithmeticEquation:eqn];
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticPolynomial)
