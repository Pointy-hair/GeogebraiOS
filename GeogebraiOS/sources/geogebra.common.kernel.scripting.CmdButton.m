//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdButton.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdButton.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdButton

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdButton_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    GeogebraCommonKernelGeosGeoButton *gb;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoText]) {
        NSString *caption = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoText class])))) getTextString];
        GeogebraCommonKernelGeosGeoButton *gb = [new_GeogebraCommonKernelGeosGeoButton_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
        [gb setLabelVisibleWithBoolean:YES];
        [gb setLabelWithNSString:[c getLabel]];
        [gb setCaptionWithNSString:caption];
        [gb updateRepaint];
        return [IOSObjectArray arrayWithObjects:(id[]){ gb } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 0:
      gb = [new_GeogebraCommonKernelGeosGeoButton_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [gb setLabelVisibleWithBoolean:YES];
      [gb setLabelWithNSString:[c getLabel]];
      [gb updateRepaint];
      return [IOSObjectArray arrayWithObjects:(id[]){ gb } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdButton", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdButton = { 2, "CmdButton", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdButton;
}

@end

void GeogebraCommonKernelScriptingCmdButton_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdButton *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdButton *new_GeogebraCommonKernelScriptingCmdButton_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdButton *self = [GeogebraCommonKernelScriptingCmdButton alloc];
  GeogebraCommonKernelScriptingCmdButton_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdButton)
