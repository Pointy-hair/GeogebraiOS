//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianDraw.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianDraw.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/euclidian/draw/DrawBarGraph.h"
#include "geogebra/common/euclidian/draw/DrawBoolean.h"
#include "geogebra/common/euclidian/draw/DrawBoxPlot.h"
#include "geogebra/common/euclidian/draw/DrawButton.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawConicPart.h"
#include "geogebra/common/euclidian/draw/DrawConicSection.h"
#include "geogebra/common/euclidian/draw/DrawImage.h"
#include "geogebra/common/euclidian/draw/DrawImplicitPoly.h"
#include "geogebra/common/euclidian/draw/DrawInequality.h"
#include "geogebra/common/euclidian/draw/DrawIntegral.h"
#include "geogebra/common/euclidian/draw/DrawIntegralFunctions.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/euclidian/draw/DrawList.h"
#include "geogebra/common/euclidian/draw/DrawLocus.h"
#include "geogebra/common/euclidian/draw/DrawNyquist.h"
#include "geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "geogebra/common/euclidian/draw/DrawPoint.h"
#include "geogebra/common/euclidian/draw/DrawPointPlot.h"
#include "geogebra/common/euclidian/draw/DrawPolyLine.h"
#include "geogebra/common/euclidian/draw/DrawPolygon.h"
#include "geogebra/common/euclidian/draw/DrawRay.h"
#include "geogebra/common/euclidian/draw/DrawSegment.h"
#include "geogebra/common/euclidian/draw/DrawSlider.h"
#include "geogebra/common/euclidian/draw/DrawSlope.h"
#include "geogebra/common/euclidian/draw/DrawText.h"
#include "geogebra/common/euclidian/draw/DrawTextField.h"
#include "geogebra/common/euclidian/draw/DrawTurtle.h"
#include "geogebra/common/euclidian/draw/DrawUpperLowerSum.h"
#include "geogebra/common/euclidian/draw/DrawVector.h"
#include "geogebra/common/kernel/AlgoCasCellInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "geogebra/common/kernel/algos/AlgoIntegralFunctions.h"
#include "geogebra/common/kernel/algos/AlgoSlope.h"
#include "geogebra/common/kernel/algos/AlgoTransferFunction.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/geos/GeoTransferFunction.h"
#include "geogebra/common/kernel/geos/GeoTurtle.h"
#include "geogebra/common/kernel/geos/ParametricCurve.h"
#include "geogebra/common/kernel/implicit/GeoImplicitCurve.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/kernel/statistics/AlgoDotPlot.h"
#include "geogebra/common/plugin/GeoClass.h"

@implementation GeogebraCommonEuclidianEuclidianDraw

+ (GeogebraCommonEuclidianDrawableND *)newDrawableWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)ev
                                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonEuclidianEuclidianDraw_newDrawableWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(ev, geo);
}

- (instancetype)init {
  GeogebraCommonEuclidianEuclidianDraw_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newDrawableWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lgeogebra.common.euclidian.DrawableND;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianDraw = { 2, "EuclidianDraw", "geogebra.common.euclidian", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianDraw;
}

@end

GeogebraCommonEuclidianDrawableND *GeogebraCommonEuclidianEuclidianDraw_newDrawableWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianEuclidianView *ev, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonEuclidianEuclidianDraw_initialize();
  GeogebraCommonEuclidianDrawable *d = nil;
  {
    GeogebraCommonKernelAlgosAlgoElement *algo;
    GeogebraCommonKernelGeosGeoText *text;
    switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_BOOLEAN:
      d = [new_GeogebraCommonEuclidianDrawDrawBoolean_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoBoolean_(ev, (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_BUTTON:
      d = [new_GeogebraCommonEuclidianDrawDrawButton_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoButton_(ev, (GeogebraCommonKernelGeosGeoButton *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoButton class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_TEXTFIELD:
      d = [new_GeogebraCommonEuclidianDrawDrawTextField_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTextField_(ev, (GeogebraCommonKernelGeosGeoTextField *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoTextField class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_POINT:
      case GeogebraCommonPluginGeoClass_POINT3D:
      d = [new_GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_(ev, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_SEGMENT:
      case GeogebraCommonPluginGeoClass_SEGMENT3D:
      d = [new_GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_RAY:
      case GeogebraCommonPluginGeoClass_RAY3D:
      d = [new_GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<GeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoRayND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_LINE:
      case GeogebraCommonPluginGeoClass_LINE3D:
      d = [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(ev, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_POLYGON:
      case GeogebraCommonPluginGeoClass_POLYGON3D:
      d = [new_GeogebraCommonEuclidianDrawDrawPolygon_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolygon_(ev, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_PENSTROKE:
      case GeogebraCommonPluginGeoClass_POLYLINE:
      d = [new_GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoPolyLine_(ev, (GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolyLine class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_FUNCTION_NVAR:
      if ([((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunctionNVar class])) isBooleanFunction] && [((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunctionNVar class])) getVarNumber] < 3) {
        d = [new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunctionNVar class])) autorelease];
      }
      break;
      case GeogebraCommonPluginGeoClass_INTERVAL:
      if ([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) isBooleanFunction]) {
        d = [new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) autorelease];
      }
      break;
      case GeogebraCommonPluginGeoClass_ANGLE:
      if ([geo isIndependent]) {
        if ([geo isEuclidianVisible]) {
          [geo setEuclidianVisibleWithBoolean:NO];
          [geo setEuclidianVisibleWithBoolean:YES];
        }
        d = [new_GeogebraCommonEuclidianDrawDrawSlider_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else {
        d = [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getCompanion])) newDrawAngleWithGeogebraCommonKernelGeosGeoAngle:(GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class])];
        if ([geo isDrawable]) {
          if (![geo isColorSet]) {
            GeogebraCommonAwtGColor *col = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) getConstructionDefaults])) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE])) getObjectColor];
            [geo setObjColorWithGeogebraCommonAwtGColor:col];
          }
        }
      }
      break;
      case GeogebraCommonPluginGeoClass_NUMERIC:
      algo = [geo getDrawAlgorithm];
      if (algo == nil) {
        if ([geo isEuclidianVisible]) {
          [geo setEuclidianVisibleWithBoolean:NO];
          [geo setEuclidianVisibleWithBoolean:YES];
        }
        d = [new_GeogebraCommonEuclidianDrawDrawSlider_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoSlope class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawSlope_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelCasAlgoIntegralDefinite class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawIntegral_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]), NO) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntegralFunctions class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]), NO) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoFunctionAreaSums class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawUpperLowerSum_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoBoxPlot class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawBoxPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoBarChart class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawBarGraph_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
      }
      else if ([GeogebraCommonKernelAlgoCasCellInterface_class_() isInstance:algo]) {
        GeogebraCommonKernelArithmeticValidExpression *ve = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonKernelAlgoCasCellInterface>) check_protocol_cast(algo, @protocol(GeogebraCommonKernelAlgoCasCellInterface))) getCasCell])) getInputVE];
        if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) isTopLevelCommand]) {
          GeogebraCommonKernelArithmeticCommand *cmd = [ve getTopLevelCommand];
          NSString *name = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getName];
          if ([@"IntegralBetween" isEqual:name] && [cmd getArgumentNumber] == 4) {
            d = [new_GeogebraCommonEuclidianDrawDrawIntegralFunctions_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]), YES) autorelease];
          }
          else if ([@"Integral" isEqual:name] && [cmd getArgumentNumber] == 3) {
            d = [new_GeogebraCommonEuclidianDrawDrawIntegral_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(ev, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]), YES) autorelease];
          }
        }
      }
      if (d != nil) {
        if (![geo isColorSet]) {
          GeogebraCommonKernelConstructionDefaults *consDef = [((GeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) getConstructionDefaults];
          if ([geo isIndependent]) {
            GeogebraCommonAwtGColor *col = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk(consDef)) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER])) getObjectColor];
            [geo setObjColorWithGeogebraCommonAwtGColor:col];
            [geo setLineThicknessWithInt:GeogebraCommonKernelGeosGeoNumeric_DEFAULT_SLIDER_THICKNESS];
          }
          else {
            GeogebraCommonAwtGColor *col = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelConstructionDefaults *) nil_chk(consDef)) getDefaultGeoWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON])) getObjectColor];
            [geo setObjColorWithGeogebraCommonAwtGColor:col];
          }
        }
      }
      break;
      case GeogebraCommonPluginGeoClass_VECTOR:
      case GeogebraCommonPluginGeoClass_VECTOR3D:
      d = [new_GeogebraCommonEuclidianDrawDrawVector_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoVectorND_(ev, (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoVectorND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_CONICPART:
      d = [new_GeogebraCommonEuclidianDrawDrawConicPart_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicPartND_(ev, (id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_CONIC:
      case GeogebraCommonPluginGeoClass_CONIC3D:
      d = [new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(ev, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class]), NO) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_CONICSECTION:
      d = [new_GeogebraCommonEuclidianDrawDrawConicSection_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_(ev, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_IMPLICIT_POLY:
      d = [new_GeogebraCommonEuclidianDrawDrawImplicitPoly_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelImplicitGeoImplicitPoly_(ev, (GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geo, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_IMPLICIT_CURVE:
      d = [new_GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(ev, [((GeogebraCommonKernelImplicitGeoImplicitCurve *) check_class_cast(geo, [GeogebraCommonKernelImplicitGeoImplicitCurve class])) getLocus]) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_FUNCTION:
      case GeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
      if ([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) isBooleanFunction]) {
        d = [new_GeogebraCommonEuclidianDrawDrawInequality_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelArithmeticFunctionalNVar_(ev, (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))) autorelease];
      }
      else {
        d = [new_GeogebraCommonEuclidianDrawDrawParametricCurve_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDCurveEvaluable_(ev, (id<GeogebraCommonKernelGeosParametricCurve>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosParametricCurve))) autorelease];
      }
      break;
      case GeogebraCommonPluginGeoClass_TEXT:
      text = (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]);
      d = [new_GeogebraCommonEuclidianDrawDrawText_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoText_(ev, text) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_IMAGE:
      d = [new_GeogebraCommonEuclidianDrawDrawImage_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoImage_(ev, (GeogebraCommonKernelGeosGeoImage *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoImage class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_LOCUS:
      d = [new_GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(ev, (GeogebraCommonKernelGeosGeoLocusND *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLocusND class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
      d = [new_GeogebraCommonEuclidianDrawDrawParametricCurve_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDCurveEvaluable_(ev, (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])) autorelease];
      break;
      case GeogebraCommonPluginGeoClass_CURVE_POLAR:
      if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoTransferFunction class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawNyquist_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTransferFunction_(ev, (GeogebraCommonKernelGeosGeoTransferFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoTransferFunction class])) autorelease];
      }
      break;
      case GeogebraCommonPluginGeoClass_LIST:
      algo = [geo getParentAlgorithm];
      if ([algo isKindOfClass:[GeogebraCommonKernelStatisticsAlgoDotPlot class]]) {
        d = [new_GeogebraCommonEuclidianDrawDrawPointPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonEuclidianDrawDrawPointPlot_DrawTypeEnum_(ev, (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]), GeogebraCommonEuclidianDrawDrawPointPlot_DrawTypeEnum_get_DOT_PLOT()) autorelease];
      }
      else {
        d = [new_GeogebraCommonEuclidianDrawDrawList_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_(ev, (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) autorelease];
      }
      break;
      case GeogebraCommonPluginGeoClass_TURTLE:
      d = [new_GeogebraCommonEuclidianDrawDrawTurtle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTurtle_(ev, (GeogebraCommonKernelGeosGeoTurtle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoTurtle class])) autorelease];
      break;
    }
  }
  return d;
}

void GeogebraCommonEuclidianEuclidianDraw_init(GeogebraCommonEuclidianEuclidianDraw *self) {
  NSObject_init(self);
}

GeogebraCommonEuclidianEuclidianDraw *new_GeogebraCommonEuclidianEuclidianDraw_init() {
  GeogebraCommonEuclidianEuclidianDraw *self = [GeogebraCommonEuclidianEuclidianDraw alloc];
  GeogebraCommonEuclidianEuclidianDraw_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianDraw)
