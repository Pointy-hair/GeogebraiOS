//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/CmdCellRange.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "geogebra/common/kernel/statistics/CmdCellRange.h"
#include "geogebra/common/main/AlgoCellRangeManager.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/plugin/Operation.h"

@implementation GeogebraCommonKernelStatisticsCmdCellRange

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelStatisticsCmdCellRange_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    IOSObjectArray *args;
    switch (n) {
      case 2:
      args = [c getArguments];
      if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) getOperation] == GeogebraCommonPluginOperationEnum_get_NO_OPERATION() && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) getLeft])) isVariable] && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) getOperation] == GeogebraCommonPluginOperationEnum_get_NO_OPERATION() && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) getLeft])) isVariable]) {
        NSString *start = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) getLeft], [GeogebraCommonKernelArithmeticVariable class])))) getName];
        NSString *end = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 1))) getLeft], [GeogebraCommonKernelArithmeticVariable class])))) getName];
        if (GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(start) && GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(end)) {
          GeogebraCommonKernelStatisticsAlgoCellRange *algo = [((GeogebraCommonMainAlgoCellRangeManager *) nil_chk([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSpreadsheetTableModel])) getCellRangeManager])) getAlgoCellRangeWithGeogebraCommonKernelConstruction:cons_ withNSString:[c getLabel] withNSString:start withNSString:end];
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getList] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdCellRange", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsCmdCellRange = { 2, "CmdCellRange", "geogebra.common.kernel.statistics", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsCmdCellRange;
}

@end

void GeogebraCommonKernelStatisticsCmdCellRange_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelStatisticsCmdCellRange *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelStatisticsCmdCellRange *new_GeogebraCommonKernelStatisticsCmdCellRange_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelStatisticsCmdCellRange *self = [GeogebraCommonKernelStatisticsCmdCellRange alloc];
  GeogebraCommonKernelStatisticsCmdCellRange_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsCmdCellRange)
