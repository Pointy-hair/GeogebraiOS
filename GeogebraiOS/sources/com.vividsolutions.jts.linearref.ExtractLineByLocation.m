//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/linearref/ExtractLineByLocation.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateList.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/linearref/ExtractLineByLocation.h"
#include "com/vividsolutions/jts/linearref/LinearGeometryBuilder.h"
#include "com/vividsolutions/jts/linearref/LinearIterator.h"
#include "com/vividsolutions/jts/linearref/LinearLocation.h"
#include "com/vividsolutions/jts/util/Assert.h"

@interface ComVividsolutionsJtsLinearrefExtractLineByLocation () {
 @public
  ComVividsolutionsJtsGeomGeometry *line_;
}

- (ComVividsolutionsJtsGeomGeometry *)reverseWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)linear;

- (ComVividsolutionsJtsGeomLineString *)computeLineWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                                   withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end;

- (ComVividsolutionsJtsGeomGeometry *)computeLinearWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                                   withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsLinearrefExtractLineByLocation, line_, ComVividsolutionsJtsGeomGeometry *)

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsLinearrefExtractLineByLocation_reverseWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsLinearrefExtractLineByLocation *self, ComVividsolutionsJtsGeomGeometry *linear);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsLinearrefExtractLineByLocation_computeLinearWithComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(ComVividsolutionsJtsLinearrefExtractLineByLocation *self, ComVividsolutionsJtsLinearrefLinearLocation *start, ComVividsolutionsJtsLinearrefLinearLocation *end);

@implementation ComVividsolutionsJtsLinearrefExtractLineByLocation

+ (ComVividsolutionsJtsGeomGeometry *)extractWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)line
                                  withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                  withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end {
  return ComVividsolutionsJtsLinearrefExtractLineByLocation_extractWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(line, start, end);
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)line {
  ComVividsolutionsJtsLinearrefExtractLineByLocation_initWithComVividsolutionsJtsGeomGeometry_(self, line);
  return self;
}

- (ComVividsolutionsJtsGeomGeometry *)extractWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                             withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end {
  if ([((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(end)) compareToWithId:start] < 0) {
    return ComVividsolutionsJtsLinearrefExtractLineByLocation_reverseWithComVividsolutionsJtsGeomGeometry_(self, ComVividsolutionsJtsLinearrefExtractLineByLocation_computeLinearWithComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(self, end, start));
  }
  return ComVividsolutionsJtsLinearrefExtractLineByLocation_computeLinearWithComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(self, start, end);
}

- (ComVividsolutionsJtsGeomGeometry *)reverseWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)linear {
  return ComVividsolutionsJtsLinearrefExtractLineByLocation_reverseWithComVividsolutionsJtsGeomGeometry_(self, linear);
}

- (ComVividsolutionsJtsGeomLineString *)computeLineWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                                   withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end {
  IOSObjectArray *coordinates = [((ComVividsolutionsJtsGeomGeometry *) nil_chk(line_)) getCoordinates];
  ComVividsolutionsJtsGeomCoordinateList *newCoordinates = [new_ComVividsolutionsJtsGeomCoordinateList_init() autorelease];
  jint startSegmentIndex = [((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(start)) getSegmentIndex];
  if ([start getSegmentFraction] > 0.0) startSegmentIndex += 1;
  jint lastSegmentIndex = [((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(end)) getSegmentIndex];
  if ([end getSegmentFraction] == 1.0) lastSegmentIndex += 1;
  if (lastSegmentIndex >= ((IOSObjectArray *) nil_chk(coordinates))->size_) lastSegmentIndex = coordinates->size_ - 1;
  if (![start isVertex]) [newCoordinates addWithId:[start getCoordinateWithComVividsolutionsJtsGeomGeometry:line_]];
  for (jint i = startSegmentIndex; i <= lastSegmentIndex; i++) {
    [newCoordinates addWithId:IOSObjectArray_Get(coordinates, i)];
  }
  if (![end isVertex]) [newCoordinates addWithId:[end getCoordinateWithComVividsolutionsJtsGeomGeometry:line_]];
  if ([newCoordinates size] <= 0) [newCoordinates addWithId:[start getCoordinateWithComVividsolutionsJtsGeomGeometry:line_]];
  IOSObjectArray *newCoordinateArray = [newCoordinates toCoordinateArray];
  if (((IOSObjectArray *) nil_chk(newCoordinateArray))->size_ <= 1) {
    newCoordinateArray = [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(newCoordinateArray, 0), IOSObjectArray_Get(newCoordinateArray, 0) } count:2 type:ComVividsolutionsJtsGeomCoordinate_class_()];
  }
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([line_ getFactory])) createLineStringWithComVividsolutionsJtsGeomCoordinateArray:newCoordinateArray];
}

- (ComVividsolutionsJtsGeomGeometry *)computeLinearWithComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)start
                                                   withComVividsolutionsJtsLinearrefLinearLocation:(ComVividsolutionsJtsLinearrefLinearLocation *)end {
  return ComVividsolutionsJtsLinearrefExtractLineByLocation_computeLinearWithComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(self, start, end);
}

- (void)dealloc {
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "extractWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsLinearrefLinearLocation:withComVividsolutionsJtsLinearrefLinearLocation:", "extract", "Lcom.vividsolutions.jts.geom.Geometry;", 0x9, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:", "ExtractLineByLocation", NULL, 0x1, NULL, NULL },
    { "extractWithComVividsolutionsJtsLinearrefLinearLocation:withComVividsolutionsJtsLinearrefLinearLocation:", "extract", "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "reverseWithComVividsolutionsJtsGeomGeometry:", "reverse", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
    { "computeLineWithComVividsolutionsJtsLinearrefLinearLocation:withComVividsolutionsJtsLinearrefLinearLocation:", "computeLine", "Lcom.vividsolutions.jts.geom.LineString;", 0x2, NULL, NULL },
    { "computeLinearWithComVividsolutionsJtsLinearrefLinearLocation:withComVividsolutionsJtsLinearrefLinearLocation:", "computeLinear", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsLinearrefExtractLineByLocation = { 2, "ExtractLineByLocation", "com.vividsolutions.jts.linearref", NULL, 0x0, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsLinearrefExtractLineByLocation;
}

@end

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsLinearrefExtractLineByLocation_extractWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(ComVividsolutionsJtsGeomGeometry *line, ComVividsolutionsJtsLinearrefLinearLocation *start, ComVividsolutionsJtsLinearrefLinearLocation *end) {
  ComVividsolutionsJtsLinearrefExtractLineByLocation_initialize();
  ComVividsolutionsJtsLinearrefExtractLineByLocation *ls = [new_ComVividsolutionsJtsLinearrefExtractLineByLocation_initWithComVividsolutionsJtsGeomGeometry_(line) autorelease];
  return [ls extractWithComVividsolutionsJtsLinearrefLinearLocation:start withComVividsolutionsJtsLinearrefLinearLocation:end];
}

void ComVividsolutionsJtsLinearrefExtractLineByLocation_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsLinearrefExtractLineByLocation *self, ComVividsolutionsJtsGeomGeometry *line) {
  NSObject_init(self);
  ComVividsolutionsJtsLinearrefExtractLineByLocation_set_line_(self, line);
}

ComVividsolutionsJtsLinearrefExtractLineByLocation *new_ComVividsolutionsJtsLinearrefExtractLineByLocation_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *line) {
  ComVividsolutionsJtsLinearrefExtractLineByLocation *self = [ComVividsolutionsJtsLinearrefExtractLineByLocation alloc];
  ComVividsolutionsJtsLinearrefExtractLineByLocation_initWithComVividsolutionsJtsGeomGeometry_(self, line);
  return self;
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsLinearrefExtractLineByLocation_reverseWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsLinearrefExtractLineByLocation *self, ComVividsolutionsJtsGeomGeometry *linear) {
  if ([linear isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) return [((ComVividsolutionsJtsGeomLineString *) nil_chk(((ComVividsolutionsJtsGeomLineString *) check_class_cast(linear, [ComVividsolutionsJtsGeomLineString class])))) reverse];
  if ([linear isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]]) return [((ComVividsolutionsJtsGeomMultiLineString *) nil_chk(((ComVividsolutionsJtsGeomMultiLineString *) check_class_cast(linear, [ComVividsolutionsJtsGeomMultiLineString class])))) reverse];
  ComVividsolutionsJtsUtilAssert_shouldNeverReachHereWithNSString_(@"non-linear geometry encountered");
  return nil;
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsLinearrefExtractLineByLocation_computeLinearWithComVividsolutionsJtsLinearrefLinearLocation_withComVividsolutionsJtsLinearrefLinearLocation_(ComVividsolutionsJtsLinearrefExtractLineByLocation *self, ComVividsolutionsJtsLinearrefLinearLocation *start, ComVividsolutionsJtsLinearrefLinearLocation *end) {
  ComVividsolutionsJtsLinearrefLinearGeometryBuilder *builder = [new_ComVividsolutionsJtsLinearrefLinearGeometryBuilder_initWithComVividsolutionsJtsGeomGeometryFactory_([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->line_)) getFactory]) autorelease];
  [builder setFixInvalidLinesWithBoolean:YES];
  if (![((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(start)) isVertex]) [builder addWithComVividsolutionsJtsGeomCoordinate:[start getCoordinateWithComVividsolutionsJtsGeomGeometry:self->line_]];
  for (ComVividsolutionsJtsLinearrefLinearIterator *it = [new_ComVividsolutionsJtsLinearrefLinearIterator_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsLinearrefLinearLocation_(self->line_, start) autorelease]; [it hasNext]; [it next]) {
    if ([((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(end)) compareLocationValuesWithInt:[it getComponentIndex] withInt:[it getVertexIndex] withDouble:0.0] < 0) break;
    ComVividsolutionsJtsGeomCoordinate *pt = [it getSegmentStart];
    [builder addWithComVividsolutionsJtsGeomCoordinate:pt];
    if ([it isEndOfLine]) [builder endLine];
  }
  if (![((ComVividsolutionsJtsLinearrefLinearLocation *) nil_chk(end)) isVertex]) [builder addWithComVividsolutionsJtsGeomCoordinate:[end getCoordinateWithComVividsolutionsJtsGeomGeometry:self->line_]];
  return [builder getGeometry];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsLinearrefExtractLineByLocation)
