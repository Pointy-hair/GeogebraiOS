//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/OpenMapRealVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealVector.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/OpenMapRealMatrix.h"
#include "org/apache/commons/math/linear/OpenMapRealVector.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/OpenIntToDoubleHashMap.h"

#define OrgApacheCommonsMathLinearOpenMapRealVector_serialVersionUID 8772222695580707260LL

@interface OrgApacheCommonsMathLinearOpenMapRealVector () {
 @public
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *entries_;
  jint virtualSize_;
  jdouble epsilon_;
}

- (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *)getEntries;

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealVector, entries_, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearOpenMapRealVector, serialVersionUID, jlong)

__attribute__((unused)) static OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(OrgApacheCommonsMathLinearOpenMapRealVector *self);

__attribute__((unused)) static jdouble OrgApacheCommonsMathLinearOpenMapRealVector_getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *self, OrgApacheCommonsMathLinearOpenMapRealVector *v);

@interface OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry () {
 @public
  OrgApacheCommonsMathLinearOpenMapRealVector *this$0_;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry, this$0_, OrgApacheCommonsMathLinearOpenMapRealVector *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry, iter_, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *)

@interface OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator () {
 @public
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter_;
  OrgApacheCommonsMathLinearRealVector_Entry *current_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator, iter_, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator, current_, OrgApacheCommonsMathLinearRealVector_Entry *)

@implementation OrgApacheCommonsMathLinearOpenMapRealVector

- (instancetype)init {
  OrgApacheCommonsMathLinearOpenMapRealVector_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)dimension {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_(self, dimension);
  return self;
}

- (instancetype)initWithInt:(jint)dimension
                 withDouble:(jdouble)epsilon {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(self, dimension, epsilon);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v
                                                            withInt:(jint)resize {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(self, v, resize);
  return self;
}

- (instancetype)initWithInt:(jint)dimension
                    withInt:(jint)expectedSize {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_(self, dimension, expectedSize);
  return self;
}

- (instancetype)initWithInt:(jint)dimension
                    withInt:(jint)expectedSize
                 withDouble:(jdouble)epsilon {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_withDouble_(self, dimension, expectedSize, epsilon);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)values {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_(self, values);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)values
                         withDouble:(jdouble)epsilon {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_withDouble_(self, values, epsilon);
  return self;
}

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)values {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_(self, values);
  return self;
}

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)values
                                 withDouble:(jdouble)epsilon {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_withDouble_(self, values, epsilon);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, v);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearRealVector_(self, v);
  return self;
}

- (OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *)getEntries {
  return OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(self);
}

- (jboolean)isDefaultValueWithDouble:(jdouble)value {
  return OrgApacheCommonsMathUtilFastMath_absWithDouble_(value) < epsilon_;
}

- (id<OrgApacheCommonsMathLinearRealVector>)addWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self addWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  else {
    return [super addWithOrgApacheCommonsMathLinearRealVector:v];
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)addWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension]];
  jboolean copyThis = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) size] > [v->entries_ size];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = copyThis ? [self copy__] : [v copy__];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = copyThis ? [v->entries_ iterator] : [entries_ iterator];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *randomAccess = copyThis ? entries_ : v->entries_;
  while ([iter hasNext]) {
    [iter advance];
    jint key = [iter key];
    if ([randomAccess containsKeyWithInt:key]) {
      [res setEntryWithInt:key withDouble:[randomAccess getWithInt:key] + [iter value]];
    }
    else {
      [res setEntryWithInt:key withDouble:[iter value]];
    }
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)appendWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(self, [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension]) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(v->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] + virtualSize_ withDouble:[iter value]];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)appendWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self appendWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  return [self appendWithDoubleArray:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getData]];
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)appendWithDouble:(jdouble)d {
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(self, 1) autorelease];
  [res setEntryWithInt:virtualSize_ withDouble:d];
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)appendWithDoubleArray:(IOSDoubleArray *)a {
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(self, ((IOSDoubleArray *) nil_chk(a))->size_) autorelease];
  for (jint i = 0; i < a->size_; i++) {
    [res setEntryWithInt:i + virtualSize_ withDouble:IOSDoubleArray_Get(a, i)];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)copy__ {
  return [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
}

- (jdouble)dotProductWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension]];
  jboolean thisIsSmaller = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) size] < [v->entries_ size];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = thisIsSmaller ? [entries_ iterator] : [v->entries_ iterator];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *larger = thisIsSmaller ? v->entries_ : entries_;
  jdouble d = 0;
  while ([iter hasNext]) {
    [iter advance];
    d += [iter value] * [larger getWithInt:[iter key]];
  }
  return d;
}

- (jdouble)dotProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self dotProductWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  else {
    return [super dotProductWithOrgApacheCommonsMathLinearRealVector:v];
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)ebeDivideWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withDouble:[iter value] / [v getEntryWithInt:[iter key]]];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)ebeDivideWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withDouble:[iter value] / IOSDoubleArray_Get(v, [iter key])];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)ebeMultiplyWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withDouble:[iter value] * [v getEntryWithInt:[iter key]]];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)ebeMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(res->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [res setEntryWithInt:[iter key] withDouble:[iter value] * IOSDoubleArray_Get(v, [iter key])];
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)getSubVectorWithInt:(jint)index
                                                             withInt:(jint)n {
  [self checkIndexWithInt:index];
  [self checkIndexWithInt:index + n - 1];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_(n) autorelease];
  jint end = index + n;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if (key >= index && key < end) {
      [res setEntryWithInt:key - index withDouble:[iter value]];
    }
  }
  return res;
}

- (IOSDoubleArray *)getData {
  IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:virtualSize_];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    *IOSDoubleArray_GetRef(res, [iter key]) = [iter value];
  }
  return res;
}

- (jint)getDimension {
  return virtualSize_;
}

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  jdouble res = 0;
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    jdouble delta;
    delta = [iter value] - [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getEntryWithInt:key];
    res += delta * delta;
  }
  iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(nil_chk(v)))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if (![entries_ containsKeyWithInt:key]) {
      jdouble value = [iter value];
      res += value * value;
    }
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(res);
}

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self getDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  return [self getDistanceWithDoubleArray:[v getData]];
}

- (jdouble)getDistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble res = 0;
  for (jint i = 0; i < v->size_; i++) {
    jdouble delta = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) getWithInt:i] - IOSDoubleArray_Get(v, i);
    res += delta * delta;
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(res);
}

- (jdouble)getEntryWithInt:(jint)index {
  [self checkIndexWithInt:index];
  return [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) getWithInt:index];
}

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  jdouble max = 0;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jdouble delta = OrgApacheCommonsMathUtilFastMath_absWithDouble_([iter value] - [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getEntryWithInt:[iter key]]);
    max += delta;
  }
  iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(nil_chk(v)))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if (![entries_ containsKeyWithInt:key]) {
      jdouble delta = OrgApacheCommonsMathUtilFastMath_absWithDouble_([iter value]);
      max += OrgApacheCommonsMathUtilFastMath_absWithDouble_(delta);
    }
  }
  return max;
}

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self getL1DistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  return [self getL1DistanceWithDoubleArray:[v getData]];
}

- (jdouble)getL1DistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble max = 0;
  for (jint i = 0; i < v->size_; i++) {
    jdouble delta = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self getEntryWithInt:i] - IOSDoubleArray_Get(v, i));
    max += delta;
  }
  return max;
}

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  return OrgApacheCommonsMathLinearOpenMapRealVector_getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, v);
}

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return OrgApacheCommonsMathLinearOpenMapRealVector_getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, (OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class]));
  }
  return [self getLInfDistanceWithDoubleArray:[v getData]];
}

- (jdouble)getLInfDistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble max = 0;
  for (jint i = 0; i < v->size_; i++) {
    jdouble delta = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self getEntryWithInt:i] - IOSDoubleArray_Get(v, i));
    if (delta > max) {
      max = delta;
    }
  }
  return max;
}

- (jboolean)isInfinite {
  jboolean infiniteFound = NO;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jdouble value = [iter value];
    if (JavaLangDouble_isNaNWithDouble_(value)) {
      return NO;
    }
    if (JavaLangDouble_isInfiniteWithDouble_(value)) {
      infiniteFound = YES;
    }
  }
  return infiniteFound;
}

- (jboolean)isNaN {
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    if (JavaLangDouble_isNaNWithDouble_([iter value])) {
      return YES;
    }
  }
  return NO;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)mapAddWithDouble:(jdouble)d {
  return [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk([self copy__])) mapAddToSelfWithDouble:d];
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)mapAddToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < virtualSize_; i++) {
    [self setEntryWithInt:i withDouble:[self getEntryWithInt:i] + d];
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  id<OrgApacheCommonsMathLinearRealMatrix> res = [new_OrgApacheCommonsMathLinearOpenMapRealMatrix_initWithInt_withInt_(virtualSize_, virtualSize_) autorelease];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint row = [iter key];
    jdouble value = [iter value];
    for (jint col = 0; col < virtualSize_; col++) {
      [res setEntryWithInt:row withInt:col withDouble:value * IOSDoubleArray_Get(v, col)];
    }
  }
  return res;
}

- (id<OrgApacheCommonsMathLinearRealVector>)projectionWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  return [v mapMultiplyWithDouble:[self dotProductWithOrgApacheCommonsMathLinearRealVector:v] / [v dotProductWithOrgApacheCommonsMathLinearRealVector:v]];
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)projectionWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  return (OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast([self projectionWithOrgApacheCommonsMathLinearRealVector:[new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_(v) autorelease]], [OrgApacheCommonsMathLinearOpenMapRealVector class]);
}

- (void)setEntryWithInt:(jint)index
             withDouble:(jdouble)value {
  [self checkIndexWithInt:index];
  if (![self isDefaultValueWithDouble:value]) {
    [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) putWithInt:index withDouble:value];
  }
  else if ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) containsKeyWithInt:index]) {
    [entries_ removeWithInt:index];
  }
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkIndexWithInt:index];
  [self checkIndexWithInt:index + [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension] - 1];
  [self setSubVectorWithInt:index withDoubleArray:[v getData]];
}

- (void)setSubVectorWithInt:(jint)index
            withDoubleArray:(IOSDoubleArray *)v {
  [self checkIndexWithInt:index];
  [self checkIndexWithInt:index + ((IOSDoubleArray *) nil_chk(v))->size_ - 1];
  for (jint i = 0; i < v->size_; i++) {
    [self setEntryWithInt:i + index withDouble:IOSDoubleArray_Get(v, i)];
  }
}

- (void)setWithDouble:(jdouble)value {
  for (jint i = 0; i < virtualSize_; i++) {
    [self setEntryWithInt:i withDouble:value];
  }
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)subtractWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)v {
  [self checkVectorDimensionsWithInt:[((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension]];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [self copy__];
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(v))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) containsKeyWithInt:key]) {
      [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(res)) setEntryWithInt:key withDouble:[entries_ getWithInt:key] - [iter value]];
    }
    else {
      [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(res)) setEntryWithInt:key withDouble:-[iter value]];
    }
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)subtractWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]]) {
    return [self subtractWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearOpenMapRealVector class])];
  }
  return [self subtractWithDoubleArray:[v getData]];
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)subtractWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
  for (jint i = 0; i < v->size_; i++) {
    if ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) containsKeyWithInt:i]) {
      [res setEntryWithInt:i withDouble:[entries_ getWithInt:i] - IOSDoubleArray_Get(v, i)];
    }
    else {
      [res setEntryWithInt:i withDouble:-IOSDoubleArray_Get(v, i)];
    }
  }
  return res;
}

- (OrgApacheCommonsMathLinearOpenMapRealVector *)unitVector {
  OrgApacheCommonsMathLinearOpenMapRealVector *res = [self copy__];
  [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(res)) unitize];
  return res;
}

- (void)unitize {
  jdouble norm = [self getNorm];
  if ([self isDefaultValueWithDouble:norm]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    [entries_ putWithInt:[iter key] withDouble:[iter value] / norm];
  }
}

- (IOSDoubleArray *)toArray {
  return [self getData];
}

- (NSUInteger)hash {
  jint prime = 31;
  jint result = 1;
  jlong temp;
  temp = JavaLangDouble_doubleToLongBitsWithDouble_(epsilon_);
  result = prime * result + (jint) (temp ^ (URShift64(temp, 32)));
  result = prime * result + virtualSize_;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    temp = JavaLangDouble_doubleToLongBitsWithDouble_([iter value]);
    result = prime * result + (jint) (temp ^ (RShift64(temp, 32)));
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (self == obj) {
    return YES;
  }
  if (!([obj isKindOfClass:[OrgApacheCommonsMathLinearOpenMapRealVector class]])) {
    return NO;
  }
  OrgApacheCommonsMathLinearOpenMapRealVector *other = (OrgApacheCommonsMathLinearOpenMapRealVector *) check_class_cast(obj, [OrgApacheCommonsMathLinearOpenMapRealVector class]);
  if (virtualSize_ != ((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(other))->virtualSize_) {
    return NO;
  }
  if (JavaLangDouble_doubleToLongBitsWithDouble_(epsilon_) != JavaLangDouble_doubleToLongBitsWithDouble_(other->epsilon_)) {
    return NO;
  }
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jdouble test = [other getEntryWithInt:[iter key]];
    if (JavaLangDouble_doubleToLongBitsWithDouble_(test) != JavaLangDouble_doubleToLongBitsWithDouble_([iter value])) {
      return NO;
    }
  }
  iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(other))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jdouble test = [iter value];
    if (JavaLangDouble_doubleToLongBitsWithDouble_(test) != JavaLangDouble_doubleToLongBitsWithDouble_([self getEntryWithInt:[iter key]])) {
      return NO;
    }
  }
  return YES;
}

- (jdouble)getSparcity {
  return [self getSparsity];
}

- (jdouble)getSparsity {
  return (jdouble) [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(entries_)) size] / (jdouble) [self getDimension];
}

- (id<JavaUtilIterator>)sparseIterator {
  return [new_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self) autorelease];
}

- (void)dealloc {
  RELEASE_(entries_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_getSparcity {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:withDouble:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearOpenMapRealVector:withInt:", "OpenMapRealVector", NULL, 0x4, NULL, NULL },
    { "initWithInt:withInt:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:withDouble:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withDouble:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangDoubleArray:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangDoubleArray:withDouble:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearOpenMapRealVector:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearRealVector:", "OpenMapRealVector", NULL, 0x1, NULL, NULL },
    { "getEntries", NULL, "Lorg.apache.commons.math.util.OpenIntToDoubleHashMap;", 0x2, NULL, NULL },
    { "isDefaultValueWithDouble:", "isDefaultValue", "Z", 0x4, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealVector:", "add", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearOpenMapRealVector:", "add", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "appendWithOrgApacheCommonsMathLinearOpenMapRealVector:", "append", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearRealVector:", "append", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "appendWithDouble:", "append", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "appendWithDoubleArray:", "append", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "dotProductWithOrgApacheCommonsMathLinearOpenMapRealVector:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "dotProductWithOrgApacheCommonsMathLinearRealVector:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathLinearRealVector:", "ebeDivide", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithDoubleArray:", "ebeDivide", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearRealVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithDoubleArray:", "ebeMultiply", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getSubVectorWithInt:withInt:", "getSubVector", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getData", NULL, "[D", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDistanceWithOrgApacheCommonsMathLinearRealVector:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDistanceWithDoubleArray:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getEntryWithInt:", "getEntry", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getL1DistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:", "getL1Distance", "D", 0x1, NULL, NULL },
    { "getL1DistanceWithOrgApacheCommonsMathLinearRealVector:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithDoubleArray:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector:", "getLInfDistance", "D", 0x2, NULL, NULL },
    { "getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithDoubleArray:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "isNaN", NULL, "Z", 0x1, NULL, NULL },
    { "mapAddWithDouble:", "mapAdd", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "mapAddToSelfWithDouble:", "mapAddToSelf", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "outerProductWithDoubleArray:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "projectionWithOrgApacheCommonsMathLinearRealVector:", "projection", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "projectionWithDoubleArray:", "projection", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "setEntryWithInt:withDouble:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubVectorWithInt:withDoubleArray:", "setSubVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "subtractWithOrgApacheCommonsMathLinearOpenMapRealVector:", "subtract", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealVector:", "subtract", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithDoubleArray:", "subtract", "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "unitVector", NULL, "Lorg.apache.commons.math.linear.OpenMapRealVector;", 0x1, NULL, NULL },
    { "unitize", NULL, "V", 0x1, NULL, NULL },
    { "toArray", NULL, "[D", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getSparcity", NULL, "D", 0x1, NULL, NULL },
    { "getSparsity", NULL, "D", 0x1, NULL, NULL },
    { "sparseIterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ZERO_TOLERANCE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearOpenMapRealVector_serialVersionUID },
    { "entries_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToDoubleHashMap;", NULL, NULL,  },
    { "virtualSize_", NULL, 0x12, "I", NULL, NULL,  },
    { "epsilon_", NULL, 0x12, "D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lorg.apache.commons.math.linear.OpenMapRealVector$OpenMapEntry;", "Lorg.apache.commons.math.linear.OpenMapRealVector$OpenMapSparseIterator;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearOpenMapRealVector = { 2, "OpenMapRealVector", "org.apache.commons.math.linear", NULL, 0x1, 62, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_OrgApacheCommonsMathLinearOpenMapRealVector;
}

@end

void OrgApacheCommonsMathLinearOpenMapRealVector_init(OrgApacheCommonsMathLinearOpenMapRealVector *self) {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(self, 0, OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE);
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_init() {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_init(self);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_(OrgApacheCommonsMathLinearOpenMapRealVector *self, jint dimension) {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(self, dimension, OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE);
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_(jint dimension) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_(self, dimension);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(OrgApacheCommonsMathLinearOpenMapRealVector *self, jint dimension, jdouble epsilon) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = dimension;
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithDouble_(0.0));
  self->epsilon_ = epsilon;
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(jint dimension, jdouble epsilon) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withDouble_(self, dimension, epsilon);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(OrgApacheCommonsMathLinearOpenMapRealVector *self, OrgApacheCommonsMathLinearOpenMapRealVector *v, jint resize) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension] + resize;
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_(v->entries_));
  self->epsilon_ = v->epsilon_;
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(OrgApacheCommonsMathLinearOpenMapRealVector *v, jint resize) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withInt_(self, v, resize);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_(OrgApacheCommonsMathLinearOpenMapRealVector *self, jint dimension, jint expectedSize) {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_withDouble_(self, dimension, expectedSize, OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE);
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_(jint dimension, jint expectedSize) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_(self, dimension, expectedSize);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_withDouble_(OrgApacheCommonsMathLinearOpenMapRealVector *self, jint dimension, jint expectedSize, jdouble epsilon) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = dimension;
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithInt_withDouble_(expectedSize, 0.0));
  self->epsilon_ = epsilon;
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_withDouble_(jint dimension, jint expectedSize, jdouble epsilon) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithInt_withInt_withDouble_(self, dimension, expectedSize, epsilon);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_(OrgApacheCommonsMathLinearOpenMapRealVector *self, IOSDoubleArray *values) {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_withDouble_(self, values, OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE);
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_(IOSDoubleArray *values) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_(self, values);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_withDouble_(OrgApacheCommonsMathLinearOpenMapRealVector *self, IOSDoubleArray *values, jdouble epsilon) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = ((IOSDoubleArray *) nil_chk(values))->size_;
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithDouble_(0.0));
  self->epsilon_ = epsilon;
  for (jint key = 0; key < values->size_; key++) {
    jdouble value = IOSDoubleArray_Get(values, key);
    if (![self isDefaultValueWithDouble:value]) {
      [self->entries_ putWithInt:key withDouble:value];
    }
  }
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_withDouble_(IOSDoubleArray *values, jdouble epsilon) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithDoubleArray_withDouble_(self, values, epsilon);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_(OrgApacheCommonsMathLinearOpenMapRealVector *self, IOSObjectArray *values) {
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_withDouble_(self, values, OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE);
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_(IOSObjectArray *values) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_(self, values);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_withDouble_(OrgApacheCommonsMathLinearOpenMapRealVector *self, IOSObjectArray *values, jdouble epsilon) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = ((IOSObjectArray *) nil_chk(values))->size_;
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithDouble_(0.0));
  self->epsilon_ = epsilon;
  for (jint key = 0; key < values->size_; key++) {
    jdouble value = [((JavaLangDouble *) nil_chk(IOSObjectArray_Get(values, key))) doubleValue];
    if (![self isDefaultValueWithDouble:value]) {
      [self->entries_ putWithInt:key withDouble:value];
    }
  }
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_withDouble_(IOSObjectArray *values, jdouble epsilon) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithJavaLangDoubleArray_withDouble_(self, values, epsilon);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *self, OrgApacheCommonsMathLinearOpenMapRealVector *v) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getDimension];
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(v)));
  self->epsilon_ = v->epsilon_;
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *v) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, v);
  return self;
}

void OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *self, id<OrgApacheCommonsMathLinearRealVector> v) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  self->virtualSize_ = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension];
  OrgApacheCommonsMathLinearOpenMapRealVector_setAndConsume_entries_(self, new_OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_initWithDouble_(0.0));
  self->epsilon_ = OrgApacheCommonsMathLinearOpenMapRealVector_DEFAULT_ZERO_TOLERANCE;
  for (jint key = 0; key < self->virtualSize_; key++) {
    jdouble value = [v getEntryWithInt:key];
    if (![self isDefaultValueWithDouble:value]) {
      [self->entries_ putWithInt:key withDouble:value];
    }
  }
}

OrgApacheCommonsMathLinearOpenMapRealVector *new_OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearRealVector_(id<OrgApacheCommonsMathLinearRealVector> v) {
  OrgApacheCommonsMathLinearOpenMapRealVector *self = [OrgApacheCommonsMathLinearOpenMapRealVector alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_initWithOrgApacheCommonsMathLinearRealVector_(self, v);
  return self;
}

OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(OrgApacheCommonsMathLinearOpenMapRealVector *self) {
  return self->entries_;
}

jdouble OrgApacheCommonsMathLinearOpenMapRealVector_getLInfDistanceWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *self, OrgApacheCommonsMathLinearOpenMapRealVector *v) {
  jdouble max = 0;
  OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(self->entries_)) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jdouble delta = OrgApacheCommonsMathUtilFastMath_absWithDouble_([iter value] - [((OrgApacheCommonsMathLinearOpenMapRealVector *) nil_chk(v)) getEntryWithInt:[iter key]]);
    if (delta > max) {
      max = delta;
    }
  }
  iter = [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(OrgApacheCommonsMathLinearOpenMapRealVector_getEntries(nil_chk(v)))) iterator];
  while ([((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter)) hasNext]) {
    [iter advance];
    jint key = [iter key];
    if (![self->entries_ containsKeyWithInt:key]) {
      if ([iter value] > max) {
        max = [iter value];
      }
    }
  }
  return max;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearOpenMapRealVector)

@implementation OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry

- (instancetype)initWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)outer$
        withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator:(OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *)iter {
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator_(self, outer$, iter);
  return self;
}

- (jdouble)getValue {
  return [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter_)) value];
}

- (void)setValueWithDouble:(jdouble)value {
  [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(this$0_->entries_)) putWithInt:[((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter_)) key] withDouble:value];
}

- (jint)getIndex {
  return [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter_)) key];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(iter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathLinearOpenMapRealVector:withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator:", "OpenMapEntry", NULL, 0x4, NULL, NULL },
    { "getValue", NULL, "D", 0x1, NULL, NULL },
    { "setValueWithDouble:", "setValue", "V", 0x1, NULL, NULL },
    { "getIndex", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.linear.OpenMapRealVector;", NULL, NULL,  },
    { "iter_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry = { 2, "OpenMapEntry", "org.apache.commons.math.linear", "OpenMapRealVector", 0x4, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry;
}

@end

void OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator_(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry *self, OrgApacheCommonsMathLinearOpenMapRealVector *outer$, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter) {
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_set_this$0_(self, outer$);
  OrgApacheCommonsMathLinearRealVector_Entry_init(self);
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_set_iter_(self, iter);
}

OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry *new_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator_(OrgApacheCommonsMathLinearOpenMapRealVector *outer$, OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *iter) {
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry *self = [OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator_(self, outer$, iter);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry)

@implementation OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator

- (instancetype)initWithOrgApacheCommonsMathLinearOpenMapRealVector:(OrgApacheCommonsMathLinearOpenMapRealVector *)outer$ {
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  return [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter_)) hasNext];
}

- (OrgApacheCommonsMathLinearRealVector_Entry *)next {
  [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator *) nil_chk(iter_)) advance];
  return current_;
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"Not supported") autorelease];
}

- (void)dealloc {
  RELEASE_(iter_);
  RELEASE_(current_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathLinearOpenMapRealVector:", "OpenMapSparseIterator", NULL, 0x4, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Lorg.apache.commons.math.linear.RealVector$Entry;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iter_", NULL, 0x12, "Lorg.apache.commons.math.util.OpenIntToDoubleHashMap$Iterator;", NULL, NULL,  },
    { "current_", NULL, 0x12, "Lorg.apache.commons.math.linear.RealVector$Entry;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator = { 2, "OpenMapSparseIterator", "org.apache.commons.math.linear", "OpenMapRealVector", 0x4, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Iterator<Lorg/apache/commons/math/linear/RealVector$Entry;>;" };
  return &_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator;
}

@end

void OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator *self, OrgApacheCommonsMathLinearOpenMapRealVector *outer$) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_set_iter_(self, [((OrgApacheCommonsMathUtilOpenIntToDoubleHashMap *) nil_chk(outer$->entries_)) iterator]);
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_setAndConsume_current_(self, new_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapEntry_initWithOrgApacheCommonsMathLinearOpenMapRealVector_withOrgApacheCommonsMathUtilOpenIntToDoubleHashMap_Iterator_(outer$, self->iter_));
}

OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator *new_OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(OrgApacheCommonsMathLinearOpenMapRealVector *outer$) {
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator *self = [OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator alloc];
  OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator_initWithOrgApacheCommonsMathLinearOpenMapRealVector_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearOpenMapRealVector_OpenMapSparseIterator)
