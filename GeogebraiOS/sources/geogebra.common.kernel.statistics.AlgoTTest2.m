//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoTTest2.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoTTest2.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"

@interface GeogebraCommonKernelStatisticsAlgoTTest2 () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList0_, *geoList1_;
  GeogebraCommonKernelGeosGeoNumeric *mean0_, *mean1_, *sd0_, *sd1_, *n0_, *n1_;
  GeogebraCommonKernelGeosGeoText *tail_;
  GeogebraCommonKernelGeosGeoBoolean *pooled_;
  GeogebraCommonKernelGeosGeoList *result_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  IOSDoubleArray *val0_, *val1_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, geoList0_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, geoList1_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, mean0_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, mean1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, sd0_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, sd1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, n0_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, n1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, tail_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, pooled_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, result_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, val0_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest2, val1_, IOSDoubleArray *)

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoTTest2 *self, jdouble p, jdouble testStatistic);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoTTest2_compute(GeogebraCommonKernelStatisticsAlgoTTest2 *self);

@implementation GeogebraCommonKernelStatisticsAlgoTTest2

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList0
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList1
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)pooled {
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList0, geoList1, tail, pooled);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n1
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)pooled {
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n0
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n1
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)pooled {
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TTest2();
}

- (void)setInputOutput {
  if (geoList0_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList0_);
    IOSObjectArray_Set(input_, 1, geoList1_);
    IOSObjectArray_Set(input_, 2, tail_);
    IOSObjectArray_Set(input_, 3, pooled_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:8 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, mean0_);
    IOSObjectArray_Set(input_, 1, sd0_);
    IOSObjectArray_Set(input_, 2, n0_);
    IOSObjectArray_Set(input_, 3, mean1_);
    IOSObjectArray_Set(input_, 4, sd1_);
    IOSObjectArray_Set(input_, 5, n1_);
    IOSObjectArray_Set(input_, 6, tail_);
    IOSObjectArray_Set(input_, 7, pooled_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic {
  return GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStatistic);
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList0_);
  RELEASE_(geoList1_);
  RELEASE_(mean0_);
  RELEASE_(mean1_);
  RELEASE_(sd0_);
  RELEASE_(sd1_);
  RELEASE_(n0_);
  RELEASE_(n1_);
  RELEASE_(tail_);
  RELEASE_(pooled_);
  RELEASE_(result_);
  RELEASE_(tTestImpl_);
  RELEASE_(val0_);
  RELEASE_(val1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTTest2", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:", "adjustedPValue", "D", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "mean0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "pooled_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "val0_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val1_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoTTest2 = { 2, "AlgoTTest2", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoTTest2;
}

@end

void GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTTest2 *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList0, GeogebraCommonKernelGeosGeoList *geoList1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_geoList0_(self, geoList0);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_geoList1_(self, geoList1);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_pooled_(self, pooled);
  GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTTest2 *new_GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList0, GeogebraCommonKernelGeosGeoList *geoList1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelStatisticsAlgoTTest2 *self = [GeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList0, geoList1, tail, pooled);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTTest2 *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean0, GeogebraCommonKernelGeosGeoNumeric *sd0, GeogebraCommonKernelGeosGeoNumeric *n0, GeogebraCommonKernelGeosGeoNumeric *mean1, GeogebraCommonKernelGeosGeoNumeric *sd1, GeogebraCommonKernelGeosGeoNumeric *n1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTTest2 *new_GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean0, GeogebraCommonKernelGeosGeoNumeric *sd0, GeogebraCommonKernelGeosGeoNumeric *n0, GeogebraCommonKernelGeosGeoNumeric *mean1, GeogebraCommonKernelGeosGeoNumeric *sd1, GeogebraCommonKernelGeosGeoNumeric *n1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelStatisticsAlgoTTest2 *self = [GeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTTest2 *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean0, GeogebraCommonKernelGeosGeoNumeric *sd0, GeogebraCommonKernelGeosGeoNumeric *n0, GeogebraCommonKernelGeosGeoNumeric *mean1, GeogebraCommonKernelGeosGeoNumeric *sd1, GeogebraCommonKernelGeosGeoNumeric *n1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_mean0_(self, mean0);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_mean1_(self, mean1);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_sd0_(self, sd0);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_sd1_(self, sd1);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_n0_(self, n0);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_n1_(self, n1);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoTTest2_set_pooled_(self, pooled);
  GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTTest2_compute(self);
}

GeogebraCommonKernelStatisticsAlgoTTest2 *new_GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean0, GeogebraCommonKernelGeosGeoNumeric *sd0, GeogebraCommonKernelGeosGeoNumeric *n0, GeogebraCommonKernelGeosGeoNumeric *mean1, GeogebraCommonKernelGeosGeoNumeric *sd1, GeogebraCommonKernelGeosGeoNumeric *n1, GeogebraCommonKernelGeosGeoText *tail, GeogebraCommonKernelGeosGeoBoolean *pooled) {
  GeogebraCommonKernelStatisticsAlgoTTest2 *self = [GeogebraCommonKernelStatisticsAlgoTTest2 alloc];
  GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, mean0, sd0, n0, mean1, sd1, n1, tail, pooled);
  return self;
}

jdouble GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoTTest2 *self, jdouble p, jdouble testStatistic) {
  if (GeogebraCommonUtilStringUtil_isNotEqualWithNSString_([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) {
    return p;
  }
  else if (([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"] && testStatistic > 0) || ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@"<"] && testStatistic < 0)) return p / 2;
  else return 1 - p / 2;
}

void GeogebraCommonKernelStatisticsAlgoTTest2_compute(GeogebraCommonKernelStatisticsAlgoTTest2 *self) {
  if (!(GeogebraCommonUtilStringUtil_isInequalityWithNSString_([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString]))) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  jdouble p, testStat;
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 4) {
    jint size0 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList0_)) size];
    if (![self->geoList0_ isDefined] || size0 < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    jint size1 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) size];
    if (![self->geoList1_ isDefined] || size1 < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_val0_(self, [IOSDoubleArray newArrayWithLength:size0]);
    GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_val1_(self, [IOSDoubleArray newArrayWithLength:size1]);
    for (jint i = 0; i < size0; i++) {
      GeogebraCommonKernelGeosGeoElement *geo0 = [self->geoList0_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo0]) {
        id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo0, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val0_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    for (jint i = 0; i < size1; i++) {
      GeogebraCommonKernelGeosGeoElement *geo1 = [self->geoList1_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo1]) {
        id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val1_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    @try {
      if (self->tTestImpl_ == nil) GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
      if ([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) homoscedasticTWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = [self->tTestImpl_ homoscedasticTTestWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      else {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = [self->tTestImpl_ tTestWithDoubleArray:self->val0_ withDoubleArray:self->val1_];
        p = GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, p) autorelease]];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStat) autorelease]];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
  else {
    if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd0_)) getDouble] < 0 || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd1_)) getDouble] < 0 || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n0_)) getDouble] < 2 || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n1_)) getDouble] < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats0 = [new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean0_)) getDouble], [self->sd0_ getDouble] * [self->sd0_ getDouble], J2ObjCFpToLong([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n0_)) getDouble]), -1, -1, -1) autorelease];
    OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats1 = [new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean1_)) getDouble], [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd1_)) getDouble] * [self->sd1_ getDouble], J2ObjCFpToLong([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n1_)) getDouble]), -1, -1, -1) autorelease];
    @try {
      if (self->tTestImpl_ == nil) GeogebraCommonKernelStatisticsAlgoTTest2_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
      if ([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) homoscedasticTWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = [self->tTestImpl_ homoscedasticTTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      else {
        testStat = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = [self->tTestImpl_ tTestWithOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats0 withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats1];
        p = GeogebraCommonKernelStatisticsAlgoTTest2_adjustedPValueWithDouble_withDouble_(self, p, testStat);
      }
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, p) autorelease]];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, testStat) autorelease]];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoTTest2)
