//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Variable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyParseError.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelArithmeticVariable () {
 @public
  NSString *name_;
  GeogebraCommonKernelKernel *kernel_;
}

- (GeogebraCommonKernelGeosGeoElement *)resolveWithBoolean:(jboolean)throwError;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticVariable, name_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticVariable, kernel_, GeogebraCommonKernelKernel *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(GeogebraCommonKernelArithmeticVariable *self, jboolean throwError);

@implementation GeogebraCommonKernelArithmeticVariable

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)name {
  GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, name);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel1, name_) autorelease];
}

- (NSString *)getNameWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isLeaf {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement *)resolveWithBoolean:(jboolean)throwError {
  return GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(self, throwError);
}

- (GeogebraCommonKernelGeosGeoElement *)resolveWithBoolean:(jboolean)allowAutoCreateGeoElement
                                               withBoolean:(jboolean)throwError {
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isResolveUnkownVarsAsDummyGeos]) {
    return [new_GeogebraCommonKernelGeosGeoDummyVariable_initWithGeogebraCommonKernelConstruction_withNSString_([kernel_ getConstruction], name_) autorelease];
  }
  GeogebraCommonKernelGeosGeoElement *geo = [kernel_ lookupLabelWithNSString:name_ withBoolean:allowAutoCreateGeoElement];
  if (geo != nil || !throwError) return geo;
  IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"UndefinedVariable", name_ } count:2 type:NSString_class_()];
  @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_([((GeogebraCommonMainApp *) nil_chk([kernel_ getApplication])) getLocalization], str) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)resolveAsExpressionValue {
  GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(self, NO);
  if (geo == nil) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ret = GeogebraCommonKernelArithmeticVariable_replacementWithGeogebraCommonKernelKernel_withNSString_(kernel_, name_);
    return [ret isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] ? GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(self, YES) : ((id) ret);
  }
  if ([((NSString *) nil_chk(name_)) indexOf:'$'] > -1 && !([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) && !([geo isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]])) {
    jboolean col$ = [name_ indexOf:'$'] == 0;
    jboolean row$ = ((jint) [name_ length]) > 2 && [name_ indexOf:'$' fromIndex:1] > -1;
    GeogebraCommonPluginOperationEnum *operation = GeogebraCommonPluginOperationEnum_get_NO_OPERATION();
    if (row$ && col$) operation = GeogebraCommonPluginOperationEnum_get_$VAR_ROW_COL();
    else if (row$) operation = GeogebraCommonPluginOperationEnum_get_$VAR_ROW();
    else operation = GeogebraCommonPluginOperationEnum_get_$VAR_COL();
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, geo, operation, nil) autorelease];
  }
  return geo;
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)replacementWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                                  withNSString:(NSString *)name {
  return GeogebraCommonKernelArithmeticVariable_replacementWithGeogebraCommonKernelKernel_withNSString_(kernel, name);
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *ret = [new_JavaUtilHashSet_init() autorelease];
  [ret addWithId:GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(self, YES)];
  return ret;
}

- (void)resolveVariables {
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:name_];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isVariable {
  return YES;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (jboolean)hasCoords {
  GeogebraCommonKernelGeosGeoElement *ge = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:name_];
  if (ge != nil && !([ge isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]])) return [ge hasCoords];
  return NO;
}

- (void)setNameWithNSString:(NSString *)s {
  GeogebraCommonKernelArithmeticVariable_set_name_(self, s);
}

- (NSString *)getName {
  return name_;
}

- (jboolean)evaluatesToNumberWithBoolean:(jboolean)def {
  return def;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withNSString:", "Variable", NULL, 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getNameWithGeogebraCommonKernelStringTemplate:", "getName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "resolveWithBoolean:", "resolve", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "resolveWithBoolean:withBoolean:", "resolve", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "resolveAsExpressionValue", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, NULL, NULL },
    { "replacementWithGeogebraCommonKernelKernel:withNSString:", "replacement", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isVariable", NULL, "Z", 0x11, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setNameWithNSString:", "setName", "V", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "evaluatesToNumberWithBoolean:", "evaluatesToNumber", "Z", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticVariable = { 2, "Variable", "geogebra.common.kernel.arithmetic", NULL, 0x1, 24, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticVariable;
}

@end

void GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelArithmeticVariable *self, GeogebraCommonKernelKernel *kernel, NSString *name) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  GeogebraCommonKernelArithmeticVariable_set_name_(self, name);
  GeogebraCommonKernelArithmeticVariable_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticVariable *new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *name) {
  GeogebraCommonKernelArithmeticVariable *self = [GeogebraCommonKernelArithmeticVariable alloc];
  GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, name);
  return self;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelArithmeticVariable_resolveWithBoolean_(GeogebraCommonKernelArithmeticVariable *self, jboolean throwError) {
  return [self resolveWithBoolean:![((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isResolveUnkownVarsAsDummyGeos] withBoolean:throwError];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticVariable_replacementWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *name) {
  GeogebraCommonKernelArithmeticVariable_initialize();
  IOSIntArray *exponents = [IOSIntArray arrayWithInts:(jint[]){ 0, 0, 0 } count:3];
  jint i;
  id<GeogebraCommonKernelArithmeticExpressionValue> geo2 = nil;
  for (i = ((jint) [((NSString *) nil_chk(name)) length]) - 1; i >= 0; i--) {
    if ([name charAtWithInt:i] < 'x' || [name charAtWithInt:i] > 'z') break;
    (*IOSIntArray_GetRef(exponents, [name charAtWithInt:i] - 'x'))++;
    NSString *nameNoX = [name substring:0 endIndex:i];
    geo2 = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) lookupLabelWithNSString:nameNoX];
    GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk([kernel getApplication])) getParserFunctions])) getWithNSString:nameNoX withInt:1];
    if (op != nil && op != GeogebraCommonPluginOperationEnum_get_XCOORD() && op != GeogebraCommonPluginOperationEnum_get_YCOORD() && op != GeogebraCommonPluginOperationEnum_get_ZCOORD()) {
      return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, JreStrcat("C", [name charAtWithInt:i])) autorelease]) wrap])) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, IOSIntArray_Get(exponents, [name charAtWithInt:i] - 'x')) autorelease]])) applyWithGeogebraCommonPluginOperationEnum:op];
    }
    if (geo2 != nil) break;
  }
  if (i > -1 && !([geo2 isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]])) return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, [name substring:0 endIndex:i + 1]) autorelease];
  if (geo2 == nil) geo2 = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 1.0) autorelease];
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, geo2, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"x") autorelease]) autorelease]) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, IOSIntArray_Get(exponents, 0)) autorelease]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"y") autorelease]) autorelease]) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, IOSIntArray_Get(exponents, 1)) autorelease]]])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, @"z") autorelease]) autorelease]) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, IOSIntArray_Get(exponents, 2)) autorelease]]]) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticVariable)
