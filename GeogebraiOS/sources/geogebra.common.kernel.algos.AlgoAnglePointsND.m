//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAnglePointsND.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoAnglePointsND.h"
#include "geogebra/common/kernel/algos/AlgoAnglePolygon.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"

#pragma clang diagnostic ignored "-Wprotocol"

@implementation GeogebraCommonKernelAlgosAlgoAnglePointsND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, A, B, C, orientation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, A, B, C, orientation);
  return self;
}

- (void)setInputWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
            withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_An_(self, A);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Bn_(self, B);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Cn_(self, C);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)setABCWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_An_(self, A);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Bn_(self, B);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Cn_(self, C);
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                          withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelConstruction_(self, A, B, C, cons);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, A, B, C);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)addToConstructionList {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  return self;
}

- (void)setAlgoAnglePolygonWithGeogebraCommonKernelAlgosAlgoAnglePolygon:(GeogebraCommonKernelAlgosAlgoAnglePolygon *)algo {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_algoAnglePoly_(self, algo);
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(An_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(Bn_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(Cn_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (void)remove {
  if (removed_) return;
  if (algoAnglePoly_ != nil) [algoAnglePoly_ remove];
  else [super remove];
}

- (jint)getConstructionIndex {
  if (algoAnglePoly_ != nil) {
    return [algoAnglePoly_ getConstructionIndex];
  }
  return [super getConstructionIndex];
}

- (GeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getA {
  return An_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getB {
  return Bn_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getC {
  return Cn_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (algoAnglePoly_ != nil) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenABCofD" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(An_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Bn_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Cn_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([algoAnglePoly_ getPolygon])) getNameDescription]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenABC" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(An_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Bn_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Cn_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonEuclidianDrawDrawAngle *) nil_chk(drawable)) getCoordsInViewWithGeogebraCommonKernelKernelNDGeoPointND:Bn_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:v]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = IOSDoubleArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) get]), 0);
  *IOSDoubleArray_GetRef(m, 1) = IOSDoubleArray_Get(nil_chk([v get]), 1);
  GeogebraCommonKernelMatrixCoords *ptCoords = [drawable getCoordsInViewWithGeogebraCommonKernelKernelNDGeoPointND:An_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:ptCoords]) {
    return NO;
  }
  GeogebraCommonKernelMatrixCoords *coords2 = [drawable getCoordsInViewWithGeogebraCommonKernelKernelNDGeoPointND:Cn_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:coords2]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(firstVec), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(ptCoords)) getX] - IOSDoubleArray_Get(m, 0);
  *IOSDoubleArray_GetRef(firstVec, 1) = [ptCoords getY] - IOSDoubleArray_Get(m, 1);
  IOSDoubleArray *vertexScreen = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(vertexScreen, 0) = IOSDoubleArray_Get(m, 0);
  *IOSDoubleArray_GetRef(vertexScreen, 1) = IOSDoubleArray_Get(m, 1);
  IOSDoubleArray *firstVecScreen = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(firstVecScreen, 0) = [ptCoords getX];
  *IOSDoubleArray_GetRef(firstVecScreen, 1) = [ptCoords getY];
  IOSDoubleArray *secondVecScreen = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(secondVecScreen, 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2)) getX];
  *IOSDoubleArray_GetRef(secondVecScreen, 1) = [coords2 getY];
  [drawable toScreenCoordsWithDoubleArray:vertexScreen];
  [drawable toScreenCoordsWithDoubleArray:firstVecScreen];
  [drawable toScreenCoordsWithDoubleArray:secondVecScreen];
  *IOSDoubleArray_GetRef(firstVecScreen, 0) -= IOSDoubleArray_Get(vertexScreen, 0);
  *IOSDoubleArray_GetRef(firstVecScreen, 1) -= IOSDoubleArray_Get(vertexScreen, 1);
  *IOSDoubleArray_GetRef(secondVecScreen, 0) -= IOSDoubleArray_Get(vertexScreen, 0);
  *IOSDoubleArray_GetRef(secondVecScreen, 1) -= IOSDoubleArray_Get(vertexScreen, 1);
  [drawable setMaxRadiusWithDouble:0.5 * JavaLangMath_sqrtWithDouble_(JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(firstVecScreen, 0) * IOSDoubleArray_Get(firstVecScreen, 0) + IOSDoubleArray_Get(firstVecScreen, 1) * IOSDoubleArray_Get(firstVecScreen, 1), IOSDoubleArray_Get(secondVecScreen, 0) * IOSDoubleArray_Get(secondVecScreen, 0) + IOSDoubleArray_Get(secondVecScreen, 1) * IOSDoubleArray_Get(secondVecScreen, 1)))];
  return YES;
}

- (jboolean)getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  GeogebraCommonKernelMatrixCoords *center = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getB])) getInhomCoordsInD3];
  IOSObjectArray_Set(nil_chk(drawCoords), 0, center);
  IOSObjectArray_Set(drawCoords, 1, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getA])) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:center]);
  IOSObjectArray_Set(drawCoords, 2, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getC])) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:center]);
  return YES;
}

- (void)dealloc {
  RELEASE_(An_);
  RELEASE_(Bn_);
  RELEASE_(Cn_);
  RELEASE_(angle_);
  RELEASE_(algoAnglePoly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "setInputWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "setInput", "V", 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoAnglePointsND", NULL, 0x4, NULL, NULL },
    { "setABCWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setABC", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelConstruction:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoAnglePointsND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "AlgoAnglePointsND", NULL, 0x4, NULL, NULL },
    { "setAlgoAnglePolygonWithGeogebraCommonKernelAlgosAlgoAnglePolygon:", "setAlgoAnglePolygon", "V", 0x0, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "getAngle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getC", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "An_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Bn_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Cn_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "algoAnglePoly_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoAnglePolygon;", NULL, NULL,  },
    { "bx_", NULL, 0x84, "D", NULL, NULL,  },
    { "by_", NULL, 0x84, "D", NULL, NULL,  },
    { "vx_", NULL, 0x84, "D", NULL, NULL,  },
    { "vy_", NULL, 0x84, "D", NULL, NULL,  },
    { "wx_", NULL, 0x84, "D", NULL, NULL,  },
    { "wy_", NULL, 0x84, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAnglePointsND = { 2, "AlgoAnglePointsND", "geogebra.common.kernel.algos", NULL, 0x401, 19, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAnglePointsND;
}

@end

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, A, B, C, orientation);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  [self setInputWithGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_angle_(self, [self newGeoAngleWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  [self compute];
}

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_setAndConsume_angle_(self, new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(cons));
  [self->angle_ setDrawableWithBoolean:YES];
}

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosConstructionElement_set_cons_(self, cons);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_An_(self, A);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Bn_(self, B);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Cn_(self, C);
}

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_withBoolean_(self, ((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) toGeoElement]))->cons_, NO);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_An_(self, A);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Bn_(self, B);
  GeogebraCommonKernelAlgosAlgoAnglePointsND_set_Cn_(self, C);
}

void GeogebraCommonKernelAlgosAlgoAnglePointsND_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelAlgosAlgoAnglePointsND *self, GeogebraCommonKernelConstruction *c, jboolean addToConstructionList) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAnglePointsND)
