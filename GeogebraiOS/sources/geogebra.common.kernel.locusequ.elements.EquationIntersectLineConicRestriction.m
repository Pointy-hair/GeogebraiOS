//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationIntersectLineConicRestriction.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/locusequ/EquationElement.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/elements/EquationIntersectLineConicRestriction.h"
#include "geogebra/common/kernel/locusequ/elements/EquationIntersectRestriction.h"

@interface GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction () {
 @public
  GeogebraCommonKernelLocusequEquationElement *line_;
  GeogebraCommonKernelLocusequEquationElement *conic_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction, line_, GeogebraCommonKernelLocusequEquationElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction, conic_, GeogebraCommonKernelLocusequEquationElement *)

@implementation GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
       withGeogebraCommonKernelAlgosAlgoIntersectLineConic:(GeogebraCommonKernelAlgosAlgoIntersectLineConic *)algo
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLineConic_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoIntersectLineConic *)getAlgo {
  return (GeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast([super getAlgo], [GeogebraCommonKernelAlgosAlgoIntersectLineConic class]);
}

- (GeogebraCommonKernelLocusequEquationElement *)getLine {
  if (self->line_ == nil) {
    GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_set_line_(self, [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk([self getAlgo])) getLine]]);
  }
  return self->line_;
}

- (GeogebraCommonKernelLocusequEquationElement *)getConic {
  if (self->conic_ == nil) {
    GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_set_conic_(self, [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk([self getAlgo])) getConic]]);
  }
  return self->conic_;
}

- (GeogebraCommonKernelLocusequEquationList *)forPointImplWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  GeogebraCommonKernelLocusequEquationList *list = [new_GeogebraCommonKernelLocusequEquationList_init() autorelease];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationElement *) nil_chk([self getLine])) forPointWithGeogebraCommonKernelLocusequEquationPoint:p]];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationElement *) nil_chk([self getConic])) forPointWithGeogebraCommonKernelLocusequEquationPoint:p]];
  return list;
}

- (void)dealloc {
  RELEASE_(line_);
  RELEASE_(conic_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosAlgoIntersectLineConic:withGeogebraCommonKernelLocusequEquationScope:", "EquationIntersectLineConicRestriction", NULL, 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoIntersectLineConic;", 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.locusequ.EquationElement;", 0x1, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.kernel.locusequ.EquationElement;", 0x1, NULL, NULL },
    { "forPointImplWithGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationElement;", NULL, NULL,  },
    { "conic_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction = { 2, "EquationIntersectLineConicRestriction", "geogebra.common.kernel.locusequ.elements", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction;
}

@end

void GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLineConic_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationIntersectRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
}

GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction *new_GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLineConic_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectLineConic *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction *self = [GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction alloc];
  GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLineConic_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationIntersectLineConicRestriction)
