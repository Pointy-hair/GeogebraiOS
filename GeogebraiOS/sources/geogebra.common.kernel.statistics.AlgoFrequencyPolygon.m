//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFrequencyPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoFrequencyPolygon.h"
#include "geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelStatisticsAlgoFrequencyPolygon () {
 @public
  GeogebraCommonKernelGeosGeoList *list1_, *list2_, *list3_;
  GeogebraCommonKernelGeosGeoBoolean *isCumulative_, *useDensity_;
  GeogebraCommonKernelGeosGeoNumeric *density_;
  GeogebraCommonKernelGeosGeoPolyLine *outputPolyLine_;
  IOSObjectArray *points_;
  GeogebraCommonKernelStatisticsAlgoHistogram *algoHistogram_;
  jboolean right_;
}

- (void)setOutput;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, list1_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, list2_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, list3_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, isCumulative_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, useDensity_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, density_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, outputPolyLine_, GeogebraCommonKernelGeosGeoPolyLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, points_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon, algoHistogram_, GeogebraCommonKernelStatisticsAlgoHistogram *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_compute(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self);

@implementation GeogebraCommonKernelStatisticsAlgoFrequencyPolygon

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2 {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list1, list2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list3
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, list1, list2, list3, useDensity, density);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list3
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, list1, list2, list3, useDensity, density);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FrequencyPolygon();
}

- (void)setInputOutput {
  JavaUtilArrayList *tempList = [new_JavaUtilArrayList_init() autorelease];
  if (isCumulative_ != nil) {
    [tempList addWithId:isCumulative_];
  }
  [tempList addWithId:list1_];
  [tempList addWithId:list2_];
  if (list3_ != nil) {
    [tempList addWithId:list3_];
  }
  if (useDensity_ != nil) {
    [tempList addWithId:useDensity_];
  }
  if (density_ != nil) {
    [tempList addWithId:density_];
  }
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[tempList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [tempList toArrayWithNSObjectArray:input_]);
  jboolean suppressLabelCreation = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_setAndConsume_algoHistogram_(self, new_GeogebraCommonKernelStatisticsAlgoHistogram_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, isCumulative_, list1_, list2_, list3_, useDensity_, density_, right_));
  [cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
  [self setOutput];
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(outputPolyLine_)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [cons_ addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [self setDependencies];
}

- (void)setOutput {
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputPolyLine_];
}

- (GeogebraCommonKernelGeosGeoPolyLine *)getResult {
  return outputPolyLine_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_compute(self);
}

- (void)dealloc {
  RELEASE_(list1_);
  RELEASE_(list2_);
  RELEASE_(list3_);
  RELEASE_(isCumulative_);
  RELEASE_(useDensity_);
  RELEASE_(density_);
  RELEASE_(outputPolyLine_);
  RELEASE_(points_);
  RELEASE_(algoHistogram_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoFrequencyPolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyPolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyPolygon", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x2, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoPolyLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list3_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isCumulative_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "useDensity_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "density_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "outputPolyLine_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "points_", NULL, 0x2, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "algoHistogram_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoHistogram;", NULL, NULL,  },
    { "right_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFrequencyPolygon = { 2, "AlgoFrequencyPolygon", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFrequencyPolygon;
}

@end

void GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, nil, list1, list2, nil, nil, nil);
}

GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *new_GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self = [GeogebraCommonKernelStatisticsAlgoFrequencyPolygon alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list1, list2);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoList *list3, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, list1, list2, list3, useDensity, density);
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->outputPolyLine_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *new_GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoList *list3, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self = [GeogebraCommonKernelStatisticsAlgoFrequencyPolygon alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, list1, list2, list3, useDensity, density);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoList *list3, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_points_(self, nil);
  self->right_ = NO;
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_list1_(self, list1);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_list2_(self, list2);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_list3_(self, list3);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_isCumulative_(self, isCumulative);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_useDensity_(self, useDensity);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_set_density_(self, density);
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_setAndConsume_outputPolyLine_(self, new_GeogebraCommonKernelGeosGeoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, self->points_));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *new_GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoList *list3, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self = [GeogebraCommonKernelStatisticsAlgoFrequencyPolygon alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, list1, list2, list3, useDensity, density);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_compute(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon *self) {
  [((GeogebraCommonKernelStatisticsAlgoHistogram *) nil_chk(self->algoHistogram_)) update];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([self->algoHistogram_ getOutput]), 0))) isDefined]) {
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->outputPolyLine_)) setUndefined];
    return;
  }
  IOSDoubleArray *leftBorder = [self->algoHistogram_ getLeftBorder];
  if (leftBorder == nil || leftBorder->size_ < 2) {
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->outputPolyLine_)) setUndefined];
    return;
  }
  IOSDoubleArray *yValue = [self->algoHistogram_ getYValue];
  if (yValue == nil || yValue->size_ < 2) {
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->outputPolyLine_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->outputPolyLine_)) setDefined];
  jint oldPointsLength = self->points_ == nil ? 0 : self->points_->size_;
  jboolean doCumulative = (self->isCumulative_ != nil && [self->isCumulative_ getBoolean]);
  jint size = doCumulative ? ((IOSDoubleArray *) nil_chk(yValue))->size_ : ((IOSDoubleArray *) nil_chk(yValue))->size_ + 1;
  GeogebraCommonKernelStatisticsAlgoFrequencyPolygon_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:size type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  jboolean suppressLabelCreation = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if (doCumulative) {
    IOSObjectArray_SetAndConsume(self->points_, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(nil_chk(leftBorder), 0), 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      IOSObjectArray_SetAndConsume(self->points_, i + 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(leftBorder, i + 1), IOSDoubleArray_Get(yValue, i), 1.0));
    }
  }
  else {
    jdouble midpoint = IOSDoubleArray_Get(nil_chk(leftBorder), 0) - 0.5 * (IOSDoubleArray_Get(leftBorder, 1) - IOSDoubleArray_Get(leftBorder, 0));
    IOSObjectArray_SetAndConsume(self->points_, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      midpoint = 0.5 * (IOSDoubleArray_Get(leftBorder, i + 1) + IOSDoubleArray_Get(leftBorder, i));
      IOSObjectArray_SetAndConsume(self->points_, i + 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, IOSDoubleArray_Get(yValue, i), 1.0));
    }
    midpoint = 1.5 * IOSDoubleArray_Get(leftBorder, yValue->size_ - 1) - .5 * (IOSDoubleArray_Get(leftBorder, yValue->size_ - 2));
    IOSObjectArray_SetAndConsume(self->points_, yValue->size_, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
  [self->outputPolyLine_ setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
  if (oldPointsLength != self->points_->size_) [self setOutput];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFrequencyPolygon)
