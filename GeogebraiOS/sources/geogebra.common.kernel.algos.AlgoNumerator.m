//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoNumerator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoNumerator.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelAlgosAlgoNumerator () {
 @public
  id<GeogebraCommonKernelArithmeticFunctionalNVar> f_;
  GeogebraCommonKernelGeosGeoElement *g_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoNumerator, f_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoNumerator, g_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoNumerator_compute(GeogebraCommonKernelAlgosAlgoNumerator *self);

@implementation GeogebraCommonKernelAlgosAlgoNumerator

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)f {
  GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, label, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
        withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)f {
  GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Numerator();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(f_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoNumerator_compute(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getPartWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)node {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getLeft];
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionalNVar:", "AlgoNumerator", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionalNVar:", "AlgoNumerator", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getPartWithGeogebraCommonKernelArithmeticExpressionNode:", "getPart", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoNumerator = { 2, "AlgoNumerator", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoNumerator;
}

@end

void GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelAlgosAlgoNumerator *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> f) {
  GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, f);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoNumerator *new_GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> f) {
  GeogebraCommonKernelAlgosAlgoNumerator *self = [GeogebraCommonKernelAlgosAlgoNumerator alloc];
  GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelAlgosAlgoNumerator *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticFunctionalNVar> f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoNumerator_set_f_(self, f);
  if ([f isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonKernelAlgosAlgoNumerator_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  }
  else {
    GeogebraCommonKernelAlgosAlgoNumerator_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(cons));
  }
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoNumerator_compute(self);
}

GeogebraCommonKernelAlgosAlgoNumerator *new_GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticFunctionalNVar> f) {
  GeogebraCommonKernelAlgosAlgoNumerator *self = [GeogebraCommonKernelAlgosAlgoNumerator alloc];
  GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, f);
  return self;
}

void GeogebraCommonKernelAlgosAlgoNumerator_compute(GeogebraCommonKernelAlgosAlgoNumerator *self) {
  if (![((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->f_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticExpressionNode *root = [self->f_ getFunctionExpression];
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root)) getOperation] != GeogebraCommonPluginOperationEnum_get_DIVIDE()) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setUndefined];
    return;
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [self getPartWithGeogebraCommonKernelArithmeticExpressionNode:root];
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    if ([self->f_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]), IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([self->f_ getFunction])) getFunctionVariables]), 0)) autorelease];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunction class])))) setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
    }
    else {
      GeogebraCommonKernelArithmeticFunctionNVar *fun = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]), [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([self->f_ getFunction])) getFunctionVariables]) autorelease];
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunctionNVar class])))) setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:fun];
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) {
    if ([self->f_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fv) autorelease];
      GeogebraCommonKernelArithmeticFunction *tempFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
      [tempFun initFunction];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunction class])))) setFunctionWithGeogebraCommonKernelArithmeticFunction:tempFun];
    }
    else {
      GeogebraCommonKernelGeosGeoFunctionNVar *ff = ((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self->f_, [GeogebraCommonKernelGeosGeoFunctionNVar class]));
      GeogebraCommonKernelArithmeticFunctionNVar *fun = [ff getFunction];
      IOSObjectArray *vars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getFunctionVariables];
      GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev) autorelease];
      GeogebraCommonKernelArithmeticFunctionNVar *newFun = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(en, vars) autorelease];
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunctionNVar class])))) setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:newFun];
    }
  }
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:ev]) {
    if ([self->f_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(GeogebraCommonKernelArithmeticNumberValue))) getDouble]) autorelease]) autorelease];
      GeogebraCommonKernelArithmeticFunction *tempFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
      [tempFun initFunction];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunction class])))) setFunctionWithGeogebraCommonKernelArithmeticFunction:tempFun];
    }
    else {
      GeogebraCommonKernelGeosGeoFunctionNVar *ff = ((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self->f_, [GeogebraCommonKernelGeosGeoFunctionNVar class]));
      GeogebraCommonKernelArithmeticFunctionNVar *fun = [ff getFunction];
      IOSObjectArray *vars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getFunctionVariables];
      GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev) autorelease];
      GeogebraCommonKernelArithmeticFunctionNVar *newFun = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(en, vars) autorelease];
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(self->g_, [GeogebraCommonKernelGeosGeoFunctionNVar class])))) setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:newFun];
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->g_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoNumerator)
