//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/CustomizeToolbarModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/CustomizeToolbarModel.h"
#include "geogebra/common/gui/toolbar/ToolBar.h"
#include "geogebra/common/gui/toolbar/ToolbarItem.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/Vector.h"

@implementation GeogebraCommonGuiCustomizeToolbarModel

- (instancetype)init {
  GeogebraCommonGuiCustomizeToolbarModel_init(self);
  return self;
}

+ (JavaUtilVector *)generateToolsVectorWithNSString:(NSString *)toolbarDefinition {
  return GeogebraCommonGuiCustomizeToolbarModel_generateToolsVectorWithNSString_(toolbarDefinition);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CustomizeToolbarModel", NULL, 0x1, NULL, NULL },
    { "generateToolsVectorWithNSString:", "generateToolsVector", "Ljava.util.Vector;", 0x9, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiCustomizeToolbarModel = { 2, "CustomizeToolbarModel", "geogebra.common.gui", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiCustomizeToolbarModel;
}

@end

void GeogebraCommonGuiCustomizeToolbarModel_init(GeogebraCommonGuiCustomizeToolbarModel *self) {
  NSObject_init(self);
}

GeogebraCommonGuiCustomizeToolbarModel *new_GeogebraCommonGuiCustomizeToolbarModel_init() {
  GeogebraCommonGuiCustomizeToolbarModel *self = [GeogebraCommonGuiCustomizeToolbarModel alloc];
  GeogebraCommonGuiCustomizeToolbarModel_init(self);
  return self;
}

JavaUtilVector *GeogebraCommonGuiCustomizeToolbarModel_generateToolsVectorWithNSString_(NSString *toolbarDefinition) {
  GeogebraCommonGuiCustomizeToolbarModel_initialize();
  JavaUtilVector *vector = [new_JavaUtilVector_init() autorelease];
  [vector addWithId:GeogebraCommonGuiToolbarToolBar_get_SEPARATOR_()];
  JavaUtilVector *defTools = nil;
  @try {
    defTools = GeogebraCommonGuiToolbarToolBar_parseToolbarStringWithNSString_(toolbarDefinition);
  }
  @catch (JavaLangException *e) {
    return [new_JavaUtilVector_init() autorelease];
  }
  for (jint i = 0; i < [((JavaUtilVector *) nil_chk(defTools)) size]; i++) {
    GeogebraCommonGuiToolbarToolbarItem *element = [defTools getWithInt:i];
    if ([((GeogebraCommonGuiToolbarToolbarItem *) nil_chk(element)) getMenu] != nil) {
      JavaUtilVector *menu = [element getMenu];
      for (jint j = 0; j < [((JavaUtilVector *) nil_chk(menu)) size]; j++) {
        JavaLangInteger *modeInt = [menu getWithInt:j];
        jint mode = [((JavaLangInteger *) nil_chk(modeInt)) intValue];
        if (mode != -1) [vector addWithId:modeInt];
      }
    }
    else {
      JavaLangInteger *modeInt = [element getMode];
      jint mode = [((JavaLangInteger *) nil_chk(modeInt)) intValue];
      if (mode != -1) [vector addWithId:modeInt];
    }
  }
  return vector;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiCustomizeToolbarModel)
