//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D () {
 @public
  jboolean defined_GeoPolyLine3D_;
  jint index1_;
  jint index2_;
  GeogebraCommonKernelMatrixCoords *direction1_;
  GeogebraCommonKernelMatrixCoords *direction2_;
  GeogebraCommonKernelMatrixCoords *direction3_;
  jboolean isPlanar__;
  GeogebraCommonKernelMatrixCoords *normal_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg_GeoPolyLine3D_;
}

- (void)setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint
                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, direction3_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, normal_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D, seg_GeoPolyLine3D_, GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint2);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_POLYLINE3D();
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil) autorelease];
  GeogebraCommonKernelGeosGeoPolyLine_set_points_(ret, GeogebraCommonKernelGeosGeoElement_copyPointsNDWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, points_));
  [ret setWithGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *poly = (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D class]);
  length_ = ((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *) nil_chk(poly))->length_;
  defined_GeoPolyLine3D_ = poly->defined_GeoPolyLine3D_;
  if (((IOSObjectArray *) nil_chk(points_))->size_ != poly->points_->size_) {
    IOSObjectArray *tempPoints = [IOSObjectArray arrayWithLength:poly->points_->size_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    for (jint i = 0; i < tempPoints->size_; i++) {
      IOSObjectArray_Set(tempPoints, i, i < points_->size_ ? IOSObjectArray_Get(points_, i) : [self createNewPoint]);
    }
    GeogebraCommonKernelGeosGeoPolyLine_set_points_(self, tempPoints);
  }
  for (jint i = 0; i < points_->size_; i++) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) setWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(poly->points_, i)];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPoint {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (void)setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint
                        withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2 {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, geoPoint, geoPoint2);
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                    withDouble:(jdouble)eps {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPath] == self) return YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_ - 1; i++) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, i), IOSObjectArray_Get(points_, i + 1));
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return YES;
  }
  return NO;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  jint index;
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  if (t == ((IOSObjectArray *) nil_chk(points_))->size_ - 1) {
    index = points_->size_ - 2;
  }
  else {
    t = fmod(t, (points_->size_ - 1));
    if (t < 0) t += (points_->size_ - 1);
    index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(t));
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, index), IOSObjectArray_Get(points_, index + 1));
  jdouble segParameter = t - index;
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getPointCoordsWithDouble:segParameter] withBoolean:NO];
  [pp setTWithDouble:t];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  jdouble localT = 0;
  jint index;
  index = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(t));
  jint direction = 0;
  while (index >= 0 && index < [self getNumPoints] - 1) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(nil_chk(points_), index), IOSObjectArray_Get(points_, index + 1));
    localT = [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:P];
    if (localT < 0 && direction <= 0) {
      direction = -1;
      index--;
    }
    else if (localT > 1 && direction >= 0) {
      direction = 1;
      index++;
    }
    else break;
  }
  if (index >= [self getNumPoints] - 1) index = [self getNumPoints] - 1;
  else if (index < 0) index = 0;
  t = index + JavaLangMath_minWithDouble_withDouble_(1, JavaLangMath_maxWithDouble_withDouble_(0, localT));
  [pp setTWithDouble:t];
  [self pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (void)calcLength {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, ((IOSObjectArray *) nil_chk(points_))->size_ - 1))) isDefined]) {
    [self setUndefined];
    length_ = JavaLangDouble_NaN;
    return;
  }
  length_ = 0;
  for (jint i = 0; i < points_->size_ - 1; i++) {
    if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) isDefined]) {
      [self setUndefined];
      length_ = JavaLangDouble_NaN;
      return;
    }
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points_, i), IOSObjectArray_Get(points_, i + 1));
    length_ += [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg_GeoPolyLine3D_)) getLength];
  }
  [self setDefined];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  return;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  return;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  return;
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  return;
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  return;
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return;
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  return;
}

- (jboolean)isAllVertexLabelsSet {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points_))->size_; i++) if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) isLabelSet]) return NO;
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  return;
}

- (GeogebraCommonKernelGeosGeoPoint *)getPointWithInt:(jint)i {
  return nil;
}

- (void)toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)curve {
  return;
}

- (jboolean)isPlanar {
  return isPlanar__;
}

- (void)calcIsPlanar {
  if (![self isDefined]) return;
  if ([self getNumPoints] <= 3) {
    isPlanar__ = YES;
    return;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_normal_(self, nil);
  index1_ = index2_ = 0;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction1_(self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction2_(self, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction3_(self, nil)));
  for (; index1_ < [self getNumPoints] - 1; index1_++) {
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index1_))) getInhomCoordsInD3])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, 0))) getInhomCoordsInD3] withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index1_))) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, 0))) getInhomCoordsInD3]]);
      break;
    }
  }
  if (direction1_ == nil) {
    isPlanar__ = YES;
    return;
  }
  for (index2_ = index1_ + 1; index2_ < [self getNumPoints]; index2_++) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction2_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index2_))) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index1_))) getInhomCoordsInD3]]);
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_normal_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction1_)) crossProductWithGeogebraCommonKernelMatrixCoords:direction2_]);
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease] withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      break;
    }
    else {
      GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction2_(self, nil);
      GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_normal_(self, nil);
    }
  }
  if (direction2_ == nil || index2_ == [self getNumPoints] - 1) {
    isPlanar__ = YES;
    return;
  }
  if (index2_ + 1 < [self getNumPoints]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction3_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points_), index2_ + 1))) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, index2_))) getInhomCoordsInD3]]);
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(direction3_)) crossProductWithGeogebraCommonKernelMatrixCoords:normal_])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease] withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      isPlanar__ = NO;
      return;
    }
    isPlanar__ = YES;
    GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction3_(self, nil);
    return;
  }
}

- (void)dealloc {
  RELEASE_(direction1_);
  RELEASE_(direction2_);
  RELEASE_(direction3_);
  RELEASE_(normal_);
  RELEASE_(seg_GeoPolyLine3D_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "GeoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "createNewPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSegmentPoints", "V", 0x2, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "calcLength", NULL, "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "dilate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoPointND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "isAllVertexLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getPointWithInt:", "getPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:", "toGeoCurveCartesian", "V", 0x1, NULL, NULL },
    { "isPlanar", NULL, "Z", 0x1, NULL, NULL },
    { "calcIsPlanar", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defined_GeoPolyLine3D_", "defined", 0x2, "Z", NULL, NULL,  },
    { "index1_", NULL, 0x2, "I", NULL, NULL,  },
    { "index2_", NULL, 0x2, "I", NULL, NULL,  },
    { "direction1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "isPlanar__", "isPlanar", 0x2, "Z", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "seg_GeoPolyLine3D_", "seg", 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D = { 2, "GeoPolyLine3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 24, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  GeogebraCommonKernelGeosGeoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  self->defined_GeoPolyLine3D_ = NO;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction1_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction2_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_direction3_(self, nil);
  self->isPlanar__ = NO;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_set_normal_(self, nil);
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setAndConsume_seg_GeoPolyLine3D_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_(self->cons_));
}

GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, points);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_setSegmentPointsWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint, id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint2) {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(self->seg_GeoPolyLine3D_)) setCoordWithGeogebraCommonKernelKernelNDGeoPointND:geoPoint withGeogebraCommonKernelKernelNDGeoPointND:geoPoint2];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D)
