//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoNormalizePoints.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoNormalizePoints.h"
#include "java/lang/Math.h"

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoNormalizePoints_compute(GeogebraCommonKernelStatisticsAlgoNormalizePoints *self);

@implementation GeogebraCommonKernelStatisticsAlgoNormalizePoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)oldList {
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, oldList);
  return self;
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return normalizedList_;
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Normalize();
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_compute(self);
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((GeogebraCommonKernelGeosGeoList *) nil_chk(oldList_)) toGeoElement]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:normalizedList_];
  [self setDependencies];
}

- (void)dealloc {
  RELEASE_(oldList_);
  RELEASE_(normalizedList_);
  RELEASE_(cons_AlgoNormalizePoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoNormalizePoints", NULL, 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "oldList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "normalizedList_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "cons_AlgoNormalizePoints_", "cons", 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoNormalizePoints = { 2, "AlgoNormalizePoints", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoNormalizePoints;
}

@end

void GeogebraCommonKernelStatisticsAlgoNormalizePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoNormalizePoints *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *oldList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_set_oldList_(self, oldList);
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_set_cons_AlgoNormalizePoints_(self, cons);
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_setAndConsume_normalizedList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_compute(self);
  [self->normalizedList_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoNormalizePoints *new_GeogebraCommonKernelStatisticsAlgoNormalizePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *oldList) {
  GeogebraCommonKernelStatisticsAlgoNormalizePoints *self = [GeogebraCommonKernelStatisticsAlgoNormalizePoints alloc];
  GeogebraCommonKernelStatisticsAlgoNormalizePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, oldList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoNormalizePoints_compute(GeogebraCommonKernelStatisticsAlgoNormalizePoints *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->input_), 0))) isDefined]) {
    jdouble maxX = 0;
    jdouble minX = 0;
    jdouble maxY = 0;
    jdouble minY = 0;
    jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->oldList_)) size];
    IOSDoubleArray *normalizedX = [IOSDoubleArray arrayWithLength:size];
    IOSDoubleArray *normalizedY = [IOSDoubleArray arrayWithLength:size];
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->oldList_ getWithInt:i];
      if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
        GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
        jdouble x = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getInhomX];
        jdouble y = [p getInhomY];
        *IOSDoubleArray_GetRef(normalizedX, i) = x;
        *IOSDoubleArray_GetRef(normalizedY, i) = y;
        if (i == 0) {
          maxX = x;
          minX = x;
          maxY = y;
          minY = y;
        }
        else {
          maxX = JavaLangMath_maxWithDouble_withDouble_(maxX, x);
          minX = JavaLangMath_minWithDouble_withDouble_(minX, x);
          maxY = JavaLangMath_maxWithDouble_withDouble_(maxY, y);
          minY = JavaLangMath_minWithDouble_withDouble_(minY, y);
        }
      }
      else {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) setUndefined];
        return;
      }
    }
    for (jint i = 0; i < size; i++) {
      if (maxX - minX == 0) *IOSDoubleArray_GetRef(normalizedX, i) = 0;
      else *IOSDoubleArray_GetRef(normalizedX, i) = (IOSDoubleArray_Get(normalizedX, i) - minX) / (maxX - minX);
      if (maxY - minY == 0) *IOSDoubleArray_GetRef(normalizedY, i) = 0;
      else *IOSDoubleArray_GetRef(normalizedY, i) = (IOSDoubleArray_Get(normalizedY, i) - minY) / (maxY - minY);
      GeogebraCommonKernelGeosGeoPoint *gp = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_AlgoNormalizePoints_) autorelease];
      [gp setCoordsWithDouble:IOSDoubleArray_Get(normalizedX, i) withDouble:IOSDoubleArray_Get(normalizedY, i) withDouble:1.0];
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) addWithGeogebraCommonKernelGeosGeoElement:gp];
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->normalizedList_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoNormalizePoints)
