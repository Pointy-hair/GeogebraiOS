//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadius.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricSide.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRadius.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> origin_, secondPoint_;
  id<GeogebraCommonKernelArithmeticNumberValue> radius_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *side_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius, origin_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius, secondPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius, radius_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius, side_, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius, quadric_, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                                                 withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withInt_(self, c, labels, origin, secondPoint, r, type);
  return self;
}

- (void)setOutput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createEnds {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin_)) isInfinite] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(secondPoint_)) isInfinite] || ![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(radius_)) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *o = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin_)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *o2 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(secondPoint_)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(o2)) subWithGeogebraCommonKernelMatrixCoords:o];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(radius_)) getDouble];
  [d calcNorm];
  jdouble altitude = [d getNorm];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(quadric_)) setDefined];
  [self setQuadricWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:o2 withGeogebraCommonKernelMatrixCoords:[d mulWithDouble:1 / altitude] withDouble:r withDouble:0 withDouble:altitude];
  [quadric_ calcVolume];
}

- (void)setQuadricWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o2
                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)d
                                            withDouble:(jdouble)r
                                            withDouble:(jdouble)min
                                            withDouble:(jdouble)max {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)getQuadric {
  return quadric_;
}

- (GeogebraCommonKernelAlgosAlgoElement *)getTransformedAlgoWithNSStringArray:(IOSObjectArray *)labels
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                       withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)r {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getTransformedOutputWithGeogebraCommonKernelTransform:(GeogebraCommonKernelTransform *)t {
  id<GeogebraCommonKernelKernelNDGeoPointND> p1 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelTransform *) nil_chk(t)) transformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin_, [GeogebraCommonKernelGeosGeoElement class]) withNSString:GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin_, [GeogebraCommonKernelGeosGeoElement class]))]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  id<GeogebraCommonKernelKernelNDGeoPointND> p2 = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([t transformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint_, [GeogebraCommonKernelGeosGeoElement class]) withNSString:GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint_, [GeogebraCommonKernelGeosGeoElement class]))]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin_, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint_, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelGeosGeoNumeric *r = [([new_GeogebraCommonKernelAlgosAlgoRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self->cons_, nil, [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getBottom]) autorelease]) getRadius];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(r)) setAuxiliaryObjectWithBoolean:YES];
  IOSObjectArray *output = [self getOutput];
  IOSObjectArray *labels = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(output))->size_ type:NSString_class_()];
  for (jint i = 0; i < output->size_; i++) {
    IOSObjectArray_Set(labels, i, GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_(IOSObjectArray_Get(output, i)));
  }
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getTransformedAlgoWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumeric:r];
  IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutput];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
    GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(IOSObjectArray_Get(output, i), IOSObjectArray_Get(ret, i));
  }
  [algo update];
  return ret;
}

- (void)update {
  if (stopUpdateCascade_) {
    return;
  }
  [self compute];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(quadric_)) update];
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) isLabelSet]) {
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getBottom])) getParentAlgorithm])) update];
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getTop])) getParentAlgorithm])) update];
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getSide])) getParentAlgorithm])) update];
  }
}

- (void)dealloc {
  RELEASE_(origin_);
  RELEASE_(secondPoint_);
  RELEASE_(radius_);
  RELEASE_(side_);
  RELEASE_(bottom_);
  RELEASE_(top_);
  RELEASE_(quadric_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withInt:", "AlgoQuadricLimitedPointPointRadius", NULL, 0x1, NULL, NULL },
    { "setOutput", NULL, "V", 0x404, NULL, NULL },
    { "createEnds", NULL, "V", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setQuadricWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "setQuadric", "V", 0x404, NULL, NULL },
    { "getQuadric", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DLimited;", 0x1, NULL, NULL },
    { "getTransformedAlgoWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumeric:", "getTransformedAlgo", "Lgeogebra.common.kernel.algos.AlgoElement;", 0x404, NULL, NULL },
    { "getTransformedOutputWithGeogebraCommonKernelTransform:", "getTransformedOutput", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "secondPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "radius_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "side_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", NULL, NULL,  },
    { "bottom_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "top_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "quadric_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DLimited;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius = { 2, "AlgoQuadricLimitedPointPointRadius", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 9, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> origin, id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint, id<GeogebraCommonKernelArithmeticNumberValue> r, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_origin_(self, origin);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_secondPoint_(self, secondPoint);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_radius_(self, r);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_setAndConsume_quadric_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(c));
  [self->quadric_ setTypeWithInt:type];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(r, [GeogebraCommonKernelGeosGeoElement class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [GeogebraCommonKernelGeosGeoElement class])))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(secondPoint, [GeogebraCommonKernelGeosGeoElement class])))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(r, [GeogebraCommonKernelGeosGeoElement class])))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [self->quadric_ setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [self compute];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricSide_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_withBoolean_(self->cons_, self->quadric_, YES) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_side_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([algo getQuadric], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]));
  [self->quadric_ setSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:self->side_];
  [self createEnds];
  [self->quadric_ setBottomTopWithGeogebraCommonKernelKernelNDGeoConicND:self->bottom_ withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:self->top_];
  [self setOutput];
  [self->quadric_ initLabelsIncludingBottomWithNSStringArray:labels];
  [self->quadric_ updatePartsVisualStyle];
  [self update];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius)
