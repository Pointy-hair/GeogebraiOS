//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPyramid.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "java/util/Collection.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid () {
 @public
  GeogebraCommonKernelMatrixCoords *bottomCenter_;
}

- (void)updateSideWithInt:(jint)index
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)bottomPoints
withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)bottomSegments;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid, bottomCenter_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_updateSideWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self, jint index, IOSObjectArray *bottomPoints, IOSObjectArray *bottomSegments);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, labels, points);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, polygon, point);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, polygon, height);
  return self;
}

- (void)createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)bottomPoints {
  [self setBottomWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:polyhedron_];
  id<GeogebraCommonKernelKernelNDGeoPointND> topPoint = [self getTopPoint];
  bottomPointsLength_ = ((IOSObjectArray *) nil_chk(bottomPoints))->size_;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:bottomPointsLength_ + 1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()]);
  for (jint i = 0; i < bottomPointsLength_; i++) IOSObjectArray_Set(points_, i, IOSObjectArray_Get(bottomPoints, i));
  IOSObjectArray_Set(points_, bottomPointsLength_, topPoint);
  for (jint i = 0; i < bottomPointsLength_; i++) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) startNewFace];
    [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(bottomPoints, i)];
    [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(bottomPoints, (i + 1) % (bottomPointsLength_))];
    [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:topPoint];
    [polyhedron_ endCurrentFace];
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setTypeWithInt:GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_TYPE_PYRAMID];
}

- (void)updateOutputWithInt:(jint)newBottomPointsLength {
  [self updateOutputPoints];
  IOSObjectArray *bottomPoints = [self getBottomPoints];
  IOSObjectArray *bottomSegments = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getSegments];
  jint nOld = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size];
  if (newBottomPointsLength > nOld) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) updateSegmentsLinked];
    for (jint i = nOld; i < newBottomPointsLength; i++) {
      [polyhedron_ startNewFace];
      [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(bottomPoints), i)];
      [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(bottomPoints, (i + 1) % newBottomPointsLength)];
      [polyhedron_ addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:[self getTopPoint]];
      [polyhedron_ endCurrentFace];
      GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *polygon = [polyhedron_ createPolygonWithInt:i];
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) addOutputWithGeogebraCommonKernelGeosGeoElement:polygon withBoolean:NO];
      [outputSegmentsSide_ addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(polygon)) getSegments]), 2), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
    }
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk([self getPolyhedron])) allLabelsAreSet]) {
      [outputSegmentsSide_ setLabelsWithNSStringArray:nil];
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) setLabelsWithNSStringArray:nil];
    }
    [self refreshOutput];
  }
  else if (newBottomPointsLength < nOld) {
    GeogebraCommonKernelGeosGeoPolygon *polygon = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) getElementWithInt:newBottomPointsLength - 1];
    IOSObjectArray *p = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    IOSObjectArray_Set(p, 0, IOSObjectArray_Get(nil_chk(bottomPoints), newBottomPointsLength - 1));
    IOSObjectArray_Set(p, 1, IOSObjectArray_Get(bottomPoints, 0));
    IOSObjectArray_Set(p, 2, [self getTopPoint]);
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:p];
    IOSObjectArray *s = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
    IOSObjectArray_Set(s, 0, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getSegments]), newBottomPointsLength - 1));
    IOSObjectArray_Set(s, 1, [outputSegmentsSide_ getElementWithInt:newBottomPointsLength - 1]);
    IOSObjectArray_Set(s, 2, [outputSegmentsSide_ getElementWithInt:0]);
    [polygon setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:s];
    [polygon calcArea];
  }
  if (bottomPointsLength_ < newBottomPointsLength) {
    for (jint i = bottomPointsLength_; i < newBottomPointsLength; i++) GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_updateSideWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, i, bottomPoints, bottomSegments);
  }
  bottomPointsLength_ = newBottomPointsLength;
}

- (void)updateSideWithInt:(jint)index
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)bottomPoints
withGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)bottomSegments {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_updateSideWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_(self, index, bottomPoints, bottomSegments);
}

- (void)initCoords {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_setAndConsume_bottomCenter_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
}

- (void)updateOutputPoints {
  IOSObjectArray *bottomPoints = [self getBottomPoints];
  if (bottomPoints == nil) {
    return;
  }
  GeogebraCommonKernelMatrixCoords *bottomCenter1 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bottomPoints))->size_; i++) {
    bottomCenter1 = [bottomCenter1 addWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(bottomPoints, i))) getInhomCoordsInD3]];
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_set_bottomCenter_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(bottomCenter1)) mulWithDouble:(jdouble) 1 / (bottomPoints->size_)]);
  if (height_ != nil) {
    GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(bottom_)) getMainDirection])) normalized])) mulWithDouble:[height_ getDouble]];
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getTopPoint])) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(bottomCenter_)) addWithGeogebraCommonKernelMatrixCoords:v] withBoolean:YES];
  }
}

- (void)compute {
  if (![self preCompute]) {
    if (height_ != nil) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([self getTopPoint], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setUndefined];
    return;
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Pyramid();
}

- (void)updateOutput {
  id<JavaUtilCollection> faces = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) getFacesCollection];
  jint step = 1;
  for (GeogebraCommonKernelGeosGeoPolygon * __strong polygon in nil_chk(faces)) {
    IOSObjectArray *segments = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getSegments];
    if (step == 1 && !bottomAsInput_) {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(polygon, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]) withBoolean:NO];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(segments))->size_; i++) {
        [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(segments, i), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
      }
      step++;
    }
    else {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(polygon, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class]) withBoolean:NO];
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) addOutputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(IOSObjectArray_Get(nil_chk([polygon getSegments]), 2), [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]) withBoolean:NO];
      step++;
    }
  }
  [self refreshOutput];
}

- (jint)getSideLengthFromLabelsLengthWithInt:(jint)length {
  if (bottomAsInput_) return (length + [self getShift] - 2) / 2;
  return (length + [self getShift] - 3) / 3;
}

- (void)updateVolumeWithDouble:(jdouble)height {
  [super updateVolumeWithDouble:height];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk([self getPolyhedron])) setVolumeWithDouble:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getArea] * height / 3];
}

- (void)updateDependentGeos {
  [super updateDependentGeos];
  if (height_ != nil) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getTopPoint])) update];
  }
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk([self getPolyhedron])) allLabelsAreSet]) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) updateParentAlgorithm];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) updateParentAlgorithm];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) updateParentAlgorithm];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) updateParentAlgorithm];
  }
}

- (void)updateOutputSegmentsAndPolygonsParentAlgorithms {
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) updateParentAlgorithm];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) updateParentAlgorithm];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) updateParentAlgorithm];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) updateParentAlgorithm];
}

- (void)dealloc {
  RELEASE_(bottomCenter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolyhedronPointsPyramid", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPolyhedronPointsPyramid", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoPolyhedronPointsPyramid", NULL, 0x1, NULL, NULL },
    { "createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "createPolyhedron", "V", 0x4, NULL, NULL },
    { "updateOutputWithInt:", "updateOutput", "V", 0x4, NULL, NULL },
    { "updateSideWithInt:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "updateSide", "V", 0x2, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateOutputPoints", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "updateOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSideLengthFromLabelsLengthWithInt:", "getSideLengthFromLabelsLength", "I", 0x4, NULL, NULL },
    { "updateVolumeWithDouble:", "updateVolume", "V", 0x4, NULL, NULL },
    { "updateDependentGeos", NULL, "V", 0x4, NULL, NULL },
    { "updateOutputSegmentsAndPolygonsParentAlgorithms", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bottomCenter_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid = { 2, "AlgoPolyhedronPointsPyramid", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 15, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, labels, points);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, labels, points);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, polygon, point);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, polygon, point);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelArithmeticNumberValue> height) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, polygon, height);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelArithmeticNumberValue> height) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, polygon, height);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_updateSideWithInt_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoSegmentNDArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid *self, jint index, IOSObjectArray *bottomPoints, IOSObjectArray *bottomSegments) {
  GeogebraCommonKernelGeosGeoPolygon *polygon = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygonsSide_)) getElementWithInt:index - 1];
  IOSObjectArray *p = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(p, 0, IOSObjectArray_Get(nil_chk(bottomPoints), index - 1));
  IOSObjectArray_Set(p, 1, IOSObjectArray_Get(bottomPoints, index));
  IOSObjectArray_Set(p, 2, [self getTopPoint]);
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:p];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  IOSObjectArray_Set(s, 0, IOSObjectArray_Get(nil_chk(bottomSegments), index - 1));
  IOSObjectArray_Set(s, 1, [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegmentsSide_)) getElementWithInt:index]);
  IOSObjectArray_Set(s, 2, [self->outputSegmentsSide_ getElementWithInt:index - 1]);
  [polygon setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:s];
  [polygon calcArea];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid)
