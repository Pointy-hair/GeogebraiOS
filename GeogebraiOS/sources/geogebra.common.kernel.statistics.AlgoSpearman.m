//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoSpearman.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoSpearman.h"
#include "org/apache/commons/math/stat/correlation/SpearmansCorrelation.h"

@interface GeogebraCommonKernelStatisticsAlgoSpearman () {
 @public
  GeogebraCommonKernelGeosGeoList *geoListPts_, *geoListX_, *geoListY_;
  GeogebraCommonKernelGeosGeoNumeric *result_;
  OrgApacheCommonsMathStatCorrelationSpearmansCorrelation *sp_;
  IOSDoubleArray *valX_;
  IOSDoubleArray *valY_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, geoListPts_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, geoListX_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, geoListY_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, result_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, sp_, OrgApacheCommonsMathStatCorrelationSpearmansCorrelation *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, valX_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSpearman, valY_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoSpearman_compute(GeogebraCommonKernelStatisticsAlgoSpearman *self);

@implementation GeogebraCommonKernelStatisticsAlgoSpearman

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoListX
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoListY {
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoListX, geoListY);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Spearman();
}

- (void)setInputOutput {
  if (geoListPts_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoListPts_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoListX_);
    IOSObjectArray_Set(input_, 1, geoListY_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoSpearman_compute(self);
}

- (void)dealloc {
  RELEASE_(geoListPts_);
  RELEASE_(geoListX_);
  RELEASE_(geoListY_);
  RELEASE_(result_);
  RELEASE_(sp_);
  RELEASE_(valX_);
  RELEASE_(valY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoSpearman", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoSpearman", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoSpearman", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoListPts_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoListX_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoListY_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sp_", NULL, 0x2, "Lorg.apache.commons.math.stat.correlation.SpearmansCorrelation;", NULL, NULL,  },
    { "valX_", NULL, 0x2, "[D", NULL, NULL,  },
    { "valY_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoSpearman = { 2, "AlgoSpearman", "geogebra.common.kernel.statistics", NULL, 0x1, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoSpearman;
}

@end

void GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoSpearman *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoListX, GeogebraCommonKernelGeosGeoList *geoListY) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListX_(self, geoListX);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListY_(self, geoListY);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListPts_(self, nil);
  GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoSpearman_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoSpearman *new_GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoListX, GeogebraCommonKernelGeosGeoList *geoListY) {
  GeogebraCommonKernelStatisticsAlgoSpearman *self = [GeogebraCommonKernelStatisticsAlgoSpearman alloc];
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoListX, geoListY);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoSpearman *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoSpearman *new_GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoSpearman *self = [GeogebraCommonKernelStatisticsAlgoSpearman alloc];
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoSpearman *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListX_(self, nil);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListY_(self, nil);
  GeogebraCommonKernelStatisticsAlgoSpearman_set_geoListPts_(self, geoList);
  GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoSpearman_compute(self);
}

GeogebraCommonKernelStatisticsAlgoSpearman *new_GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelStatisticsAlgoSpearman *self = [GeogebraCommonKernelStatisticsAlgoSpearman alloc];
  GeogebraCommonKernelStatisticsAlgoSpearman_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoSpearman_compute(GeogebraCommonKernelStatisticsAlgoSpearman *self) {
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 1) {
    jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoListPts_)) size];
    if (![self->geoListPts_ isDefined] || size < 2) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
    GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_valX_(self, [IOSDoubleArray newArrayWithLength:size]);
    GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_valY_(self, [IOSDoubleArray newArrayWithLength:size]);
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->geoListPts_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
        jdouble x = [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getX];
        jdouble y = [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getY];
        jdouble z = [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) getZ];
        *IOSDoubleArray_GetRef(self->valX_, i) = x / z;
        *IOSDoubleArray_GetRef(self->valY_, i) = y / z;
      }
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
  }
  else {
    jint sizeX = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoListX_)) size];
    jint sizeY = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoListY_)) size];
    if (![self->geoListX_ isDefined] || ![self->geoListY_ isDefined] || sizeX < 2 || sizeX != sizeY) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
    GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_valX_(self, [IOSDoubleArray newArrayWithLength:sizeX]);
    GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_valY_(self, [IOSDoubleArray newArrayWithLength:sizeX]);
    for (jint i = 0; i < sizeX; i++) {
      GeogebraCommonKernelGeosGeoElement *geox = [self->geoListX_ getWithInt:i];
      GeogebraCommonKernelGeosGeoElement *geoy = [self->geoListY_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geox] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geoy]) {
        id<GeogebraCommonKernelArithmeticNumberValue> numx = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geox, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        id<GeogebraCommonKernelArithmeticNumberValue> numy = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geoy, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->valX_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(numx)) getDouble];
        *IOSDoubleArray_GetRef(self->valY_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(numy)) getDouble];
      }
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
  }
  if (self->sp_ == nil) GeogebraCommonKernelStatisticsAlgoSpearman_setAndConsume_sp_(self, new_OrgApacheCommonsMathStatCorrelationSpearmansCorrelation_init());
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:[((OrgApacheCommonsMathStatCorrelationSpearmansCorrelation *) nil_chk(self->sp_)) correlationWithDoubleArray:self->valX_ withDoubleArray:self->valY_]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoSpearman)
