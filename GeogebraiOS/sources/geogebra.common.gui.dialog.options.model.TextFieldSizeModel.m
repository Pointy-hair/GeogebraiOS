//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/TextFieldSizeModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/ITextFieldListener.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/TextFieldSizeModel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"

@interface GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener_;
  GeogebraCommonKernelKernel *kernel_;
}

- (GeogebraCommonKernelGeosGeoTextField *)getTextFieldAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel, listener_, id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel, kernel_, GeogebraCommonKernelKernel *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoTextField *GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, jint index);

@implementation GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelITextFieldListener:(id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>)listener {
  GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelITextFieldListener_(self, app, listener);
  return self;
}

- (GeogebraCommonKernelGeosGeoTextField *)getTextFieldAtWithInt:(jint)index {
  return GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, index);
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoTextField *temp, *geo0 = GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, 0);
  jboolean equalSize = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    temp = GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, i);
    if ([((GeogebraCommonKernelGeosGeoTextField *) nil_chk(geo0)) getLength] != [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(temp)) getLength]) equalSize = NO;
  }
  if (equalSize) {
    [((id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:JreStrcat("I", [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(geo0)) getLength])];
  }
  else {
    [((id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:@""];
  }
}

- (void)applyChangesWithNSString:(NSString *)strValue {
  [self applyChangesWithGeogebraCommonKernelArithmeticNumberValue:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToNumericWithNSString:strValue withBoolean:YES]];
}

- (void)applyChangesWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)value {
  if (value != nil && !JavaLangDouble_isNaNWithDouble_([value getDouble])) {
    for (jint i = 0; i < [self getGeosLength]; i++) {
      GeogebraCommonKernelGeosGeoTextField *geo = GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(self, i);
      [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(geo)) setLengthWithInt:J2ObjCFpToInt([value getDouble])];
      [geo updateRepaint];
    }
  }
}

- (jboolean)isValidAtWithInt:(jint)index {
  return ([[self getGeoAtWithInt:index] isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]]);
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelITextFieldListener:", "TextFieldSizeModel", NULL, 0x1, NULL, NULL },
    { "getTextFieldAtWithInt:", "getTextFieldAt", "Lgeogebra.common.kernel.geos.GeoTextField;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyChangesWithNSString:", "applyChanges", "V", 0x1, NULL, NULL },
    { "applyChangesWithGeogebraCommonKernelArithmeticNumberValue:", "applyChanges", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.ITextFieldListener;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel = { 2, "TextFieldSizeModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelITextFieldListener_(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_set_listener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *new_GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelITextFieldListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener) {
  GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self = [GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel alloc];
  GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelITextFieldListener_(self, app, listener);
  return self;
}

GeogebraCommonKernelGeosGeoTextField *GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel_getTextFieldAtWithInt_(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel *self, jint index) {
  return (GeogebraCommonKernelGeosGeoTextField *) check_class_cast([self getObjectAtWithInt:index], [GeogebraCommonKernelGeosGeoTextField class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelTextFieldSizeModel)
