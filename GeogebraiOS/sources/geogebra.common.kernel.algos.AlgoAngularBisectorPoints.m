//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAngularBisectorPoints.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngularBisectorPoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/MyMath.h"

@interface GeogebraCommonKernelAlgosAlgoAngularBisectorPoints () {
 @public
  GeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  GeogebraCommonKernelGeosGeoLine *bisector_;
  GeogebraCommonKernelGeosGeoLine *g_, *h_;
  GeogebraCommonKernelGeosGeoVector *wv_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, A_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, B_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, C_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, bisector_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, h_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints, wv_, GeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self);

@implementation GeogebraCommonKernelAlgosAlgoAngularBisectorPoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C {
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, A, B, C);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_AngularBisector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, B_);
  IOSObjectArray_Set(input_, 2, C_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:bisector_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getLine {
  return bisector_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getA {
  return A_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getB {
  return B_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getC {
  return C_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBisectorOfABC" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnAngularBisectorPointsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(bisector_);
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(wv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoAngularBisectorPoints", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getC", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "bisector_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "wv_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAngularBisectorPoints = { 2, "AlgoAngularBisectorPoints", "geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAngularBisectorPoints;
}

@end

void GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_A_(self, A);
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_B_(self, B);
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_set_C_(self, C);
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_bisector_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self->bisector_ setStartPointWithGeogebraCommonKernelGeosGeoPoint:B];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_h_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_setAndConsume_wv_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [self->wv_ setCoordsWithDouble:0 withDouble:0 withDouble:0];
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(self);
  [self->bisector_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *new_GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self = [GeogebraCommonKernelAlgosAlgoAngularBisectorPoints alloc];
  GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, A, B, C);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngularBisectorPoints_compute(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints *self) {
  jboolean infiniteB = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) isInfinite];
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(self->B_, self->A_, self->g_);
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(self->B_, self->C_, self->h_);
  jdouble gx = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->y_;
  jdouble gy = -self->g_->x_;
  jdouble lenG = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(gx, gy);
  gx /= lenG;
  gy /= lenG;
  jdouble hx = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->h_))->y_;
  jdouble hy = -self->h_->x_;
  jdouble lenH = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(hx, hy);
  hx /= lenH;
  hy /= lenH;
  jdouble wx, wy;
  if (infiniteB) {
    wx = gx;
    wy = gy;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_))->z_ = (self->g_->z_ / lenG + self->h_->z_ / lenH) / 2.0;
    if ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([self->bisector_ isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = self->bisector_->y_;
        self->wv_->y_ = -self->bisector_->x_;
      }
      if (((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ * wx + self->wv_->y_ * wy >= 0) {
        self->wv_->x_ = wx;
        self->wv_->y_ = wy;
      }
      else {
        self->wv_->x_ = -wx;
        self->wv_->y_ = -wy;
        self->bisector_->z_ = -self->bisector_->z_;
      }
    }
    else {
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = wx;
      self->wv_->y_ = wy;
    }
    self->bisector_->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->y_;
    self->bisector_->y_ = self->wv_->x_;
  }
  else {
    jdouble ip = gx * hx + gy * hy;
    if (ip >= 0.0) {
      wx = gx + hx;
      wy = gy + hy;
    }
    else {
      wx = hy - gy;
      wy = gx - hx;
      if (gx * hy < gy * hx) {
        wx = -wx;
        wy = -wy;
      }
    }
    jdouble length = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(wx, wy);
    wx /= length;
    wy /= length;
    if ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_)) isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = self->bisector_->y_;
        self->wv_->y_ = -self->bisector_->x_;
      }
      if (((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ * wx + self->wv_->y_ * wy >= 0) {
        self->wv_->x_ = wx;
        self->wv_->y_ = wy;
      }
      else {
        self->wv_->x_ = -wx;
        self->wv_->y_ = -wy;
      }
    }
    else {
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->x_ = wx;
      self->wv_->y_ = wy;
    }
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->bisector_))->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->wv_))->y_;
    self->bisector_->y_ = self->wv_->x_;
    self->bisector_->z_ = -(self->B_->inhomX_ * self->bisector_->x_ + self->B_->inhomY_ * self->bisector_->y_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAngularBisectorPoints)
