//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Traversing.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "geogebra/common/kernel/CASGenericInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/GeoGebraCasInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelArithmeticTraversing : NSObject
@end

@interface GeogebraCommonKernelArithmeticTraversing_Replacer () {
 @public
  id<GeogebraCommonKernelArithmeticExpressionValue> oldObj_;
  id<GeogebraCommonKernelArithmeticExpressionValue> newObj_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_Replacer, oldObj_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_Replacer, newObj_, id<GeogebraCommonKernelArithmeticExpressionValue>)

static GeogebraCommonKernelArithmeticTraversing_Replacer *GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_Replacer, replacer_, GeogebraCommonKernelArithmeticTraversing_Replacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_Replacer, replacer_, GeogebraCommonKernelArithmeticTraversing_Replacer *)

@interface GeogebraCommonKernelArithmeticTraversing_CommandReplacer () {
 @public
  GeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandReplacer, app_, GeogebraCommonMainApp *)

static GeogebraCommonKernelArithmeticTraversing_CommandReplacer *GeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_CommandReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_CommandReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_CommandReplacer *)

static GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_GgbVectRemover, remover_, GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *)

@interface GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer () {
 @public
  GeogebraCommonKernelArithmeticFunctionVariable *fv_;
  jint replacements_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, fv_, GeogebraCommonKernelArithmeticFunctionVariable *)

static GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)

@interface GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer () {
 @public
  NSString *var_;
  id<GeogebraCommonKernelArithmeticExpressionValue> newObj_;
  jboolean didReplacement__;
  jboolean replaceFVs_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, var_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, newObj_, id<GeogebraCommonKernelArithmeticExpressionValue>)

static GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)

@interface GeogebraCommonKernelArithmeticTraversing_VariableReplacer () {
 @public
  id<JavaUtilList> vars_;
  id<JavaUtilList> newObjs_;
  jint replacements_;
  GeogebraCommonKernelKernel *kernel_;
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)getVarWithNSString:(NSString *)var;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariableReplacer, vars_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariableReplacer, newObjs_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariableReplacer, kernel_, GeogebraCommonKernelKernel *)

static GeogebraCommonKernelArithmeticTraversing_VariableReplacer *GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_VariableReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_VariableReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_VariableReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_VariableReplacer *)

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(NSString *var);

@interface GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer () {
 @public
  jint dx_;
  jint dy_;
  JavaUtilArrayList *variables_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer, variables_, JavaUtilArrayList *)

@interface GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables () {
 @public
  GeogebraCommonKernelKernel *kernel_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables, kernel_, GeogebraCommonKernelKernel *)

@interface GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables () {
 @public
  JavaUtilTreeSet *tree_;
  JavaUtilTreeSet *localTree_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables, tree_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables, localTree_, JavaUtilTreeSet *)

@interface GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables () {
 @public
  JavaUtilArrayList *al_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables, al_, JavaUtilArrayList *)

@interface GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer () {
 @public
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

static GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)

@interface GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer () {
 @public
  jboolean toRoot_;
}

@end

static jint GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_ = 99;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, MAX_ROOT_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, MAX_ROOT_, jint)

static GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer, replacer_, GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)

static GeogebraCommonKernelArithmeticTraversing_PrefixRemover *GeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_PrefixRemover, collector_, GeogebraCommonKernelArithmeticTraversing_PrefixRemover *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_PrefixRemover, collector_, GeogebraCommonKernelArithmeticTraversing_PrefixRemover *)

@interface GeogebraCommonKernelArithmeticTraversing_CommandCollector () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandCollector, commands_, id<JavaUtilSet>)

static GeogebraCommonKernelArithmeticTraversing_CommandCollector *GeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_CommandCollector, collector_, GeogebraCommonKernelArithmeticTraversing_CommandCollector *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandCollector, collector_, GeogebraCommonKernelArithmeticTraversing_CommandCollector *)

@interface GeogebraCommonKernelArithmeticTraversing_FVarCollector () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_FVarCollector, commands_, id<JavaUtilSet>)

static GeogebraCommonKernelArithmeticTraversing_FVarCollector *GeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_FVarCollector, collector_, GeogebraCommonKernelArithmeticTraversing_FVarCollector *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_FVarCollector, collector_, GeogebraCommonKernelArithmeticTraversing_FVarCollector *)

@interface GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector () {
 @public
  id<JavaUtilSet> commands_;
}

- (void)addWithGeogebraCommonKernelGeosGeoDummyVariable:(GeogebraCommonKernelGeosGeoDummyVariable *)dummy;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, commands_, id<JavaUtilSet>)

static GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, collector_, GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector, collector_, GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithGeogebraCommonKernelGeosGeoDummyVariable_(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self, GeogebraCommonKernelGeosGeoDummyVariable *dummy);

@interface GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector () {
 @public
  id<JavaUtilSet> commands_;
}

- (void)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)dummy;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, commands_, id<JavaUtilSet>)

static GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, collector_, GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector, collector_, GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self, id<GeogebraCommonKernelArithmeticExpressionValue> dummy);

@interface GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer () {
 @public
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, commands_, id<JavaUtilSet>)

static GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, collector_, GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer, collector_, GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)

@interface GeogebraCommonKernelArithmeticTraversing_FunctionExpander ()

- (id<GeogebraCommonKernelArithmeticExpressionValue>)expandWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

+ (jboolean)containsWithGeogebraCommonKernelGeosGeoDummyVariable:(GeogebraCommonKernelGeosGeoDummyVariable *)gdv;

@end

static GeogebraCommonKernelArithmeticTraversing_FunctionExpander *GeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_FunctionExpander, collector_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_FunctionExpander, collector_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)

static IOSObjectArray *GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_ = nil;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_FunctionExpander, variables_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_FunctionExpander, variables_, IOSObjectArray *)

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelArithmeticTraversing_FunctionExpander *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_(GeogebraCommonKernelGeosGeoDummyVariable *gdv);

static GeogebraCommonKernelArithmeticTraversing_FunctionCreator *GeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_FunctionCreator, creator_, GeogebraCommonKernelArithmeticTraversing_FunctionCreator *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_FunctionCreator, creator_, GeogebraCommonKernelArithmeticTraversing_FunctionCreator *)

static GeogebraCommonKernelArithmeticTraversing_CommandRemover *GeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_CommandRemover, remover_, GeogebraCommonKernelArithmeticTraversing_CommandRemover *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandRemover, remover_, GeogebraCommonKernelArithmeticTraversing_CommandRemover *)

static IOSObjectArray *GeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTraversing_CommandRemover, commands_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticTraversing_CommandRemover, commands_, IOSObjectArray *)

@implementation GeogebraCommonKernelArithmeticTraversing

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x401, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.arithmetic.Traversing$Replacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", "Lgeogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$SpreadsheetVariableRenamer;", "Lgeogebra.common.kernel.arithmetic.Traversing$ReplaceUndefinedVariables;", "Lgeogebra.common.kernel.arithmetic.Traversing$CollectUndefinedVariables;", "Lgeogebra.common.kernel.arithmetic.Traversing$CollectFunctionVariables;", "Lgeogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$DiffReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandCollector;", "Lgeogebra.common.kernel.arithmetic.Traversing$FVarCollector;", "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", "Lgeogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandRemover;", "Lgeogebra.common.kernel.arithmetic.Traversing$CASCommandReplacer;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing = { 2, "Traversing", "geogebra.common.kernel.arithmetic", NULL, 0x609, 1, methods, 0, NULL, 0, NULL, 23, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_Replacer)

@implementation GeogebraCommonKernelArithmeticTraversing_Replacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (ev == oldObj_) return newObj_;
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_Replacer *)getReplacerWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)original
                                                                  withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)replacement {
  return GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(original, replacement);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_Replacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(oldObj_);
  RELEASE_(newObj_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_Replacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_Replacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_Replacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$Replacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "oldObj_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "newObj_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$Replacer;", &GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_Replacer = { 2, "Replacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_Replacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_Replacer *GeogebraCommonKernelArithmeticTraversing_Replacer_getReplacerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> original, id<GeogebraCommonKernelArithmeticExpressionValue> replacement) {
  GeogebraCommonKernelArithmeticTraversing_Replacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_Replacer_set_oldObj_(nil_chk(GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_), original);
  GeogebraCommonKernelArithmeticTraversing_Replacer_set_newObj_(GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_, replacement);
  return GeogebraCommonKernelArithmeticTraversing_Replacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_Replacer_init(GeogebraCommonKernelArithmeticTraversing_Replacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_Replacer *new_GeogebraCommonKernelArithmeticTraversing_Replacer_init() {
  GeogebraCommonKernelArithmeticTraversing_Replacer *self = [GeogebraCommonKernelArithmeticTraversing_Replacer alloc];
  GeogebraCommonKernelArithmeticTraversing_Replacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_Replacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_CommandReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_CommandReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *c = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    NSString *cmdName = [((GeogebraCommonMainApp *) nil_chk(app_)) getReverseCommandWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]];
    JavaLangThrowable *t = nil;
    @try {
      GeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(cmdName);
    }
    @catch (JavaLangThrowable *t1) {
      t = t1;
    }
    if (t == nil) return ev;
    GeogebraCommonKernelArithmeticMyList *argList = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_([c getKernel]) autorelease];
    for (jint i = 0; i < [c getArgumentNumber]; i++) {
      [argList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([c getItemWithInt:i])) traverseWithGeogebraCommonKernelArithmeticTraversing:self]];
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_([c getKernel], [new_GeogebraCommonKernelGeosGeoDummyVariable_initWithGeogebraCommonKernelConstruction_withNSString_([((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease], GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), argList) autorelease];
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_CommandReplacer *)getReplacerWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  return GeogebraCommonKernelArithmeticTraversing_CommandReplacer_getReplacerWithGeogebraCommonMainApp_(app);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(app_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_CommandReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_CommandReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_CommandReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithGeogebraCommonMainApp:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$CommandReplacer;", &GeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CommandReplacer = { 2, "CommandReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CommandReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_CommandReplacer *GeogebraCommonKernelArithmeticTraversing_CommandReplacer_getReplacerWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonKernelArithmeticTraversing_CommandReplacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_CommandReplacer_set_app_(nil_chk(GeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_), app);
  return GeogebraCommonKernelArithmeticTraversing_CommandReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(GeogebraCommonKernelArithmeticTraversing_CommandReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_CommandReplacer *new_GeogebraCommonKernelArithmeticTraversing_CommandReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_CommandReplacer *self = [GeogebraCommonKernelArithmeticTraversing_CommandReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_CommandReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CommandReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_GgbVectRemover)

@implementation GeogebraCommonKernelArithmeticTraversing_GgbVectRemover

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *command = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(command)) getName])) isEqual:@"ggbvect"]) {
      GeogebraCommonKernelArithmeticExpressionNode *en = [command getArgumentWithInt:0];
      id<GeogebraCommonKernelArithmeticExpressionValue> unwrapped = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) unwrap];
      if ([unwrapped isKindOfClass:[GeogebraCommonKernelArithmeticMyVecNode class]]) {
        GeogebraCommonKernelArithmeticMyVecNode *vecNode = (GeogebraCommonKernelArithmeticMyVecNode *) check_class_cast(unwrapped, [GeogebraCommonKernelArithmeticMyVecNode class]);
        [((GeogebraCommonKernelArithmeticMyVecNode *) nil_chk(vecNode)) setCASVector];
        return vecNode;
      }
      else if ([unwrapped isKindOfClass:[GeogebraCommonKernelArithmetic3DMyVec3DNode class]]) {
        GeogebraCommonKernelArithmetic3DMyVec3DNode *vec3DNode = (GeogebraCommonKernelArithmetic3DMyVec3DNode *) check_class_cast(unwrapped, [GeogebraCommonKernelArithmetic3DMyVec3DNode class]);
        [((GeogebraCommonKernelArithmetic3DMyVec3DNode *) nil_chk(vec3DNode)) setCASVector];
        return vec3DNode;
      }
    }
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *)getInstance {
  return GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_getInstance();
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_GgbVectRemover class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_, nil, new_GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_GgbVectRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getInstance", NULL, "Lgeogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "remover_", NULL, 0x1a, "Lgeogebra.common.kernel.arithmetic.Traversing$GgbVectRemover;", &GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_GgbVectRemover = { 2, "GgbVectRemover", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_GgbVectRemover;
}

@end

GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_getInstance() {
  GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_initialize();
  return GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_remover_;
}

void GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *new_GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init() {
  GeogebraCommonKernelArithmeticTraversing_GgbVectRemover *self = [GeogebraCommonKernelArithmeticTraversing_GgbVectRemover alloc];
  GeogebraCommonKernelArithmeticTraversing_GgbVectRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_GgbVectRemover)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] || [ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] || [ev isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]]) && [((NSString *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv_)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    replacements_++;
    return fv_;
  }
  return ev;
}

- (jint)getReplacements {
  return replacements_;
}

+ (GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *)getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable_(fv);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(fv_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacements", NULL, "I", 0x1, NULL, NULL },
    { "getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fv_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "replacements_", NULL, 0x2, "I", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$VariablePolyReplacer;", &GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer = { 2, "VariablePolyReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_getReplacerWithGeogebraCommonKernelArithmeticFunctionVariable_(GeogebraCommonKernelArithmeticFunctionVariable *fv) {
  GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_set_fv_(nil_chk(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_), fv);
  return GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *new_GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer *self = [GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_VariablePolyReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  jboolean hitClass = [ev isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] || (replaceFVs_ && [ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]);
  if (!hitClass || ![((NSString *) nil_chk(var_)) isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    return ev;
  }
  didReplacement__ = YES;
  return newObj_;
}

+ (GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *)getReplacerWithNSString:(NSString *)varStr
                                     withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)replacement
                                                                           withBoolean:(jboolean)replaceFVs {
  return GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(varStr, replacement, replaceFVs);
}

- (jboolean)didReplacement {
  return didReplacement__;
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(var_);
  RELEASE_(newObj_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithNSString:withGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", 0x9, NULL, NULL },
    { "didReplacement", NULL, "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "var_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "newObj_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "didReplacement__", "didReplacement", 0x2, "Z", NULL, NULL,  },
    { "replaceFVs_", NULL, 0x2, "Z", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$GeoDummyReplacer;", &GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer = { 2, "GeoDummyReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(NSString *varStr, id<GeogebraCommonKernelArithmeticExpressionValue> replacement, jboolean replaceFVs) {
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_set_var_(nil_chk(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_), varStr);
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_set_newObj_(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_, replacement);
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_->didReplacement__ = NO;
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_->replaceFVs_ = replaceFVs;
  return GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *new_GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer *self = [GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_GeoDummyReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_VariableReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_VariableReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  id<GeogebraCommonKernelArithmeticExpressionValue> val;
  if ((val = GeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithGeogebraCommonKernelArithmeticExpressionValue_(ev)) != nil) return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, val) autorelease];
  if (!([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] || [ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] || [ev isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]])) return ev;
  if ((val = GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) == nil) {
    return ev;
  }
  replacements_++;
  return val;
}

- (jint)getReplacements {
  return replacements_;
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)getVarWithNSString:(NSString *)var {
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(var);
}

+ (void)addVarsWithNSString:(NSString *)varStr
withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)replacement {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_(varStr, replacement);
}

+ (GeogebraCommonKernelArithmeticTraversing_VariableReplacer *)getReplacerWithNSString:(NSString *)varStr
                                     withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)replacement
                                                        withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(varStr, replacement, kernel);
}

+ (GeogebraCommonKernelArithmeticTraversing_VariableReplacer *)getReplacer {
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer();
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(vars_);
  RELEASE_(newObjs_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_VariableReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_VariableReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_VariableReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacements", NULL, "I", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0xa, NULL, NULL },
    { "getVarWithNSString:", "getVar", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0xa, NULL, NULL },
    { "addVarsWithNSString:withGeogebraCommonKernelArithmeticExpressionValue:", "addVars", "V", 0x9, NULL, NULL },
    { "getReplacerWithNSString:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", 0x9, NULL, NULL },
    { "getReplacer", NULL, "Lgeogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vars_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
    { "newObjs_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lgeogebra/common/kernel/arithmetic/ExpressionValue;>;",  },
    { "replacements_", NULL, 0x2, "I", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$VariableReplacer;", &GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_VariableReplacer = { 2, "VariableReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 8, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_VariableReplacer;
}

@end

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_VariableReplacer_containsWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(((GeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->newObjs_)) size]; i++) {
    if ([GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ getWithInt:i] == ev) {
      return [GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ getWithInt:i];
    }
  }
  return nil;
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getVarWithNSString_(NSString *var) {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(((GeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) size]; i++) {
    if ([((NSString *) nil_chk(var)) isEqual:[GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->vars_ getWithInt:i]]) {
      return [((id<JavaUtilList>) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) getWithInt:i];
    }
  }
  return nil;
}

void GeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_(NSString *varStr, id<GeogebraCommonKernelArithmeticExpressionValue> replacement) {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((GeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) addWithId:varStr];
  [((id<JavaUtilList>) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) addWithId:replacement];
}

GeogebraCommonKernelArithmeticTraversing_VariableReplacer *GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(NSString *varStr, id<GeogebraCommonKernelArithmeticExpressionValue> replacement, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((GeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) clear];
  [((id<JavaUtilList>) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) clear];
  [GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->vars_ addWithId:varStr];
  [GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_ addWithId:replacement];
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->replacements_ = 0;
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_set_kernel_(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_, kernel);
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
}

GeogebraCommonKernelArithmeticTraversing_VariableReplacer *GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer() {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_initialize();
  [((id<JavaUtilList>) nil_chk(((GeogebraCommonKernelArithmeticTraversing_VariableReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_))->vars_)) clear];
  [((id<JavaUtilList>) nil_chk(GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->newObjs_)) clear];
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_->replacements_ = 0;
  return GeogebraCommonKernelArithmeticTraversing_VariableReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(GeogebraCommonKernelArithmeticTraversing_VariableReplacer *self) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_setAndConsume_vars_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_setAndConsume_newObjs_(self, new_JavaUtilArrayList_init());
}

GeogebraCommonKernelArithmeticTraversing_VariableReplacer *new_GeogebraCommonKernelArithmeticTraversing_VariableReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer *self = [GeogebraCommonKernelArithmeticTraversing_VariableReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_VariableReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer

- (instancetype)initWithInt:(jint)dx
                    withInt:(jint)dy {
  GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(self, dx, dy);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] && ![((JavaUtilArrayList *) nil_chk(variables_)) containsWithId:ev]) {
    GeogebraCommonKernelArithmeticVariable *v = (GeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) testWithNSString:name]) {
      NSString *newName = GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(name, dx_, dy_);
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([v getKernel])) getConstruction])) lookupLabelWithNSString:newName withBoolean:YES];
      [v setNameWithNSString:newName];
      [variables_ addWithId:v];
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
    GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class]);
    NSString *name = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple];
    if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) testWithNSString:name]) {
      NSString *newName = GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(name, dx_, dy_);
      return [((GeogebraCommonKernelConstruction *) nil_chk([geo getConstruction])) lookupLabelWithNSString:newName withBoolean:YES];
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(variables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:withInt:", "SpreadsheetVariableRenamer", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dx_", NULL, 0x2, "I", NULL, NULL,  },
    { "dy_", NULL, 0x2, "I", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/Variable;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer = { 2, "SpreadsheetVariableRenamer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer;
}

@end

void GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *self, jint dx, jint dy) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_setAndConsume_variables_(self, new_JavaUtilArrayList_init());
  self->dx_ = dx;
  self->dy_ = dy;
  [self->variables_ clear];
}

GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *new_GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(jint dx, jint dy) {
  GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *self = [GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer alloc];
  GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(self, dx, dy);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer)

@implementation GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
    GeogebraCommonKernelArithmeticVariable *v = (GeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    id<GeogebraCommonKernelArithmeticExpressionValue> replace = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:name withBoolean:YES];
    if (replace == nil) {
      replace = GeogebraCommonKernelArithmeticVariable_replacementWithGeogebraCommonKernelKernel_withNSString_(kernel_, name);
    }
    if ([replace isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] && ![((NSString *) nil_chk(name)) isEqual:[((GeogebraCommonKernelConstruction *) nil_chk([kernel_ getConstruction])) getRegisteredFunctionVariable]]) {
      name = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(replace, [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      GeogebraCommonKernelGeosGeoNumeric *slider = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_([kernel_ getConstruction], name, 1) autorelease];
      GeogebraCommonKernelGeosGeoNumeric_setSliderFromDefaultWithGeogebraCommonKernelGeosGeoNumeric_withBoolean_(slider, NO);
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"autocreating slider ", name));
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "ReplaceUndefinedVariables", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x12, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables = { 2, "ReplaceUndefinedVariables", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables;
}

@end

void GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *new_GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables *self = [GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables alloc];
  GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_ReplaceUndefinedVariables)

@implementation GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables

- (JavaUtilTreeSet *)getResult {
  [((JavaUtilTreeSet *) nil_chk(tree_)) removeAllWithJavaUtilCollection:localTree_];
  return tree_;
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(self);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
    GeogebraCommonKernelArithmeticVariable *v = (GeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticVariable class]);
    NSString *name = [((GeogebraCommonKernelArithmeticVariable *) nil_chk(v)) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    id<GeogebraCommonKernelArithmeticExpressionValue> ret;
    ret = [((GeogebraCommonKernelKernel *) nil_chk([v getKernel])) lookupLabelWithNSString:name];
    if (ret == nil) {
      ret = GeogebraCommonKernelArithmeticVariable_replacementWithGeogebraCommonKernelKernel_withNSString_([v getKernel], name);
    }
    if ([ret isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]] && ![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([v getKernel])) getConstruction])) isRegistredFunctionVariableWithNSString:name]) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"found undefined variable: ", [((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(ret, [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
      [((JavaUtilTreeSet *) nil_chk(tree_)) addWithId:[((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(ret, [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *com = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    if (([@"Sequence" isEqual:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(com)) getName]] && [com getArgumentNumber] > 1) || [@"KeepIf" isEqual:[com getName]] || [@"CountIf" isEqual:[com getName]]) {
      [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([com getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    }
    else if ([@"Zip" isEqual:[com getName]]) {
      for (jint i = 1; i < [com getArgumentNumber]; i += 2) {
        [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([com getArgumentWithInt:i])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
    else if ([@"TriangleCurve" isEqual:[com getName]]) {
      [((JavaUtilTreeSet *) nil_chk(localTree_)) addWithId:@"A"];
      [localTree_ addWithId:@"B"];
      [localTree_ addWithId:@"C"];
    }
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(tree_);
  RELEASE_(localTree_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getResult", NULL, "Ljava.util.TreeSet;", 0x1, NULL, NULL },
    { "init", "CollectUndefinedVariables", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tree_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
    { "localTree_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Ljava/lang/String;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables = { 2, "CollectUndefinedVariables", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables;
}

@end

void GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *self) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_setAndConsume_tree_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_setAndConsume_localTree_(self, new_JavaUtilTreeSet_init());
}

GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *new_GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init() {
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables *self = [GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables alloc];
  GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CollectUndefinedVariables)

@implementation GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables

- (JavaUtilArrayList *)getResult {
  return al_;
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(self);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) {
    [((JavaUtilArrayList *) nil_chk(al_)) addWithId:(GeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionVariable class])];
  }
  return ev;
}

- (void)dealloc {
  RELEASE_(al_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getResult", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "init", "CollectFunctionVariables", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "al_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/FunctionVariable;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables = { 2, "CollectFunctionVariables", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables;
}

@end

void GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *self) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_setAndConsume_al_(self, new_JavaUtilArrayList_init());
}

GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *new_GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init() {
  GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables *self = [GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables alloc];
  GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CollectFunctionVariables)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) return ev;
  GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
  if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_ARBCONST()) {
    return [((GeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextConstWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [GeogebraCommonKernelArithmeticMyDouble class])];
  }
  if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_ARBINT()) {
    return [((GeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextIntWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [GeogebraCommonKernelArithmeticMyDouble class])];
  }
  if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_ARBCOMPLEX()) {
    return [((GeogebraCommonKernelArithmeticMyArbitraryConstant *) nil_chk(arbconst_)) nextComplexWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *) check_class_cast([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap], [GeogebraCommonKernelArithmeticMyDouble class])];
  }
  return en;
}

+ (GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *)getReplacerWithGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  return GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithGeogebraCommonKernelArithmeticMyArbitraryConstant_(arbconst);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithGeogebraCommonKernelArithmeticMyArbitraryConstant:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$ArbconstReplacer;", &GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer = { 2, "ArbconstReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithGeogebraCommonKernelArithmeticMyArbitraryConstant_(GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst) {
  GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_set_arbconst_(nil_chk(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_), arbconst);
  return GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *new_GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer *self = [GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) return ev;
  [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])) replacePowersRootsWithBoolean:toRoot_ withInt:GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_];
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *)getReplacerWithBoolean:(jboolean)toRoot {
  return GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_getReplacerWithBoolean_(toRoot);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getReplacerWithBoolean:", "getReplacer", "Lgeogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "toRoot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "MAX_ROOT_", NULL, 0xa, "I", &GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_MAX_ROOT_, NULL,  },
    { "replacer_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$PowerRootReplacer;", &GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer = { 2, "PowerRootReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_getReplacerWithBoolean_(jboolean toRoot) {
  GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_initialize();
  ((GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *) nil_chk(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_))->toRoot_ = toRoot;
  return GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_replacer_;
}

void GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *new_GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer *self = [GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_DiffReplacer)

GeogebraCommonKernelArithmeticTraversing_DiffReplacer *GeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_;

@implementation GeogebraCommonKernelArithmeticTraversing_DiffReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    return ev;
  }
  GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
  if ([en getOperation] != GeogebraCommonPluginOperationEnum_get_DIFF()) {
    return ev;
  }
  GeogebraCommonKernelKernel *kernel = [en getKernel];
  id<GeogebraCommonKernelArithmeticExpressionValue> expr = [en getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> var = [en getRight];
  id<GeogebraCommonKernelArithmeticExpressionValue> deg;
  if ([expr isKindOfClass:[GeogebraCommonKernelArithmeticMyNumberPair class]]) {
    var = ((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(expr, [GeogebraCommonKernelArithmeticMyNumberPair class]))))->y_;
    expr = ((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(expr, [GeogebraCommonKernelArithmeticMyNumberPair class]))))->x_;
    deg = [en getRight];
  }
  else {
    deg = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 1) autorelease];
  }
  NSString *expStr = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(expr)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  jint nameEnd = [((NSString *) nil_chk(expStr)) indexOf:'('];
  if ([expStr indexOf:'['] > 0) {
    nameEnd = nameEnd > 0 ? JavaLangMath_minWithInt_withInt_(nameEnd, [expStr indexOf:'[']) : [expStr indexOf:'['];
  }
  NSString *funLabel = nameEnd > 0 ? [expStr substring:0 endIndex:nameEnd] : expStr;
  id<GeogebraCommonKernelArithmeticExpressionValue> diffArg = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
  id<GeogebraCommonKernelArithmeticExpressionValue> mult = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 1) autorelease];
  if ([[expr unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    diffArg = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(((GeogebraCommonKernelArithmeticCommand *) check_class_cast([expr unwrap], [GeogebraCommonKernelArithmeticCommand class])))) getArgumentWithInt:0];
    if ([[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(diffArg)) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]] && [((NSString *) nil_chk([diffArg toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(var)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    }
    else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(deg)) evaluateDouble], 1)) {
      id<GeogebraCommonKernelCASGenericInterface> cas = [((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS])) getCurrentCAS];
      GeogebraCommonKernelArithmeticCommand *derivCommand = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(kernel, @"Derivative", NO) autorelease];
      [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[diffArg wrap]];
      [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(var)) wrap]];
      [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[deg wrap]];
      mult = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk(cas)) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:derivCommand withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel];
    }
    else {
      GeogebraCommonMainApp_printStacktraceWithId_(GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_(diffArg));
      GeogebraCommonMainApp_printStacktraceWithId_(GeogebraCommonKernelArithmeticValidExpression_debugStringWithGeogebraCommonKernelArithmeticExpressionValue_(var));
      mult = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, JavaLangDouble_NaN) autorelease];
    }
  }
  GeogebraCommonKernelArithmeticExpressionNode *derivative = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel, funLabel) autorelease], GeogebraCommonPluginOperationEnum_get_DERIVATIVE(), deg) autorelease];
  return [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, derivative, GeogebraCommonPluginOperationEnum_get_FUNCTION(), diffArg) autorelease]) multiplyRWithGeogebraCommonKernelArithmeticExpressionValue:mult];
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_DiffReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_, nil, new_GeogebraCommonKernelArithmeticTraversing_DiffReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_DiffReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE_", NULL, 0x19, "Lgeogebra.common.kernel.arithmetic.Traversing$DiffReplacer;", &GeogebraCommonKernelArithmeticTraversing_DiffReplacer_INSTANCE_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_DiffReplacer = { 2, "DiffReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_DiffReplacer;
}

@end

void GeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(GeogebraCommonKernelArithmeticTraversing_DiffReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_DiffReplacer *new_GeogebraCommonKernelArithmeticTraversing_DiffReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_DiffReplacer *self = [GeogebraCommonKernelArithmeticTraversing_DiffReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_DiffReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_DiffReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_PrefixRemover)

@implementation GeogebraCommonKernelArithmeticTraversing_PrefixRemover

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
    return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_([((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticVariable class])))) getKernel], [((NSString *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) replace:GeogebraCommonKernelKernel_get_TMP_VARIABLE_PREFIX_() withSequence:@""]) autorelease];
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_PrefixRemover *)getCollector {
  return GeogebraCommonKernelArithmeticTraversing_PrefixRemover_getCollector();
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_PrefixRemover class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_PrefixRemover_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_PrefixRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollector", NULL, "Lgeogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$PrefixRemover;", &GeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_PrefixRemover = { 2, "PrefixRemover", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_PrefixRemover;
}

@end

GeogebraCommonKernelArithmeticTraversing_PrefixRemover *GeogebraCommonKernelArithmeticTraversing_PrefixRemover_getCollector() {
  GeogebraCommonKernelArithmeticTraversing_PrefixRemover_initialize();
  return GeogebraCommonKernelArithmeticTraversing_PrefixRemover_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(GeogebraCommonKernelArithmeticTraversing_PrefixRemover *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_PrefixRemover *new_GeogebraCommonKernelArithmeticTraversing_PrefixRemover_init() {
  GeogebraCommonKernelArithmeticTraversing_PrefixRemover *self = [GeogebraCommonKernelArithmeticTraversing_PrefixRemover alloc];
  GeogebraCommonKernelArithmeticTraversing_PrefixRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_PrefixRemover)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_CommandCollector)

@implementation GeogebraCommonKernelArithmeticTraversing_CommandCollector

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) [((id<JavaUtilSet>) nil_chk(commands_)) addWithId:(GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class])];
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_CommandCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return GeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CommandCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_CommandCollector class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_CommandCollector_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_CommandCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lgeogebra/common/kernel/arithmetic/Command;>;",  },
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$CommandCollector;", &GeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CommandCollector = { 2, "CommandCollector", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CommandCollector;
}

@end

GeogebraCommonKernelArithmeticTraversing_CommandCollector *GeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  GeogebraCommonKernelArithmeticTraversing_CommandCollector_initialize();
  GeogebraCommonKernelArithmeticTraversing_CommandCollector_set_commands_(nil_chk(GeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_), commands);
  return GeogebraCommonKernelArithmeticTraversing_CommandCollector_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_CommandCollector_init(GeogebraCommonKernelArithmeticTraversing_CommandCollector *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_CommandCollector *new_GeogebraCommonKernelArithmeticTraversing_CommandCollector_init() {
  GeogebraCommonKernelArithmeticTraversing_CommandCollector *self = [GeogebraCommonKernelArithmeticTraversing_CommandCollector alloc];
  GeogebraCommonKernelArithmeticTraversing_CommandCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CommandCollector)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_FVarCollector)

@implementation GeogebraCommonKernelArithmeticTraversing_FVarCollector

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) [((id<JavaUtilSet>) nil_chk(commands_)) addWithId:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((GeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString]];
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_FVarCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return GeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_FVarCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_FVarCollector class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_FVarCollector_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_FVarCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lgeogebra.common.kernel.arithmetic.Traversing$FVarCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$FVarCollector;", &GeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_FVarCollector = { 2, "FVarCollector", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_FVarCollector;
}

@end

GeogebraCommonKernelArithmeticTraversing_FVarCollector *GeogebraCommonKernelArithmeticTraversing_FVarCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  GeogebraCommonKernelArithmeticTraversing_FVarCollector_initialize();
  GeogebraCommonKernelArithmeticTraversing_FVarCollector_set_commands_(nil_chk(GeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_), commands);
  return GeogebraCommonKernelArithmeticTraversing_FVarCollector_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_FVarCollector_init(GeogebraCommonKernelArithmeticTraversing_FVarCollector *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_FVarCollector *new_GeogebraCommonKernelArithmeticTraversing_FVarCollector_init() {
  GeogebraCommonKernelArithmeticTraversing_FVarCollector *self = [GeogebraCommonKernelArithmeticTraversing_FVarCollector alloc];
  GeogebraCommonKernelArithmeticTraversing_FVarCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_FVarCollector)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)

@implementation GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getRight] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]]) {
      GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithGeogebraCommonKernelGeosGeoDummyVariable_(self, ((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [GeogebraCommonKernelGeosGeoDummyVariable class])));
    }
    if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_DERIVATIVE()) return en;
    if ([[en getLeft] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]]) {
      GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithGeogebraCommonKernelGeosGeoDummyVariable_(self, ((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [GeogebraCommonKernelGeosGeoDummyVariable class])));
    }
  }
  return ev;
}

- (void)addWithGeogebraCommonKernelGeosGeoDummyVariable:(GeogebraCommonKernelGeosGeoDummyVariable *)dummy {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithGeogebraCommonKernelGeosGeoDummyVariable_(self, dummy);
}

+ (GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoDummyVariable:", "add", "V", 0x2, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionCollector;", &GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector = { 2, "NonFunctionCollector", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector;
}

@end

void GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_addWithGeogebraCommonKernelGeosGeoDummyVariable_(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self, GeogebraCommonKernelGeosGeoDummyVariable *dummy) {
  NSString *str = [((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(dummy)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([dummy getKernel])) getApplication])) getParserFunctions])) isReservedWithNSString:str]) return;
  [((id<JavaUtilSet>) nil_chk(self->commands_)) addWithId:str];
}

GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_initialize();
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_set_commands_(nil_chk(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_), commands);
  return GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *new_GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init() {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *self = [GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector alloc];
  GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)

@implementation GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getRight] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] || [[en getRight] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) {
      GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithGeogebraCommonKernelArithmeticExpressionValue_(self, [en getRight]);
    }
    if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_DERIVATIVE()) return en;
    if ([[en getLeft] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] || [[en getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) {
      GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithGeogebraCommonKernelArithmeticExpressionValue_(self, [en getLeft]);
    }
  }
  return ev;
}

- (void)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)dummy {
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithGeogebraCommonKernelArithmeticExpressionValue_(self, dummy);
}

+ (GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticExpressionValue:", "add", "V", 0x2, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lgeogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$DummyVariableCollector;", &GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector = { 2, "DummyVariableCollector", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 4, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector;
}

@end

void GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_addWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self, id<GeogebraCommonKernelArithmeticExpressionValue> dummy) {
  NSString *str = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(dummy)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  [((id<JavaUtilSet>) nil_chk(self->commands_)) addWithId:str];
}

GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_initialize();
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_set_commands_(nil_chk(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_), commands);
  return GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *new_GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init() {
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector *self = [GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector alloc];
  GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_DummyVariableCollector)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)

@implementation GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *c = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    if ([((id<JavaUtilSet>) nil_chk(commands_)) containsWithId:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName]] && [c getArgumentNumber] == 1) return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelGeosGeoDummyVariable *) [new_GeogebraCommonKernelGeosGeoDummyVariable_initWithGeogebraCommonKernelConstruction_withNSString_([((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) getConstruction], [c getName]) autorelease]) wrap])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:0]];
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *)getCollectorWithJavaUtilSet:(id<JavaUtilSet>)commands {
  return GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(commands);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(commands_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollectorWithJavaUtilSet:", "getCollector", "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "commands_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$NonFunctionReplacer;", &GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer = { 2, "NonFunctionReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer;
}

@end

GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(id<JavaUtilSet> commands) {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_initialize();
  GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_set_commands_(nil_chk(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_), commands);
  return GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *new_GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *self = [GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_FunctionExpander)

@implementation GeogebraCommonKernelArithmeticTraversing_FunctionExpander

- (id<GeogebraCommonKernelArithmeticExpressionValue>)expandWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

+ (jboolean)containsWithGeogebraCommonKernelGeosGeoDummyVariable:(GeogebraCommonKernelGeosGeoDummyVariable *)gdv {
  return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_(gdv);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR() || [en getOperation] == GeogebraCommonPluginOperationEnum_get_VEC_FUNCTION()) {
      id<GeogebraCommonKernelArithmeticExpressionValue> geo = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap];
      id<GeogebraCommonKernelArithmeticExpressionValue> deriv = nil;
      if ([geo isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] == GeogebraCommonPluginOperationEnum_get_DERIVATIVE()) {
        deriv = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        geo = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(geo, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft])) unwrap];
      }
      if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]]) {
        geo = [((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
      }
      GeogebraCommonKernelArithmeticExpressionNode *en2 = nil;
      IOSObjectArray *fv = nil;
      if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]]) {
        id<GeogebraCommonKernelArithmeticExpressionValue> en2x = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunX])) getFunctionExpression])) getCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self];
        id<GeogebraCommonKernelArithmeticExpressionValue> en2y = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunY])) getFunctionExpression])) getCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self];
        en2 = [((GeogebraCommonKernelArithmeticMyVecNode *) [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getKernel], en2x, en2y) autorelease]) wrap];
        fv = [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(((GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCurveCartesian class])))) getFunctionVariables];
      }
      if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:geo]) {
        en2 = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionExpression])) getCopyWithGeogebraCommonKernelKernel:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self], [GeogebraCommonKernelArithmeticExpressionNode class]);
        fv = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction])) getFunctionVariables];
      }
      if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
        GeogebraCommonKernelArithmeticValidExpression *ve = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression];
        if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getInputVE])) isKeepInputUsed]) {
          ve = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) wrap];
        }
        en2 = [[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]] ? [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([ve unwrap], [GeogebraCommonKernelArithmeticFunctionNVar class])))) getExpression] : [ve wrap];
        en2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en2 traverseWithGeogebraCommonKernelArithmeticTraversing:self])) wrap];
        en2 = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en2)) getCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getKernel]];
        fv = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getFunctionVariables];
      }
      if (deriv != nil) {
        id<GeogebraCommonKernelCASGenericInterface> cas = [((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([en getKernel])) getGeoGebraCAS])) getCurrentCAS];
        GeogebraCommonKernelArithmeticCommand *derivCommand = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_([en getKernel], @"Derivative", NO) autorelease];
        [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en2];
        [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fv), 0))) wrap]];
        [derivCommand addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[deriv wrap]];
        en2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelCASGenericInterface>) nil_chk(cas)) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:derivCommand withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:[en getKernel]])) wrap];
      }
      if (fv != nil) {
        id<GeogebraCommonKernelArithmeticExpressionValue> argument = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) wrap])) getCopyWithGeogebraCommonKernelKernel:[en getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self])) unwrap];
        id<GeogebraCommonKernelArithmeticExpressionValue> ithArg = argument;
        GeogebraCommonKernelArithmeticTraversing_VariableReplacer *vr = GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacer();
        for (jint i = 0; i < fv->size_; i++) {
          if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()) {
            ithArg = [((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(argument, [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i];
          }
          GeogebraCommonKernelArithmeticTraversing_VariableReplacer_addVarsWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(fv, i))) getSetVarString], ithArg);
        }
        en2 = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en2)) traverseWithGeogebraCommonKernelArithmeticTraversing:vr])) wrap];
        return en2;
      }
    }
    else if ([en getOperation] == GeogebraCommonPluginOperationEnum_get_DERIVATIVE()) {
    }
    else {
      GeogebraCommonKernelGeosGeoElement *geo = nil;
      if ([[en getLeft] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] && !GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [GeogebraCommonKernelGeosGeoDummyVariable class]))) {
        geo = [((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getLeft], [GeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
        if (geo != nil) {
          [en setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, geo)];
        }
      }
    }
    if ([en getRight] != nil) {
      GeogebraCommonKernelGeosGeoElement *geo = nil;
      if ([[en getRight] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] && !GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [GeogebraCommonKernelGeosGeoDummyVariable class]))) {
        geo = [((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([en getRight], [GeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
        if (geo != nil) {
          [en setRightWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, geo)];
        }
      }
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]] && !GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoDummyVariable class]))) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(((GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoDummyVariable class])))) getElementWithSameName];
    if (geo != nil) return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
    if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoCasCell class])))) getInputVE])) isKeepInputUsed]) {
      return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(self, (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoCasCell class]));
    }
    return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression])) wrap])) getCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoCasCell class])))) getKernel]];
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
    JreStrongAssign(&GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, nil, ((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(((GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionNVar class]))))->fVars_);
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)getCollector {
  return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector();
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_FunctionExpander class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_, nil, new_GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_FunctionExpander)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "expandWithGeogebraCommonKernelGeosGeoElement:", "expand", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "containsWithGeogebraCommonKernelGeosGeoDummyVariable:", "contains", "Z", 0xa, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCollector", NULL, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collector_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", &GeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_, NULL,  },
    { "variables_", NULL, 0xa, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", &GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_FunctionExpander = { 2, "FunctionExpander", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_FunctionExpander;
}

@end

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTraversing_FunctionExpander_expandWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelArithmeticTraversing_FunctionExpander *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:geo]) return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunctionExpression])) deepCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self];
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@C@", geo, ':', [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression]));
    return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class])))) getOutputValidExpression])) deepCopyWithGeogebraCommonKernelKernel:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getKernel]])) traverseWithGeogebraCommonKernelArithmeticTraversing:self];
  }
  return geo;
}

jboolean GeogebraCommonKernelArithmeticTraversing_FunctionExpander_containsWithGeogebraCommonKernelGeosGeoDummyVariable_(GeogebraCommonKernelGeosGeoDummyVariable *gdv) {
  GeogebraCommonKernelArithmeticTraversing_FunctionExpander_initialize();
  if (GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_ == nil) {
    return NO;
  }
  {
    IOSObjectArray *a__ = GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_;
    GeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelArithmeticFunctionVariable *funvar = *b__++;
      if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funvar)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:[((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        return YES;
      }
    }
  }
  return NO;
}

GeogebraCommonKernelArithmeticTraversing_FunctionExpander *GeogebraCommonKernelArithmeticTraversing_FunctionExpander_getCollector() {
  GeogebraCommonKernelArithmeticTraversing_FunctionExpander_initialize();
  JreStrongAssign(&GeogebraCommonKernelArithmeticTraversing_FunctionExpander_variables_, nil, nil);
  return GeogebraCommonKernelArithmeticTraversing_FunctionExpander_collector_;
}

void GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(GeogebraCommonKernelArithmeticTraversing_FunctionExpander *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_FunctionExpander *new_GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init() {
  GeogebraCommonKernelArithmeticTraversing_FunctionExpander *self = [GeogebraCommonKernelArithmeticTraversing_FunctionExpander alloc];
  GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_FunctionExpander)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_FunctionCreator)

@implementation GeogebraCommonKernelArithmeticTraversing_FunctionCreator

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
    GeogebraCommonKernelArithmeticEquation *eq = (GeogebraCommonKernelArithmeticEquation *) check_class_cast(ev, [GeogebraCommonKernelArithmeticEquation class]);
    if ([((GeogebraCommonKernelArithmeticEquation *) nil_chk(eq)) getLHS] != nil && [[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getLHS])) getLeft] isKindOfClass:[GeogebraCommonKernelGeosGeoDummyVariable class]]) {
      GeogebraCommonKernelGeosGeoDummyVariable *gdv = (GeogebraCommonKernelGeosGeoDummyVariable *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getLHS])) getLeft], [GeogebraCommonKernelGeosGeoDummyVariable class]);
      if ([((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoDummyVariable *) nil_chk(gdv)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) {
        return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([eq getRHS])) unwrap];
      }
    }
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_FunctionCreator *)getCreator {
  return GeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator();
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_FunctionCreator class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_, nil, new_GeogebraCommonKernelArithmeticTraversing_FunctionCreator_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_FunctionCreator)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getCreator", NULL, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "creator_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionCreator;", &GeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_FunctionCreator = { 2, "FunctionCreator", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_FunctionCreator;
}

@end

GeogebraCommonKernelArithmeticTraversing_FunctionCreator *GeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator() {
  GeogebraCommonKernelArithmeticTraversing_FunctionCreator_initialize();
  return GeogebraCommonKernelArithmeticTraversing_FunctionCreator_creator_;
}

void GeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(GeogebraCommonKernelArithmeticTraversing_FunctionCreator *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_FunctionCreator *new_GeogebraCommonKernelArithmeticTraversing_FunctionCreator_init() {
  GeogebraCommonKernelArithmeticTraversing_FunctionCreator *self = [GeogebraCommonKernelArithmeticTraversing_FunctionCreator alloc];
  GeogebraCommonKernelArithmeticTraversing_FunctionCreator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_FunctionCreator)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_CommandRemover)

@implementation GeogebraCommonKernelArithmeticTraversing_CommandRemover

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *ec = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(GeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_))->size_; i++) {
      if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(ec)) getName])) isEqual:IOSObjectArray_Get(GeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, i)]) {
        return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([ec getArgumentWithInt:0])) unwrap];
      }
    }
  }
  return ev;
}

+ (GeogebraCommonKernelArithmeticTraversing_CommandRemover *)getRemoverWithNSStringArray:(IOSObjectArray *)commands1 {
  return GeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_(commands1);
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CommandRemover_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_CommandRemover class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_, nil, new_GeogebraCommonKernelArithmeticTraversing_CommandRemover_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_CommandRemover)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "getRemoverWithNSStringArray:", "getRemover", "Lgeogebra.common.kernel.arithmetic.Traversing$CommandRemover;", 0x89, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "remover_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$CommandRemover;", &GeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_, NULL,  },
    { "commands_", NULL, 0xa, "[Ljava.lang.String;", &GeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CommandRemover = { 2, "CommandRemover", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CommandRemover;
}

@end

GeogebraCommonKernelArithmeticTraversing_CommandRemover *GeogebraCommonKernelArithmeticTraversing_CommandRemover_getRemoverWithNSStringArray_(IOSObjectArray *commands1) {
  GeogebraCommonKernelArithmeticTraversing_CommandRemover_initialize();
  JreStrongAssign(&GeogebraCommonKernelArithmeticTraversing_CommandRemover_commands_, nil, commands1);
  return GeogebraCommonKernelArithmeticTraversing_CommandRemover_remover_;
}

void GeogebraCommonKernelArithmeticTraversing_CommandRemover_init(GeogebraCommonKernelArithmeticTraversing_CommandRemover *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_CommandRemover *new_GeogebraCommonKernelArithmeticTraversing_CommandRemover_init() {
  GeogebraCommonKernelArithmeticTraversing_CommandRemover *self = [GeogebraCommonKernelArithmeticTraversing_CommandRemover alloc];
  GeogebraCommonKernelArithmeticTraversing_CommandRemover_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CommandRemover)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)

GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_;

@implementation GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer

- (id<GeogebraCommonKernelArithmeticExpressionValue>)processWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
    GeogebraCommonKernelArithmeticCommand *ec = (GeogebraCommonKernelArithmeticCommand *) check_class_cast(ev, [GeogebraCommonKernelArithmeticCommand class]);
    if ([@"x" isEqual:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(ec)) getName]]) {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    }
    else if ([@"y" isEqual:[ec getName]]) {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    }
    else if ([@"z" isEqual:[ec getName]]) {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_([ec getKernel], [ec getArgumentWithInt:0], GeogebraCommonPluginOperationEnum_get_ZCOORD(), nil) autorelease];
    }
  }
  return ev;
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_, nil, new_GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init());
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "processWithGeogebraCommonKernelArithmeticExpressionValue:", "process", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "replacer_", NULL, 0x9, "Lgeogebra.common.kernel.arithmetic.Traversing$CASCommandReplacer;", &GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_replacer_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer = { 2, "CASCommandReplacer", "geogebra.common.kernel.arithmetic", "Traversing", 0x9, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer;
}

@end

void GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *new_GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init() {
  GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer *self = [GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer alloc];
  GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTraversing_CASCommandReplacer)
