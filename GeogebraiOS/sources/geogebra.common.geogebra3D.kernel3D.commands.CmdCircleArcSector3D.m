//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdCircleArcSector3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCircleArcSector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CommandProcessor3D.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdCircleArcSector.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)circleArcSectorWithNSString:(NSString *)label
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)startPoint
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)endPoint {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_getCurrentViewOrientationWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_(kernelA_, app_);
  if (orientation != nil) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) CircleArcSector3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint withGeogebraCommonKernelKernelNDGeoDirectionND:orientation withInt:type_], [GeogebraCommonKernelGeosGeoElement class]);
  }
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(center)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(endPoint)) isGeoElement3D]) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) CircleArcSector3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint withInt:type_], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super circleArcSectorWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelKernelNDGeoPointND:startPoint withGeogebraCommonKernelKernelNDGeoPointND:endPoint];
}

- (IOSObjectArray *)process4WithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                     withBooleanArray:(IOSBooleanArray *)ok {
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 3) = ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) CircleArcSector3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND)) withInt:type_], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withInt:", "CmdCircleArcSector3D", NULL, 0x1, NULL, NULL },
    { "circleArcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circleArcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "process4WithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process4", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D = { 2, "CmdCircleArcSector3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D *self, GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCmdCircleArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D)
