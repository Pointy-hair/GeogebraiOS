//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSelectObjects.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/scripting/CmdSelectObjects.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/SelectionManager.h"

@implementation GeogebraCommonKernelScriptingCmdSelectObjects

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSelectObjects_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) clearSelectedGeosWithBoolean:NO];
  if (n > 0) {
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    for (jint i = 0; i < n; i++) {
      if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), i))) isGeoElement])) {
        GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg_, i);
        [((GeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:NO withBoolean:NO];
      }
    }
    [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) notifyRepaint];
  }
  else {
    [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) notifyRepaint];
    [app_ updateSelectionWithBoolean:NO];
  }
  return;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSelectObjects", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSelectObjects = { 2, "CmdSelectObjects", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSelectObjects;
}

@end

void GeogebraCommonKernelScriptingCmdSelectObjects_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSelectObjects *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSelectObjects *new_GeogebraCommonKernelScriptingCmdSelectObjects_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSelectObjects *self = [GeogebraCommonKernelScriptingCmdSelectObjects alloc];
  GeogebraCommonKernelScriptingCmdSelectObjects_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSelectObjects)
