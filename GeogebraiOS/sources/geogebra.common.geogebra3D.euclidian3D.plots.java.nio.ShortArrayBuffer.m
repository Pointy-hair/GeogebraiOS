//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ShortArrayBuffer.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/Buffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/BufferUnderflowException.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ByteOrder.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ShortArrayBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/plots/java/nio/ShortBuffer.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/System.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer

- (instancetype)initWithShortArray:(IOSShortArray *)array {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithShortArray_(self, array);
  return self;
}

- (instancetype)initWithInt:(jint)capacity {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_(self, capacity);
  return self;
}

- (instancetype)initWithInt:(jint)capacity
             withShortArray:(IOSShortArray *)backingArray
                    withInt:(jint)offset {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_withShortArray_withInt_(self, capacity, backingArray, offset);
  return self;
}

- (jshort)get {
  if (position__ == limit__) {
    @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init() autorelease];
  }
  return IOSShortArray_Get(nil_chk(backingArray_), offset_ + position__++);
}

- (jshort)getWithInt:(jint)index {
  if (index < 0 || index >= limit__) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  return IOSShortArray_Get(nil_chk(backingArray_), offset_ + index);
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortBuffer *)getWithShortArray:(IOSShortArray *)dest
                                                                          withInt:(jint)off
                                                                          withInt:(jint)len {
  jint length = ((IOSShortArray *) nil_chk(dest))->size_;
  if (off < 0 || len < 0 || (jlong) off + (jlong) len > length) {
    @throw [new_JavaLangIndexOutOfBoundsException_init() autorelease];
  }
  if (len > [self remaining]) {
    @throw [new_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioBufferUnderflowException_init() autorelease];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(backingArray_, offset_ + position__, dest, off, len);
  position__ += len;
  return self;
}

- (jboolean)isDirect {
  return NO;
}

- (GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder *)order {
  return GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioByteOrder_nativeOrder();
}

- (void)dealloc {
  RELEASE_(backingArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithShortArray:", "ShortArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:", "ShortArrayBuffer", NULL, 0x0, NULL, NULL },
    { "initWithInt:withShortArray:withInt:", "ShortArrayBuffer", NULL, 0x0, NULL, NULL },
    { "get", NULL, "S", 0x11, NULL, NULL },
    { "getWithInt:", "get", "S", 0x11, NULL, NULL },
    { "getWithShortArray:withInt:withInt:", "get", "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.ShortBuffer;", 0x11, NULL, NULL },
    { "isDirect", NULL, "Z", 0x11, NULL, NULL },
    { "order", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.plots.java.nio.ByteOrder;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "backingArray_", NULL, 0x14, "[S", NULL, NULL,  },
    { "offset_", NULL, 0x14, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer = { 2, "ShortArrayBuffer", "geogebra.common.geogebra3D.euclidian3D.plots.java.nio", NULL, 0x400, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithShortArray_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer *self, IOSShortArray *array) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_withShortArray_withInt_(self, ((IOSShortArray *) nil_chk(array))->size_, array, 0);
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer *self, jint capacity) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_withShortArray_withInt_(self, capacity, [IOSShortArray arrayWithLength:capacity], 0);
}

void GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_initWithInt_withShortArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer *self, jint capacity, IOSShortArray *backingArray, jint offset) {
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortBuffer_initWithInt_(self, capacity);
  GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer_set_backingArray_(self, backingArray);
  self->offset_ = offset;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DPlotsJavaNioShortArrayBuffer)
