//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoImplicitDerivative.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/cas/AlgoImplicitDerivative.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoImplicitDerivative () {
 @public
  GeogebraCommonKernelGeosGeoFunctionNVar *result_;
  id<GeogebraCommonKernelArithmeticFunctionalNVar> functional_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoImplicitDerivative, result_, GeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoImplicitDerivative, functional_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoImplicitDerivative, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

@implementation GeogebraCommonKernelCasAlgoImplicitDerivative

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)functional {
  GeogebraCommonKernelCasAlgoImplicitDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, label, functional);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  if ([functional_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(functional_, [GeogebraCommonKernelGeosGeoFunctionNVar class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  if ([functional_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(functional_, [GeogebraCommonKernelGeosGeoFunction class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_prefixedDefault_();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  [sb appendWithNSString:@"ImplicitDerivative("];
  [sb appendWithNSString:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(functional_)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  [sb appendWithNSString:@")"];
  @try {
    NSString *functionOut = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:[sb description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst_];
    if (functionOut == nil || ((jint) [functionOut length]) == 0) {
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(result_)) setUndefined];
    }
    else {
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(result_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) evaluateToFunctionNVarWithNSString:functionOut withBoolean:YES]];
    }
  }
  @catch (JavaLangThrowable *e) {
    [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(result_)) setUndefined];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ImplicitDerivative();
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)getResult {
  return result_;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(functional_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionalNVar:", "AlgoImplicitDerivative", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "functional_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoImplicitDerivative = { 2, "AlgoImplicitDerivative", "geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoImplicitDerivative;
}

@end

void GeogebraCommonKernelCasAlgoImplicitDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelCasAlgoImplicitDerivative *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> functional) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoImplicitDerivative_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  GeogebraCommonKernelCasAlgoImplicitDerivative_set_functional_(self, functional);
  GeogebraCommonKernelCasAlgoImplicitDerivative_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoImplicitDerivative *new_GeogebraCommonKernelCasAlgoImplicitDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> functional) {
  GeogebraCommonKernelCasAlgoImplicitDerivative *self = [GeogebraCommonKernelCasAlgoImplicitDerivative alloc];
  GeogebraCommonKernelCasAlgoImplicitDerivative_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, cons, label, functional);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoImplicitDerivative)
