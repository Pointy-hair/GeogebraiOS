//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/io/MyXMLio.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/io/MyXMLio.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

NSString *GeogebraCommonIoMyXMLio_XML_FILE_ = @"geogebra.xml";
NSString *GeogebraCommonIoMyXMLio_XML_FILE_MACRO_ = @"geogebra_macro.xml";
NSString *GeogebraCommonIoMyXMLio_JAVASCRIPT_FILE_ = @"geogebra_javascript.js";
NSString *GeogebraCommonIoMyXMLio_XML_FILE_THUMBNAIL_ = @"geogebra_thumbnail.png";

@implementation GeogebraCommonIoMyXMLio

+ (JavaLangStringBuilder *)getUndoXMLWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                              withBoolean:(jboolean)getListenersToo {
  return GeogebraCommonIoMyXMLio_getUndoXMLWithGeogebraCommonKernelConstruction_withBoolean_(c, getListenersToo);
}

- (void)processXMLStringWithNSString:(NSString *)xml
                         withBoolean:(jboolean)clearConstruction
                         withBoolean:(jboolean)isGgtFile {
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) setFileLoadingWithBoolean:YES];
  [self processXMLStringWithNSString:xml withBoolean:clearConstruction withBoolean:isGgtFile withBoolean:YES];
  [cons_ setFileLoadingWithBoolean:NO];
}

- (void)processXMLStringWithNSString:(NSString *)xml
                         withBoolean:(jboolean)clearConstruction
                         withBoolean:(jboolean)isGgtFile
                         withBoolean:(jboolean)settingsBatch {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (void)addGeoGebraHeaderWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                       withBoolean:(jboolean)isMacro
                                      withNSString:(NSString *)uniqueId {
  GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb, isMacro, uniqueId);
}

+ (void)addXMLHeaderWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb);
}

- (NSString *)getFullXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb);
  GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb, NO, [((GeogebraCommonMainApp *) nil_chk(app_)) getUniqueId]);
  [sb appendWithNSString:[app_ getCompleteUserInterfaceXMLWithBoolean:NO]];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionXMLWithJavaLangStringBuilder:sb withBoolean:NO];
  [sb appendWithNSString:@"</geogebra>"];
  return [sb description];
}

- (NSString *)getFullMacroXMLWithJavaUtilArrayList:(JavaUtilArrayList *)macros {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb);
  GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb, YES, nil);
  [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroXMLWithJavaUtilArrayList:macros]];
  [sb appendWithNSString:@"</geogebra>"];
  return [sb description];
}

- (NSString *)getPreferencesXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb);
  GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb, NO, nil);
  [sb appendWithNSString:[((GeogebraCommonMainApp *) nil_chk(app_)) getCompleteUserInterfaceXMLWithBoolean:YES]];
  [sb appendWithNSString:@"</geogebra>"];
  return [sb description];
}

- (NSString *)getConstructionRegressionOut {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getConstructionRegressionOutWithJavaLangStringBuilder:sb];
  return [sb description];
}

- (instancetype)init {
  GeogebraCommonIoMyXMLio_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(cons_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getUndoXMLWithGeogebraCommonKernelConstruction:withBoolean:", "getUndoXML", "Ljava.lang.StringBuilder;", 0x39, NULL, NULL },
    { "processXMLStringWithNSString:withBoolean:withBoolean:", "processXMLString", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "processXMLStringWithNSString:withBoolean:withBoolean:withBoolean:", "processXMLString", "V", 0x401, "Ljava.lang.Exception;", NULL },
    { "addGeoGebraHeaderWithJavaLangStringBuilder:withBoolean:withNSString:", "addGeoGebraHeader", "V", 0x1c, NULL, NULL },
    { "addXMLHeaderWithJavaLangStringBuilder:", "addXMLHeader", "V", 0x1c, NULL, NULL },
    { "getFullXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFullMacroXMLWithJavaUtilArrayList:", "getFullMacroXML", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPreferencesXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getConstructionRegressionOut", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "XML_FILE_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonIoMyXMLio_XML_FILE_, NULL,  },
    { "XML_FILE_MACRO_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonIoMyXMLio_XML_FILE_MACRO_, NULL,  },
    { "JAVASCRIPT_FILE_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonIoMyXMLio_JAVASCRIPT_FILE_, NULL,  },
    { "XML_FILE_THUMBNAIL_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonIoMyXMLio_XML_FILE_THUMBNAIL_, NULL,  },
    { "THUMBNAIL_PIXELS_X_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_X },
    { "THUMBNAIL_PIXELS_Y_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonIoMyXMLio_THUMBNAIL_PIXELS_Y },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonIoMyXMLio = { 2, "MyXMLio", "geogebra.common.io", NULL, 0x401, 10, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonIoMyXMLio;
}

@end

JavaLangStringBuilder *GeogebraCommonIoMyXMLio_getUndoXMLWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *c, jboolean getListenersToo) {
  GeogebraCommonIoMyXMLio_initialize();
  @synchronized(GeogebraCommonIoMyXMLio_class_()) {
    GeogebraCommonKernelKernel *constructionKernel = [((GeogebraCommonKernelConstruction *) nil_chk(c)) getKernel];
    jboolean kernelIsGettingUndo = [((GeogebraCommonKernelKernel *) nil_chk(constructionKernel)) isGettingUndo];
    [constructionKernel setIsGettingUndoWithBoolean:YES];
    GeogebraCommonMainApp *consApp = [c getApplication];
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(sb);
    GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(sb, NO, [((GeogebraCommonMainApp *) nil_chk(consApp)) getUniqueId]);
    [((GeogebraCommonMainAppCompanion *) nil_chk([consApp getCompanion])) getEuclidianViewXMLWithJavaLangStringBuilder:sb withBoolean:NO];
    [((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) getKernelXMLWithJavaLangStringBuilder:sb withBoolean:NO];
    [c getConstructionXMLWithJavaLangStringBuilder:sb withBoolean:getListenersToo];
    if ([consApp isUsingFullGui] && [consApp getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([consApp getGuiManager])) hasProbabilityCalculator]) {
      [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([consApp getGuiManager])) getProbabilityCalculatorXMLWithJavaLangStringBuilder:sb];
    }
    [sb appendWithNSString:@"</geogebra>"];
    [constructionKernel setIsGettingUndoWithBoolean:kernelIsGettingUndo];
    return sb;
  }
}

void GeogebraCommonIoMyXMLio_addGeoGebraHeaderWithJavaLangStringBuilder_withBoolean_withNSString_(JavaLangStringBuilder *sb, jboolean isMacro, NSString *uniqueId) {
  GeogebraCommonIoMyXMLio_initialize();
  NSString *format = GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<geogebra format=\""];
  [sb appendWithNSString:format];
  [sb appendWithNSString:@"\" "];
  [sb appendWithNSString:@"version=\""];
  [sb appendWithNSString:GeogebraCommonGeoGebraConstants_get_VERSION_STRING_()];
  [sb appendWithNSString:@"\" "];
  if (uniqueId != nil) {
    [sb appendWithNSString:@"id=\""];
    [sb appendWithNSString:uniqueId];
    [sb appendWithNSString:@"\" "];
  }
  [sb appendWithNSString:@" xsi:noNamespaceSchemaLocation=\"http://www.geogebra.org/"];
  if (isMacro) [sb appendWithNSString:GeogebraCommonGeoGebraConstants_get_GGT_XSD_FILENAME_()];
  else [sb appendWithNSString:GeogebraCommonGeoGebraConstants_get_GGB_XSD_FILENAME_()];
  [sb appendWithNSString:@"\" xmlns=\"\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" >\n"];
}

void GeogebraCommonIoMyXMLio_addXMLHeaderWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  GeogebraCommonIoMyXMLio_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
}

void GeogebraCommonIoMyXMLio_init(GeogebraCommonIoMyXMLio *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoMyXMLio)
