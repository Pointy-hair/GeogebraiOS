//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoFractionText.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/DrawEquation.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFractionText.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAlgosAlgoFractionText () {
 @public
  id<GeogebraCommonKernelGeosGeoNumberValue> num_;
  GeogebraCommonKernelGeosGeoText *text_;
  IOSDoubleArray *frac_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFractionText, num_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFractionText, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFractionText, frac_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFractionText, sb_, JavaLangStringBuilder *)

@implementation GeogebraCommonKernelAlgosAlgoFractionText

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num {
  GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, num);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num {
  GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, num);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FractionText();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(num_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)compute {
  GeogebraCommonKernelStringTemplate *tpl = [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) getStringTemplate];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined]) {
    GeogebraCommonKernelAlgosAlgoFractionText_set_frac_(self, GeogebraCommonKernelAlgosAlgoFractionText_DecimalToFractionWithDouble_withDouble_([((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(num_)) getDouble], GeogebraCommonKernelKernel_STANDARD_PRECISION));
    [((JavaLangStringBuilder *) nil_chk(sb_)) setLengthWithInt:0];
    GeogebraCommonKernelAlgosAlgoFractionText_appendFormulaWithJavaLangStringBuilder_withDoubleArray_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(sb_, frac_, tpl, kernel_);
    [text_ setTextStringWithNSString:[sb_ description]];
    [text_ setLaTeXWithBoolean:YES withBoolean:NO];
  }
  else {
    [text_ setTextStringWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
  }
}

+ (IOSDoubleArray *)DecimalToFractionWithDouble:(jdouble)decimal
                                     withDouble:(jdouble)AccuracyFactor {
  return GeogebraCommonKernelAlgosAlgoFractionText_DecimalToFractionWithDouble_withDouble_(decimal, AccuracyFactor);
}

- (jboolean)isLaTeXTextCommand {
  return YES;
}

+ (void)appendFormulaWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                               withDoubleArray:(IOSDoubleArray *)frac
        withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAlgosAlgoFractionText_appendFormulaWithJavaLangStringBuilder_withDoubleArray_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(sb, frac, tpl, kernel);
}

- (void)dealloc {
  RELEASE_(num_);
  RELEASE_(text_);
  RELEASE_(frac_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoFractionText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoFractionText", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "DecimalToFractionWithDouble:withDouble:", "DecimalToFraction", "[D", 0x9, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "appendFormulaWithJavaLangStringBuilder:withDoubleArray:withGeogebraCommonKernelStringTemplate:withGeogebraCommonKernelKernel:", "appendFormula", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "frac_", NULL, 0x2, "[D", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoFractionText = { 2, "AlgoFractionText", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoFractionText;
}

@end

void GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoFractionText *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, num);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoFractionText *new_GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoFractionText *self = [GeogebraCommonKernelAlgosAlgoFractionText alloc];
  GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, num);
  return self;
}

void GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoFractionText *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoFractionText_setAndConsume_frac_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0 } count:2]);
  GeogebraCommonKernelAlgosAlgoFractionText_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelAlgosAlgoFractionText_set_num_(self, num);
  GeogebraCommonKernelAlgosAlgoFractionText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self->text_ setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:[((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getPreferredFormulaRenderingType]];
  [self->text_ setLaTeXWithBoolean:YES withBoolean:NO];
  [self setInputOutput];
  [self compute];
}

GeogebraCommonKernelAlgosAlgoFractionText *new_GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoFractionText *self = [GeogebraCommonKernelAlgosAlgoFractionText alloc];
  GeogebraCommonKernelAlgosAlgoFractionText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, num);
  return self;
}

IOSDoubleArray *GeogebraCommonKernelAlgosAlgoFractionText_DecimalToFractionWithDouble_withDouble_(jdouble decimal, jdouble AccuracyFactor) {
  GeogebraCommonKernelAlgosAlgoFractionText_initialize();
  jdouble FractionNumerator, FractionDenominator;
  jdouble DecimalSign;
  jdouble Z;
  jdouble PreviousDenominator;
  jdouble ScratchValue;
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0 } count:2];
  if (JavaLangDouble_isNaNWithDouble_(decimal)) return ret;
  if (decimal == JavaLangDouble_POSITIVE_INFINITY) {
    *IOSDoubleArray_GetRef(ret, 0) = 1;
    *IOSDoubleArray_GetRef(ret, 1) = 0;
    return ret;
  }
  if (decimal == JavaLangDouble_NEGATIVE_INFINITY) {
    *IOSDoubleArray_GetRef(ret, 0) = -1;
    *IOSDoubleArray_GetRef(ret, 1) = 0;
    return ret;
  }
  if (decimal < 0.0) DecimalSign = -1.0;
  else DecimalSign = 1.0;
  decimal = JavaLangMath_absWithDouble_(decimal);
  if (JavaLangMath_absWithDouble_(decimal - JavaLangMath_floorWithDouble_(decimal)) < AccuracyFactor) {
    FractionNumerator = decimal * DecimalSign;
    FractionDenominator = 1.0;
    *IOSDoubleArray_GetRef(ret, 0) = FractionNumerator;
    *IOSDoubleArray_GetRef(ret, 1) = FractionDenominator;
    return ret;
  }
  if (decimal < 1.0E-19) {
    FractionNumerator = DecimalSign;
    FractionDenominator = 9999999999999999999.0;
    *IOSDoubleArray_GetRef(ret, 0) = FractionNumerator;
    *IOSDoubleArray_GetRef(ret, 1) = FractionDenominator;
    return ret;
  }
  if (decimal > 1.0E19) {
    FractionNumerator = 9999999999999999999.0 * DecimalSign;
    FractionDenominator = 1.0;
    *IOSDoubleArray_GetRef(ret, 0) = FractionNumerator;
    *IOSDoubleArray_GetRef(ret, 1) = FractionDenominator;
    return ret;
  }
  Z = decimal;
  PreviousDenominator = 0.0;
  FractionDenominator = 1.0;
  do {
    Z = 1.0 / (Z - JavaLangMath_floorWithDouble_(Z));
    ScratchValue = FractionDenominator;
    FractionDenominator = FractionDenominator * JavaLangMath_floorWithDouble_(Z) + PreviousDenominator;
    PreviousDenominator = ScratchValue;
    FractionNumerator = JavaLangMath_floorWithDouble_(decimal * FractionDenominator + 0.5);
  }
  while (JavaLangMath_absWithDouble_((decimal - (FractionNumerator / FractionDenominator))) > AccuracyFactor && Z != JavaLangMath_floorWithDouble_(Z));
  FractionNumerator = DecimalSign * FractionNumerator;
  *IOSDoubleArray_GetRef(ret, 0) = FractionNumerator;
  *IOSDoubleArray_GetRef(ret, 1) = FractionDenominator;
  return ret;
}

void GeogebraCommonKernelAlgosAlgoFractionText_appendFormulaWithJavaLangStringBuilder_withDoubleArray_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(JavaLangStringBuilder *sb, IOSDoubleArray *frac, GeogebraCommonKernelStringTemplate *tpl, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAlgosAlgoFractionText_initialize();
  if (IOSDoubleArray_Get(nil_chk(frac), 1) == 1) {
    GeogebraCommonEuclidianDrawEquation_appendNumberWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_withNSString_(sb, tpl, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:IOSDoubleArray_Get(frac, 0) withGeogebraCommonKernelStringTemplate:tpl]);
  }
  else if (IOSDoubleArray_Get(frac, 1) == 0) {
    if (IOSDoubleArray_Get(frac, 0) < 0) {
      GeogebraCommonEuclidianDrawEquation_appendMinusInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
    }
    else {
      GeogebraCommonEuclidianDrawEquation_appendInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
    }
  }
  else {
    GeogebraCommonEuclidianDrawEquation_appendFractionStartWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel)) formatWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(frac, 0)) withGeogebraCommonKernelStringTemplate:tpl]];
    GeogebraCommonEuclidianDrawEquation_appendFractionMiddleWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
    [sb appendWithNSString:[kernel formatWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(frac, 1)) withGeogebraCommonKernelStringTemplate:tpl]];
    GeogebraCommonEuclidianDrawEquation_appendFractionEndWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoFractionText)
