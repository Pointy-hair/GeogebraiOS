//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/MaxSizeHashMap.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/util/MaxSizeHashMap.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Set.h"

#define GeogebraCommonUtilMaxSizeHashMap_serialVersionUID 1LL

@interface GeogebraCommonUtilMaxSizeHashMap () {
 @public
  jint maxSize_;
}

@end

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonUtilMaxSizeHashMap, serialVersionUID, jlong)

@implementation GeogebraCommonUtilMaxSizeHashMap

- (instancetype)initWithInt:(jint)maxSize {
  GeogebraCommonUtilMaxSizeHashMap_initWithInt_(self, maxSize);
  return self;
}

- (id)putWithId:(id)key
         withId:(id)value {
  if ([self size] >= maxSize_) {
    id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self entrySet])) iterator];
    [((id<JavaUtilIterator>) nil_chk(it)) next];
    [it remove];
  }
  return [super putWithId:key withId:value];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "MaxSizeHashMap", NULL, 0x1, NULL, NULL },
    { "putWithId:withId:", "put", "TT;", 0x1, NULL, "(TV;TT;)TT;" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonUtilMaxSizeHashMap_serialVersionUID },
    { "maxSize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TV;", "TT;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilMaxSizeHashMap = { 2, "MaxSizeHashMap", "geogebra.common.util", NULL, 0x1, 2, methods, 2, fields, 2, superclass_type_args, 0, NULL, NULL, "<V:Ljava/lang/Object;T:Ljava/lang/Object;>Ljava/util/LinkedHashMap<TV;TT;>;" };
  return &_GeogebraCommonUtilMaxSizeHashMap;
}

@end

void GeogebraCommonUtilMaxSizeHashMap_initWithInt_(GeogebraCommonUtilMaxSizeHashMap *self, jint maxSize) {
  JavaUtilLinkedHashMap_init(self);
  self->maxSize_ = maxSize;
}

GeogebraCommonUtilMaxSizeHashMap *new_GeogebraCommonUtilMaxSizeHashMap_initWithInt_(jint maxSize) {
  GeogebraCommonUtilMaxSizeHashMap *self = [GeogebraCommonUtilMaxSizeHashMap alloc];
  GeogebraCommonUtilMaxSizeHashMap_initWithInt_(self, maxSize);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilMaxSizeHashMap)
