//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTranslate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/algos/AlgoTranslate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/Translateable.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoTranslate () {
 @public
  id<GeogebraCommonKernelGeosTranslateable> out_;
  IOSObjectArray *polynomials_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTranslate, out_, id<GeogebraCommonKernelGeosTranslateable>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTranslate, polynomials_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTranslate_compute(GeogebraCommonKernelAlgosAlgoTranslate *self);

@implementation GeogebraCommonKernelAlgosAlgoTranslate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                    withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(self, cons, label, inArg, v);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)v {
  GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Translate();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inGeo_);
  IOSObjectArray_Set(input_, 1, v_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoTranslate_compute(self);
}

- (void)setOutGeo {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) setWithGeogebraCommonKernelGeosGeoElement:inGeo_];
}

- (GeogebraCommonKernelMatrixCoords *)getVectorCoords {
  GeogebraCommonKernelGeosGeoVec3D *vec = (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoVec3D class]);
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(vec))->x_, vec->y_, vec->z_) autorelease];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TranslationOfAbyB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(v_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g2 {
  GeogebraCommonKernelAlgosAlgoTranslate_set_inGeo_(self, g);
  GeogebraCommonKernelAlgosAlgoTranslate_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]])) {
    GeogebraCommonKernelAlgosAlgoTranslate_set_out_(self, (id<GeogebraCommonKernelGeosTranslateable>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelGeosTranslateable)));
  }
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getFreeVariablesWithJavaUtilHashSet:variables];
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
    IOSIntArray *degree1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getDegrees];
    IOSIntArray *degree2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree2, 1) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degree2, 2) + IOSIntArray_Get(degree1, 2);
    return result;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
    IOSObjectArray *coords1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords2), 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)]]);
    IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)]]);
    IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]);
    return GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [v_ isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
    IOSObjectArray *coords1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(inGeo_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    IOSObjectArray *coords2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(v_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))))) getPolynomials];
    GeogebraCommonKernelAlgosAlgoTranslate_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords1), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords2), 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)]]);
    IOSObjectArray_Set(polynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)]]);
    IOSObjectArray_Set(polynomials_, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]);
    return polynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jdouble)getAreaScaleFactor {
  return 1;
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(v_);
  RELEASE_(polynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoVec3D:", "AlgoTranslate", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "AlgoTranslate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getVectorCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lgeogebra.common.kernel.geos.Translateable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "v_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTranslate = { 2, "AlgoTranslate", "geogebra.common.kernel.algos", NULL, 0x1, 17, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTranslate;
}

@end

void GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelAlgosAlgoTranslate *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoVec3D *v) {
  GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoTranslate *new_GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoVec3D *v) {
  GeogebraCommonKernelAlgosAlgoTranslate *self = [GeogebraCommonKernelAlgosAlgoTranslate alloc];
  GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_(self, cons, label, inArg, v);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoTranslate *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoElement *v) {
  GeogebraCommonKernelAlgosAlgoTransformation_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTranslate_set_v_(self, v);
  GeogebraCommonKernelAlgosAlgoTranslate_set_inGeo_(self, inArg);
  GeogebraCommonKernelAlgosAlgoTranslate_set_outGeo_(self, [self getResultTemplateWithGeogebraCommonKernelGeosGeoElement:self->inGeo_]);
  if ([GeogebraCommonKernelGeosTranslateable_class_() isInstance:self->outGeo_]) GeogebraCommonKernelAlgosAlgoTranslate_set_out_(self, (id<GeogebraCommonKernelGeosTranslateable>) check_protocol_cast(self->outGeo_, @protocol(GeogebraCommonKernelGeosTranslateable)));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoTranslate_compute(self);
}

GeogebraCommonKernelAlgosAlgoTranslate *new_GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoElement *v) {
  GeogebraCommonKernelAlgosAlgoTranslate *self = [GeogebraCommonKernelAlgosAlgoTranslate alloc];
  GeogebraCommonKernelAlgosAlgoTranslate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, inArg, v);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTranslate_compute(GeogebraCommonKernelAlgosAlgoTranslate *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoList class]) withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->v_)) isDefined]) {
    [((id<GeogebraCommonKernelGeosTranslateable>) nil_chk(self->out_)) setUndefined];
    return;
  }
  [self setOutGeo];
  if (![((id<GeogebraCommonKernelGeosTranslateable>) nil_chk(self->out_)) isDefined]) {
    return;
  }
  [self->out_ translateWithGeogebraCommonKernelMatrixCoords:[self getVectorCoords]];
  if ([self->inGeo_ isLimitedPath]) {
    [self transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:self->inGeo_ withGeogebraCommonKernelGeosGeoElement:self->outGeo_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTranslate)
