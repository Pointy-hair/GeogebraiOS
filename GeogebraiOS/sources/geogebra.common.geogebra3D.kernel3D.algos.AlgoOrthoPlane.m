//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlane.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane, plane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)getPlane {
  return plane_;
}

- (GeogebraCommonKernelMatrixCoords *)getNormal {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelMatrixCoords *)getPoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)compute {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane_)) getCoordSys];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  GeogebraCommonKernelMatrixCoords *vz = [self getNormal];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vz)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    [plane_ setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *o = [self getPoint];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:o];
  IOSObjectArray *v = [vz completeOrthonormal];
  [coordsys addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), 0)];
  [coordsys addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(v, 1)];
  [coordsys makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  [coordsys setEquationVectorWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:vz];
}

- (void)dealloc {
  RELEASE_(plane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "AlgoOrthoPlane", NULL, 0x1, NULL, NULL },
    { "getPlane", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "getNormal", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane = { 2, "AlgoOrthoPlane", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane_setAndConsume_plane_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_(cons));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane)
