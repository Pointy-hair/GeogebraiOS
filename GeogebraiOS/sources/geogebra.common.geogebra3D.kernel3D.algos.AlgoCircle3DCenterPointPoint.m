//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DCenterPointPoint.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DCenterPointPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)pointThrough
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)forAxis {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, center, pointThrough, forAxis);
  return self;
}

- (jdouble)getRadius {
  id<GeogebraCommonKernelKernelNDGeoPointND> pointThrough = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self getSecondInput], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
  GeogebraCommonKernelMatrixCoords *radius = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pointThrough)) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getCenter])) getInhomCoordsInD3]];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(radius)) calcNorm];
  return [radius getNorm];
}

- (jboolean)setCoordSys {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) resetCoordSys];
  [coordsys_ addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3]];
  [coordsys_ addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(secondInput_, @protocol(GeogebraCommonKernelKernelNDGeoPointND))))) getInhomCoordsInD3]];
  [coordsys_ addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(forAxis_, @protocol(GeogebraCommonKernelKernelNDGeoPointND))))) getInhomCoordsInD3]];
  [coordsys_ makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (NSString *)getCommandString {
  return @"CircleWithCenterAThroughBParallelToABC";
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoCircle3DCenterPointPoint", NULL, 0x1, NULL, NULL },
    { "getRadius", NULL, "D", 0x14, NULL, NULL },
    { "setCoordSys", NULL, "Z", 0x14, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getCommandString", NULL, "Ljava.lang.String;", 0x14, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint = { 2, "AlgoCircle3DCenterPointPoint", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoPointND> pointThrough, id<GeogebraCommonKernelKernelNDGeoPointND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, center, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(pointThrough, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(forAxis, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoPointND> pointThrough, id<GeogebraCommonKernelKernelNDGeoPointND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, center, pointThrough, forAxis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DCenterPointPoint)
