//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/settings/KeyboardSettings.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/KeyboardSettings.h"
#include "geogebra/common/util/Language.h"
#include "java/util/ArrayList.h"
#include "java/util/LinkedList.h"

@interface GeogebraCommonMainSettingsKeyboardSettings () {
 @public
  jfloat keyboardOpacity_;
  jint keyboardWidth_;
  jint keyboardHeight_;
  NSString *keyboardLocale_;
  jboolean showKeyboardOnStart_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainSettingsKeyboardSettings, keyboardLocale_, NSString *)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonMainSettingsKeyboardSettings)

JavaUtilArrayList *GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_;

@implementation GeogebraCommonMainSettingsKeyboardSettings

- (instancetype)initWithJavaUtilLinkedList:(JavaUtilLinkedList *)listeners {
  GeogebraCommonMainSettingsKeyboardSettings_initWithJavaUtilLinkedList_(self, listeners);
  return self;
}

- (instancetype)init {
  GeogebraCommonMainSettingsKeyboardSettings_init(self);
  return self;
}

- (jfloat)getKeyboardOpacity {
  return keyboardOpacity_;
}

- (jint)getKeyboardWidth {
  return keyboardWidth_;
}

- (jint)getKeyboardHeight {
  return keyboardHeight_;
}

- (NSString *)getKeyboardLocale {
  return keyboardLocale_;
}

- (void)setKeyboardWidthWithInt:(jint)windowWidth {
  keyboardWidth_ = windowWidth;
  [self settingChanged];
}

- (void)setKeyboardHeightWithInt:(jint)windowHeight {
  keyboardHeight_ = windowHeight;
  [self settingChanged];
}

- (void)setShowKeyboardOnStartWithBoolean:(jboolean)showKeyboardOnStart {
  self->showKeyboardOnStart_ = showKeyboardOnStart;
  [self settingChanged];
}

- (jboolean)isShowKeyboardOnStart {
  return showKeyboardOnStart_;
}

- (void)setKeyboardOpacityWithFloat:(jfloat)opacity {
  keyboardOpacity_ = opacity;
  [self settingChanged];
}

- (void)keyboardResizedWithInt:(jint)windowWidth
                       withInt:(jint)windowHeight {
  keyboardWidth_ = windowWidth;
  keyboardHeight_ = windowHeight;
}

- (void)setKeyboardLocaleWithNSString:(NSString *)string {
  if (string == nil) return;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_)) size]; i++) {
    if ([((NSString *) nil_chk([((NSString *) nil_chk([GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ getWithInt:i])) description])) isEqual:string]) {
      GeogebraCommonMainSettingsKeyboardSettings_set_keyboardLocale_(self, [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ getWithInt:i]);
      [self settingChanged];
      return;
    }
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Unsupported keyboard locale: ", string));
}

- (void)dealloc {
  RELEASE_(keyboardLocale_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonMainSettingsKeyboardSettings class]) {
    JreStrongAssignAndConsume(&GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_, nil, new_JavaUtilArrayList_init());
    {
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Arabic()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Croatian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Serbian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Slovenian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Czech()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Danish()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_English_UK()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_French()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_German()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Greek()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Finnish()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Hebrew()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Hindi()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Hungarian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Korean()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Macedonian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:@"no"];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Persian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Russian()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Slovak()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Spanish()))->locale_];
      [GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_ addWithId:((GeogebraCommonUtilLanguageEnum *) nil_chk(GeogebraCommonUtilLanguageEnum_get_Yiddish()))->locale_];
    }
    J2OBJC_SET_INITIALIZED(GeogebraCommonMainSettingsKeyboardSettings)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilLinkedList:", "KeyboardSettings", NULL, 0x1, NULL, NULL },
    { "init", "KeyboardSettings", NULL, 0x1, NULL, NULL },
    { "getKeyboardOpacity", NULL, "F", 0x1, NULL, NULL },
    { "getKeyboardWidth", NULL, "I", 0x1, NULL, NULL },
    { "getKeyboardHeight", NULL, "I", 0x1, NULL, NULL },
    { "getKeyboardLocale", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setKeyboardWidthWithInt:", "setKeyboardWidth", "V", 0x1, NULL, NULL },
    { "setKeyboardHeightWithInt:", "setKeyboardHeight", "V", 0x1, NULL, NULL },
    { "setShowKeyboardOnStartWithBoolean:", "setShowKeyboardOnStart", "V", 0x1, NULL, NULL },
    { "isShowKeyboardOnStart", NULL, "Z", 0x1, NULL, NULL },
    { "setKeyboardOpacityWithFloat:", "setKeyboardOpacity", "V", 0x1, NULL, NULL },
    { "keyboardResizedWithInt:withInt:", "keyboardResized", "V", 0x1, NULL, NULL },
    { "setKeyboardLocaleWithNSString:", "setKeyboardLocale", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "supportedLocales_", NULL, 0x9, "Ljava.util.ArrayList;", &GeogebraCommonMainSettingsKeyboardSettings_supportedLocales_, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "keyboardOpacity_", NULL, 0x2, "F", NULL, NULL,  },
    { "keyboardWidth_", NULL, 0x2, "I", NULL, NULL,  },
    { "keyboardHeight_", NULL, 0x2, "I", NULL, NULL,  },
    { "keyboardLocale_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "showKeyboardOnStart_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainSettingsKeyboardSettings = { 2, "KeyboardSettings", "geogebra.common.main.settings", NULL, 0x1, 13, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainSettingsKeyboardSettings;
}

@end

void GeogebraCommonMainSettingsKeyboardSettings_initWithJavaUtilLinkedList_(GeogebraCommonMainSettingsKeyboardSettings *self, JavaUtilLinkedList *listeners) {
  GeogebraCommonMainSettingsAbstractSettings_initWithJavaUtilLinkedList_(self, listeners);
  self->keyboardOpacity_ = 0.7f;
  self->keyboardWidth_ = 400;
  self->keyboardHeight_ = 235;
  GeogebraCommonMainSettingsKeyboardSettings_set_keyboardLocale_(self, nil);
  self->showKeyboardOnStart_ = NO;
}

GeogebraCommonMainSettingsKeyboardSettings *new_GeogebraCommonMainSettingsKeyboardSettings_initWithJavaUtilLinkedList_(JavaUtilLinkedList *listeners) {
  GeogebraCommonMainSettingsKeyboardSettings *self = [GeogebraCommonMainSettingsKeyboardSettings alloc];
  GeogebraCommonMainSettingsKeyboardSettings_initWithJavaUtilLinkedList_(self, listeners);
  return self;
}

void GeogebraCommonMainSettingsKeyboardSettings_init(GeogebraCommonMainSettingsKeyboardSettings *self) {
  GeogebraCommonMainSettingsAbstractSettings_init(self);
  self->keyboardOpacity_ = 0.7f;
  self->keyboardWidth_ = 400;
  self->keyboardHeight_ = 235;
  GeogebraCommonMainSettingsKeyboardSettings_set_keyboardLocale_(self, nil);
  self->showKeyboardOnStart_ = NO;
}

GeogebraCommonMainSettingsKeyboardSettings *new_GeogebraCommonMainSettingsKeyboardSettings_init() {
  GeogebraCommonMainSettingsKeyboardSettings *self = [GeogebraCommonMainSettingsKeyboardSettings alloc];
  GeogebraCommonMainSettingsKeyboardSettings_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainSettingsKeyboardSettings)
