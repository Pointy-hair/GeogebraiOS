//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/PolygonTriangulation.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DSurfaces.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D () {
 @public
  IOSObjectArray *vertices_;
  GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *pt_;
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  JavaUtilArrayList *selectedPoints_;
  JavaUtilArrayList *segments_;
  JavaUtilArrayList *segmentsPoints_;
  jboolean isPreview_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *hittingPointForOutline_;
  GeogebraCommonKernelMatrixCoords *project_, *globalCoords_, *inPlaneCoords_;
  IOSDoubleArray *parameters_;
}

- (void)updateVerticesWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
                                                     withInt:(jint)pointLength;

- (void)updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                 withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                   withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, vertices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, pt_, GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, selectedPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, segments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, segmentsPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, hittingPointForOutline_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, project_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, globalCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, inPlaneCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D, parameters_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithGeogebraCommonKernelGeosGeoPolygon_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonKernelGeosGeoPolygon *polygon, jint pointLength);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelMatrixCoordsArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, IOSObjectArray *vertices, jint length);

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(self, a_view3D, polygon);
  return self;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getGeometryIndex]];
  [renderer setLayerWithFloat:0];
}

- (void)drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [self setHighlightingColor];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
    [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  [self drawTracesOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:NO];
}

- (void)drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
              withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  if (type == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    if ([self getAlpha] > 0) {
      [self drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    }
  }
}

- (void)drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getSurfaceIndex]];
  [renderer setLayerWithFloat:0];
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])))) isPartOfClosedSurface]) [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
    [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
  }
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])))) isPartOfClosedSurface]) [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
    [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
  }
}

- (void)updateVerticesWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
                                                     withInt:(jint)pointLength {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

- (jboolean)updateForItSelf {
  GeogebraCommonKernelGeosGeoPolygon *polygon = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class]);
  jint pointLength = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
  if (pointLength < 3) {
    [self setSurfaceIndexWithInt:-1];
    return YES;
  }
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
  if (!isPreview_ && ![polygon wasInitLabelsCalled]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices_, pointLength);
  }
  jint index = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) startPolygonsWithInt:[self getReusableSurfaceIndex]];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_withGeogebraCommonKernelMatrixCoordsArray_withInt_(renderer, polygon, pt_, vertices_, pointLength);
  [renderer endPolygons];
  [self setSurfaceIndexWithInt:index];
  return YES;
}

+ (void)drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
             withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation:(GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *)pt
                               withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                 withInt:(jint)verticesLength {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_withGeogebraCommonKernelMatrixCoordsArray_withInt_(renderer, polygon, pt, vertices, verticesLength);
}

- (void)updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                 withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)vertices
                                                                   withInt:(jint)length {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices, length);
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])))) wasInitLabelsCalled]) {
      GeogebraCommonKernelGeosGeoPolygon *polygon = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class]);
      jint pointLength = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
      GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithGeogebraCommonKernelGeosGeoPolygon_withInt_(self, polygon, pointLength);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelMatrixCoordsArray_withInt_(self, renderer, vertices_, pointLength);
      [self recordTrace];
    }
  }
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
}

- (void)updatePreview {
  if (segmentsPoints_ == nil) {
    [self setWaitForUpdate];
    return;
  }
  jint index = 0;
  id<JavaUtilIterator> spi = [((JavaUtilArrayList *) nil_chk(segmentsPoints_)) iterator];
  id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(selectedPoints_)) iterator];
  id<GeogebraCommonKernelKernelNDGeoPointND> point = nil;
  JavaUtilArrayList *sp = nil;
  for (; [((id<JavaUtilIterator>) nil_chk(i)) hasNext] && [((id<JavaUtilIterator>) nil_chk(spi)) hasNext]; ) {
    point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([i next], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    if (sp != nil) [sp addWithId:point];
    sp = [((id<JavaUtilIterator>) nil_chk(spi)) next];
    [((JavaUtilArrayList *) nil_chk(sp)) clear];
    [sp addWithId:point];
  }
  for (; [((id<JavaUtilIterator>) nil_chk(spi)) hasNext]; ) {
    sp = [spi next];
    [((JavaUtilArrayList *) nil_chk(sp)) clear];
  }
  for (; [i hasNext]; ) {
    if (sp != nil && point != nil) [sp addWithId:point];
    sp = [new_JavaUtilArrayList_init() autorelease];
    [segmentsPoints_ addWithId:sp];
    point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([i next], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    [sp addWithId:point];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *s = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_([self getView3D], sp) autorelease];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([s getGeoElement])) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:[self getGeoElement]];
    [((JavaUtilArrayList *) nil_chk(segments_)) addWithId:s];
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:s];
  }
  for (id<JavaUtilIterator> s = [((JavaUtilArrayList *) nil_chk(segments_)) iterator]; [((id<JavaUtilIterator>) nil_chk(s)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *) nil_chk([s next])) updatePreview];
  if ([selectedPoints_ size] < 2) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:NO];
    return;
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setEuclidianVisibleWithBoolean:YES];
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:[selectedPoints_ size] + 1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  index = 0;
  for (id<JavaUtilIterator> p = [selectedPoints_ iterator]; [((id<JavaUtilIterator>) nil_chk(p)) hasNext]; ) {
    IOSObjectArray_Set(points, index, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([p next], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    index++;
  }
  IOSObjectArray_Set(points, index, [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points withGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) updateCoordSys];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isDefined]) [self setWaitForUpdate];
}

- (void)disposePreview {
  [self updatePreview];
  [super disposePreview];
  if (segments_ != nil) {
    for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D * __strong s in segments_) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D *) nil_chk(s)) disposePreview];
    }
  }
  if (segmentsPoints_ != nil) {
    [segmentsPoints_ clear];
  }
}

- (jboolean)doHighlighting {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getMetasLength] > 0) {
    {
      IOSObjectArray *a__ = [((id<GeogebraCommonKernelGeosFromMeta>) nil_chk(((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelGeosFromMeta))))) getMetas];
      GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *meta = *b__++;
        if (meta != nil && [meta doHighlighting]) return YES;
      }
    }
  }
  return [super doHighlighting];
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  if (waitForReset_) {
    return NO;
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getAlphaValue] < GeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE) {
    return NO;
  }
  GeogebraCommonKernelGeosGeoPolygon *poly = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class]);
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getCoordSys] == nil) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@", poly));
    return NO;
  }
  if (globalCoords_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_globalCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_inPlaneCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  if ([((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting)) isSphere]) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(hitting->origin_)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([poly getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:globalCoords_];
    if (hittingPointForOutline_ == nil) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_hittingPointForOutline_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([poly getConstruction]));
      [hittingPointForOutline_ setWillingCoordsUndefined];
      [hittingPointForOutline_ setWillingDirectionUndefined];
    }
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(hittingPointForOutline_)) setCoordsWithGeogebraCommonKernelMatrixCoords:globalCoords_];
    [poly pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
    GeogebraCommonKernelMatrixCoords *p3d = [hittingPointForOutline_ getInhomCoordsInD3];
    if (project_ == nil) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
    }
    jdouble d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) distanceWithGeogebraCommonKernelMatrixCoords:hitting->origin_];
    jdouble scale_ = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
    if (d * scale_ <= [poly getLineThickness] + [hitting getThreshold]) {
      [self setZPickWithDouble:-d withDouble:-d];
      [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
      return YES;
    }
    [hittingPointForOutline_ setCoordsWithGeogebraCommonKernelMatrixCoords:globalCoords_];
    [hittingPointForOutline_ setRegionWithGeogebraCommonKernelRegion:poly];
    [poly pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
    p3d = [hittingPointForOutline_ getInhomCoordsInD3];
    d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) distanceWithGeogebraCommonKernelMatrixCoords:hitting->origin_];
    if (d * scale_ <= [hitting getThreshold]) {
      [self setZPickWithDouble:-d withDouble:-d];
      [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
      return YES;
    }
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(hitting->origin_)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([poly getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:globalCoords_ withGeogebraCommonKernelMatrixCoords:inPlaneCoords_];
    if (![hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:globalCoords_]) {
      return NO;
    }
    jboolean ret = NO;
    if ([poly isInRegionWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(inPlaneCoords_)) getX] withDouble:[inPlaneCoords_ getY]]) {
      jdouble parameterOnHitting = [inPlaneCoords_ getZ];
      [self setZPickWithDouble:parameterOnHitting withDouble:parameterOnHitting];
      [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
      ret = YES;
    }
    if (![poly wasInitLabelsCalled]) {
      if (hittingPointForOutline_ == nil) {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_hittingPointForOutline_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([poly getConstruction]));
      }
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(hittingPointForOutline_)) setCoordsWithGeogebraCommonKernelMatrixCoords:globalCoords_];
      [poly pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:hittingPointForOutline_];
      GeogebraCommonKernelMatrixCoords *p3d = [hittingPointForOutline_ getInhomCoordsInD3];
      if ([hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:p3d]) {
        if (project_ == nil) {
          GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
        }
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) projectLineWithGeogebraCommonKernelMatrixCoords:hitting->origin_ withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
        jdouble d = [p3d distanceWithGeogebraCommonKernelMatrixCoords:project_];
        jdouble scale_ = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
        if (d * scale_ <= [poly getLineThickness] + [hitting getThreshold]) {
          jdouble z = -IOSDoubleArray_Get(nil_chk(parameters_), 0);
          jdouble dz = [poly getLineThickness] / scale_;
          [self setZPickWithDouble:z + dz withDouble:z - dz];
          [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
          return YES;
        }
      }
    }
    return ret;
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(vertices_);
  RELEASE_(pt_);
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  RELEASE_(selectedPoints_);
  RELEASE_(segments_);
  RELEASE_(segmentsPoints_);
  RELEASE_(hittingPointForOutline_);
  RELEASE_(project_);
  RELEASE_(globalCoords_);
  RELEASE_(inPlaneCoords_);
  RELEASE_(parameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoPolygon:", "DrawPolygon3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x1, NULL, NULL },
    { "drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHiding", "V", 0x1, NULL, NULL },
    { "drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x1, NULL, NULL },
    { "drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawGeometryForPicking", "V", 0x4, NULL, NULL },
    { "drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfaceGeometry", "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "updateVerticesWithGeogebraCommonKernelGeosGeoPolygon:withInt:", "updateVertices", "V", 0x2, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation:withGeogebraCommonKernelMatrixCoordsArray:withInt:", "drawPolygon", "V", 0x19, NULL, NULL },
    { "updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonKernelMatrixCoordsArray:withInt:", "updateOutline", "V", 0x2, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawPolygon3D", NULL, 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vertices_", NULL, 0x2, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.PolygonTriangulation;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "segments_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D;>;",  },
    { "segmentsPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/util/ArrayList;>;",  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hittingPointForOutline_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "globalCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "inPlaneCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D = { 2, "DrawPolygon3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 22, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, polygon);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelMatrixCoords_class_()]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_pt_(self, new_GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_init());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  self->isPreview_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  [self->pt_ setPolygonWithGeogebraCommonKernelGeosGeoPolygon:polygon];
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(self, a_view3D, polygon);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateVerticesWithGeogebraCommonKernelGeosGeoPolygon_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonKernelGeosGeoPolygon *polygon, jint pointLength) {
  if (((IOSObjectArray *) nil_chk(self->vertices_))->size_ < pointLength) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:pointLength type:GeogebraCommonKernelMatrixCoords_class_()]);
    for (jint i = 0; i < pointLength; i++) {
      IOSObjectArray_SetAndConsume(self->vertices_, i, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
    }
  }
  for (jint i = 0; i < pointLength; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->vertices_, i))) setValuesWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPoint3DWithInt:i] withInt:3];
  }
  if (pointLength > 0) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->vertices_, 0) withInt:3];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->vertices_, 0) withInt:3];
    for (jint i = 1; i < pointLength; i++) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self->boundsMin_, self->boundsMax_, IOSObjectArray_Get(self->vertices_, i));
    }
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_withGeogebraCommonKernelMatrixCoordsArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonKernelGeosGeoPolygon *polygon, GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *pt, IOSObjectArray *vertices, jint verticesLength) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initialize();
  GeogebraCommonKernelMatrixCoords *n = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getMainDirection];
  [((GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *) nil_chk(pt)) clear];
  @try {
    if ([pt updatePoints] > 2) {
      GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_ConvexityEnum *convexity = [pt checkIsConvex];
      if (convexity != GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_ConvexityEnum_get_NOT()) {
        jboolean reverse = [polygon getReverseNormalForDrawing] ^ (convexity == GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_ConvexityEnum_get_CLOCKWISE());
        [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawPolygonConvexWithGeogebraCommonKernelMatrixCoords:n withGeogebraCommonKernelMatrixCoordsArray:vertices withInt:verticesLength withBoolean:reverse];
      }
      else {
        [pt setIntersections];
        [pt triangulate];
        IOSObjectArray *verticesWithIntersections = [pt getCompleteVerticesWithGeogebraCommonKernelMatrixCoordsArray:vertices withGeogebraCommonKernelMatrixCoordSys:[polygon getCoordSys] withInt:verticesLength];
        for (GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_TriangleFan * __strong triFan in nil_chk([pt getTriangleFans])) {
          [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawTriangleFanWithGeogebraCommonKernelMatrixCoords:n withGeogebraCommonKernelMatrixCoordsArray:verticesWithIntersections withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_TriangleFan:triFan];
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    [e printStackTrace];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelMatrixCoordsArray_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, IOSObjectArray *vertices, jint length) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] withFloat:(jfloat) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
  for (jint i = 0; i < length - 1; i++) {
    [brush setAffineTextureWithFloat:0.5f withFloat:0.25f];
    [brush segmentWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(vertices), i) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vertices, i + 1)];
  }
  [brush setAffineTextureWithFloat:0.5f withFloat:0.25f];
  [brush segmentWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(vertices), length - 1) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(vertices, 0)];
  [self setGeometryIndexWithInt:[brush end]];
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelMatrixCoords_class_()]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_pt_(self, new_GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_init());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  self->isPreview_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DKernel3DKernel3D *kernel = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel];
  [self setGeoElementWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(kernel)) getConstruction], nil) autorelease]];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) setIsPickableWithBoolean:NO];
  [self->pt_ setPolygonWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast([self getGeoElement], [GeogebraCommonKernelGeosGeoPolygon class])];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_set_selectedPoints_(self, selectedPoints);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_segments_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_setAndConsume_segmentsPoints_(self, new_JavaUtilArrayList_init());
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  self->isPreview_ = YES;
  [self updatePreview];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D)
