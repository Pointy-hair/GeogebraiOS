//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVector3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D () {
 @public
  GeogebraCommonKernelMatrixCoords *o_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D, o_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
     withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)vec {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(self, cons, label, vec);
  return self;
}

- (GeogebraCommonKernelMatrixCoords *)getVectorCoords {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(vec_, [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) getCoordsInD3])) copyVector];
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin {
  return o_;
}

- (void)setOrigin {
  id<GeogebraCommonKernelKernelNDGeoPointND> start = [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(vec_, [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) getStartPoint];
  if (GeogebraCommonKernelAlgosAlgoAngle_centerIsNotDrawableWithGeogebraCommonKernelKernelNDGeoPointND_(start)) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_set_o_(self, GeogebraCommonKernelMatrixCoords_get_UNDEFINED_());
  }
  else {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_set_o_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(start)) getInhomCoordsInD3]);
  }
}

- (void)dealloc {
  RELEASE_(o_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D:", "AlgoAngleVector3D", NULL, 0x1, NULL, NULL },
    { "getVectorCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x14, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x14, NULL, NULL },
    { "setOrigin", NULL, "V", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "o_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D = { 2, "AlgoAngleVector3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *vec) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, vec);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *vec) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(self, cons, label, vec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D)
