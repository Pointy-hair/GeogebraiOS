//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/kernelND/GeoQuadricND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/geos/ChangeableCoordParent.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelKernelNDGeoQuadricND () {
 @public
  jint dimension_;
  GeogebraCommonKernelMatrixCoordMatrix *symetricMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix *tmpEigenMatrix_;
  GeogebraCommonKernelGeosChangeableCoordParent *changeableCoordParent_;
  jboolean trace_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDGeoQuadricND, symetricMatrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDGeoQuadricND, tmpEigenMatrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDGeoQuadricND, changeableCoordParent_, GeogebraCommonKernelGeosChangeableCoordParent *)

__attribute__((unused)) static void GeogebraCommonKernelKernelNDGeoQuadricND_setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelKernelNDGeoQuadricND *self, GeogebraCommonKernelGeosGeoNumeric *number, GeogebraCommonKernelGeosGeoElement *direction);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelKernelNDGeoQuadricND)

IOSCharArray *GeogebraCommonKernelKernelNDGeoQuadricND_VAR_STRING_;

@implementation GeogebraCommonKernelKernelNDGeoQuadricND

- (IOSDoubleArray *)getFlatMatrix {
  return matrix_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)dimension {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_(self, c, dimension);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)dimension
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, dimension, isIntersection);
  return self;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelKernelNDGeoQuadricND *quadric = (GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoQuadricND class]);
  if ([((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric)) hasChangeableCoordParentNumbers]) GeogebraCommonKernelKernelNDGeoQuadricND_setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(self, [((GeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(quadric->changeableCoordParent_)) getNumber], [quadric->changeableCoordParent_ getDirector]);
}

- (GeogebraCommonKernelMatrixCoords *)getEigenvec3DWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(eigenvecND_), i);
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getSymetricMatrixWithDoubleArray:(IOSDoubleArray *)vals {
  if (symetricMatrix_ == nil) {
    GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_symetricMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 4));
  }
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(symetricMatrix_)) setWithInt:1 withInt:1 withDouble:IOSDoubleArray_Get(nil_chk(vals), 0)];
  [symetricMatrix_ setWithInt:2 withInt:2 withDouble:IOSDoubleArray_Get(vals, 1)];
  [symetricMatrix_ setWithInt:3 withInt:3 withDouble:IOSDoubleArray_Get(vals, 2)];
  [symetricMatrix_ setWithInt:4 withInt:4 withDouble:IOSDoubleArray_Get(vals, 3)];
  [symetricMatrix_ setWithInt:1 withInt:2 withDouble:IOSDoubleArray_Get(vals, 4)];
  [symetricMatrix_ setWithInt:2 withInt:1 withDouble:IOSDoubleArray_Get(vals, 4)];
  [symetricMatrix_ setWithInt:1 withInt:3 withDouble:IOSDoubleArray_Get(vals, 5)];
  [symetricMatrix_ setWithInt:3 withInt:1 withDouble:IOSDoubleArray_Get(vals, 5)];
  [symetricMatrix_ setWithInt:2 withInt:3 withDouble:IOSDoubleArray_Get(vals, 6)];
  [symetricMatrix_ setWithInt:3 withInt:2 withDouble:IOSDoubleArray_Get(vals, 6)];
  [symetricMatrix_ setWithInt:1 withInt:4 withDouble:IOSDoubleArray_Get(vals, 7)];
  [symetricMatrix_ setWithInt:4 withInt:1 withDouble:IOSDoubleArray_Get(vals, 7)];
  [symetricMatrix_ setWithInt:2 withInt:4 withDouble:IOSDoubleArray_Get(vals, 8)];
  [symetricMatrix_ setWithInt:4 withInt:2 withDouble:IOSDoubleArray_Get(vals, 8)];
  [symetricMatrix_ setWithInt:3 withInt:4 withDouble:IOSDoubleArray_Get(vals, 9)];
  [symetricMatrix_ setWithInt:4 withInt:3 withDouble:IOSDoubleArray_Get(vals, 9)];
  return symetricMatrix_;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getSymetricMatrix {
  return [self getSymetricMatrixWithDoubleArray:matrix_];
}

- (void)setMatrixFromEigen {
  if (tmpEigenMatrix_ == nil) {
    GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_tmpEigenMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 4));
  }
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpEigenMatrix_)) setWithGeogebraCommonKernelMatrixCoordsArray:eigenvecND_];
  [tmpEigenMatrix_ setWithGeogebraCommonKernelMatrixCoords:[self getMidpoint] withInt:4];
  GeogebraCommonKernelMatrixCoordMatrix *diagonalizedMatrix = GeogebraCommonKernelMatrixCoordMatrix_DiagonalMatrixWithDoubleArray_(diagonal_);
  GeogebraCommonKernelMatrixCoordMatrix *eigenMatrixInv = [tmpEigenMatrix_ inverse];
  GeogebraCommonKernelMatrixCoordMatrix *finalMatrix = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(eigenMatrixInv)) transposeCopy])) mulWithGeogebraCommonKernelMatrixCoordMatrix:diagonalizedMatrix])) mulWithGeogebraCommonKernelMatrixCoordMatrix:eigenMatrixInv];
  [self setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:finalMatrix];
}

- (void)setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  *IOSDoubleArray_GetRef(nil_chk(matrix_), 0) = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:1 withInt:1];
  *IOSDoubleArray_GetRef(matrix_, 1) = [m getWithInt:2 withInt:2];
  *IOSDoubleArray_GetRef(matrix_, 2) = [m getWithInt:3 withInt:3];
  *IOSDoubleArray_GetRef(matrix_, 3) = [m getWithInt:4 withInt:4];
  *IOSDoubleArray_GetRef(matrix_, 4) = [m getWithInt:1 withInt:2];
  *IOSDoubleArray_GetRef(matrix_, 5) = [m getWithInt:1 withInt:3];
  *IOSDoubleArray_GetRef(matrix_, 6) = [m getWithInt:2 withInt:3];
  *IOSDoubleArray_GetRef(matrix_, 7) = [m getWithInt:1 withInt:4];
  *IOSDoubleArray_GetRef(matrix_, 8) = [m getWithInt:2 withInt:4];
  *IOSDoubleArray_GetRef(matrix_, 9) = [m getWithInt:3 withInt:4];
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                 withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                                                   withDouble:(jdouble)r {
  defined_ = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(M, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) isInfinite]);
  [self setSphereNDWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) getInhomCoordsInD3] withDouble:r];
}

- (void)setSphereNDWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)M
                                             withDouble:(jdouble)rad {
  jdouble r = rad;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    r = 0;
  }
  else if (r < 0) {
    defined_ = NO;
  }
  if (defined_) {
    [self setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:M withDouble:r];
    [self setAffineTransform];
  }
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)M
                                                   withDouble:(jdouble)r {
  IOSDoubleArray *coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) get];
  [self setMidpointWithDoubleArray:coords];
  for (jint i = 0; i < dimension_; i++) *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = r;
  for (jint i = 0; i < dimension_; i++) *IOSDoubleArray_GetRef(nil_chk(matrix_), i) = 1.0;
  *IOSDoubleArray_GetRef(nil_chk(matrix_), dimension_) = -r * r;
  for (jint i = 0; i < dimension_; i++) *IOSDoubleArray_GetRef(matrix_, dimension_) += IOSDoubleArray_Get(nil_chk(coords), i) * IOSDoubleArray_Get(coords, i);
  for (jint i = dimension_ + 1; i < matrixDim_ - dimension_; i++) *IOSDoubleArray_GetRef(matrix_, i) = 0.0;
  for (jint i = matrixDim_ - dimension_; i < matrixDim_; i++) *IOSDoubleArray_GetRef(matrix_, i) = -IOSDoubleArray_Get(nil_chk(coords), i - (matrixDim_ - dimension_));
  if (r > GeogebraCommonKernelKernel_STANDARD_PRECISION) {
    if (type_ != GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE) {
      type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE;
      linearEccentricity_ = 0.0;
      eccentricity_ = 0.0;
      [self setFirstEigenvectorWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1, 0 } count:2]];
      [self setEigenvectors];
    }
  }
  else if (GeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    [self singlePoint];
  }
  else {
    [self empty];
  }
}

- (void)empty {
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_EMPTY;
}

- (void)setUndefined {
  defined_ = NO;
  [self empty];
}

- (void)setDefined {
  defined_ = YES;
}

- (void)setMidpointWithDouble:(jdouble)coord1
                   withDouble:(jdouble)coord2 {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(midpoint_)) setWithInt:1 withDouble:coord1];
  [midpoint_ setWithInt:2 withDouble:coord2];
}

- (void)setMidpointWithDoubleArray:(IOSDoubleArray *)coords {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(midpoint_)) setWithDoubleArray:coords];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint2D {
  return midpoint_;
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint {
  return [self getMidpoint2D];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint3D {
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  for (jint i = 1; i < [((GeogebraCommonKernelMatrixCoords *) nil_chk(midpoint_)) getLength]; i++) [ret setWithInt:i withDouble:[midpoint_ getWithInt:i]];
  [ret setWWithDouble:[midpoint_ getLast]];
  return ret;
}

- (jdouble)getHalfAxisWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(halfAxes_), i);
}

- (jboolean)isDefined {
  return defined_;
}

- (jint)getType {
  return type_;
}

- (void)setTypeWithInt:(jint)type {
  self->type_ = type;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_init() autorelease];
  [sbToString setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  [sbToString appendWithNSString:@": "];
  [sbToString appendWithNSString:[((JavaLangStringBuilder *) nil_chk([self buildValueStringWithGeogebraCommonKernelStringTemplate:tpl])) description]];
  return [sbToString description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk([self buildValueStringWithGeogebraCommonKernelStringTemplate:tpl])) description];
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)buildSphereNDStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbToValueString
              withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  NSString *squared;
  switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    squared = @"^{2}";
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    squared = @"^2";
    break;
    default:
    squared = @"\u00b2";
  }
  for (jint i = 0; i < dimension_; i++) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getMidpoint])) getWithInt:i + 1])) {
      [((JavaLangStringBuilder *) nil_chk(sbToValueString)) appendWithChar:IOSCharArray_Get(nil_chk(GeogebraCommonKernelKernelNDGeoQuadricND_VAR_STRING_), i)];
      [sbToValueString appendWithNSString:squared];
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sbToValueString)) appendWithNSString:@"("];
      [sbToValueString appendWithChar:IOSCharArray_Get(nil_chk(GeogebraCommonKernelKernelNDGeoQuadricND_VAR_STRING_), i)];
      [sbToValueString appendWithNSString:@" "];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatSignedWithDouble:-[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getMidpoint])) getWithInt:i + 1] withJavaLangStringBuilder:sbToValueString withGeogebraCommonKernelStringTemplate:tpl];
      [sbToValueString appendWithNSString:@")"];
      [sbToValueString appendWithNSString:squared];
    }
    if (i < dimension_ - 1) [((JavaLangStringBuilder *) nil_chk(sbToValueString)) appendWithNSString:@" + "];
    else [((JavaLangStringBuilder *) nil_chk(sbToValueString)) appendWithNSString:@" = "];
  }
  [((JavaLangStringBuilder *) nil_chk(sbToValueString)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:0] withGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setFirstEigenvectorWithDoubleArray:(IOSDoubleArray *)coords {
}

- (void)setEigenvectors {
}

- (void)singlePoint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setAffineTransform {
}

- (void)setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)number
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)direction {
  GeogebraCommonKernelKernelNDGeoQuadricND_setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(self, number, direction);
}

- (jboolean)hasChangeableCoordParentNumbers {
  return (changeableCoordParent_ != nil);
}

- (void)recordChangeableCoordParentNumbers {
  [((GeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(changeableCoordParent_)) record];
}

- (jboolean)moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)viewDirection
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)updateGeos
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)tempMoveObjectList
                                            withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  if (changeableCoordParent_ == nil) {
    return NO;
  }
  return [((GeogebraCommonKernelGeosChangeableCoordParent *) nil_chk(changeableCoordParent_)) moveWithGeogebraCommonKernelMatrixCoords:rwTransVec withGeogebraCommonKernelMatrixCoords:endPosition withGeogebraCommonKernelMatrixCoords:viewDirection withJavaUtilArrayList:updateGeos withJavaUtilArrayList:tempMoveObjectList withGeogebraCommonEuclidianEuclidianView:view];
}

- (jint)getDimension {
  return dimension_;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)dealloc {
  RELEASE_(matrix_);
  RELEASE_(halfAxes_);
  RELEASE_(midpoint_);
  RELEASE_(eigenvecND_);
  RELEASE_(diagonal_);
  RELEASE_(eigenval_);
  RELEASE_(mu_);
  RELEASE_(symetricMatrix_);
  RELEASE_(tmpEigenMatrix_);
  RELEASE_(changeableCoordParent_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelKernelNDGeoQuadricND class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelKernelNDGeoQuadricND_VAR_STRING_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ 'x', 'y', 'z' } count:3]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelKernelNDGeoQuadricND)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getFlatMatrix", NULL, "[D", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoQuadricND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoQuadricND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:withBoolean:", "GeoQuadricND", NULL, 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getEigenvec3DWithInt:", "getEigenvec3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getSymetricMatrixWithDoubleArray:", "getSymetricMatrix", "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x4, NULL, NULL },
    { "getSymetricMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "setMatrixFromEigen", NULL, "V", 0x4, NULL, NULL },
    { "setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:", "setMatrix", "V", 0x4, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x401, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelMatrixCoords:withDouble:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x401, NULL, NULL },
    { "setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:withDouble:", "setSphereNDMatrix", "V", 0x4, NULL, NULL },
    { "empty", NULL, "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setDefined", NULL, "V", 0x11, NULL, NULL },
    { "setMidpointWithDouble:withDouble:", "setMidpoint", "V", 0x4, NULL, NULL },
    { "setMidpointWithDoubleArray:", "setMidpoint", "V", 0x4, NULL, NULL },
    { "getMidpoint2D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpoint3D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getHalfAxisWithInt:", "getHalfAxis", "D", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x11, NULL, NULL },
    { "setTypeWithInt:", "setType", "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x404, NULL, NULL },
    { "buildSphereNDStringWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "buildSphereNDString", "V", 0x4, NULL, NULL },
    { "setFirstEigenvectorWithDoubleArray:", "setFirstEigenvector", "V", 0x4, NULL, NULL },
    { "setEigenvectors", NULL, "V", 0x4, NULL, NULL },
    { "singlePoint", NULL, "V", 0x404, NULL, NULL },
    { "setAffineTransform", NULL, "V", 0x4, NULL, NULL },
    { "setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoElement:", "setChangeableCoordParent", "V", 0x11, NULL, NULL },
    { "hasChangeableCoordParentNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "recordChangeableCoordParentNumbers", NULL, "V", 0x1, NULL, NULL },
    { "moveFromChangeableCoordParentNumbersWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withJavaUtilArrayList:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:", "moveFromChangeableCoordParentNumbers", "Z", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dimension_", NULL, 0x2, "I", NULL, NULL,  },
    { "matrixDim_", NULL, 0x4, "I", NULL, NULL,  },
    { "type_", NULL, 0x1, "I", NULL, NULL,  },
    { "matrix_", NULL, 0x4, "[D", NULL, NULL,  },
    { "halfAxes_", NULL, 0x1, "[D", NULL, NULL,  },
    { "linearEccentricity_", NULL, 0x1, "D", NULL, NULL,  },
    { "eccentricity_", NULL, 0x1, "D", NULL, NULL,  },
    { "p_", NULL, 0x1, "D", NULL, NULL,  },
    { "defined_", NULL, 0x4, "Z", NULL, NULL,  },
    { "midpoint_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "eigenvecND_", NULL, 0x4, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "diagonal_", NULL, 0x4, "[D", NULL, NULL,  },
    { "VAR_STRING_", NULL, 0x1c, "[C", &GeogebraCommonKernelKernelNDGeoQuadricND_VAR_STRING_, NULL,  },
    { "eigenval_", NULL, 0x4, "[D", NULL, NULL,  },
    { "mu_", NULL, 0x4, "[D", NULL, NULL,  },
    { "isIntersection_", NULL, 0x4, "Z", NULL, NULL,  },
    { "symetricMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpEigenMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "changeableCoordParent_", NULL, 0x2, "Lgeogebra.common.kernel.geos.ChangeableCoordParent;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelKernelNDGeoQuadricND = { 2, "GeoQuadricND", "geogebra.common.kernel.kernelND", NULL, 0x401, 43, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelKernelNDGeoQuadricND;
}

@end

void GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelKernelNDGeoQuadricND *self, GeogebraCommonKernelConstruction *c, jint dimension) {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, dimension, NO);
}

void GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelKernelNDGeoQuadricND *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->type_ = -1;
  self->defined_ = YES;
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_mu_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelKernelNDGeoQuadricND_set_changeableCoordParent_(self, nil);
}

void GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_withBoolean_(GeogebraCommonKernelKernelNDGeoQuadricND *self, GeogebraCommonKernelConstruction *c, jint dimension, jboolean isIntersection) {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isIntersection_ = isIntersection;
  [self setConstructionDefaults];
  self->dimension_ = dimension;
  self->matrixDim_ = (dimension + 1) * (dimension + 2) / 2;
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_matrix_(self, [IOSDoubleArray newArrayWithLength:self->matrixDim_]);
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_halfAxes_(self, [IOSDoubleArray newArrayWithLength:dimension]);
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_midpoint_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(dimension + 1));
  [self->midpoint_ setWithInt:dimension + 1 withDouble:1];
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_eigenval_(self, [IOSDoubleArray newArrayWithLength:dimension + 1]);
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_mu_(self, [IOSDoubleArray newArrayWithLength:dimension]);
}

void GeogebraCommonKernelKernelNDGeoQuadricND_setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelKernelNDGeoQuadricND *self, GeogebraCommonKernelGeosGeoNumeric *number, GeogebraCommonKernelGeosGeoElement *direction) {
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_changeableCoordParent_(self, new_GeogebraCommonKernelGeosChangeableCoordParent_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoElement_(self, number, direction));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelKernelNDGeoQuadricND)
