//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRootInterval.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRootInterval.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/roots/RealRootAdapter.h"
#include "geogebra/common/kernel/roots/RealRootDerivAdapter.h"
#include "geogebra/common/kernel/roots/RealRootUtil.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolver.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.h"

@interface GeogebraCommonKernelAlgosAlgoRootInterval () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  id<GeogebraCommonKernelArithmeticNumberValue> a_, b_;
  GeogebraCommonKernelGeosGeoPoint *rootPoint_;
  GeogebraCommonKernelGeosGeoElement *aGeo_, *bGeo_;
  id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver> rootFinder_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, a_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, b_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, rootPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, aGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, bGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootInterval, rootFinder_, id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRootInterval_compute(GeogebraCommonKernelAlgosAlgoRootInterval *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoRootInterval_calcRoot(GeogebraCommonKernelAlgosAlgoRootInterval *self);

@implementation GeogebraCommonKernelAlgosAlgoRootInterval

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  GeogebraCommonKernelAlgosAlgoRootInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, b);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Root();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  IOSObjectArray_Set(input_, 1, aGeo_);
  IOSObjectArray_Set(input_, 2, bGeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:rootPoint_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPoint *)getRootPoint {
  return rootPoint_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoRootInterval_compute(self);
}

- (jdouble)calcRoot {
  return GeogebraCommonKernelAlgosAlgoRootInterval_calcRoot(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RootOfAonIntervalBC" withNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(aGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(bGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(rootPoint_);
  RELEASE_(aGeo_);
  RELEASE_(bGeo_);
  RELEASE_(rootFinder_);
  RELEASE_(rootPolisher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRootInterval", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRootPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "calcRoot", NULL, "D", 0x10, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "rootPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "aGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "bGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "rootFinder_", NULL, 0x2, "Lorg.apache.commons.math.analysis.solvers.UnivariateRealSolver;", NULL, NULL,  },
    { "rootPolisher_", NULL, 0x0, "Lorg.apache.commons.math.analysis.solvers.UnivariateRealSolver;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRootInterval = { 2, "AlgoRootInterval", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRootInterval;
}

@end

void GeogebraCommonKernelAlgosAlgoRootInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoRootInterval *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoRootInterval_set_f_(self, f);
  GeogebraCommonKernelAlgosAlgoRootInterval_set_a_(self, a);
  GeogebraCommonKernelAlgosAlgoRootInterval_set_b_(self, b);
  GeogebraCommonKernelAlgosAlgoRootInterval_set_aGeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRootInterval_set_bGeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRootInterval_setAndConsume_rootPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRootInterval_compute(self);
  [self->rootPoint_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoRootInterval *new_GeogebraCommonKernelAlgosAlgoRootInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoRootInterval *self = [GeogebraCommonKernelAlgosAlgoRootInterval alloc];
  GeogebraCommonKernelAlgosAlgoRootInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, f, a, b);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRootInterval_compute(GeogebraCommonKernelAlgosAlgoRootInterval *self) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->rootPoint_)) setCoordsWithDouble:GeogebraCommonKernelAlgosAlgoRootInterval_calcRoot(self) withDouble:0.0 withDouble:1.0];
}

jdouble GeogebraCommonKernelAlgosAlgoRootInterval_calcRoot(GeogebraCommonKernelAlgosAlgoRootInterval *self) {
  if (!([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->aGeo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->bGeo_)) isDefined])) {
    return JavaLangDouble_NaN;
  }
  jdouble root = JavaLangDouble_NaN;
  GeogebraCommonKernelArithmeticFunction *fun = [self->f_ getFunction];
  if (self->rootFinder_ == nil) {
    OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *fact = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory_newInstance();
    GeogebraCommonKernelAlgosAlgoRootInterval_set_rootFinder_(self, [((OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *) nil_chk(fact)) newBrentSolver]);
    GeogebraCommonKernelAlgosAlgoRootInterval_set_rootPolisher_(self, [fact newNewtonSolver]);
  }
  jdouble min = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->a_)) getDouble];
  jdouble max = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->b_)) getDouble];
  jdouble newtonRoot = JavaLangDouble_NaN;
  @try {
    root = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootFinder_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:min withDouble:max];
  }
  @catch (JavaLangException *e) {
    GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"problem finding root: ", [((JavaLangException *) nil_chk(e)) getMessage]));
    @try {
      IOSDoubleArray *borders = GeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, min, max);
      root = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootFinder_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:IOSDoubleArray_Get(nil_chk(borders), 0) withDouble:IOSDoubleArray_Get(borders, 1)];
    }
    @catch (JavaLangException *ex) {
      GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"problem finding root: ", [((JavaLangException *) nil_chk(ex)) getMessage]));
      return JavaLangDouble_NaN;
    }
  }
  @try {
    newtonRoot = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(self->rootPolisher_)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootDerivAdapter_initWithGeogebraCommonKernelRootsRealRootDerivFunction_(fun) autorelease] withDouble:min withDouble:max withDouble:root];
    if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) evaluateWithDouble:newtonRoot]) < JavaLangMath_absWithDouble_([fun evaluateWithDouble:root])) {
      root = newtonRoot;
    }
  }
  @catch (JavaLangException *e) {
    GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("$$", @"problem polishing root: ", [((JavaLangException *) nil_chk(e)) getMessage]));
  }
  if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) evaluateWithDouble:root]) < GeogebraCommonKernelKernel_MIN_PRECISION) {
    return root;
  }
  GeogebraCommonUtilDebugLog_debugWithNSString_(@"problem with root accuracy");
  return JavaLangDouble_NaN;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRootInterval)
