//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdTableText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoTableText.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdTableText.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelCommandsCmdTableText *self, NSString *label, GeogebraCommonKernelGeosGeoList *list, GeogebraCommonKernelGeosGeoText *args);

@implementation GeogebraCommonKernelCommandsCmdTableText

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdTableText_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    GeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 1:
      if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList])) {
        GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]);
        if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] == 0 || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:0])) isGeoList]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]), nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
        if (list != nil) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], list, nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      case 2:
      if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoText])) {
        GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]);
        if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] == 0 || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:0])) isGeoList]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoText class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_ - 1, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
        if (list != nil) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], list, (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoText class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoList])) {
        GeogebraCommonKernelGeosGeoList *list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
        if (list != nil) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], list, nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      case 0:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      default:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, ((IOSObjectArray *) nil_chk(arg))->size_ - 1))) isGeoText]) {
        list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_ - 1, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
        if (list != nil) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], list, (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, arg->size_ - 1), [GeogebraCommonKernelGeosGeoText class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      else {
        list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, arg->size_, GeogebraCommonPluginGeoClassEnum_get_DEFAULT());
        if (list != nil) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, [c getLabel], list, nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
  }
}

- (GeogebraCommonKernelGeosGeoText *)TableTextWithNSString:(NSString *)label
                       withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
                       withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args {
  return GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, label, list, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdTableText", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "TableTextWithNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:", "TableText", "Lgeogebra.common.kernel.geos.GeoText;", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdTableText = { 2, "CmdTableText", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdTableText;
}

@end

void GeogebraCommonKernelCommandsCmdTableText_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdTableText *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdTableText *new_GeogebraCommonKernelCommandsCmdTableText_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdTableText *self = [GeogebraCommonKernelCommandsCmdTableText alloc];
  GeogebraCommonKernelCommandsCmdTableText_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsCmdTableText_TableTextWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelCommandsCmdTableText *self, NSString *label, GeogebraCommonKernelGeosGeoList *list, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoTableText *algo = [new_GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self->cons_, label, list, args) autorelease];
  GeogebraCommonKernelGeosGeoText *text = [algo getResult];
  return text;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdTableText)
