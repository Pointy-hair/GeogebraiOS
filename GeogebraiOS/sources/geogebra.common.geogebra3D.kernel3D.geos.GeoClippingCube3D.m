//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoClippingCube3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoClippingCube3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D () {
 @public
  jint reduction_;
}

@end

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return nil;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_CLIPPINGCUBE3D();
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return nil;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (jboolean)isDefined {
  return YES;
}

- (void)setUndefined {
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return nil;
}

- (jboolean)showInAlgebraView {
  return NO;
}

- (jboolean)showInEuclidianView {
  return YES;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setReductionWithInt:(jint)value {
  reduction_ = value;
}

- (jint)getReduction {
  return reduction_;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoClippingCube3D", NULL, 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setReductionWithInt:", "setReduction", "V", 0x1, NULL, NULL },
    { "getReduction", NULL, "I", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "REDUCTION_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_SMALL },
    { "REDUCTION_MEDIUM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_MEDIUM },
    { "REDUCTION_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_LARGE },
    { "REDUCTION_MIN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_MIN },
    { "REDUCTION_MAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_MAX },
    { "reduction_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D = { 2, "GeoClippingCube3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 14, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->reduction_ = GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_REDUCTION_MEDIUM;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D)
