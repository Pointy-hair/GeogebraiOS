//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePoint.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePoint.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  GeogebraCommonKernelGeosGeoElement *inputParallel_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint, inputParallel_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint, line_, GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inputParallel {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, inputParallel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)createLineWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getLine {
  return line_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return point_;
}

- (GeogebraCommonKernelGeosGeoElement *)getInputParallel {
  return inputParallel_;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_compute(self);
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAParallelToB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputParallel_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(point_);
  RELEASE_(inputParallel_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:", "AlgoLinePoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoLinePoint", NULL, 0x1, NULL, NULL },
    { "createLineWithGeogebraCommonKernelConstruction:", "createLine", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x4, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getInputParallel", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x404, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "inputParallel_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint = { 2, "AlgoLinePoint", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, GeogebraCommonKernelGeosGeoElement *inputParallel) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_set_point_(self, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_set_inputParallel_(self, inputParallel);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_set_line_(self, [self createLineWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), inputParallel } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->line_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_compute(self);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(self->line_)) setLabelWithNSString:label];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *self) {
  GeogebraCommonKernelMatrixCoords *v = [self getDirection];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setUndefined];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setCoordWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[v normalize]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint)
