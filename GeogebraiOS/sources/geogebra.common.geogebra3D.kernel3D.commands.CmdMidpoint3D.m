//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdMidpoint3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdMidpoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdMidpoint.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)process1WithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)arg {
  if (([arg isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]]) && !([arg isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]])) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) CenterQuadricWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(arg, [GeogebraCommonKernelKernelNDGeoQuadricND class])], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super process1WithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElement:arg];
}

- (IOSObjectArray *)segmentWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) MidpointWithNSString:label withGeogebraCommonKernelKernelNDGeoSegmentND:segment], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super segmentWithNSString:label withGeogebraCommonKernelKernelNDGeoSegmentND:segment];
}

- (IOSObjectArray *)conicWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) CenterWithNSString:label withGeogebraCommonKernelKernelNDGeoConicND:conic], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super conicWithNSString:label withGeogebraCommonKernelKernelNDGeoConicND:conic];
}

- (IOSObjectArray *)twoPointsWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) MidpointWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super twoPointsWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdMidpoint3D", NULL, 0x1, NULL, NULL },
    { "process1WithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElement:", "process1", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
    { "segmentWithNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:", "segment", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "conicWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "conic", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "twoPointsWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "twoPoints", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D = { 2, "CmdMidpoint3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdMidpoint_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D)
