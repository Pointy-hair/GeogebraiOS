//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/EuclidianOptionsModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/gui/dialog/options/model/EuclidianOptionsModel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonEuclidianEuclidianView *view_;
  id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, view_, GeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel, listener_, id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>)

@interface GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener : NSObject
@end

__attribute__((unused)) static void GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
     withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener:(id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>)listener {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(self, app, view, listener);
  return self;
}

- (void)applyBackgroundColor {
  if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setBackgroundWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:1]];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setBackgroundWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:2]];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setBackgroundWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) getEuclidianBackgroundWithInt:3]];
  }
  else {
    [view_ setBackgroundWithGeogebraCommonAwtGColor:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
  }
}

- (void)applyBackgroundColorWithInt:(jint)viewIdx
        withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  if (viewIdx == 1 || viewIdx == 2 || viewIdx == 3) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getEuclidianWithInt:viewIdx])) setBackgroundWithGeogebraCommonAwtGColor:color];
  }
  else {
    [view_ setBackgroundWithGeogebraCommonAwtGColor:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon]];
  }
}

- (void)applyAxesColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)col {
  if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesColorWithGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesColorWithGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesColorWithGeogebraCommonAwtGColor:col];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxesColorWithGeogebraCommonAwtGColor:col];
  }
}

- (void)applyGridColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)col {
  if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridColorWithGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridColorWithGeogebraCommonAwtGColor:col];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridColorWithGeogebraCommonAwtGColor:col];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridColorWithGeogebraCommonAwtGColor:col];
  }
}

- (void)applyTooltipModeWithInt:(jint)mode {
  if (mode == 0) {
    mode = GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON;
  }
  else if (mode == 1) {
    mode = GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC;
  }
  else if (mode == 2) {
    mode = GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_OFF;
  }
  if ([view_ isKindOfClass:[GeogebraCommonEuclidianEuclidianView class]]) {
    if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAllowToolTipsWithInt:mode];
    }
    else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAllowToolTipsWithInt:mode];
    }
    else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
      [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAllowToolTipsWithInt:mode];
    }
    else {
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk((view_))) setAllowToolTipsWithInt:mode];
    }
  }
}

- (void)showAxesWithBoolean:(jboolean)value {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setShowAxesWithBoolean:value withBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setShowAxesWithBoolean:value withBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setShowAxesWithBoolean:value];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesWithBoolean:value withBoolean:YES];
  }
}

- (void)applyBoldAxesWithBoolean:(jboolean)isBold
                     withBoolean:(jboolean)isVisible {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setBoldAxesWithBoolean:isBold];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setBoldAxesWithBoolean:isBold];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setBoldAxesWithBoolean:isBold];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setBoldAxesWithBoolean:isBold];
  }
}

- (void)showGridWithBoolean:(jboolean)value {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) showGridWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) showGridWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) showGridWithBoolean:value];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) showGridWithBoolean:value];
  }
}

- (void)applyBoldGridWithBoolean:(jboolean)value {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridIsBoldWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridIsBoldWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridIsBoldWithBoolean:value];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridIsBoldWithBoolean:value];
  }
}

- (void)applyMouseCoordsWithBoolean:(jboolean)value {
  if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAllowShowMouseCoordsWithBoolean:value];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAllowShowMouseCoordsWithBoolean:value];
  }
}

- (void)appyGridTypeWithInt:(jint)type {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridTypeWithInt:type];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridTypeWithInt:type];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridTypeWithInt:type];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridTypeWithInt:type];
  }
}

- (void)appyAxesStyleWithInt:(jint)style {
  if (view_ == [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1]) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAxesLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAxesLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAxesLineStyleWithInt:style];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAxesLineStyleWithInt:style];
  }
}

- (void)appyGridStyleWithInt:(jint)style {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setGridLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setGridLineStyleWithInt:style];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setGridLineStyleWithInt:style];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setGridLineStyleWithInt:style];
  }
}

- (void)appyGridManualTickWithBoolean:(jboolean)value {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setAutomaticGridDistanceWithBoolean:!value withBoolean:YES];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setAutomaticGridDistanceWithBoolean:!value];
  }
}

- (void)applyAxesRatioWithDouble:(jdouble)xval
                      withDouble:(jdouble)yval {
  if (!(JavaLangDouble_isInfiniteWithDouble_(xval) || JavaLangDouble_isNaNWithDouble_(xval) || JavaLangDouble_isInfiniteWithDouble_(yval) || JavaLangDouble_isNaNWithDouble_(yval))) {
    [view_ setCoordSystemWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXZero] withDouble:[view_ getYZero] withDouble:[view_ getXscale] withDouble:[view_ getXscale] * xval / yval];
  }
}

- (void)applyLockRatioWithJavaLangDouble:(JavaLangDouble *)value {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setLockedAxesRatioWithJavaLangDouble:value];
  [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) enableAxesRatioWithBoolean:[view_ isZoomable] && ![view_ isLockedAxesRatio]];
}

- (void)applyMinMaxWithNSString:(NSString *)text
withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum:(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *)type {
  id<GeogebraCommonKernelArithmeticNumberValue> minMax = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) evaluateToNumericWithNSString:text withBoolean:NO];
  if (minMax == nil) {
    [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) setMinMaxTextWithNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXminObject])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getXmaxObject])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getYminObject])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()] withNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([view_ getYmaxObject])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()]];
  }
  else {
    switch ([type ordinal]) {
      case GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_maxX:
      if (view_ == [app_ getEuclidianView1]) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_maxY:
      if (view_ == [app_ getEuclidianView1]) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_minX:
      if (view_ == [app_ getEuclidianView1]) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      case GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxType_minY:
      if (view_ == [app_ getEuclidianView1]) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:1])) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [app_ getEuclidianView2WithInt:1] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else if ([app_ hasEuclidianView3D] && [app_ getEuclidianView3D] == view_) {
        [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:3])) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax withBoolean:YES];
      }
      else {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:minMax];
      }
      break;
      default:
      break;
    }
    [view_ setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXminObject]];
    [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) enableAxesRatioWithBoolean:([view_ isZoomable] && ![view_ isLockedAxesRatio])];
    [view_ updateBoundsWithBoolean:YES];
  }
}

- (void)fillTooltipCombo {
  IOSObjectArray *tooltipItems = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"On"], [app_ getPlainWithNSString:@"Automatic"], [app_ getPlainWithNSString:@"Off"] } count:3 type:NSString_class_()];
  {
    IOSObjectArray *a__ = tooltipItems;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addTooltipItemWithNSString:item];
    }
  }
}

- (void)updateProperties {
  [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) updateAxesWithGeogebraCommonAwtGColor:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesColor] withBoolean:[view_ getShowXaxis] && [view_ getShowYaxis] withBoolean:[view_ areAxesBold]];
  [listener_ updateGridWithGeogebraCommonAwtGColor:[view_ getGridColor] withBoolean:[view_ getShowGrid] withBoolean:[view_ getGridIsBold] withInt:[view_ getGridType]];
  [listener_ updateBackgroundColorWithGeogebraCommonAwtGColor:[self getBackgroundColor]];
  if ([view_ isKindOfClass:[GeogebraCommonEuclidianEuclidianView class]]) {
    jint ind = [(view_) getAllowToolTips];
    jint idx = -1;
    if (ind == GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_ON) {
      idx = 0;
    }
    else if (ind == GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC) {
      idx = 1;
    }
    else if (ind == GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_OFF) {
      idx = 2;
    }
    [listener_ selectTooltipTypeWithInt:idx];
  }
  [listener_ showMouseCoordsWithBoolean:[view_ getAllowShowMouseCoords]];
  [listener_ enableAxesRatioWithBoolean:[view_ isZoomable] && ![view_ isLockedAxesRatio]];
  [listener_ enableLockWithBoolean:[view_ isZoomable]];
  [listener_ updateBounds];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(GeogebraCommonPluginEuclidianStyleConstants_get_lineStyleOptions_()))->size_; i++) {
    if (GeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(NO, [view_ getAxesLineStyle]) == [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(GeogebraCommonPluginEuclidianStyleConstants_get_lineStyleOptions_(), i))) intValue]) {
      [listener_ selectAxesStyleWithInt:i];
      break;
    }
  }
  [listener_ selectGridStyleWithInt:[view_ getGridLineStyle]];
  [listener_ updateGridTicksWithBoolean:[view_ isAutomaticGridDistance] withDoubleArray:[view_ getGridDistances] withInt:[view_ getGridType]];
  [listener_ updateConsProtocolPanelWithBoolean:[((GeogebraCommonMainApp *) nil_chk(app_)) showConsProtNavigation]];
}

+ (jint)getAxesStyleLength {
  return GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_getAxesStyleLength();
}

- (void)fillGridTypeCombo {
  IOSObjectArray *gridTypes = [IOSObjectArray arrayWithLength:3 type:NSString_class_()];
  IOSObjectArray_Set(gridTypes, GeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN, [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"Cartesian"]);
  IOSObjectArray_Set(gridTypes, GeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC, [app_ getMenuWithNSString:@"Isometric"]);
  IOSObjectArray_Set(gridTypes, GeogebraCommonEuclidianEuclidianView_GRID_POLAR, [app_ getMenuWithNSString:@"Polar"]);
  {
    IOSObjectArray *a__ = gridTypes;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addGridTypeItemWithNSString:item];
    }
  }
}

- (void)fillAngleOptions {
  IOSObjectArray *angleOptions = [IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", GeogebraCommonUtilUnicode_get_PI_STRING_(), @"/12"), JreStrcat("$$", GeogebraCommonUtilUnicode_get_PI_STRING_(), @"/6"), JreStrcat("$$", GeogebraCommonUtilUnicode_get_PI_STRING_(), @"/4"), JreStrcat("$$", GeogebraCommonUtilUnicode_get_PI_STRING_(), @"/3"), JreStrcat("$$", GeogebraCommonUtilUnicode_get_PI_STRING_(), @"/2") } count:5 type:NSString_class_()];
  {
    IOSObjectArray *a__ = angleOptions;
    NSString * const *b__ = a__->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *item = *b__++;
      [((id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener>) nil_chk(listener_)) addAngleOptionItemWithNSString:item];
    }
  }
  ;
}

- (void)applyGridTicksWithDouble:(jdouble)value
                         withInt:(jint)idx {
  if (value > 0) {
    IOSDoubleArray *ticks = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridDistances];
    *IOSDoubleArray_GetRef(nil_chk(ticks), idx) = value;
    [view_ setGridDistancesWithDoubleArray:ticks];
  }
}

- (void)applyGridTickAngleWithInt:(jint)value {
  if (value >= 0) {
    IOSDoubleArray *ticks = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridDistances];
    if (value == 4) value = 5;
    *IOSDoubleArray_GetRef(nil_chk(ticks), 2) = (value + 1) * JavaLangMath_PI / 12;
    [view_ setGridDistancesWithDoubleArray:ticks];
  }
}

- (GeogebraCommonAwtGColor *)getAxesColor {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getAxesColor];
}

- (GeogebraCommonAwtGColor *)getGridColor {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getGridColor];
}

- (GeogebraCommonAwtGColor *)getBackgroundColor {
  return [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBackgroundCommon];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(view_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonEuclidianEuclidianView:withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener:", "EuclidianOptionsModel", NULL, 0x1, NULL, NULL },
    { "applyBackgroundColor", NULL, "V", 0x1, NULL, NULL },
    { "applyBackgroundColorWithInt:withGeogebraCommonAwtGColor:", "applyBackgroundColor", "V", 0x1, NULL, NULL },
    { "applyAxesColorWithGeogebraCommonAwtGColor:", "applyAxesColor", "V", 0x1, NULL, NULL },
    { "applyGridColorWithGeogebraCommonAwtGColor:", "applyGridColor", "V", 0x1, NULL, NULL },
    { "applyTooltipModeWithInt:", "applyTooltipMode", "V", 0x1, NULL, NULL },
    { "showAxesWithBoolean:", "showAxes", "V", 0x1, NULL, NULL },
    { "applyBoldAxesWithBoolean:withBoolean:", "applyBoldAxes", "V", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "V", 0x1, NULL, NULL },
    { "applyBoldGridWithBoolean:", "applyBoldGrid", "V", 0x1, NULL, NULL },
    { "applyMouseCoordsWithBoolean:", "applyMouseCoords", "V", 0x1, NULL, NULL },
    { "appyGridTypeWithInt:", "appyGridType", "V", 0x1, NULL, NULL },
    { "appyAxesStyleWithInt:", "appyAxesStyle", "V", 0x1, NULL, NULL },
    { "appyGridStyleWithInt:", "appyGridStyle", "V", 0x1, NULL, NULL },
    { "appyGridManualTickWithBoolean:", "appyGridManualTick", "V", 0x1, NULL, NULL },
    { "applyAxesRatioWithDouble:withDouble:", "applyAxesRatio", "V", 0x1, NULL, NULL },
    { "applyLockRatioWithJavaLangDouble:", "applyLockRatio", "V", 0x1, NULL, NULL },
    { "applyMinMaxWithNSString:withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum:", "applyMinMax", "V", 0x1, NULL, NULL },
    { "fillTooltipCombo", NULL, "V", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getAxesStyleLength", NULL, "I", 0x9, NULL, NULL },
    { "fillGridTypeCombo", NULL, "V", 0x1, NULL, NULL },
    { "fillAngleOptions", NULL, "V", 0x1, NULL, NULL },
    { "applyGridTicksWithDouble:withInt:", "applyGridTicks", "V", 0x1, NULL, NULL },
    { "applyGridTickAngleWithInt:", "applyGridTickAngle", "V", 0x1, NULL, NULL },
    { "getAxesColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getGridColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getBackgroundColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_AXES_STYLE_COUNT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MAX_AXES_STYLE_COUNT },
    { "X_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_X_AXIS },
    { "Y_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_Y_AXIS },
    { "Z_AXIS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_Z_AXIS },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$IEuclidianOptionsListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$IEuclidianOptionsListener;", "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel = { 2, "EuclidianOptionsModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 28, methods, 7, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *self, GeogebraCommonMainApp *app, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener) {
  NSObject_init(self);
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_set_app_(self, app);
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_set_view_(self, view);
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_set_listener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(GeogebraCommonMainApp *app, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener> listener) {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel *self = [GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel alloc];
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener_(self, app, view, listener);
  return self;
}

jint GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_getAxesStyleLength() {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_initialize();
  return GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MAX_AXES_STYLE_COUNT;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel)

@implementation GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getEuclidianBackgroundWithInt:", "getEuclidianBackground", "Lgeogebra.common.awt.GColor;", 0x401, NULL, NULL },
    { "enableAxesRatioWithBoolean:", "enableAxesRatio", "V", 0x401, NULL, NULL },
    { "setMinMaxTextWithNSString:withNSString:withNSString:withNSString:", "setMinMaxText", "V", 0x401, NULL, NULL },
    { "addTooltipItemWithNSString:", "addTooltipItem", "V", 0x401, NULL, NULL },
    { "addGridTypeItemWithNSString:", "addGridTypeItem", "V", 0x401, NULL, NULL },
    { "updateAxesWithGeogebraCommonAwtGColor:withBoolean:withBoolean:", "updateAxes", "V", 0x401, NULL, NULL },
    { "updateBackgroundColorWithGeogebraCommonAwtGColor:", "updateBackgroundColor", "V", 0x401, NULL, NULL },
    { "updateGridWithGeogebraCommonAwtGColor:withBoolean:withBoolean:withInt:", "updateGrid", "V", 0x401, NULL, NULL },
    { "selectTooltipTypeWithInt:", "selectTooltipType", "V", 0x401, NULL, NULL },
    { "updateConsProtocolPanelWithBoolean:", "updateConsProtocolPanel", "V", 0x401, NULL, NULL },
    { "updateBounds", NULL, "V", 0x401, NULL, NULL },
    { "showMouseCoordsWithBoolean:", "showMouseCoords", "V", 0x401, NULL, NULL },
    { "selectAxesStyleWithInt:", "selectAxesStyle", "V", 0x401, NULL, NULL },
    { "updateGridTicksWithBoolean:withDoubleArray:withInt:", "updateGridTicks", "V", 0x401, NULL, NULL },
    { "enableLockWithBoolean:", "enableLock", "V", 0x401, NULL, NULL },
    { "selectGridStyleWithInt:", "selectGridStyle", "V", 0x401, NULL, NULL },
    { "addAngleOptionItemWithNSString:", "addAngleOptionItem", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener = { 2, "IEuclidianOptionsListener", "geogebra.common.gui.dialog.options.model", "EuclidianOptionsModel", 0x609, 17, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_IEuclidianOptionsListener)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)

GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_[4];

@implementation GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values() {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_ count:4 type:GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values();
}

+ (GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *e = GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum class]) {
    GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minX = new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"minX", 0);
    GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxX = new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"maxX", 1);
    GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minY = new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"minY", 2);
    GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxY = new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(@"maxY", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "minX", "minX", 0x4019, "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minX, NULL,  },
    { "maxX", "maxX", 0x4019, "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxX, NULL,  },
    { "minY", "minY", 0x4019, "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_minY, NULL,  },
    { "maxY", "maxY", 0x4019, "Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;", &GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_maxY, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.gui.dialog.options.model.EuclidianOptionsModel$MinMaxType;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum = { 2, "MinMaxType", "geogebra.common.gui.dialog.options.model", "EuclidianOptionsModel", 0x4019, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/gui/dialog/options/model/EuclidianOptionsModel$MinMaxType;>;" };
  return &_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum;
}

@end

void GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *new_GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum *self = [GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum alloc];
  GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelEuclidianOptionsModel_MinMaxTypeEnum)
