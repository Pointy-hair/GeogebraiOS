//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/BoundaryOp.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/BoundaryNodeRule.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateArrays.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/MultiPoint.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/operation/BoundaryOp.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@interface ComVividsolutionsJtsOperationBoundaryOp () {
 @public
  ComVividsolutionsJtsGeomGeometry *geom_;
  ComVividsolutionsJtsGeomGeometryFactory *geomFact_;
  id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> bnRule_;
  id<JavaUtilMap> endpointMap_;
}

- (ComVividsolutionsJtsGeomMultiPoint *)getEmptyMultiPoint;

- (ComVividsolutionsJtsGeomGeometry *)boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString:(ComVividsolutionsJtsGeomMultiLineString *)mLine;

- (IOSObjectArray *)computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString:(ComVividsolutionsJtsGeomMultiLineString *)mLine;

- (void)addEndpointWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt;

- (ComVividsolutionsJtsGeomGeometry *)boundaryLineStringWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBoundaryOp, geom_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBoundaryOp, geomFact_, ComVividsolutionsJtsGeomGeometryFactory *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBoundaryOp, bnRule_, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationBoundaryOp, endpointMap_, id<JavaUtilMap>)

__attribute__((unused)) static ComVividsolutionsJtsGeomMultiPoint *ComVividsolutionsJtsOperationBoundaryOp_getEmptyMultiPoint(ComVividsolutionsJtsOperationBoundaryOp *self);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationBoundaryOp_boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomMultiLineString *mLine);

__attribute__((unused)) static IOSObjectArray *ComVividsolutionsJtsOperationBoundaryOp_computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomMultiLineString *mLine);

__attribute__((unused)) static void ComVividsolutionsJtsOperationBoundaryOp_addEndpointWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomCoordinate *pt);

__attribute__((unused)) static ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationBoundaryOp_boundaryLineStringWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomLineString *line);

@implementation ComVividsolutionsJtsOperationBoundaryOp

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom {
  ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)geom
       withComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)bnRule {
  ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, geom, bnRule);
  return self;
}

- (ComVividsolutionsJtsGeomGeometry *)getBoundary {
  if ([geom_ isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) return ComVividsolutionsJtsOperationBoundaryOp_boundaryLineStringWithComVividsolutionsJtsGeomLineString_(self, (ComVividsolutionsJtsGeomLineString *) check_class_cast(geom_, [ComVividsolutionsJtsGeomLineString class]));
  if ([geom_ isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]]) return ComVividsolutionsJtsOperationBoundaryOp_boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString_(self, (ComVividsolutionsJtsGeomMultiLineString *) check_class_cast(geom_, [ComVividsolutionsJtsGeomMultiLineString class]));
  return [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom_)) getBoundary];
}

- (ComVividsolutionsJtsGeomMultiPoint *)getEmptyMultiPoint {
  return ComVividsolutionsJtsOperationBoundaryOp_getEmptyMultiPoint(self);
}

- (ComVividsolutionsJtsGeomGeometry *)boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString:(ComVividsolutionsJtsGeomMultiLineString *)mLine {
  return ComVividsolutionsJtsOperationBoundaryOp_boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString_(self, mLine);
}

- (IOSObjectArray *)computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString:(ComVividsolutionsJtsGeomMultiLineString *)mLine {
  return ComVividsolutionsJtsOperationBoundaryOp_computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString_(self, mLine);
}

- (void)addEndpointWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  ComVividsolutionsJtsOperationBoundaryOp_addEndpointWithComVividsolutionsJtsGeomCoordinate_(self, pt);
}

- (ComVividsolutionsJtsGeomGeometry *)boundaryLineStringWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line {
  return ComVividsolutionsJtsOperationBoundaryOp_boundaryLineStringWithComVividsolutionsJtsGeomLineString_(self, line);
}

- (void)dealloc {
  RELEASE_(geom_);
  RELEASE_(geomFact_);
  RELEASE_(bnRule_);
  RELEASE_(endpointMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomGeometry:", "BoundaryOp", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsAlgorithmBoundaryNodeRule:", "BoundaryOp", NULL, 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "getEmptyMultiPoint", NULL, "Lcom.vividsolutions.jts.geom.MultiPoint;", 0x2, NULL, NULL },
    { "boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString:", "boundaryMultiLineString", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
    { "computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString:", "computeBoundaryCoordinates", "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x2, NULL, NULL },
    { "addEndpointWithComVividsolutionsJtsGeomCoordinate:", "addEndpoint", "V", 0x2, NULL, NULL },
    { "boundaryLineStringWithComVividsolutionsJtsGeomLineString:", "boundaryLineString", "Lcom.vividsolutions.jts.geom.Geometry;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "geomFact_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
    { "bnRule_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.BoundaryNodeRule;", NULL, NULL,  },
    { "endpointMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationBoundaryOp = { 2, "BoundaryOp", "com.vividsolutions.jts.operation", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationBoundaryOp;
}

@end

void ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, geom, ComVividsolutionsJtsAlgorithmBoundaryNodeRule_get_MOD2_BOUNDARY_RULE_());
}

ComVividsolutionsJtsOperationBoundaryOp *new_ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomGeometry *geom) {
  ComVividsolutionsJtsOperationBoundaryOp *self = [ComVividsolutionsJtsOperationBoundaryOp alloc];
  ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_(self, geom);
  return self;
}

void ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomGeometry *geom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> bnRule) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationBoundaryOp_set_geom_(self, geom);
  ComVividsolutionsJtsOperationBoundaryOp_set_geomFact_(self, [((ComVividsolutionsJtsGeomGeometry *) nil_chk(geom)) getFactory]);
  ComVividsolutionsJtsOperationBoundaryOp_set_bnRule_(self, bnRule);
}

ComVividsolutionsJtsOperationBoundaryOp *new_ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsGeomGeometry *geom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> bnRule) {
  ComVividsolutionsJtsOperationBoundaryOp *self = [ComVividsolutionsJtsOperationBoundaryOp alloc];
  ComVividsolutionsJtsOperationBoundaryOp_initWithComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, geom, bnRule);
  return self;
}

ComVividsolutionsJtsGeomMultiPoint *ComVividsolutionsJtsOperationBoundaryOp_getEmptyMultiPoint(ComVividsolutionsJtsOperationBoundaryOp *self) {
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) createMultiPointWithComVividsolutionsJtsGeomCoordinateSequence:nil];
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationBoundaryOp_boundaryMultiLineStringWithComVividsolutionsJtsGeomMultiLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomMultiLineString *mLine) {
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->geom_)) isEmpty]) {
    return ComVividsolutionsJtsOperationBoundaryOp_getEmptyMultiPoint(self);
  }
  IOSObjectArray *bdyPts = ComVividsolutionsJtsOperationBoundaryOp_computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString_(self, mLine);
  if (((IOSObjectArray *) nil_chk(bdyPts))->size_ == 1) {
    return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) createPointWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(bdyPts, 0)];
  }
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) createMultiPointWithComVividsolutionsJtsGeomCoordinateArray:bdyPts];
}

IOSObjectArray *ComVividsolutionsJtsOperationBoundaryOp_computeBoundaryCoordinatesWithComVividsolutionsJtsGeomMultiLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomMultiLineString *mLine) {
  id<JavaUtilList> bdyPts = [new_JavaUtilArrayList_init() autorelease];
  ComVividsolutionsJtsOperationBoundaryOp_setAndConsume_endpointMap_(self, new_JavaUtilTreeMap_init());
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiLineString *) nil_chk(mLine)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast([mLine getGeometryNWithInt:i], [ComVividsolutionsJtsGeomLineString class]);
    if ([((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getNumPoints] == 0) continue;
    ComVividsolutionsJtsOperationBoundaryOp_addEndpointWithComVividsolutionsJtsGeomCoordinate_(self, [line getCoordinateNWithInt:0]);
    ComVividsolutionsJtsOperationBoundaryOp_addEndpointWithComVividsolutionsJtsGeomCoordinate_(self, [line getCoordinateNWithInt:[line getNumPoints] - 1]);
  }
  for (id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([self->endpointMap_ entrySet])) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) check_protocol_cast([it next], @protocol(JavaUtilMap_Entry));
    ComVividsolutionsJtsOperationCounter *counter = (ComVividsolutionsJtsOperationCounter *) check_class_cast([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [ComVividsolutionsJtsOperationCounter class]);
    jint valence = ((ComVividsolutionsJtsOperationCounter *) nil_chk(counter))->count_;
    if ([((id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>) nil_chk(self->bnRule_)) isInBoundaryWithInt:valence]) {
      [bdyPts addWithId:[entry_ getKey]];
    }
  }
  return ComVividsolutionsJtsGeomCoordinateArrays_toCoordinateArrayWithJavaUtilCollection_(bdyPts);
}

void ComVividsolutionsJtsOperationBoundaryOp_addEndpointWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomCoordinate *pt) {
  ComVividsolutionsJtsOperationCounter *counter = (ComVividsolutionsJtsOperationCounter *) check_class_cast([((id<JavaUtilMap>) nil_chk(self->endpointMap_)) getWithId:pt], [ComVividsolutionsJtsOperationCounter class]);
  if (counter == nil) {
    counter = [new_ComVividsolutionsJtsOperationCounter_init() autorelease];
    [self->endpointMap_ putWithId:pt withId:counter];
  }
  ((ComVividsolutionsJtsOperationCounter *) nil_chk(counter))->count_++;
}

ComVividsolutionsJtsGeomGeometry *ComVividsolutionsJtsOperationBoundaryOp_boundaryLineStringWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsOperationBoundaryOp *self, ComVividsolutionsJtsGeomLineString *line) {
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(self->geom_)) isEmpty]) {
    return ComVividsolutionsJtsOperationBoundaryOp_getEmptyMultiPoint(self);
  }
  if ([((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) isClosed]) {
    jboolean closedEndpointOnBoundary = [((id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>) nil_chk(self->bnRule_)) isInBoundaryWithInt:2];
    if (closedEndpointOnBoundary) {
      return [line getStartPoint];
    }
    else {
      return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) createMultiPointWithComVividsolutionsJtsGeomCoordinateArray:nil];
    }
  }
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(self->geomFact_)) createMultiPointWithComVividsolutionsJtsGeomPointArray:[IOSObjectArray arrayWithObjects:(id[]){ [line getStartPoint], [line getEndPoint] } count:2 type:ComVividsolutionsJtsGeomPoint_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationBoundaryOp)

@implementation ComVividsolutionsJtsOperationCounter

- (instancetype)init {
  ComVividsolutionsJtsOperationCounter_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "count_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationCounter = { 2, "Counter", "com.vividsolutions.jts.operation", NULL, 0x0, 1, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationCounter;
}

@end

void ComVividsolutionsJtsOperationCounter_init(ComVividsolutionsJtsOperationCounter *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsOperationCounter *new_ComVividsolutionsJtsOperationCounter_init() {
  ComVividsolutionsJtsOperationCounter *self = [ComVividsolutionsJtsOperationCounter alloc];
  ComVividsolutionsJtsOperationCounter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationCounter)
