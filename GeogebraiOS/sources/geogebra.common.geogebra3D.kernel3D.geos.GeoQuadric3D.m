//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D () {
 @public
  GeogebraCommonKernelMatrixCoordMatrix4x4 *eigenMatrix_;
  jdouble detS_;
  jdouble volume_;
  GeogebraCommonKernelMatrixCoordMatrix *tmpMatrix4x2_, *tmpMatrix2x4_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
}

- (void)classifyMidpointQuadricWithBoolean:(jboolean)degenerate;

- (void)ellipsoid;

- (jboolean)checkDefined;

- (void)setEigenMatrixWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)z;

- (GeogebraCommonKernelMatrixCoords *)getDirectionToCenterWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p;

- (void)rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)tm;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, eigenMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix4x2_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix2x4_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, tmpCoords_, GeogebraCommonKernelMatrixCoords *)

static IOSObjectArray *GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, vars3D_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D, vars3D_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, IOSDoubleArray *coeffs);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jboolean degenerate);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelMatrixCoords *p);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelMatrixCoordMatrix4x4 *tm);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                         withDoubleArray:(IOSDoubleArray *)coeffs {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self, c, label, coeffs);
  return self;
}

- (void)setMatrixWithDoubleArray:(IOSDoubleArray *)coeffs {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(self, coeffs);
}

- (void)classifyQuadric {
  [self classifyQuadricWithBoolean:NO];
}

- (void)classifyQuadricWithBoolean:(jboolean)degenerate {
  defined_ = (degenerate || GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(self));
  if (!defined_) return;
  detS_ = IOSDoubleArray_Get(nil_chk(matrix_), 0) * IOSDoubleArray_Get(matrix_, 1) * IOSDoubleArray_Get(matrix_, 2) - IOSDoubleArray_Get(matrix_, 0) * IOSDoubleArray_Get(matrix_, 6) * IOSDoubleArray_Get(matrix_, 6) - IOSDoubleArray_Get(matrix_, 1) * IOSDoubleArray_Get(matrix_, 5) * IOSDoubleArray_Get(matrix_, 5) - IOSDoubleArray_Get(matrix_, 2) * IOSDoubleArray_Get(matrix_, 4) * IOSDoubleArray_Get(matrix_, 4) + 2 * IOSDoubleArray_Get(matrix_, 4) * IOSDoubleArray_Get(matrix_, 5) * IOSDoubleArray_Get(matrix_, 6);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(detS_)) {
    type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
  else {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(self, degenerate);
  }
}

- (void)classifyMidpointQuadricWithBoolean:(jboolean)degenerate {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(self, degenerate);
}

- (void)ellipsoid {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(self);
}

- (jboolean)checkDefined {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(self);
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *)quadric {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, quadric);
  return self;
}

- (GeogebraCommonKernelMatrixCoords *)getMidpointND {
  return [self getMidpoint3D];
}

- (void)setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)M
                                                   withDouble:(jdouble)r {
  [super setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:M withDouble:r];
  volume_ = 4 * JavaLangMath_PI * [self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:1] * [self getHalfAxisWithInt:2] / 3;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 3) = -r * r;
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
  for (jint i = 1; i <= 3; i++) {
    [eigenMatrix_ setWithInt:i withInt:i withDouble:[self getHalfAxisWithInt:i - 1]];
  }
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                 withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  [self setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(M)) getInhomCoordsInD3] withDouble:[M distanceWithGeogebraCommonKernelKernelNDGeoPointND:P]];
}

- (void)setConeWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
              withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)direction
                                               withDouble:(jdouble)angle {
  defined_ = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) isInfinite]);
  jdouble r;
  jdouble c = JavaLangMath_cosWithDouble_(angle);
  jdouble s = JavaLangMath_sinWithDouble_(angle);
  if (c < 0 || s < 0) defined_ = NO;
  else if (GeogebraCommonKernelKernel_isZeroWithDouble_(c)) defined_ = NO;
  else if (GeogebraCommonKernelKernel_isZeroWithDouble_(s)) defined_ = NO;
  else {
    r = s / c;
    [self setConeWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(direction)) getCoordsInD3] withDouble:r];
  }
}

- (void)setConeWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                         withDouble:(jdouble)r {
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) get]];
  IOSObjectArray_Set(nil_chk(eigenvecND_), 2, direction);
  IOSObjectArray *ee = [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) completeOrthonormal];
  IOSObjectArray_Set(eigenvecND_, 0, IOSObjectArray_Get(nil_chk(ee), 0));
  IOSObjectArray_Set(eigenvecND_, 1, IOSObjectArray_Get(ee, 1));
  for (jint i = 0; i < 2; i++) *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = r;
  *IOSDoubleArray_GetRef(nil_chk(halfAxes_), 2) = 1;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = -r * r;
  *IOSDoubleArray_GetRef(diagonal_, 3) = 0;
  [self setMatrixFromEigen];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(halfAxes_, 0), IOSDoubleArray_Get(halfAxes_, 1), 1);
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE;
}

- (void)setCylinderWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                                   withDouble:(jdouble)r {
  defined_ = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(origin, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] && ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) isInfinite]);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(r)) {
    r = 0;
  }
  else if (r < 0) {
    defined_ = NO;
  }
  if (defined_) {
    [self setCylinderWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(origin)) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:direction withDouble:r];
  }
}

- (void)setCylinderWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
                   withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                             withDouble:(jdouble)r {
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) get]];
  IOSObjectArray_Set(nil_chk(eigenvecND_), 2, direction);
  IOSObjectArray *ee = [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) completeOrthonormal];
  IOSObjectArray_Set(eigenvecND_, 0, IOSObjectArray_Get(nil_chk(ee), 0));
  IOSObjectArray_Set(eigenvecND_, 1, IOSObjectArray_Get(ee, 1));
  for (jint i = 0; i < 2; i++) *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = r;
  *IOSDoubleArray_GetRef(nil_chk(halfAxes_), 2) = 1;
  *IOSDoubleArray_GetRef(nil_chk(diagonal_), 0) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 1) = 1;
  *IOSDoubleArray_GetRef(diagonal_, 2) = 0;
  *IOSDoubleArray_GetRef(diagonal_, 3) = -r * r;
  [self setMatrixFromEigen];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, IOSDoubleArray_Get(halfAxes_, 0), IOSDoubleArray_Get(halfAxes_, 1), 1);
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER;
}

- (void)setEigenMatrixWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)z {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self) autorelease];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_QUADRIC();
}

- (NSString *)getTypeString {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return @"Sphere";
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    return @"Cylinder";
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    return @"Cone";
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED:
    default:
    return @"Quadric";
  }
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  toStringMode_ = ((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric))->toStringMode_;
  type_ = quadric->type_;
  for (jint i = 0; i < 10; i++) *IOSDoubleArray_GetRef(nil_chk(matrix_), i) = IOSDoubleArray_Get(quadric->matrix_, i);
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) setWithGeogebraCommonKernelMatrixCoords:[quadric getEigenvec3DWithInt:i]];
    *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) = IOSDoubleArray_Get(quadric->halfAxes_, i);
  }
  for (jint i = 0; i < 4; i++) {
    *IOSDoubleArray_GetRef(nil_chk(diagonal_), i) = IOSDoubleArray_Get(quadric->diagonal_, i);
  }
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk([quadric getMidpoint])) get]];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setWithGeogebraCommonKernelMatrixCoordMatrix:quadric->eigenMatrix_];
  defined_ = quadric->defined_;
  volume_ = quadric->volume_;
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return type_ != GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToValueString = [new_JavaLangStringBuilder_init() autorelease];
  {
    IOSDoubleArray *coeffs;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      [self buildSphereNDStringWithJavaLangStringBuilder:sbToValueString withGeogebraCommonKernelStringTemplate:tpl];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      default:
      coeffs = [IOSDoubleArray arrayWithLength:10];
      *IOSDoubleArray_GetRef(coeffs, 0) = IOSDoubleArray_Get(nil_chk(matrix_), 0);
      *IOSDoubleArray_GetRef(coeffs, 1) = IOSDoubleArray_Get(matrix_, 1);
      *IOSDoubleArray_GetRef(coeffs, 2) = IOSDoubleArray_Get(matrix_, 2);
      *IOSDoubleArray_GetRef(coeffs, 9) = IOSDoubleArray_Get(matrix_, 3);
      *IOSDoubleArray_GetRef(coeffs, 3) = 2 * IOSDoubleArray_Get(matrix_, 4);
      *IOSDoubleArray_GetRef(coeffs, 4) = 2 * IOSDoubleArray_Get(matrix_, 5);
      *IOSDoubleArray_GetRef(coeffs, 5) = 2 * IOSDoubleArray_Get(matrix_, 6);
      *IOSDoubleArray_GetRef(coeffs, 6) = 2 * IOSDoubleArray_Get(matrix_, 7);
      *IOSDoubleArray_GetRef(coeffs, 7) = 2 * IOSDoubleArray_Get(matrix_, 8);
      *IOSDoubleArray_GetRef(coeffs, 8) = 2 * IOSDoubleArray_Get(matrix_, 9);
      return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) buildImplicitEquationWithDoubleArray:coeffs withNSStringArray:GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_ withBoolean:NO withBoolean:YES withBoolean:YES withChar:'=' withGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  return sbToValueString;
}

- (jboolean)isFillable {
  return YES;
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                   withDouble:(jdouble)v {
  GeogebraCommonKernelMatrixCoords *ret = GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3();
  [self evaluatePointWithDouble:u withDouble:v withGeogebraCommonKernelMatrixCoords:ret];
  return ret;
}

- (void)evaluatePointWithDouble:(jdouble)u
                     withDouble:(jdouble)v
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  {
    jdouble v2;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v) withDouble:JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v) withDouble:JavaLangMath_sinWithDouble_(v)];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      v2 = JavaLangMath_absWithDouble_(v);
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) * v2 withDouble:JavaLangMath_sinWithDouble_(u) * v2 withDouble:v];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) setMulPointWithGeogebraCommonKernelMatrixCoordMatrix:eigenMatrix_ withDouble:JavaLangMath_cosWithDouble_(u) withDouble:JavaLangMath_sinWithDouble_(u) withDouble:v];
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT:
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) setWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
      break;
      default:
      GeogebraCommonMainApp_errorWithNSString_(JreStrcat("@$I", self, @" has wrong type : ", type_));
      break;
    }
  }
}

- (GeogebraCommonKernelMatrixCoords *)evaluateNormalWithDouble:(jdouble)u
                                                    withDouble:(jdouble)v {
  GeogebraCommonKernelMatrixCoords *n;
  {
    jdouble r;
    jdouble r2;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(v), 0) autorelease];
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      r = [self getHalfAxisWithInt:0];
      r2 = JavaLangMath_sqrtWithDouble_(1 + r * r);
      if (v < 0) r = -r;
      n = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:1])) mulWithDouble:JavaLangMath_sinWithDouble_(u) / r2])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:0])) mulWithDouble:JavaLangMath_cosWithDouble_(u) / r2])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:2])) mulWithDouble:-r / r2]]];
      return n;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      n = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:1])) mulWithDouble:JavaLangMath_sinWithDouble_(u)])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEigenvec3DWithInt:0])) mulWithDouble:JavaLangMath_cosWithDouble_(u)]];
      return n;
      default:
      return nil;
    }
  }
}

- (jdouble)getMinParameterWithInt:(jint)index {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    switch (index) {
      case 0:
      default:
      return 0;
      case 1:
      return -JavaLangMath_PI / 2;
    }
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    switch (index) {
      case 0:
      default:
      return 0;
      case 1:
      return JavaLangDouble_NEGATIVE_INFINITY;
    }
    default:
    return 0;
  }
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    switch (index) {
      case 0:
      default:
      return 2 * JavaLangMath_PI;
      case 1:
      return JavaLangMath_PI / 2;
    }
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    switch (index) {
      case 0:
      default:
      return 2 * JavaLangMath_PI;
      case 1:
      return JavaLangDouble_POSITIVE_INFINITY;
    }
    default:
    return 0;
  }
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return GeogebraCommonKernelMatrixCoords_get_VZ_();
}

- (jboolean)isRegion {
  return YES;
}

- (void)getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                          withDoubleArray:(IOSDoubleArray *)parameters {
  GeogebraCommonKernelMatrixCoords *eigenCoords = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) solveWithGeogebraCommonKernelMatrixCoords:coords];
  jdouble x = [((GeogebraCommonKernelMatrixCoords *) nil_chk(eigenCoords)) getX];
  jdouble y = [eigenCoords getY];
  jdouble z = [eigenCoords getZ];
  {
    jdouble r;
    switch ([self getType]) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      *IOSDoubleArray_GetRef(nil_chk(parameters), 0) = JavaLangMath_atan2WithDouble_withDouble_(y, x);
      r = JavaLangMath_sqrtWithDouble_(x * x + y * y);
      *IOSDoubleArray_GetRef(parameters, 1) = JavaLangMath_atan2WithDouble_withDouble_(z, r);
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      *IOSDoubleArray_GetRef(nil_chk(parameters), 0) = JavaLangMath_atan2WithDouble_withDouble_(y, x);
      *IOSDoubleArray_GetRef(parameters, 1) = z;
      break;
      default:
      GeogebraCommonMainApp_printStacktraceWithId_(JreStrcat("$I", @"TODO -- type: ", [self getType]));
      break;
    }
  }
}

- (IOSObjectArray *)getNormalProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  [self getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:coords withDoubleArray:tmpDouble2_];
  return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(nil_chk(tmpDouble2_), 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1)], [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2_) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
}

- (IOSObjectArray *)getProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection
                                                           withDouble:(jdouble)t1
                                                           withDouble:(jdouble)t2 {
  return [self getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:t1]]];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)u
                                              withDouble:(jdouble)v {
  return [self evaluatePointWithDouble:u withDouble:v];
}

- (GeogebraCommonKernelMatrixCoords *)getPointInRegionWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  return [self getPointWithDouble:u withDouble:v];
}

- (IOSObjectArray *)getProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)oldCoords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection {
  GeogebraCommonKernelMatrixCoordMatrix *qm = [self getSymetricMatrix];
  if (tmpMatrix4x2_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x2_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  }
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix4x2_)) setVxWithGeogebraCommonKernelMatrixCoords:willingDirection];
  [tmpMatrix4x2_ setOriginWithGeogebraCommonKernelMatrixCoords:willingCoords];
  if (tmpMatrix2x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix2x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(2, 4));
  }
  [tmpMatrix4x2_ transposeCopyWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix2x4_];
  GeogebraCommonKernelMatrixCoordMatrix *sm = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix2x4_)) mulWithGeogebraCommonKernelMatrixCoordMatrix:qm])) mulWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x2_];
  jdouble a = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(sm)) getWithInt:1 withInt:1];
  jdouble b = [sm getWithInt:1 withInt:2];
  jdouble c = [sm getWithInt:2 withInt:2];
  jdouble Delta = b * b - a * c;
  if (Delta >= 0) {
    jdouble t1 = (-b - JavaLangMath_sqrtWithDouble_(Delta)) / a;
    jdouble t2 = (-b + JavaLangMath_sqrtWithDouble_(Delta)) / a;
    return [self getProjectionWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1 withDouble:t2];
  }
  return [self getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:-b / a]]];
}

- (void)getProjectionsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)oldCoords
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
  GeogebraCommonKernelMatrixCoordMatrix *qm = [self getSymetricMatrix];
  if (tmpMatrix4x2_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x2_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  }
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix4x2_)) setVxWithGeogebraCommonKernelMatrixCoords:willingDirection];
  [tmpMatrix4x2_ setOriginWithGeogebraCommonKernelMatrixCoords:willingCoords];
  if (tmpMatrix2x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix2x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(2, 4));
  }
  [tmpMatrix4x2_ transposeCopyWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix2x4_];
  GeogebraCommonKernelMatrixCoordMatrix *sm = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix2x4_)) mulWithGeogebraCommonKernelMatrixCoordMatrix:qm])) mulWithGeogebraCommonKernelMatrixCoordMatrix:tmpMatrix4x2_];
  jdouble a = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(sm)) getWithInt:1 withInt:1];
  jdouble b = [sm getWithInt:1 withInt:2];
  jdouble c = [sm getWithInt:2 withInt:2];
  jdouble Delta = b * b - a * c;
  if (Delta >= 0) {
    jdouble t1 = (-b - JavaLangMath_sqrtWithDouble_(Delta)) / a;
    jdouble t2 = (-b + JavaLangMath_sqrtWithDouble_(Delta)) / a;
    [tmpCoords_ setAddWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setMulWithGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1]];
    [self getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpDouble2_];
    [self checkParametersWithDoubleArray:tmpDouble2_];
    [self evaluatePointWithDouble:IOSDoubleArray_Get(nil_chk(tmpDouble2_), 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1) withGeogebraCommonKernelMatrixCoords:p1];
    [tmpCoords_ setAddWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:[tmpCoords_ setMulWithGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t2]];
    [self getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpDouble2_];
    [self checkParametersWithDoubleArray:tmpDouble2_];
    [self evaluatePointWithDouble:IOSDoubleArray_Get(tmpDouble2_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1) withGeogebraCommonKernelMatrixCoords:p2];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) setWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk([self getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:-b / a]]]), 0)];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(p2)) setUndefined];
  }
}

- (jboolean)checkParametersWithDoubleArray:(IOSDoubleArray *)parameters {
  return YES;
}

- (jboolean)isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  return [self isInRegionWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD3]];
}

- (jboolean)isInRegionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) dotproductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([self getSymetricMatrix])) mulWithGeogebraCommonKernelMatrixCoords:coords]]);
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return NO;
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionToCenterWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithGeogebraCommonKernelMatrixCoords_(self, p);
}

- (void)pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (type_ == GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D] withBoolean:NO];
    [p updateCoords];
    return;
  }
  GeogebraCommonKernelMatrixCoords *willingCoords;
  if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) hasWillingCoords]) {
    willingCoords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([p getWillingCoords])) copyVector];
    [p setWillingCoordsUndefined];
  }
  else {
    willingCoords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD3];
  }
  GeogebraCommonKernelMatrixCoords *willingDirection;
  if ([p hasWillingDirection]) {
    willingDirection = [((GeogebraCommonKernelMatrixCoords *) nil_chk([p getWillingDirection])) copyVector];
    [p setWillingDirectionUndefined];
  }
  else {
    willingDirection = GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithGeogebraCommonKernelMatrixCoords_(self, willingCoords);
  }
  IOSObjectArray *coords = [self getProjectionWithGeogebraCommonKernelMatrixCoords:nil withGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection];
  GeogebraCommonKernelRegionParameters *rp = [p getRegionParameters];
  [((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) setT1WithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(coords), 1))) getWithInt:1]];
  [rp setT2WithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:2]];
  [rp setNormalWithGeogebraCommonKernelMatrixCoords:[self evaluateNormalWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:1] withDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(coords, 1))) getWithInt:2]]];
  [p setCoordsWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(coords, 0) withBoolean:NO];
  [p updateCoords];
}

- (void)regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (type_ == GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D] withBoolean:NO];
    [p updateCoords];
    return;
  }
  GeogebraCommonKernelRegionParameters *rp = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) getRegionParameters];
  GeogebraCommonKernelMatrixCoords *coords = [self getPointInRegionWithDouble:[((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) getT1] withDouble:[rp getT2]];
  [p setCoordsWithGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
  [p updateCoords];
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *m = [self getMidpoint3D];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addInsideWithGeogebraCommonKernelMatrixCoords:v];
  [self setMidpointWithDoubleArray:[m get]];
  GeogebraCommonKernelMatrixCoordMatrix *sm = [self getSymetricMatrix];
  GeogebraCommonKernelMatrixCoordMatrix *tm = GeogebraCommonKernelMatrixCoordMatrix_IdentityWithInt_(4);
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tm)) subToOriginWithGeogebraCommonKernelMatrixCoords:v];
  [self setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(([tm transposeCopy]))) mulWithGeogebraCommonKernelMatrixCoordMatrix:sm])) mulWithGeogebraCommonKernelMatrixCoordMatrix:tm]];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:m];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)tm {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tm);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3])) normalized], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [line getStartInhomCoords], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(eigenMatrix_)) mulInsideWithDouble:-1];
  [eigenMatrix_ addToOriginWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk([eigenMatrix_ getOrigin])) get]];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) mulInsideWithDouble:-1];
  }
  [self setMatrixFromEigen];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *point = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *direction = [((GeogebraCommonKernelMatrixCoords *) nil_chk([line getDirectionInD3])) normalized];
  GeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(mp)) projectLineWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:direction withGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:nil];
  [mp mulInsideWithDouble:-1];
  [mp addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[mp get]];
  for (jint i = 0; i < 3; i++) {
    GeogebraCommonKernelMatrixCoords *v = IOSObjectArray_Get(nil_chk(eigenvecND_), i);
    jdouble a = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
    [v mulInsideWithDouble:-1];
    [v addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) mulWithDouble:a]];
  }
  [self setMatrixFromEigen];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getDirectionInD3])) normalized];
  GeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(mp)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([plane getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  [mp mulInsideWithDouble:-1];
  [mp addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) mulWithDouble:2]];
  [self setMidpointWithDoubleArray:[mp get]];
  for (jint i = 0; i < 3; i++) {
    GeogebraCommonKernelMatrixCoords *v = IOSObjectArray_Get(nil_chk(eigenvecND_), i);
    jdouble a = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
    [v addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:a]];
  }
  [self setMatrixFromEigen];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  GeogebraCommonKernelMatrixCoords *mp = [self getMidpoint3D];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(mp)) mulInsideWithDouble:r];
  [mp addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) mulWithDouble:1 - r]];
  [self setMidpointWithDoubleArray:[mp get]];
  if (r < 0) {
    for (jint i = 0; i < 3; i++) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(eigenvecND_), i))) mulInsideWithDouble:-1];
    }
    r = -r;
  }
  switch ([self getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    *IOSDoubleArray_GetRef(nil_chk(diagonal_), 3) *= r * r;
    for (jint i = 0; i < 3; i++) {
      *IOSDoubleArray_GetRef(nil_chk(halfAxes_), i) *= r;
    }
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    break;
  }
  [self setMatrixFromEigen];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(self, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], [self getHalfAxisWithInt:2]);
  volume_ *= r * r * r;
}

- (jdouble)getVolume {
  switch ([self getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return volume_;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    default:
    return JavaLangDouble_NaN;
  }
}

- (jboolean)hasFiniteVolume {
  switch ([self getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
    return [self isDefined];
    default:
    return NO;
  }
}

- (void)setUndefined {
  [super setUndefined];
  volume_ = JavaLangDouble_NaN;
}

- (void)singlePoint {
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT;
}

- (jboolean)isGeoQuadric {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getXMLtagsMatrixWithJavaLangStringBuilder:sb];
}

- (void)getXMLtagsMatrixWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<matrix"];
  for (jint i = 0; i < 10; i++) [sb appendWithNSString:JreStrcat("$I$DC", @" A", i, @"=\"", IOSDoubleArray_Get(nil_chk(matrix_), i), '"')];
  [sb appendWithNSString:@"/>\n"];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(eigenMatrix_);
  RELEASE_(tmpDouble2_);
  RELEASE_(tmpDouble2bis_);
  RELEASE_(tmpMatrix4x2_);
  RELEASE_(tmpMatrix2x4_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpCoords_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]) {
    JreStrongAssignAndConsume(&GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"x\u00b2", @"y\u00b2", @"z\u00b2", @"x y", @"x z", @"y z", @"x", @"y", @"z" } count:9 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDoubleArray:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "setMatrixWithDoubleArray:", "setMatrix", "V", 0x11, NULL, NULL },
    { "classifyQuadric", NULL, "V", 0x4, NULL, NULL },
    { "classifyQuadricWithBoolean:", "classifyQuadric", "V", 0x1, NULL, NULL },
    { "classifyMidpointQuadricWithBoolean:", "classifyMidpointQuadric", "V", 0x2, NULL, NULL },
    { "ellipsoid", NULL, "V", 0x2, NULL, NULL },
    { "checkDefined", NULL, "Z", 0x12, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D:", "GeoQuadric3D", NULL, 0x1, NULL, NULL },
    { "getMidpointND", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setSphereNDMatrixWithGeogebraCommonKernelMatrixCoords:withDouble:", "setSphereNDMatrix", "V", 0x4, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setConeWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:withDouble:", "setCone", "V", 0x1, NULL, NULL },
    { "setConeWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:", "setCone", "V", 0x1, NULL, NULL },
    { "setCylinderWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelMatrixCoords:withDouble:", "setCylinder", "V", 0x1, NULL, NULL },
    { "setCylinderWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:", "setCylinder", "V", 0x1, NULL, NULL },
    { "setEigenMatrixWithDouble:withDouble:withDouble:", "setEigenMatrix", "V", 0x2, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:withGeogebraCommonKernelMatrixCoords:", "evaluatePoint", "V", 0x1, NULL, NULL },
    { "evaluateNormalWithDouble:withDouble:", "evaluateNormal", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:withDoubleArray:", "getNormalProjectionParameters", "V", 0x4, NULL, NULL },
    { "getNormalProjectionWithGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "getProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointInRegionWithDouble:withDouble:", "getPointInRegion", "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getProjectionWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getProjections", "V", 0x1, NULL, NULL },
    { "checkParametersWithDoubleArray:", "checkParameters", "Z", 0x4, NULL, NULL },
    { "isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithGeogebraCommonKernelMatrixCoords:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "getDirectionToCenterWithGeogebraCommonKernelMatrixCoords:", "getDirectionToCenter", "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "rotate", "V", 0x2, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "getVolume", NULL, "D", 0x1, NULL, NULL },
    { "hasFiniteVolume", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "singlePoint", NULL, "V", 0x14, NULL, NULL },
    { "isGeoQuadric", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLtagsMatrixWithJavaLangStringBuilder:", "getXMLtagsMatrix", "V", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "vars3D_", NULL, 0xa, "[Ljava.lang.String;", &GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_vars3D_, NULL,  },
    { "eigenMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "detS_", NULL, 0x2, "D", NULL, NULL,  },
    { "volume_", NULL, 0x2, "D", NULL, NULL,  },
    { "tmpDouble2_", NULL, 0x4, "[D", NULL, NULL,  },
    { "tmpDouble2bis_", NULL, 0x4, "[D", NULL, NULL,  },
    { "tmpMatrix4x2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpMatrix2x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D = { 2, "GeoQuadric3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 69, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 3);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_set_eigenMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  self->volume_ = JavaLangDouble_NaN;
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpDouble2_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpDouble2bis_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_eigenvecND_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < 3; i++) {
    IOSObjectArray_SetAndConsume(self->eigenvecND_, i, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, i))) setWithInt:i + 1 withDouble:1];
  }
  GeogebraCommonKernelKernelNDGeoQuadricND_setAndConsume_diagonal_(self, [IOSDoubleArray newArrayWithLength:4]);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelConstruction *c, NSString *label, IOSDoubleArray *coeffs) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(self, coeffs);
  [self setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(GeogebraCommonKernelConstruction *c, NSString *label, IOSDoubleArray *coeffs) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_withNSString_withDoubleArray_(self, c, label, coeffs);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setMatrixWithDoubleArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, IOSDoubleArray *coeffs) {
  for (jint i = 0; i < 10; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->matrix_), i) = IOSDoubleArray_Get(nil_chk(coeffs), i);
  }
  [self classifyQuadric];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_classifyMidpointQuadricWithBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jboolean degenerate) {
  jdouble x = (-IOSDoubleArray_Get(nil_chk(self->matrix_), 1) * IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 7) + IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 9) - IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  jdouble y = (-IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 7) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  jdouble z = (-IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 9) + IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 8) + IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 7) + IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 9) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 8) - IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 7)) / self->detS_;
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ x, y, z, 1 } count:4];
  [self setMidpointWithDoubleArray:coords];
  *IOSDoubleArray_GetRef(nil_chk(self->eigenval_), 0) = self->detS_;
  *IOSDoubleArray_GetRef(self->eigenval_, 1) = -IOSDoubleArray_Get(self->matrix_, 0) * IOSDoubleArray_Get(self->matrix_, 1) - IOSDoubleArray_Get(self->matrix_, 1) * IOSDoubleArray_Get(self->matrix_, 2) - IOSDoubleArray_Get(self->matrix_, 2) * IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 4) * IOSDoubleArray_Get(self->matrix_, 4) + IOSDoubleArray_Get(self->matrix_, 5) * IOSDoubleArray_Get(self->matrix_, 5) + IOSDoubleArray_Get(self->matrix_, 6) * IOSDoubleArray_Get(self->matrix_, 6);
  *IOSDoubleArray_GetRef(self->eigenval_, 2) = IOSDoubleArray_Get(self->matrix_, 0) + IOSDoubleArray_Get(self->matrix_, 1) + IOSDoubleArray_Get(self->matrix_, 2);
  *IOSDoubleArray_GetRef(self->eigenval_, 3) = -1;
  jint nRoots = [((GeogebraCommonKernelEquationSolver *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver])) solveCubicWithDoubleArray:self->eigenval_ withDoubleArray:self->eigenval_ withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION];
  if (nRoots == 1) {
    *IOSDoubleArray_GetRef(self->eigenval_, 1) = IOSDoubleArray_Get(self->eigenval_, 0);
    nRoots++;
  }
  if (nRoots == 2) {
    *IOSDoubleArray_GetRef(self->eigenval_, 2) = IOSDoubleArray_Get(self->eigenval_, 1);
  }
  jdouble beta = IOSDoubleArray_Get(self->matrix_, 7) * x + IOSDoubleArray_Get(self->matrix_, 8) * y + IOSDoubleArray_Get(self->matrix_, 9) * z + IOSDoubleArray_Get(self->matrix_, 3);
  if (degenerate || GeogebraCommonKernelKernel_isZeroWithDouble_(beta)) {
    self->type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(self->mu_), 0) = -IOSDoubleArray_Get(self->eigenval_, 0) / beta;
    *IOSDoubleArray_GetRef(self->mu_, 1) = -IOSDoubleArray_Get(self->eigenval_, 1) / beta;
    *IOSDoubleArray_GetRef(self->mu_, 2) = -IOSDoubleArray_Get(self->eigenval_, 2) / beta;
    if (self->detS_ < 0) {
      self->type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
    }
    else {
      if (IOSDoubleArray_Get(self->mu_, 0) > 0 && IOSDoubleArray_Get(self->mu_, 1) > 0 && IOSDoubleArray_Get(self->mu_, 2) > 0) {
        GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(self);
      }
      else {
        [self empty];
      }
    }
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_ellipsoid(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self) {
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->mu_), 0) / IOSDoubleArray_Get(self->mu_, 1), 1.0) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(self->mu_, 0) / IOSDoubleArray_Get(self->mu_, 2), 1.0)) {
    jdouble r = JavaLangMath_sqrtWithDouble_(1.0 / IOSDoubleArray_Get(self->mu_, 0));
    for (jint i = 0; i < 3; i++) {
      *IOSDoubleArray_GetRef(nil_chk(self->halfAxes_), i) = r;
    }
    self->type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE;
    self->linearEccentricity_ = 0.0;
    self->eccentricity_ = 0.0;
    self->volume_ = 4 * JavaLangMath_PI * [self getHalfAxisWithInt:0] * [self getHalfAxisWithInt:1] * [self getHalfAxisWithInt:2] / 3;
    *IOSDoubleArray_GetRef(nil_chk(self->diagonal_), 0) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 1) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 2) = 1;
    *IOSDoubleArray_GetRef(self->diagonal_, 3) = -r * r;
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
    for (jint i = 1; i <= 3; i++) {
      [self->eigenMatrix_ setWithInt:i withInt:i withDouble:[self getHalfAxisWithInt:i - 1]];
    }
  }
  else {
    self->type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_NOT_CLASSIFIED;
  }
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_checkDefined(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self) {
  return YES;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getConstruction]);
  [self setWithGeogebraCommonKernelGeosGeoElement:quadric];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, quadric);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_setEigenMatrixWithDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, jdouble x, jdouble y, jdouble z) {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:[self getMidpoint3D]];
  [self->eigenMatrix_ setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(self->eigenvecND_), 0))) mulWithDouble:x]];
  [self->eigenMatrix_ setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, 1))) mulWithDouble:y]];
  [self->eigenMatrix_ setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->eigenvecND_, 2))) mulWithDouble:z]];
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_getDirectionToCenterWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelMatrixCoords *p) {
  {
    GeogebraCommonKernelMatrixCoords *eigenCoords;
    GeogebraCommonKernelMatrixCoords *eigenDir;
    switch ([self getType]) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE:
      return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getMidpoint3D])) subWithGeogebraCommonKernelMatrixCoords:p];
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      eigenCoords = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) solveWithGeogebraCommonKernelMatrixCoords:p];
      eigenDir = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(eigenCoords)) getX], [eigenCoords getY], 0, 0) autorelease];
      return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self->eigenMatrix_ mulWithGeogebraCommonKernelMatrixCoords:eigenDir])) normalized])) mulWithDouble:-1];
      default:
      return nil;
    }
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_rotateWithGeogebraCommonKernelMatrixCoordMatrix4x4_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *self, GeogebraCommonKernelMatrixCoordMatrix4x4 *tm) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_set_eigenMatrix_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tm)) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:self->eigenMatrix_]);
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->eigenMatrix_)) getOrigin])) get]];
  for (jint i = 0; i < 3; i++) {
    IOSObjectArray_Set(nil_chk(self->eigenvecND_), i, [tm mulWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(self->eigenvecND_, i)]);
  }
  GeogebraCommonKernelMatrixCoordMatrix *tmInv = [tm inverse];
  [self setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmInv)) transposeCopy]))) mulWithGeogebraCommonKernelMatrixCoordMatrix:[self getSymetricMatrix]])) mulWithGeogebraCommonKernelMatrixCoordMatrix:tmInv]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D)
