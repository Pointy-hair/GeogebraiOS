//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/UndoManager.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/UndoManager.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/util/LinkedList.h"
#include "java/util/ListIterator.h"

#define GeogebraCommonKernelUndoManager_MAX_CAPACITY 100

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelUndoManager, MAX_CAPACITY, jint)

__attribute__((unused)) static void GeogebraCommonKernelUndoManager_updateUndoActions(GeogebraCommonKernelUndoManager *self);

@interface GeogebraCommonKernelUndoManager_AppState : NSObject
@end

@implementation GeogebraCommonKernelUndoManager

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelUndoManager_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)processXMLWithNSString:(NSString *)string {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)undo {
  @synchronized(self) {
    if ([self undoPossible]) {
      [((id<JavaUtilListIterator>) nil_chk(iterator_)) previous];
      [self loadUndoInfoWithGeogebraCommonKernelUndoManager_AppState:[iterator_ previous]];
      [iterator_ next];
      GeogebraCommonKernelUndoManager_updateUndoActions(self);
    }
  }
}

- (void)redo {
  @synchronized(self) {
    if ([self redoPossible]) {
      [self loadUndoInfoWithGeogebraCommonKernelUndoManager_AppState:[((id<JavaUtilListIterator>) nil_chk(iterator_)) next]];
      GeogebraCommonKernelUndoManager_updateUndoActions(self);
    }
  }
}

- (void)updateUndoActions {
  GeogebraCommonKernelUndoManager_updateUndoActions(self);
}

- (id<GeogebraCommonKernelUndoManager_AppState>)getCurrentUndoInfo {
  @synchronized(self) {
    id<GeogebraCommonKernelUndoManager_AppState> ret = [((id<JavaUtilListIterator>) nil_chk(iterator_)) previous];
    [iterator_ next];
    return ret;
  }
}

- (void)storeUndoInfo {
  [self storeUndoInfoWithBoolean:NO];
}

- (void)restoreCurrentUndoInfo {
  @synchronized(self) {
    [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) storeSelectedGeosNames];
    [self loadUndoInfoWithGeogebraCommonKernelUndoManager_AppState:[((id<JavaUtilListIterator>) nil_chk(iterator_)) previous]];
    [iterator_ next];
    GeogebraCommonKernelUndoManager_updateUndoActions(self);
    [((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) recallSelectedGeosNames];
  }
}

- (void)initUndoInfo {
  @synchronized(self) {
    [self clearUndoInfo];
    [self storeUndoInfo];
  }
}

- (jboolean)undoPossible {
  if (![((GeogebraCommonMainApp *) nil_chk(app_)) isUndoActive]) return NO;
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) nextIndex] > 1;
}

- (jboolean)redoPossible {
  if (![((GeogebraCommonMainApp *) nil_chk(app_)) isUndoActive]) return NO;
  return [((id<JavaUtilListIterator>) nil_chk(iterator_)) hasNext];
}

- (void)storeUndoInfoAfterPasteOrAdd {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)storeUndoInfoWithBoolean:(jboolean)refresh {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)loadUndoInfoWithGeogebraCommonKernelUndoManager_AppState:(id<GeogebraCommonKernelUndoManager_AppState>)state {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)clearUndoInfo {
  @synchronized(self) {
    [((JavaUtilLinkedList *) nil_chk(undoInfoList_)) clear];
    GeogebraCommonKernelUndoManager_set_iterator_(self, [undoInfoList_ listIterator]);
  }
}

- (void)pruneStateList {
  id<GeogebraCommonKernelUndoManager_AppState> appState = nil;
  while ([((id<JavaUtilListIterator>) nil_chk(iterator_)) hasNext]) {
    appState = [iterator_ next];
    [iterator_ remove];
    [((id<GeogebraCommonKernelUndoManager_AppState>) nil_chk(appState)) delete__];
  }
  if ([((JavaUtilLinkedList *) nil_chk(undoInfoList_)) size] > GeogebraCommonKernelUndoManager_MAX_CAPACITY) {
    while ([iterator_ hasPrevious]) appState = [iterator_ previous];
    [iterator_ remove];
    [((id<GeogebraCommonKernelUndoManager_AppState>) nil_chk(appState)) delete__];
    while ([iterator_ hasNext]) [iterator_ next];
  }
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(construction_);
  RELEASE_(undoInfoList_);
  RELEASE_(iterator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "UndoManager", NULL, 0x1, NULL, NULL },
    { "processXMLWithNSString:", "processXML", "V", 0x401, "Ljava.lang.Exception;", NULL },
    { "undo", NULL, "V", 0x21, NULL, NULL },
    { "redo", NULL, "V", 0x21, NULL, NULL },
    { "updateUndoActions", NULL, "V", 0x14, NULL, NULL },
    { "getCurrentUndoInfo", NULL, "Lgeogebra.common.kernel.UndoManager$AppState;", 0x31, NULL, NULL },
    { "storeUndoInfo", NULL, "V", 0x1, NULL, NULL },
    { "restoreCurrentUndoInfo", NULL, "V", 0x31, NULL, NULL },
    { "initUndoInfo", NULL, "V", 0x21, NULL, NULL },
    { "undoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "redoPossible", NULL, "Z", 0x1, NULL, NULL },
    { "storeUndoInfoAfterPasteOrAdd", NULL, "V", 0x401, NULL, NULL },
    { "storeUndoInfoWithBoolean:", "storeUndoInfo", "V", 0x401, NULL, NULL },
    { "loadUndoInfoWithGeogebraCommonKernelUndoManager_AppState:", "loadUndoInfo", "V", 0x404, NULL, NULL },
    { "clearUndoInfo", NULL, "V", 0x24, NULL, NULL },
    { "pruneStateList", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_CAPACITY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelUndoManager_MAX_CAPACITY },
    { "app_", NULL, 0x1, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "construction_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "undoInfoList_", NULL, 0x4, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/kernel/UndoManager$AppState;>;",  },
    { "iterator_", NULL, 0x1, "Ljava.util.ListIterator;", NULL, "Ljava/util/ListIterator<Lgeogebra/common/kernel/UndoManager$AppState;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.UndoManager$AppState;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelUndoManager = { 2, "UndoManager", "geogebra.common.kernel", NULL, 0x401, 16, methods, 5, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelUndoManager;
}

@end

void GeogebraCommonKernelUndoManager_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelUndoManager *self, GeogebraCommonKernelConstruction *cons) {
  NSObject_init(self);
  GeogebraCommonKernelUndoManager_set_construction_(self, cons);
  GeogebraCommonKernelUndoManager_set_app_(self, [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getApplication]);
  GeogebraCommonKernelUndoManager_setAndConsume_undoInfoList_(self, new_JavaUtilLinkedList_init());
}

void GeogebraCommonKernelUndoManager_updateUndoActions(GeogebraCommonKernelUndoManager *self) {
  [((GeogebraCommonMainApp *) nil_chk(self->app_)) updateActions];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelUndoManager)

@implementation GeogebraCommonKernelUndoManager_AppState

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "delete__", "delete", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelUndoManager_AppState = { 2, "AppState", "geogebra.common.kernel", "UndoManager", 0x60c, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelUndoManager_AppState;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonKernelUndoManager_AppState)
