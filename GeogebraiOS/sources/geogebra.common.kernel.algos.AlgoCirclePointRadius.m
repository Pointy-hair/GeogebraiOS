//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCirclePointRadius.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "geogebra/common/kernel/algos/AlgoSphereNDPointRadius.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/Localization.h"

@implementation GeogebraCommonKernelAlgosAlgoCirclePointRadius

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, M, r);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                  withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)segment
                                             withBoolean:(jboolean)dummy {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_withBoolean_(self, cons, label, M, segment, dummy);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                  withGeogebraCommonKernelGeosGeoSegment:(GeogebraCommonKernelGeosGeoSegment *)rgeo {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_(self, cons, M, rgeo);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)createSphereNDWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (jint)getRelatedModeID {
  switch ([super getType]) {
    case GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS:
    return GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS;
    default:
    return GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES;
  }
}

- (GeogebraCommonKernelGeosGeoConic *)getCircle {
  return (GeogebraCommonKernelGeosGeoConic *) check_class_cast([self getSphereND], [GeogebraCommonKernelGeosGeoConic class]);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CircleWithCenterAandRadiusB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getM])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getRGeo])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnCirclePointRadiusWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoCirclePointRadius", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoSegment:withBoolean:", "AlgoCirclePointRadius", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoCirclePointRadius", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoSegment:", "AlgoCirclePointRadius", NULL, 0x0, NULL, NULL },
    { "createSphereNDWithGeogebraCommonKernelConstruction:", "createSphereND", "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getCircle", NULL, "Lgeogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCirclePointRadius = { 2, "AlgoCirclePointRadius", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCirclePointRadius;
}

@end

void GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoCirclePointRadius *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, M, r);
}

GeogebraCommonKernelAlgosAlgoCirclePointRadius *new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *self = [GeogebraCommonKernelAlgosAlgoCirclePointRadius alloc];
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, M, r);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_withBoolean_(GeogebraCommonKernelAlgosAlgoCirclePointRadius *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoSegment *segment, jboolean dummy) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_withBoolean_(self, cons, label, M, segment, dummy);
}

GeogebraCommonKernelAlgosAlgoCirclePointRadius *new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoSegment *segment, jboolean dummy) {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *self = [GeogebraCommonKernelAlgosAlgoCirclePointRadius alloc];
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_withBoolean_(self, cons, label, M, segment, dummy);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoCirclePointRadius *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
}

GeogebraCommonKernelAlgosAlgoCirclePointRadius *new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *self = [GeogebraCommonKernelAlgosAlgoCirclePointRadius alloc];
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelAlgosAlgoCirclePointRadius *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoSegment *rgeo) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, M, rgeo);
}

GeogebraCommonKernelAlgosAlgoCirclePointRadius *new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoSegment *rgeo) {
  GeogebraCommonKernelAlgosAlgoCirclePointRadius *self = [GeogebraCommonKernelAlgosAlgoCirclePointRadius alloc];
  GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoSegment_(self, cons, M, rgeo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCirclePointRadius)
