//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdShear.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformShearOrStretch.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdShear.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelCommandsCmdShear ()

- (IOSObjectArray *)ShearWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
 withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)l
withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdShear_ShearWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelCommandsCmdShear *self, NSString *label, GeogebraCommonKernelGeosGeoElement *Q, GeogebraCommonKernelGeosGeoVec3D *l, GeogebraCommonKernelGeosGeoNumeric *num);

@implementation GeogebraCommonKernelCommandsCmdShear

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdShear_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  NSString *label = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel];
  jint n = [c getArgumentNumber];
  IOSObjectArray *arg;
  IOSObjectArray *ret;
  switch (n) {
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if (([IOSObjectArray_Get(nil_chk(arg), 1) isKindOfClass:[GeogebraCommonKernelGeosGeoVec3D class]]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoNumeric]) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isMatrixTransformable] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoFunction] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList]) {
        ret = GeogebraCommonKernelCommandsCmdShear_ShearWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoNumeric_(self, label, IOSObjectArray_Get(arg, 0), (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoVec3D class]), (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoNumeric class]));
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
    if (!([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoVec3D class]])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (IOSObjectArray *)ShearWithNSString:(NSString *)label
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
 withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)l
withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num {
  return GeogebraCommonKernelCommandsCmdShear_ShearWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoNumeric_(self, label, Q, l, num);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdShear", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "ShearWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoNumeric:", "Shear", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdShear = { 2, "CmdShear", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdShear;
}

@end

void GeogebraCommonKernelCommandsCmdShear_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdShear *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdShear *new_GeogebraCommonKernelCommandsCmdShear_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdShear *self = [GeogebraCommonKernelCommandsCmdShear alloc];
  GeogebraCommonKernelCommandsCmdShear_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdShear_ShearWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelCommandsCmdShear *self, NSString *label, GeogebraCommonKernelGeosGeoElement *Q, GeogebraCommonKernelGeosGeoVec3D *l, GeogebraCommonKernelGeosGeoNumeric *num) {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelTransformShearOrStretch_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self->cons_, l, num, YES) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:Q withNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdShear)
