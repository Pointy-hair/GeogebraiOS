//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/AbstractFieldMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractFieldMatrix.h"
#include "org/apache/commons/math/linear/ArrayFieldVector.h"
#include "org/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/FieldMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/FieldVector.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"
#include "org/apache/commons/math/linear/NonSquareMatrixException.h"

@interface OrgApacheCommonsMathLinearAbstractFieldMatrix () {
 @public
  id<OrgApacheCommonsMathField> field_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix, field_, id<OrgApacheCommonsMathField>)

@interface OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 : OrgApacheCommonsMathLinearDefaultFieldMatrixChangingVisitor {
 @public
  OrgApacheCommonsMathLinearAbstractFieldMatrix *this$0_;
  IOSIntArray *val$selectedRows_;
  IOSIntArray *val$selectedColumns_;
}

- (id)visitWithInt:(jint)row
           withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value;

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractFieldMatrix:(OrgApacheCommonsMathLinearAbstractFieldMatrix *)outer$
                                                         withIntArray:(IOSIntArray *)capture$0
                                                         withIntArray:(IOSIntArray *)capture$1
                                 withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1, this$0_, OrgApacheCommonsMathLinearAbstractFieldMatrix *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1, val$selectedRows_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1, val$selectedColumns_, IOSIntArray *)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 *self, OrgApacheCommonsMathLinearAbstractFieldMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1, id<OrgApacheCommonsMathFieldElement> arg$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1, id<OrgApacheCommonsMathFieldElement> arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1)

@interface OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 : OrgApacheCommonsMathLinearDefaultFieldMatrixPreservingVisitor {
 @public
  jint startRow1_;
  jint startColumn1_;
  IOSObjectArray *val$destination_;
}

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn;

- (void)visitWithInt:(jint)row
             withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value;

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)capture$0
                          withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2, val$destination_, IOSObjectArray *)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 *self, IOSObjectArray *capture$0, id<OrgApacheCommonsMathFieldElement> arg$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(IOSObjectArray *capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2)

@interface OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 : OrgApacheCommonsMathLinearDefaultFieldMatrixPreservingVisitor {
 @public
  id<OrgApacheCommonsMathLinearFieldMatrix> val$out_;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value;

- (instancetype)initWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)capture$0
                         withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3, val$out_, id<OrgApacheCommonsMathLinearFieldMatrix>)

__attribute__((unused)) static void OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 *self, id<OrgApacheCommonsMathLinearFieldMatrix> capture$0, id<OrgApacheCommonsMathFieldElement> arg$0);

__attribute__((unused)) static OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(id<OrgApacheCommonsMathLinearFieldMatrix> capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3)

@implementation OrgApacheCommonsMathLinearAbstractFieldMatrix

- (instancetype)init {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(self, field);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)rowDimension
                                          withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rowDimension, columnDimension);
  return self;
}

+ (id<OrgApacheCommonsMathField>)extractFieldWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)d {
  return OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(d);
}

+ (id<OrgApacheCommonsMathField>)extractFieldWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)d {
  return OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray_(d);
}

+ (IOSObjectArray *)buildArrayWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                                    withInt:(jint)rows
                                                    withInt:(jint)columns {
  return OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(field, rows, columns);
}

+ (IOSObjectArray *)buildArrayWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                                    withInt:(jint)length {
  return OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field, length);
}

- (id<OrgApacheCommonsMathField>)getField {
  return field_;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)createMatrixWithInt:(jint)rowDimension
                                                         withInt:(jint)columnDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)copy__ {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)addWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  [self checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) addWithId:[((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getEntryWithInt:row withInt:col]]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)subtractWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  [self checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) subtractWithId:[((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getEntryWithInt:row withInt:col]]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)scalarAddWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) addWithId:d]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)scalarMultiplyWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:rowCount withInt:columnCount];
  for (jint row = 0; row < rowCount; ++row) {
    for (jint col = 0; col < columnCount; ++col) {
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) multiplyWithId:d]];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)multiplyWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  [self checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  jint nRows = [self getRowDimension];
  jint nCols = [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getColumnDimension];
  jint nSum = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:nRows withInt:nCols];
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
      for (jint i = 0; i < nSum; ++i) {
        sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:i])) multiplyWithId:[m getEntryWithInt:i withInt:col]]];
      }
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:row withInt:col withOrgApacheCommonsMathFieldElement:sum];
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)preMultiplyWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  return [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) multiplyWithOrgApacheCommonsMathLinearFieldMatrix:self];
}

- (IOSObjectArray *)getData {
  IOSObjectArray *data = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(field_, [self getRowDimension], [self getColumnDimension]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(data))->size_; ++i) {
    IOSObjectArray *dataI = IOSObjectArray_Get(data, i);
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(dataI))->size_; ++j) {
      IOSObjectArray_Set(dataI, j, [self getEntryWithInt:i withInt:j]);
    }
  }
  return data;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getSubMatrixWithInt:(jint)startRow
                                                         withInt:(jint)endRow
                                                         withInt:(jint)startColumn
                                                         withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  id<OrgApacheCommonsMathLinearFieldMatrix> subMatrix = [self createMatrixWithInt:endRow - startRow + 1 withInt:endColumn - startColumn + 1];
  for (jint i = startRow; i <= endRow; ++i) {
    for (jint j = startColumn; j <= endColumn; ++j) {
      [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(subMatrix)) setEntryWithInt:i - startRow withInt:j - startColumn withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:i withInt:j]];
    }
  }
  return subMatrix;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getSubMatrixWithIntArray:(IOSIntArray *)selectedRows
                                                         withIntArray:(IOSIntArray *)selectedColumns {
  [self checkSubMatrixIndexWithIntArray:selectedRows withIntArray:selectedColumns];
  id<OrgApacheCommonsMathLinearFieldMatrix> subMatrix = [self createMatrixWithInt:((IOSIntArray *) nil_chk(selectedRows))->size_ withInt:((IOSIntArray *) nil_chk(selectedColumns))->size_];
  [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(subMatrix)) walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:[new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(self, selectedRows, selectedColumns, [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero]) autorelease]];
  return subMatrix;
}

- (void)copySubMatrixWithInt:(jint)startRow
                     withInt:(jint)endRow
                     withInt:(jint)startColumn
                     withInt:(jint)endColumn
withOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)destination {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  jint rowsCount = endRow + 1 - startRow;
  jint columnsCount = endColumn + 1 - startColumn;
  if ((((IOSObjectArray *) nil_chk(destination))->size_ < rowsCount) || (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_ < columnsCount)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(destination->size_), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_), JavaLangInteger_valueOfWithInt_(rowsCount), JavaLangInteger_valueOfWithInt_(columnsCount) } count:4 type:NSObject_class_()]);
  }
  [self walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:[new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(destination, [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero]) autorelease] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (void)copySubMatrixWithIntArray:(IOSIntArray *)selectedRows
                     withIntArray:(IOSIntArray *)selectedColumns
withOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)destination {
  [self checkSubMatrixIndexWithIntArray:selectedRows withIntArray:selectedColumns];
  if ((((IOSObjectArray *) nil_chk(destination))->size_ < ((IOSIntArray *) nil_chk(selectedRows))->size_) || (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_ < ((IOSIntArray *) nil_chk(selectedColumns))->size_)) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(destination->size_), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(destination, 0)))->size_), JavaLangInteger_valueOfWithInt_(selectedRows->size_), JavaLangInteger_valueOfWithInt_(((IOSIntArray *) nil_chk(selectedColumns))->size_) } count:4 type:NSObject_class_()]);
  }
  for (jint i = 0; i < selectedRows->size_; i++) {
    IOSObjectArray *destinationI = IOSObjectArray_Get(destination, i);
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(selectedColumns))->size_; j++) {
      IOSObjectArray_Set(nil_chk(destinationI), j, [self getEntryWithInt:IOSIntArray_Get(selectedRows, i) withInt:IOSIntArray_Get(selectedColumns, j)]);
    }
  }
}

- (void)setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)subMatrix
                                                       withInt:(jint)row
                                                       withInt:(jint)column {
  jint nRows = ((IOSObjectArray *) nil_chk(subMatrix))->size_;
  if (nRows == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, 0)))->size_;
  if (nCols == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  for (jint r = 1; r < nRows; ++r) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_ != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_) } count:2 type:NSObject_class_()]);
    }
  }
  [self checkRowIndexWithInt:row];
  [self checkColumnIndexWithInt:column];
  [self checkRowIndexWithInt:nRows + row - 1];
  [self checkColumnIndexWithInt:nCols + column - 1];
  for (jint i = 0; i < nRows; ++i) {
    for (jint j = 0; j < nCols; ++j) {
      [self setEntryWithInt:row + i withInt:column + j withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(subMatrix, i)), j)];
    }
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getRowMatrixWithInt:(jint)row {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:1 withInt:nCols];
  for (jint i = 0; i < nCols; ++i) {
    [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:0 withInt:i withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:row withInt:i]];
  }
  return out;
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)matrix {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  if (([((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(matrix)) getRowDimension] != 1) || ([matrix getColumnDimension] != nCols)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withOrgApacheCommonsMathFieldElement:[matrix getEntryWithInt:0 withInt:i]];
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getColumnMatrixWithInt:(jint)column {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:nRows withInt:1];
  for (jint i = 0; i < nRows; ++i) {
    [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(out)) setEntryWithInt:i withInt:0 withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:i withInt:column]];
  }
  return out;
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)matrix {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  if (([((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(matrix)) getRowDimension] != nRows) || ([matrix getColumnDimension] != 1)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withOrgApacheCommonsMathFieldElement:[matrix getEntryWithInt:i withInt:0]];
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getRowVectorWithInt:(jint)row {
  return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_([self getRowWithInt:row], NO) autorelease];
}

- (void)setRowVectorWithInt:(jint)row
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)vector {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  if ([((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(vector)) getDimension] != nCols) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_([vector getDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withOrgApacheCommonsMathFieldElement:[vector getEntryWithInt:i]];
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getColumnVectorWithInt:(jint)column {
  return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_([self getColumnWithInt:column], NO) autorelease];
}

- (void)setColumnVectorWithInt:(jint)column
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)vector {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  if ([((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(vector)) getDimension] != nRows) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([vector getDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withOrgApacheCommonsMathFieldElement:[vector getEntryWithInt:i]];
  }
}

- (IOSObjectArray *)getRowWithInt:(jint)row {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nCols);
  for (jint i = 0; i < nCols; ++i) {
    IOSObjectArray_Set(nil_chk(out), i, [self getEntryWithInt:row withInt:i]);
  }
  return out;
}

- (void)setRowWithInt:(jint)row
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)array {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(array))->size_ != nCols) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nCols; ++i) {
    [self setEntryWithInt:row withInt:i withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(array, i)];
  }
}

- (IOSObjectArray *)getColumnWithInt:(jint)column {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nRows);
  for (jint i = 0; i < nRows; ++i) {
    IOSObjectArray_Set(nil_chk(out), i, [self getEntryWithInt:i withInt:column]);
  }
  return out;
}

- (void)setColumnWithInt:(jint)column
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)array {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  if (((IOSObjectArray *) nil_chk(array))->size_ != nRows) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  for (jint i = 0; i < nRows; ++i) {
    [self setEntryWithInt:i withInt:column withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(array, i)];
  }
}

- (id)getEntryWithInt:(jint)row
              withInt:(jint)column {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)increment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)factor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)transpose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  id<OrgApacheCommonsMathLinearFieldMatrix> out = [self createMatrixWithInt:nCols withInt:nRows];
  [self walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:[new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(out, [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero]) autorelease]];
  return out;
}

- (jboolean)isSquare {
  return [self getColumnDimension] == [self getRowDimension];
}

- (jint)getRowDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getColumnDimension {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getTrace {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (nRows != nCols) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_(nRows, nCols) autorelease];
  }
  id<OrgApacheCommonsMathFieldElement> trace = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
  for (jint i = 0; i < nRows; ++i) {
    trace = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(trace)) addWithId:[self getEntryWithInt:i withInt:i]];
  }
  return trace;
}

- (IOSObjectArray *)operateWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(v))->size_ != nCols) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nRows);
  for (jint row = 0; row < nRows; ++row) {
    id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
    for (jint i = 0; i < nCols; ++i) {
      sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:i])) multiplyWithId:IOSObjectArray_Get(v, i)]];
    }
    IOSObjectArray_Set(nil_chk(out), row, sum);
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)operateWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_([self operateWithOrgApacheCommonsMathFieldElementArray:[((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(((OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])))) getDataRef]], NO) autorelease];
  }
  @catch (JavaLangClassCastException *cce) {
    jint nRows = [self getRowDimension];
    jint nCols = [self getColumnDimension];
    if ([((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension] != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([v getDimension]), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
    }
    IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nRows);
    for (jint row = 0; row < nRows; ++row) {
      id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
      for (jint i = 0; i < nCols; ++i) {
        sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:i])) multiplyWithId:[v getEntryWithInt:i]]];
      }
      IOSObjectArray_Set(nil_chk(out), row, sum);
    }
    return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(out, NO) autorelease];
  }
}

- (IOSObjectArray *)preMultiplyWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(v))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nCols);
  for (jint col = 0; col < nCols; ++col) {
    id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
    for (jint i = 0; i < nRows; ++i) {
      sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:i withInt:col])) multiplyWithId:IOSObjectArray_Get(v, i)]];
    }
    IOSObjectArray_Set(nil_chk(out), col, sum);
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldVector>)preMultiplyWithOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)v {
  @try {
    return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_([self preMultiplyWithOrgApacheCommonsMathFieldElementArray:[((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(((OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayFieldVector class])))) getDataRef]], NO) autorelease];
  }
  @catch (JavaLangClassCastException *cce) {
    jint nRows = [self getRowDimension];
    jint nCols = [self getColumnDimension];
    if ([((id<OrgApacheCommonsMathLinearFieldVector>) nil_chk(v)) getDimension] != nRows) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([v getDimension]), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
    }
    IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field_, nCols);
    for (jint col = 0; col < nCols; ++col) {
      id<OrgApacheCommonsMathFieldElement> sum = [((id<OrgApacheCommonsMathField>) nil_chk(field_)) getZero];
      for (jint i = 0; i < nRows; ++i) {
        sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:i withInt:col])) multiplyWithId:[v getEntryWithInt:i]]];
      }
      IOSObjectArray_Set(nil_chk(out), col, sum);
    }
    return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_(out) autorelease];
  }
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint row = 0; row < rows; ++row) {
    for (jint column = 0; column < columns; ++column) {
      id<OrgApacheCommonsMathFieldElement> oldValue = [self getEntryWithInt:row withInt:column];
      id<OrgApacheCommonsMathFieldElement> newValue = [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:oldValue];
      [self setEntryWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:newValue];
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint row = 0; row < rows; ++row) {
    for (jint column = 0; column < columns; ++column) {
      [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                     withInt:(jint)startRow
                                                                     withInt:(jint)endRow
                                                                     withInt:(jint)startColumn
                                                                     withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint row = startRow; row <= endRow; ++row) {
    for (jint column = startColumn; column <= endColumn; ++column) {
      id<OrgApacheCommonsMathFieldElement> oldValue = [self getEntryWithInt:row withInt:column];
      id<OrgApacheCommonsMathFieldElement> newValue = [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:oldValue];
      [self setEntryWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:newValue];
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                       withInt:(jint)startRow
                                                                       withInt:(jint)endRow
                                                                       withInt:(jint)startColumn
                                                                       withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint row = startRow; row <= endRow; ++row) {
    for (jint column = startColumn; column <= endColumn; ++column) {
      [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint column = 0; column < columns; ++column) {
    for (jint row = 0; row < rows; ++row) {
      id<OrgApacheCommonsMathFieldElement> oldValue = [self getEntryWithInt:row withInt:column];
      id<OrgApacheCommonsMathFieldElement> newValue = [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:oldValue];
      [self setEntryWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:newValue];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint column = 0; column < columns; ++column) {
    for (jint row = 0; row < rows; ++row) {
      [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                        withInt:(jint)startRow
                                                                        withInt:(jint)endRow
                                                                        withInt:(jint)startColumn
                                                                        withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint column = startColumn; column <= endColumn; ++column) {
    for (jint row = startRow; row <= endRow; ++row) {
      id<OrgApacheCommonsMathFieldElement> oldValue = [self getEntryWithInt:row withInt:column];
      id<OrgApacheCommonsMathFieldElement> newValue = [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:oldValue];
      [self setEntryWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:newValue];
    }
  }
  return [visitor end];
}

- (id)walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                          withInt:(jint)startRow
                                                                          withInt:(jint)endRow
                                                                          withInt:(jint)startColumn
                                                                          withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint column = startColumn; column <= endColumn; ++column) {
    for (jint row = startRow; row <= endRow; ++row) {
      [visitor visitWithInt:row withInt:column withOrgApacheCommonsMathFieldElement:[self getEntryWithInt:row withInt:column]];
    }
  }
  return [visitor end];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:visitor];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:visitor];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                           withInt:(jint)startRow
                                                                           withInt:(jint)endRow
                                                                           withInt:(jint)startColumn
                                                                           withInt:(jint)endColumn {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:visitor withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                             withInt:(jint)startRow
                                                                             withInt:(jint)endRow
                                                                             withInt:(jint)startColumn
                                                                             withInt:(jint)endColumn {
  return [self walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:visitor withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
}

- (NSString *)description {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  JavaLangStringBuilder *res = [new_JavaLangStringBuilder_init() autorelease];
  NSString *fullClassName = [[self getClass] getName];
  NSString *shortClassName = [fullClassName substring:[((NSString *) nil_chk(fullClassName)) lastIndexOf:'.'] + 1];
  [((JavaLangStringBuilder *) nil_chk([res appendWithNSString:shortClassName])) appendWithNSString:@"{"];
  for (jint i = 0; i < nRows; ++i) {
    if (i > 0) {
      [res appendWithNSString:@","];
    }
    [res appendWithNSString:@"{"];
    for (jint j = 0; j < nCols; ++j) {
      if (j > 0) {
        [res appendWithNSString:@","];
      }
      [res appendWithId:[self getEntryWithInt:i withInt:j]];
    }
    [res appendWithNSString:@"}"];
  }
  [res appendWithNSString:@"}"];
  return [res description];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([OrgApacheCommonsMathLinearFieldMatrix_class_() isInstance:object] == NO) {
    return NO;
  }
  id<OrgApacheCommonsMathLinearFieldMatrix> m = (id<OrgApacheCommonsMathLinearFieldMatrix>) check_protocol_cast(object, @protocol(OrgApacheCommonsMathLinearFieldMatrix));
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if ([((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getColumnDimension] != nCols || [m getRowDimension] != nRows) {
    return NO;
  }
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      if (![((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) isEqual:[m getEntryWithInt:row withInt:col]]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint ret = 322562;
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  ret = ret * 31 + nRows;
  ret = ret * 31 + nCols;
  for (jint row = 0; row < nRows; ++row) {
    for (jint col = 0; col < nCols; ++col) {
      ret = ret * 31 + (11 * (row + 1) + 17 * (col + 1)) * ((jint) [((id<OrgApacheCommonsMathFieldElement>) nil_chk([self getEntryWithInt:row withInt:col])) hash]);
    }
  }
  return ret;
}

- (void)checkRowIndexWithInt:(jint)row {
  if (row < 0 || row >= [self getRowDimension]) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ROW_INDEX_OUT_OF_RANGE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_([self getRowDimension] - 1) } count:3 type:NSObject_class_()]) autorelease];
  }
}

- (void)checkColumnIndexWithInt:(jint)column {
  if (column < 0 || column >= [self getColumnDimension]) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_COLUMN_INDEX_OUT_OF_RANGE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_([self getColumnDimension] - 1) } count:3 type:NSObject_class_()]) autorelease];
  }
}

- (void)checkSubMatrixIndexWithInt:(jint)startRow
                           withInt:(jint)endRow
                           withInt:(jint)startColumn
                           withInt:(jint)endColumn {
  [self checkRowIndexWithInt:startRow];
  [self checkRowIndexWithInt:endRow];
  if (startRow > endRow) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INITIAL_ROW_AFTER_FINAL_ROW(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(startRow), JavaLangInteger_valueOfWithInt_(endRow) } count:2 type:NSObject_class_()]) autorelease];
  }
  [self checkColumnIndexWithInt:startColumn];
  [self checkColumnIndexWithInt:endColumn];
  if (startColumn > endColumn) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INITIAL_COLUMN_AFTER_FINAL_COLUMN(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(startColumn), JavaLangInteger_valueOfWithInt_(endColumn) } count:2 type:NSObject_class_()]) autorelease];
  }
}

- (void)checkSubMatrixIndexWithIntArray:(IOSIntArray *)selectedRows
                           withIntArray:(IOSIntArray *)selectedColumns {
  if (((IOSIntArray *) nil_chk(selectedRows))->size_ * ((IOSIntArray *) nil_chk(selectedColumns))->size_ == 0) {
    if (selectedRows->size_ == 0) {
      @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_SELECTED_ROW_INDEX_ARRAY(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
    }
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_SELECTED_COLUMN_INDEX_ARRAY(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
  }
  {
    IOSIntArray *a__ = selectedRows;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint row = *b__++;
      [self checkRowIndexWithInt:row];
    }
  }
  {
    IOSIntArray *a__ = selectedColumns;
    jint const *b__ = a__->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint column = *b__++;
      [self checkColumnIndexWithInt:column];
    }
  }
}

- (void)checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  if (([self getRowDimension] != [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getRowDimension]) || ([self getColumnDimension] != [m getColumnDimension])) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_ADDITION_COMPATIBLE_MATRICES(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]), JavaLangInteger_valueOfWithInt_([m getRowDimension]), JavaLangInteger_valueOfWithInt_([m getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  if (([self getRowDimension] != [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getRowDimension]) || ([self getColumnDimension] != [m getColumnDimension])) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_SUBTRACTION_COMPATIBLE_MATRICES(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]), JavaLangInteger_valueOfWithInt_([m getRowDimension]), JavaLangInteger_valueOfWithInt_([m getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  if ([self getColumnDimension] != [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getRowDimension]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_MULTIPLICATION_COMPATIBLE_MATRICES(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]), JavaLangInteger_valueOfWithInt_([m getRowDimension]), JavaLangInteger_valueOfWithInt_([m getColumnDimension]) } count:4 type:NSObject_class_()]);
  }
}

- (void)dealloc {
  RELEASE_(field_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractFieldMatrix", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:", "AbstractFieldMatrix", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathField:withInt:withInt:", "AbstractFieldMatrix", NULL, 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "extractFieldWithOrgApacheCommonsMathFieldElementArray2:", "extractField", "Lorg.apache.commons.math.Field;", 0xc, "Ljava.lang.IllegalArgumentException;", "<T::Lorg/apache/commons/math/FieldElement<TT;>;>([[TT;)Lorg/apache/commons/math/Field<TT;>;" },
    { "extractFieldWithOrgApacheCommonsMathFieldElementArray:", "extractField", "Lorg.apache.commons.math.Field;", 0xc, "Ljava.lang.IllegalArgumentException;", "<T::Lorg/apache/commons/math/FieldElement<TT;>;>([TT;)Lorg/apache/commons/math/Field<TT;>;" },
    { "buildArrayWithOrgApacheCommonsMathField:withInt:withInt:", "buildArray", "[[Lorg.apache.commons.math.FieldElement;", 0xc, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>(Lorg/apache/commons/math/Field<TT;>;II)[[TT;" },
    { "buildArrayWithOrgApacheCommonsMathField:withInt:", "buildArray", "[Lorg.apache.commons.math.FieldElement;", 0xc, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>(Lorg/apache/commons/math/Field<TT;>;I)[TT;" },
    { "getField", NULL, "Lorg.apache.commons.math.Field;", 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x401, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x401, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearFieldMatrix:", "add", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearFieldMatrix:", "subtract", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarAddWithOrgApacheCommonsMathFieldElement:", "scalarAdd", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldMatrix<TT;>;" },
    { "scalarMultiplyWithOrgApacheCommonsMathFieldElement:", "scalarMultiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, "(TT;)Lorg/apache/commons/math/linear/FieldMatrix<TT;>;" },
    { "multiplyWithOrgApacheCommonsMathLinearFieldMatrix:", "multiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathLinearFieldMatrix:", "preMultiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "getSubMatrixWithInt:withInt:withInt:withInt:", "getSubMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getSubMatrixWithIntArray:withIntArray:", "getSubMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "copySubMatrixWithInt:withInt:withInt:withInt:withOrgApacheCommonsMathFieldElementArray2:", "copySubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Ljava.lang.IllegalArgumentException;", NULL },
    { "copySubMatrixWithIntArray:withIntArray:withOrgApacheCommonsMathFieldElementArray2:", "copySubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Ljava.lang.IllegalArgumentException;", NULL },
    { "setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowMatrixWithInt:", "getRowMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearFieldMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnMatrixWithInt:", "getColumnMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearFieldMatrix:", "setColumnMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowVectorWithInt:", "getRowVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setRowVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnVectorWithInt:", "getColumnVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setColumnVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowWithInt:", "getRow", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowWithInt:withOrgApacheCommonsMathFieldElementArray:", "setRow", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnWithInt:", "getColumn", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnWithInt:withOrgApacheCommonsMathFieldElementArray:", "setColumn", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "TT;", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(II)TT;" },
    { "setEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "addToEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "addToEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "multiplyEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "multiplyEntry", "V", 0x401, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "transpose", NULL, "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, NULL },
    { "isSquare", NULL, "Z", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x401, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x401, NULL, NULL },
    { "getTrace", NULL, "TT;", 0x1, "Lorg.apache.commons.math.linear.NonSquareMatrixException;", "()TT;" },
    { "operateWithOrgApacheCommonsMathFieldElementArray:", "operate", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "operateWithOrgApacheCommonsMathLinearFieldVector:", "operate", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathFieldElementArray:", "preMultiply", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathLinearFieldVector:", "preMultiply", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "checkRowIndexWithInt:", "checkRowIndex", "V", 0x4, NULL, NULL },
    { "checkColumnIndexWithInt:", "checkColumnIndex", "V", 0x4, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "checkSubMatrixIndexWithInt:withInt:withInt:withInt:", "checkSubMatrixIndex", "V", 0x4, NULL, NULL },
    { "checkSubMatrixIndexWithIntArray:withIntArray:", "checkSubMatrixIndex", "V", 0x4, NULL, NULL },
    { "checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:", "checkAdditionCompatible", "V", 0x4, NULL, NULL },
    { "checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:", "checkSubtractionCompatible", "V", 0x4, NULL, NULL },
    { "checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:", "checkMultiplicationCompatible", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "field_", NULL, 0x12, "Lorg.apache.commons.math.Field;", NULL, "Lorg/apache/commons/math/Field<TT;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractFieldMatrix = { 2, "AbstractFieldMatrix", "org.apache.commons.math.linear", NULL, 0x401, 69, methods, 1, fields, 0, NULL, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Ljava/lang/Object;Lorg/apache/commons/math/linear/FieldMatrix<TT;>;" };
  return &_OrgApacheCommonsMathLinearAbstractFieldMatrix;
}

@end

void OrgApacheCommonsMathLinearAbstractFieldMatrix_init(OrgApacheCommonsMathLinearAbstractFieldMatrix *self) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearAbstractFieldMatrix_set_field_(self, nil);
}

void OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_(OrgApacheCommonsMathLinearAbstractFieldMatrix *self, id<OrgApacheCommonsMathField> field) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearAbstractFieldMatrix_set_field_(self, field);
}

void OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(OrgApacheCommonsMathLinearAbstractFieldMatrix *self, id<OrgApacheCommonsMathField> field, jint rowDimension, jint columnDimension) {
  NSObject_init(self);
  if (rowDimension < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(rowDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  if (columnDimension < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columnDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathLinearAbstractFieldMatrix_set_field_(self, field);
}

id<OrgApacheCommonsMathField> OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initialize();
  if (((IOSObjectArray *) nil_chk(d))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(d, 0)), 0))) getField];
}

id<OrgApacheCommonsMathField> OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initialize();
  if (((IOSObjectArray *) nil_chk(d))->size_ == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(d, 0))) getField];
}

IOSObjectArray *OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint rows, jint columns) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initialize();
  if (columns < 0) {
    IOSObjectArray *dummyRow = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field)) getZero])) getClass], 0), [IOSObjectArray class]);
    return (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((IOSObjectArray *) nil_chk(dummyRow)) getClass], rows), [IOSObjectArray class]);
  }
  IOSObjectArray *array = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withIntArray_([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field)) getZero])) getClass], [IOSIntArray arrayWithInts:(jint[]){ rows, columns } count:2]), [IOSObjectArray class]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(array))->size_; ++i) {
    JavaUtilArrays_fillWithNSObjectArray_withId_(IOSObjectArray_Get(array, i), [field getZero]);
  }
  return array;
}

IOSObjectArray *OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(id<OrgApacheCommonsMathField> field, jint length) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initialize();
  IOSObjectArray *array = (IOSObjectArray *) check_class_cast(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathField>) nil_chk(field)) getZero])) getClass], length), [IOSObjectArray class]);
  JavaUtilArrays_fillWithNSObjectArray_withId_(array, [field getZero]);
  return array;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractFieldMatrix)

@implementation OrgApacheCommonsMathLinearAbstractFieldMatrix_$1

- (id)visitWithInt:(jint)row
           withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  return [this$0_ getEntryWithInt:IOSIntArray_Get(nil_chk(val$selectedRows_), row) withInt:IOSIntArray_Get(nil_chk(val$selectedColumns_), column)];
}

- (instancetype)initWithOrgApacheCommonsMathLinearAbstractFieldMatrix:(OrgApacheCommonsMathLinearAbstractFieldMatrix *)outer$
                                                         withIntArray:(IOSIntArray *)capture$0
                                                         withIntArray:(IOSIntArray *)capture$1
                                 withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0 {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(self, outer$, capture$0, capture$1, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$selectedRows_);
  RELEASE_(val$selectedColumns_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "visit", "TT;", 0x1, NULL, "(IITT;)TT;" },
    { "initWithOrgApacheCommonsMathLinearAbstractFieldMatrix:withIntArray:withIntArray:withOrgApacheCommonsMathFieldElement:", "", NULL, 0x0, NULL, "(Lorg/apache/commons/math/linear/AbstractFieldMatrix;[I[ITT;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.linear.AbstractFieldMatrix;", NULL, NULL,  },
    { "val$selectedRows_", NULL, 0x1012, "[I", NULL, NULL,  },
    { "val$selectedColumns_", NULL, 0x1012, "[I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractFieldMatrix", "getSubMatrixWithIntArray:withIntArray:" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 = { 2, "", "org.apache.commons.math.linear", "AbstractFieldMatrix", 0x8008, 2, methods, 3, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lorg/apache/commons/math/linear/DefaultFieldMatrixChangingVisitor<TT;>;" };
  return &_OrgApacheCommonsMathLinearAbstractFieldMatrix_$1;
}

@end

void OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 *self, OrgApacheCommonsMathLinearAbstractFieldMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_set_this$0_(self, outer$);
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_set_val$selectedRows_(self, capture$0);
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_set_val$selectedColumns_(self, capture$1);
  OrgApacheCommonsMathLinearDefaultFieldMatrixChangingVisitor_initWithOrgApacheCommonsMathFieldElement_(self, arg$0);
}

OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix *outer$, IOSIntArray *capture$0, IOSIntArray *capture$1, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 *self = [OrgApacheCommonsMathLinearAbstractFieldMatrix_$1 alloc];
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$1_initWithOrgApacheCommonsMathLinearAbstractFieldMatrix_withIntArray_withIntArray_withOrgApacheCommonsMathFieldElement_(self, outer$, capture$0, capture$1, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractFieldMatrix_$1)

@implementation OrgApacheCommonsMathLinearAbstractFieldMatrix_$2

- (void)startWithInt:(jint)rows
             withInt:(jint)columns
             withInt:(jint)startRow
             withInt:(jint)endRow
             withInt:(jint)startColumn
             withInt:(jint)endColumn {
  self->startRow1_ = startRow;
  self->startColumn1_ = startColumn;
}

- (void)visitWithInt:(jint)row
             withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(val$destination_), row - startRow1_)), column - startColumn1_, value);
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)capture$0
                          withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0 {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(self, capture$0, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$destination_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "startWithInt:withInt:withInt:withInt:withInt:withInt:", "start", "V", 0x1, NULL, NULL },
    { "visitWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "visit", "V", 0x1, NULL, "(IITT;)V" },
    { "initWithOrgApacheCommonsMathFieldElementArray2:withOrgApacheCommonsMathFieldElement:", "", NULL, 0x0, NULL, "([[TT;TT;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startRow1_", NULL, 0x2, "I", NULL, NULL,  },
    { "startColumn1_", NULL, 0x2, "I", NULL, NULL,  },
    { "val$destination_", NULL, 0x1012, "[[Lorg.apache.commons.math.FieldElement;", NULL, "[[TT;",  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractFieldMatrix", "copySubMatrixWithInt:withInt:withInt:withInt:withOrgApacheCommonsMathFieldElementArray2:" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 = { 2, "", "org.apache.commons.math.linear", "AbstractFieldMatrix", 0x8008, 3, methods, 3, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lorg/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor<TT;>;" };
  return &_OrgApacheCommonsMathLinearAbstractFieldMatrix_$2;
}

@end

void OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 *self, IOSObjectArray *capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_set_val$destination_(self, capture$0);
  OrgApacheCommonsMathLinearDefaultFieldMatrixPreservingVisitor_initWithOrgApacheCommonsMathFieldElement_(self, arg$0);
}

OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(IOSObjectArray *capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 *self = [OrgApacheCommonsMathLinearAbstractFieldMatrix_$2 alloc];
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$2_initWithOrgApacheCommonsMathFieldElementArray2_withOrgApacheCommonsMathFieldElement_(self, capture$0, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractFieldMatrix_$2)

@implementation OrgApacheCommonsMathLinearAbstractFieldMatrix_$3

- (void)visitWithInt:(jint)row
             withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(val$out_)) setEntryWithInt:column withInt:row withOrgApacheCommonsMathFieldElement:value];
}

- (instancetype)initWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)capture$0
                         withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)arg$0 {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(self, capture$0, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(val$out_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "visitWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "visit", "V", 0x1, NULL, "(IITT;)V" },
    { "initWithOrgApacheCommonsMathLinearFieldMatrix:withOrgApacheCommonsMathFieldElement:", "", NULL, 0x0, NULL, "(Lorg/apache/commons/math/linear/FieldMatrix<TT;>;TT;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val$out_", NULL, 0x1012, "Lorg.apache.commons.math.linear.FieldMatrix;", NULL, "Lorg/apache/commons/math/linear/FieldMatrix<TT;>;",  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathLinearAbstractFieldMatrix", "transpose" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 = { 2, "", "org.apache.commons.math.linear", "AbstractFieldMatrix", 0x8008, 2, methods, 1, fields, 1, superclass_type_args, 0, NULL, &enclosing_method, "Lorg/apache/commons/math/linear/DefaultFieldMatrixPreservingVisitor<TT;>;" };
  return &_OrgApacheCommonsMathLinearAbstractFieldMatrix_$3;
}

@end

void OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 *self, id<OrgApacheCommonsMathLinearFieldMatrix> capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_set_val$out_(self, capture$0);
  OrgApacheCommonsMathLinearDefaultFieldMatrixPreservingVisitor_initWithOrgApacheCommonsMathFieldElement_(self, arg$0);
}

OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 *new_OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(id<OrgApacheCommonsMathLinearFieldMatrix> capture$0, id<OrgApacheCommonsMathFieldElement> arg$0) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 *self = [OrgApacheCommonsMathLinearAbstractFieldMatrix_$3 alloc];
  OrgApacheCommonsMathLinearAbstractFieldMatrix_$3_initWithOrgApacheCommonsMathLinearFieldMatrix_withOrgApacheCommonsMathFieldElement_(self, capture$0, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearAbstractFieldMatrix_$3)
