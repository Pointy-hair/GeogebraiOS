//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/RegressionMath.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/RegressionMath.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/linear/DecompositionSolver.h"
#include "org/apache/commons/math/linear/QRDecompositionImpl.h"
#include "org/apache/commons/math/linear/RealMatrix.h"

@interface GeogebraCommonKernelStatisticsRegressionMath () {
 @public
  jboolean error_;
  jdouble p1_, p2_, p3_, p4_, p5_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax6_, sigmax7_, sigmax8_, sigmay_, sigmay2_, sigmaxy_, sigmax2y_, sigmax3y_, sigmax4y_;
  GeogebraCommonKernelGeosGeoList *geolist_;
  IOSDoubleArray *xlist_;
  IOSDoubleArray *ylist_;
  jint size_;
  IOSObjectArray *marray_, *yarray_;
  IOSDoubleArray *pararray_;
}

- (void)doSumsWithInt:(jint)degree;

- (void)getPoints;

- (void)makeMatrixArraysWithInt:(jint)degree;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, geolist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, xlist_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, ylist_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, marray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, yarray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsRegressionMath, pararray_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(GeogebraCommonKernelStatisticsRegressionMath *self, jint degree);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsRegressionMath_getPoints(GeogebraCommonKernelStatisticsRegressionMath *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsRegressionMath_makeMatrixArraysWithInt_(GeogebraCommonKernelStatisticsRegressionMath *self, jint degree);

@implementation GeogebraCommonKernelStatisticsRegressionMath

- (instancetype)init {
  GeogebraCommonKernelStatisticsRegressionMath_init(self);
  return self;
}

- (jdouble)getP1 {
  return p1_;
}

- (jdouble)getP2 {
  return p2_;
}

- (jdouble)getP3 {
  return p3_;
}

- (jdouble)getP4 {
  return p4_;
}

- (jdouble)getP5 {
  return p5_;
}

- (jdouble)getSigmaX {
  return sigmax_;
}

- (jdouble)getSigmaX2 {
  return sigmax2_;
}

- (jdouble)getSigmaY {
  return sigmay_;
}

- (jdouble)getSigmaY2 {
  return sigmay2_;
}

- (jdouble)getSigmaXy {
  return sigmaxy_;
}

- (IOSDoubleArray *)getPar {
  return pararray_;
}

- (jboolean)doPolyNWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl
                                               withInt:(jint)degree {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  @try {
    GeogebraCommonKernelStatisticsRegressionMath_makeMatrixArraysWithInt_(self, degree);
    id<OrgApacheCommonsMathLinearRealMatrix> M = [new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_withBoolean_(marray_, NO) autorelease];
    id<OrgApacheCommonsMathLinearDecompositionSolver> solver = [((OrgApacheCommonsMathLinearQRDecompositionImpl *) [new_OrgApacheCommonsMathLinearQRDecompositionImpl_initWithOrgApacheCommonsMathLinearRealMatrix_(M) autorelease]) getSolver];
    id<OrgApacheCommonsMathLinearRealMatrix> Y = [new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_withBoolean_(yarray_, NO) autorelease];
    id<OrgApacheCommonsMathLinearRealMatrix> P = [((id<OrgApacheCommonsMathLinearDecompositionSolver>) nil_chk(solver)) solveWithOrgApacheCommonsMathLinearRealMatrix:Y];
    GeogebraCommonKernelStatisticsRegressionMath_set_pararray_(self, [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(P)) getColumnWithInt:0]);
  }
  @catch (JavaLangThrowable *t) {
    GeogebraCommonMainApp_debugWithNSString_([((JavaLangThrowable *) nil_chk(t)) description]);
    error_ = YES;
  }
  return !error_;
}

- (jboolean)doLinearWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_LINEAR);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax_, sigmax2_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmaxy_, sigmax2_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(size_, sigmay_, sigmax_, sigmaxy_) / n;
  return YES;
}

- (jboolean)doQuadWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_QUAD);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax2_, sigmax_, sigmax2_, sigmax3_, sigmax2_, sigmax3_, sigmax4_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmax2_, sigmaxy_, sigmax2_, sigmax3_, sigmax2y_, sigmax3_, sigmax4_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmay_, sigmax2_, sigmax_, sigmaxy_, sigmax3_, sigmax2_, sigmax2y_, sigmax4_) / n;
  p3_ = GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmay_, sigmax_, sigmax2_, sigmaxy_, sigmax2_, sigmax3_, sigmax2y_) / n;
  return YES;
}

- (jboolean)doCubicWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_CUBIC);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax2_, sigmax3_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax3_, sigmax4_, sigmax5_, sigmax6_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmax2_, sigmax3_, sigmaxy_, sigmax2_, sigmax3_, sigmax4_, sigmax2y_, sigmax3_, sigmax4_, sigmax5_, sigmax3y_, sigmax4_, sigmax5_, sigmax6_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(size_, sigmay_, sigmax2_, sigmax3_, sigmax_, sigmaxy_, sigmax3_, sigmax4_, sigmax2_, sigmax2y_, sigmax4_, sigmax5_, sigmax3_, sigmax3y_, sigmax5_, sigmax6_) / n;
  p3_ = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(size_, sigmax_, sigmay_, sigmax3_, sigmax_, sigmax2_, sigmaxy_, sigmax4_, sigmax2_, sigmax3_, sigmax2y_, sigmax5_, sigmax3_, sigmax4_, sigmax3y_, sigmax6_) / n;
  p4_ = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(size_, sigmax_, sigmax2_, sigmay_, sigmax_, sigmax2_, sigmax3_, sigmaxy_, sigmax2_, sigmax3_, sigmax4_, sigmax2y_, sigmax3_, sigmax4_, sigmax5_, sigmax3y_) / n;
  return YES;
}

- (jboolean)doQuartWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_QUART);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax6_, sigmax3_, sigmax4_, sigmax5_, sigmax6_, sigmax7_, sigmax4_, sigmax5_, sigmax6_, sigmax7_, sigmax8_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmaxy_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax2y_, sigmax3_, sigmax4_, sigmax5_, sigmax6_, sigmax3y_, sigmax4_, sigmax5_, sigmax6_, sigmax7_, sigmax4y_, sigmax5_, sigmax6_, sigmax7_, sigmax8_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmay_, sigmax2_, sigmax3_, sigmax4_, sigmax_, sigmaxy_, sigmax3_, sigmax4_, sigmax5_, sigmax2_, sigmax2y_, sigmax4_, sigmax5_, sigmax6_, sigmax3_, sigmax3y_, sigmax5_, sigmax6_, sigmax7_, sigmax4_, sigmax4y_, sigmax6_, sigmax7_, sigmax8_) / n;
  p3_ = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmay_, sigmax3_, sigmax4_, sigmax_, sigmax2_, sigmaxy_, sigmax4_, sigmax5_, sigmax2_, sigmax3_, sigmax2y_, sigmax5_, sigmax6_, sigmax3_, sigmax4_, sigmax3y_, sigmax6_, sigmax7_, sigmax4_, sigmax5_, sigmax4y_, sigmax7_, sigmax8_) / n;
  p4_ = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax2_, sigmay_, sigmax4_, sigmax_, sigmax2_, sigmax3_, sigmaxy_, sigmax5_, sigmax2_, sigmax3_, sigmax4_, sigmax2y_, sigmax6_, sigmax3_, sigmax4_, sigmax5_, sigmax3y_, sigmax7_, sigmax4_, sigmax5_, sigmax6_, sigmax4y_, sigmax8_) / n;
  p5_ = GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax2_, sigmax3_, sigmay_, sigmax_, sigmax2_, sigmax3_, sigmax4_, sigmaxy_, sigmax2_, sigmax3_, sigmax4_, sigmax5_, sigmax2y_, sigmax3_, sigmax4_, sigmax5_, sigmax6_, sigmax3y_, sigmax4_, sigmax5_, sigmax6_, sigmax7_, sigmax4y_) / n;
  return YES;
}

- (jboolean)doExpWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  jdouble y = 0.0;
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  for (jint i = 0; i < size_; i++) {
    y = IOSDoubleArray_Get(nil_chk(ylist_), i);
    if (y < 0.0) {
      return NO;
    }
    *IOSDoubleArray_GetRef(ylist_, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(ylist_, i));
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_LINEAR);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax_, sigmax2_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmaxy_, sigmax2_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(size_, sigmay_, sigmax_, sigmaxy_) / n;
  p1_ = JavaLangMath_expWithDouble_(p1_);
  return YES;
}

- (jboolean)doLogWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  jdouble x = 0.0;
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  for (jint i = 0; i < size_; i++) {
    x = IOSDoubleArray_Get(nil_chk(xlist_), i);
    if (x < 0.0) {
      return NO;
    }
    *IOSDoubleArray_GetRef(xlist_, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(xlist_, i));
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_LINEAR);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax_, sigmax2_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmaxy_, sigmax2_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(size_, sigmay_, sigmax_, sigmaxy_) / n;
  return YES;
}

- (jboolean)doPowWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)gl {
  error_ = NO;
  GeogebraCommonKernelStatisticsRegressionMath_set_geolist_(self, gl);
  jdouble x, y;
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(geolist_)) size];
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
  if (error_) {
    return NO;
  }
  for (jint i = 0; i < size_; i++) {
    x = IOSDoubleArray_Get(nil_chk(xlist_), i);
    y = IOSDoubleArray_Get(nil_chk(ylist_), i);
    if ((y < 0.0) || (x < 0.0)) {
      return NO;
    }
    *IOSDoubleArray_GetRef(xlist_, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(xlist_, i));
    *IOSDoubleArray_GetRef(ylist_, i) = JavaLangMath_logWithDouble_(IOSDoubleArray_Get(ylist_, i));
  }
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, GeogebraCommonKernelStatisticsRegressionMath_LINEAR);
  if (error_) {
    return NO;
  }
  jdouble n = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(1.0 * size_, sigmax_, sigmax_, sigmax2_);
  if (JavaLangMath_absWithDouble_(n - 0.0) < 1.0E-15) {
    return NO;
  }
  p1_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(sigmay_, sigmax_, sigmaxy_, sigmax2_) / n;
  p2_ = GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(size_, sigmay_, sigmax_, sigmaxy_) / n;
  p1_ = JavaLangMath_expWithDouble_(p1_);
  return YES;
}

+ (jdouble)det22WithDouble:(jdouble)a11
                withDouble:(jdouble)a12
                withDouble:(jdouble)a21
                withDouble:(jdouble)a22 {
  return GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(a11, a12, a21, a22);
}

+ (jdouble)det33WithDouble:(jdouble)a11
                withDouble:(jdouble)a12
                withDouble:(jdouble)a13
                withDouble:(jdouble)a21
                withDouble:(jdouble)a22
                withDouble:(jdouble)a23
                withDouble:(jdouble)a31
                withDouble:(jdouble)a32
                withDouble:(jdouble)a33 {
  return GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a11, a12, a13, a21, a22, a23, a31, a32, a33);
}

+ (jdouble)det44WithDouble:(jdouble)a11
                withDouble:(jdouble)a12
                withDouble:(jdouble)a13
                withDouble:(jdouble)a14
                withDouble:(jdouble)a21
                withDouble:(jdouble)a22
                withDouble:(jdouble)a23
                withDouble:(jdouble)a24
                withDouble:(jdouble)a31
                withDouble:(jdouble)a32
                withDouble:(jdouble)a33
                withDouble:(jdouble)a34
                withDouble:(jdouble)a41
                withDouble:(jdouble)a42
                withDouble:(jdouble)a43
                withDouble:(jdouble)a44 {
  return GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a11, a12, a13, a14, a21, a22, a23, a24, a31, a32, a33, a34, a41, a42, a43, a44);
}

+ (jdouble)det55WithDouble:(jdouble)a11
                withDouble:(jdouble)a12
                withDouble:(jdouble)a13
                withDouble:(jdouble)a14
                withDouble:(jdouble)a15
                withDouble:(jdouble)a21
                withDouble:(jdouble)a22
                withDouble:(jdouble)a23
                withDouble:(jdouble)a24
                withDouble:(jdouble)a25
                withDouble:(jdouble)a31
                withDouble:(jdouble)a32
                withDouble:(jdouble)a33
                withDouble:(jdouble)a34
                withDouble:(jdouble)a35
                withDouble:(jdouble)a41
                withDouble:(jdouble)a42
                withDouble:(jdouble)a43
                withDouble:(jdouble)a44
                withDouble:(jdouble)a45
                withDouble:(jdouble)a51
                withDouble:(jdouble)a52
                withDouble:(jdouble)a53
                withDouble:(jdouble)a54
                withDouble:(jdouble)a55 {
  return GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a11, a12, a13, a14, a15, a21, a22, a23, a24, a25, a31, a32, a33, a34, a35, a41, a42, a43, a44, a45, a51, a52, a53, a54, a55);
}

- (void)doSumsWithInt:(jint)degree {
  GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(self, degree);
}

- (void)getPoints {
  GeogebraCommonKernelStatisticsRegressionMath_getPoints(self);
}

- (void)makeMatrixArraysWithInt:(jint)degree {
  GeogebraCommonKernelStatisticsRegressionMath_makeMatrixArraysWithInt_(self, degree);
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(xlist_);
  RELEASE_(ylist_);
  RELEASE_(marray_);
  RELEASE_(yarray_);
  RELEASE_(pararray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RegressionMath", NULL, 0x1, NULL, NULL },
    { "getP1", NULL, "D", 0x11, NULL, NULL },
    { "getP2", NULL, "D", 0x11, NULL, NULL },
    { "getP3", NULL, "D", 0x11, NULL, NULL },
    { "getP4", NULL, "D", 0x11, NULL, NULL },
    { "getP5", NULL, "D", 0x11, NULL, NULL },
    { "getSigmaX", NULL, "D", 0x11, NULL, NULL },
    { "getSigmaX2", NULL, "D", 0x11, NULL, NULL },
    { "getSigmaY", NULL, "D", 0x11, NULL, NULL },
    { "getSigmaY2", NULL, "D", 0x11, NULL, NULL },
    { "getSigmaXy", NULL, "D", 0x11, NULL, NULL },
    { "getPar", NULL, "[D", 0x11, NULL, NULL },
    { "doPolyNWithGeogebraCommonKernelGeosGeoList:withInt:", "doPolyN", "Z", 0x11, NULL, NULL },
    { "doLinearWithGeogebraCommonKernelGeosGeoList:", "doLinear", "Z", 0x11, NULL, NULL },
    { "doQuadWithGeogebraCommonKernelGeosGeoList:", "doQuad", "Z", 0x11, NULL, NULL },
    { "doCubicWithGeogebraCommonKernelGeosGeoList:", "doCubic", "Z", 0x11, NULL, NULL },
    { "doQuartWithGeogebraCommonKernelGeosGeoList:", "doQuart", "Z", 0x11, NULL, NULL },
    { "doExpWithGeogebraCommonKernelGeosGeoList:", "doExp", "Z", 0x11, NULL, NULL },
    { "doLogWithGeogebraCommonKernelGeosGeoList:", "doLog", "Z", 0x11, NULL, NULL },
    { "doPowWithGeogebraCommonKernelGeosGeoList:", "doPow", "Z", 0x11, NULL, NULL },
    { "det22WithDouble:withDouble:withDouble:withDouble:", "det22", "D", 0x19, NULL, NULL },
    { "det33WithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "det33", "D", 0x19, NULL, NULL },
    { "det44WithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "det44", "D", 0x19, NULL, NULL },
    { "det55WithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "det55", "D", 0x19, NULL, NULL },
    { "doSumsWithInt:", "doSums", "V", 0x12, NULL, NULL },
    { "getPoints", NULL, "V", 0x12, NULL, NULL },
    { "makeMatrixArraysWithInt:", "makeMatrixArrays", "V", 0x12, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "LINEAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_LINEAR },
    { "QUAD_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_QUAD },
    { "CUBIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_CUBIC },
    { "QUART_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_QUART },
    { "EXP_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_EXP },
    { "LOG_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_LOG },
    { "POW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsRegressionMath_POW },
    { "error_", NULL, 0x2, "Z", NULL, NULL,  },
    { "p1_", NULL, 0x2, "D", NULL, NULL,  },
    { "p2_", NULL, 0x2, "D", NULL, NULL,  },
    { "p3_", NULL, 0x2, "D", NULL, NULL,  },
    { "p4_", NULL, 0x2, "D", NULL, NULL,  },
    { "p5_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax2_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax3_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax4_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax5_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax6_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax7_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax8_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmay_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmay2_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmaxy_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax2y_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax3y_", NULL, 0x2, "D", NULL, NULL,  },
    { "sigmax4y_", NULL, 0x2, "D", NULL, NULL,  },
    { "geolist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "xlist_", NULL, 0x2, "[D", NULL, NULL,  },
    { "ylist_", NULL, 0x2, "[D", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "marray_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "yarray_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "pararray_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsRegressionMath = { 2, "RegressionMath", "geogebra.common.kernel.statistics", NULL, 0x11, 27, methods, 34, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsRegressionMath;
}

@end

void GeogebraCommonKernelStatisticsRegressionMath_init(GeogebraCommonKernelStatisticsRegressionMath *self) {
  NSObject_init(self);
  self->error_ = NO;
}

GeogebraCommonKernelStatisticsRegressionMath *new_GeogebraCommonKernelStatisticsRegressionMath_init() {
  GeogebraCommonKernelStatisticsRegressionMath *self = [GeogebraCommonKernelStatisticsRegressionMath alloc];
  GeogebraCommonKernelStatisticsRegressionMath_init(self);
  return self;
}

jdouble GeogebraCommonKernelStatisticsRegressionMath_det22WithDouble_withDouble_withDouble_withDouble_(jdouble a11, jdouble a12, jdouble a21, jdouble a22) {
  GeogebraCommonKernelStatisticsRegressionMath_initialize();
  return a11 * a22 - a21 * a12;
}

jdouble GeogebraCommonKernelStatisticsRegressionMath_det33WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble a11, jdouble a12, jdouble a13, jdouble a21, jdouble a22, jdouble a23, jdouble a31, jdouble a32, jdouble a33) {
  GeogebraCommonKernelStatisticsRegressionMath_initialize();
  return a11 * (a22 * a33 - a32 * a23) - a12 * (a21 * a33 - a31 * a23) + a13 * (a21 * a32 - a31 * a22);
}

jdouble GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble a11, jdouble a12, jdouble a13, jdouble a14, jdouble a21, jdouble a22, jdouble a23, jdouble a24, jdouble a31, jdouble a32, jdouble a33, jdouble a34, jdouble a41, jdouble a42, jdouble a43, jdouble a44) {
  GeogebraCommonKernelStatisticsRegressionMath_initialize();
  return a11 * a22 * a33 * a44 - a11 * a22 * a34 * a43 - a11 * a23 * a32 * a44 + a11 * a23 * a42 * a34 + a11 * a32 * a24 * a43 - a11 * a24 * a33 * a42 - a12 * a21 * a33 * a44 + a12 * a21 * a34 * a43 + a12 * a31 * a23 * a44 - a12 * a31 * a24 * a43 - a12 * a23 * a41 * a34 + a12 * a41 * a24 * a33 + a21 * a13 * a32 * a44 - a21 * a13 * a42 * a34 - a21 * a14 * a32 * a43 + a21 * a14 * a33 * a42 - a13 * a22 * a31 * a44 + a13 * a22 * a41 * a34 + a13 * a31 * a24 * a42 - a13 * a32 * a41 * a24 + a22 * a31 * a14 * a43 - a22 * a14 * a41 * a33 - a31 * a14 * a23 * a42 + a14 * a23 * a32 * a41;
}

jdouble GeogebraCommonKernelStatisticsRegressionMath_det55WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble a11, jdouble a12, jdouble a13, jdouble a14, jdouble a15, jdouble a21, jdouble a22, jdouble a23, jdouble a24, jdouble a25, jdouble a31, jdouble a32, jdouble a33, jdouble a34, jdouble a35, jdouble a41, jdouble a42, jdouble a43, jdouble a44, jdouble a45, jdouble a51, jdouble a52, jdouble a53, jdouble a54, jdouble a55) {
  GeogebraCommonKernelStatisticsRegressionMath_initialize();
  jdouble complex$1 = a11 * a22 * a33 * a44 * a55 - a11 * a22 * a33 * a45 * a54 - a11 * a22 * a34 * a43 * a55 + a11 * a22 * a34 * a53 * a45 + a11 * a22 * a43 * a35 * a54 - a11 * a22 * a35 * a44 * a53 - a11 * a23 * a32 * a44 * a55 + a11 * a23 * a32 * a45 * a54 + a11 * a23 * a42 * a34 * a55 - a11 * a23 * a42 * a35 * a54 - a11 * a23 * a34 * a52 * a45 + a11 * a23 * a52 * a35 * a44 + a11 * a32 * a24 * a43 * a55 - a11 * a32 * a24 * a53 * a45 - a11 * a32 * a25 * a43 * a54 + a11 * a32 * a25 * a44 * a53 - a11 * a24 * a33 * a42 * a55 + a11 * a24 * a33 * a52 * a45 + a11 * a24 * a42 * a35 * a53 - a11 * a24 * a43 * a52 * a35 + a11 * a33 * a42 * a25 * a54 - a11 * a33 * a25 * a52 * a44 - a11 * a42 * a25 * a34 * a53 + a11 * a25 * a34 * a43 * a52 - a12 * a21 * a33 * a44 * a55 + a12 * a21 * a33 * a45 * a54 + a12 * a21 * a34 * a43 * a55 - a12 * a21 * a34 * a53 * a45 - a12 * a21 * a43 * a35 * a54 + a12 * a21 * a35 * a44 * a53 + a12 * a31 * a23 * a44 * a55 - a12 * a31 * a23 * a45 * a54 - a12 * a31 * a24 * a43 * a55 + a12 * a31 * a24 * a53 * a45 + a12 * a31 * a25 * a43 * a54 - a12 * a31 * a25 * a44 * a53 - a12 * a23 * a41 * a34 * a55 + a12 * a23 * a41 * a35 * a54 + a12 * a23 * a51 * a34 * a45 - a12 * a23 * a51 * a35 * a44 + a12 * a41 * a24 * a33 * a55 - a12 * a41 * a24 * a35 * a53 - a12 * a41 * a33 * a25 * a54 + a12 * a41 * a25 * a34 * a53 - a12 * a24 * a33 * a51 * a45 + a12 * a24 * a51 * a43 * a35 + a12 * a33 * a51 * a25 * a44 - a12 * a51 * a25 * a34 * a43 + a21 * a13 * a32 * a44 * a55 - a21 * a13 * a32 * a45 * a54 - a21 * a13 * a42 * a34 * a55 + a21 * a13 * a42 * a35 * a54 + a21 * a13 * a34 * a52 * a45 - a21 * a13 * a52 * a35 * a44 - a21 * a14 * a32 * a43 * a55 + a21 * a14 * a32 * a53 * a45 + a21 * a14 * a33 * a42 * a55 - a21 * a14 * a33 * a52 * a45 - a21 * a14 * a42 * a35 * a53 + a21 * a14 * a43 * a52 * a35 + a21 * a32 * a15 * a43 * a54 - a21 * a32 * a15 * a44 * a53 - a21 * a15 * a33 * a42 * a54 + a21 * a15 * a33 * a52 * a44 + a21 * a15 * a42 * a34 * a53 - a21 * a15 * a34 * a43 * a52 - a13 * a22 * a31 * a44 * a55 + a13 * a22 * a31 * a45 * a54 + a13 * a22 * a41 * a34 * a55 - a13 * a22 * a41 * a35 * a54 - a13 * a22 * a51 * a34 * a45 + a13 * a22 * a51 * a35 * a44 + a13 * a31 * a24 * a42 * a55 - a13 * a31 * a24 * a52 * a45 - a13 * a31 * a42 * a25 * a54 + a13 * a31 * a25 * a52 * a44 - a13 * a32 * a41 * a24 * a55 + a13 * a32 * a41 * a25 * a54 + a13 * a32 * a24 * a51 * a45 - a13 * a32 * a51 * a25 * a44 + a13 * a41 * a24 * a52 * a35 - a13 * a41 * a25 * a34 * a52 - a13 * a24 * a42 * a51 * a35;
  return complex$1 + a13 * a42 * a51 * a25 * a34 + a22 * a31 * a14 * a43 * a55 - a22 * a31 * a14 * a53 * a45 - a22 * a31 * a15 * a43 * a54 + a22 * a31 * a15 * a44 * a53 - a22 * a14 * a41 * a33 * a55 + a22 * a14 * a41 * a35 * a53 + a22 * a14 * a33 * a51 * a45 - a22 * a14 * a51 * a43 * a35 + a22 * a41 * a15 * a33 * a54 - a22 * a41 * a15 * a34 * a53 - a22 * a15 * a33 * a51 * a44 + a22 * a15 * a51 * a34 * a43 - a31 * a14 * a23 * a42 * a55 + a31 * a14 * a23 * a52 * a45 + a31 * a14 * a42 * a25 * a53 - a31 * a14 * a25 * a43 * a52 + a31 * a23 * a15 * a42 * a54 - a31 * a23 * a15 * a52 * a44 - a31 * a15 * a24 * a42 * a53 + a31 * a15 * a24 * a43 * a52 + a14 * a23 * a32 * a41 * a55 - a14 * a23 * a32 * a51 * a45 - a14 * a23 * a41 * a52 * a35 + a14 * a23 * a42 * a51 * a35 - a14 * a32 * a41 * a25 * a53 + a14 * a32 * a51 * a25 * a43 + a14 * a41 * a33 * a25 * a52 - a14 * a33 * a42 * a51 * a25 - a23 * a32 * a41 * a15 * a54 + a23 * a32 * a15 * a51 * a44 + a23 * a41 * a15 * a34 * a52 - a23 * a15 * a42 * a51 * a34 + a32 * a41 * a15 * a24 * a53 - a32 * a15 * a24 * a51 * a43 - a41 * a15 * a24 * a33 * a52 + a15 * a24 * a33 * a42 * a51;
}

void GeogebraCommonKernelStatisticsRegressionMath_doSumsWithInt_(GeogebraCommonKernelStatisticsRegressionMath *self, jint degree) {
  jdouble x, y, xx, xy;
  self->sigmax_ = self->sigmax2_ = self->sigmax3_ = self->sigmax4_ = self->sigmax5_ = self->sigmax6_ = self->sigmax7_ = self->sigmax8_ = self->sigmaxy_ = self->sigmax2y_ = self->sigmax3y_ = self->sigmax4y_ = self->sigmay_ = self->sigmay2_ = 0.0;
  for (jint i = 0; i < self->size_; i++) {
    x = IOSDoubleArray_Get(nil_chk(self->xlist_), i);
    y = IOSDoubleArray_Get(nil_chk(self->ylist_), i);
    xx = x * x;
    xy = x * y;
    switch (degree) {
      case 4:
      self->sigmax4y_ += x * xx * xy;
      self->sigmax7_ += xx * xx * xx * x;
      self->sigmax8_ += xx * xx * xx * xx;
      case 3:
      self->sigmax3y_ += xx * xy;
      self->sigmax5_ += xx * xx * x;
      self->sigmax6_ += xx * xx * xx;
      case 2:
      self->sigmax2y_ += xx * y;
      self->sigmax3_ += xx * x;
      self->sigmax4_ += xx * xx;
      case 1:
      self->sigmay2_ += y * y;
      default:
      self->sigmax_ += x;
      self->sigmax2_ += xx;
      self->sigmaxy_ += xy;
      self->sigmay_ += y;
    }
  }
}

void GeogebraCommonKernelStatisticsRegressionMath_getPoints(GeogebraCommonKernelStatisticsRegressionMath *self) {
  IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelGeosGeoElement *geoelement;
  GeogebraCommonKernelStatisticsRegressionMath_setAndConsume_xlist_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  GeogebraCommonKernelStatisticsRegressionMath_setAndConsume_ylist_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  for (jint i = 0; i < self->size_; i++) {
    geoelement = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoelement)) isGeoPoint]) {
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geoelement, [GeogebraCommonKernelGeosGeoPoint class])) getInhomCoordsWithDoubleArray:xy];
      *IOSDoubleArray_GetRef(self->xlist_, i) = IOSDoubleArray_Get(xy, 0);
      *IOSDoubleArray_GetRef(self->ylist_, i) = IOSDoubleArray_Get(xy, 1);
    }
    else {
      self->error_ = YES;
      *IOSDoubleArray_GetRef(self->xlist_, i) = 0.0;
      *IOSDoubleArray_GetRef(self->ylist_, i) = 0.0;
    }
  }
}

void GeogebraCommonKernelStatisticsRegressionMath_makeMatrixArraysWithInt_(GeogebraCommonKernelStatisticsRegressionMath *self, jint degree) {
  GeogebraCommonKernelStatisticsRegressionMath_setAndConsume_marray_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ self->size_, degree + 1 }]);
  GeogebraCommonKernelStatisticsRegressionMath_setAndConsume_yarray_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ self->size_, 1 }]);
  for (jint i = 0; i < self->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->yarray_, i)), 0) = IOSDoubleArray_Get(nil_chk(self->ylist_), i);
    for (jint j = 0; j < (degree + 1); j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->marray_, i)), j) = JavaLangMath_powWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->xlist_), i), j);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsRegressionMath)
