//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDefined.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDefined.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"

@interface GeogebraCommonKernelAlgosAlgoDefined () {
 @public
  GeogebraCommonKernelGeosGeoElement *inputGeo_;
  GeogebraCommonKernelGeosGeoBoolean *outputBoolean_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDefined, inputGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDefined, outputBoolean_, GeogebraCommonKernelGeosGeoBoolean *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDefined_compute(GeogebraCommonKernelAlgosAlgoDefined *self);

@implementation GeogebraCommonKernelAlgosAlgoDefined

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inputGeo {
  GeogebraCommonKernelAlgosAlgoDefined_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, inputGeo);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Defined();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputGeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputBoolean_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoBoolean *)getResult {
  return outputBoolean_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDefined_compute(self);
}

- (void)dealloc {
  RELEASE_(inputGeo_);
  RELEASE_(outputBoolean_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoDefined", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outputBoolean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDefined = { 2, "AlgoDefined", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDefined;
}

@end

void GeogebraCommonKernelAlgosAlgoDefined_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoDefined *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inputGeo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDefined_set_inputGeo_(self, inputGeo);
  GeogebraCommonKernelAlgosAlgoDefined_setAndConsume_outputBoolean_(self, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDefined_compute(self);
  [self->outputBoolean_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDefined *new_GeogebraCommonKernelAlgosAlgoDefined_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inputGeo) {
  GeogebraCommonKernelAlgosAlgoDefined *self = [GeogebraCommonKernelAlgosAlgoDefined alloc];
  GeogebraCommonKernelAlgosAlgoDefined_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, inputGeo);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDefined_compute(GeogebraCommonKernelAlgosAlgoDefined *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inputGeo_)) isGeoPoint]) {
    id<GeogebraCommonKernelKernelNDGeoPointND> p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(self->inputGeo_, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:[self->inputGeo_ isDefined] && ![p isInfinite]];
    return;
  }
  else if ([self->inputGeo_ isGeoVector]) {
    id<GeogebraCommonKernelKernelNDGeoVectorND> v = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(self->inputGeo_, @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
    [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:[self->inputGeo_ isDefined] && ![v isInfinite]];
    return;
  }
  else if ([self->inputGeo_ isGeoFunction]) {
    if ([((NSString *) nil_chk([self->inputGeo_ toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"?"]) {
      [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:NO];
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->outputBoolean_)) setValueWithBoolean:[self->inputGeo_ isDefined]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDefined)
