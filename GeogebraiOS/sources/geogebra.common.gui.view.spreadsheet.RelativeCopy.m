//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/spreadsheet/RelativeCopy.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/main/settings/SpreadsheetSettings.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonGuiViewSpreadsheetRelativeCopy ()

+ (jboolean)isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cellRange;

+ (void)updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)exp
                                                                      withInt:(jint)dx
                                                                      withInt:(jint)dy;

+ (GeogebraCommonKernelGeosGeoElement *)prepareNewValueWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                         withNSString:(NSString *)name
                                                                         withNSString:(NSString *)inputText;

+ (GeogebraCommonKernelGeosGeoElement *)updateOldValueWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldValue
                                                                        withNSString:(NSString *)name
                                                                        withNSString:(NSString *)text;

+ (jboolean)isStandardNumberWithNSString:(NSString *)s;

@end

__attribute__((unused)) static jboolean GeogebraCommonGuiViewSpreadsheetRelativeCopy_isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange_(GeogebraCommonGuiViewSpreadsheetCellRange *cellRange);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(GeogebraCommonKernelArithmeticValidExpression *exp, jint dx, jint dy);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *name, NSString *inputText);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateOldValueWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelGeosGeoElement *oldValue, NSString *name, NSString *text);

__attribute__((unused)) static jboolean GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(NSString *s);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiViewSpreadsheetRelativeCopy)

ComGoogleGwtRegexpSharedRegExp *GeogebraCommonGuiViewSpreadsheetRelativeCopy_pattern2_;

@implementation GeogebraCommonGuiViewSpreadsheetRelativeCopy

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel0 {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initWithGeogebraCommonKernelKernel_(self, kernel0);
  return self;
}

- (jboolean)doDragCopyWithInt:(jint)sx1
                      withInt:(jint)sy1
                      withInt:(jint)sx2
                      withInt:(jint)sy2
                      withInt:(jint)dx1
                      withInt:(jint)dy1
                      withInt:(jint)dx2
                      withInt:(jint)dy2 {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
  @try {
    jboolean success = NO;
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) startCollectingRedefineCalls];
    jboolean patternOK = GeogebraCommonGuiViewSpreadsheetRelativeCopy_isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange_([new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, sx1, sy1, sx2, sy2) autorelease]);
    if ((sx1 == dx1) && (sx2 == dx2)) {
      if (dy2 < sy1) {
        if (((sy1 + 1) == sy2) && patternOK) {
          for (jint x = sx1; x <= sx2; ++x) {
            GeogebraCommonKernelGeosGeoElement *v1 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, sy1);
            GeogebraCommonKernelGeosGeoElement *v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, sy2);
            if ((v1 == nil) || (v2 == nil)) {
              continue;
            }
            for (jint y = dy2; y >= dy1; --y) {
              GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y);
              if (vOld != nil && [vOld isFixed]) {
                break;
              }
              GeogebraCommonKernelGeosGeoElement *v3 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y + 2);
              GeogebraCommonKernelGeosGeoElement *v4 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y + 1);
              NSString *vs1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v3)) isGeoFunction] ? @"(x)" : @"";
              NSString *vs2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v4)) isGeoFunction] ? @"(x)" : @"";
              NSString *d0 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x, y + 2), vs1);
              NSString *d1 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x, y + 1), vs2);
              NSString *text = JreStrcat("$$C$", @"=2*", d1, '-', d0);
              GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, text, v4, x, y);
            }
          }
        }
        else {
          [self doCopyVerticalNoStoringUndoInfo1WithInt:sx1 withInt:sx2 withInt:sy1 withInt:dy1 withInt:dy2];
        }
        success = YES;
      }
      else if (dy1 > sy2) {
        if (((sy1 + 1) == sy2) && patternOK) {
          for (jint x = sx1; x <= sx2; ++x) {
            GeogebraCommonKernelGeosGeoElement *v1 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, sy1);
            GeogebraCommonKernelGeosGeoElement *v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, sy2);
            if ((v1 == nil) || (v2 == nil)) {
              continue;
            }
            for (jint y = dy1; y <= dy2; ++y) {
              GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y);
              if (vOld != nil && [vOld isFixed]) {
                break;
              }
              GeogebraCommonKernelGeosGeoElement *v3 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y - 2);
              GeogebraCommonKernelGeosGeoElement *v4 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y - 1);
              NSString *vs1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v3)) isGeoFunction] ? @"(x)" : @"";
              NSString *vs2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v4)) isGeoFunction] ? @"(x)" : @"";
              NSString *d0 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x, y - 2), vs1);
              NSString *d1 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x, y - 1), vs2);
              NSString *text = JreStrcat("$$C$", @"=2*", d1, '-', d0);
              GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, text, v4, x, y);
            }
          }
        }
        else {
          [self doCopyVerticalNoStoringUndoInfo1WithInt:sx1 withInt:sx2 withInt:sy2 withInt:dy1 withInt:dy2];
        }
        success = YES;
      }
    }
    else if ((sy1 == dy1) && (sy2 == dy2)) {
      if (dx2 < sx1) {
        if (((sx1 + 1) == sx2) && patternOK) {
          for (jint y = sy1; y <= sy2; ++y) {
            GeogebraCommonKernelGeosGeoElement *v1 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, sx1, y);
            GeogebraCommonKernelGeosGeoElement *v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, sx2, y);
            if ((v1 == nil) || (v2 == nil)) {
              continue;
            }
            for (jint x = dx2; x >= dx1; --x) {
              GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y);
              if (vOld != nil && [vOld isFixed]) {
                break;
              }
              GeogebraCommonKernelGeosGeoElement *v3 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x + 2, y);
              GeogebraCommonKernelGeosGeoElement *v4 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x + 1, y);
              NSString *vs1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v3)) isGeoFunction] ? @"(x)" : @"";
              NSString *vs2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v4)) isGeoFunction] ? @"(x)" : @"";
              NSString *d0 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x + 2, y), vs1);
              NSString *d1 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x + 1, y), vs2);
              NSString *text = JreStrcat("$$C$", @"=2*", d1, '-', d0);
              GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, text, v4, x, y);
            }
          }
        }
        else {
          [self doCopyHorizontalNoStoringUndoInfo1WithInt:sy1 withInt:sy2 withInt:sx1 withInt:dx1 withInt:dx2];
        }
        success = YES;
      }
      else if (dx1 > sx2) {
        if (((sx1 + 1) == sx2) && patternOK) {
          for (jint y = sy1; y <= sy2; ++y) {
            GeogebraCommonKernelGeosGeoElement *v1 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, sx1, y);
            GeogebraCommonKernelGeosGeoElement *v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, sx2, y);
            if ((v1 == nil) || (v2 == nil)) {
              continue;
            }
            for (jint x = dx1; x <= dx2; ++x) {
              GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x, y);
              if (vOld != nil && [vOld isFixed]) {
                break;
              }
              GeogebraCommonKernelGeosGeoElement *v3 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x - 2, y);
              GeogebraCommonKernelGeosGeoElement *v4 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x - 1, y);
              NSString *vs1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v3)) isGeoFunction] ? @"(x)" : @"";
              NSString *vs2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(v4)) isGeoFunction] ? @"(x)" : @"";
              NSString *d0 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x - 2, y), vs1);
              NSString *d1 = JreStrcat("$$", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(x - 1, y), vs2);
              NSString *text = JreStrcat("$$C$", @"=2*", d1, '-', d0);
              GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, text, v4, x, y);
            }
          }
        }
        else {
          [self doCopyHorizontalNoStoringUndoInfo1WithInt:sy1 withInt:sy2 withInt:sx2 withInt:dx1 withInt:dx2];
        }
        success = YES;
      }
    }
    [cons processCollectedRedefineCalls];
    if (success) {
      return YES;
    }
    NSString *msg = JreStrcat("$I$I$I$I$I$I$I$I$", @"sx1 = ", sx1, @"\x0d\nsy1 = ", sy1, @"\x0d\nsx2 = ", sx2, @"\x0d\nsy2 = ", sy2, @"\x0d\ndx1 = ", dx1, @"\x0d\ndy1 = ", dy1, @"\x0d\ndx2 = ", dx2, @"\x0d\ndy2 = ", dy2, @"\x0d\n");
    @throw [new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Error from RelativeCopy.doCopy:\x0d\n", msg)) autorelease];
  }
  @catch (JavaLangException *ex) {
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
    return NO;
  }
  @finally {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) stopCollectingRedefineCalls];
    [app_ setDefaultCursor];
  }
}

+ (jboolean)isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cellRange {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange_(cellRange);
}

- (void)doCopyVerticalNoStoringUndoInfo1WithInt:(jint)x1
                                        withInt:(jint)x2
                                        withInt:(jint)sy
                                        withInt:(jint)dy1
                                        withInt:(jint)dy2 {
  JavaUtilTreeSet *tree = [new_JavaUtilTreeSet_init() autorelease];
  for (jint x = x1; x <= x2; ++x) {
    jint ix = x - x1;
    GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, x1 + ix, sy);
    if (cell != nil) {
      [tree addWithId:cell];
    }
  }
  for (jint y = dy1; y <= dy2; ++y) {
    jint iy = y - dy1;
    id<JavaUtilIterator> iterator = [tree iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *geo = ([iterator next]);
      if (geo != nil) {
        GeogebraCommonAwtGPoint *p = [geo getSpreadsheetCoords];
        GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, ((GeogebraCommonAwtGPoint *) nil_chk(p))->x_, dy1 + iy);
        if (vOld != nil && [vOld isFixed]) {
          continue;
        }
        GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, geo, GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, p->x_, dy1 + iy), 0, y - sy);
      }
    }
  }
}

- (void)doCopyHorizontalNoStoringUndoInfo1WithInt:(jint)y1
                                          withInt:(jint)y2
                                          withInt:(jint)sx
                                          withInt:(jint)dx1
                                          withInt:(jint)dx2 {
  JavaUtilTreeSet *tree = [new_JavaUtilTreeSet_init() autorelease];
  for (jint y = y1; y <= y2; ++y) {
    jint iy = y - y1;
    GeogebraCommonKernelGeosGeoElement *cell = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, sx, y1 + iy);
    if (cell != nil) {
      [tree addWithId:cell];
    }
  }
  for (jint x = dx1; x <= dx2; ++x) {
    jint ix = x - dx1;
    id<JavaUtilIterator> iterator = [tree iterator];
    while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *geo = ([iterator next]);
      if (geo != nil) {
        GeogebraCommonAwtGPoint *p = [geo getSpreadsheetCoords];
        GeogebraCommonKernelGeosGeoElement *vOld = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, dx1 + ix, ((GeogebraCommonAwtGPoint *) nil_chk(p))->y_);
        if (vOld != nil && [vOld isFixed]) {
          continue;
        }
        GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel_, app_, geo, GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, dx1 + ix, p->y_), x - sx, 0);
      }
    }
  }
}

+ (GeogebraCommonKernelGeosGeoElement *)doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                     withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)value
                                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldValue
                                                                                       withInt:(jint)dx
                                                                                       withInt:(jint)dy {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, value, oldValue, dx, dy);
}

+ (void)updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)exp
                                                                      withInt:(jint)dx
                                                                      withInt:(jint)dy {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(exp, dx, dy);
}

+ (NSString *)updateCellNameWithOffsetWithNSString:(NSString *)name
                                           withInt:(jint)dx
                                           withInt:(jint)dy {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(name, dx, dy);
}

+ (void)doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                     withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                  withNSString:(NSString *)text
                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoForStyle
                                                       withInt:(jint)column
                                                       withInt:(jint)row {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, text, geoForStyle, column, row);
}

+ (NSString *)replaceAllWithComGoogleGwtRegexpSharedRegExp:(ComGoogleGwtRegexpSharedRegExp *)spreadsheetpattern
                                              withNSString:(NSString *)text
                                              withNSString:(NSString *)before
                                              withNSString:(NSString *)after {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_replaceAllWithComGoogleGwtRegexpSharedRegExp_withNSString_withNSString_withNSString_(spreadsheetpattern, text, before, after);
}

+ (IOSObjectArray *)getDependentObjectsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_getDependentObjectsWithGeogebraCommonKernelGeosGeoElement_(geo);
}

+ (IOSObjectArray *)getValuesWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                               withInt:(jint)column1
                                               withInt:(jint)row1
                                               withInt:(jint)column2
                                               withInt:(jint)row2 {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValuesWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app, column1, row1, column2, row2);
}

+ (GeogebraCommonKernelGeosGeoElement *)getValueWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                              withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)point {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withGeogebraCommonAwtGPoint_(app, point);
}

+ (GeogebraCommonKernelGeosGeoElement *)getValueWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                                  withInt:(jint)column
                                                                  withInt:(jint)row {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app, column, row);
}

+ (GeogebraCommonKernelGeosGeoElement *)prepareNewValueWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                         withNSString:(NSString *)name
                                                                         withNSString:(NSString *)inputText {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(kernel, name, inputText);
}

+ (GeogebraCommonKernelGeosGeoElement *)updateOldValueWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldValue
                                                                        withNSString:(NSString *)name
                                                                        withNSString:(NSString *)text {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateOldValueWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(kernel, oldValue, name, text);
}

+ (GeogebraCommonKernelGeosGeoElement *)prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                                       withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                                                                    withNSString:(NSString *)inputText
                                                                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldValue
                                                                                                         withInt:(jint)column
                                                                                                         withInt:(jint)row {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, inputText, oldValue, column, row);
}

+ (jboolean)isNumberWithNSString:(NSString *)str {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_isNumberWithNSString_(str);
}

+ (jboolean)isStandardNumberWithNSString:(NSString *)s {
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(s);
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiViewSpreadsheetRelativeCopy class]) {
    JreStrongAssign(&GeogebraCommonGuiViewSpreadsheetRelativeCopy_pattern2_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"(::|\\$)([A-Z]+)(::|\\$)([0-9]+)"));
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiViewSpreadsheetRelativeCopy)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "RelativeCopy", NULL, 0x1, NULL, NULL },
    { "doDragCopyWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:", "doDragCopy", "Z", 0x1, NULL, NULL },
    { "isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange:", "isPatternSource", "Z", 0xa, NULL, NULL },
    { "doCopyVerticalNoStoringUndoInfo1WithInt:withInt:withInt:withInt:withInt:", "doCopyVerticalNoStoringUndoInfo1", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "doCopyHorizontalNoStoringUndoInfo1WithInt:withInt:withInt:withInt:withInt:", "doCopyHorizontalNoStoringUndoInfo1", "V", 0x1, "Ljava.lang.Exception;", NULL },
    { "doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel:withGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "doCopyNoStoringUndoInfo0", "Lgeogebra.common.kernel.geos.GeoElement;", 0x9, "Ljava.lang.Exception;", NULL },
    { "updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression:withInt:withInt:", "updateCellReferences", "V", 0xa, NULL, NULL },
    { "updateCellNameWithOffsetWithNSString:withInt:withInt:", "updateCellNameWithOffset", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel:withGeogebraCommonMainApp:withNSString:withGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "doCopyNoStoringUndoInfo1", "V", 0x9, "Ljava.lang.Exception;", NULL },
    { "replaceAllWithComGoogleGwtRegexpSharedRegExp:withNSString:withNSString:withNSString:", "replaceAll", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getDependentObjectsWithGeogebraCommonKernelGeosGeoElement:", "getDependentObjects", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x9, NULL, NULL },
    { "getValuesWithGeogebraCommonMainApp:withInt:withInt:withInt:withInt:", "getValues", "[[Lgeogebra.common.kernel.geos.GeoElement;", 0x9, NULL, NULL },
    { "getValueWithGeogebraCommonMainApp:withGeogebraCommonAwtGPoint:", "getValue", "Lgeogebra.common.kernel.geos.GeoElement;", 0x9, NULL, NULL },
    { "getValueWithGeogebraCommonMainApp:withInt:withInt:", "getValue", "Lgeogebra.common.kernel.geos.GeoElement;", 0x9, NULL, NULL },
    { "prepareNewValueWithGeogebraCommonKernelKernel:withNSString:withNSString:", "prepareNewValue", "Lgeogebra.common.kernel.geos.GeoElement;", 0xa, "Ljava.lang.Exception;", NULL },
    { "updateOldValueWithGeogebraCommonKernelKernel:withGeogebraCommonKernelGeosGeoElement:withNSString:withNSString:", "updateOldValue", "Lgeogebra.common.kernel.geos.GeoElement;", 0xa, "Ljava.lang.Exception;", NULL },
    { "prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel:withGeogebraCommonMainApp:withNSString:withGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "prepareAddingValueToTableNoStoringUndoInfo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x9, "Ljava.lang.Exception;", NULL },
    { "isNumberWithNSString:", "isNumber", "Z", 0x9, NULL, NULL },
    { "isStandardNumberWithNSString:", "isStandardNumber", "Z", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x0, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "pattern2_", NULL, 0x1c, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonGuiViewSpreadsheetRelativeCopy_pattern2_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetRelativeCopy = { 2, "RelativeCopy", "geogebra.common.gui.view.spreadsheet", NULL, 0x1, 19, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetRelativeCopy;
}

@end

void GeogebraCommonGuiViewSpreadsheetRelativeCopy_initWithGeogebraCommonKernelKernel_(GeogebraCommonGuiViewSpreadsheetRelativeCopy *self, GeogebraCommonKernelKernel *kernel0) {
  NSObject_init(self);
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_set_kernel_(self, kernel0);
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication]);
}

GeogebraCommonGuiViewSpreadsheetRelativeCopy *new_GeogebraCommonGuiViewSpreadsheetRelativeCopy_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel0) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy *self = [GeogebraCommonGuiViewSpreadsheetRelativeCopy alloc];
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initWithGeogebraCommonKernelKernel_(self, kernel0);
  return self;
}

jboolean GeogebraCommonGuiViewSpreadsheetRelativeCopy_isPatternSourceWithGeogebraCommonGuiViewSpreadsheetCellRange_(GeogebraCommonGuiViewSpreadsheetCellRange *cellRange) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cellRange)) hasEmptyCells]) {
    return NO;
  }
  JavaUtilArrayList *list = [cellRange toGeoList];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(list)) {
    if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric] || [geo isGeoFunction] || [geo isGeoPoint])) {
      return NO;
    }
  }
  return YES;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo0WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(GeogebraCommonKernelKernel *kernel, GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoElement *value, GeogebraCommonKernelGeosGeoElement *oldValue, jint dx, jint dy) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  if (value == nil) {
    if (oldValue != nil) {
      ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) execWithNSString:[oldValue getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      jint column = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher);
      jint row = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher);
      GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, nil, oldValue, column, row);
    }
    return nil;
  }
  NSString *text = nil;
  GeogebraCommonKernelStringTemplate *highPrecision = GeogebraCommonKernelStringTemplate_get_maxPrecision_();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(value)) isPointOnPath] || [value isPointInRegion]) {
    text = [value getCommandDescriptionWithGeogebraCommonKernelStringTemplate:highPrecision];
  }
  else if ([value isChangeable]) {
    text = [value toValueStringWithGeogebraCommonKernelStringTemplate:highPrecision];
  }
  else {
    text = [value getCommandDescriptionWithGeogebraCommonKernelStringTemplate:highPrecision];
  }
  if ([value isGeoText] && ![((GeogebraCommonKernelGeosGeoText *) check_class_cast(value, [GeogebraCommonKernelGeosGeoText class])) isTextCommand]) {
    if ([value isIndependent]) {
      text = JreStrcat("C$C", '"', text, '"');
    }
    else {
      GeogebraCommonKernelGeosGeoText *testGeoText = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraProcessor])) evaluateToTextWithNSString:text withBoolean:NO withBoolean:NO];
      if (testGeoText == nil) {
        text = JreStrcat("$$", text, @"+\"\"");
      }
    }
  }
  if ([value isGeoFunction] && [((NSString *) nil_chk(text)) isEqual:@""]) {
    text = [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(value, [GeogebraCommonKernelGeosGeoFunction class])) toSymbolicStringWithGeogebraCommonKernelStringTemplate:highPrecision];
  }
  jboolean freeImage = NO;
  if ([value isGeoImage]) {
    GeogebraCommonKernelGeosGeoImage *image = (GeogebraCommonKernelGeosGeoImage *) check_class_cast(value, [GeogebraCommonKernelGeosGeoImage class]);
    if ([image getParentAlgorithm] == nil) {
      freeImage = YES;
    }
  }
  jboolean oldFlag = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) isUsingInternalCommandNames];
  [kernel setUseInternalCommandNamesWithBoolean:YES];
  GeogebraCommonKernelArithmeticValidExpression *exp = [((GeogebraCommonKernelParserParser *) nil_chk([kernel getParser])) parseGeoGebraExpressionWithNSString:text];
  [kernel setUseInternalCommandNamesWithBoolean:oldFlag];
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(exp, dx, dy);
  text = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:highPrecision];
  GeogebraCommonKernelGeosGeoBoolean *bool_ = [value getShowObjectCondition];
  NSString *boolText = nil, *oldBoolText = nil;
  if (bool_ != nil) {
    if ([bool_ isChangeable]) {
      oldBoolText = [bool_ toValueStringWithGeogebraCommonKernelStringTemplate:highPrecision];
    }
    else {
      oldBoolText = [bool_ getCommandDescriptionWithGeogebraCommonKernelStringTemplate:highPrecision];
    }
  }
  GeogebraCommonKernelGeosGeoList *dynamicColorList = [value getColorFunction];
  NSString *colorText = nil, *oldColorText = nil;
  if (dynamicColorList != nil) {
    if ([dynamicColorList isChangeable]) {
      oldColorText = [dynamicColorList toValueStringWithGeogebraCommonKernelStringTemplate:highPrecision];
    }
    else {
      oldColorText = [dynamicColorList getCommandDescriptionWithGeogebraCommonKernelStringTemplate:highPrecision];
    }
  }
  if ([((NSString *) nil_chk(text)) isEqual:@""]) {
    text = @"\"\"";
  }
  if (![value isGeoText] && [((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getSettings])) getSpreadsheet])) equalsRequired]) {
    text = JreStrcat("C$", '=', text);
  }
  jint column0 = -1, row0 = -1;
  if (value->labelSet_) {
    ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) execWithNSString:[value getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    column0 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher);
    row0 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher);
  }
  else if ([value getSpreadsheetCoords] != nil) {
    column0 = ((GeogebraCommonAwtGPoint *) nil_chk([value getSpreadsheetCoords]))->x_;
    row0 = ((GeogebraCommonAwtGPoint *) nil_chk([value getSpreadsheetCoords]))->y_;
  }
  GeogebraCommonKernelGeosGeoElement *value2;
  if (freeImage || [value isGeoButton]) {
    value2 = [value copy__];
    if (oldValue != nil) {
      [oldValue remove];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(value2)) setLabelWithNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column0 + dx, row0 + dy)];
    [value2 updateRepaint];
  }
  else {
    value2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, text, oldValue, column0 + dx, row0 + dy);
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(value2)) setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:value withBoolean:NO];
  [value2 setAuxiliaryObjectWithBoolean:YES];
  IOSObjectArray *startPoints = nil;
  if ([GeogebraCommonKernelLocateable_class_() isInstance:value]) {
    id<GeogebraCommonKernelLocateable> loc = (id<GeogebraCommonKernelLocateable>) check_protocol_cast(value, @protocol(GeogebraCommonKernelLocateable));
    IOSObjectArray *pts = [loc getStartPoints];
    if (pts != nil) {
      startPoints = [IOSObjectArray arrayWithLength:pts->size_ type:NSString_class_()];
      for (jint i = 0; i < pts->size_; i++) {
        IOSObjectArray_Set(startPoints, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(pts, i), [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:highPrecision]);
        if ([((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) testWithNSString:IOSObjectArray_Get(startPoints, i)]) {
          IOSObjectArray_Set(startPoints, i, GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(IOSObjectArray_Get(startPoints, i), dx, dy));
        }
      }
    }
  }
  if (oldBoolText != nil) {
    exp = [((GeogebraCommonKernelParserParser *) nil_chk([kernel getParser])) parseGeoGebraExpressionWithNSString:oldBoolText];
    GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(exp, dx, dy);
    boolText = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()];
  }
  if ((boolText != nil)) {
    @try {
      GeogebraCommonKernelGeosGeoBoolean *newConditionToShowObject = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) evaluateToBooleanWithNSString:boolText];
      [value2 setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:newConditionToShowObject];
      [value2 update];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
  if (oldColorText != nil) {
    exp = [((GeogebraCommonKernelParserParser *) nil_chk([kernel getParser])) parseGeoGebraExpressionWithNSString:oldColorText];
    GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(exp, dx, dy);
    colorText = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(exp)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()];
  }
  if ((colorText != nil)) {
    @try {
      GeogebraCommonKernelGeosGeoList *newColorFunction = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) evaluateToListWithNSString:colorText];
      [value2 setColorFunctionWithGeogebraCommonKernelGeosGeoList:newColorFunction];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      return nil;
    }
  }
  if (startPoints != nil) {
    for (jint i = 0; i < startPoints->size_; i++) {
      [((id<GeogebraCommonKernelLocateable>) check_protocol_cast(value2, @protocol(GeogebraCommonKernelLocateable))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) evaluateToPointWithNSString:IOSObjectArray_Get(startPoints, i) withBoolean:NO withBoolean:YES] withInt:i];
    }
    [value2 update];
  }
  return value2;
}

void GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellReferencesWithGeogebraCommonKernelArithmeticValidExpression_withInt_withInt_(GeogebraCommonKernelArithmeticValidExpression *exp, jint dx, jint dy) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer *replacer = [new_GeogebraCommonKernelArithmeticTraversing_SpreadsheetVariableRenamer_initWithInt_withInt_(dx, dy) autorelease];
  [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(exp)) traverseWithGeogebraCommonKernelArithmeticTraversing:replacer];
}

NSString *GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateCellNameWithOffsetWithNSString_withInt_withInt_(NSString *name, jint dx, jint dy) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  ComGoogleGwtRegexpSharedMatchResult *m = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_get_spreadsheetPattern_())) execWithNSString:name];
  NSString *m1 = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(m)) getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN_$];
  NSString *m2 = [m getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN];
  NSString *m3 = [m getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW_$];
  NSString *m4 = [m getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW];
  if ([@"" isEqual:m1]) {
    jint column = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(m);
    if (column > -1 && dx + column > 0) {
      m2 = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(dx + column);
    }
  }
  if ([@"" isEqual:m3]) {
    jint row = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(m);
    if (row > -1 && dy + row + 1 >= 1) {
      m4 = JreStrcat("I", (dy + row + 1));
    }
  }
  JavaLangStringBuilder *newName = [new_JavaLangStringBuilder_init() autorelease];
  [newName appendWithNSString:m1];
  [newName appendWithNSString:m2];
  [newName appendWithNSString:m3];
  [newName appendWithNSString:m4];
  return [newName description];
}

void GeogebraCommonGuiViewSpreadsheetRelativeCopy_doCopyNoStoringUndoInfo1WithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(GeogebraCommonKernelKernel *kernel, GeogebraCommonMainApp *app, NSString *text, GeogebraCommonKernelGeosGeoElement *geoForStyle, jint column, jint row) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  GeogebraCommonKernelGeosGeoElement *oldValue = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app, column, row);
  if (text == nil) {
    if (oldValue != nil) {
      GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, nil, oldValue, column, row);
    }
    return;
  }
  GeogebraCommonKernelGeosGeoElement *value2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(kernel, app, text, oldValue, column, row);
  if (geoForStyle != nil) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(value2)) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geoForStyle];
  }
}

NSString *GeogebraCommonGuiViewSpreadsheetRelativeCopy_replaceAllWithComGoogleGwtRegexpSharedRegExp_withNSString_withNSString_withNSString_(ComGoogleGwtRegexpSharedRegExp *spreadsheetpattern, NSString *text, NSString *before, NSString *after) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  JavaLangStringBuilder *pre = [new_JavaLangStringBuilder_init() autorelease];
  NSString *post = text;
  jint end = 0;
  ComGoogleGwtRegexpSharedMatchResult *matcher;
  do {
    matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(spreadsheetpattern)) execWithNSString:post];
    if (matcher != nil) {
      NSString *s = [matcher getGroupWithInt:0];
      if ([((NSString *) nil_chk(s)) isEqual:before]) {
        jint start = [((NSString *) nil_chk(post)) indexOfString:s];
        [pre appendWithNSString:[post substring:0 endIndex:start]];
        [pre appendWithNSString:after];
        end = start + ((jint) [s length]);
        post = [post substring:end];
      }
      else {
        jint start = [((NSString *) nil_chk(post)) indexOfString:s];
        [pre appendWithNSString:[post substring:0 endIndex:start]];
        [pre appendWithNSString:s];
        end = start + ((jint) [s length]);
        post = [post substring:end];
      }
    }
  }
  while (matcher != nil);
  [pre appendWithNSString:post];
  return [pre description];
}

IOSObjectArray *GeogebraCommonGuiViewSpreadsheetRelativeCopy_getDependentObjectsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent]) {
    return [IOSObjectArray arrayWithLength:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  JavaUtilTreeSet *geoTree = [geo getAllPredecessors];
  return [((JavaUtilTreeSet *) nil_chk(geoTree)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:GeogebraCommonKernelGeosGeoElement_class_()]];
}

IOSObjectArray *GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValuesWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(GeogebraCommonMainApp *app, jint column1, jint row1, jint column2, jint row2) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  IOSObjectArray *values = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ (column2 - column1) + 1, (row2 - row1) + 1 } type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint r = row1; r <= row2; ++r) {
    for (jint c = column1; c <= column2; ++c) {
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(values, c - column1)), r - row1, GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app, c, r));
    }
  }
  return values;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withGeogebraCommonAwtGPoint_(GeogebraCommonMainApp *app, GeogebraCommonAwtGPoint *point) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  return GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app, [((GeogebraCommonAwtGPoint *) nil_chk(point)) getX], [point getY]);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(GeogebraCommonMainApp *app, jint column, jint row) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  GeogebraCommonMainSpreadsheetTableModel *tableModel = [((GeogebraCommonMainApp *) nil_chk(app)) getSpreadsheetTableModel];
  if ((row < 0) || (row >= [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel)) getRowCount])) {
    return nil;
  }
  if ((column < 0) || (column >= [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel)) getColumnCount])) {
    return nil;
  }
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel)) getValueAtWithInt:row withInt:column], [GeogebraCommonKernelGeosGeoElement class]);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *name, NSString *inputText) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  NSString *text = inputText;
  if (text == nil) {
    return nil;
  }
  if (((jint) [((NSString *) nil_chk(text)) length]) > 0 && [text charAtWithInt:0] == '=') {
    text = [text substring:1];
  }
  text = [((NSString *) nil_chk(text)) trim];
  IOSObjectArray *newValues = nil;
  @try {
    if ([((NSString *) nil_chk(text)) isEqual:name]) {
      @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
    }
    newValues = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:text withBoolean:NO withBoolean:NO withBoolean:NO withBoolean:NO];
    if ([((NSString *) nil_chk(GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(text))) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(newValues), 0))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]] || [text isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, 0))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
      text = JreStrcat("$$$", name, @" = ", text);
      newValues = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:text withBoolean:NO];
    }
    GeogebraCommonKernelGeosGeoElement *autoCreateGeo = [kernel lookupLabelWithNSString:name];
    if (autoCreateGeo != nil) {
      jboolean circularDefinition = NO;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(newValues))->size_; i++) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, i))) isChildOfWithGeogebraCommonKernelGeosGeoElement:autoCreateGeo]) {
          circularDefinition = YES;
          break;
        }
      }
      if (circularDefinition) {
        [autoCreateGeo remove];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, 0))) remove];
        @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
      }
    }
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(newValues))->size_; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, i))) setAuxiliaryObjectWithBoolean:YES];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, i))) isGeoText]) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, i))) setEuclidianVisibleWithBoolean:NO];
      }
    }
    GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(name, newValues);
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *ce) {
    [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) showErrorWithNSString:@"CircularDefinition"];
    return nil;
  }
  @catch (JavaLangException *e) {
    if ([((NSString *) nil_chk(text)) hasPrefix:@"\""]) text = [text substring:1 endIndex:((jint) [text length]) - 2];
    text = JreStrcat("C$C", '"', ([((NSString *) nil_chk(text)) replace:@"\"" withSequence:@"\"+UnicodeToLetter[34]+\""]), '"');
    newValues = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:text withBoolean:NO];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(newValues), 0))) setLabelWithNSString:name];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, 0))) setEuclidianVisibleWithBoolean:NO];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(newValues, 0))) update];
  }
  return IOSObjectArray_Get(nil_chk(newValues), 0);
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateOldValueWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelGeosGeoElement *oldValue, NSString *name, NSString *text) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  NSString *text0 = text;
  if ([((NSString *) nil_chk(text)) charAtWithInt:0] == '=') {
    text = [text substring:1];
  }
  GeogebraCommonKernelGeosGeoElement *newValue = nil;
  @try {
    newValue = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraProcessor])) changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:oldValue withNSString:text withBoolean:YES withBoolean:NO];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newValue)) setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:oldValue withBoolean:YES];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldValue)) isAuxiliaryObject]) {
      [newValue setAuxiliaryObjectWithBoolean:YES];
    }
    if ([newValue getGeoClassType] == [oldValue getGeoClassType]) {
    }
    else {
      [((GeogebraCommonMainApp *) nil_chk([kernel getApplication])) refreshViews];
    }
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *cde) {
    [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) showErrorWithNSString:@"CircularDefinition"];
    return nil;
  }
  @catch (JavaLangThrowable *e) {
    {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldValue)) isGeoText]) {
        [((GeogebraCommonKernelGeosGeoText *) check_class_cast(oldValue, [GeogebraCommonKernelGeosGeoText class])) setTextStringWithNSString:text0];
        [oldValue updateCascade];
      }
      else if (![oldValue hasChildren]) {
        [oldValue remove];
        @try {
          newValue = GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(kernel, name, JreStrcat("C$C", '"', text0, '"'));
        }
        @catch (JavaLangThrowable *t) {
          newValue = GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(kernel, name, @"");
        }
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newValue)) setEuclidianVisibleWithBoolean:NO];
        [newValue update];
      }
      else {
        @throw [new_JavaLangException_initWithJavaLangThrowable_(e) autorelease];
      }
    }
  }
  return newValue;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareAddingValueToTableNoStoringUndoInfoWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_withNSString_withGeogebraCommonKernelGeosGeoElement_withInt_withInt_(GeogebraCommonKernelKernel *kernel, GeogebraCommonMainApp *app, NSString *inputText, GeogebraCommonKernelGeosGeoElement *oldValue, jint column, jint row) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  NSString *text = inputText;
  NSString *name = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
  if (text != nil) {
    text = [text trim];
    if (((jint) [((NSString *) nil_chk(text)) length]) == 0) {
      text = nil;
    }
  }
  if ([((GeogebraCommonMainSettingsSpreadsheetSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getSettings])) getSpreadsheet])) equalsRequired] && text != nil) {
    if (!(([text charAtWithInt:0] == '=') || GeogebraCommonGuiViewSpreadsheetRelativeCopy_isNumberWithNSString_(text))) {
      text = JreStrcat("C$C", '"', text, '"');
    }
  }
  if (text == nil) {
    if (oldValue != nil) {
      [oldValue remove];
    }
    return nil;
  }
  else if (oldValue == nil) {
    jboolean oldFlag = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) isUsingInternalCommandNames];
    @try {
      [kernel setUseInternalCommandNamesWithBoolean:YES];
      GeogebraCommonKernelGeosGeoElement *ret = GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(kernel, name, text);
      [kernel setUseInternalCommandNamesWithBoolean:oldFlag];
      return ret;
    }
    @catch (JavaLangThrowable *t) {
      [kernel setUseInternalCommandNamesWithBoolean:oldFlag];
      return GeogebraCommonGuiViewSpreadsheetRelativeCopy_prepareNewValueWithGeogebraCommonKernelKernel_withNSString_withNSString_(kernel, name, @"");
    }
  }
  else {
    return GeogebraCommonGuiViewSpreadsheetRelativeCopy_updateOldValueWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElement_withNSString_withNSString_(kernel, oldValue, name, text);
  }
}

jboolean GeogebraCommonGuiViewSpreadsheetRelativeCopy_isNumberWithNSString_(NSString *str) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  NSString *s = str;
  s = [((NSString *) nil_chk(s)) trim];
  if (s == nil || ((jint) [s length]) == 0) return NO;
  if ([s charAtWithInt:((jint) [((NSString *) nil_chk(s)) length]) - 1] == GeogebraCommonUtilUnicode_degreeChar || [s charAtWithInt:((jint) [s length]) - 1] == '%') {
    s = [s substring:0 endIndex:((jint) [s length]) - 1];
  }
  IOSObjectArray *s2 = [((NSString *) nil_chk(s)) split:@"E"];
  if (((IOSObjectArray *) nil_chk(s2))->size_ == 1) {
    return GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(IOSObjectArray_Get(s2, 0));
  }
  else if (s2->size_ == 2) {
    return GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(IOSObjectArray_Get(s2, 0)) && GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(IOSObjectArray_Get(s2, 1));
  }
  else return NO;
}

jboolean GeogebraCommonGuiViewSpreadsheetRelativeCopy_isStandardNumberWithNSString_(NSString *s) {
  GeogebraCommonGuiViewSpreadsheetRelativeCopy_initialize();
  if (s == nil || ((jint) [s length]) == 0) return NO;
  JavaLangCharacter *c = JavaLangCharacter_valueOfWithChar_([((NSString *) nil_chk(s)) charAtWithInt:0]);
  if (!(GeogebraCommonUtilStringUtil_isDigitWithChar_([c charValue]) || [c charValue] == '.' || [c charValue] == '-' || [c charValue] == '+' || [c charValue] == 0x2212)) {
    return NO;
  }
  jint decimalCount = 0;
  for (jint i = 1; i < ((jint) [s length]); i++) {
    c = JavaLangCharacter_valueOfWithChar_([s charAtWithInt:i]);
    if (GeogebraCommonUtilStringUtil_isDigitWithChar_([c charValue])) {
      continue;
    }
    if ([c charValue] == '.' && decimalCount == 0) {
      decimalCount++;
      continue;
    }
    return NO;
  }
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetRelativeCopy)
