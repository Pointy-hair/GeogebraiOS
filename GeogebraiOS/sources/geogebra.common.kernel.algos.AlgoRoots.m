//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRoots.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoGeoPointsFunction.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/roots/RealRootAdapter.h"
#include "geogebra/common/kernel/roots/RealRootUtil.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolver.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolverFactory.h"

#define GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS 0
#define GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS 1
#define GeogebraCommonKernelAlgosAlgoRoots_PIXELS_BETWEEN_SAMPLES 5
#define GeogebraCommonKernelAlgosAlgoRoots_MAX_SAMPLES 400
#define GeogebraCommonKernelAlgosAlgoRoots_MIN_SAMPLES 50
#define GeogebraCommonKernelAlgosAlgoRoots_DEBUG YES

@interface GeogebraCommonKernelAlgosAlgoRoots () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f0_, *f1_, *f2_, *diff_;
  id<GeogebraCommonKernelArithmeticNumberValue> left_;
  GeogebraCommonKernelGeosGeoElement *geoleft_;
  id<GeogebraCommonKernelArithmeticNumberValue> right_;
  GeogebraCommonKernelGeosGeoElement *georight_;
  jint type_;
}

- (void)compute2WithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f;

+ (jboolean)signChangedWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                    withDouble:(jdouble)x;

+ (void)debugWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, f0_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, f1_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, f2_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, diff_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, left_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, geoleft_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, right_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRoots, georight_, GeogebraCommonKernelGeosGeoElement *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, TYPE_ROOTS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, TYPE_INTERSECTIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, PIXELS_BETWEEN_SAMPLES, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, MAX_SAMPLES, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, MIN_SAMPLES, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoRoots, DEBUG, jboolean)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRoots_compute(GeogebraCommonKernelAlgosAlgoRoots *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRoots_compute2WithGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelGeosGeoFunction *f);

__attribute__((unused)) static jint GeogebraCommonKernelAlgosAlgoRoots_findNumberOfSamplesWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoRoots *self, jdouble l, jdouble r);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoRoots_signChangedWithGeogebraCommonKernelGeosGeoFunction_withDouble_(GeogebraCommonKernelGeosGeoFunction *f, jdouble x);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(NSString *s);

@implementation GeogebraCommonKernelAlgosAlgoRoots

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)function
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)left
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)right {
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, labels, function, left, right);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)function
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)left
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)right {
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, function, left, right);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)function
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)function2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)left
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)right {
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, labels, function, function2, left, right);
  return self;
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Roots();
}

- (IOSObjectArray *)getRootPoints {
  return [self getPoints];
}

- (void)setInputOutput {
  switch (type_) {
    case GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS:
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f0_)) toGeoElement]);
    IOSObjectArray_Set(input_, 1, geoleft_);
    IOSObjectArray_Set(input_, 2, georight_);
    break;
    case GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS:
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f1_)) toGeoElement]);
    IOSObjectArray_Set(input_, 1, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f2_)) toGeoElement]);
    IOSObjectArray_Set(input_, 2, geoleft_);
    IOSObjectArray_Set(input_, 3, georight_);
  }
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:[self getPoints]];
  [self noUndefinedPointsInAlgebraViewWithGeogebraCommonKernelGeosGeoPointArray:[self getPoints]];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoRoots_compute(self);
}

- (jdouble)yAtWithDouble:(jdouble)x {
  if (type_ == GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS) return 0;
  return [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f1_)) evaluateWithDouble:x];
}

- (void)compute2WithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAlgosAlgoRoots_compute2WithGeogebraCommonKernelGeosGeoFunction_(self, f);
}

+ (IOSDoubleArray *)findRootsWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                          withDouble:(jdouble)l
                                                          withDouble:(jdouble)r
                                                             withInt:(jint)samples {
  return GeogebraCommonKernelAlgosAlgoRoots_findRootsWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(f, l, r, samples);
}

+ (jdouble)calcSingleRootWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                      withDouble:(jdouble)left
                                                      withDouble:(jdouble)right {
  return GeogebraCommonKernelAlgosAlgoRoots_calcSingleRootWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(f, left, right);
}

- (jint)findNumberOfSamplesWithDouble:(jdouble)l
                           withDouble:(jdouble)r {
  return GeogebraCommonKernelAlgosAlgoRoots_findNumberOfSamplesWithDouble_withDouble_(self, l, r);
}

+ (jboolean)signChangedWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f
                                                    withDouble:(jdouble)x {
  return GeogebraCommonKernelAlgosAlgoRoots_signChangedWithGeogebraCommonKernelGeosGeoFunction_withDouble_(f, x);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

+ (void)debugWithNSString:(NSString *)s {
  GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(s);
}

+ (void)listArrayWithDoubleArray:(IOSDoubleArray *)a {
  GeogebraCommonKernelAlgosAlgoRoots_listArrayWithDoubleArray_(a);
}

+ (void)listLabelsWithNSStringArray:(IOSObjectArray *)a {
  GeogebraCommonKernelAlgosAlgoRoots_listLabelsWithNSStringArray_(a);
}

+ (void)listPointsWithGeogebraCommonKernelGeosGeoPointArray:(IOSObjectArray *)gpts {
  GeogebraCommonKernelAlgosAlgoRoots_listPointsWithGeogebraCommonKernelGeosGeoPointArray_(gpts);
}

+ (NSString *)testGeoPointXWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)geo
                                                     withDouble:(jdouble)answer {
  return GeogebraCommonKernelAlgosAlgoRoots_testGeoPointXWithGeogebraCommonKernelGeosGeoPoint_withDouble_(geo, answer);
}

- (void)dealloc {
  RELEASE_(f0_);
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(diff_);
  RELEASE_(left_);
  RELEASE_(geoleft_);
  RELEASE_(right_);
  RELEASE_(georight_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRoots", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRoots", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRoots", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "getRootPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "yAtWithDouble:", "yAt", "D", 0x4, NULL, NULL },
    { "compute2WithGeogebraCommonKernelGeosGeoFunction:", "compute2", "V", 0x12, NULL, NULL },
    { "findRootsWithGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:withInt:", "findRoots", "[D", 0x19, NULL, NULL },
    { "calcSingleRootWithGeogebraCommonKernelGeosGeoFunction:withDouble:withDouble:", "calcSingleRoot", "D", 0x19, NULL, NULL },
    { "findNumberOfSamplesWithDouble:withDouble:", "findNumberOfSamples", "I", 0x11, NULL, NULL },
    { "signChangedWithGeogebraCommonKernelGeosGeoFunction:withDouble:", "signChanged", "Z", 0x1a, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoRoots", NULL, 0x1, NULL, NULL },
    { "debugWithNSString:", "debug", "V", 0x1a, NULL, NULL },
    { "listArrayWithDoubleArray:", "listArray", "V", 0x19, NULL, NULL },
    { "listLabelsWithNSStringArray:", "listLabels", "V", 0x19, NULL, NULL },
    { "listPointsWithGeogebraCommonKernelGeosGeoPointArray:", "listPoints", "V", 0x19, NULL, NULL },
    { "testGeoPointXWithGeogebraCommonKernelGeosGeoPoint:withDouble:", "testGeoPointX", "Ljava.lang.String;", 0x19, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ROOTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS },
    { "TYPE_INTERSECTIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS },
    { "PIXELS_BETWEEN_SAMPLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRoots_PIXELS_BETWEEN_SAMPLES },
    { "MAX_SAMPLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRoots_MAX_SAMPLES },
    { "MIN_SAMPLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoRoots_MIN_SAMPLES },
    { "f0_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "diff_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "left_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "geoleft_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "right_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "georight_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "DEBUG__", "DEBUG", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonKernelAlgosAlgoRoots_DEBUG },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRoots = { 2, "AlgoRoots", "geogebra.common.kernel.algos", NULL, 0x1, 19, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRoots;
}

@end

void GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *function, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoGeoPointsFunction_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, ![((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive], function);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
  GeogebraCommonKernelAlgosAlgoRoots_set_f0_(self, function);
  GeogebraCommonKernelAlgosAlgoRoots_set_left_(self, left);
  GeogebraCommonKernelAlgosAlgoRoots_set_geoleft_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(left)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRoots_set_right_(self, right);
  GeogebraCommonKernelAlgosAlgoRoots_set_georight_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(right)) toGeoElement]);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRoots_compute(self);
  [self showOneRootInAlgebraView];
}

GeogebraCommonKernelAlgosAlgoRoots *new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *function, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoRoots *self = [GeogebraCommonKernelAlgosAlgoRoots alloc];
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, labels, function, left, right);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *function, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoGeoPointsFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, function);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
  GeogebraCommonKernelAlgosAlgoRoots_set_f0_(self, function);
  GeogebraCommonKernelAlgosAlgoRoots_set_left_(self, left);
  GeogebraCommonKernelAlgosAlgoRoots_set_geoleft_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(left)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRoots_set_right_(self, right);
  GeogebraCommonKernelAlgosAlgoRoots_set_georight_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(right)) toGeoElement]);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRoots_compute(self);
}

GeogebraCommonKernelAlgosAlgoRoots *new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *function, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoRoots *self = [GeogebraCommonKernelAlgosAlgoRoots alloc];
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, function, left, right);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *function, GeogebraCommonKernelGeosGeoFunction *function2, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoGeoPointsFunction_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, ![((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive], function);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
  GeogebraCommonKernelAlgosAlgoRoots_set_f1_(self, function);
  GeogebraCommonKernelAlgosAlgoRoots_set_f2_(self, function2);
  GeogebraCommonKernelAlgosAlgoRoots_set_left_(self, left);
  GeogebraCommonKernelAlgosAlgoRoots_set_geoleft_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(left)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRoots_set_right_(self, right);
  GeogebraCommonKernelAlgosAlgoRoots_set_georight_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(right)) toGeoElement]);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS;
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRoots_compute(self);
  [self showOneRootInAlgebraView];
}

GeogebraCommonKernelAlgosAlgoRoots *new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *function, GeogebraCommonKernelGeosGeoFunction *function2, id<GeogebraCommonKernelArithmeticNumberValue> left, id<GeogebraCommonKernelArithmeticNumberValue> right) {
  GeogebraCommonKernelAlgosAlgoRoots *self = [GeogebraCommonKernelAlgosAlgoRoots alloc];
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, labels, function, function2, left, right);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRoots_compute(GeogebraCommonKernelAlgosAlgoRoots *self) {
  jboolean ok = NO;
  switch (self->type_) {
    case GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS:
    ok = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f0_)) toGeoElement])) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoleft_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->georight_)) isDefined]);
    break;
    case GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS:
    ok = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f1_)) toGeoElement])) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) toGeoElement])) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoleft_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->georight_)) isDefined]);
    break;
  }
  if (!ok) {
    [self setPointsWithDoubleArray:[IOSDoubleArray arrayWithLength:1] withInt:0];
  }
  else {
    if (self->type_ == GeogebraCommonKernelAlgosAlgoRoots_TYPE_INTERSECTIONS) {
      GeogebraCommonKernelAlgosAlgoRoots_setAndConsume_diff_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(self->cons_));
      GeogebraCommonKernelAlgosAlgoRoots_set_diff_(self, GeogebraCommonKernelGeosGeoFunction_subtractWithGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(self->diff_, self->f1_, self->f2_));
      GeogebraCommonKernelAlgosAlgoRoots_compute2WithGeogebraCommonKernelGeosGeoFunction_(self, self->diff_);
    }
    else {
      GeogebraCommonKernelAlgosAlgoRoots_compute2WithGeogebraCommonKernelGeosGeoFunction_(self, self->f0_);
    }
  }
}

void GeogebraCommonKernelAlgosAlgoRoots_compute2WithGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelGeosGeoFunction *f) {
  jdouble l = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->left_)) getDouble];
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->right_)) getDouble];
  IOSDoubleArray *roots = [IOSDoubleArray arrayWithLength:0];
  jint numberofroots = 0;
  if (l > r) {
    jdouble tmp = l;
    l = r;
    r = tmp;
  }
  jint n = GeogebraCommonKernelAlgosAlgoRoots_findNumberOfSamplesWithDouble_withDouble_(self, l, r);
  jint m = JavaLangMath_maxWithInt_withInt_(n, 1);
  @try {
    do {
      roots = GeogebraCommonKernelAlgosAlgoRoots_findRootsWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(f, l, r, m);
      if (roots == nil) {
        numberofroots = 0;
      }
      else {
        numberofroots = roots->size_;
      }
      if (numberofroots < m / 2) {
        break;
      }
      m = m * 2;
    }
    while (m < GeogebraCommonKernelAlgosAlgoRoots_MAX_SAMPLES);
    if (m > GeogebraCommonKernelAlgosAlgoRoots_MAX_SAMPLES) GeogebraCommonMainApp_debugWithNSString_(@"We have probably lost some roots...");
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"Exception in compute() ", [((JavaLangException *) nil_chk(e)) description]));
  }
  if (numberofroots == 0) {
    [self setPointsWithDoubleArray:[IOSDoubleArray arrayWithLength:1] withInt:0];
  }
  else {
    [self setPointsWithDoubleArray:roots withInt:((IOSDoubleArray *) nil_chk(roots))->size_];
  }
}

IOSDoubleArray *GeogebraCommonKernelAlgosAlgoRoots_findRootsWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(GeogebraCommonKernelGeosGeoFunction *f, jdouble l, jdouble r, jint samples) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(l, r)) {
    return GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:l]) ? [IOSDoubleArray arrayWithDoubles:(jdouble[]){ l } count:1] : [IOSDoubleArray arrayWithLength:0];
  }
  IOSDoubleArray *y = [IOSDoubleArray arrayWithLength:samples + 1];
  JavaUtilArrayList *xlist = [new_JavaUtilArrayList_init() autorelease];
  jdouble x, xval;
  jdouble deltax = (r - l) / samples;
  for (jint i = 0; i <= samples; i++) {
    x = l + i * deltax;
    *IOSDoubleArray_GetRef(y, i) = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:x];
    if ((JavaLangMath_absWithDouble_(IOSDoubleArray_Get(y, i)) < GeogebraCommonKernelKernel_MIN_PRECISION) && (GeogebraCommonKernelAlgosAlgoRoots_signChangedWithGeogebraCommonKernelGeosGeoFunction_withDouble_(f, x))) {
      [xlist addWithId:JavaLangDouble_valueOfWithDouble_(x)];
    }
    if (i > 0) {
      if (((IOSDoubleArray_Get(y, i - 1) < 0.0) && (IOSDoubleArray_Get(y, i) > 0.0)) || ((IOSDoubleArray_Get(y, i - 1) > 0.0) && (IOSDoubleArray_Get(y, i) < 0.0))) {
        xval = GeogebraCommonKernelAlgosAlgoRoots_calcSingleRootWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(f, x - deltax, x);
        if (JavaLangMath_absWithDouble_([f evaluateWithDouble:xval]) < GeogebraCommonKernelKernel_MIN_PRECISION) {
          [xlist addWithId:JavaLangDouble_valueOfWithDouble_(xval)];
        }
      }
    }
  }
  if ([xlist size] > 0) {
    IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:[xlist size]];
    for (jint i = 0; i < [xlist size]; i++) {
      *IOSDoubleArray_GetRef(res, i) = [((JavaLangDouble *) nil_chk([xlist getWithInt:i])) doubleValue];
    }
    GeogebraCommonKernelAlgosAlgoGeoPointsFunction_removeDuplicatesWithDoubleArray_(res);
    return res;
  }
  return nil;
}

jdouble GeogebraCommonKernelAlgosAlgoRoots_calcSingleRootWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_(GeogebraCommonKernelGeosGeoFunction *f, jdouble left, jdouble right) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver> rootFinder = [((OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory *) nil_chk(OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverFactory_newInstance())) newBrentSolver];
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isDefined]) return JavaLangDouble_NaN;
  jdouble root = JavaLangDouble_NaN;
  GeogebraCommonKernelArithmeticFunction *fun = [f getFunction];
  @try {
    root = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(rootFinder)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:left withDouble:right];
  }
  @catch (JavaLangException *e) {
    @try {
      IOSDoubleArray *borders = GeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(fun, left, right);
      root = [((id<OrgApacheCommonsMathAnalysisSolversUnivariateRealSolver>) nil_chk(rootFinder)) solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction:[new_GeogebraCommonKernelRootsRealRootAdapter_initWithGeogebraCommonKernelRootsRealRootFunction_(fun) autorelease] withDouble:IOSDoubleArray_Get(nil_chk(borders), 0) withDouble:IOSDoubleArray_Get(borders, 1)];
    }
    @catch (JavaLangException *ex) {
      root = JavaLangDouble_NaN;
    }
  }
  return root;
}

jint GeogebraCommonKernelAlgosAlgoRoots_findNumberOfSamplesWithDouble_withDouble_(GeogebraCommonKernelAlgosAlgoRoots *self, jdouble l, jdouble r) {
  jdouble visiblemax = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getViewsXMaxWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(nil_chk(self->points_), 0)];
  jdouble visiblemin = [self->kernel_ getViewsXMinWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(self->points_, 0)];
  jdouble visiblepixs = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) countPixelsWithDouble:visiblemin withDouble:visiblemax];
  jdouble pixsininterval = visiblepixs * (r - l) / (visiblemax - visiblemin);
  jint n = (jint) JavaLangMath_roundWithDouble_(JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(pixsininterval / GeogebraCommonKernelAlgosAlgoRoots_PIXELS_BETWEEN_SAMPLES, GeogebraCommonKernelAlgosAlgoRoots_MAX_SAMPLES), GeogebraCommonKernelAlgosAlgoRoots_MIN_SAMPLES));
  return n;
}

jboolean GeogebraCommonKernelAlgosAlgoRoots_signChangedWithGeogebraCommonKernelGeosGeoFunction_withDouble_(GeogebraCommonKernelGeosGeoFunction *f, jdouble x) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  jdouble delta = GeogebraCommonKernelKernel_MIN_PRECISION * 10;
  jdouble left, right, lefty, righty;
  jboolean signChanged;
  left = x - delta;
  right = x + delta;
  jint count = 0;
  while (JavaLangMath_absWithDouble_(lefty = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:left]) < delta && count++ < 100) left = left - delta;
  count = 0;
  while (JavaLangMath_absWithDouble_(righty = [f evaluateWithDouble:right]) < delta && count++ < 100) right = right + delta;
  signChanged = (lefty * righty < 0.0);
  return signChanged;
}

void GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoRoots *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoGeoPointsFunction_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = GeogebraCommonKernelAlgosAlgoRoots_TYPE_ROOTS;
}

GeogebraCommonKernelAlgosAlgoRoots *new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoRoots *self = [GeogebraCommonKernelAlgosAlgoRoots alloc];
  GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(NSString *s) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  {
    GeogebraCommonMainApp_debugWithNSString_(s);
  }
}

void GeogebraCommonKernelAlgosAlgoRoots_listArrayWithDoubleArray_(IOSDoubleArray *a) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  if (a != nil) {
    jint l = a->size_;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"Length: ", l)];
    for (jint i = 0; i < l; i++) {
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I$D", @"a[", i, @"]: ", IOSDoubleArray_Get(a, i))];
    }
  }
  else {
    GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(@"array was null!");
  }
}

void GeogebraCommonKernelAlgosAlgoRoots_listLabelsWithNSStringArray_(IOSObjectArray *a) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  if (a != nil) {
    jint l = a->size_;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"Length: ", l)];
    for (jint i = 0; i < l; i++) {
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I$$", @"Label[", i, @"]: ", IOSObjectArray_Get(a, i))];
    }
  }
  else {
    GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(@"labels was null!");
  }
}

void GeogebraCommonKernelAlgosAlgoRoots_listPointsWithGeogebraCommonKernelGeosGeoPointArray_(IOSObjectArray *gpts) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  if (gpts != nil) {
    jint n = gpts->size_;
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I", @"Length: ", n)];
    for (jint i = 0; i < n; i++) {
      [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$$$I$DC@C", @"Label: ", [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(gpts, i))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @"     pt[", i, @"]: (", ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(gpts, i)))->x_, ',', IOSObjectArray_Get(gpts, i), ')')];
    }
  }
  else {
    GeogebraCommonKernelAlgosAlgoRoots_debugWithNSString_(@"gpts was null!");
  }
}

NSString *GeogebraCommonKernelAlgosAlgoRoots_testGeoPointXWithGeogebraCommonKernelGeosGeoPoint_withDouble_(GeogebraCommonKernelGeosGeoPoint *geo, jdouble answer) {
  GeogebraCommonKernelAlgosAlgoRoots_initialize();
  jdouble value;
  value = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geo)) getX];
  if (JavaLangMath_absWithDouble_(value - answer) < GeogebraCommonKernelKernel_MIN_PRECISION) {
    return @" === GOOD ===";
  }
  return JreStrcat("$D$$$", @" ****************** WRONG *******************\n ERROR: ", JavaLangMath_absWithDouble_(value - answer), @"  for: ", [geo getNameDescription], @"\n ********************************************\n");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRoots)
