//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoTiedRank.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoTiedRank.h"
#include "org/apache/commons/math/stat/ranking/NaturalRanking.h"
#include "org/apache/commons/math/stat/ranking/TiesStrategy.h"

@interface GeogebraCommonKernelStatisticsAlgoTiedRank () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
  OrgApacheCommonsMathStatRankingNaturalRanking *rankingAlgorithm_;
  IOSDoubleArray *inputArray_;
  IOSDoubleArray *outputArray_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTiedRank, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTiedRank, outputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTiedRank, rankingAlgorithm_, OrgApacheCommonsMathStatRankingNaturalRanking *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTiedRank, inputArray_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTiedRank, outputArray_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoTiedRank_compute(GeogebraCommonKernelStatisticsAlgoTiedRank *self);

@implementation GeogebraCommonKernelStatisticsAlgoTiedRank

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelStatisticsAlgoTiedRank_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TiedRank();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoTiedRank_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  RELEASE_(rankingAlgorithm_);
  RELEASE_(inputArray_);
  RELEASE_(outputArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoTiedRank", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "rankingAlgorithm_", NULL, 0x2, "Lorg.apache.commons.math.stat.ranking.NaturalRanking;", NULL, NULL,  },
    { "inputArray_", NULL, 0x2, "[D", NULL, NULL,  },
    { "outputArray_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoTiedRank = { 2, "AlgoTiedRank", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoTiedRank;
}

@end

void GeogebraCommonKernelStatisticsAlgoTiedRank_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoTiedRank *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTiedRank_set_inputList_(self, inputList);
  GeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTiedRank_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTiedRank *new_GeogebraCommonKernelStatisticsAlgoTiedRank_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelStatisticsAlgoTiedRank *self = [GeogebraCommonKernelStatisticsAlgoTiedRank alloc];
  GeogebraCommonKernelStatisticsAlgoTiedRank_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTiedRank_compute(GeogebraCommonKernelStatisticsAlgoTiedRank *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  GeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_inputArray_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  for (jint i = 0; i < self->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(self->inputArray_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
      return;
    }
  }
  if (self->rankingAlgorithm_ == nil) GeogebraCommonKernelStatisticsAlgoTiedRank_setAndConsume_rankingAlgorithm_(self, new_OrgApacheCommonsMathStatRankingNaturalRanking_initWithOrgApacheCommonsMathStatRankingTiesStrategyEnum_(OrgApacheCommonsMathStatRankingTiesStrategyEnum_get_AVERAGE()));
  GeogebraCommonKernelStatisticsAlgoTiedRank_set_outputArray_(self, [((OrgApacheCommonsMathStatRankingNaturalRanking *) nil_chk(self->rankingAlgorithm_)) rankWithDoubleArray:self->inputArray_]);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  for (jint i = 0; i < self->size_; i++) {
    [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSDoubleArray_Get(nil_chk(self->outputArray_), i)) autorelease]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoTiedRank)
