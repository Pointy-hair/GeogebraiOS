//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoPercentile.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoPercentile.h"
#include "org/apache/commons/math/stat/descriptive/rank/Percentile.h"

@interface GeogebraCommonKernelStatisticsAlgoPercentile () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoNumeric *value_;
  GeogebraCommonKernelGeosGeoNumeric *result_;
  jint size_;
  OrgApacheCommonsMathStatDescriptiveRankPercentile *percentile_;
  IOSDoubleArray *inputArray_;
  jdouble val_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoPercentile, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoPercentile, value_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoPercentile, result_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoPercentile, percentile_, OrgApacheCommonsMathStatDescriptiveRankPercentile *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoPercentile, inputArray_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoPercentile_compute(GeogebraCommonKernelStatisticsAlgoPercentile *self);

@implementation GeogebraCommonKernelStatisticsAlgoPercentile

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)value {
  GeogebraCommonKernelStatisticsAlgoPercentile_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, value);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Percentile();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, value_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoPercentile_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(value_);
  RELEASE_(result_);
  RELEASE_(percentile_);
  RELEASE_(inputArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoPercentile", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "value_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "percentile_", NULL, 0x2, "Lorg.apache.commons.math.stat.descriptive.rank.Percentile;", NULL, NULL,  },
    { "inputArray_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoPercentile = { 2, "AlgoPercentile", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoPercentile;
}

@end

void GeogebraCommonKernelStatisticsAlgoPercentile_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoPercentile *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *value) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoPercentile_set_inputList_(self, inputList);
  GeogebraCommonKernelStatisticsAlgoPercentile_set_value_(self, value);
  GeogebraCommonKernelStatisticsAlgoPercentile_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoPercentile_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoPercentile *new_GeogebraCommonKernelStatisticsAlgoPercentile_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *value) {
  GeogebraCommonKernelStatisticsAlgoPercentile *self = [GeogebraCommonKernelStatisticsAlgoPercentile alloc];
  GeogebraCommonKernelStatisticsAlgoPercentile_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, value);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoPercentile_compute(GeogebraCommonKernelStatisticsAlgoPercentile *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if (self->value_ == nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
  self->val_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->value_)) getDouble] * 100;
  if (self->val_ <= 0 || self->val_ > 100) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
  GeogebraCommonKernelStatisticsAlgoPercentile_setAndConsume_inputArray_(self, [IOSDoubleArray newArrayWithLength:self->size_]);
  for (jint i = 0; i < self->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      *IOSDoubleArray_GetRef(self->inputArray_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
  if (self->percentile_ == nil) GeogebraCommonKernelStatisticsAlgoPercentile_setAndConsume_percentile_(self, new_OrgApacheCommonsMathStatDescriptiveRankPercentile_init());
  [((OrgApacheCommonsMathStatDescriptiveRankPercentile *) nil_chk(self->percentile_)) setDataWithDoubleArray:self->inputArray_];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:[self->percentile_ evaluateWithDouble:self->val_]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoPercentile)
