//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoFunctionNVar.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Matrix/Coords3.h"
#include "geogebra/common/kernel/Matrix/CoordsDouble3.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMacroInterface.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/IneqTree.h"
#include "geogebra/common/kernel/arithmetic/Inequality.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/SurfaceEvaluable.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

#define GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET 4.0E-5
#define GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES 70

@interface GeogebraCommonKernelGeosGeoFunctionNVar () {
 @public
  GeogebraCommonKernelArithmeticFunctionNVar *fun_;
  IOSObjectArray *fun1_;
  JavaLangBoolean *isInequality__;
  jboolean isDefined__;
  IOSDoubleArray *from_, *to_;
  JavaLangStringBuilder *sbToString_;
  IOSDoubleArray *tmp_;
  GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *levelOfDetail_;
  GeogebraCommonKernelMatrixCoords *der1_, *der2_, *normal_;
  GeogebraCommonKernelMatrixCoordsDouble3 *p1_, *p2_;
}

- (void)checkDefined;

- (NSString *)toXMLStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P;

- (void)mirrorWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phi;

- (jboolean)setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)p
                                                              withDouble:(jdouble)u
                                                              withDouble:(jdouble)v
                                   withGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)n;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, fun_, GeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, fun1_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, isInequality__, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, from_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, to_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, tmp_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, levelOfDetail_, GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, der1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, der2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, normal_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, p1_, GeogebraCommonKernelMatrixCoordsDouble3 *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, p2_, GeogebraCommonKernelMatrixCoordsDouble3 *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoFunctionNVar, STRICT_INEQ_OFFSET, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoFunctionNVar, SEARCH_SAMPLES, jint)

static GeogebraCommonKernelArithmeticTraversing_FunctionExpander *GeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoFunctionNVar, functionExpander_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoFunctionNVar, functionExpander_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(GeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(GeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(GeogebraCommonKernelGeosGeoFunctionNVar *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelGeosGeoFunctionNVar *self, id<GeogebraCommonKernelKernelNDGeoPointND> P);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelGeosGeoFunctionNVar *self, id<GeogebraCommonKernelArithmeticNumberValue> phi);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withGeogebraCommonKernelMatrixCoords3_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelMatrixCoords3 *p, jdouble u, jdouble v, GeogebraCommonKernelMatrixCoords3 *n);

@implementation GeogebraCommonKernelGeosGeoFunctionNVar

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)defaults {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, defaults);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
          withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)f {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
          withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)f {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, f);
  return self;
}

- (NSString *)getTypeString {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? @"Inequality" : @"MultivariableFunction";
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_FUNCTION_NVAR();
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)f {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelGeosGeoFunctionNVar_(self, f);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelGeosGeoFunctionNVar_(self) autorelease];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) wrap]];
    return;
  }
  id<GeogebraCommonKernelArithmeticFunctionalNVar> geoFun = (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar));
  if (geo == nil || [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(geoFun)) getFunction] == nil) {
    GeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, nil);
    isDefined__ = NO;
    return;
  }
  isDefined__ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined];
  IOSObjectArray *oldVars = fun_ == nil ? nil : [fun_ getFunctionVariables];
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_fun_(self, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(geoFun)) getFunction], kernel_));
  [fun_ fillVariablesWithGeogebraCommonKernelArithmeticFunctionVariableArray:oldVars];
  if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) {
    if (![geo isIndependent]) {
      id<GeogebraCommonKernelAlgosAlgoMacroInterface> algoMacro = (id<GeogebraCommonKernelAlgosAlgoMacroInterface>) check_protocol_cast([self getParentAlgorithm], @protocol(GeogebraCommonKernelAlgosAlgoMacroInterface));
      [((id<GeogebraCommonKernelAlgosAlgoMacroInterface>) nil_chk(algoMacro)) initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:self->fun_];
    }
  }
  GeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withGeogebraCommonKernelArithmeticFunctionalNVar:self]));
}

- (void)setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)f {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, f);
  GeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
}

- (void)setDerivatives {
  if (fun1_ != nil) {
    return;
  }
  IOSObjectArray *vars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_fun1_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(vars))->size_ type:GeogebraCommonKernelArithmeticFunctionNVar_class_()]);
  if (GeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_, nil, new_GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init());
  }
  GeogebraCommonKernelArithmeticValidExpression *ve = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([fun_ deepCopyWithGeogebraCommonKernelKernel:[self getKernel]], [GeogebraCommonKernelArithmeticValidExpression class]);
  ve = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_], [GeogebraCommonKernelArithmeticValidExpression class]);
  for (jint i = 0; i < vars->size_; i++) {
    IOSObjectArray_SetAndConsume(fun1_, i, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(vars, i)])) wrap], vars));
  }
}

- (void)resetDerivatives {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)getFunction {
  return GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getFunctionExpression {
  return GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self);
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (fun_ != nil) {
    [fun_ replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (jdouble)evaluateWithDoubleArray:(IOSDoubleArray *)vals {
  if (fun_ == nil) return JavaLangDouble_NaN;
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:vals];
}

- (GeogebraCommonKernelMatrixCoords *)evaluatePointWithDoubleArray:(IOSDoubleArray *)vals {
  if (fun_ == nil) return nil;
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(vals), 0), IOSDoubleArray_Get(vals, 1), [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:vals]) autorelease];
}

- (jdouble)evaluateWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z {
  if (fun_ == nil) return JavaLangDouble_NaN;
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ x, y, z } count:3]];
}

- (void)checkDefined {
  GeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(self);
}

- (void)setUsingCasCommandWithNSString:(NSString *)ggbCasCmd
withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
                           withBoolean:(jboolean)symbolic
withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_fun1_(self, nil);
  GeogebraCommonKernelGeosGeoFunctionNVar *ff = (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(f, [GeogebraCommonKernelGeosGeoFunctionNVar class]);
  if ([((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(ff)) isDefined]) {
    GeogebraCommonKernelGeosGeoFunctionNVar_set_fun_(self, [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(ff->fun_)) evalCasCommandWithNSString:ggbCasCmd withBoolean:symbolic withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst]);
    GeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(self);
  }
  else {
    isDefined__ = NO;
  }
}

- (jboolean)isDefined {
  return isDefined__ && fun_ != nil;
}

- (void)setDefinedWithBoolean:(jboolean)defined {
  isDefined__ = defined;
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  if (fun_ != nil && isInequality__ == nil && [self isBooleanFunction]) [self getIneqs];
  return [self isDefined] && (![self isBooleanFunction] || [((JavaLangBoolean *) nil_chk(isInequality__)) booleanValue]);
}

- (NSString *)toXMLStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)getAssignmentLHSWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:label_]];
  [sbToString_ appendWithNSString:@"("];
  [sbToString_ appendWithNSString:[self getVarStringWithGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString_ appendWithNSString:@")"];
  return [sbToString_ description];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isLabelSet] && ![self isBooleanFunction]) return GeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([self isLabelSet]) {
    [sbToString_ appendWithNSString:label_];
    [sbToString_ appendWithNSString:@": "];
  }
  [sbToString_ appendWithNSString:[self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toSymbolicStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([self isDefined]) return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl];
  return JreStrcat("$$$", @" \\text{", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"], @"} ");
}

- (jchar)getLabelDelimiter {
  return [self isBooleanFunction] ? ':' : '=';
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isIndependent] && [self getDefaultGeoType] < 0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<expression"];
    [sb appendWithNSString:@" label =\""];
    [sb appendWithNSString:label_];
    [sb appendWithNSString:@"\" exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, GeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithGeogebraCommonKernelStringTemplate_(self, GeogebraCommonKernelStringTemplate_get_xmlTemplate_()));
    [sb appendWithNSString:@"\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\"functionNVar\""];
  [sb appendWithNSString:@" label=\""];
  [sb appendWithNSString:label_];
  if ([self getDefaultGeoType] >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:[self getDefaultGeoType]];
  }
  [sb appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [sb appendWithNSString:@"</element>\n"];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)isBooleanFunction {
  if (fun_ != nil) return [fun_ isBooleanFunction];
  return NO;
}

- (NSString *)getVarStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return fun_ == nil ? @"" : [fun_ getVarStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]])) return NO;
  return [self isDifferenceZeroInCASWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (NSString *)getCASStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                     withBoolean:(jboolean)symbolic {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getExpression])) getCASstringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
}

- (jdouble)getMinParameterWithInt:(jint)index {
  if (from_ == nil) return JavaLangDouble_NaN;
  return IOSDoubleArray_Get(nil_chk(from_), index);
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  if (to_ == nil) return JavaLangDouble_NaN;
  return IOSDoubleArray_Get(nil_chk(to_), index);
}

- (void)setIntervalWithDoubleArray:(IOSDoubleArray *)from
                   withDoubleArray:(IOSDoubleArray *)to {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_from_(self, from);
  GeogebraCommonKernelGeosGeoFunctionNVar_set_to_(self, to);
}

- (GeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                   withDouble:(jdouble)v {
  GeogebraCommonKernelMatrixCoords *p = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:tmp_];
  [p setWithInt:1 withDouble:u];
  [p setWithInt:2 withDouble:v];
  [p setWithInt:3 withDouble:val];
  return p;
}

- (void)evaluatePointWithDouble:(jdouble)u
                     withDouble:(jdouble)v
withGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)p {
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateWithDoubleArray:tmp_];
  [((GeogebraCommonKernelMatrixCoords3 *) nil_chk(p)) setWithDouble:u withDouble:v withDouble:val];
}

- (jint)getVarNumber {
  return fun_ == nil ? 0 : [fun_ getVarNumber];
}

- (jboolean)hasDrawable3D {
  return [self getVarNumber] == 2 || [self getVarNumber] == 3;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease];
}

- (jboolean)isFillable {
  if (fun_ == nil) return YES;
  return [self hasDrawable3D];
}

- (jboolean)isInverseFillable {
  return [self isFillable];
}

- (void)resetIneqs {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withGeogebraCommonKernelArithmeticFunctionalNVar:self]));
}

- (GeogebraCommonKernelArithmeticIneqTree *)getIneqs {
  if ([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getIneqs] == nil) {
    GeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:[fun_ getExpression] withGeogebraCommonKernelArithmeticFunctionalNVar:self]));
  }
  return [fun_ getIneqs];
}

- (void)update {
  if (fun_ != nil && [fun_ isBooleanFunction]) {
    GeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([fun_ updateIneqs]));
  }
  [super update];
}

- (jboolean)isRegion {
  return [self isBooleanFunction];
}

- (jboolean)isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) updateCoords2D];
  return [self isInRegionWithDouble:[P getX2D] withDouble:[P getY2D]];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) evaluateBooleanWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ x0, y0 } count:2]];
}

- (void)pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class])))) isDefined]) return;
  GeogebraCommonKernelRegionParameters *rp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getRegionParameters];
  if (![self isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    jdouble bestX = [((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) getT1], bestY = [rp getT2], myX = [P getX2D], myY = [P getY2D];
    jdouble bestDist = (bestY - myY) * (bestY - myY) + (bestX - myX) * (bestX - myX);
    if (GeogebraCommonKernelKernel_isZeroWithDouble_(bestDist)) {
      bestDist = JavaLangDouble_POSITIVE_INFINITY;
    }
    GeogebraCommonKernelArithmeticIneqTree *ineqs = [self getIneqs];
    jint size = [((GeogebraCommonKernelArithmeticIneqTree *) nil_chk(ineqs)) getSize];
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelArithmeticInequality *in = [ineqs getWithInt:i];
      jdouble px = 0, py = 0;
      if ([((GeogebraCommonKernelArithmeticInequality *) nil_chk(in)) getType] == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
        px = [P getX2D];
        py = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([in getFunBorder])) evaluateWithDouble:px];
        py += [in isAboveBorder] ? GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      else if ([in getType] == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
        py = [P getY2D];
        px = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([in getFunBorder])) evaluateWithDouble:py];
        px += [in isAboveBorder] ? GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      else if ([in getType] == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_LINEAR()) {
        jdouble a = [((GeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getX];
        jdouble b = [((GeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getY];
        jdouble c = [((GeogebraCommonKernelGeosGeoLine *) nil_chk([in getLineBorder])) getZ];
        px = (-a * c + b * b * [P getX2D] - a * b * [P getY2D]) / (a * a + b * b);
        py = (-b * c - a * b * [P getX2D] + a * a * [P getY2D]) / (a * a + b * b);
        py -= [in isAboveBorder] ? GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET : -GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET;
      }
      jdouble myDist = (py - myY) * (py - myY) + (px - myX) * (px - myX);
      if ((myDist < bestDist) && [self isInRegionWithDouble:px withDouble:py]) {
        bestDist = myDist;
        bestX = px;
        bestY = py;
      }
    }
    if ([self isInRegionWithDouble:bestX withDouble:bestY]) {
      [rp setT1WithDouble:bestX];
      [rp setT2WithDouble:bestY];
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class])) setCoordsWithDouble:bestX withDouble:bestY withDouble:1];
    }
    else GeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND_(self, P);
  }
  else {
    [((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) setT1WithDouble:[P getX2D]];
    [rp setT2WithDouble:[P getY2D]];
  }
}

- (void)tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  [self pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:P];
}

- (jboolean)isInequality {
  return (isInequality__ != nil && [isInequality__ booleanValue]);
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] withDouble:[v getY]];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  jdouble d = a00 * a11 - a01 * a10;
  if (d == 0) [self setUndefined];
  else [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) matrixTransformWithDouble:a11 / d withDouble:-a01 / d withDouble:-a10 / d withDouble:a00 / d];
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:-[((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] withDouble:-[S getY]];
  [fun_ matrixTransformWithDouble:1 / [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble] withDouble:0 withDouble:0 withDouble:1 / [r getDouble]];
  [fun_ translateWithDouble:[S getX] withDouble:[S getY]];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phi {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:-sinPhi withDouble:sinPhi withDouble:cosPhi];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phi
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *P = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:-[((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) getX] withDouble:-[P getY]];
  [self rotateWithGeogebraCommonKernelArithmeticNumberValue:phi];
  [fun_ translateWithDouble:[P getX] withDouble:[P getY]];
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [self dilateWithGeogebraCommonKernelArithmeticNumberValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease] withGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g1 {
  GeogebraCommonKernelGeosGeoLine *g = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [GeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = [g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = [g getZ] / [g getY];
  }
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) translateWithDouble:qx withDouble:qy];
  GeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithGeogebraCommonKernelArithmeticNumberValue_(self, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY])) autorelease]);
  [fun_ translateWithDouble:-qx withDouble:-qy];
}

- (void)mirrorWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phi {
  GeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithGeogebraCommonKernelArithmeticNumberValue_(self, phi);
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
}

- (jboolean)isGeoFunctionNVar {
  return YES;
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if ([self isInequality]) {
    [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  }
  if ([self hasLevelOfDetail] && ([self getLevelOfDetail] == GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_QUALITY())) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<levelOfDetailQuality val=\"true\"/>\n"];
  }
}

- (GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)getLevelOfDetail {
  return levelOfDetail_;
}

- (void)setLevelOfDetailWithGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum:(GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum *)lod {
  GeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, lod);
}

- (jboolean)hasLevelOfDetail {
  return (fun_ != nil) && ([fun_ getVarNumber] == 2) && ![self isInequality];
}

- (jint)getMinimumLineThickness {
  return (isInequality__ != nil && [isInequality__ booleanValue]) ? 0 : 1;
}

- (IOSObjectArray *)getFunctionVariables {
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
}

- (GeogebraCommonKernelArithmeticMyList *)getFunctionVariableList {
  GeogebraCommonKernelArithmeticMyList *ml = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
  {
    IOSObjectArray *a__ = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getFunctionVariables];
    GeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelArithmeticFunctionVariable *fv = *b__++;
      [ml addListElementWithGeogebraCommonKernelArithmeticExpressionValue:fv];
    }
  }
  return ml;
}

- (void)clearCasEvalMapWithNSString:(NSString *)key {
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) clearCasEvalMapWithNSString:key];
}

- (NSString *)getFormulaStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                         withBoolean:(jboolean)substituteNumbers {
  NSString *ret = @"";
  if ([self isIndependent]) {
    ret = [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  else {
    if (GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self) == nil) {
      ret = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
    }
    else ret = substituteNumbers ? [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self))) toValueStringWithGeogebraCommonKernelStringTemplate:tpl] : [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(self))) toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if ([@"" isEqual:ret]) {
    ret = [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (jboolean)setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)p
                                                              withDouble:(jdouble)u
                                                              withDouble:(jdouble)v
                                   withGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)n {
  return GeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
}

- (jboolean)evaluateNormalWithGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)p
                                                     withDouble:(jdouble)u
                                                     withDouble:(jdouble)v
                          withGeogebraCommonKernelMatrixCoords3:(GeogebraCommonKernelMatrixCoords3 *)n {
  *IOSDoubleArray_GetRef(nil_chk(tmp_), 0) = u;
  *IOSDoubleArray_GetRef(tmp_, 1) = v;
  jdouble val = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(nil_chk(fun1_), 0))) evaluateWithDoubleArray:tmp_];
  if (JavaLangDouble_isNaNWithDouble_(val)) {
    return GeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(der1_)) setZWithDouble:val];
  val = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun1_, 1))) evaluateWithDoubleArray:tmp_];
  if (JavaLangDouble_isNaNWithDouble_(val)) {
    return GeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withGeogebraCommonKernelMatrixCoords3_(self, p, u, v, n);
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(der2_)) setZWithDouble:val];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:der1_ withGeogebraCommonKernelMatrixCoords:der2_];
  [((GeogebraCommonKernelMatrixCoords3 *) nil_chk(n)) setNormalizedIfPossibleWithGeogebraCommonKernelMatrixCoords:normal_];
  return YES;
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                               withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([self hasLevelOfDetail] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasLevelOfDetail]) {
    GeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, [((id<GeogebraCommonKernelKernelNDSurfaceEvaluable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDSurfaceEvaluable))) getLevelOfDetail]);
  }
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(fun1_);
  RELEASE_(isInequality__);
  RELEASE_(from_);
  RELEASE_(to_);
  RELEASE_(sbToString_);
  RELEASE_(tmp_);
  RELEASE_(levelOfDetail_);
  RELEASE_(der1_);
  RELEASE_(der2_);
  RELEASE_(normal_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoFunctionNVar:", "GeoFunctionNVar", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:", "setFunction", "V", 0x1, NULL, NULL },
    { "setDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "resetDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, NULL, NULL },
    { "getFunctionExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "evaluateWithDoubleArray:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluatePointWithDoubleArray:", "evaluatePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateWithDouble:withDouble:withDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "checkDefined", NULL, "V", 0x2, NULL, NULL },
    { "setUsingCasCommandWithNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:withBoolean:withGeogebraCommonKernelArithmeticMyArbitraryConstant:", "setUsingCasCommand", "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toXMLStringWithGeogebraCommonKernelStringTemplate:", "toXMLString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "getAssignmentLHSWithGeogebraCommonKernelStringTemplate:", "getAssignmentLHS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toSymbolicStringWithGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLabelDelimiter", NULL, "C", 0x4, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isBooleanFunction", NULL, "Z", 0x1, NULL, NULL },
    { "getVarStringWithGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "getCASStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "getCASString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "setIntervalWithDoubleArray:withDoubleArray:", "setInterval", "V", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:withGeogebraCommonKernelMatrixCoords3:", "evaluatePoint", "V", 0x1, NULL, NULL },
    { "getVarNumber", NULL, "I", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "isInverseFillable", NULL, "Z", 0x1, NULL, NULL },
    { "resetIneqs", NULL, "V", 0x1, NULL, NULL },
    { "getIneqs", NULL, "Lgeogebra.common.kernel.arithmetic.IneqTree;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isRegion", NULL, "Z", 0x1, NULL, NULL },
    { "isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChangedForRegion", "V", 0x1, NULL, NULL },
    { "tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND:", "tryLocateInEV", "V", 0x2, NULL, NULL },
    { "regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "isInequality", NULL, "Z", 0x1, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelArithmeticNumberValue:", "mirror", "V", 0x2, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isGeoFunctionNVar", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getLevelOfDetail", NULL, "Lgeogebra.common.kernel.kernelND.SurfaceEvaluable$LevelOfDetail;", 0x1, NULL, NULL },
    { "setLevelOfDetailWithGeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum:", "setLevelOfDetail", "V", 0x1, NULL, NULL },
    { "hasLevelOfDetail", NULL, "Z", 0x1, NULL, NULL },
    { "getMinimumLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getFunctionVariables", NULL, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getFunctionVariableList", NULL, "Lgeogebra.common.kernel.arithmetic.MyList;", 0x1, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "getFormulaStringWithGeogebraCommonKernelStringTemplate:withBoolean:", "getFormulaString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3:withDouble:withDouble:withGeogebraCommonKernelMatrixCoords3:", "setNormalFromNeighbours", "Z", 0x2, NULL, NULL },
    { "evaluateNormalWithGeogebraCommonKernelMatrixCoords3:withDouble:withDouble:withGeogebraCommonKernelMatrixCoords3:", "evaluateNormal", "Z", 0x1, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "STRICT_INEQ_OFFSET_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelGeosGeoFunctionNVar_STRICT_INEQ_OFFSET },
    { "SEARCH_SAMPLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES },
    { "fun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "fun1_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "isInequality__", "isInequality", 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "from_", NULL, 0x2, "[D", NULL, NULL,  },
    { "to_", NULL, 0x2, "[D", NULL, NULL,  },
    { "functionExpander_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", &GeogebraCommonKernelGeosGeoFunctionNVar_functionExpander_, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "[D", NULL, NULL,  },
    { "levelOfDetail_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.SurfaceEvaluable$LevelOfDetail;", NULL, NULL,  },
    { "der1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "der2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "p1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordsDouble3;", NULL, NULL,  },
    { "p2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordsDouble3;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoFunctionNVar = { 2, "GeoFunctionNVar", "geogebra.common.kernel.geos", NULL, 0x1, 84, methods, 17, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoFunctionNVar;
}

@end

void GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_SPEED());
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der1_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(1, 0, 0));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der2_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 1, 0));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_normal_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p1_(self, new_GeogebraCommonKernelMatrixCoordsDouble3_init());
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p2_(self, new_GeogebraCommonKernelMatrixCoordsDouble3_init());
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoFunctionNVar *new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoFunctionNVar *self = [GeogebraCommonKernelGeosGeoFunctionNVar alloc];
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelConstruction *c, jboolean defaults) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelGeosGeoFunctionNVar_set_levelOfDetail_(self, GeogebraCommonKernelKernelNDSurfaceEvaluable_LevelOfDetailEnum_get_SPEED());
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der1_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(1, 0, 0));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_der2_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 1, 0));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_normal_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p1_(self, new_GeogebraCommonKernelMatrixCoordsDouble3_init());
  GeogebraCommonKernelGeosGeoFunctionNVar_setAndConsume_p2_(self, new_GeogebraCommonKernelMatrixCoordsDouble3_init());
  if (defaults) [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoFunctionNVar *new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *c, jboolean defaults) {
  GeogebraCommonKernelGeosGeoFunctionNVar *self = [GeogebraCommonKernelGeosGeoFunctionNVar alloc];
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, defaults);
  return self;
}

void GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelArithmeticFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
  [self setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:f];
  if (self->fun_ != nil) GeogebraCommonKernelGeosGeoFunctionNVar_set_isInequality__(self, JavaLangBoolean_valueOfWithBoolean_([self->fun_ initIneqsWithGeogebraCommonKernelArithmeticExpressionNode:GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(self) withGeogebraCommonKernelArithmeticFunctionalNVar:self]));
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoFunctionNVar *new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelArithmeticFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar *self = [GeogebraCommonKernelGeosGeoFunctionNVar alloc];
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  return self;
}

void GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, f);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoFunctionNVar *new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar *self = [GeogebraCommonKernelGeosGeoFunctionNVar alloc];
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, c, label, f);
  return self;
}

void GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelGeosGeoFunctionNVar_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelGeosGeoFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(f))->cons_);
  [self setWithGeogebraCommonKernelGeosGeoElement:f];
}

GeogebraCommonKernelGeosGeoFunctionNVar *new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelGeosGeoFunctionNVar_(GeogebraCommonKernelGeosGeoFunctionNVar *f) {
  GeogebraCommonKernelGeosGeoFunctionNVar *self = [GeogebraCommonKernelGeosGeoFunctionNVar alloc];
  GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelGeosGeoFunctionNVar_(self, f);
  return self;
}

GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelGeosGeoFunctionNVar_getFunction(GeogebraCommonKernelGeosGeoFunctionNVar *self) {
  return self->fun_;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelGeosGeoFunctionNVar_getFunctionExpression(GeogebraCommonKernelGeosGeoFunctionNVar *self) {
  if (self->fun_ == nil) return nil;
  return [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(self->fun_)) getExpression];
}

void GeogebraCommonKernelGeosGeoFunctionNVar_checkDefined(GeogebraCommonKernelGeosGeoFunctionNVar *self) {
  self->isDefined__ = (self->fun_ != nil);
  if (self->fun_ != nil && [@"?" isEqual:[self->fun_ toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
    self->isDefined__ = NO;
  }
}

NSString *GeogebraCommonKernelGeosGeoFunctionNVar_toXMLStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
  [self->sbToString_ appendWithNSString:self->label_];
  [self->sbToString_ appendWithNSString:@"("];
  [self->sbToString_ appendWithNSString:[self getVarStringWithGeogebraCommonKernelStringTemplate:tpl]];
  [self->sbToString_ appendWithNSString:@") = "];
  [self->sbToString_ appendWithNSString:[self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [self->sbToString_ description];
}

void GeogebraCommonKernelGeosGeoFunctionNVar_tryLocateInEVWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelGeosGeoFunctionNVar *self, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  jboolean found = NO;
  jdouble xmin = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getViewsXMinWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])];
  jdouble xmax = [self->kernel_ getViewsXMaxWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])];
  jdouble ymin = [self->kernel_ getViewsYMinWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])];
  jdouble ymax = [self->kernel_ getViewsYMaxWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])];
  for (jint i = 0; !found && i < GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES; i++) for (jint j = 0; !found && j < GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES; j++) {
    jdouble p = i / GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES;
    jdouble rx = p * xmin + (1 - p) * xmax;
    jdouble q = i / GeogebraCommonKernelGeosGeoFunctionNVar_SEARCH_SAMPLES;
    jdouble ry = q * ymin + (1 - q) * ymax;
    if ([self isInRegionWithDouble:rx withDouble:ry]) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:rx withDouble:ry withDouble:1];
      found = YES;
    }
  }
  if (!found) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class])))) setUndefined];
}

void GeogebraCommonKernelGeosGeoFunctionNVar_mirrorWithGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelGeosGeoFunctionNVar *self, id<GeogebraCommonKernelArithmeticNumberValue> phi) {
  jdouble cosPhi = JavaLangMath_cosWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble]);
  jdouble sinPhi = JavaLangMath_sinWithDouble_([phi getDouble]);
  [self matrixTransformWithDouble:cosPhi withDouble:sinPhi withDouble:sinPhi withDouble:-cosPhi];
}

jboolean GeogebraCommonKernelGeosGeoFunctionNVar_setNormalFromNeighboursWithGeogebraCommonKernelMatrixCoords3_withDouble_withDouble_withGeogebraCommonKernelMatrixCoords3_(GeogebraCommonKernelGeosGeoFunctionNVar *self, GeogebraCommonKernelMatrixCoords3 *p, jdouble u, jdouble v, GeogebraCommonKernelMatrixCoords3 *n) {
  [self evaluatePointWithDouble:u + GeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA withDouble:v withGeogebraCommonKernelMatrixCoords3:self->p1_];
  if (![((GeogebraCommonKernelMatrixCoordsDouble3 *) nil_chk(self->p1_)) isDefined]) {
    return NO;
  }
  [self evaluatePointWithDouble:u withDouble:v + GeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA withGeogebraCommonKernelMatrixCoords3:self->p2_];
  if (![((GeogebraCommonKernelMatrixCoordsDouble3 *) nil_chk(self->p2_)) isDefined]) {
    return NO;
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->der1_)) setZWithDouble:(self->p1_->z_ - [((GeogebraCommonKernelMatrixCoords3 *) nil_chk(p)) getZd]) / GeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->der2_)) setZWithDouble:(self->p2_->z_ - [p getZd]) / GeogebraCommonKernelKernelNDSurfaceEvaluable_NUMERICAL_DELTA];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->normal_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:self->der1_ withGeogebraCommonKernelMatrixCoords:self->der2_];
  [((GeogebraCommonKernelMatrixCoords3 *) nil_chk(n)) setNormalizedIfPossibleWithGeogebraCommonKernelMatrixCoords:self->normal_];
  return YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoFunctionNVar)
