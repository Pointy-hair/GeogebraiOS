//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/genetics/BinaryChromosome.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/commons/math/genetics/AbstractListChromosome.h"
#include "org/apache/commons/math/genetics/BinaryChromosome.h"
#include "org/apache/commons/math/genetics/Chromosome.h"
#include "org/apache/commons/math/genetics/GeneticAlgorithm.h"
#include "org/apache/commons/math/genetics/InvalidRepresentationException.h"
#include "org/apache/commons/math/random/RandomGenerator.h"

@implementation OrgApacheCommonsMathGeneticsBinaryChromosome

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)representation {
  OrgApacheCommonsMathGeneticsBinaryChromosome_initWithJavaUtilList_(self, representation);
  return self;
}

- (instancetype)initWithJavaLangIntegerArray:(IOSObjectArray *)representation {
  OrgApacheCommonsMathGeneticsBinaryChromosome_initWithJavaLangIntegerArray_(self, representation);
  return self;
}

- (void)checkValidityWithJavaUtilList:(id<JavaUtilList>)chromosomeRepresentation {
  for (JavaLangInteger *boxed__ in nil_chk(chromosomeRepresentation)) {
    jint i = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    if (i < 0 || i > 1) @throw [new_OrgApacheCommonsMathGeneticsInvalidRepresentationException_initWithNSString_(@"Elements can be only 0 or 1.") autorelease];
  }
}

+ (id<JavaUtilList>)randomBinaryRepresentationWithInt:(jint)length {
  return OrgApacheCommonsMathGeneticsBinaryChromosome_randomBinaryRepresentationWithInt_(length);
}

- (jboolean)isSameWithOrgApacheCommonsMathGeneticsChromosome:(OrgApacheCommonsMathGeneticsChromosome *)another {
  if (!([another isKindOfClass:[OrgApacheCommonsMathGeneticsBinaryChromosome class]])) return NO;
  OrgApacheCommonsMathGeneticsBinaryChromosome *anotherBc = (OrgApacheCommonsMathGeneticsBinaryChromosome *) check_class_cast(another, [OrgApacheCommonsMathGeneticsBinaryChromosome class]);
  if ([self getLength] != [((OrgApacheCommonsMathGeneticsBinaryChromosome *) nil_chk(anotherBc)) getLength]) return NO;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk([self getRepresentation])) size]; i++) {
    if (!([((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk([self getRepresentation])) getWithInt:i])) isEqual:[((id<JavaUtilList>) nil_chk([anotherBc getRepresentation])) getWithInt:i]])) return NO;
  }
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilList:", "BinaryChromosome", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangIntegerArray:", "BinaryChromosome", NULL, 0x1, NULL, NULL },
    { "checkValidityWithJavaUtilList:", "checkValidity", "V", 0x4, "Lorg.apache.commons.math.genetics.InvalidRepresentationException;", NULL },
    { "randomBinaryRepresentationWithInt:", "randomBinaryRepresentation", "Ljava.util.List;", 0x9, NULL, NULL },
    { "isSameWithOrgApacheCommonsMathGeneticsChromosome:", "isSame", "Z", 0x4, NULL, NULL },
  };
  static const char *superclass_type_args[] = {"Ljava.lang.Integer;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathGeneticsBinaryChromosome = { 2, "BinaryChromosome", "org.apache.commons.math.genetics", NULL, 0x401, 5, methods, 0, NULL, 1, superclass_type_args, 0, NULL, NULL, "Lorg/apache/commons/math/genetics/AbstractListChromosome<Ljava/lang/Integer;>;" };
  return &_OrgApacheCommonsMathGeneticsBinaryChromosome;
}

@end

void OrgApacheCommonsMathGeneticsBinaryChromosome_initWithJavaUtilList_(OrgApacheCommonsMathGeneticsBinaryChromosome *self, id<JavaUtilList> representation) {
  OrgApacheCommonsMathGeneticsAbstractListChromosome_initWithJavaUtilList_(self, representation);
}

void OrgApacheCommonsMathGeneticsBinaryChromosome_initWithJavaLangIntegerArray_(OrgApacheCommonsMathGeneticsBinaryChromosome *self, IOSObjectArray *representation) {
  OrgApacheCommonsMathGeneticsAbstractListChromosome_initWithNSObjectArray_(self, representation);
}

id<JavaUtilList> OrgApacheCommonsMathGeneticsBinaryChromosome_randomBinaryRepresentationWithInt_(jint length) {
  OrgApacheCommonsMathGeneticsBinaryChromosome_initialize();
  id<JavaUtilList> rList = [new_JavaUtilArrayList_initWithInt_(length) autorelease];
  for (jint j = 0; j < length; j++) {
    [rList addWithId:JavaLangInteger_valueOfWithInt_([((id<OrgApacheCommonsMathRandomRandomGenerator>) nil_chk(OrgApacheCommonsMathGeneticsGeneticAlgorithm_getRandomGenerator())) nextIntWithInt:2])];
  }
  return rList;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathGeneticsBinaryChromosome)
