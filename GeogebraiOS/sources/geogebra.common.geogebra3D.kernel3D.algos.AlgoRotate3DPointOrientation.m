//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3DPointOrientation.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3DPointOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTransformation3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/RotateableND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> center_;
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation, center_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation, orientation_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, inArg, angle, center, orientation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, inArg, angle, center, orientation);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Rotate();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inGeo_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(angle_)) toGeoElement]);
  IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(center_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 3, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(orientation_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutput];
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  NSString *s;
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:orientation_]) {
    s = @"ARotatedByAngleBAboutPlaneCThroughD";
  }
  else {
    s = @"ARotatedByAngleBAboutCThroughD";
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:s withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(angle_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(orientation_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(center_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jdouble)getAreaScaleFactor {
  return 1;
}

- (void)dealloc {
  RELEASE_(center_);
  RELEASE_(orientation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoRotate3DPointOrientation", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoRotate3DPointOrientation", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "center_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "orientation_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation = { 2, "AlgoRotate3DPointOrientation", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelArithmeticNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, inArg, angle, center, orientation);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->out_, [GeogebraCommonKernelGeosGeoElement class])))) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelArithmeticNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, inArg, angle, center, orientation);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelArithmeticNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, inArg, angle);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_set_center_(self, center);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_set_orientation_(self, orientation);
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_compute(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelArithmeticNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, inArg, angle, center, orientation);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoList class]) withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if ([self->inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTransformation3D_toGeoCurveCartesianWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self->kernel_, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoFunction class]), (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast(self->outGeo_, [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]));
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setWithGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  [((id<GeogebraCommonKernelKernelNDRotateableND>) nil_chk(self->out_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:self->angle_ withGeogebraCommonKernelKernelNDGeoPointND:self->center_ withGeogebraCommonKernelKernelNDGeoDirectionND:self->orientation_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3DPointOrientation)
