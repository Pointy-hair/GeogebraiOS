//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetPointSize.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/kernelND/GeoPolyhedronInterface.h"
#include "geogebra/common/kernel/scripting/CmdSetPointSize.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdSetPointSize

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetPointSize_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    jboolean ok;
    switch (n) {
      case 2:
      GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
      ok = NO;
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 1)]) {
        ok = YES;
        if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:IOSObjectArray_Get(arg_, 0)]) {
          jint size = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
          if (size > 0) {
            [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:YES];
            [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelGeosPointProperties))))) setPointSizeWithInt:size];
          }
          else {
            [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setEuclidianVisibleIfNoConditionToShowObjectWithBoolean:NO];
          }
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) updateRepaint];
          return;
        }
        if ([GeogebraCommonKernelKernelNDGeoPolyhedronInterface_class_() isInstance:IOSObjectArray_Get(arg_, 0)]) {
          id<GeogebraCommonKernelKernelNDGeoPolyhedronInterface> poly = (id<GeogebraCommonKernelKernelNDGeoPolyhedronInterface>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelKernelNDGeoPolyhedronInterface));
          jint size = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
          [((id<GeogebraCommonKernelKernelNDGeoPolyhedronInterface>) nil_chk(poly)) setPointSizeOrVisibilityWithInt:size];
          return;
        }
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoPolygon]) {
          GeogebraCommonKernelGeosGeoPolygon *poly = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoPolygon class]);
          jint size = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
          [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) setPointSizeOrVisibilityWithInt:size];
          return;
        }
      }
      if (!ok) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetPointSize", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetPointSize = { 2, "CmdSetPointSize", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetPointSize;
}

@end

void GeogebraCommonKernelScriptingCmdSetPointSize_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetPointSize *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetPointSize *new_GeogebraCommonKernelScriptingCmdSetPointSize_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetPointSize *self = [GeogebraCommonKernelScriptingCmdSetPointSize alloc];
  GeogebraCommonKernelScriptingCmdSetPointSize_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetPointSize)
