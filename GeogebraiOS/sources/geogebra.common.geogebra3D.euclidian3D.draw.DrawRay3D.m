//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawRay3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawCoordSys1D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawRay3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoRay3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view
                                  withGeogebraCommonKernelKernelNDGeoRayND:(id<GeogebraCommonKernelKernelNDGeoRayND>)ray {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoRayND_(self, a_view, ray);
  return self;
}

- (jboolean)updateForItSelf {
  [self updateForItSelfWithBoolean:YES];
  return YES;
}

- (void)updateForItSelfWithBoolean:(jboolean)updateDrawMinMax {
  if (updateDrawMinMax) [self updateDrawMinMax];
  [super updateForItSelf];
}

- (void)updateDrawMinMax {
  id<GeogebraCommonKernelKernelNDGeoLineND> line = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o];
  IOSDoubleArray *minmax = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getIntervalClippedWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, JavaLangDouble_POSITIVE_INFINITY } count:2] withGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:v];
  [self setDrawMinMaxWithDouble:IOSDoubleArray_Get(nil_chk(minmax), 0) withDouble:IOSDoubleArray_Get(minmax, 1)];
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
    [self updateForItSelf];
  }
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelKernelNDGeoRayND:", "DrawRay3D", NULL, 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForItSelfWithBoolean:", "updateForItSelf", "V", 0x4, NULL, NULL },
    { "updateDrawMinMax", NULL, "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawRay3D", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D = { 2, "DrawRay3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoRayND_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view, id<GeogebraCommonKernelKernelNDGeoRayND> ray) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawCoordSys1D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ray, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoRayND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view, id<GeogebraCommonKernelKernelNDGeoRayND> ray) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoRayND_(self, a_view, ray);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawCoordSys1D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, selectedPoints, [new_GeogebraCommonGeogebra3DKernel3DGeosGeoRay3D_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(a_view3D)) getKernel])) getConstruction]) autorelease]);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, a_view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D)
