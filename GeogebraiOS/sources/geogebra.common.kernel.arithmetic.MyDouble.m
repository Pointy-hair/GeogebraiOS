//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/MyDouble.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Evaluatable.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/MyMath.h"
#include "geogebra/common/util/MyMath2.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelArithmeticMyDouble () {
 @public
  jdouble val_;
  jboolean isAngle__;
}

- (void)checkZero;

+ (jdouble)doRoundWithDouble:(jdouble)x;

@end

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticMyDouble_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticMyDouble_checkZero(GeogebraCommonKernelArithmeticMyDouble *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticMyDouble *GeogebraCommonKernelArithmeticMyDouble_round(GeogebraCommonKernelArithmeticMyDouble *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(jdouble x);

__attribute__((unused)) static jdouble GeogebraCommonKernelArithmeticMyDouble_getDouble(GeogebraCommonKernelArithmeticMyDouble *self);

jdouble GeogebraCommonKernelArithmeticMyDouble_LARGEST_INTEGER_ = 9007199254740992.0;

@implementation GeogebraCommonKernelArithmeticMyDouble

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                        withDouble:(jdouble)x {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self, kernel, x);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)d {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(self, d);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)power {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, power);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  GeogebraCommonKernelArithmeticMyDouble *ret = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(self) autorelease];
  GeogebraCommonKernelArithmeticMyDouble_set_kernel_(ret, kernel1);
  return ret;
}

- (void)setWithDouble:(jdouble)x {
  val_ = x;
}

- (void)resolveVariables {
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isAngle__) {
    jdouble angleVal = GeogebraCommonKernelKernel_convertToAngleValueWithDouble_(val_);
    return [((JavaLangStringBuilder *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:angleVal withGeogebraCommonKernelStringTemplate:tpl withBoolean:NO])) description];
  }
  NSString *ret = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:(val_) withGeogebraCommonKernelStringTemplate:tpl];
  switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if (val_ == JavaLangMath_PI) {
      return @"pi";
    }
    if (val_ == JavaLangMath_E) {
      return @"e";
    }
    if ([((NSString *) nil_chk(ret)) indexOf:'.'] > -1) {
      return GeogebraCommonUtilStringUtil_wrapInExactWithNSString_(ret);
    }
    return ret;
    default:
    return ret;
  }
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyDouble_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setAngle {
  isAngle__ = YES;
}

- (jboolean)isAngle {
  return isAngle__;
}

- (GeogebraCommonKernelArithmeticMyDouble *)random {
  val_ = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getRandomNumber];
  isAngle__ = NO;
  return self;
}

+ (void)addWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_addWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)subWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
        withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_subWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)multWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
            withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_multWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)multWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
                                            withDouble:(jdouble)b
            withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_multWithGeogebraCommonKernelArithmeticMyDouble_withDouble_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)divWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)b
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_divWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (void)powWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)b
           withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_powWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

+ (jdouble)powWithDouble:(jdouble)a
              withDouble:(jdouble)b {
  return GeogebraCommonKernelArithmeticMyDouble_powWithDouble_withDouble_(a, b);
}

+ (void)powDoubleSgnChangeWithGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)a
                          withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)b
                          withGeogebraCommonKernelArithmeticMyDouble:(GeogebraCommonKernelArithmeticMyDouble *)c {
  GeogebraCommonKernelArithmeticMyDouble_powDoubleSgnChangeWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(a, b, c);
}

- (GeogebraCommonKernelArithmeticMyDouble *)cos {
  val_ = JavaLangMath_cosWithDouble_(val_);
  isAngle__ = NO;
  GeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sin {
  val_ = JavaLangMath_sinWithDouble_(val_);
  isAngle__ = NO;
  GeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  return self;
}

- (void)checkZero {
  GeogebraCommonKernelArithmeticMyDouble_checkZero(self);
}

- (GeogebraCommonKernelArithmeticMyDouble *)tan {
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(fmod(JavaLangMath_absWithDouble_(val_), JavaLangMath_PI), GeogebraCommonKernelKernel_PI_HALF)) {
    val_ = JavaLangDouble_NaN;
  }
  else {
    val_ = JavaLangMath_tanWithDouble_(val_);
    GeogebraCommonKernelArithmeticMyDouble_checkZero(self);
  }
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)acos {
  isAngle__ = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_acosWithDouble_(val_)];
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)asin {
  isAngle__ = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_asinWithDouble_(val_)];
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)atan {
  isAngle__ = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_atanWithDouble_(val_)];
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)atan2WithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)y {
  isAngle__ = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getInverseTrigReturnsAngle];
  [self setWithDouble:JavaLangMath_atan2WithDouble_withDouble_(val_, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(y)) getDouble])];
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)log {
  val_ = JavaLangMath_logWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)logWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)base {
  val_ = JavaLangMath_logWithDouble_(val_) / JavaLangMath_logWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(base)) getDouble]);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)erf {
  val_ = GeogebraCommonUtilMyMath2_erfWithDouble_withDouble_withDouble_(0.0, 1.0, val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)inverf {
  val_ = GeogebraCommonUtilMyMath2_inverfWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)polygammaWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)order {
  val_ = GeogebraCommonUtilMyMath2_polyGammaWithGeogebraCommonKernelArithmeticNumberValue_withDouble_(order, val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)psi {
  val_ = GeogebraCommonUtilMyMath2_psiWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)log10 {
  val_ = JavaLangMath_logWithDouble_(val_) / GeogebraCommonUtilMyMath_get_LOG10_();
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)log2 {
  val_ = JavaLangMath_logWithDouble_(val_) / GeogebraCommonUtilMyMath_get_LOG2_();
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)exp {
  val_ = JavaLangMath_expWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sqrt {
  val_ = JavaLangMath_sqrtWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)cbrt {
  val_ = GeogebraCommonUtilMyMath_cbrtWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)abs {
  val_ = JavaLangMath_absWithDouble_(val_);
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)floor {
  if (isAngle__ && [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAngleUnit] == GeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:GeogebraCommonKernelKernel_PI_180 * JavaLangMath_floorWithDouble_(GeogebraCommonKernelKernel_checkIntegerWithDouble_(val_ * GeogebraCommonKernelKernel_CONST_180_PI))];
  }
  else {
    [self setWithDouble:JavaLangMath_floorWithDouble_(GeogebraCommonKernelKernel_checkIntegerWithDouble_(val_))];
  }
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)ceil {
  if (isAngle__ && [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAngleUnit] == GeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:GeogebraCommonKernelKernel_PI_180 * JavaLangMath_ceilWithDouble_(GeogebraCommonKernelKernel_checkIntegerWithDouble_(val_ * GeogebraCommonKernelKernel_CONST_180_PI))];
  }
  else {
    [self setWithDouble:JavaLangMath_ceilWithDouble_(GeogebraCommonKernelKernel_checkIntegerWithDouble_(val_))];
  }
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)round {
  return GeogebraCommonKernelArithmeticMyDouble_round(self);
}

- (GeogebraCommonKernelArithmeticMyDouble *)roundWithDouble:(jdouble)digits {
  if (!GeogebraCommonKernelKernel_isIntegerWithDouble_(digits)) {
    [self setWithDouble:JavaLangDouble_NaN];
  }
  jdouble pow = JavaLangMath_powWithDouble_withDouble_(10, digits);
  [self setWithDouble:val_ * pow];
  GeogebraCommonKernelArithmeticMyDouble_round(self);
  [self setWithDouble:val_ / pow];
  return self;
}

+ (jdouble)doRoundWithDouble:(jdouble)x {
  return GeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(x);
}

- (GeogebraCommonKernelArithmeticMyDouble *)sgn {
  val_ = GeogebraCommonUtilMyMath_sgnWithGeogebraCommonKernelKernel_withDouble_(kernel_, val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)cosh {
  val_ = GeogebraCommonUtilMyMath_coshWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sinh {
  val_ = GeogebraCommonUtilMyMath_sinhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)tanh {
  val_ = GeogebraCommonUtilMyMath_tanhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)acosh {
  val_ = GeogebraCommonUtilMyMath_acoshWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)asinh {
  val_ = GeogebraCommonUtilMyMath_asinhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)csc {
  val_ = GeogebraCommonUtilMyMath_cscWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sec {
  val_ = GeogebraCommonUtilMyMath_secWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)cot {
  val_ = GeogebraCommonUtilMyMath_cotWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)csch {
  val_ = GeogebraCommonUtilMyMath_cschWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sech {
  val_ = GeogebraCommonUtilMyMath_sechWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)coth {
  val_ = GeogebraCommonUtilMyMath_cothWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)atanh {
  val_ = GeogebraCommonUtilMyMath_atanhWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)cosineIntegral {
  val_ = GeogebraCommonUtilMyMath2_ciWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)sineIntegral {
  val_ = GeogebraCommonUtilMyMath2_siWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)expIntegral {
  val_ = GeogebraCommonUtilMyMath2_eiWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)factorial {
  val_ = GeogebraCommonUtilMyMath2_factorialWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)gamma {
  val_ = GeogebraCommonUtilMyMath2_gammaWithDouble_(val_);
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)applyWithGeogebraCommonKernelArithmeticEvaluatable:(id<GeogebraCommonKernelArithmeticEvaluatable>)lt {
  val_ = [((id<GeogebraCommonKernelArithmeticEvaluatable>) nil_chk(lt)) evaluateWithDouble:val_];
  isAngle__ = NO;
  return self;
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(self) autorelease];
}

- (jboolean)isConstant {
  return YES;
}

- (JavaUtilHashSet *)getVariables {
  return nil;
}

- (jboolean)isLeaf {
  return YES;
}

- (jdouble)getDouble {
  return GeogebraCommonKernelArithmeticMyDouble_getDouble(self);
}

- (GeogebraCommonKernelGeosGeoElement *)toGeoElement {
  GeogebraCommonKernelGeosGeoNumeric *num = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], val_) autorelease];
  return num;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

+ (jdouble)parsePercentageWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)app
                                                withNSString:(NSString *)str {
  return GeogebraCommonKernelArithmeticMyDouble_parsePercentageWithGeogebraCommonMainLocalization_withNSString_(app, str);
}

+ (jdouble)parseDoubleWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)app
                                            withNSString:(NSString *)str {
  return GeogebraCommonKernelArithmeticMyDouble_parseDoubleWithGeogebraCommonMainLocalization_withNSString_(app, str);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)gammaIncompleteRegularizedWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = GeogebraCommonUtilMyMath2_gammaIncompleteRegularizedWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble], val_);
  isAngle__ = NO;
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)gammaIncompleteWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = GeogebraCommonUtilMyMath2_gammaIncompleteWithDouble_withDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble], val_);
  isAngle__ = NO;
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)betaWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)lt {
  val_ = GeogebraCommonUtilMyMath2_betaWithDouble_withDouble_(val_, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(lt)) getDouble]);
  isAngle__ = NO;
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)betaIncompleteWithGeogebraCommonKernelArithmeticVectorValue:(id<GeogebraCommonKernelArithmeticVectorValue>)lt {
  GeogebraCommonKernelGeosGeoVec2D *vec = [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(lt)) getVector];
  val_ = GeogebraCommonUtilMyMath2_betaIncompleteWithDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) getX], [vec getY], val_);
  isAngle__ = NO;
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)betaIncompleteRegularizedWithGeogebraCommonKernelArithmeticVectorValue:(id<GeogebraCommonKernelArithmeticVectorValue>)lt {
  GeogebraCommonKernelGeosGeoVec2D *vec = [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(lt)) getVector];
  val_ = GeogebraCommonUtilMyMath2_betaIncompleteRegularizedWithDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(vec)) getX], [vec getY], val_);
  isAngle__ = NO;
  return self;
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticMyDouble_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (jint)compareToWithId:(id)arg0 {
  check_class_cast(arg0, [NSObject class]);
  if ([arg0 isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
    GeogebraCommonKernelArithmeticMyDouble *d = (GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(arg0, [GeogebraCommonKernelArithmeticMyDouble class]);
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(val_, GeogebraCommonKernelArithmeticMyDouble_getDouble(nil_chk(d)))) {
      return 0;
    }
    return val_ - GeogebraCommonKernelArithmeticMyDouble_getDouble(d) < 0 ? -1 : 1;
  }
  return 0;
}

- (jboolean)isEqual:(id)d {
  if (d == nil) {
    return NO;
  }
  if ([d isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
    return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(GeogebraCommonKernelArithmeticMyDouble_getDouble(nil_chk(((GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(d, [GeogebraCommonKernelArithmeticMyDouble class])))), val_);
  }
  return NO;
}

- (NSUInteger)hash {
  return J2ObjCFpToInt((val_ * 1000));
}

- (jboolean)isDefined {
  return !JavaLangDouble_isNaNWithDouble_(val_);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)fractionalPart {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, val_ > 0 ? val_ - JavaLangMath_floorWithDouble_(val_) : val_ - JavaLangMath_ceilWithDouble_(val_)) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)zeta {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, GeogebraCommonUtilMyMath2_zetaWithDouble_(val_)) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0) autorelease];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv) autorelease];
}

+ (jboolean)isFiniteWithDouble:(jdouble)d {
  return GeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(d);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withDouble:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticMyDouble:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withNSString:", "MyDouble", NULL, 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setAngle", NULL, "V", 0x1, NULL, NULL },
    { "isAngle", NULL, "Z", 0x1, NULL, NULL },
    { "random", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticMyDouble:", "add", "V", 0x19, NULL, NULL },
    { "subWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticMyDouble:", "sub", "V", 0x19, NULL, NULL },
    { "multWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticMyDouble:", "mult", "V", 0x19, NULL, NULL },
    { "multWithGeogebraCommonKernelArithmeticMyDouble:withDouble:withGeogebraCommonKernelArithmeticMyDouble:", "mult", "V", 0x19, NULL, NULL },
    { "divWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:", "div", "V", 0x19, NULL, NULL },
    { "powWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:", "pow", "V", 0x19, NULL, NULL },
    { "powWithDouble:withDouble:", "pow", "D", 0x19, NULL, NULL },
    { "powDoubleSgnChangeWithGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:withGeogebraCommonKernelArithmeticMyDouble:", "powDoubleSgnChange", "V", 0x19, NULL, NULL },
    { "cos", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sin", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "checkZero", NULL, "V", 0x2, NULL, NULL },
    { "tan", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "acos", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "asin", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atan", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atan2WithGeogebraCommonKernelArithmeticNumberValue:", "atan2", "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "logWithGeogebraCommonKernelArithmeticNumberValue:", "log", "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "erf", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "inverf", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "polygammaWithGeogebraCommonKernelArithmeticNumberValue:", "polygamma", "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "psi", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log10", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "log2", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "exp", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sqrt", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cbrt", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "abs", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "floor", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "ceil", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "round", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "roundWithDouble:", "round", "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "doRoundWithDouble:", "doRound", "D", 0x1a, NULL, NULL },
    { "sgn", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cosh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sinh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "tanh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "acosh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "asinh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "csc", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sec", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cot", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "csch", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sech", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "coth", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "atanh", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "cosineIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "sineIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "expIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "factorial", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "gamma", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "applyWithGeogebraCommonKernelArithmeticEvaluatable:", "apply", "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x11, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x11, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "toGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "parsePercentageWithGeogebraCommonMainLocalization:withNSString:", "parsePercentage", "D", 0x9, NULL, NULL },
    { "parseDoubleWithGeogebraCommonMainLocalization:withNSString:", "parseDouble", "D", 0x9, NULL, NULL },
    { "gammaIncompleteRegularizedWithGeogebraCommonKernelArithmeticNumberValue:", "gammaIncompleteRegularized", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "gammaIncompleteWithGeogebraCommonKernelArithmeticNumberValue:", "gammaIncomplete", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaWithGeogebraCommonKernelArithmeticNumberValue:", "beta", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaIncompleteWithGeogebraCommonKernelArithmeticVectorValue:", "betaIncomplete", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "betaIncompleteRegularizedWithGeogebraCommonKernelArithmeticVectorValue:", "betaIncompleteRegularized", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "fractionalPart", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "zeta", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:", "derivative", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithGeogebraCommonKernelArithmeticFunctionVariable:", "integral", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "isFiniteWithDouble:", "isFinite", "Z", 0x9, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "val_", NULL, 0x2, "D", NULL, NULL,  },
    { "isAngle__", "isAngle", 0x2, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "LARGEST_INTEGER_", NULL, 0x9, "D", &GeogebraCommonKernelArithmeticMyDouble_LARGEST_INTEGER_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticMyDouble = { 2, "MyDouble", "geogebra.common.kernel.arithmetic", NULL, 0x1, 92, methods, 4, fields, 0, NULL, 0, NULL, NULL, "Lgeogebra/common/kernel/arithmetic/ValidExpression;Lgeogebra/common/kernel/arithmetic/NumberValue;Ljava/lang/Comparable<Ljava/lang/Object;>;" };
  return &_GeogebraCommonKernelArithmeticMyDouble;
}

@end

void GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self, kernel, 0.0);
}

GeogebraCommonKernelArithmeticMyDouble *new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticMyDouble *self = [GeogebraCommonKernelArithmeticMyDouble alloc];
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelKernel *kernel, jdouble x) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  GeogebraCommonKernelArithmeticMyDouble_set_kernel_(self, kernel);
  self->val_ = x;
}

GeogebraCommonKernelArithmeticMyDouble *new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(GeogebraCommonKernelKernel *kernel, jdouble x) {
  GeogebraCommonKernelArithmeticMyDouble *self = [GeogebraCommonKernelArithmeticMyDouble alloc];
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self, kernel, x);
  return self;
}

void GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelArithmeticMyDouble *d) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  GeogebraCommonKernelArithmeticMyDouble_set_kernel_(self, ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(d))->kernel_);
  self->val_ = d->val_;
  self->isAngle__ = d->isAngle__;
}

GeogebraCommonKernelArithmeticMyDouble *new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *d) {
  GeogebraCommonKernelArithmeticMyDouble *self = [GeogebraCommonKernelArithmeticMyDouble alloc];
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(self, d);
  return self;
}

void GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelKernel *kernel, NSString *power) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  self->isAngle__ = NO;
  GeogebraCommonKernelArithmeticMyDouble_set_kernel_(self, kernel);
  jint sign = 1;
  jint start = 0;
  if ([((NSString *) nil_chk(power)) charAtWithInt:0] == GeogebraCommonUtilUnicode_Superscript_Minus) {
    start = 1;
    sign = -1;
  }
  self->val_ = 0;
  for (jint i = 0; i < ((jint) [power length]) - start; i++) {
    switch ([power charAtWithInt:((jint) [power length]) - 1 - i]) {
      case GeogebraCommonUtilUnicode_Superscript_0:
      break;
      case GeogebraCommonUtilUnicode_Superscript_1:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i);
      break;
      case GeogebraCommonUtilUnicode_Superscript_2:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 2;
      break;
      case GeogebraCommonUtilUnicode_Superscript_3:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 3;
      break;
      case GeogebraCommonUtilUnicode_Superscript_4:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 4;
      break;
      case GeogebraCommonUtilUnicode_Superscript_5:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 5;
      break;
      case GeogebraCommonUtilUnicode_Superscript_6:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 6;
      break;
      case GeogebraCommonUtilUnicode_Superscript_7:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 7;
      break;
      case GeogebraCommonUtilUnicode_Superscript_8:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 8;
      break;
      case GeogebraCommonUtilUnicode_Superscript_9:
      self->val_ += JavaLangMath_powWithDouble_withDouble_(10, i) * 9;
      break;
      default:
      self->val_ = JavaLangDouble_NaN;
      return;
    }
  }
  self->val_ = self->val_ * sign;
}

GeogebraCommonKernelArithmeticMyDouble *new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withNSString_(GeogebraCommonKernelKernel *kernel, NSString *power) {
  GeogebraCommonKernelArithmeticMyDouble *self = [GeogebraCommonKernelArithmeticMyDouble alloc];
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withNSString_(self, kernel, power);
  return self;
}

NSString *GeogebraCommonKernelArithmeticMyDouble_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticMyDouble *self, GeogebraCommonKernelStringTemplate *tpl) {
  return [self toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

void GeogebraCommonKernelArithmeticMyDouble_addWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, id<GeogebraCommonKernelArithmeticNumberValue> b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  [c setWithDouble:a->val_ + [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble]];
}

void GeogebraCommonKernelArithmeticMyDouble_subWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, id<GeogebraCommonKernelArithmeticNumberValue> b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  [c setWithDouble:a->val_ - [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble]];
}

void GeogebraCommonKernelArithmeticMyDouble_multWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, id<GeogebraCommonKernelArithmeticNumberValue> b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ || [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) isAngle]);
  jdouble bval = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) getDouble];
  if (JavaLangDouble_isNaNWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(bval)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(a->val_) && JavaLangDouble_isInfiniteWithDouble_(bval) && JavaLangMath_signumWithDouble_(a->val_) != JavaLangMath_signumWithDouble_(bval)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:a->val_ * bval];
}

void GeogebraCommonKernelArithmeticMyDouble_multWithGeogebraCommonKernelArithmeticMyDouble_withDouble_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, jdouble b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__;
  if (JavaLangDouble_isNaNWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(b)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(a->val_) && JavaLangDouble_isInfiniteWithDouble_(b) && JavaLangMath_signumWithDouble_(a->val_) != JavaLangMath_signumWithDouble_(b)) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:a->val_ * b];
}

void GeogebraCommonKernelArithmeticMyDouble_divWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, GeogebraCommonKernelArithmeticMyDouble *b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  [c setWithDouble:a->val_ / ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_];
}

void GeogebraCommonKernelArithmeticMyDouble_powWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, GeogebraCommonKernelArithmeticMyDouble *b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_) && (JavaLangDouble_isInfiniteWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(a->val_))) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:JavaLangMath_powWithDouble_withDouble_(a->val_, b->val_)];
}

jdouble GeogebraCommonKernelArithmeticMyDouble_powWithDouble_withDouble_(jdouble a, jdouble b) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(b) && (JavaLangDouble_isInfiniteWithDouble_(a) || JavaLangDouble_isNaNWithDouble_(a))) {
    return JavaLangDouble_NaN;
  }
  return JavaLangMath_powWithDouble_withDouble_(a, b);
}

void GeogebraCommonKernelArithmeticMyDouble_powDoubleSgnChangeWithGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_withGeogebraCommonKernelArithmeticMyDouble_(GeogebraCommonKernelArithmeticMyDouble *a, GeogebraCommonKernelArithmeticMyDouble *b, GeogebraCommonKernelArithmeticMyDouble *c) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  ((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c))->isAngle__ = (((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a))->isAngle__ && !((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->isAngle__);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(b))->val_) && (JavaLangDouble_isInfiniteWithDouble_(a->val_) || JavaLangDouble_isNaNWithDouble_(a->val_))) {
    [c setWithDouble:JavaLangDouble_NaN];
    return;
  }
  [c setWithDouble:-JavaLangMath_powWithDouble_withDouble_(-a->val_, b->val_)];
}

void GeogebraCommonKernelArithmeticMyDouble_checkZero(GeogebraCommonKernelArithmeticMyDouble *self) {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(self->val_)) self->val_ = 0;
}

GeogebraCommonKernelArithmeticMyDouble *GeogebraCommonKernelArithmeticMyDouble_round(GeogebraCommonKernelArithmeticMyDouble *self) {
  if (self->isAngle__ && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAngleUnit] == GeogebraCommonKernelKernel_ANGLE_DEGREE) {
    [self setWithDouble:GeogebraCommonKernelKernel_PI_180 * GeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(self->val_ * GeogebraCommonKernelKernel_CONST_180_PI)];
  }
  else {
    [self setWithDouble:GeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(self->val_)];
  }
  return self;
}

jdouble GeogebraCommonKernelArithmeticMyDouble_doRoundWithDouble_(jdouble x) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  return JavaLangMath_floorWithDouble_(x + 0.5);
}

jdouble GeogebraCommonKernelArithmeticMyDouble_getDouble(GeogebraCommonKernelArithmeticMyDouble *self) {
  return self->val_;
}

jdouble GeogebraCommonKernelArithmeticMyDouble_parsePercentageWithGeogebraCommonMainLocalization_withNSString_(GeogebraCommonMainLocalization *app, NSString *str) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  return GeogebraCommonKernelArithmeticMyDouble_parseDoubleWithGeogebraCommonMainLocalization_withNSString_(app, [str substring:0 endIndex:((jint) [((NSString *) nil_chk(str)) length]) - 1]) / 100;
}

jdouble GeogebraCommonKernelArithmeticMyDouble_parseDoubleWithGeogebraCommonMainLocalization_withNSString_(GeogebraCommonMainLocalization *app, NSString *str) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb setLengthWithInt:0];
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    jint ch = [str charAtWithInt:i];
    if (ch <= (jint) 0x30) {
      [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    else if (ch <= (jint) 0x39) ch -= (jint) 0x30;
    else if (ch <= (jint) 0x100) {
      [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    else if (ch <= (jint) 0x669) ch -= (jint) 0x660;
    else if (ch == (jint) 0x66b) {
      [sb appendWithNSString:@"."];
      continue;
    }
    else if (ch <= (jint) 0x6f9) ch -= (jint) 0x6f0;
    else if (ch <= (jint) 0x96f) ch -= (jint) 0x966;
    else if (ch <= (jint) 0x9ef) ch -= (jint) 0x9e6;
    else if (ch <= (jint) 0xa6f) ch -= (jint) 0xa66;
    else if (ch <= (jint) 0xaef) ch -= (jint) 0xae6;
    else if (ch <= (jint) 0xb6f) ch -= (jint) 0xb66;
    else if (ch <= (jint) 0xbef) ch -= (jint) 0xbe6;
    else if (ch <= (jint) 0xc6f) ch -= (jint) 0xc66;
    else if (ch <= (jint) 0xcef) ch -= (jint) 0xce6;
    else if (ch <= (jint) 0xd6f) ch -= (jint) 0xd66;
    else if (ch <= (jint) 0xe59) ch -= (jint) 0xe50;
    else if (ch <= (jint) 0xed9) ch -= (jint) 0xed0;
    else if (ch <= (jint) 0xf29) ch -= (jint) 0xf20;
    else if (ch <= (jint) 0x1049) ch -= (jint) 0x1040;
    else if (ch <= (jint) 0x17e9) ch -= (jint) 0x17e0;
    else if (ch <= (jint) 0x1819) ch -= (jint) 0x1810;
    else if (ch <= (jint) 0x1b59) ch -= (jint) 0x1b50;
    else if (ch <= (jint) 0x1bb9) ch -= (jint) 0x1bb0;
    else if (ch <= (jint) 0x1c49) ch -= (jint) 0x1c40;
    else if (ch <= (jint) 0x1c59) ch -= (jint) 0x1c50;
    else if (ch <= (jint) 0xa8d9) ch -= (jint) 0xa8d0;
    else {
      [sb appendWithNSString:JreStrcat("C", [str charAtWithInt:i])];
      continue;
    }
    [sb appendWithNSString:JreStrcat("I", ch)];
  }
  @try {
    return GeogebraCommonUtilStringUtil_parseDoubleWithNSString_([sb description]);
  }
  @catch (JavaLangException *e) {
    @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(app, @"InvalidInput") autorelease];
  }
}

jboolean GeogebraCommonKernelArithmeticMyDouble_isFiniteWithDouble_(jdouble d) {
  GeogebraCommonKernelArithmeticMyDouble_initialize();
  return !JavaLangDouble_isNaNWithDouble_(d) && !JavaLangDouble_isInfiniteWithDouble_(d);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticMyDouble)
