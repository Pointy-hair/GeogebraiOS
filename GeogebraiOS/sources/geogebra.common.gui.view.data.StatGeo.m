//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/StatGeo.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "geogebra/common/gui/view/data/DataDisplayModel.h"
#include "geogebra/common/gui/view/data/DataVariable.h"
#include "geogebra/common/gui/view/data/StatGeo.h"
#include "geogebra/common/gui/view/data/StatPanelSettings.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoUnique.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionAreaSums.h"
#include "geogebra/common/kernel/algos/AlgoListElement.h"
#include "geogebra/common/kernel/algos/AlgoListMax.h"
#include "geogebra/common/kernel/algos/AlgoListMin.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoText.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/statistics/AlgoClasses.h"
#include "geogebra/common/kernel/statistics/AlgoDotPlot.h"
#include "geogebra/common/kernel/statistics/AlgoFitExp.h"
#include "geogebra/common/kernel/statistics/AlgoFitGrowth.h"
#include "geogebra/common/kernel/statistics/AlgoFitLineY.h"
#include "geogebra/common/kernel/statistics/AlgoFitLog.h"
#include "geogebra/common/kernel/statistics/AlgoFitLogistic.h"
#include "geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "geogebra/common/kernel/statistics/AlgoFitPow.h"
#include "geogebra/common/kernel/statistics/AlgoFitSin.h"
#include "geogebra/common/kernel/statistics/AlgoFrequencyTable.h"
#include "geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "geogebra/common/kernel/statistics/AlgoMean.h"
#include "geogebra/common/kernel/statistics/AlgoNormalQuantilePlot.h"
#include "geogebra/common/kernel/statistics/AlgoResidualPlot.h"
#include "geogebra/common/kernel/statistics/AlgoStandardDeviation.h"
#include "geogebra/common/kernel/statistics/AlgoStemPlot.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGuiViewDataStatGeo () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonKernelConstruction *cons_;
  jdouble xMinData_, xMaxData_, yMinData_, yMaxData_;
  jboolean histogramRight_;
  jboolean removeFromConstruction__;
  id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener_;
}

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList;

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                             withBoolean:(jboolean)isPointList;

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                             withBoolean:(jboolean)isPointList
                                             withBoolean:(jboolean)isMatrix;

- (GeogebraCommonKernelAlgosAlgoPolyLine *)createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram:(GeogebraCommonKernelStatisticsAlgoHistogram *)histogram
                                                                                                     withBoolean:(jboolean)doCumulative;

- (jdouble)getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list;

+ (jdouble)getPreferredBarWidthWithDoubleArray:(IOSDoubleArray *)array;

- (void)setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings;

- (void)setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                       withDouble:(jdouble)xBufferScale
                                                       withDouble:(jdouble)yBufferScale;

- (void)removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatGeo, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatGeo, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatGeo, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataStatGeo, listener_, id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>)

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList);

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList);

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList, jboolean isMatrix);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoPolyLine *GeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelStatisticsAlgoHistogram *histogram, jboolean doCumulative);

__attribute__((unused)) static jdouble GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *list);

__attribute__((unused)) static jdouble GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(IOSDoubleArray *array);

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonGuiViewDataStatPanelSettings *settings);

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonGuiViewDataStatPanelSettings *settings, jdouble xBufferScale, jdouble yBufferScale);

__attribute__((unused)) static void GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelAlgosConstructionElement *ce);

@implementation GeogebraCommonGuiViewDataStatGeo

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor:(id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>)listener {
  GeogebraCommonGuiViewDataStatGeo_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(self, app, listener);
  return self;
}

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
}

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                             withBoolean:(jboolean)isPointList {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, isPointList);
}

- (void)getDataBoundsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                             withBoolean:(jboolean)isPointList
                                             withBoolean:(jboolean)isMatrix {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, isPointList, isMatrix);
}

- (GeogebraCommonKernelGeosGeoElement *)createHistogramWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                            withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                                               withBoolean:(jboolean)isFrequencyPolygon {
  GeogebraCommonKernelAlgosAlgoElement *al = nil, *algoHistogram = nil;
  histogramRight_ = ![((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isLeftRule];
  GeogebraCommonKernelGeosGeoElement *geo;
  if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]));
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
  }
  if ([settings isUseManualClasses] || [settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    al = [new_GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getClassStart]) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getClassWidth]) autorelease], nil) autorelease];
  }
  else {
    [settings setClassWidthWithDouble:(xMaxData_ - xMinData_) / ([settings getNumClasses])];
    if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
      al = [new_GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, nil, nil, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getNumClasses]) autorelease]) autorelease];
    }
    else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
      al = [new_GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), nil, nil, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getNumClasses]) autorelease]) autorelease];
    }
  }
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, al);
  jdouble density = -1;
  jint dataSize = [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size];
  if ([settings getFrequencyType] == GeogebraCommonGuiViewDataStatPanelSettings_TYPE_RELATIVE) density = 1.0 * [settings getClassWidth] / [dataList size];
  if ([settings getFrequencyType] == GeogebraCommonGuiViewDataStatPanelSettings_TYPE_NORMALIZED) density = 1.0 / [dataList size];
  if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoHistogram = [new_GeogebraCommonKernelStatisticsAlgoHistogram_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isCumulative]) autorelease], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(al)) getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]), dataList, nil, [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, YES) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, density) autorelease], histogramRight_) autorelease];
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoHistogram = [new_GeogebraCommonKernelStatisticsAlgoHistogram_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(cons_, [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isCumulative]) autorelease], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(al)) getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [GeogebraCommonKernelGeosGeoList class]), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, YES) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, density) autorelease], histogramRight_) autorelease];
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    algoHistogram = [new_GeogebraCommonKernelStatisticsAlgoHistogram_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [GeogebraCommonKernelGeosGeoList class]), histogramRight_) autorelease];
  }
  if (isFrequencyPolygon) {
    GeogebraCommonKernelAlgosAlgoPolyLine *al3 = GeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(self, (GeogebraCommonKernelStatisticsAlgoHistogram *) check_class_cast(algoHistogram, [GeogebraCommonKernelStatisticsAlgoHistogram class]), [settings isCumulative]);
    geo = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(al3)) getGeoElements]), 0);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_OVERLAY_COLOR_IDX]];
    [geo setLineThicknessWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoHistogram);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, al3);
  }
  else {
    geo = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoHistogram)) getGeoElements]), 0);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_HISTOGRAM_COLOR_IDX]];
    [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
    [geo setLineThicknessWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_thicknessBarChart];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoHistogram);
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoHistogram)) getGeoElements]), 0))) setEuclidianVisibleWithBoolean:NO];
  [algoHistogram setProtectedInputWithBoolean:YES];
  return geo;
}

- (GeogebraCommonKernelAlgosAlgoPolyLine *)createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram:(GeogebraCommonKernelStatisticsAlgoHistogram *)histogram
                                                                                                     withBoolean:(jboolean)doCumulative {
  return GeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(self, histogram, doCumulative);
}

- (GeogebraCommonKernelGeosGeoElement *)createNormalCurveOverlayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelGeosGeoElement *geo;
  GeogebraCommonKernelStatisticsAlgoMean *mean = [new_GeogebraCommonKernelStatisticsAlgoMean_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  GeogebraCommonKernelStatisticsAlgoStandardDeviation *sd = [new_GeogebraCommonKernelStatisticsAlgoStandardDeviation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, mean);
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, sd);
  GeogebraCommonKernelGeosGeoElement *meanGeo = IOSObjectArray_Get(nil_chk([mean getGeoElements]), 0);
  GeogebraCommonKernelGeosGeoElement *sdGeo = IOSObjectArray_Get(nil_chk([sd getGeoElements]), 0);
  GeogebraCommonKernelArithmeticFunctionVariable *x = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, x, GeogebraCommonPluginOperationEnum_get_MINUS(), meanGeo) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_DIVIDE(), sdGeo) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0) autorelease]) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, -2.0) autorelease]) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_EXP(), nil) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_DIVIDE(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangMath_sqrtWithDouble_(2 * JavaLangMath_PI)) autorelease]) autorelease];
  normal = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, normal, GeogebraCommonPluginOperationEnum_get_DIVIDE(), sdGeo) autorelease];
  geo = [normal buildFunctionWithGeogebraCommonKernelArithmeticFunctionVariable:x];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_OVERLAY_COLOR_IDX]];
  [geo setLineThicknessWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  return geo;
}

- (void)getHistogramSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)histogram
                 withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]));
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_CLASS()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]));
  }
  jdouble freqMax = [((GeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(((GeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(histogram)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoFunctionAreaSums class])))) getFreqMax];
  if ([settings isUseManualClasses]) {
    IOSDoubleArray *leftBorder = [((GeogebraCommonKernelAlgosAlgoFunctionAreaSums *) nil_chk(((GeogebraCommonKernelAlgosAlgoFunctionAreaSums *) check_class_cast([histogram getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoFunctionAreaSums class])))) getLeftBorder];
    xMinData_ = IOSDoubleArray_Get(nil_chk(leftBorder), 0);
    xMaxData_ = IOSDoubleArray_Get(leftBorder, leftBorder->size_ - 1);
  }
  yMinData_ = 0.0;
  yMaxData_ = freqMax;
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .1);
  settings->showYAxis_ = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 1) = YES;
  settings->forceXAxisBuffer_ = YES;
}

- (GeogebraCommonKernelGeosGeoElement *)createBarChartTextWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                               withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelAlgosAlgoBarChart *algoBarChart = nil;
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticBarWidth]) {
    [settings setBarWidthWithDouble:0.5];
  }
  if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [GeogebraCommonKernelGeosGeoList class]), [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
  }
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
  geo = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_BARCHART_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [algoBarChart setProtectedInputWithBoolean:YES];
  return geo;
}

- (GeogebraCommonKernelGeosGeoElement *)createBarChartNumericWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                                  withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelAlgosAlgoBarChart *algoBarChart = nil;
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    if ([settings isAutomaticBarWidth]) {
      GeogebraCommonKernelAdvancedAlgoUnique *algo = [new_GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      [settings setBarWidthWithDouble:GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList_(self, [algo getResult])];
    }
    algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
    geo = IOSObjectArray_Get(nil_chk([algoBarChart getGeoElements]), 0);
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    if ([settings isAutomaticBarWidth]) {
      [settings setBarWidthWithDouble:GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]))];
    }
    algoBarChart = [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [GeogebraCommonKernelGeosGeoList class]), [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [settings getBarWidth]) autorelease]) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoBarChart);
    geo = IOSObjectArray_Get(nil_chk([algoBarChart getGeoElements]), 0);
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_BARCHART_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) setProtectedInputWithBoolean:YES];
  return geo;
}

- (jdouble)getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  return GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList_(self, list);
}

+ (jdouble)getPreferredBarWidthWithDoubleArray:(IOSDoubleArray *)array {
  return GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(array);
}

- (GeogebraCommonKernelGeosGeoElement *)createFrequencyTableGeoWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)chart
                                           withGeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum:(GeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum *)plotType {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *al = nil;
  switch ([plotType ordinal]) {
    case GeogebraCommonGuiViewDataDataDisplayModel_PlotType_HISTOGRAM:
    al = [new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(cons_, chart) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataDisplayModel_PlotType_BARCHART:
    al = [new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(cons_, chart) autorelease];
    break;
  }
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, al);
  return IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelStatisticsAlgoFrequencyTable *) nil_chk(al)) getGeoElements]), 0);
}

- (void)getBarChartSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings
                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)barChart {
  IOSDoubleArray *leftBorder = [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((GeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(barChart)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoBarChart class])))) getLeftBorder];
  xMinData_ = IOSDoubleArray_Get(nil_chk(leftBorder), 0) - [((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) getBarWidth] / 2;
  xMaxData_ = IOSDoubleArray_Get(leftBorder, leftBorder->size_ - 1) + [settings getBarWidth];
  jdouble freqMax = [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(((GeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([barChart getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoBarChart class])))) getFreqMax];
  yMinData_ = 0.0;
  yMaxData_ = freqMax;
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .1);
  if ([settings isAutomaticWindow] && ![settings isNumericData]) {
    settings->xAxesIntervalAuto_ = NO;
    settings->xAxesInterval_ = 1;
  }
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  settings->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = YES;
}

- (GeogebraCommonKernelGeosGeoElement *)createBoxPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                          withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelAlgosAlgoBoxPlot *algoBoxPlot = nil;
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    algoBoxPlot = [new_GeogebraCommonKernelAlgosAlgoBoxPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.5) autorelease], dataList, [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isShowOutliers]) autorelease]) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoBoxPlot);
    geo = IOSObjectArray_Get(nil_chk([algoBoxPlot getGeoElements]), 0);
  }
  else if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
    algoBoxPlot = [new_GeogebraCommonKernelAlgosAlgoBoxPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 1.0) autorelease], [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0.5) autorelease], (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]), (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:1], [GeogebraCommonKernelGeosGeoList class]), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, [settings isShowOutliers]) autorelease]) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoBoxPlot);
    geo = IOSObjectArray_Get(nil_chk([algoBoxPlot getGeoElements]), 0);
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_BOXPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [((GeogebraCommonKernelAlgosAlgoBoxPlot *) nil_chk(algoBoxPlot)) setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)getBoxPlotSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
               withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA()) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
  }
  else {
    if ([settings groupType] == GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_FREQUENCY()) {
      GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) getWithInt:0], [GeogebraCommonKernelGeosGeoList class]));
    }
  }
  if ([settings isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    settings->yMax_ = 2;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (IOSObjectArray *)createMultipleBoxPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                              withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonKernelGeosGeoElement *geo;
  jint length = [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size];
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:length type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < length; i++) {
    GeogebraCommonKernelAlgosAlgoBoxPlot *bp = [new_GeogebraCommonKernelAlgosAlgoBoxPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_(cons_, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, i + 1) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 1.0 / 3.0) autorelease], (GeogebraCommonKernelGeosGeoList *) check_class_cast([dataList getWithInt:(length - 1) - i], [GeogebraCommonKernelGeosGeoList class]), [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, [((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isShowOutliers]) autorelease]) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:bp];
    IOSObjectArray_Set(ret, i, IOSObjectArray_Get(nil_chk([bp getGeoElements]), 0));
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_BOXPLOT_COLOR_IDX]];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  }
  return ret;
}

- (void)getMultipleBoxPlotSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                       withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, NO, YES);
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    settings->yMax_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size] + 1;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (IOSObjectArray *)createBoxPlotTitlesWithGeogebraCommonGuiViewDataDataAnalysisModel:(GeogebraCommonGuiViewDataDataAnalysisModel *)statDialog
                                       withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  IOSObjectArray *dataTitles = [((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk(statDialog)) getDataTitles];
  jint length = ((IOSObjectArray *) nil_chk(dataTitles))->size_;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:length type:GeogebraCommonKernelGeosGeoElement_class_()];
  for (jint i = 0; i < dataTitles->size_; i++) {
    GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, ((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->xMin_, i + 1.0, 1.0) autorelease];
    GeogebraCommonKernelGeosGeoText *t = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(cons_, JreStrcat("$$", @"  ", IOSObjectArray_Get(dataTitles, dataTitles->size_ - i - 1))) autorelease];
    GeogebraCommonKernelAlgosAlgoText *text = [new_GeogebraCommonKernelAlgosAlgoText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(cons_, t, p, nil, nil) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:text];
    IOSObjectArray_Set(ret, i, IOSObjectArray_Get(nil_chk([text getGeoElements]), 0));
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setBackgroundColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_WHITE_COLOR_IDX]];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ret, i))) setObjColorWithGeogebraCommonAwtGColor:[listener_ createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_BLACK_COLOR_IDX]];
  }
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement *)createDotPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelStatisticsAlgoDotPlot *algoDotPlot = [new_GeogebraCommonKernelStatisticsAlgoDotPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoDotPlot);
  GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([algoDotPlot getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [algoDotPlot setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)updateDotPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)dotPlot
          withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -1.0;
    GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, dotPlot, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentListExpression *list = [new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(cons_, en) autorelease];
    GeogebraCommonKernelAlgosAlgoListMax *max = [new_GeogebraCommonKernelAlgosAlgoListMax_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([list getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, list);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, max);
    settings->yMax_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([max getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] + 1;
  }
  settings->showYAxis_ = NO;
  settings->forceXAxisBuffer_ = YES;
}

- (GeogebraCommonKernelGeosGeoElement *)createNormalQuantilePlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelStatisticsAlgoNormalQuantilePlot *algoNormalQPlot = [new_GeogebraCommonKernelStatisticsAlgoNormalQuantilePlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoNormalQPlot);
  GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([algoNormalQPlot getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_NQPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  [geo setLineThicknessWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  [algoNormalQPlot setProtectedInputWithBoolean:YES];
  return geo;
}

- (void)updateNormalQuantilePlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                     withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(self, dataList);
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble buffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - buffer;
    settings->xMax_ = xMaxData_ + buffer;
    settings->yMin_ = -4.0;
    settings->yMax_ = 4.0;
    settings->showYAxis_ = YES;
  }
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 1) = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = NO;
}

- (GeogebraCommonKernelGeosGeoElement *)createScatterPlotLineWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)points {
  GeogebraCommonKernelAlgosAlgoPolyLine *polyLine = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(cons_, nil, points) autorelease];
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, polyLine);
  GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([polyLine getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
  [geo setAuxiliaryObjectWithBoolean:YES];
  [geo setLabelVisibleWithBoolean:NO];
  [geo setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  return geo;
}

- (GeogebraCommonKernelGeosGeoElement *)createScatterPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size]; ++i) {
    [list addWithId:[dataList getWithInt:i]];
  }
  GeogebraCommonKernelAlgosAlgoDependentList *dl = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, list, NO) autorelease];
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, dl);
  GeogebraCommonKernelGeosGeoList *geo = [dl getGeoList];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
  [geo setAuxiliaryObjectWithBoolean:YES];
  [geo setLabelVisibleWithBoolean:NO];
  [geo setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
  [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
  return geo;
}

- (void)getScatterPlotSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                   withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
  ((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = YES;
}

- (GeogebraCommonKernelGeosGeoElement *)createRegressionPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                  withGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum:(GeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum *)reg
                                                                                        withInt:(jint)order
                                                                                    withBoolean:(jboolean)residual {
  jboolean regNone = NO;
  GeogebraCommonKernelAlgosAlgoElement *algo;
  switch ([reg ordinal]) {
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_LOG:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitLog_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_POLY:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(cons_, dataList, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, order) autorelease]) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_POW:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitPow_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_EXP:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitExp_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_GROWTH:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_SIN:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_LOGISTIC:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitLogistic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_NONE:
    regNone = YES;
    case GeogebraCommonGuiViewDataDataAnalysisModel_Regression_LINEAR:
    default:
    algo = [new_GeogebraCommonKernelStatisticsAlgoFitLineY_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, dataList) autorelease];
    break;
  }
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algo);
  GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getGeoElements]), 0);
  if (residual) {
    GeogebraCommonKernelStatisticsAlgoResidualPlot *algoRP = [new_GeogebraCommonKernelStatisticsAlgoResidualPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(cons_, dataList, (id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosGeoFunctionable))) autorelease];
    geo = IOSObjectArray_Get(nil_chk([algoRP getGeoElements]), 0);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_DOTPLOT_COLOR_IDX]];
    [geo setAlphaValueWithFloat:GeogebraCommonGuiViewDataDataAnalysisModel_opacityBarChart];
    [geo setLineThicknessWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_thicknessCurve];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor>) nil_chk(listener_)) createColorWithInt:GeogebraCommonGuiViewDataDataAnalysisModel_REGRESSION_COLOR_IDX]];
    if ([((GeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum *) nil_chk(reg)) isEqual:GeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum_get_LINEAR()]) {
      [((GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLine class])) setToExplicit];
    }
    if (regNone) [geo setEuclidianVisibleWithBoolean:NO];
  }
  return geo;
}

- (void)updateRegressionPlotWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                 withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
    jdouble xBuffer = .25 * (xMaxData_ - xMinData_);
    settings->xMin_ = xMinData_ - xBuffer;
    settings->xMax_ = xMaxData_ + xBuffer;
    jdouble yBuffer = .25 * (yMaxData_ - yMinData_);
    settings->yMin_ = yMinData_ - yBuffer;
    settings->yMax_ = yMaxData_ + yBuffer;
  }
  settings->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
}

- (void)getResidualPlotSettingsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)residualPlot
                    withGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(self, dataList, YES);
  IOSDoubleArray *residualBounds = [((GeogebraCommonKernelStatisticsAlgoResidualPlot *) nil_chk(((GeogebraCommonKernelStatisticsAlgoResidualPlot *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(residualPlot)) getParentAlgorithm], [GeogebraCommonKernelStatisticsAlgoResidualPlot class])))) getResidualBounds];
  yMaxData_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(residualBounds), 0)), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(residualBounds, 1)));
  yMinData_ = -yMaxData_;
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
  ((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings))->showYAxis_ = YES;
  settings->forceXAxisBuffer_ = NO;
  *IOSBooleanArray_GetRef(nil_chk(settings->isEdgeAxis_), 0) = NO;
  *IOSBooleanArray_GetRef(settings->isEdgeAxis_, 1) = YES;
  *IOSBooleanArray_GetRef(nil_chk(settings->isPositiveOnly_), 0) = YES;
  *IOSBooleanArray_GetRef(settings->isPositiveOnly_, 1) = NO;
}

- (void)setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings {
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_(self, settings);
}

- (void)setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:(GeogebraCommonGuiViewDataStatPanelSettings *)settings
                                                       withDouble:(jdouble)xBufferScale
                                                       withDouble:(jdouble)yBufferScale {
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, xBufferScale, yBufferScale);
}

- (NSString *)getStemPlotLatexWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                                                          withInt:(jint)adjustment {
  GeogebraCommonKernelStatisticsAlgoStemPlot *algoStemPlot = [new_GeogebraCommonKernelStatisticsAlgoStemPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(cons_, dataList, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, adjustment) autorelease]) autorelease];
  GeogebraCommonKernelGeosGeoElement *tempGeo = IOSObjectArray_Get(nil_chk([algoStemPlot getGeoElements]), 0);
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, algoStemPlot);
  [algoStemPlot setProtectedInputWithBoolean:YES];
  NSString *latex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(tempGeo)) getLaTeXdescription];
  [tempGeo remove];
  return latex;
}

- (jboolean)removeFromConstruction {
  return removeFromConstruction__;
}

- (void)setRemoveFromConstructionWithBoolean:(jboolean)removeFromConstruction {
  self->removeFromConstruction__ = removeFromConstruction;
}

- (void)removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:(GeogebraCommonKernelAlgosConstructionElement *)ce {
  GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, ce);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(cons_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor:", "StatGeo", NULL, 0x1, NULL, NULL },
    { "getDataBoundsWithGeogebraCommonKernelGeosGeoList:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "getDataBoundsWithGeogebraCommonKernelGeosGeoList:withBoolean:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "getDataBoundsWithGeogebraCommonKernelGeosGeoList:withBoolean:withBoolean:", "getDataBounds", "V", 0x2, NULL, NULL },
    { "createHistogramWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:withBoolean:", "createHistogram", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram:withBoolean:", "createFrequencyPolygon", "Lgeogebra.common.kernel.algos.AlgoPolyLine;", 0x2, NULL, NULL },
    { "createNormalCurveOverlayWithGeogebraCommonKernelGeosGeoList:", "createNormalCurveOverlay", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getHistogramSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonGuiViewDataStatPanelSettings:", "getHistogramSettings", "V", 0x1, NULL, NULL },
    { "createBarChartTextWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "createBarChartText", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createBarChartNumericWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "createBarChartNumeric", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList:", "getPreferredBarWidth", "D", 0x2, NULL, NULL },
    { "getPreferredBarWidthWithDoubleArray:", "getPreferredBarWidth", "D", 0xa, NULL, NULL },
    { "createFrequencyTableGeoWithGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonGuiViewDataDataDisplayModel_PlotTypeEnum:", "createFrequencyTableGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getBarChartSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:withGeogebraCommonKernelGeosGeoElement:", "getBarChartSettings", "V", 0x1, NULL, NULL },
    { "createBoxPlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "createBoxPlot", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getBoxPlotSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "getBoxPlotSettings", "V", 0x1, NULL, NULL },
    { "createMultipleBoxPlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "createMultipleBoxPlot", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getMultipleBoxPlotSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "getMultipleBoxPlotSettings", "V", 0x1, NULL, NULL },
    { "createBoxPlotTitlesWithGeogebraCommonGuiViewDataDataAnalysisModel:withGeogebraCommonGuiViewDataStatPanelSettings:", "createBoxPlotTitles", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createDotPlotWithGeogebraCommonKernelGeosGeoList:", "createDotPlot", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateDotPlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonGuiViewDataStatPanelSettings:", "updateDotPlot", "V", 0x1, NULL, NULL },
    { "createNormalQuantilePlotWithGeogebraCommonKernelGeosGeoList:", "createNormalQuantilePlot", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateNormalQuantilePlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "updateNormalQuantilePlot", "V", 0x1, NULL, NULL },
    { "createScatterPlotLineWithGeogebraCommonKernelGeosGeoList:", "createScatterPlotLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createScatterPlotWithGeogebraCommonKernelGeosGeoList:", "createScatterPlot", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getScatterPlotSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "getScatterPlotSettings", "V", 0x1, NULL, NULL },
    { "createRegressionPlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum:withInt:withBoolean:", "createRegressionPlot", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateRegressionPlotWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonGuiViewDataStatPanelSettings:", "updateRegressionPlot", "V", 0x1, NULL, NULL },
    { "getResidualPlotSettingsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonGuiViewDataStatPanelSettings:", "getResidualPlotSettings", "V", 0x1, NULL, NULL },
    { "setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:", "setXYBounds", "V", 0x2, NULL, NULL },
    { "setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings:withDouble:withDouble:", "setXYBounds", "V", 0x2, NULL, NULL },
    { "getStemPlotLatexWithGeogebraCommonKernelGeosGeoList:withInt:", "getStemPlotLatex", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "removeFromConstruction", NULL, "Z", 0x1, NULL, NULL },
    { "setRemoveFromConstructionWithBoolean:", "setRemoveFromConstruction", "V", 0x1, NULL, NULL },
    { "removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:", "removeFromConstructionList", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "xMinData_", NULL, 0x2, "D", NULL, NULL,  },
    { "xMaxData_", NULL, 0x2, "D", NULL, NULL,  },
    { "yMinData_", NULL, 0x2, "D", NULL, NULL,  },
    { "yMaxData_", NULL, 0x2, "D", NULL, NULL,  },
    { "histogramRight_", NULL, 0x2, "Z", NULL, NULL,  },
    { "removeFromConstruction__", "removeFromConstruction", 0x2, "Z", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.view.data.DataAnalysisModel$ICreateColor;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataStatGeo = { 2, "StatGeo", "geogebra.common.gui.view.data", NULL, 0x1, 35, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataStatGeo;
}

@end

void GeogebraCommonGuiViewDataStatGeo_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener) {
  NSObject_init(self);
  self->removeFromConstruction__ = YES;
  GeogebraCommonGuiViewDataStatGeo_set_app_(self, app);
  GeogebraCommonGuiViewDataStatGeo_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  GeogebraCommonGuiViewDataStatGeo_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
  GeogebraCommonGuiViewDataStatGeo_set_listener_(self, listener);
}

GeogebraCommonGuiViewDataStatGeo *new_GeogebraCommonGuiViewDataStatGeo_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor> listener) {
  GeogebraCommonGuiViewDataStatGeo *self = [GeogebraCommonGuiViewDataStatGeo alloc];
  GeogebraCommonGuiViewDataStatGeo_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewDataDataAnalysisModel_ICreateColor_(self, app, listener);
  return self;
}

void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, NO, NO);
}

void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList) {
  GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(self, dataList, YES, NO);
}

void GeogebraCommonGuiViewDataStatGeo_getDataBoundsWithGeogebraCommonKernelGeosGeoList_withBoolean_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *dataList, jboolean isPointList, jboolean isMatrix) {
  if (dataList == nil) {
    return;
  }
  jboolean currentRemoveFromConstructionStatus = self->removeFromConstruction__;
  self->removeFromConstruction__ = YES;
  IOSDoubleArray *dataBounds = [IOSDoubleArray arrayWithLength:4];
  if (isMatrix) {
    GeogebraCommonKernelGeosGeoNumeric *index = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, 1) autorelease];
    GeogebraCommonKernelAlgosAlgoListElement *le = [new_GeogebraCommonKernelAlgosAlgoListElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, dataList, index) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, le);
    GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([le getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]);
    GeogebraCommonKernelAlgosAlgoListMax *maxAlgo = [new_GeogebraCommonKernelAlgosAlgoListMax_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, list) autorelease];
    GeogebraCommonKernelAlgosAlgoListMin *minAlgo = [new_GeogebraCommonKernelAlgosAlgoListMin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, list) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, minAlgo);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, maxAlgo);
    GeogebraCommonKernelGeosGeoNumeric *maxGeo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]);
    GeogebraCommonKernelGeosGeoNumeric *minGeo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    jdouble min, max;
    for (jint i = 1; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size]; i++) {
      [index setValueWithDouble:i + 1];
      [index updateCascade];
      min = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(minGeo)) getDouble];
      max = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(maxGeo)) getDouble];
      *IOSDoubleArray_GetRef(dataBounds, 0) = JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(dataBounds, 0), min);
      *IOSDoubleArray_GetRef(dataBounds, 1) = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(dataBounds, 1), max);
    }
  }
  else if (isPointList) {
    GeogebraCommonKernelArithmeticExpressionNode *enX = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, dataList, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *enY = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, dataList, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentListExpression *listX = [new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, enX) autorelease];
    GeogebraCommonKernelAlgosAlgoDependentListExpression *listY = [new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self->cons_, enY) autorelease];
    GeogebraCommonKernelAlgosAlgoListMax *maxX = [new_GeogebraCommonKernelAlgosAlgoListMax_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listX getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
    GeogebraCommonKernelAlgosAlgoListMax *maxY = [new_GeogebraCommonKernelAlgosAlgoListMax_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listY getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
    GeogebraCommonKernelAlgosAlgoListMin *minX = [new_GeogebraCommonKernelAlgosAlgoListMin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listX getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
    GeogebraCommonKernelAlgosAlgoListMin *minY = [new_GeogebraCommonKernelAlgosAlgoListMin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([listY getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class])) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, listX);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, listY);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, maxX);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, maxY);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, minX);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, minY);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minX getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxX getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 2) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([minY getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 3) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([maxY getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  else {
    GeogebraCommonKernelAlgosAlgoListMax *max = [new_GeogebraCommonKernelAlgosAlgoListMax_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, dataList) autorelease];
    GeogebraCommonKernelAlgosAlgoListMin *min = [new_GeogebraCommonKernelAlgosAlgoListMin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, dataList) autorelease];
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, min);
    GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(self, max);
    *IOSDoubleArray_GetRef(dataBounds, 0) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([min getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    *IOSDoubleArray_GetRef(dataBounds, 1) = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([max getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  self->xMinData_ = IOSDoubleArray_Get(dataBounds, 0);
  self->xMaxData_ = IOSDoubleArray_Get(dataBounds, 1);
  self->yMinData_ = IOSDoubleArray_Get(dataBounds, 2);
  self->yMaxData_ = IOSDoubleArray_Get(dataBounds, 3);
  self->removeFromConstruction__ = currentRemoveFromConstructionStatus;
}

GeogebraCommonKernelAlgosAlgoPolyLine *GeogebraCommonGuiViewDataStatGeo_createFrequencyPolygonWithGeogebraCommonKernelStatisticsAlgoHistogram_withBoolean_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelStatisticsAlgoHistogram *histogram, jboolean doCumulative) {
  IOSDoubleArray *leftBorder = [((GeogebraCommonKernelStatisticsAlgoHistogram *) nil_chk(histogram)) getLeftBorder];
  IOSDoubleArray *yValue = [histogram getYValue];
  jint size = doCumulative ? ((IOSDoubleArray *) nil_chk(yValue))->size_ : ((IOSDoubleArray *) nil_chk(yValue))->size_ + 1;
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:size type:GeogebraCommonKernelGeosGeoPoint_class_()];
  jboolean suppressLabelCreation = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if (doCumulative) {
    IOSObjectArray_SetAndConsume(points, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(nil_chk(leftBorder), 0), 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      IOSObjectArray_SetAndConsume(points, i + 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, IOSDoubleArray_Get(leftBorder, i + 1), IOSDoubleArray_Get(yValue, i), 1.0));
    }
  }
  else {
    jdouble midpoint = IOSDoubleArray_Get(nil_chk(leftBorder), 0) - 0.5 * (IOSDoubleArray_Get(leftBorder, 1) - IOSDoubleArray_Get(leftBorder, 0));
    IOSObjectArray_SetAndConsume(points, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(yValue))->size_ - 1; i++) {
      midpoint = 0.5 * (IOSDoubleArray_Get(leftBorder, i + 1) + IOSDoubleArray_Get(leftBorder, i));
      IOSObjectArray_SetAndConsume(points, i + 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, IOSDoubleArray_Get(yValue, i), 1.0));
    }
    midpoint = 1.5 * IOSDoubleArray_Get(leftBorder, yValue->size_ - 1) - .5 * (IOSDoubleArray_Get(leftBorder, yValue->size_ - 2));
    IOSObjectArray_SetAndConsume(points, yValue->size_, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self->cons_, nil, midpoint, 0.0, 1.0));
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:suppressLabelCreation];
  GeogebraCommonKernelAlgosAlgoPolyLine *polyLine = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self->cons_, nil, points, NO) autorelease];
  return polyLine;
}

jdouble GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelGeosGeoList *list) {
  jdouble w = 1;
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] - 1; i++) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i])) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list getWithInt:i + 1])) isDefined]) {
      w = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i + 1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] - [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([list getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]), w);
    }
  }
  return w / 2;
}

jdouble GeogebraCommonGuiViewDataStatGeo_getPreferredBarWidthWithDoubleArray_(IOSDoubleArray *array) {
  GeogebraCommonGuiViewDataStatGeo_initialize();
  jdouble w = 1;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(array))->size_ - 1; i++) {
    w = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(array, i + 1) - IOSDoubleArray_Get(array, i)), w);
  }
  return w / 2;
}

void GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonGuiViewDataStatPanelSettings *settings) {
  GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(self, settings, .2, .2);
}

void GeogebraCommonGuiViewDataStatGeo_setXYBoundsWithGeogebraCommonGuiViewDataStatPanelSettings_withDouble_withDouble_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonGuiViewDataStatPanelSettings *settings, jdouble xBufferScale, jdouble yBufferScale) {
  if ([((GeogebraCommonGuiViewDataStatPanelSettings *) nil_chk(settings)) isAutomaticWindow]) {
    jdouble xBuffer;
    jdouble yBuffer;
    if (settings->logXAxis_) {
      xBuffer = xBufferScale * (JavaLangMath_log10WithDouble_(self->xMaxData_) - JavaLangMath_log10WithDouble_(self->xMinData_));
      settings->xMin_ = JavaLangMath_log10WithDouble_(self->xMinData_) - xBuffer;
      settings->xMax_ = JavaLangMath_log10WithDouble_(self->xMaxData_) + xBuffer;
    }
    else {
      xBuffer = xBufferScale * (self->xMaxData_ - self->xMinData_);
      settings->xMin_ = self->xMinData_ - xBuffer;
      settings->xMax_ = self->xMaxData_ + xBuffer;
    }
    if (settings->logYAxis_) {
      yBuffer = yBufferScale * (JavaLangMath_log10WithDouble_(self->yMaxData_) - JavaLangMath_log10WithDouble_(self->yMinData_));
      settings->yMin_ = JavaLangMath_log10WithDouble_(self->yMinData_) - yBuffer;
      settings->yMax_ = JavaLangMath_log10WithDouble_(self->yMaxData_) + yBuffer;
    }
    else {
      yBuffer = yBufferScale * (self->yMaxData_ - self->yMinData_);
      settings->yMin_ = self->yMinData_ - yBuffer;
      settings->yMax_ = self->yMaxData_ + yBuffer;
    }
  }
}

void GeogebraCommonGuiViewDataStatGeo_removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement_(GeogebraCommonGuiViewDataStatGeo *self, GeogebraCommonKernelAlgosConstructionElement *ce) {
  if (self->removeFromConstruction__) [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:ce];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataStatGeo)
