//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawBoxPlot.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawBoxPlot.h"
#include "geogebra/common/kernel/algos/AlgoBoxPlot.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonEuclidianDrawDrawBoxPlot () {
 @public
  jboolean isVisible_, labelVisible_;
  IOSDoubleArray *coords_;
  GeogebraCommonEuclidianGeneralPathClipped *gp_;
  GeogebraCommonKernelGeosGeoNumeric *sum_;
  GeogebraCommonKernelAlgosAlgoBoxPlot *algo_;
  id<GeogebraCommonKernelArithmeticNumberValue> a_, b_;
  jdouble OUTLIER_SIZE_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, gp_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, sum_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, algo_, GeogebraCommonKernelAlgosAlgoBoxPlot *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, a_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawBoxPlot, b_, id<GeogebraCommonKernelArithmeticNumberValue>)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawBoxPlot_init__(GeogebraCommonEuclidianDrawDrawBoxPlot *self);

@implementation GeogebraCommonEuclidianDrawDrawBoxPlot

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                      withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonEuclidianDrawDrawBoxPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(self, view, n);
  return self;
}

- (void)init__ {
  GeogebraCommonEuclidianDrawDrawBoxPlot_init__(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    @try {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) getSelColor]];
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
        [g2 drawWithGeogebraCommonAwtGShape:gp_];
      }
    }
    @catch (JavaLangException *e) {
      GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    }
    @try {
      [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:gp_ withBoolean:NO];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
    @try {
      if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->lineThickness_ > 0) {
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) getObjectColor]];
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
        [g2 drawWithGeogebraCommonAwtGShape:gp_];
      }
    }
    @catch (JavaLangException *e) {
      GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    }
    if (labelVisible_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
      [g2 setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelColor]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return gp_ != nil && ([gp_ containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x withInt:y withInt:hitThreshold]);
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && [gp_ intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)update {
  isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
  if (!isVisible_) return;
  if (![((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo_ getDrawAlgorithm])) isEqual:[geo_ getParentAlgorithm]]) GeogebraCommonEuclidianDrawDrawBoxPlot_init__(self);
  labelVisible_ = [geo_ isLabelVisible];
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:sum_];
  if (gp_ == nil) GeogebraCommonEuclidianDrawDrawBoxPlot_setAndConsume_gp_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) reset];
  jdouble yOff = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble];
  jdouble yScale = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble];
  IOSDoubleArray *leftBorder = [((GeogebraCommonKernelAlgosAlgoBoxPlot *) nil_chk(algo_)) getLeftBorders];
  *IOSDoubleArray_GetRef(nil_chk(coords_), 0) = IOSDoubleArray_Get(nil_chk(leftBorder), 0);
  *IOSDoubleArray_GetRef(coords_, 1) = -yScale + yOff;
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordsWithDoubleArray:coords_];
  [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 0);
  *IOSDoubleArray_GetRef(coords_, 1) = yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 0);
  *IOSDoubleArray_GetRef(coords_, 1) = 0 + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 1);
  *IOSDoubleArray_GetRef(coords_, 1) = 0 + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 1);
  *IOSDoubleArray_GetRef(coords_, 1) = yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 3);
  *IOSDoubleArray_GetRef(coords_, 1) = yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 3);
  *IOSDoubleArray_GetRef(coords_, 1) = -yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 1);
  *IOSDoubleArray_GetRef(coords_, 1) = -yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 1);
  *IOSDoubleArray_GetRef(coords_, 1) = 0 + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 3);
  *IOSDoubleArray_GetRef(coords_, 1) = 0 + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 4);
  *IOSDoubleArray_GetRef(coords_, 1) = 0 + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 4);
  *IOSDoubleArray_GetRef(coords_, 1) = yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 4);
  *IOSDoubleArray_GetRef(coords_, 1) = -yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 2);
  *IOSDoubleArray_GetRef(coords_, 1) = yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  *IOSDoubleArray_GetRef(coords_, 0) = IOSDoubleArray_Get(leftBorder, 2);
  *IOSDoubleArray_GetRef(coords_, 1) = -yScale + yOff;
  [view_ toScreenCoordsWithDoubleArray:coords_];
  [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) withDouble:IOSDoubleArray_Get(coords_, 1)];
  JavaUtilArrayList *outliers = [algo_ getOutliers];
  if (outliers != nil) {
    id<JavaUtilIterator> it = [outliers iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      *IOSDoubleArray_GetRef(coords_, 0) = [((JavaLangDouble *) nil_chk([it next])) doubleValue];
      *IOSDoubleArray_GetRef(coords_, 1) = yOff;
      [view_ toScreenCoordsWithDoubleArray:coords_];
      [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) - OUTLIER_SIZE_ withDouble:IOSDoubleArray_Get(coords_, 1) - OUTLIER_SIZE_];
      [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) + OUTLIER_SIZE_ withDouble:IOSDoubleArray_Get(coords_, 1) + OUTLIER_SIZE_];
      [gp_ moveToWithDouble:IOSDoubleArray_Get(coords_, 0) - OUTLIER_SIZE_ withDouble:IOSDoubleArray_Get(coords_, 1) + OUTLIER_SIZE_];
      [gp_ lineToWithDouble:IOSDoubleArray_Get(coords_, 0) + OUTLIER_SIZE_ withDouble:IOSDoubleArray_Get(coords_, 1) - OUTLIER_SIZE_];
    }
  }
  if (![gp_ intersectsWithInt:0 withInt:0 withInt:[view_ getWidth] withInt:[view_ getHeight]]) {
    isVisible_ = NO;
  }
  if (labelVisible_) {
    xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(coords_, 0));
    yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(coords_, 1)) - [view_ getFontSize];
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [geo_ getLabelDescription]);
    [self addLabelOffset];
  }
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) getBounds];
}

- (void)dealloc {
  RELEASE_(coords_);
  RELEASE_(gp_);
  RELEASE_(sum_);
  RELEASE_(algo_);
  RELEASE_(a_);
  RELEASE_(b_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoNumeric:", "DrawBoxPlot", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "sum_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoBoxPlot;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "OUTLIER_SIZE_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawBoxPlot = { 2, "DrawBoxPlot", "geogebra.common.euclidian.draw", NULL, 0x1, 10, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawBoxPlot;
}

@end

void GeogebraCommonEuclidianDrawDrawBoxPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonEuclidianDrawDrawBoxPlot *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawBoxPlot_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->OUTLIER_SIZE_ = 4;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawBoxPlot_set_sum_(self, n);
  GeogebraCommonEuclidianDrawable_set_geo_(self, n);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n)) setDrawableWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawBoxPlot_init__(self);
  [self update];
}

GeogebraCommonEuclidianDrawDrawBoxPlot *new_GeogebraCommonEuclidianDrawDrawBoxPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonEuclidianDrawDrawBoxPlot *self = [GeogebraCommonEuclidianDrawDrawBoxPlot alloc];
  GeogebraCommonEuclidianDrawDrawBoxPlot_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(self, view, n);
  return self;
}

void GeogebraCommonEuclidianDrawDrawBoxPlot_init__(GeogebraCommonEuclidianDrawDrawBoxPlot *self) {
  GeogebraCommonEuclidianDrawDrawBoxPlot_set_algo_(self, (GeogebraCommonKernelAlgosAlgoBoxPlot *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getDrawAlgorithm], [GeogebraCommonKernelAlgosAlgoBoxPlot class]));
  GeogebraCommonEuclidianDrawDrawBoxPlot_set_a_(self, [((GeogebraCommonKernelAlgosAlgoBoxPlot *) nil_chk(self->algo_)) getA]);
  GeogebraCommonEuclidianDrawDrawBoxPlot_set_b_(self, [self->algo_ getB]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawBoxPlot)
