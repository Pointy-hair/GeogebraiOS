//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawList3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForDrawList3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists ()

- (jboolean)containsClippedCurves;

+ (void)drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                  withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)list;

+ (void)drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
             withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)list;

- (void)drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *)parent;

@end

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *parent);

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_serialVersionUID 1LL

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList, serialVersionUID, jlong)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists

- (instancetype)init {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init(self);
  return self;
}

- (void)addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable)) addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:self];
}

- (void)addWithJavaUtilLinkedList:(JavaUtilLinkedList *)list {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(list)) [self addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
}

- (void)removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  if (drawable != nil) {
    [drawable removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:self];
  }
}

- (void)removeWithJavaUtilLinkedList:(JavaUtilLinkedList *)list {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(list)) [self removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)getListWithInt:(jint)type {
  return IOSObjectArray_Get(nil_chk(lists_), type);
}

- (jint)size {
  jint size = 0;
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) size += [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) size];
  return size;
}

- (jboolean)containsClippedSurfaces {
  return ![((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES))) isEmpty];
}

- (jboolean)containsClippedCurves {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(self);
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) {
    [sb appendWithNSString:@"list #"];
    [sb appendWithInt:i];
    [sb appendWithNSString:@":\n"];
    [sb appendWithNSString:[((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) description]];
  }
  return [sb description];
}

- (void)clear {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) clear];
}

- (void)updateAll {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d3d = [d next];
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d3d)) update];
  }
}

- (void)resetAllDrawables {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) {
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) setWaitForReset];
    }
  }
}

- (void)resetAllLabels {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) {
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) setLabelWaitForUpdate];
    }
  }
}

- (void)resetAllVisualStyles {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) {
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) setWaitForUpdateVisualStyle];
    }
  }
}

- (void)drawHiddenNotTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_POINTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawHiddenNotTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  {
    IOSObjectArray *a__ = lists_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list = *b__++;
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(list)) {
        [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
      }
    }
  }
}

- (void)drawNotTransparentSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawNotTransparentSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawNotTransparentSurfacesClosedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawNotTransparentSurfacesClosedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawNotTransparentSurfacesClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawNotTransparentSurfacesClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(self)) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) enableClipPlanesIfNeeded];
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    [renderer disableClipPlanesIfNeeded];
  }
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawTranspClosedNotCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawTranspClosedNotCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawTranspClosedCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawTranspClosedCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawTranspClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawTranspClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(self)) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) enableClipPlanesIfNeeded];
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    [renderer disableClipPlanesIfNeeded];
  }
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS; i++) {
    for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), i))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    }
  }
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast(d, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawTextsWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawClosedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawClosedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawClippedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk([d next])) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawClippedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

+ (void)drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                  withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)list {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, list);
}

+ (void)drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
             withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)list {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, list);
}

- (void)drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D_(self, renderer, nil);
}

- (void)drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *)parent {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D_(self, renderer, parent);
}

- (void)drawForPickingSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableCulling];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(nil_chk(lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED));
  [renderer enableCulling];
  [renderer setCullFaceFront];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED));
  [renderer setCullFaceBack];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED));
  [renderer disableCulling];
  if ([self containsClippedSurfaces]) {
    [renderer enableClipPlanesIfNeeded];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES));
    [renderer disableClipPlanesIfNeeded];
  }
  [renderer enableCulling];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawForPickingSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
            withGeogebraCommonGeogebra3DEuclidian3DHits3D:(GeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  {
    IOSObjectArray *a__ = lists_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list = *b__++;
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(list)) {
        [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) hitIfVisibleAndPickableWithGeogebraCommonGeogebra3DEuclidian3DHitting:hitting withGeogebraCommonGeogebra3DEuclidian3DHits3D:hits];
      }
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getLabelHitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc {
  {
    IOSObjectArray *a__ = lists_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list = *b__++;
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(list)) {
        if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) isVisible]) {
          GeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] && [geo isPickable] && [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(d->label_)) hitWithGeogebraCommonAwtGPoint:mouseLoc]) {
            return geo;
          }
        }
      }
    }
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(lists_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Drawable3DLists", NULL, 0x1, NULL, NULL },
    { "addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "add", "V", 0x1, NULL, NULL },
    { "addWithJavaUtilLinkedList:", "add", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "remove", "V", 0x4, NULL, NULL },
    { "removeWithJavaUtilLinkedList:", "remove", "V", 0x1, NULL, NULL },
    { "getListWithInt:", "getList", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists$Drawable3DList;", 0x0, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "containsClippedSurfaces", NULL, "Z", 0x1, NULL, NULL },
    { "containsClippedCurves", NULL, "Z", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "updateAll", NULL, "V", 0x1, NULL, NULL },
    { "resetAllDrawables", NULL, "V", 0x1, NULL, NULL },
    { "resetAllLabels", NULL, "V", 0x1, NULL, NULL },
    { "resetAllVisualStyles", NULL, "V", 0x1, NULL, NULL },
    { "drawHiddenNotTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiddenNotTextured", "V", 0x1, NULL, NULL },
    { "drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawInObjFormat", "V", 0x1, NULL, NULL },
    { "drawNotTransparentSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotTransparentSurfaces", "V", 0x1, NULL, NULL },
    { "drawNotTransparentSurfacesClosedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotTransparentSurfacesClosed", "V", 0x1, NULL, NULL },
    { "drawNotTransparentSurfacesClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotTransparentSurfacesClipped", "V", 0x1, NULL, NULL },
    { "drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiddenTextured", "V", 0x1, NULL, NULL },
    { "drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x1, NULL, NULL },
    { "drawTranspClosedNotCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTranspClosedNotCurved", "V", 0x1, NULL, NULL },
    { "drawTranspClosedCurvedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTranspClosedCurved", "V", 0x1, NULL, NULL },
    { "drawTranspClippedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTranspClipped", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfacesForHiding", "V", 0x1, NULL, NULL },
    { "drawClosedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawClosedSurfacesForHiding", "V", 0x1, NULL, NULL },
    { "drawClippedSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawClippedSurfacesForHiding", "V", 0x1, NULL, NULL },
    { "drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:", "drawListForPickingPointOrCurve", "V", 0xa, NULL, NULL },
    { "drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList:", "drawListForPickingSurface", "V", 0xa, NULL, NULL },
    { "drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawForPickingPointsAndCurves", "V", 0x1, NULL, NULL },
    { "drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D:", "drawForPickingPointsAndCurves", "V", 0x2, NULL, NULL },
    { "drawForPickingSurfacesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawForPickingSurfaces", "V", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:withGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hit", "V", 0x1, NULL, NULL },
    { "getLabelHitWithGeogebraCommonAwtGPoint:", "getLabelHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lists_", NULL, 0x4, "[Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists$Drawable3DList;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists$Drawable3DList;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists = { 2, "Drawable3DLists", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 37, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_setAndConsume_lists_(self, [IOSObjectArray newArrayWithLength:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX type:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_class_()]);
  for (jint i = 0; i < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX; i++) IOSObjectArray_SetAndConsume(self->lists_, i, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(self));
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init() {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init(self);
  return self;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self) {
  return ![((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(nil_chk(self->lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES))) isEmpty];
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_initialize();
  for (id<JavaUtilIterator> iter = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [iter next];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *list) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_initialize();
  for (id<JavaUtilIterator> iter = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(list)) iterator]; [((id<JavaUtilIterator>) nil_chk(iter)) hasNext]; ) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [iter next];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *parent) {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableCulling];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(nil_chk(self->lists_), GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_DEFAULT));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(self->lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_POINTS));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(self->lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES));
  if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_containsClippedCurves(self)) {
    [renderer enableClipPlanesIfNeeded];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_drawListForPickingPointOrCurveWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_(renderer, IOSObjectArray_Get(self->lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES));
    [renderer disableClipPlanesIfNeeded];
  }
  [renderer enableCulling];
  [renderer setCullFaceBack];
  for (id<JavaUtilIterator> d = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(IOSObjectArray_Get(self->lists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS))) iterator]; [((id<JavaUtilIterator>) nil_chk(d)) hasNext]; ) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForDrawList3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast([d next], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])))) getDrawable3DLists])) drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in self) {
    [sb appendWithId:d];
    [sb appendWithNSString:@" -- "];
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) getGeoElement])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [sb appendWithNSString:@"\n"];
  }
  return [sb description];
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)outer$ {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(self, outer$);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_serialVersionUID },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList = { 2, "Drawable3DList", "geogebra.common.geogebra3D.euclidian3D.draw", "Drawable3DLists", 0x4, 2, methods, 1, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *outer$) {
  JavaUtilArrayList_init(self);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *outer$) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList)
