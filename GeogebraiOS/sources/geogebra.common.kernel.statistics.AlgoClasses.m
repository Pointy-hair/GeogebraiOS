//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoClasses.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoClasses.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelStatisticsAlgoClasses () {
 @public
  GeogebraCommonKernelGeosGeoList *dataList_;
  GeogebraCommonKernelGeosGeoNumeric *start_;
  GeogebraCommonKernelGeosGeoNumeric *width_;
  GeogebraCommonKernelGeosGeoNumeric *numClasses_;
  GeogebraCommonKernelGeosGeoList *classList_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoClasses, dataList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoClasses, start_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoClasses, width_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoClasses, numClasses_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoClasses, classList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoClasses_compute(GeogebraCommonKernelStatisticsAlgoClasses *self);

@implementation GeogebraCommonKernelStatisticsAlgoClasses

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)start
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)width
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)numClasses {
  GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, dataList, start, width, numClasses);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)start
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)width
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)numClasses {
  GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, dataList, start, width, numClasses);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Classes();
}

- (void)setInputOutput {
  JavaUtilArrayList *tempList = [new_JavaUtilArrayList_init() autorelease];
  [tempList addWithId:dataList_];
  if (start_ != nil) [tempList addWithId:start_];
  if (width_ != nil) [tempList addWithId:width_];
  if (numClasses_ != nil) [tempList addWithId:numClasses_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[tempList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [tempList toArrayWithNSObjectArray:input_]);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:classList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return classList_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoClasses_compute(self);
}

- (void)dealloc {
  RELEASE_(dataList_);
  RELEASE_(start_);
  RELEASE_(width_);
  RELEASE_(numClasses_);
  RELEASE_(classList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoClasses", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoClasses", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "start_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "width_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "numClasses_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "classList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoClasses = { 2, "AlgoClasses", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoClasses;
}

@end

void GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoClasses *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *start, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *numClasses) {
  GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, dataList, start, width, numClasses);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoClasses *new_GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *start, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *numClasses) {
  GeogebraCommonKernelStatisticsAlgoClasses *self = [GeogebraCommonKernelStatisticsAlgoClasses alloc];
  GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, dataList, start, width, numClasses);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoClasses *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *start, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *numClasses) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoClasses_set_dataList_(self, dataList);
  GeogebraCommonKernelStatisticsAlgoClasses_set_start_(self, start);
  GeogebraCommonKernelStatisticsAlgoClasses_set_width_(self, width);
  GeogebraCommonKernelStatisticsAlgoClasses_set_numClasses_(self, numClasses);
  GeogebraCommonKernelStatisticsAlgoClasses_setAndConsume_classList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoClasses_compute(self);
}

GeogebraCommonKernelStatisticsAlgoClasses *new_GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *start, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *numClasses) {
  GeogebraCommonKernelStatisticsAlgoClasses *self = [GeogebraCommonKernelStatisticsAlgoClasses alloc];
  GeogebraCommonKernelStatisticsAlgoClasses_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, dataList, start, width, numClasses);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoClasses_compute(GeogebraCommonKernelStatisticsAlgoClasses *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) isDefined] || [self->dataList_ size] == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) setUndefined];
    return;
  }
  if (!([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()] || [((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) setDefinedWithBoolean:YES];
  [self->classList_ clear];
  jdouble minGeoValue = 0;
  jdouble maxGeoValue = 0;
  NSString *minGeoString;
  NSString *maxGeoString;
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) {
    minGeoValue = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->dataList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    maxGeoValue = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->dataList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    for (jint i = 1; i < [self->dataList_ size]; i++) {
      jdouble geoValue = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      minGeoValue = JavaLangMath_minWithDouble_withDouble_(geoValue, minGeoValue);
      maxGeoValue = JavaLangMath_maxWithDouble_withDouble_(geoValue, maxGeoValue);
    }
  }
  else {
    minGeoString = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:0], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    maxGeoString = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:0], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    for (jint i = 1; i < [self->dataList_ size]; i++) {
      NSString *geoString = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if ([((NSString *) nil_chk(geoString)) compareToWithId:minGeoString] < 0) minGeoString = geoString;
      if ([geoString compareToWithId:maxGeoString] < 0) maxGeoString = geoString;
    }
  }
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 2) {
    jint n = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->numClasses_)) getDouble]);
    if (n < 1) [self->classList_ setUndefined];
    jdouble width = (maxGeoValue - minGeoValue) / n;
    for (jint i = 0; i < n; i++) {
      [self->classList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, minGeoValue + i * width) autorelease]];
    }
    [self->classList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, maxGeoValue) autorelease]];
  }
  if (self->input_->size_ == 3) {
    jdouble value = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->start_)) getDouble];
    [self->classList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, value) autorelease]];
    while (value < maxGeoValue) {
      value = value + [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->width_)) getDouble];
      [self->classList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, value) autorelease]];
    }
    if ([self->classList_ size] < 2) [self->classList_ setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoClasses)
