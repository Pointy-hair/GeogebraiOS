//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdIntersectPath.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/CmdIntersectPath.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConicRegion.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelAdvancedCmdIntersectPath ()

- (IOSObjectArray *)intersectLineConicRegionWithNSStringArray:(IOSObjectArray *)labels
                          withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                         withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c;

- (IOSObjectArray *)intersectPathLinePolygonWithNSStringArray:(IOSObjectArray *)labels
                          withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelAdvancedCmdIntersectPath_intersectPathLinePolygonWithNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAdvancedCmdIntersectPath *self, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoPolygon *p);

@implementation GeogebraCommonKernelAdvancedCmdIntersectPath

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdIntersectPath_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) {
      IOSObjectArray *ret = GeogebraCommonKernelAdvancedCmdIntersectPath_intersectPathLinePolygonWithNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPolygon_(self, [c getLabels], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class]));
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
      IOSObjectArray *ret = GeogebraCommonKernelAdvancedCmdIntersectPath_intersectPathLinePolygonWithNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPolygon_(self, [c getLabels], (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class]));
      return ret;
    }
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]) {
      IOSObjectArray *ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) IntersectPolygonsWithNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class]) withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (IOSObjectArray *)intersectLineConicRegionWithNSStringArray:(IOSObjectArray *)labels
                          withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                         withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoIntersectLineConicRegion *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectLineConicRegion_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(cons_, labels, g, c) autorelease];
  IOSObjectArray *lines = [algo getIntersectionLines];
  return lines;
}

- (IOSObjectArray *)intersectPathLinePolygonWithNSStringArray:(IOSObjectArray *)labels
                          withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  return GeogebraCommonKernelAdvancedCmdIntersectPath_intersectPathLinePolygonWithNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPolygon_(self, labels, g, p);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdIntersectPath", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "intersectLineConicRegionWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoConic:", "intersectLineConicRegion", "[Lgeogebra.common.kernel.geos.GeoLine;", 0x12, NULL, NULL },
    { "intersectPathLinePolygonWithNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoPolygon:", "intersectPathLinePolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdIntersectPath = { 2, "CmdIntersectPath", "geogebra.common.kernel.advanced", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdIntersectPath;
}

@end

void GeogebraCommonKernelAdvancedCmdIntersectPath_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdIntersectPath *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdIntersectPath *new_GeogebraCommonKernelAdvancedCmdIntersectPath_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdIntersectPath *self = [GeogebraCommonKernelAdvancedCmdIntersectPath alloc];
  GeogebraCommonKernelAdvancedCmdIntersectPath_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelAdvancedCmdIntersectPath_intersectPathLinePolygonWithNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAdvancedCmdIntersectPath *self, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *algo = [new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self->cons_, labels, g, p) autorelease];
  return [algo getOutput];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdIntersectPath)
