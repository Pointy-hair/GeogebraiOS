//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CommandProcessor3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidianForPlane/EuclidianViewForPlaneInterface.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CommandProcessor3D.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/ViewCreator.h"
#include "geogebra/common/main/App.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D

+ (id<GeogebraCommonKernelKernelNDGeoDirectionND>)getCurrentViewOrientationWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelA
                                                                                withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  return GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_getCurrentViewOrientationWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_(kernelA, app);
}

- (instancetype)init {
  GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCurrentViewOrientationWithGeogebraCommonKernelKernel:withGeogebraCommonMainApp:", "getCurrentViewOrientation", "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D = { 2, "CommandProcessor3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D;
}

@end

id<GeogebraCommonKernelKernelNDGeoDirectionND> GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_getCurrentViewOrientationWithGeogebraCommonKernelKernel_withGeogebraCommonMainApp_(GeogebraCommonKernelKernel *kernelA, GeogebraCommonMainApp *app) {
  GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_initialize();
  id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> view = [((GeogebraCommonMainApp *) nil_chk(app)) getActiveEuclidianView];
  if (![((GeogebraCommonKernelKernel *) nil_chk(kernelA)) isMacroKernel] && ![kernelA getLoadingMode] && view != nil) {
    if ([view isDefault2D]) {
      return [kernelA getXOYPlane];
    }
    if ([GeogebraCommonEuclidianForPlaneEuclidianViewForPlaneInterface_class_() isInstance:view]) {
      return [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((GeogebraCommonEuclidianEuclidianView *) check_class_cast(view, [GeogebraCommonEuclidianEuclidianView class])) getCompanion], [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class])))) getPlane];
    }
    return [kernelA getSpace];
  }
  return nil;
}

void GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_init(GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_init() {
  GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCommandProcessor3D)
