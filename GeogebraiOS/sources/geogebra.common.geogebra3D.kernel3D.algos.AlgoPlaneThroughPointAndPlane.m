//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane () {
 @public
  id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs_AlgoPlaneThroughPointAndPlane_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane, cs_AlgoPlaneThroughPointAndPlane_, id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
           withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(self);
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs_AlgoPlaneThroughPointAndPlane_, [GeogebraCommonKernelGeosGeoElement class]);
}

- (void)dealloc {
  RELEASE_(cs_AlgoPlaneThroughPointAndPlane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "AlgoPlaneThroughPointAndPlane", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cs_AlgoPlaneThroughPointAndPlane_", "cs", 0x2, "Lgeogebra.common.kernel.kernelND.GeoCoordSys2D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane = { 2, "AlgoPlaneThroughPointAndPlane", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_set_cs_AlgoPlaneThroughPointAndPlane_(self, cs);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cs, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getPlane] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(self);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(self, cons, label, point, cs);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane *self) {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) getCoordSys];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(self->cs_AlgoPlaneThroughPointAndPlane_)) toGeoElement])) isDefined]) return;
  GeogebraCommonKernelMatrixCoords *o = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:o];
  GeogebraCommonKernelMatrixCoordSys *inputCS = [self->cs_AlgoPlaneThroughPointAndPlane_ getCoordSys];
  [coordsys addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(inputCS)) getVx]];
  [coordsys addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:[inputCS getVy]];
  [coordsys makeOrthoMatrixWithBoolean:YES withBoolean:NO];
  if ([self->cs_AlgoPlaneThroughPointAndPlane_ isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]]) {
    [coordsys setEquationVectorWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[inputCS getEquationVector]];
  }
  else {
    [coordsys setEquationVectorWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[inputCS getVz]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndPlane)
