//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoUserInputElement.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoUserInputElement () {
 @public
  GeogebraCommonKernelArithmeticValidExpression *userInput_;
  jboolean inputForm_;
  jboolean validInputForm_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoUserInputElement, userInput_, GeogebraCommonKernelArithmeticValidExpression *)

@implementation GeogebraCommonKernelGeosGeoUserInputElement

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoUserInputElement_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
       withGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)userInput {
  GeogebraCommonKernelGeosGeoUserInputElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticValidExpression_(self, c, userInput);
  return self;
}

- (void)setInputForm {
  inputForm_ = validInputForm_;
}

- (void)setExtendedForm {
  inputForm_ = NO;
}

- (jboolean)isInputForm {
  return inputForm_;
}

- (void)setUserInputWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)input {
  GeogebraCommonKernelGeosGeoUserInputElement_set_userInput_(self, input);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return JreStrcat("$$$", label_, @": ", [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (validInputForm_ && inputForm_ && userInput_ != nil) return [userInput_ toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
  return [self toRawValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[GeogebraCommonKernelGeosGeoUserInputElement class]])) return;
  GeogebraCommonKernelGeosGeoUserInputElement_set_userInput_(self, ((GeogebraCommonKernelGeosGeoUserInputElement *) nil_chk(((GeogebraCommonKernelGeosGeoUserInputElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoUserInputElement class]))))->userInput_);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<userinput show=\""];
  [sb appendWithBoolean:inputForm_];
  if ([self isIndependent]) {
    [sb appendWithNSString:@"\" value=\""];
    [sb appendWithId:userInput_];
  }
  [sb appendWithNSString:@"\" valid=\""];
  [sb appendWithBoolean:validInputForm_];
  [sb appendWithNSString:@"\" />\n"];
}

- (NSString *)toRawValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setValidInputFormWithBoolean:(jboolean)b {
  validInputForm_ = b;
  if (!validInputForm_) {
    inputForm_ = NO;
  }
}

- (jboolean)isValidInputForm {
  return validInputForm_;
}

- (void)dealloc {
  RELEASE_(userInput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoUserInputElement", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticValidExpression:", "GeoUserInputElement", NULL, 0x1, NULL, NULL },
    { "setInputForm", NULL, "V", 0x1, NULL, NULL },
    { "setExtendedForm", NULL, "V", 0x1, NULL, NULL },
    { "isInputForm", NULL, "Z", 0x1, NULL, NULL },
    { "setUserInputWithGeogebraCommonKernelArithmeticValidExpression:", "setUserInput", "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "toRawValueStringWithGeogebraCommonKernelStringTemplate:", "toRawValueString", "Ljava.lang.String;", 0x404, NULL, NULL },
    { "setValidInputFormWithBoolean:", "setValidInputForm", "V", 0x1, NULL, NULL },
    { "isValidInputForm", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "userInput_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", NULL, NULL,  },
    { "inputForm_", NULL, 0x2, "Z", NULL, NULL,  },
    { "validInputForm_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoUserInputElement = { 2, "GeoUserInputElement", "geogebra.common.kernel.geos", NULL, 0x401, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoUserInputElement;
}

@end

void GeogebraCommonKernelGeosGeoUserInputElement_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoUserInputElement *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setConstructionDefaults];
  self->validInputForm_ = YES;
}

void GeogebraCommonKernelGeosGeoUserInputElement_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticValidExpression_(GeogebraCommonKernelGeosGeoUserInputElement *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelArithmeticValidExpression *userInput) {
  GeogebraCommonKernelGeosGeoUserInputElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoUserInputElement_set_userInput_(self, userInput);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoUserInputElement)
