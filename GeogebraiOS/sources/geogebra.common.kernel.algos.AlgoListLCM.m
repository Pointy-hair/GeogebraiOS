//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoListLCM.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoListLCM.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"

@interface GeogebraCommonKernelAlgosAlgoListLCM () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoNumeric *num_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoListLCM, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoListLCM, num_, GeogebraCommonKernelGeosGeoNumeric *)

static JavaMathBigInteger *GeogebraCommonKernelAlgosAlgoListLCM_bigZero_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoListLCM, bigZero_, JavaMathBigInteger *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoListLCM_compute(GeogebraCommonKernelAlgosAlgoListLCM *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelAlgosAlgoListLCM)

@implementation GeogebraCommonKernelAlgosAlgoListLCM

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoListLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LCM();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geoList_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:num_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getLCM {
  return num_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoListLCM_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(num_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelAlgosAlgoListLCM class]) {
    JreStrongAssign(&GeogebraCommonKernelAlgosAlgoListLCM_bigZero_, nil, JavaMathBigInteger_valueOfWithLong_(0));
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelAlgosAlgoListLCM)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoListLCM", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLCM", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bigZero_", NULL, 0x1a, "Ljava.math.BigInteger;", &GeogebraCommonKernelAlgosAlgoListLCM_bigZero_, NULL,  },
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoListLCM = { 2, "AlgoListLCM", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoListLCM;
}

@end

void GeogebraCommonKernelAlgosAlgoListLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoListLCM *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoListLCM_set_geoList_(self, geoList);
  GeogebraCommonKernelAlgosAlgoListLCM_setAndConsume_num_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoListLCM_compute(self);
  [self->num_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoListLCM *new_GeogebraCommonKernelAlgosAlgoListLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoListLCM *self = [GeogebraCommonKernelAlgosAlgoListLCM alloc];
  GeogebraCommonKernelAlgosAlgoListLCM_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoListLCM_compute(GeogebraCommonKernelAlgosAlgoListLCM *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || size == 0) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getGeoElementForPropertiesDialog])) isGeoNumeric]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  jdouble nd = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->geoList_ getWithInt:0]), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  if (!GeogebraCommonKernelKernel_isIntegerWithDouble_(nd)) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  JavaMathBigInteger *lcm = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(GeogebraCommonKernelKernel_checkIntegerWithDouble_(nd)));
  for (jint i = 1; i < [self->geoList_ size]; i++) {
    nd = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->geoList_ getWithInt:i]), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    if (!GeogebraCommonKernelKernel_isIntegerWithDouble_(nd)) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
      return;
    }
    JavaMathBigInteger *n = JavaMathBigInteger_valueOfWithLong_(J2ObjCFpToLong(nd));
    if ([((JavaMathBigInteger *) nil_chk(n)) compareToWithId:GeogebraCommonKernelAlgosAlgoListLCM_bigZero_] == 0) {
      lcm = GeogebraCommonKernelAlgosAlgoListLCM_bigZero_;
    }
    else {
      JavaMathBigInteger *product = [n multiplyWithJavaMathBigInteger:lcm];
      lcm = [((JavaMathBigInteger *) nil_chk(product)) divideWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(lcm)) gcdWithJavaMathBigInteger:n]];
    }
  }
  jdouble resultD = JavaLangMath_absWithDouble_([((JavaMathBigInteger *) nil_chk(lcm)) doubleValue]);
  if (JavaLangMath_absWithDouble_([lcm doubleValue]) > 1e15) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setValueWithDouble:resultD];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoListLCM)
