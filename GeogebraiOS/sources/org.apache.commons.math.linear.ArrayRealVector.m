//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/ArrayRealVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealVector.h"
#include "org/apache/commons/math/linear/ArrayRealVector.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealVector.h"
#include "org/apache/commons/math/linear/RealVectorFormat.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/MathUtils.h"

#define OrgApacheCommonsMathLinearArrayRealVector_serialVersionUID -1097961340710804027LL

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearArrayRealVector, serialVersionUID, jlong)

static OrgApacheCommonsMathLinearRealVectorFormat *OrgApacheCommonsMathLinearArrayRealVector_DEFAULT_FORMAT_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearArrayRealVector, DEFAULT_FORMAT_, OrgApacheCommonsMathLinearRealVectorFormat *)

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathLinearArrayRealVector)

@implementation OrgApacheCommonsMathLinearArrayRealVector

- (instancetype)init {
  OrgApacheCommonsMathLinearArrayRealVector_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)size {
  OrgApacheCommonsMathLinearArrayRealVector_initWithInt_(self, size);
  return self;
}

- (instancetype)initWithInt:(jint)size
                 withDouble:(jdouble)preset {
  OrgApacheCommonsMathLinearArrayRealVector_initWithInt_withDouble_(self, size, preset);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)d {
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(self, d);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)d
                        withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(self, d, copyArray);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)d
                            withInt:(jint)pos
                            withInt:(jint)size {
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withInt_withInt_(self, d, pos, size);
  return self;
}

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_(self, d);
  return self;
}

- (instancetype)initWithJavaLangDoubleArray:(IOSObjectArray *)d
                                    withInt:(jint)pos
                                    withInt:(jint)size {
  OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_withInt_withInt_(self, d, pos, size);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_(self, v);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_(self, v);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v
                                                      withBoolean:(jboolean)deep {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(self, v, deep);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v1
                    withOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v1
                         withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearRealVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v1
               withOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v1
                                                  withDoubleArray:(IOSDoubleArray *)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withDoubleArray_(self, v1, v2);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)v1
withOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)v1
                    withDoubleArray:(IOSDoubleArray *)v2 {
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withDoubleArray_(self, v1, v2);
  return self;
}

- (OrgApacheCommonsMathLinearAbstractRealVector *)copy__ {
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(self, YES) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)addWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self addWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
    id<JavaUtilIterator> it = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) sparseIterator];
    OrgApacheCommonsMathLinearRealVector_Entry *e;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
      *IOSDoubleArray_GetRef(nil_chk(out), [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex]) += [e getValue];
    }
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)addWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
  for (jint i = 0; i < data_->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(out), i) += IOSDoubleArray_Get(v, i);
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
}

- (OrgApacheCommonsMathLinearArrayRealVector *)addWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast([self addWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayRealVector class]);
}

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self subtractWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
    id<JavaUtilIterator> it = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) sparseIterator];
    OrgApacheCommonsMathLinearRealVector_Entry *e;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
      *IOSDoubleArray_GetRef(nil_chk(out), [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex]) -= [e getValue];
    }
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)subtractWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
  for (jint i = 0; i < data_->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(out), i) -= IOSDoubleArray_Get(v, i);
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
}

- (OrgApacheCommonsMathLinearArrayRealVector *)subtractWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast([self subtractWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayRealVector class]);
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAddToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = IOSDoubleArray_Get(data_, i) + d;
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSubtractToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = IOSDoubleArray_Get(data_, i) - d;
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapMultiplyToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = IOSDoubleArray_Get(data_, i) * d;
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapDivideToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = IOSDoubleArray_Get(data_, i) / d;
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapPowToSelfWithDouble:(jdouble)d {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(IOSDoubleArray_Get(data_, i), d);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_expWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapExpm1ToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_expm1WithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLogToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_logWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog10ToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_log10WithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapLog1pToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_log1pWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCoshToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_coshWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinhToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_sinhWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanhToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_tanhWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCosToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_cosWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSinToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_sinWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapTanToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_tanWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAcosToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_acosWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAsinToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_asinWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAtanToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_atanWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapInvToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = 1.0 / IOSDoubleArray_Get(data_, i);
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapAbsToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSqrtToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCbrtToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_cbrtWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapCeilToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapFloorToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_floorWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapRintToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_rintWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapSignumToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_signumWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)mapUlpToSelf {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    *IOSDoubleArray_GetRef(data_, i) = OrgApacheCommonsMathUtilFastMath_ulpWithDouble_(IOSDoubleArray_Get(data_, i));
  }
  return self;
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeMultiplyWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self ebeMultiplyWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
    for (jint i = 0; i < data_->size_; i++) {
      *IOSDoubleArray_GetRef(nil_chk(out), i) *= [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:i];
    }
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
  for (jint i = 0; i < data_->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(out), i) *= IOSDoubleArray_Get(v, i);
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
}

- (OrgApacheCommonsMathLinearArrayRealVector *)ebeMultiplyWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast([self ebeMultiplyWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayRealVector class]);
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeDivideWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self ebeDivideWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
    for (jint i = 0; i < data_->size_; i++) {
      *IOSDoubleArray_GetRef(nil_chk(out), i) /= [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:i];
    }
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearRealVector>)ebeDivideWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  IOSDoubleArray *out = [((IOSDoubleArray *) nil_chk(data_)) clone];
  for (jint i = 0; i < data_->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(out), i) /= IOSDoubleArray_Get(v, i);
  }
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
}

- (OrgApacheCommonsMathLinearArrayRealVector *)ebeDivideWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast([self ebeDivideWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_], [OrgApacheCommonsMathLinearArrayRealVector class]);
}

- (IOSDoubleArray *)getData {
  return [((IOSDoubleArray *) nil_chk(data_)) clone];
}

- (IOSDoubleArray *)getDataRef {
  return data_;
}

- (jdouble)dotProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self dotProductWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    jdouble dot = 0;
    id<JavaUtilIterator> it = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) sparseIterator];
    OrgApacheCommonsMathLinearRealVector_Entry *e;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext] && (e = [it next]) != nil) {
      dot += IOSDoubleArray_Get(nil_chk(data_), [((OrgApacheCommonsMathLinearRealVector_Entry *) nil_chk(e)) getIndex]) * [e getValue];
    }
    return dot;
  }
}

- (jdouble)dotProductWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble dot = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; i++) {
    dot += IOSDoubleArray_Get(data_, i) * IOSDoubleArray_Get(v, i);
  }
  return dot;
}

- (jdouble)dotProductWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [self dotProductWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (jdouble)getNorm {
  jdouble sum = 0;
  {
    IOSDoubleArray *a__ = data_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble a = *b__++;
      sum += a * a;
    }
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum);
}

- (jdouble)getL1Norm {
  jdouble sum = 0;
  {
    IOSDoubleArray *a__ = data_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble a = *b__++;
      sum += OrgApacheCommonsMathUtilFastMath_absWithDouble_(a);
    }
  }
  return sum;
}

- (jdouble)getLInfNorm {
  jdouble max = 0;
  {
    IOSDoubleArray *a__ = data_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble a = *b__++;
      max = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(max, OrgApacheCommonsMathUtilFastMath_absWithDouble_(a));
    }
  }
  return max;
}

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self getDistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    jdouble sum = 0;
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
      jdouble delta = IOSDoubleArray_Get(data_, i) - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:i];
      sum += delta * delta;
    }
    return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum);
  }
}

- (jdouble)getDistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble sum = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
    jdouble delta = IOSDoubleArray_Get(data_, i) - IOSDoubleArray_Get(v, i);
    sum += delta * delta;
  }
  return OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(sum);
}

- (jdouble)getDistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [self getDistanceWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self getL1DistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    jdouble sum = 0;
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
      jdouble delta = IOSDoubleArray_Get(data_, i) - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:i];
      sum += OrgApacheCommonsMathUtilFastMath_absWithDouble_(delta);
    }
    return sum;
  }
}

- (jdouble)getL1DistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble sum = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
    jdouble delta = IOSDoubleArray_Get(data_, i) - IOSDoubleArray_Get(v, i);
    sum += OrgApacheCommonsMathUtilFastMath_absWithDouble_(delta);
  }
  return sum;
}

- (jdouble)getL1DistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [self getL1DistanceWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self getLInfDistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    jdouble max = 0;
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
      jdouble delta = IOSDoubleArray_Get(data_, i) - [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:i];
      max = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(max, OrgApacheCommonsMathUtilFastMath_absWithDouble_(delta));
    }
    return max;
  }
}

- (jdouble)getLInfDistanceWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jdouble max = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(data_))->size_; ++i) {
    jdouble delta = IOSDoubleArray_Get(data_, i) - IOSDoubleArray_Get(v, i);
    max = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(max, OrgApacheCommonsMathUtilFastMath_absWithDouble_(delta));
  }
  return max;
}

- (jdouble)getLInfDistanceWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [self getLInfDistanceWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (id<OrgApacheCommonsMathLinearRealVector>)unitVector {
  jdouble norm = [self getNorm];
  if (norm == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_ZERO_NORM(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  return [self mapDivideWithDouble:norm];
}

- (void)unitize {
  jdouble norm = [self getNorm];
  if (norm == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createArithmeticExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  [self mapDivideToSelfWithDouble:norm];
}

- (id<OrgApacheCommonsMathLinearRealVector>)projectionWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  return [v mapMultiplyWithDouble:[self dotProductWithOrgApacheCommonsMathLinearRealVector:v] / [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) dotProductWithOrgApacheCommonsMathLinearRealVector:v]];
}

- (id<OrgApacheCommonsMathLinearRealVector>)projectionWithDoubleArray:(IOSDoubleArray *)v {
  return [self projectionWithOrgApacheCommonsMathLinearArrayRealVector:[new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(v, NO) autorelease]];
}

- (OrgApacheCommonsMathLinearArrayRealVector *)projectionWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast([v mapMultiplyWithDouble:[self dotProductWithOrgApacheCommonsMathLinearArrayRealVector:v] / [((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v)) dotProductWithOrgApacheCommonsMathLinearArrayRealVector:v]], [OrgApacheCommonsMathLinearArrayRealVector class]);
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  if ([v isKindOfClass:[OrgApacheCommonsMathLinearArrayRealVector class]]) {
    return [self outerProductWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
  }
  else {
    [self checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:v];
    jint m = ((IOSDoubleArray *) nil_chk(data_))->size_;
    id<OrgApacheCommonsMathLinearRealMatrix> out = OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(m, m);
    for (jint i = 0; i < data_->size_; i++) {
      for (jint j = 0; j < data_->size_; j++) {
        [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:i withInt:j withDouble:IOSDoubleArray_Get(data_, i) * [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getEntryWithInt:j]];
      }
    }
    return out;
  }
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [self outerProductWithDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)outerProductWithDoubleArray:(IOSDoubleArray *)v {
  [self checkVectorDimensionsWithInt:((IOSDoubleArray *) nil_chk(v))->size_];
  jint m = ((IOSDoubleArray *) nil_chk(data_))->size_;
  id<OrgApacheCommonsMathLinearRealMatrix> out = OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(m, m);
  for (jint i = 0; i < data_->size_; i++) {
    for (jint j = 0; j < data_->size_; j++) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(out)) setEntryWithInt:i withInt:j withDouble:IOSDoubleArray_Get(data_, i) * IOSDoubleArray_Get(v, j)];
    }
  }
  return out;
}

- (jdouble)getEntryWithInt:(jint)index {
  return IOSDoubleArray_Get(nil_chk(data_), index);
}

- (jint)getDimension {
  return ((IOSDoubleArray *) nil_chk(data_))->size_;
}

- (id<OrgApacheCommonsMathLinearRealVector>)appendWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  @try {
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, (OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])) autorelease];
  }
  @catch (JavaLangClassCastException *cce) {
    return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearRealVector_(self, v) autorelease];
  }
}

- (OrgApacheCommonsMathLinearArrayRealVector *)appendWithOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, v) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)appendWithDouble:(jdouble)inArg {
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(data_))->size_ + 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, 0, out, 0, data_->size_);
  *IOSDoubleArray_GetRef(out, data_->size_) = inArg;
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(out, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)appendWithDoubleArray:(IOSDoubleArray *)inArg {
  return [new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withDoubleArray_(self, inArg) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealVector>)getSubVectorWithInt:(jint)index
                                                        withInt:(jint)n {
  OrgApacheCommonsMathLinearArrayRealVector *out = [new_OrgApacheCommonsMathLinearArrayRealVector_initWithInt_(n) autorelease];
  @try {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(data_, index, out->data_, 0, n);
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    [self checkIndexWithInt:index];
    [self checkIndexWithInt:index + n - 1];
  }
  return out;
}

- (void)setEntryWithInt:(jint)index
             withDouble:(jdouble)value {
  @try {
    *IOSDoubleArray_GetRef(nil_chk(data_), index) = value;
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    [self checkIndexWithInt:index];
  }
}

- (void)setSubVectorWithInt:(jint)index
withOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  @try {
    @try {
      [self setWithInt:index withOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *) check_class_cast(v, [OrgApacheCommonsMathLinearArrayRealVector class])];
    }
    @catch (JavaLangClassCastException *cce) {
      for (jint i = index; i < index + [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]; ++i) {
        *IOSDoubleArray_GetRef(nil_chk(data_), i) = [v getEntryWithInt:i - index];
      }
    }
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    [self checkIndexWithInt:index];
    [self checkIndexWithInt:index + [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension] - 1];
  }
}

- (void)setSubVectorWithInt:(jint)index
            withDoubleArray:(IOSDoubleArray *)v {
  @try {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v, 0, data_, index, ((IOSDoubleArray *) nil_chk(v))->size_);
  }
  @catch (JavaLangIndexOutOfBoundsException *e) {
    [self checkIndexWithInt:index];
    [self checkIndexWithInt:index + ((IOSDoubleArray *) nil_chk(v))->size_ - 1];
  }
}

- (void)setWithInt:(jint)index
withOrgApacheCommonsMathLinearArrayRealVector:(OrgApacheCommonsMathLinearArrayRealVector *)v {
  [self setSubVectorWithInt:index withDoubleArray:((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_];
}

- (void)setWithDouble:(jdouble)value {
  JavaUtilArrays_fillWithDoubleArray_withDouble_(data_, value);
}

- (IOSDoubleArray *)toArray {
  return [((IOSDoubleArray *) nil_chk(data_)) clone];
}

- (NSString *)description {
  return [((OrgApacheCommonsMathLinearRealVectorFormat *) nil_chk(OrgApacheCommonsMathLinearArrayRealVector_DEFAULT_FORMAT_)) formatWithId:self];
}

- (void)checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:(id<OrgApacheCommonsMathLinearRealVector>)v {
  [self checkVectorDimensionsWithInt:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]];
}

- (void)checkVectorDimensionsWithInt:(jint)n {
  if (((IOSDoubleArray *) nil_chk(data_))->size_ != n) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(data_->size_), JavaLangInteger_valueOfWithInt_(n) } count:2 type:NSObject_class_()]);
  }
}

- (jboolean)isNaN {
  {
    IOSDoubleArray *a__ = data_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble v = *b__++;
      if (JavaLangDouble_isNaNWithDouble_(v)) {
        return YES;
      }
    }
  }
  return NO;
}

- (jboolean)isInfinite {
  if ([self isNaN]) {
    return NO;
  }
  {
    IOSDoubleArray *a__ = data_;
    jdouble const *b__ = ((IOSDoubleArray *) nil_chk(a__))->buffer_;
    jdouble const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jdouble v = *b__++;
      if (JavaLangDouble_isInfiniteWithDouble_(v)) {
        return YES;
      }
    }
  }
  return NO;
}

- (jboolean)isEqual:(id)other {
  if (self == other) {
    return YES;
  }
  if (other == nil || !([OrgApacheCommonsMathLinearRealVector_class_() isInstance:other])) {
    return NO;
  }
  id<OrgApacheCommonsMathLinearRealVector> rhs = (id<OrgApacheCommonsMathLinearRealVector>) check_protocol_cast(other, @protocol(OrgApacheCommonsMathLinearRealVector));
  if (((IOSDoubleArray *) nil_chk(data_))->size_ != [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(rhs)) getDimension]) {
    return NO;
  }
  if ([rhs isNaN]) {
    return [self isNaN];
  }
  for (jint i = 0; i < data_->size_; ++i) {
    if (IOSDoubleArray_Get(data_, i) != [rhs getEntryWithInt:i]) {
      return NO;
    }
  }
  return YES;
}

- (NSUInteger)hash {
  if ([self isNaN]) {
    return 9;
  }
  return OrgApacheCommonsMathUtilMathUtils_hash__WithDoubleArray_(data_);
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathLinearArrayRealVector class]) {
    JreStrongAssign(&OrgApacheCommonsMathLinearArrayRealVector_DEFAULT_FORMAT_, nil, OrgApacheCommonsMathLinearRealVectorFormat_getInstance());
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathLinearArrayRealVector)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithInt:withDouble:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withBoolean:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withInt:withInt:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangDoubleArray:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithJavaLangDoubleArray:withInt:withInt:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayRealVector:withBoolean:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayRealVector:withOrgApacheCommonsMathLinearArrayRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayRealVector:withOrgApacheCommonsMathLinearRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearRealVector:withOrgApacheCommonsMathLinearArrayRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathLinearArrayRealVector:withDoubleArray:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withOrgApacheCommonsMathLinearArrayRealVector:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withDoubleArray:", "ArrayRealVector", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.AbstractRealVector;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealVector:", "add", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithDoubleArray:", "add", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearArrayRealVector:", "add", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealVector:", "subtract", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithDoubleArray:", "subtract", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearArrayRealVector:", "subtract", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "mapAddToSelfWithDouble:", "mapAddToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSubtractToSelfWithDouble:", "mapSubtractToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapMultiplyToSelfWithDouble:", "mapMultiplyToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapDivideToSelfWithDouble:", "mapDivideToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapPowToSelfWithDouble:", "mapPowToSelf", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExpToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapExpm1ToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLogToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog10ToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapLog1pToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCoshToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSinhToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTanhToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCosToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSinToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapTanToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAcosToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAsinToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAtanToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapInvToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapAbsToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSqrtToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCbrtToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapCeilToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapFloorToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapRintToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapSignumToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "mapUlpToSelf", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearRealVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithDoubleArray:", "ebeMultiply", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeMultiplyWithOrgApacheCommonsMathLinearArrayRealVector:", "ebeMultiply", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathLinearRealVector:", "ebeDivide", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithDoubleArray:", "ebeDivide", "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "ebeDivideWithOrgApacheCommonsMathLinearArrayRealVector:", "ebeDivide", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[D", 0x1, NULL, NULL },
    { "getDataRef", NULL, "[D", 0x1, NULL, NULL },
    { "dotProductWithOrgApacheCommonsMathLinearRealVector:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "dotProductWithDoubleArray:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "dotProductWithOrgApacheCommonsMathLinearArrayRealVector:", "dotProduct", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getNorm", NULL, "D", 0x1, NULL, NULL },
    { "getL1Norm", NULL, "D", 0x1, NULL, NULL },
    { "getLInfNorm", NULL, "D", 0x1, NULL, NULL },
    { "getDistanceWithOrgApacheCommonsMathLinearRealVector:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDistanceWithDoubleArray:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getDistanceWithOrgApacheCommonsMathLinearArrayRealVector:", "getDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithOrgApacheCommonsMathLinearRealVector:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithDoubleArray:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getL1DistanceWithOrgApacheCommonsMathLinearArrayRealVector:", "getL1Distance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithOrgApacheCommonsMathLinearRealVector:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithDoubleArray:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getLInfDistanceWithOrgApacheCommonsMathLinearArrayRealVector:", "getLInfDistance", "D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "unitVector", NULL, "Lorg.apache.commons.math.linear.RealVector;", 0x1, "Ljava.lang.ArithmeticException;", NULL },
    { "unitize", NULL, "V", 0x1, "Ljava.lang.ArithmeticException;", NULL },
    { "projectionWithOrgApacheCommonsMathLinearRealVector:", "projection", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "projectionWithDoubleArray:", "projection", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "projectionWithOrgApacheCommonsMathLinearArrayRealVector:", "projection", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, NULL, NULL },
    { "outerProductWithOrgApacheCommonsMathLinearRealVector:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithOrgApacheCommonsMathLinearArrayRealVector:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "outerProductWithDoubleArray:", "outerProduct", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getEntryWithInt:", "getEntry", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearRealVector:", "append", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "appendWithOrgApacheCommonsMathLinearArrayRealVector:", "append", "Lorg.apache.commons.math.linear.ArrayRealVector;", 0x1, NULL, NULL },
    { "appendWithDouble:", "append", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "appendWithDoubleArray:", "append", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "getSubVectorWithInt:withInt:", "getSubVector", "Lorg.apache.commons.math.linear.RealVector;", 0x1, NULL, NULL },
    { "setEntryWithInt:withDouble:", "setEntry", "V", 0x1, NULL, NULL },
    { "setSubVectorWithInt:withOrgApacheCommonsMathLinearRealVector:", "setSubVector", "V", 0x1, NULL, NULL },
    { "setSubVectorWithInt:withDoubleArray:", "setSubVector", "V", 0x1, NULL, NULL },
    { "setWithInt:withOrgApacheCommonsMathLinearArrayRealVector:", "set", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
    { "toArray", NULL, "[D", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "checkVectorDimensionsWithOrgApacheCommonsMathLinearRealVector:", "checkVectorDimensions", "V", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "checkVectorDimensionsWithInt:", "checkVectorDimensions", "V", 0x4, "Ljava.lang.IllegalArgumentException;", NULL },
    { "isNaN", NULL, "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearArrayRealVector_serialVersionUID },
    { "DEFAULT_FORMAT_", NULL, 0x1a, "Lorg.apache.commons.math.linear.RealVectorFormat;", &OrgApacheCommonsMathLinearArrayRealVector_DEFAULT_FORMAT_, NULL,  },
    { "data_", NULL, 0x4, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearArrayRealVector = { 2, "ArrayRealVector", "org.apache.commons.math.linear", NULL, 0x1, 103, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearArrayRealVector;
}

@end

void OrgApacheCommonsMathLinearArrayRealVector_init(OrgApacheCommonsMathLinearArrayRealVector *self) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:0]);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_init() {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_init(self);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithInt_(OrgApacheCommonsMathLinearArrayRealVector *self, jint size) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:size]);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithInt_(jint size) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithInt_(self, size);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithInt_withDouble_(OrgApacheCommonsMathLinearArrayRealVector *self, jint size, jdouble preset) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:size]);
  JavaUtilArrays_fillWithDoubleArray_withDouble_(self->data_, preset);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithInt_withDouble_(jint size, jdouble preset) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithInt_withDouble_(self, size, preset);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSDoubleArray *d) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_set_data_(self, [((IOSDoubleArray *) nil_chk(d)) clone]);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(IOSDoubleArray *d) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSDoubleArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_set_data_(self, copyArray ? [((IOSDoubleArray *) nil_chk(d)) clone] : d);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(IOSDoubleArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withBoolean_(self, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withInt_withInt_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSDoubleArray *d, jint pos, jint size) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  if (((IOSDoubleArray *) nil_chk(d))->size_ < pos + size) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POSITION_SIZE_MISMATCH_INPUT_ARRAY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(pos), JavaLangInteger_valueOfWithInt_(size), JavaLangInteger_valueOfWithInt_(d->size_) } count:3 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:size]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(d, pos, self->data_, 0, size);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withInt_withInt_(IOSDoubleArray *d, jint pos, jint size) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withInt_withInt_(self, d, pos, size);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSObjectArray *d) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:((IOSObjectArray *) nil_chk(d))->size_]);
  for (jint i = 0; i < d->size_; i++) {
    *IOSDoubleArray_GetRef(self->data_, i) = [((JavaLangDouble *) nil_chk(IOSObjectArray_Get(d, i))) doubleValue];
  }
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_withInt_withInt_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSObjectArray *d, jint pos, jint size) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  if (((IOSObjectArray *) nil_chk(d))->size_ < pos + size) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_POSITION_SIZE_MISMATCH_INPUT_ARRAY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(pos), JavaLangInteger_valueOfWithInt_(size), JavaLangInteger_valueOfWithInt_(d->size_) } count:3 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:size]);
  for (jint i = pos; i < pos + size; i++) {
    *IOSDoubleArray_GetRef(self->data_, i - pos) = [((JavaLangDouble *) nil_chk(IOSObjectArray_Get(d, i))) doubleValue];
  }
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_withInt_withInt_(IOSObjectArray *d, jint pos, jint size) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithJavaLangDoubleArray_withInt_withInt_(self, d, pos, size);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, id<OrgApacheCommonsMathLinearRealVector> v) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:[((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v)) getDimension]]);
  for (jint i = 0; i < self->data_->size_; ++i) {
    *IOSDoubleArray_GetRef(self->data_, i) = [v getEntryWithInt:i];
  }
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_(id<OrgApacheCommonsMathLinearRealVector> v) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_(self, v);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, OrgApacheCommonsMathLinearArrayRealVector *v) {
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(self, v, YES);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *v) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_(self, v);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(OrgApacheCommonsMathLinearArrayRealVector *self, OrgApacheCommonsMathLinearArrayRealVector *v, jboolean deep) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_set_data_(self, deep ? [((IOSDoubleArray *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_)) clone] : ((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v))->data_);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(OrgApacheCommonsMathLinearArrayRealVector *v, jboolean deep) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withBoolean_(self, v, deep);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, OrgApacheCommonsMathLinearArrayRealVector *v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v1))->data_))->size_ + ((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v2))->data_->size_]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1->data_, 0, self->data_, 0, v1->data_->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2->data_, 0, self->data_, v1->data_->size_, v2->data_->size_);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, OrgApacheCommonsMathLinearArrayRealVector *v1, id<OrgApacheCommonsMathLinearRealVector> v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  jint l1 = ((IOSDoubleArray *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v1))->data_))->size_;
  jint l2 = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v2)) getDimension];
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:l1 + l2]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1->data_, 0, self->data_, 0, l1);
  for (jint i = 0; i < l2; ++i) {
    *IOSDoubleArray_GetRef(self->data_, l1 + i) = [v2 getEntryWithInt:i];
  }
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearRealVector_(OrgApacheCommonsMathLinearArrayRealVector *v1, id<OrgApacheCommonsMathLinearRealVector> v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withOrgApacheCommonsMathLinearRealVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, id<OrgApacheCommonsMathLinearRealVector> v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  jint l1 = [((id<OrgApacheCommonsMathLinearRealVector>) nil_chk(v1)) getDimension];
  jint l2 = ((IOSDoubleArray *) nil_chk(((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v2))->data_))->size_;
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:l1 + l2]);
  for (jint i = 0; i < l1; ++i) {
    *IOSDoubleArray_GetRef(self->data_, i) = [v1 getEntryWithInt:i];
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2->data_, 0, self->data_, l1, l2);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(id<OrgApacheCommonsMathLinearRealVector> v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearRealVector_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withDoubleArray_(OrgApacheCommonsMathLinearArrayRealVector *self, OrgApacheCommonsMathLinearArrayRealVector *v1, IOSDoubleArray *v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  jint l1 = [((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v1)) getDimension];
  jint l2 = ((IOSDoubleArray *) nil_chk(v2))->size_;
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:l1 + l2]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1->data_, 0, self->data_, 0, l1);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2, 0, self->data_, l1, l2);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withDoubleArray_(OrgApacheCommonsMathLinearArrayRealVector *v1, IOSDoubleArray *v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithOrgApacheCommonsMathLinearArrayRealVector_withDoubleArray_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withOrgApacheCommonsMathLinearArrayRealVector_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSDoubleArray *v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  jint l1 = ((IOSDoubleArray *) nil_chk(v1))->size_;
  jint l2 = [((OrgApacheCommonsMathLinearArrayRealVector *) nil_chk(v2)) getDimension];
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:l1 + l2]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1, 0, self->data_, 0, l1);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2->data_, 0, self->data_, l1, l2);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withOrgApacheCommonsMathLinearArrayRealVector_(IOSDoubleArray *v1, OrgApacheCommonsMathLinearArrayRealVector *v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withOrgApacheCommonsMathLinearArrayRealVector_(self, v1, v2);
  return self;
}

void OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withDoubleArray_(OrgApacheCommonsMathLinearArrayRealVector *self, IOSDoubleArray *v1, IOSDoubleArray *v2) {
  OrgApacheCommonsMathLinearAbstractRealVector_init(self);
  jint l1 = ((IOSDoubleArray *) nil_chk(v1))->size_;
  jint l2 = ((IOSDoubleArray *) nil_chk(v2))->size_;
  OrgApacheCommonsMathLinearArrayRealVector_setAndConsume_data_(self, [IOSDoubleArray newArrayWithLength:l1 + l2]);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v1, 0, self->data_, 0, l1);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(v2, 0, self->data_, l1, l2);
}

OrgApacheCommonsMathLinearArrayRealVector *new_OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withDoubleArray_(IOSDoubleArray *v1, IOSDoubleArray *v2) {
  OrgApacheCommonsMathLinearArrayRealVector *self = [OrgApacheCommonsMathLinearArrayRealVector alloc];
  OrgApacheCommonsMathLinearArrayRealVector_initWithDoubleArray_withDoubleArray_(self, v1, v2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearArrayRealVector)
