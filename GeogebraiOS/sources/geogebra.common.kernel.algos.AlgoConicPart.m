//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoConicPart.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoConicPart.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"

@implementation GeogebraCommonKernelAlgosAlgoConicPart

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return GeogebraCommonKernelCommandsCommandsEnum_get_Arc();
    default:
    return GeogebraCommonKernelCommandsCommandsEnum_get_Sector();
  }
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getConicPart {
  return conicPart_;
}

- (void)compute {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conicPart_)) setWithGeogebraCommonKernelGeosGeoElement:conic_];
  [((id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(conicPart_, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))) setParametersWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(startParam_)) getDouble] withDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(endParam_)) getDouble] withBoolean:YES];
}

- (void)dealloc {
  RELEASE_(conic_);
  RELEASE_(startParam_);
  RELEASE_(endParam_);
  RELEASE_(conicPart_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withInt:", "AlgoConicPart", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getConicPart", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "conic_", NULL, 0x1, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "startParam_", NULL, 0x1, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "endParam_", NULL, 0x1, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "conicPart_", NULL, 0x1, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "type_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoConicPart = { 2, "AlgoConicPart", "geogebra.common.kernel.algos", NULL, 0x401, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoConicPart;
}

@end

void GeogebraCommonKernelAlgosAlgoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelAlgosAlgoConicPart *self, GeogebraCommonKernelConstruction *cons, jint type) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = type;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoConicPart)
