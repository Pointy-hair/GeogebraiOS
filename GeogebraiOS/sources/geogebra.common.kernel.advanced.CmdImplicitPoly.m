//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdImplicitPoly.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/CmdImplicitPoly.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/implicit/AlgoImplicitPolyThroughPoints.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedCmdImplicitPoly ()

- (GeogebraCommonKernelGeosGeoElement *)doCommandWithNSString:(NSString *)a
                          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)b
                    withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAdvancedCmdImplicitPoly_doCommandWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelAdvancedCmdImplicitPoly *self, NSString *a, GeogebraCommonKernelGeosGeoList *b, GeogebraCommonKernelArithmeticCommand *c);

@implementation GeogebraCommonKernelAdvancedCmdImplicitPoly

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdImplicitPoly_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)doCommandWithNSString:(NSString *)a
                          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)b
                    withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  return GeogebraCommonKernelAdvancedCmdImplicitPoly_doCommandWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticCommand_(self, a, b, c);
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    GeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 0:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      case 1:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdImplicitPoly_doCommandWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticCommand_(self, [c getLabel], (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]), c) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) {
        GeogebraCommonKernelArithmeticFunctionNVar *f = [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class])))) getFunction];
        IOSObjectArray *fvars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) getFunctionVariables];
        if (((IOSObjectArray *) nil_chk(fvars))->size_ != 2) {
          @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk(app_)) getLocalization], @"InvalidEquation") autorelease];
        }
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) ImplicitPolyWithNSString:[c getLabel] withGeogebraCommonKernelGeosGeoFunctionNVar:((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else {
        GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$@$@", IOSObjectArray_Get(arg, 0), @": ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getGeoClassType], @"; ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getClass]));
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      default:
      if (J2ObjCFpToInt(JavaLangMath_sqrtWithDouble_(9 + (8 * n))) != JavaLangMath_sqrtWithDouble_(9 + (8 * n))) {
        @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
      }
      for (jint i = 0; i < n; i++) {
        if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), i))) isGeoPoint]) {
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
        }
      }
      list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, ((IOSObjectArray *) nil_chk(arg))->size_, GeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdImplicitPoly_doCommandWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticCommand_(self, [c getLabel], list, c) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdImplicitPoly", NULL, 0x1, NULL, NULL },
    { "doCommandWithNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticCommand:", "doCommand", "Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdImplicitPoly = { 2, "CmdImplicitPoly", "geogebra.common.kernel.advanced", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdImplicitPoly;
}

@end

void GeogebraCommonKernelAdvancedCmdImplicitPoly_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdImplicitPoly *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdImplicitPoly *new_GeogebraCommonKernelAdvancedCmdImplicitPoly_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdImplicitPoly *self = [GeogebraCommonKernelAdvancedCmdImplicitPoly alloc];
  GeogebraCommonKernelAdvancedCmdImplicitPoly_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelAdvancedCmdImplicitPoly_doCommandWithNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelAdvancedCmdImplicitPoly *self, NSString *a, GeogebraCommonKernelGeosGeoList *b, GeogebraCommonKernelArithmeticCommand *c) {
  GeogebraCommonKernelImplicitAlgoImplicitPolyThroughPoints *algo = [new_GeogebraCommonKernelImplicitAlgoImplicitPolyThroughPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self->cons_, a, b) autorelease];
  GeogebraCommonKernelGeosGeoElement *ret = [algo getImplicitPoly];
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdImplicitPoly)
