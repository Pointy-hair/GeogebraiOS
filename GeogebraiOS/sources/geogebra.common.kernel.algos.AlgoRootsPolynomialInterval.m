//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRootsPolynomialInterval.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomialInterval.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"

@interface GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval () {
 @public
  GeogebraCommonKernelArithmeticFunction *intervalFun_;
  GeogebraCommonKernelArithmeticFunction *interval_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval, intervalFun_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval, interval_, GeogebraCommonKernelArithmeticFunction *)

@implementation GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, f);
  return self;
}

- (void)compute {
  [super compute];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rootPoints_))->size_; i++) {
    jdouble xCoord = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints_, i))) getInhomX];
    if (![((GeogebraCommonKernelArithmeticFunction *) nil_chk(interval_)) evaluateBooleanWithDouble:xCoord]) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints_, i))) setUndefined];
    }
  }
}

- (void)computeRoots {
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isDefined]) {
    if (intervalFun_ == nil) {
      GeogebraCommonKernelArithmeticFunctionVariable *fVar = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([f_ getFunction])) getFunctionVariable];
      GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_setAndConsume_intervalFun_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f_ getFunctionExpression])) getRight], [GeogebraCommonKernelArithmeticExpressionNode class]), fVar));
      GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_setAndConsume_interval_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f_ getFunctionExpression])) getLeft], [GeogebraCommonKernelArithmeticExpressionNode class]), fVar));
    }
    [self calcRootsWithGeogebraCommonKernelArithmeticFunction:intervalFun_ withInt:0];
  }
  else {
    curRealRoots_ = 0;
  }
}

- (void)dealloc {
  RELEASE_(intervalFun_);
  RELEASE_(interval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoFunction:", "AlgoRootsPolynomialInterval", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "computeRoots", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "intervalFun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "interval_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval = { 2, "AlgoRootsPolynomialInterval", "geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval;
}

@end

void GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, f);
}

GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval *new_GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval *self = [GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval alloc];
  GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(self, cons, labels, f);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval)
