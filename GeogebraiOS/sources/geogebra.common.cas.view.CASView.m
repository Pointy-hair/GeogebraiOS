//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/cas/view/CASView.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/cas/GeoGebraCAS.h"
#include "geogebra/common/cas/view/CASInputHandler.h"
#include "geogebra/common/cas/view/CASTable.h"
#include "geogebra/common/cas/view/CASTableCellEditor.h"
#include "geogebra/common/cas/view/CASView.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/GeoGebraCasInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/ModeSetter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonCasViewCASView () {
 @public
  GeogebraCommonCasGeoGebraCAS *cas_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonCasViewCASView, cas_, GeogebraCommonCasGeoGebraCAS *)

NSString *GeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_D_ = @"1001 | 1002 | 1003  || 1005 | 1004 || 1006 | 1007 | 1010 || 1008 1009 || 66 68 || 6";
NSString *GeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_ = @"1001 | 1002 | 1003  || 1005 | 1004 || 1006 | 1007 | 1010 || 1008 | 1009 || 6";

@implementation GeogebraCommonCasViewCASView

- (id<GeogebraCommonCasViewCASTable>)getConsoleTable {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonMainApp *)getApp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)showSubstituteDialogWithNSString:(NSString *)prefix
                            withNSString:(NSString *)evalText
                            withNSString:(NSString *)postfix
                                 withInt:(jint)selRow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setLabels {
  [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setLabels];
}

- (jint)getViewID {
  return GeogebraCommonMainApp_VIEW_CAS;
}

- (NSString *)getRowOutputValueWithInt:(jint)n {
  GeogebraCommonKernelArithmeticValidExpression *outVE = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getOutputValidExpression];
  if (outVE == nil) {
    return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getOutputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()];
  }
  if ([[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(outVE)) unwrap] isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([outVE unwrap], [GeogebraCommonKernelGeosGeoElement class])))) toOutputValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()];
  }
  return [outVE toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()];
}

- (NSString *)getRowInputValueWithInt:(jint)n {
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:n])) getInputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (jint)getRowCount {
  return [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getRowCount];
}

- (GeogebraCommonCasGeoGebraCAS *)getCAS {
  @synchronized(self) {
    if (cas_ == nil) {
      GeogebraCommonCasViewCASView_set_cas_(self, (GeogebraCommonCasGeoGebraCAS *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS], [GeogebraCommonCasGeoGebraCAS class]));
    }
    return cas_;
  }
}

- (void)setModeWithInt:(jint)mode
withGeogebraCommonKernelModeSetterEnum:(GeogebraCommonKernelModeSetterEnum *)m {
  if (m != GeogebraCommonKernelModeSetterEnum_get_TOOLBAR()) return;
  NSString *command = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getModeTextWithInt:mode];
  jboolean backToEvaluate = YES;
  {
    jboolean undo;
    switch (mode) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EVALUATE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERIC:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_KEEP_INPUT:
      backToEvaluate = NO;
      [self processInputWithNSString:command];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EXPAND:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_FACTOR:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SUBSTITUTE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_NUMERICAL_SOLVE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_SOLVE:
      [self processInputWithNSString:command];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_DELETE:
      if ([((GeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager])) getActiveToolbarId] != [self getViewID]) backToEvaluate = NO;
      undo = [self deleteCasCellsWithIntArray:[((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]];
      if (undo) [((GeogebraCommonMainApp *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getApplication])) storeUndoInfo];
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_FUNCTION_INSPECTOR:
      if ([((GeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApp])) getGuiManager])) getActiveToolbarId] != [self getViewID]) backToEvaluate = NO;
      if (((IOSIntArray *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]))->size_ > 0) {
        GeogebraCommonKernelGeosGeoCasCell *cell = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getSelectedRows]), 0)];
        if (cell != nil && [[cell getTwinGeo] isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
          [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApp])) getDialogManager])) showFunctionInspectorWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *) check_class_cast([cell getTwinGeo], [GeogebraCommonKernelGeosGeoFunction class])];
        }
      }
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_DERIVATIVE:
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_INTEGRAL:
      [self processInputWithNSString:command];
      break;
      default:
      backToEvaluate = NO;
    }
  }
  if (backToEvaluate) [((GeogebraCommonMainApp *) nil_chk([self getApp])) setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_CAS_EVALUATE withGeogebraCommonKernelModeSetterEnum:GeogebraCommonKernelModeSetterEnum_get_CAS_VIEW()];
}

- (void)renameWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)clearView {
  [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) deleteAllRows];
  [self ensureOneEmptyRow];
  [((id<GeogebraCommonCasViewCASTableCellEditor>) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getEditor])) clearInputText];
}

- (void)ensureOneEmptyRow {
  jint rows = [self getRowCount];
  if (rows == 0 || ![self isRowOutputEmptyWithInt:rows - 1] || [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:rows - 1])) isInConstructionList]) {
    GeogebraCommonKernelGeosGeoCasCell *casCell = [new_GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) insertRowWithInt:rows withGeogebraCommonKernelGeosGeoCasCell:casCell withBoolean:NO];
  }
}

- (void)attachView {
  [self clearView];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyAddAllWithGeogebraCommonKernelView:self];
  [kernel_ attachWithGeogebraCommonKernelView:self];
}

- (void)detachView {
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) detachWithGeogebraCommonKernelView:self];
  [self clearView];
}

- (void)reset {
  [self repaintView];
}

- (void)updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
  [self ensureOneEmptyRow];
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
    GeogebraCommonKernelGeosGeoCasCell *casCell = (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class]);
    jint row = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getRowNumber];
    jboolean wasEditing = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) isEditing];
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) stopEditing];
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) deleteRowWithInt:row];
    if (wasEditing) {
      [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) startEditingRowWithInt:row];
    }
  }
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoCasCell class]]) {
    GeogebraCommonKernelGeosGeoCasCell *casCell = (GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoCasCell class]);
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setRowWithInt:[((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getRowNumber] withGeogebraCommonKernelGeosGeoCasCell:casCell];
  }
}

- (void)updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)processInputWithNSString:(NSString *)ggbcmd {
  [((GeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) processCurrentRowWithNSString:ggbcmd];
  [((GeogebraCommonMainApp *) nil_chk([self getApp])) storeUndoInfo];
}

- (void)processRowThenEditWithInt:(jint)row
                      withBoolean:(jboolean)flag {
  [((GeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) processRowThenEditWithInt:row withBoolean:flag];
}

- (NSString *)resolveCASrowReferencesWithNSString:(NSString *)inputExp
                                          withInt:(jint)row {
  NSString *result = [((GeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) resolveCASrowReferencesWithNSString:inputExp withInt:row withChar:GeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_STATIC withBoolean:NO];
  return [((GeogebraCommonCasViewCASInputHandler *) nil_chk([self getInputHandler])) resolveCASrowReferencesWithNSString:result withInt:row withChar:GeogebraCommonKernelGeosGeoCasCell_ROW_REFERENCE_DYNAMIC withBoolean:NO];
}

- (jboolean)deleteCasCellsWithIntArray:(IOSIntArray *)selRows {
  jboolean undoNeeded = NO;
  GeogebraCommonUtilDebugLog_debugWithId_(JavaLangInteger_valueOfWithInt_(((IOSIntArray *) nil_chk(selRows))->size_));
  for (jint i = selRows->size_ - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoCasCell *casCell = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(selRows, i)];
    if (casCell != nil) {
      [casCell remove];
      undoNeeded = YES;
    }
  }
  if (selRows->size_ > 0) {
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) resetRowNumbersWithInt:IOSIntArray_Get(selRows, 0)];
  }
  return undoNeeded;
}

- (NSString *)getLaTeXfromCellsWithIntArray:(IOSIntArray *)selRows {
  JavaLangStringBuilder *ret = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(selRows))->size_; i++) {
    GeogebraCommonKernelGeosGeoCasCell *casCell = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:IOSIntArray_Get(selRows, i)];
    if (casCell != nil) {
      [ret appendWithNSString:[casCell getLaTeXOutput]];
      [ret appendWithNSString:@" \\\\ "];
    }
  }
  return [ret description];
}

- (GeogebraCommonCasViewCASInputHandler *)getInputHandler {
  return casInputHandler_;
}

- (jboolean)isRowEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  GeogebraCommonKernelGeosGeoCasCell *value = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isEmpty];
}

- (jboolean)isRowInputEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  GeogebraCommonKernelGeosGeoCasCell *value = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isInputEmpty];
}

- (void)insertRowWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)newValue
                                            withBoolean:(jboolean)startEditing {
  GeogebraCommonKernelGeosGeoCasCell *toInsert = newValue;
  jint lastRow = [self getRowCount] - 1;
  if ([self isRowEmptyWithInt:lastRow]) {
    if (toInsert == nil) {
      toInsert = [new_GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
    }
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) setRowWithInt:lastRow withGeogebraCommonKernelGeosGeoCasCell:toInsert];
    if (startEditing) [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) startEditingRowWithInt:lastRow];
  }
  else {
    [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) insertRowWithInt:lastRow + 1 withGeogebraCommonKernelGeosGeoCasCell:toInsert withBoolean:startEditing];
  }
}

- (jboolean)isRowOutputEmptyWithInt:(jint)row {
  if (row < 0) return NO;
  GeogebraCommonKernelGeosGeoCasCell *value = [((id<GeogebraCommonCasViewCASTable>) nil_chk([self getConsoleTable])) getGeoCasCellWithInt:row];
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(value)) isOutputEmpty] && ![value isUseAsText];
}

- (void)startBatchUpdate {
}

- (void)endBatchUpdate {
}

- (instancetype)init {
  GeogebraCommonCasViewCASView_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(cas_);
  RELEASE_(kernel_);
  RELEASE_(casInputHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getConsoleTable", NULL, "Lgeogebra.common.cas.view.CASTable;", 0x401, NULL, NULL },
    { "getApp", NULL, "Lgeogebra.common.main.App;", 0x401, NULL, NULL },
    { "showSubstituteDialogWithNSString:withNSString:withNSString:withInt:", "showSubstituteDialog", "V", 0x401, NULL, NULL },
    { "setLabels", NULL, "V", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "getRowOutputValueWithInt:", "getRowOutputValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRowInputValueWithInt:", "getRowInputValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getRowCount", NULL, "I", 0x1, NULL, NULL },
    { "getCAS", NULL, "Lgeogebra.common.cas.GeoGebraCAS;", 0x31, NULL, NULL },
    { "setModeWithInt:withGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "renameWithGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "ensureOneEmptyRow", NULL, "V", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "detachView", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x11, NULL, NULL },
    { "processInputWithNSString:", "processInput", "V", 0x1, NULL, NULL },
    { "processRowThenEditWithInt:withBoolean:", "processRowThenEdit", "V", 0x1, NULL, NULL },
    { "resolveCASrowReferencesWithNSString:withInt:", "resolveCASrowReferences", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "deleteCasCellsWithIntArray:", "deleteCasCells", "Z", 0x1, NULL, NULL },
    { "getLaTeXfromCellsWithIntArray:", "getLaTeXfromCells", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getInputHandler", NULL, "Lgeogebra.common.cas.view.CASInputHandler;", 0x1, NULL, NULL },
    { "isRowEmptyWithInt:", "isRowEmpty", "Z", 0x1, NULL, NULL },
    { "isRowInputEmptyWithInt:", "isRowInputEmpty", "Z", 0x1, NULL, NULL },
    { "insertRowWithGeogebraCommonKernelGeosGeoCasCell:withBoolean:", "insertRow", "V", 0x1, NULL, NULL },
    { "isRowOutputEmptyWithInt:", "isRowOutputEmpty", "Z", 0x1, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TOOLBAR_DEFINITION_D_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_D_, NULL,  },
    { "TOOLBAR_DEFINITION_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonCasViewCASView_TOOLBAR_DEFINITION_, NULL,  },
    { "cas_", NULL, 0x2, "Lgeogebra.common.cas.GeoGebraCAS;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "casInputHandler_", NULL, 0x4, "Lgeogebra.common.cas.view.CASInputHandler;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonCasViewCASView = { 2, "CASView", "geogebra.common.cas.view", NULL, 0x401, 34, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonCasViewCASView;
}

@end

void GeogebraCommonCasViewCASView_init(GeogebraCommonCasViewCASView *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonCasViewCASView)
