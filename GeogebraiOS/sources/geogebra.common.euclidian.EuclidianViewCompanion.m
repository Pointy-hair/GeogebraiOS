//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianViewCompanion.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianDraw.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonEuclidianEuclidianViewCompanion

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonEuclidianEuclidianViewCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (GeogebraCommonEuclidianEuclidianView *)getView {
  return view_;
}

- (void)setXYMinMaxForUpdateSize {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setXYMinMaxForSetCoordSystem];
}

- (GeogebraCommonEuclidianDrawDrawAngle *)newDrawAngleWithGeogebraCommonKernelGeosGeoAngle:(GeogebraCommonKernelGeosGeoAngle *)geo {
  return [new_GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(view_, geo) autorelease];
}

- (jboolean)isDefault2D {
  return YES;
}

- (jboolean)isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getViewID]];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsForViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return coords;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return nil;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getInverseMatrix {
  return nil;
}

- (NSString *)getFromPlaneString {
  return @"xOyPlane";
}

- (NSString *)getTranslatedFromPlaneString {
  return [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getPlainWithNSString:@"xOyPlane"];
}

- (id<GeogebraCommonKernelKernelNDGeoPlaneND>)getPlaneContaining {
  return [((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->kernel_)) getDefaultPlane];
}

- (id<GeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return [self getPlaneContaining];
}

- (jboolean)goToZPlusWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getZ] > 0;
}

- (jboolean)isMoveableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveable];
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algoParent {
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent)) getFreeInputPoints];
}

- (void)getXMLidWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  if (((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->evNo_ >= 2) {
    [self getXMLidNoCheckWithJavaLangStringBuilder:sbxml];
  }
}

- (void)getXMLidNoCheckWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<viewNumber "];
  [sbxml appendWithNSString:@"viewNo=\""];
  [sbxml appendWithInt:((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->evNo_];
  [sbxml appendWithNSString:@"\""];
  [sbxml appendWithNSString:@"/>\n"];
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                            withBoolean:(jboolean)asPreference {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) startXMLWithJavaLangStringBuilder:sbxml withBoolean:asPreference];
  [view_ endXMLWithJavaLangStringBuilder:sbxml];
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  GeogebraCommonMainSettingsEuclidianSettings *evs = (GeogebraCommonMainSettingsEuclidianSettings *) check_class_cast(settings, [GeogebraCommonMainSettingsEuclidianSettings class]);
  jint viewDim = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getDimension];
  [view_ setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:[((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evs)) getXminObject]];
  [view_ setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:[evs getXmaxObject]];
  [view_ setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:[evs getYminObject]];
  [view_ setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:[evs getYmaxObject]];
  [view_ setBackgroundWithGeogebraCommonAwtGColor:[evs getBackground]];
  [view_ setAxesColorWithGeogebraCommonAwtGColor:[evs getAxesColor]];
  [view_ setGridColorWithGeogebraCommonAwtGColor:[evs getGridColor]];
  [view_ setAxesLineStyleWithInt:[evs getAxesLineStyle]];
  [view_ setGridLineStyleWithInt:[evs getGridLineStyle]];
  IOSDoubleArray *d = [evs getGridDistances];
  if (![evs getAutomaticGridDistance] && (d == nil)) {
    [view_ setAutomaticGridDistanceWithBoolean:NO];
  }
  else if (d == nil) {
    [view_ setAutomaticGridDistanceWithBoolean:YES];
  }
  else {
    [view_ setGridDistancesWithDoubleArray:d];
  }
  for (jint i = 0; i < viewDim; i++) {
    [view_ setShowAxisWithInt:i withBoolean:[evs getShowAxisWithInt:i] withBoolean:YES];
  }
  IOSObjectArray *tempAxesLabels = [evs getAxesLabels];
  for (jint i = 0; i < viewDim; i++) {
    [view_ setAxisLabelWithInt:i withNSString:IOSObjectArray_Get(nil_chk(tempAxesLabels), i)];
  }
  [view_ setAxesUnitLabelsWithNSStringArray:[evs getAxesUnitLabels]];
  GeogebraCommonEuclidianEuclidianView_set_showAxesNumbers_(view_, [evs getShowAxisNumbers]);
  for (jint i = 0; i < viewDim; i++) {
    if (![evs getAutomaticAxesNumberingDistanceWithInt:i] && JavaLangDouble_isNaNWithDouble_([evs getAxisNumberingDistanceWithInt:i])) {
      [view_ setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:i];
    }
    else {
      [view_ setAxesNumberingDistanceWithDouble:[evs getAxisNumberingDistanceWithInt:i] withInt:i];
    }
  }
  for (jint i = 0; i < viewDim; i++) {
    *IOSIntArray_GetRef(nil_chk(view_->axesTickStyles_), i) = IOSIntArray_Get(nil_chk([evs getAxesTickStyles]), i);
  }
  [view_ setDrawBorderAxesWithBooleanArray:[evs getDrawBorderAxes]];
  for (jint i = 0; i < viewDim; i++) {
    *IOSDoubleArray_GetRef(nil_chk(view_->axisCross_), i) = IOSDoubleArray_Get(nil_chk([evs getAxesCross]), i);
    *IOSBooleanArray_GetRef(nil_chk(view_->positiveAxes_), i) = IOSBooleanArray_Get(nil_chk([evs getPositiveAxes]), i);
  }
  GeogebraCommonAwtGDimension *ps = [evs getPreferredSize];
  if (ps != nil) {
    [view_ setPreferredSizeWithGeogebraCommonAwtGDimension:ps];
  }
  [view_ showGridWithBoolean:[evs getShowGrid]];
  [view_ setGridIsBoldWithBoolean:[evs getGridIsBold]];
  [view_ setGridTypeWithInt:[evs getGridType]];
  view_->pointCapturingMode_ = [evs getPointCapturingMode];
  [view_ setAllowShowMouseCoordsWithBoolean:[evs getAllowShowMouseCoords]];
  [view_ setAllowToolTipsWithInt:[evs getAllowToolTips]];
  [view_ synchronizeMenuBarAndEuclidianStyleBarWithGeogebraCommonMainSettingsEuclidianSettings:evs];
  if (![evs hasDynamicBounds]) {
    [view_ setCoordSystemWithDouble:[evs getXZero] withDouble:[evs getYZero] withDouble:[evs getXscale] withDouble:[evs getYscale] withBoolean:YES];
    [evs setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:view_->xminObject_ withBoolean:NO];
    [evs setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:view_->xmaxObject_ withBoolean:NO];
    [evs setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:view_->yminObject_ withBoolean:NO];
    [evs setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:view_->ymaxObject_ withBoolean:NO];
  }
  else {
    [view_ updateBoundsWithBoolean:YES];
  }
  [view_ setLockedAxesRatioWithJavaLangDouble:[evs getLockedAxesRatio]];
}

- (void)paintWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setDefRenderingHintsWithGeogebraCommonAwtGGraphics2D:g2];
  [view_ paintTheBackgroundWithGeogebraCommonAwtGGraphics2D:g2];
  if (view_->antiAliasing_) {
    [view_ setAntialiasingWithGeogebraCommonAwtGGraphics2D:g2];
  }
  [view_ drawObjectsWithGeogebraCommonAwtGGraphics2D:g2];
  if (view_->selectionRectangle_ != nil) {
    [view_ drawZoomRectangleWithGeogebraCommonAwtGGraphics2D:g2];
  }
  if (view_->deletionRectangle_ != nil) {
    [view_ drawRectWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGColor:GeogebraCommonEuclidianEuclidianView_get_colDeletionSquare_() withGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianEuclidianView_get_strokeDeletionSquare_() withGeogebraCommonAwtGRectangle:view_->deletionRectangle_];
  }
  if (view_->allowShowMouseCoords_ && view_->showMouseCoords_ && (IOSBooleanArray_Get(nil_chk(view_->showAxes_), 0) || IOSBooleanArray_Get(view_->showAxes_, 1) || view_->showGrid__)) {
    [view_ drawMouseCoordsWithGeogebraCommonAwtGGraphics2D:g2];
  }
  if (view_->showAxesRatio_) {
    [view_ drawAxesRatioWithGeogebraCommonAwtGGraphics2D:g2];
  }
  if ([((GeogebraCommonKernelKernel *) nil_chk(view_->kernel_)) needToShowAnimationButton]) {
    [view_ drawAnimationButtonsWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)attachView {
  [((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->kernel_)) notifyAddAllWithGeogebraCommonKernelView:view_];
  [view_->kernel_ attachWithGeogebraCommonKernelView:view_];
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  if (show == ((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->showGrid__) {
    return NO;
  }
  view_->showGrid__ = show;
  [view_ updateBackgroundImage];
  return YES;
}

- (GeogebraCommonEuclidianDrawableND *)newDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonEuclidianEuclidianDraw_newDrawableWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_(view_, geo);
}

- (id<GeogebraCommonAwtGAffineTransform>)getTransformWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                                                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)M
                                                      withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)ev {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getAffineTransform];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsForViewWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  return [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
}

- (void)dealloc {
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:", "EuclidianViewCompanion", NULL, 0x1, NULL, NULL },
    { "getView", NULL, "Lgeogebra.common.euclidian.EuclidianView;", 0x1, NULL, NULL },
    { "setXYMinMaxForUpdateSize", NULL, "V", 0x1, NULL, NULL },
    { "newDrawAngleWithGeogebraCommonKernelGeosGeoAngle:", "newDrawAngle", "Lgeogebra.common.euclidian.draw.DrawAngle;", 0x4, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:", "isVisibleInThisView", "Z", 0x1, NULL, NULL },
    { "getCoordsForViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsForView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getInverseMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPlaneContaining", NULL, "Lgeogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "goToZPlusWithGeogebraCommonKernelMatrixCoords:", "goToZPlus", "Z", 0x1, NULL, NULL },
    { "isMoveableWithGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getXMLidWithJavaLangStringBuilder:", "getXMLid", "V", 0x1, NULL, NULL },
    { "getXMLidNoCheckWithJavaLangStringBuilder:", "getXMLidNoCheck", "V", 0x4, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "paintWithGeogebraCommonAwtGGraphics2D:", "paint", "V", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "newDrawableWithGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lgeogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "getTransformWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoordsArray:", "getTransform", "Lgeogebra.common.awt.GAffineTransform;", 0x1, NULL, NULL },
    { "getCoordsForViewWithGeogebraCommonKernelKernelNDGeoPointND:", "getCoordsForView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianViewCompanion = { 2, "EuclidianViewCompanion", "geogebra.common.euclidian", NULL, 0x1, 26, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianViewCompanion;
}

@end

void GeogebraCommonEuclidianEuclidianViewCompanion_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianViewCompanion *self, GeogebraCommonEuclidianEuclidianView *view) {
  NSObject_init(self);
  GeogebraCommonEuclidianEuclidianViewCompanion_set_view_(self, view);
}

GeogebraCommonEuclidianEuclidianViewCompanion *new_GeogebraCommonEuclidianEuclidianViewCompanion_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonEuclidianEuclidianViewCompanion *self = [GeogebraCommonEuclidianEuclidianViewCompanion alloc];
  GeogebraCommonEuclidianEuclidianViewCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianViewCompanion)
