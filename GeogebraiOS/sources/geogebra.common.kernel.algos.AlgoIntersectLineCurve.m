//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectLineCurve.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineCurve.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectLineCurve () {
 @public
  GeogebraCommonKernelGeosGeoLine *line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineCurve, line_, GeogebraCommonKernelGeosGeoLine *)

@interface GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve *this$0_;
}

- (GeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve:(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1, this$0_, GeogebraCommonKernelAlgosAlgoIntersectLineCurve *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)

@implementation GeogebraCommonKernelAlgosAlgoIntersectLineCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)p {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, l, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setLabelsWithNSStringArray:labels];
    [outputPoints_ setIndexLabelsWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self) autorelease]) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, line_);
  IOSObjectArray_Set(input_, 1, curve_);
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelMatrixCoords *coeffs = [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line_)) getCoords];
  GeogebraCommonKernelArithmeticExpressionNode *xFun = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(curve_)) getFunX])) getExpression];
  GeogebraCommonKernelArithmeticExpressionNode *yFun = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunY])) getExpression];
  GeogebraCommonKernelArithmeticFunctionVariable *fv = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([curve_ getFunX])) getFunctionVariable];
  GeogebraCommonKernelArithmeticExpressionNode *enx, *eny;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coeffs)) getZ])) {
    enx = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getX]) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), xFun) autorelease];
    eny = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getY]) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), yFun) autorelease];
    enx = [enx plusWithGeogebraCommonKernelArithmeticExpressionValue:eny];
  }
  else {
    enx = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getX] / [coeffs getZ]) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), xFun) autorelease];
    eny = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [coeffs getY] / [coeffs getZ]) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), yFun) autorelease];
    enx = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([enx plusWithGeogebraCommonKernelArithmeticExpressionValue:eny])) plusWithDouble:1];
  }
  GeogebraCommonKernelGeosGeoFunction *geoFun = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enx)) buildFunctionWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
  IOSDoubleArray *roots = nil;
  jint outputSize = -1;
  JavaUtilArrayList *polyRoots = [new_JavaUtilArrayList_init() autorelease];
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(geoFun)) isPolynomialFunctionWithBoolean:YES]) {
    JavaUtilLinkedList *factorList = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([geoFun getFunction])) getPolynomialFactorsWithBoolean:NO];
    if (factorList != nil) {
      id<JavaUtilIterator> it = [factorList iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelArithmeticPolyFunction *polyFun = [it next];
        if ([((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(polyFun)) updateCoeffValues]) {
          roots = [polyFun getCoeffsCopy];
          jint n = [((GeogebraCommonKernelEquationSolver *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel])) getEquationSolver])) polynomialRootsWithDoubleArray:roots withBoolean:YES];
          for (jint i = 0; i < n; i++) {
            [polyRoots addWithId:JavaLangDouble_valueOfWithDouble_(IOSDoubleArray_Get(nil_chk(roots), i))];
          }
        }
        else {
          outputSize = -1;
          break;
        }
      }
    }
  }
  if ([polyRoots size] > 0) {
    outputSize = [polyRoots size];
    roots = [IOSDoubleArray arrayWithLength:outputSize];
    for (jint i = 0; i < outputSize; i++) {
      *IOSDoubleArray_GetRef(roots, i) = [((JavaLangDouble *) nil_chk([polyRoots getWithInt:i])) doubleValue];
    }
  }
  else {
    roots = GeogebraCommonKernelAlgosAlgoRoots_findRootsWithGeogebraCommonKernelGeosGeoFunction_withDouble_withDouble_withInt_(geoFun, [curve_ getMinParameter], [curve_ getMaxParameter], 100);
    outputSize = roots == nil || roots->size_ == 0 ? 1 : roots->size_;
  }
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:outputSize];
  jint index = 0;
  if (roots != nil) {
    for (index = 0; index < outputSize; index++) {
      jdouble paramVal = IOSDoubleArray_Get(roots, index);
      GeogebraCommonKernelGeosGeoPoint *point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([outputPoints_ getElementWithInt:index], [GeogebraCommonKernelGeosGeoPoint class]);
      if (paramVal < [curve_ getMinParameter] || paramVal > [curve_ getMaxParameter]) {
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setUndefined];
      }
      else {
        [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv)) setWithDouble:paramVal];
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point)) setCoordsWithDouble:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(xFun)) evaluateDouble] withDouble:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(yFun)) evaluateDouble] withDouble:1.0];
        if (!([line_ isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:point withDouble:GeogebraCommonKernelKernel_MIN_PRECISION])) {
          [point setUndefined];
        }
      }
    }
  }
  for (; index < [outputPoints_ size]; index++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk((line_))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk((curve_))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(line_);
  RELEASE_(curve_);
  RELEASE_(outputPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoIntersectLineCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoIntersectLineCurve", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "createOutputPoints", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "curve_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "outputPoints_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectLineCurve = { 2, "AlgoIntersectLineCurve", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectLineCurve;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *l, GeogebraCommonKernelGeosGeoCurveCartesian *p) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_outputPoints_(self, [self createOutputPoints]);
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_line_(self, l);
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_set_curve_(self, p);
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

GeogebraCommonKernelAlgosAlgoIntersectLineCurve *new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *l, GeogebraCommonKernelGeosGeoCurveCartesian *p) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve *self = [GeogebraCommonKernelAlgosAlgoIntersectLineCurve alloc];
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, c, labels, l, p);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
}

GeogebraCommonKernelAlgosAlgoIntersectLineCurve *new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve *self = [GeogebraCommonKernelAlgosAlgoIntersectLineCurve alloc];
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectLineCurve)

@implementation GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1

- (GeogebraCommonKernelGeosGeoPoint *)newElement {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve:(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *)outer$ {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoIntersectLineCurve;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoIntersectLineCurve", "createOutputPoints" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoIntersectLineCurve", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(GeogebraCommonKernelAlgosAlgoIntersectLineCurve *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 *self = [GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1 alloc];
  GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLineCurve_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectLineCurve_$1)
