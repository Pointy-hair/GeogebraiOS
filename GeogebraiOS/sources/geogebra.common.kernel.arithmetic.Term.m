//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Term.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/Term.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Deprecated.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Arrays.h"

#define GeogebraCommonKernelArithmeticTerm_serialVersionUID 1LL

@interface GeogebraCommonKernelArithmeticTerm () {
 @public
  JavaLangStringBuilder *variables_;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                           withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)subWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                           withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                             withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

+ (void)sortWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)coeffStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                    withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (NSString *)variableStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticTerm, variables_, JavaLangStringBuilder *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticTerm, serialVersionUID, jlong)

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticTerm_coeffStringWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticTerm *self, GeogebraCommonKernelStringTemplate *tpl);

@implementation GeogebraCommonKernelArithmeticTerm

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)coeff
                                                         withNSString:(NSString *)vars {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, coeff, vars);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                        withDouble:(jdouble)coeff
                                      withNSString:(NSString *)vars {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, coeff, vars);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)coeff
                                            withJavaLangStringBuilder:(JavaLangStringBuilder *)vars {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, vars);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t
                            withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_(self, t, kernel);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getCoefficient {
  return coefficient_;
}

- (void)setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)coeff {
  GeogebraCommonKernelArithmeticTerm_set_coefficient_(self, coeff);
}

- (NSString *)getVars {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) description];
}

- (void)setVariablesWithNSString:(NSString *)vars {
  [((JavaLangStringBuilder *) nil_chk(variables_)) setLengthWithInt:0];
  [variables_ appendWithNSString:vars];
}

- (void)setVariablesWithJavaLangStringBuilder:(JavaLangStringBuilder *)vars {
  [((JavaLangStringBuilder *) nil_chk(variables_)) setLengthWithInt:0];
  [variables_ appendWithJavaLangCharSequence:vars];
}

- (jboolean)hasNoVars {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) length] == 0;
}

- (jboolean)hasIntegerCoeff {
  return GeogebraCommonKernelKernel_isIntegerWithDouble_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(coefficient_)) evaluateDouble]);
}

- (jint)degree {
  return [((JavaLangStringBuilder *) nil_chk(variables_)) length];
}

- (jint)degreeWithChar:(jchar)var {
  jint count = 0;
  for (jint i = 0; i < [((JavaLangStringBuilder *) nil_chk(variables_)) length]; i++) {
    if ([variables_ charAtWithInt:i] == var) count++;
  }
  return count;
}

- (void)addToCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                                           withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)addWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                           withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)subWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                           withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticTerm_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (void)multiplyWithGeogebraCommonKernelArithmeticTerm:(GeogebraCommonKernelArithmeticTerm *)t
                        withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, coefficient_, ((GeogebraCommonKernelArithmeticTerm *) nil_chk(t))->coefficient_, kernel)];
  [((JavaLangStringBuilder *) nil_chk(variables_)) appendWithJavaLangCharSequence:t->variables_];
  GeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(variables_);
}

- (void)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                                   withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)multiplyWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                             withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                                withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, b, kernel);
}

- (void)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)number
                                 withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, coefficient_, number, kernel)];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)divideWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)a
                                                           withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)b
                                                                              withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, b, kernel);
}

+ (void)sortWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(sb);
}

- (jboolean)isEqual:(id)o {
  GeogebraCommonKernelArithmeticTerm *t;
  if ([o isKindOfClass:[GeogebraCommonKernelArithmeticTerm class]]) {
    t = (GeogebraCommonKernelArithmeticTerm *) check_class_cast(o, [GeogebraCommonKernelArithmeticTerm class]);
    return (coefficient_ == ((GeogebraCommonKernelArithmeticTerm *) nil_chk(t))->coefficient_ && [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(variables_)) description])) isEqual:[t->variables_ description]]);
  }
  return NO;
}

- (NSUInteger)hash {
  NSAssert(NO, @"hashCode not designed");
  return 42;
}

- (jboolean)containsWithNSString:(NSString *)var {
  return ([((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(variables_)) description])) indexOfString:var] >= 0);
}

- (jint)compareToWithId:(id)o {
  check_class_cast(o, [NSObject class]);
  return [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(((GeogebraCommonKernelArithmeticTerm *) nil_chk(((GeogebraCommonKernelArithmeticTerm *) check_class_cast(o, [GeogebraCommonKernelArithmeticTerm class]))))->variables_)) description])) compareToWithId:[variables_ description]];
}

- (NSString *)description {
  return [self toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, 0, YES)) return @"0";
  if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, 1, YES)) {
    if (((jint) [((NSString *) nil_chk(GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) length]) > 0) {
      return GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
    }
    return @"1";
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  NSString *var = GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
  if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(coefficient_, -1, YES) && ((jint) [((NSString *) nil_chk(var)) length]) > 0) {
    [sb appendWithChar:'-'];
    [sb appendWithNSString:var];
  }
  else {
    [sb appendWithNSString:GeogebraCommonKernelArithmeticTerm_coeffStringWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelStringTemplate_(self, coefficient_, tpl)];
    if (var != nil) {
      [sb appendWithChar:' '];
      [sb appendWithNSString:var];
    }
  }
  return [sb description];
}

- (NSString *)coeffStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                    withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticTerm_coeffStringWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelStringTemplate_(self, ev, tpl);
}

- (NSString *)variableStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)dealloc {
  RELEASE_(coefficient_);
  RELEASE_(variables_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_toString {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withDouble:withNSString:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticExpressionValue:withJavaLangStringBuilder:", "Term", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticTerm:withGeogebraCommonKernelKernel:", "Term", NULL, 0x1, NULL, NULL },
    { "getCoefficient", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:", "setCoefficient", "V", 0x0, NULL, NULL },
    { "getVars", NULL, "Ljava.lang.String;", 0x0, NULL, NULL },
    { "setVariablesWithNSString:", "setVariables", "V", 0x0, NULL, NULL },
    { "setVariablesWithJavaLangStringBuilder:", "setVariables", "V", 0x0, NULL, NULL },
    { "hasNoVars", NULL, "Z", 0x0, NULL, NULL },
    { "hasIntegerCoeff", NULL, "Z", 0x0, NULL, NULL },
    { "degree", NULL, "I", 0x0, NULL, NULL },
    { "degreeWithChar:", "degree", "I", 0x0, NULL, NULL },
    { "addToCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "addToCoefficient", "V", 0x0, NULL, NULL },
    { "addWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "add", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "subWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "sub", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticTerm:withGeogebraCommonKernelKernel:", "multiply", "V", 0x0, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "multiply", "V", 0x0, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "multiply", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "divideWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "divide", "V", 0x0, NULL, NULL },
    { "divideWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "divide", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "sortWithJavaLangStringBuilder:", "sort", "V", 0xa, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "containsWithNSString:", "contains", "Z", 0x0, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "coeffStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:", "coeffString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "variableStringWithGeogebraCommonKernelStringTemplate:", "variableString", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelArithmeticTerm_serialVersionUID },
    { "coefficient_", NULL, 0x0, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticTerm = { 2, "Term", "geogebra.common.kernel.arithmetic", NULL, 0x1, 30, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Ljava/lang/Object;>;Ljava/io/Serializable;" };
  return &_GeogebraCommonKernelArithmeticTerm;
}

@end

void GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> coeff, NSString *vars) {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, [new_JavaLangStringBuilder_initWithNSString_(vars) autorelease]);
}

GeogebraCommonKernelArithmeticTerm *new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(id<GeogebraCommonKernelArithmeticExpressionValue> coeff, NSString *vars) {
  GeogebraCommonKernelArithmeticTerm *self = [GeogebraCommonKernelArithmeticTerm alloc];
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withNSString_(self, coeff, vars);
  return self;
}

void GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(GeogebraCommonKernelArithmeticTerm *self, GeogebraCommonKernelKernel *kernel, jdouble coeff, NSString *vars) {
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, coeff) autorelease], [new_JavaLangStringBuilder_initWithNSString_(vars) autorelease]);
}

GeogebraCommonKernelArithmeticTerm *new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(GeogebraCommonKernelKernel *kernel, jdouble coeff, NSString *vars) {
  GeogebraCommonKernelArithmeticTerm *self = [GeogebraCommonKernelArithmeticTerm alloc];
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, coeff, vars);
  return self;
}

void GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> coeff, JavaLangStringBuilder *vars) {
  NSObject_init(self);
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:coeff];
  GeogebraCommonKernelArithmeticTerm_set_variables_(self, vars);
}

GeogebraCommonKernelArithmeticTerm *new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(id<GeogebraCommonKernelArithmeticExpressionValue> coeff, JavaLangStringBuilder *vars) {
  GeogebraCommonKernelArithmeticTerm *self = [GeogebraCommonKernelArithmeticTerm alloc];
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticExpressionValue_withJavaLangStringBuilder_(self, coeff, vars);
  return self;
}

void GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, GeogebraCommonKernelArithmeticTerm *t, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticTerm_setAndConsume_variables_(self, new_JavaLangStringBuilder_initWithNSString_([((JavaLangStringBuilder *) nil_chk(((GeogebraCommonKernelArithmeticTerm *) nil_chk(t))->variables_)) description]));
  [self setCoefficientWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticExpressionNode_copy__WithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(t->coefficient_, kernel)];
}

GeogebraCommonKernelArithmeticTerm *new_GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *t, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticTerm *self = [GeogebraCommonKernelArithmeticTerm alloc];
  GeogebraCommonKernelArithmeticTerm_initWithGeogebraCommonKernelArithmeticTerm_withGeogebraCommonKernelKernel_(self, t, kernel);
  return self;
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel) {
  jboolean aconst = NO;
  jboolean bconst = NO;
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) evaluateDouble];
    bval = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) evaluateDouble];
    return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, aval + bval) autorelease];
  }
  else if (aconst) {
    aval = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) evaluateDouble];
    if (aval == 0.0) {
      return b;
    }
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isExpressionNode]) {
      GeogebraCommonKernelArithmeticExpressionNode *ben = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [GeogebraCommonKernelArithmeticExpressionNode class]);
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ben getLeft])) isConstant]) {
        switch ([[ben getOperation] ordinal]) {
          case GeogebraCommonPluginOperation_PLUS:
          return GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
          case GeogebraCommonPluginOperation_MINUS:
          return GeogebraCommonKernelArithmeticTerm_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
        }
      }
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_PLUS(), b) autorelease];
  }
  else if (bconst) return GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, b, a, kernel);
  else return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_PLUS(), b) autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_subWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel) {
  return GeogebraCommonKernelArithmeticTerm_addWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, -1.0) autorelease], b, kernel), kernel);
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel) {
  jboolean aconst = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) isConstant];
  jboolean bconst = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isConstant];
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [a evaluateDouble];
    bval = [b evaluateDouble];
    return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, aval * bval) autorelease];
  }
  else if (aconst) {
    aval = [a evaluateDouble];
    if (aval == 0.0) return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0.0) autorelease];
    else if (aval == 1.0) return b;
    else {
      if ([b isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
        GeogebraCommonKernelArithmeticExpressionNode *ben = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [GeogebraCommonKernelArithmeticExpressionNode class]);
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ben getLeft])) isConstant]) {
          switch ([[ben getOperation] ordinal]) {
            case GeogebraCommonPluginOperation_MULTIPLY:
            return GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
            case GeogebraCommonPluginOperation_DIVIDE:
            return GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
          }
        }
      }
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), b) autorelease];
    }
  }
  else if (bconst) return GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, b, a, kernel);
  else return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), b) autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> a, id<GeogebraCommonKernelArithmeticExpressionValue> b, GeogebraCommonKernelKernel *kernel) {
  jboolean aconst = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(a)) isConstant];
  jboolean bconst = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(b)) isConstant];
  jdouble aval, bval;
  if (aconst && bconst) {
    aval = [a evaluateDouble];
    bval = [b evaluateDouble];
    return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, aval / bval) autorelease];
  }
  else if (aconst) {
    aval = [a evaluateDouble];
    if (aval == 0.0) {
      return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0.0) autorelease];
    }
    if ([b isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
      GeogebraCommonKernelArithmeticExpressionNode *ben = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(b, [GeogebraCommonKernelArithmeticExpressionNode class]);
      switch ([[ben getOperation] ordinal]) {
        case GeogebraCommonPluginOperation_DIVIDE:
        return GeogebraCommonKernelArithmeticTerm_multiplyWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, GeogebraCommonKernelArithmeticTerm_divideWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_(self, a, [ben getLeft], kernel), [ben getRight], kernel);
      }
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_DIVIDE(), b) autorelease];
  }
  else if (bconst) {
    bval = [b evaluateDouble];
    if (bval == 1.0) {
      return a;
    }
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_DIVIDE(), b) autorelease];
  }
  else return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, a, GeogebraCommonPluginOperationEnum_get_DIVIDE(), b) autorelease];
}

void GeogebraCommonKernelArithmeticTerm_sortWithJavaLangStringBuilder_(JavaLangStringBuilder *sb) {
  GeogebraCommonKernelArithmeticTerm_initialize();
  jint len = [((JavaLangStringBuilder *) nil_chk(sb)) length];
  IOSCharArray *chVariables = [IOSCharArray arrayWithLength:len];
  [sb getCharsWithInt:0 withInt:len withCharArray:chVariables withInt:0];
  JavaUtilArrays_sortWithCharArray_withInt_withInt_(chVariables, 0, len);
  [sb setLengthWithInt:0];
  [sb appendWithCharArray:chVariables];
}

NSString *GeogebraCommonKernelArithmeticTerm_coeffStringWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticTerm *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, GeogebraCommonKernelStringTemplate *tpl) {
  if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl];
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticExpressionNode *n = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(n)) isLeaf] || GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(n) >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal] || [((JavaLangStringBuilder *) nil_chk(self->variables_)) length] == 0) {
      return [n toStringWithGeogebraCommonKernelStringTemplate:tpl];
    }
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithChar:'('];
    [sb appendWithNSString:[n toStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithChar:')'];
    return [sb description];
  }
  else return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

NSString *GeogebraCommonKernelArithmeticTerm_variableStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticTerm *self, GeogebraCommonKernelStringTemplate *tpl) {
  NSString *str = [((JavaLangStringBuilder *) nil_chk(self->variables_)) description];
  if (([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) && [self->variables_ length] >= 1) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(@"(") autorelease];
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
      if (i > 0) [sb appendWithChar:'*'];
      [sb appendWithNSString:[tpl printVariableNameWithNSString:JreStrcat("C", [str charAtWithInt:0])]];
    }
    [sb appendWithChar:')'];
    return [sb description];
  }
  switch ([self->variables_ length]) {
    case 1:
    return str;
    case 2:
    if ([((NSString *) nil_chk(str)) isEqual:@"xx"]) {
      return @"x\u00b2";
    }
    if ([str isEqual:@"yy"]) {
      return @"y\u00b2";
    }
    if ([str isEqual:@"xy"]) {
      return @"xy";
    }
    default:
    return @"";
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticTerm)
