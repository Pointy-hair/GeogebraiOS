//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/GlobalKeyDispatcher.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/draw/DrawTextField.h"
#include "geogebra/common/gui/menubar/OptionsMenu.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/Furniture.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/GlobalKeyDispatcher.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/KeyCodes.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/util/CopyPaste.h"
#include "java/lang/Character.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonMainGlobalKeyDispatcher () {
 @public
  JavaUtilTreeSet *tempSet_;
  GeogebraCommonKernelMatrixCoords *tempVec_;
}

+ (jint)getPointSizeIncWithInt:(jint)oldFontSize
                       withInt:(jint)newFontSize;

+ (void)setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                       withInt:(jint)lineThicknessIncr
                                                       withInt:(jint)pointSizeIncr
                                                       withInt:(jint)angleSizeIncr
                                                   withBoolean:(jboolean)blackWhiteMode;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainGlobalKeyDispatcher, tempSet_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainGlobalKeyDispatcher, tempVec_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static jint GeogebraCommonMainGlobalKeyDispatcher_getPointSizeIncWithInt_withInt_(jint oldFontSize, jint newFontSize);

__attribute__((unused)) static void GeogebraCommonMainGlobalKeyDispatcher_setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_withInt_withBoolean_(GeogebraCommonKernelGeosGeoElement *geo, jint lineThicknessIncr, jint pointSizeIncr, jint angleSizeIncr, jboolean blackWhiteMode);

@implementation GeogebraCommonMainGlobalKeyDispatcher

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app2 {
  GeogebraCommonMainGlobalKeyDispatcher_initWithGeogebraCommonMainApp_(self, app2);
  return self;
}

- (void)handleFunctionKeyForAlgebraInputWithInt:(jint)i
         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (JavaUtilTreeSet *)getTempSet {
  if (tempSet_ == nil) {
    GeogebraCommonMainGlobalKeyDispatcher_setAndConsume_tempSet_(self, new_JavaUtilTreeSet_init());
  }
  return tempSet_;
}

- (jboolean)renameStartedWithChar:(jchar)ch {
  GeogebraCommonKernelGeosGeoElement *geo;
  if ([((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectedGeosSize] == 1) {
    geo = [((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) getWithInt:0];
  }
  else {
    geo = [((GeogebraCommonMainApp *) nil_chk(app_)) getLastCreatedGeoElement];
  }
  if ((JavaLangCharacter_isLetterWithChar_(ch)) || [geo isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]]) {
    if (geo != nil && [geo isRenameable]) {
      if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]]) {
        GeogebraCommonEuclidianDrawDrawTextField *dt = (GeogebraCommonEuclidianDrawDrawTextField *) check_class_cast([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) getDrawableForWithGeogebraCommonKernelGeosGeoElement:geo], [GeogebraCommonEuclidianDrawDrawTextField class]);
        [((GeogebraCommonEuclidianDrawDrawTextField *) nil_chk(dt)) setFocusWithNSString:JreStrcat("C", ch)];
      }
      else {
        [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showRenameDialogWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES withNSString:JavaLangCharacter_toStringWithChar_(ch) withBoolean:NO];
      }
      return YES;
    }
  }
  return NO;
}

- (jboolean)handleArrowKeyMovementWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                             withDouble:(jdouble)xdiff
                                             withDouble:(jdouble)ydiff
                                             withDouble:(jdouble)zdiff {
  GeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk(geos)) getWithInt:0];
  jboolean allSliders = YES;
  for (jint i = 0; i < [geos size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geoi = [geos getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoi)) isGeoNumeric] || ![geoi isChangeable]) {
      allSliders = NO;
      continue;
    }
  }
  if (allSliders) {
    return NO;
  }
  if (tempVec_ == nil) GeogebraCommonMainGlobalKeyDispatcher_setAndConsume_tempVec_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  jdouble xd = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAnimationStep] * xdiff;
  jdouble yd = [geo getAnimationStep] * ydiff;
  jdouble zd = [geo getAnimationStep] * zdiff;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(tempVec_)) setXWithDouble:xd];
  [tempVec_ setYWithDouble:yd];
  [tempVec_ setZWithDouble:zd];
  jboolean moved = GeogebraCommonKernelGeosGeoElement_moveObjectsWithJavaUtilArrayList_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonEuclidianEuclidianView_(geos, tempVec_, nil, nil, nil);
  if (!moved) {
    for (jint i = 0; i < [geos size]; i++) {
      geo = [geos getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isChangeable] && [geo isGeoBoolean]) {
        GeogebraCommonKernelGeosGeoBoolean *bool_ = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class]);
        [bool_ setValueWithBoolean:![bool_ getBoolean]];
        [bool_ updateCascade];
        moved = YES;
      }
    }
  }
  if (moved) [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) notifyRepaint];
  return moved;
}

- (jboolean)handleGeneralKeysWithGeogebraCommonMainKeyCodesEnum:(GeogebraCommonMainKeyCodesEnum *)key
                                                    withBoolean:(jboolean)isShiftDown
                                                    withBoolean:(jboolean)isControlDown
                                                    withBoolean:(jboolean)isAltDown
                                                    withBoolean:(jboolean)fromSpreadsheet
                                                    withBoolean:(jboolean)fromEuclidianView {
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfoIfSetCoordSystemOccured];
  jboolean consumed = NO;
  switch ([key ordinal]) {
    case GeogebraCommonMainKeyCodes_ESCAPE:
    if ([app_ isApplet] && ![app_ showToolBar]) {
      [app_ loseFocus];
    }
    else {
      [app_ setMoveMode];
      [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app_ getActiveEuclidianView])) getEuclidianController])) deletePastePreviewSelected];
    }
    consumed = YES;
    break;
    case GeogebraCommonMainKeyCodes_ENTER:
    if (!fromSpreadsheet) {
      consumed = [self handleEnter];
    }
    break;
    case GeogebraCommonMainKeyCodes_SPACE:
    if (!fromSpreadsheet) {
      JavaUtilArrayList *selGeos = [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos];
      if ([((JavaUtilArrayList *) nil_chk(selGeos)) size] == 1) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([selGeos getWithInt:0])) isGeoBoolean]) {
          GeogebraCommonKernelGeosGeoBoolean *geoBool = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast([selGeos getWithInt:0], [GeogebraCommonKernelGeosGeoBoolean class]);
          [geoBool setValueWithBoolean:![((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(geoBool)) getBoolean]];
          [geoBool updateRepaint];
        }
        else {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([selGeos getWithInt:0])) runClickScriptsWithNSString:nil];
        }
        consumed = YES;
      }
    }
    break;
    case GeogebraCommonMainKeyCodes_TAB:
    consumed = [self handleTabWithBoolean:isControlDown withBoolean:isShiftDown];
    break;
    case GeogebraCommonMainKeyCodes_F1:
    [((GeogebraCommonMainDialogManager *) nil_chk([app_ getDialogManager])) openToolHelp];
    return YES;
    case GeogebraCommonMainKeyCodes_F9:
    if (![app_ isApplet] || [app_ isRightClickEnabled]) {
      [((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) updateConstruction];
      [app_ setUnsaved];
      consumed = YES;
    }
    break;
  }
  if (isControlDown && !isAltDown) {
    switch ([key ordinal]) {
      case GeogebraCommonMainKeyCodes_K1:
      case GeogebraCommonMainKeyCodes_NUMPAD1:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN] withInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
        consumed = YES;
      }
      else if (!isAltDown) {
        GeogebraCommonMainGlobalKeyDispatcher_changeFontsAndGeoElementsWithGeogebraCommonMainApp_withInt_withBoolean_withBoolean_(app_, 12, NO, NO);
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_NUMPAD2:
      case GeogebraCommonMainKeyCodes_K2:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2] withInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        consumed = YES;
      }
      else if (!isAltDown) {
        jint fontSize = JavaLangMath_minWithInt_withInt_(32, [app_ getFontSize] + 4);
        GeogebraCommonMainGlobalKeyDispatcher_changeFontsAndGeoElementsWithGeogebraCommonMainApp_withInt_withBoolean_withBoolean_(app_, fontSize, NO, YES);
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_NUMPAD3:
      case GeogebraCommonMainKeyCodes_K3:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D] withInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
        consumed = YES;
      }
      else if (!isAltDown) {
        GeogebraCommonMainGlobalKeyDispatcher_changeFontsAndGeoElementsWithGeogebraCommonMainApp_withInt_withBoolean_withBoolean_(app_, [app_ getFontSize], YES, YES);
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_A:
      if (isShiftDown) {
        if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
          [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_ALGEBRA] withInt:GeogebraCommonMainApp_VIEW_ALGEBRA];
          consumed = YES;
        }
      }
      else {
        [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectAllWithInt:-1];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_K:
      if (isShiftDown) {
        if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
          [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_CAS] withInt:GeogebraCommonMainApp_VIEW_CAS];
          consumed = YES;
        }
      }
      break;
      case GeogebraCommonMainKeyCodes_L:
      if (isShiftDown) {
        if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
          [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL] withInt:GeogebraCommonMainApp_VIEW_CONSTRUCTION_PROTOCOL];
          consumed = YES;
        }
      }
      else {
        [selection_ selectAllWithInt:[((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedLayer]];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_O:
      if (!isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) openFile];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_P:
      if (isShiftDown) {
        if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
          [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR] withInt:GeogebraCommonMainApp_VIEW_PROBABILITY_CALCULATOR];
        }
      }
      else {
        [self showPrintPreviewWithGeogebraCommonMainApp:app_];
      }
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_T:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPSTricksExport];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_W:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showWebpageExport];
        consumed = YES;
      }
      else {
        [app_ exitAll];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_F4:
      if (!isShiftDown) {
        [app_ exitAll];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_I:
      if (!isShiftDown) {
        [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) invertSelection];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_C:
      if (isShiftDown) {
        [app_ copyGraphicsViewToClipboard];
        consumed = YES;
      }
      else {
        if (!fromSpreadsheet) {
          [self handleCtrlC];
        }
      }
      break;
      case GeogebraCommonMainKeyCodes_M:
      if (isShiftDown) {
        [app_ copyBase64ToClipboard];
      }
      else {
        [app_ setStandardView];
      }
      break;
      case GeogebraCommonMainKeyCodes_B:
      if (isShiftDown) {
        [app_ copyBase64ToClipboard];
      }
      break;
      case GeogebraCommonMainKeyCodes_G:
      case GeogebraCommonMainKeyCodes_H:
      if (isShiftDown) [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) showHideSelectionLabels];
      else [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) showHideSelection];
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_E:
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_PROPERTIES] withInt:GeogebraCommonMainApp_VIEW_PROPERTIES withBoolean:NO];
      }
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_F:
      [app_ refreshViews];
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_N:
      if (isShiftDown) {
        [self handleCtrlShiftNWithBoolean:isAltDown];
      }
      else {
        [app_ setWaitCursor];
        [self createNewWindow];
        [app_ setDefaultCursor];
      }
      break;
      case GeogebraCommonMainKeyCodes_Z:
      if ([app_ getGuiManager] != nil) {
        if (isShiftDown) [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) redo];
        else [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) undo];
      }
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_U:
      if (isShiftDown && [app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showGraphicExport];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_V:
      if (!(fromSpreadsheet)) {
        [self handleCtrlV];
      }
      break;
      case GeogebraCommonMainKeyCodes_R:
      if (![app_ isApplet] || [app_ isRightClickEnabled]) {
        [((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) updateConstruction];
        [app_ setUnsaved];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_S:
      if (isShiftDown) {
        if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil) {
          [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) setShowViewWithBoolean:![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showViewWithInt:GeogebraCommonMainApp_VIEW_SPREADSHEET] withInt:GeogebraCommonMainApp_VIEW_SPREADSHEET];
          consumed = YES;
        }
      }
      else if ([app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) save];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_Y:
      if (isShiftDown) {
      }
      else if ([app_ getGuiManager] != nil) {
        [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) redo];
        consumed = YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_J:
      case GeogebraCommonMainKeyCodes_Q:
      if (isShiftDown) [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectAllDescendants];
      else [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectAllPredecessors];
      consumed = YES;
      break;
      case GeogebraCommonMainKeyCodes_PLUS:
      case GeogebraCommonMainKeyCodes_ADD:
      case GeogebraCommonMainKeyCodes_SUBTRACT:
      case GeogebraCommonMainKeyCodes_MINUS:
      case GeogebraCommonMainKeyCodes_EQUALS:
      if (!GeogebraCommonEuclidianEuclidianView_isPenModeWithInt_([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app_ getActiveEuclidianView])) getMode])) {
        jboolean spanish = [((NSString *) nil_chk([((GeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getLanguage])) hasPrefix:@"es"];
        if (!spanish || !isAltDown || (fromEuclidianView)) {
          [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(([app_ getActiveEuclidianView]))) getEuclidianController])) zoomInOutWithBoolean:isAltDown withBoolean:[((GeogebraCommonMainKeyCodesEnum *) nil_chk(key)) isEqual:GeogebraCommonMainKeyCodesEnum_get_MINUS()] || [key isEqual:GeogebraCommonMainKeyCodesEnum_get_SUBTRACT()]];
          [app_ setUnsaved];
          consumed = YES;
        }
      }
      break;
      case GeogebraCommonMainKeyCodes_D:
      case GeogebraCommonMainKeyCodes_BACK_QUOTE:
      if (!isShiftDown) {
        GeogebraCommonKernelKernel *kernel = [app_ getKernel];
        [kernel setAlgebraStyleWithInt:([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getAlgebraStyle] + 1) % 3];
        [kernel updateConstruction];
        if ([app_ hasOptionsMenu]) {
          [((GeogebraCommonGuiMenubarOptionsMenu *) nil_chk([app_ getOptionsMenuWithGeogebraCommonGuiMenubarMenuFactory:nil])) updateMenuViewDescription];
        }
        [app_ setUnsaved];
        consumed = YES;
      }
      else {
        jboolean selectionAllowed = NO;
        JavaUtilTreeSet *objects = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app_ getKernel])) getConstruction])) getGeoSetConstructionOrder];
        id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(objects)) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          GeogebraCommonKernelGeosGeoElement *geo = [it next];
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed]) {
            selectionAllowed = YES;
            break;
          }
        }
        it = [objects iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          GeogebraCommonKernelGeosGeoElement *geo = [it next];
          if ([GeogebraCommonKernelGeosFurniture_class_() isInstance:geo] || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric] && [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isSlider]) || ([geo isGeoList] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) drawAsComboBox]) || [geo isGeoBoolean] || ([geo isGeoPoint] && ![geo isFixed])) {
            [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectionAllowedWithBoolean:YES];
          }
          else {
            [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectionAllowedWithBoolean:selectionAllowed];
          }
        }
      }
      break;
    }
  }
  return consumed;
}

- (void)createNewWindow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)showPrintPreviewWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)handleCtrlV {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  [((GeogebraCommonUtilCopyPaste *) nil_chk(GeogebraCommonUtilCopyPaste_get_INSTANCE_())) pasteFromXMLWithGeogebraCommonMainApp:app_ withBoolean:NO];
  [app_ setDefaultCursor];
}

- (jboolean)handleCtrlShiftNWithBoolean:(jboolean)isAltDown {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)handleCtrlC {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setWaitCursor];
  [((GeogebraCommonUtilCopyPaste *) nil_chk(GeogebraCommonUtilCopyPaste_get_INSTANCE_())) copyToXMLWithGeogebraCommonMainApp:app_ withJavaUtilArrayList:[((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos] withBoolean:NO];
  [app_ updateMenubar];
  [app_ setDefaultCursor];
}

- (jboolean)handleTabWithBoolean:(jboolean)isControlDown
                     withBoolean:(jboolean)isShiftDown {
  if (isShiftDown) {
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectLastGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:[((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView]];
  }
  else {
    [((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) selectNextGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:[((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView]];
  }
  return YES;
}

- (jboolean)handleEnter {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jboolean)changeFontsAndGeoElementsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                                       withInt:(jint)fontSize
                                                   withBoolean:(jboolean)blackWhiteMode
                                                   withBoolean:(jboolean)makeAxesBold {
  return GeogebraCommonMainGlobalKeyDispatcher_changeFontsAndGeoElementsWithGeogebraCommonMainApp_withInt_withBoolean_withBoolean_(app, fontSize, blackWhiteMode, makeAxesBold);
}

+ (jint)getPointSizeIncWithInt:(jint)oldFontSize
                       withInt:(jint)newFontSize {
  return GeogebraCommonMainGlobalKeyDispatcher_getPointSizeIncWithInt_withInt_(oldFontSize, newFontSize);
}

+ (void)setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                       withInt:(jint)lineThicknessIncr
                                                       withInt:(jint)pointSizeIncr
                                                       withInt:(jint)angleSizeIncr
                                                   withBoolean:(jboolean)blackWhiteMode {
  GeogebraCommonMainGlobalKeyDispatcher_setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_withInt_withBoolean_(geo, lineThicknessIncr, pointSizeIncr, angleSizeIncr, blackWhiteMode);
}

- (jboolean)handleSelectedGeosKeysWithGeogebraCommonMainKeyCodesEnum:(GeogebraCommonMainKeyCodesEnum *)key
                                               withJavaUtilArrayList:(JavaUtilArrayList *)geos
                                                         withBoolean:(jboolean)isShiftDown
                                                         withBoolean:(jboolean)isControlDown
                                                         withBoolean:(jboolean)isAltDown
                                                         withBoolean:(jboolean)fromSpreadsheet {
  jdouble changeValX = 0;
  jdouble changeValY = 0;
  jdouble changeValZ = 0;
  jdouble base = 1;
  if (isShiftDown) base = 0.1;
  if (isControlDown) base = 10;
  if (isAltDown) base = 100;
  if (geos == nil || [geos size] == 0) {
    id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
    jint width = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getWidth];
    jint height = [ev getHeight];
    if ([ev hasFocus] && [app_ isShiftDragZoomEnabled]) switch ([key ordinal]) {
      case GeogebraCommonMainKeyCodes_PAGEUP:
      [ev rememberOrigins];
      [ev pageUpDownTranslateCoordSystemWithInt:J2ObjCFpToInt((height * base))];
      return YES;
      case GeogebraCommonMainKeyCodes_PAGEDOWN:
      [ev rememberOrigins];
      [ev pageUpDownTranslateCoordSystemWithInt:-J2ObjCFpToInt((height * base))];
      return YES;
      case GeogebraCommonMainKeyCodes_INSERT:
      [ev rememberOrigins];
      [ev translateCoordSystemInPixelsWithInt:J2ObjCFpToInt((height * base)) withInt:0 withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
      return YES;
      case GeogebraCommonMainKeyCodes_HOME:
      [ev rememberOrigins];
      [ev translateCoordSystemInPixelsWithInt:-J2ObjCFpToInt((height * base)) withInt:0 withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
      return YES;
      case GeogebraCommonMainKeyCodes_DOWN:
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
        if (isShiftDown) {
          id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> view = [app_ getActiveEuclidianView];
          if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isLockedAxesRatio]) {
            [view setCoordSystemWithDouble:[view getXZero] withDouble:[view getYZero] withDouble:[view getXscale] withDouble:[view getYscale] * 0.9];
          }
        }
        else {
          [ev rememberOrigins];
          [ev translateCoordSystemInPixelsWithInt:0 withInt:J2ObjCFpToInt((height / 100.0 * base)) withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
        }
        return YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_UP:
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
        if (isShiftDown) {
          id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> view = [app_ getActiveEuclidianView];
          if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isLockedAxesRatio]) {
            [view setCoordSystemWithDouble:[view getXZero] withDouble:[view getYZero] withDouble:[view getXscale] withDouble:[view getYscale] / 0.9];
          }
        }
        else {
          [ev rememberOrigins];
          [ev translateCoordSystemInPixelsWithInt:0 withInt:-J2ObjCFpToInt((height / 100.0 * base)) withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
        }
        return YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_LEFT:
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
        if (isShiftDown) {
          id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> view = [app_ getActiveEuclidianView];
          if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isLockedAxesRatio]) {
            [view setCoordSystemWithDouble:[view getXZero] withDouble:[view getYZero] withDouble:[view getXscale] * 0.9 withDouble:[view getYscale]];
          }
        }
        else {
          [ev rememberOrigins];
          [ev translateCoordSystemInPixelsWithInt:-J2ObjCFpToInt((width / 100.0 * base)) withInt:0 withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
        }
        return YES;
      }
      break;
      case GeogebraCommonMainKeyCodes_RIGHT:
      if ([app_ isUsingFullGui] && [app_ getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
        if (isShiftDown) {
          id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> view = [app_ getActiveEuclidianView];
          if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(view)) isLockedAxesRatio]) {
            [view setCoordSystemWithDouble:[view getXZero] withDouble:[view getYZero] withDouble:[view getXscale] / 0.9 withDouble:[view getYscale]];
          }
        }
        else {
          [ev rememberOrigins];
          [ev translateCoordSystemInPixelsWithInt:J2ObjCFpToInt((width / 100.0 * base)) withInt:0 withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
        }
      }
      return YES;
    }
    return NO;
  }
  id<JavaUtilIterator> it;
  switch ([key ordinal]) {
    case GeogebraCommonMainKeyCodes_PAGEUP:
    if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) isEuclidianView3D]) {
      it = [((JavaUtilArrayList *) nil_chk(geos)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *geo = [it next];
        [geo setLayerWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] + 1];
      }
    }
    break;
    case GeogebraCommonMainKeyCodes_PAGEDOWN:
    if (![((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) isEuclidianView3D]) {
      it = [((JavaUtilArrayList *) nil_chk(geos)) iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoElement *geo = [it next];
        [geo setLayerWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] - 1];
      }
    }
    break;
    case GeogebraCommonMainKeyCodes_F3:
    if ([((JavaUtilArrayList *) nil_chk(geos)) size] == 1) [self handleFunctionKeyForAlgebraInputWithInt:3 withGeogebraCommonKernelGeosGeoElement:[geos getWithInt:0]];
    else {
      [self copyDefinitionsToInputBarAsListWithJavaUtilArrayList:geos];
      break;
    }
    return YES;
    case GeogebraCommonMainKeyCodes_F1:
    [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) openToolHelp];
    return YES;
    case GeogebraCommonMainKeyCodes_F4:
    [self handleFunctionKeyForAlgebraInputWithInt:4 withGeogebraCommonKernelGeosGeoElement:[((JavaUtilArrayList *) nil_chk(geos)) getWithInt:0]];
    return YES;
    case GeogebraCommonMainKeyCodes_F5:
    [self handleFunctionKeyForAlgebraInputWithInt:5 withGeogebraCommonKernelGeosGeoElement:[((JavaUtilArrayList *) nil_chk(geos)) getWithInt:0]];
    return YES;
    case GeogebraCommonMainKeyCodes_DELETE:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) hasSpreadsheetView] && [((id<GeogebraCommonKernelView>) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getSpreadsheetView])) hasFocus]) return NO;
    if (![app_ isApplet] || [app_ isRightClickEnabled]) {
      [app_ deleteSelectedObjects];
      return YES;
    }
    case GeogebraCommonMainKeyCodes_BACKSPACE:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [((id<GeogebraCommonKernelView>) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getSpreadsheetView])) hasFocus]) return NO;
    if (!isControlDown && (![app_ isApplet] || [app_ isRightClickEnabled])) {
      [app_ deleteSelectedObjects];
      return YES;
    }
    break;
  }
  if (fromSpreadsheet || ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) hasSpreadsheetView] && [((id<GeogebraCommonKernelView>) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getSpreadsheetView])) hasFocus])) {
    return NO;
  }
  jboolean moved = NO;
  switch ([key ordinal]) {
    case GeogebraCommonMainKeyCodes_UP:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [app_ isUsingFullGui] && ![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
      return NO;
    }
    changeValY = base;
    break;
    case GeogebraCommonMainKeyCodes_DOWN:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [app_ isUsingFullGui] && ![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
      return NO;
    }
    changeValY = -base;
    break;
    case GeogebraCommonMainKeyCodes_RIGHT:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [app_ isUsingFullGui] && ![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
      return NO;
    }
    changeValX = base;
    break;
    case GeogebraCommonMainKeyCodes_LEFT:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager] != nil && [app_ isUsingFullGui] && ![((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) noMenusOpen]) {
      return NO;
    }
    changeValX = -base;
    break;
    case GeogebraCommonMainKeyCodes_PAGEUP:
    changeValZ = base;
    break;
    case GeogebraCommonMainKeyCodes_PAGEDOWN:
    changeValZ = -base;
    break;
  }
  if (changeValX != 0 || changeValY != 0 || changeValZ != 0) {
    moved = [self handleArrowKeyMovementWithJavaUtilArrayList:geos withDouble:changeValX withDouble:changeValY withDouble:changeValZ];
  }
  if (moved) {
    return YES;
  }
  jboolean vertical = YES;
  jdouble changeVal = 0;
  switch ([key ordinal]) {
    case GeogebraCommonMainKeyCodes_F2:
    if ([((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui] && [app_ getGuiManager] != nil) {
      [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) startEditingWithGeogebraCommonKernelGeosGeoElement:[((JavaUtilArrayList *) nil_chk(geos)) getWithInt:0]];
      return YES;
    }
    break;
    case GeogebraCommonMainKeyCodes_PLUS:
    case GeogebraCommonMainKeyCodes_ADD:
    case GeogebraCommonMainKeyCodes_EQUALS:
    case GeogebraCommonMainKeyCodes_UP:
    changeVal = base;
    vertical = YES;
    break;
    case GeogebraCommonMainKeyCodes_RIGHT:
    changeVal = base;
    vertical = NO;
    break;
    case GeogebraCommonMainKeyCodes_MINUS:
    case GeogebraCommonMainKeyCodes_SUBTRACT:
    case GeogebraCommonMainKeyCodes_DOWN:
    changeVal = -base;
    vertical = YES;
    break;
    case GeogebraCommonMainKeyCodes_LEFT:
    changeVal = -base;
    vertical = NO;
    break;
  }
  GeogebraCommonMainApp_debugWithNSString_(@"not yet consumed");
  if (changeVal != 0) {
    GeogebraCommonMainApp_debugWithNSString_(@"consumed");
    jboolean twoSliders = [((JavaUtilArrayList *) nil_chk(geos)) size] == 2 && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:0])) isGeoNumeric] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:1])) isGeoNumeric];
    for (jint i = [geos size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isChangeable]) {
        if ([geo isGeoNumeric] && (!twoSliders || ((vertical && i == 0) || (!vertical && i == 1)))) {
          GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
          jdouble newValue = [num getValue] + changeVal * [num getAnimationStep];
          if ([num getAnimationStep] > GeogebraCommonKernelKernel_MIN_PRECISION) {
            if ([num isGeoAngle]) {
              [((GeogebraCommonMainApp *) nil_chk(app_)) getKernel];
              [app_ getKernel];
              newValue = GeogebraCommonKernelKernel_PI_180 * GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(newValue * GeogebraCommonKernelKernel_CONST_180_PI, 1 / [num getAnimationStep]);
            }
            else newValue = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_withDouble_(newValue, 1 / [num getAnimationStep]);
          }
          [num setValueWithDouble:newValue];
        }
        else if ([geo isGeoPoint] && ![geo isGeoElement3D]) {
          GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
          if ([p hasPath]) {
            [p addToPathParameterWithDouble:changeVal * [p getAnimationStep]];
          }
        }
      }
      else if (![geo isIndependent]) {
        if ([geo isLabelSet] && [geo isGeoNumeric]) {
          GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
          if ([num isRandomGeo]) {
            [num updateRandomGeo];
          }
        }
        [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) update];
      }
    }
    GeogebraCommonKernelGeosGeoElement_updateCascadeWithJavaUtilArrayList_withJavaUtilTreeSet_withBoolean_(geos, [self getTempSet], NO);
    [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) notifyRepaint];
    return YES;
  }
  return NO;
}

- (void)copyDefinitionsToInputBarAsListWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(selection_);
  RELEASE_(tempSet_);
  RELEASE_(tempVec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "GlobalKeyDispatcher", NULL, 0x1, NULL, NULL },
    { "handleFunctionKeyForAlgebraInputWithInt:withGeogebraCommonKernelGeosGeoElement:", "handleFunctionKeyForAlgebraInput", "V", 0x401, NULL, NULL },
    { "getTempSet", NULL, "Ljava.util.TreeSet;", 0x4, NULL, NULL },
    { "renameStartedWithChar:", "renameStarted", "Z", 0x4, NULL, NULL },
    { "handleArrowKeyMovementWithJavaUtilArrayList:withDouble:withDouble:withDouble:", "handleArrowKeyMovement", "Z", 0x4, NULL, NULL },
    { "handleGeneralKeysWithGeogebraCommonMainKeyCodesEnum:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "handleGeneralKeys", "Z", 0x4, NULL, NULL },
    { "createNewWindow", NULL, "V", 0x404, NULL, NULL },
    { "showPrintPreviewWithGeogebraCommonMainApp:", "showPrintPreview", "V", 0x404, NULL, NULL },
    { "handleCtrlV", NULL, "V", 0x4, NULL, NULL },
    { "handleCtrlShiftNWithBoolean:", "handleCtrlShiftN", "Z", 0x404, NULL, NULL },
    { "handleCtrlC", NULL, "V", 0x4, NULL, NULL },
    { "handleTabWithBoolean:withBoolean:", "handleTab", "Z", 0x4, NULL, NULL },
    { "handleEnter", NULL, "Z", 0x404, NULL, NULL },
    { "changeFontsAndGeoElementsWithGeogebraCommonMainApp:withInt:withBoolean:withBoolean:", "changeFontsAndGeoElements", "Z", 0x9, NULL, NULL },
    { "getPointSizeIncWithInt:withInt:", "getPointSizeInc", "I", 0xa, NULL, NULL },
    { "setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement:withInt:withInt:withInt:withBoolean:", "setGeoProperties", "V", 0xa, NULL, NULL },
    { "handleSelectedGeosKeysWithGeogebraCommonMainKeyCodesEnum:withJavaUtilArrayList:withBoolean:withBoolean:withBoolean:withBoolean:", "handleSelectedGeosKeys", "Z", 0x4, NULL, NULL },
    { "copyDefinitionsToInputBarAsListWithJavaUtilArrayList:", "copyDefinitionsToInputBarAsList", "V", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x14, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x14, "Lgeogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "tempSet_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "tempVec_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainGlobalKeyDispatcher = { 2, "GlobalKeyDispatcher", "geogebra.common.main", NULL, 0x401, 18, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainGlobalKeyDispatcher;
}

@end

void GeogebraCommonMainGlobalKeyDispatcher_initWithGeogebraCommonMainApp_(GeogebraCommonMainGlobalKeyDispatcher *self, GeogebraCommonMainApp *app2) {
  NSObject_init(self);
  GeogebraCommonMainGlobalKeyDispatcher_set_app_(self, app2);
  GeogebraCommonMainGlobalKeyDispatcher_set_selection_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getSelectionManager]);
}

jboolean GeogebraCommonMainGlobalKeyDispatcher_changeFontsAndGeoElementsWithGeogebraCommonMainApp_withInt_withBoolean_withBoolean_(GeogebraCommonMainApp *app, jint fontSize, jboolean blackWhiteMode, jboolean makeAxesBold) {
  GeogebraCommonMainGlobalKeyDispatcher_initialize();
  if ([((GeogebraCommonMainApp *) nil_chk(app)) isApplet]) return NO;
  [app setWaitCursor];
  for (jint ev = 1; ev <= 2; ev++) {
    GeogebraCommonMainSettingsEuclidianSettings *settings = [((GeogebraCommonMainSettingsSettings *) nil_chk([app getSettings])) getEuclidianWithInt:ev];
    jint style = [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(settings)) getAxesLineStyle];
    style = style | GeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD;
    if (!makeAxesBold) {
      style = style ^ GeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD;
    }
    [settings setAxesLineStyleWithInt:style];
  }
  jint oldFontSize = [app getFontSize];
  jint angleSizeIncr = fontSize - oldFontSize;
  jint incr = GeogebraCommonMainGlobalKeyDispatcher_getPointSizeIncWithInt_withInt_(oldFontSize, fontSize);
  GeogebraCommonKernelConstructionDefaults *cd = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getConstructionDefaults];
  [cd setDefaultLineThicknessWithInt:[((GeogebraCommonKernelConstructionDefaults *) nil_chk(cd)) getDefaultLineThickness] + incr];
  [cd setDefaultPointSizeWithInt:[cd getDefaultPointSize] + incr];
  [cd setDefaultAngleSizeWithInt:[cd getDefaultAngleSize] + angleSizeIncr];
  [cd setBlackWhiteModeWithBoolean:blackWhiteMode];
  [app setFontSizeWithInt:fontSize];
  if ([app isUsingFullGui] && [app getGuiManager] != nil) [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app getGuiManager])) updateSpreadsheetColumnWidths];
  id<JavaUtilIterator> it = nil;
  if ([((JavaUtilArrayList *) nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk([app getSelectionManager])) getSelectedGeos])) size] == 0) {
    it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getGeoSetConstructionOrder])) iterator];
  }
  else {
    it = [((JavaUtilArrayList *) nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk([app getSelectionManager])) getSelectedGeos])) iterator];
  }
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    GeogebraCommonMainGlobalKeyDispatcher_setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_withInt_withBoolean_(geo, incr, incr, angleSizeIncr, blackWhiteMode);
  }
  [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) updateConstruction];
  [app setUnsaved];
  [app storeUndoInfo];
  [app setDefaultCursor];
  return YES;
}

jint GeogebraCommonMainGlobalKeyDispatcher_getPointSizeIncWithInt_withInt_(jint oldFontSize, jint newFontSize) {
  GeogebraCommonMainGlobalKeyDispatcher_initialize();
  if (oldFontSize == newFontSize) return 0;
  jint step = newFontSize > oldFontSize ? 1 : -1;
  jint left = JavaLangMath_minWithInt_withInt_(oldFontSize, newFontSize);
  jint right = JavaLangMath_maxWithInt_withInt_(oldFontSize, newFontSize);
  IOSIntArray *borders = [IOSIntArray arrayWithInts:(jint[]){ 16, 22, 28 } count:3];
  jint incr = 0;
  for (jint i = 0; i < borders->size_; i++) {
    if (left < IOSIntArray_Get(borders, i) && IOSIntArray_Get(borders, i) <= right) {
      incr = incr + step;
    }
  }
  return incr * 2;
}

void GeogebraCommonMainGlobalKeyDispatcher_setGeoPropertiesWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_withInt_withBoolean_(GeogebraCommonKernelGeosGeoElement *geo, jint lineThicknessIncr, jint pointSizeIncr, jint angleSizeIncr, jboolean blackWhiteMode) {
  GeogebraCommonMainGlobalKeyDispatcher_initialize();
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] && ![geo isGeoImage] && ![geo isGeoPolygon]) {
    jint lineThickness = JavaLangMath_maxWithInt_withInt_(2, [geo getLineThickness] + lineThicknessIncr);
    [geo setLineThicknessWithInt:lineThickness];
  }
  if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
    id<GeogebraCommonKernelGeosPointProperties> p = (id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties));
    jint pointSize = JavaLangMath_maxWithInt_withInt_(2, [p getPointSize] + pointSizeIncr);
    [p setPointSizeWithInt:pointSize];
  }
  if ([geo isGeoAngle]) {
    GeogebraCommonKernelGeosGeoAngle *angle = (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class]);
    jint angleSize = JavaLangMath_maxWithInt_withInt_(2, [angle getArcSize] + angleSizeIncr);
    [angle setArcSizeWithInt:angleSize];
  }
  if (blackWhiteMode) {
    [geo setAlphaValueWithFloat:0.0f];
    [geo setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_black_()];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainGlobalKeyDispatcher)
