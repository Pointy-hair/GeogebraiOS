//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/TextOptionsModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/TextOptionsModel.h"
#include "geogebra/common/gui/inputfield/DynamicTextProcessor.h"
#include "geogebra/common/kernel/algos/AlgoDependentText.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/TextProperties.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGuiDialogOptionsModelTextOptionsModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener_;
  jboolean justDisplayFontSize_;
  IOSObjectArray *fonts_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonMainLocalization *loc_;
  GeogebraCommonGuiInputfieldDynamicTextProcessor *dTProcessor_;
  GeogebraCommonKernelGeosGeoText *editGeo_;
  GeogebraCommonKernelGeosGeoText *lastGeo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, listener_, id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, fonts_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, loc_, GeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, dTProcessor_, GeogebraCommonGuiInputfieldDynamicTextProcessor *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, editGeo_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelTextOptionsModel, lastGeo_, GeogebraCommonKernelGeosGeoText *)

@interface GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelTextOptionsModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener:(id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>)listener {
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(self, app, listener);
  return self;
}

- (jboolean)checkGeos {
  if (![self hasGeos]) {
    return NO;
  }
  jboolean geosOK = YES;
  justDisplayFontSize_ = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo] && ![((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties))))) justFontSize]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoButton]) {
      justDisplayFontSize_ = NO;
    }
    if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoElementForPropertiesDialog])) isGeoText])) {
      if (![geo isGeoButton]) {
        geosOK = NO;
        break;
      }
    }
  }
  return geosOK;
}

- (id<GeogebraCommonKernelGeosTextProperties>)getTextPropertiesAtWithInt:(jint)index {
  return (id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast([self getObjectAtWithInt:index], @protocol(GeogebraCommonKernelGeosTextProperties));
}

- (GeogebraCommonKernelGeosGeoText *)getGeoTextAtWithInt:(jint)index {
  id ret = [self getObjectAtWithInt:index];
  if ([ret isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) {
    return (GeogebraCommonKernelGeosGeoText *) check_class_cast(ret, [GeogebraCommonKernelGeosGeoText class]);
  }
  return nil;
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoTextField]) {
    [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) setFontSizeVisibleOnly];
  }
  else {
    [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) setWidgetsVisibleWithBoolean:!justDisplayFontSize_ withBoolean:[geo isGeoButton]];
  }
  id<GeogebraCommonKernelGeosTextProperties> geo0 = [self getTextPropertiesAtWithInt:0];
  [self setEditGeoWithGeogebraCommonKernelGeosGeoText:[self getGeoTextAtWithInt:0]];
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) selectSizeWithInt:GeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_([((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(geo0)) getFontSizeMultiplier])];
  [listener_ selectFontWithInt:[geo0 isSerifFont] ? 1 : 0];
  jint selItem = -1;
  jint decimals = [geo0 getPrintDecimals];
  if (decimals > 0 && decimals < ((IOSIntArray *) nil_chk(GeogebraCommonMainApp_get_decimalsLookup_()))->size_ && ![geo0 useSignificantFigures]) selItem = IOSIntArray_Get(GeogebraCommonMainApp_get_decimalsLookup_(), decimals);
  jint figures = [geo0 getPrintFigures];
  if (figures > 0 && figures < ((IOSIntArray *) nil_chk(GeogebraCommonMainApp_get_figuresLookup_()))->size_ && [geo0 useSignificantFigures]) selItem = IOSIntArray_Get(GeogebraCommonMainApp_get_figuresLookup_(), figures);
  [listener_ selectDecimalPlacesWithInt:selItem];
  [listener_ setSecondLineVisibleWithBoolean:([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:0])) isIndependent] || ([geo0 isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]))];
  if ([geo isGeoTextField]) {
    [listener_ setFontSizeVisibleOnly];
  }
  GeogebraCommonKernelGeosGeoText *text0 = [self getGeoTextAtWithInt:0];
  if (text0 != nil) {
    if ([[text0 getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentText class]]) {
      [listener_ setEditorTextWithJavaUtilArrayList:[((GeogebraCommonGuiInputfieldDynamicTextProcessor *) nil_chk(dTProcessor_)) buildDynamicTextListWithGeogebraCommonKernelGeosGeoText:text0]];
    }
    else {
      [listener_ setEditorTextWithNSString:[text0 getTextString]];
    }
  }
  [listener_ selectFontStyleWithInt:[geo0 getFontStyle]];
}

- (void)applyFontSizeFromStringWithNSString:(NSString *)percentStr {
  jdouble multiplier;
  if (percentStr == nil) {
    return;
  }
  percentStr = [((NSString *) nil_chk(percentStr)) replaceAll:@"%" withReplacement:@""];
  @try {
    multiplier = GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(percentStr) / 100;
    if (multiplier < 0.01) {
      multiplier = 0.01;
    }
    else if (multiplier > 100) {
      multiplier = 100;
    }
  }
  @catch (JavaLangNumberFormatException *e2) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:@"InvalidInput"];
    return;
  }
  [self applyFontSizeWithDouble:multiplier];
}

- (void)applyFontSizeFromIndexWithInt:(jint)index {
  [self applyFontSizeWithDouble:GeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(index)];
}

- (void)applyFontSizeWithDouble:(jdouble)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<GeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:value];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) updateVisualStyleRepaint];
  }
  if (editGeo_ == nil) {
    return;
  }
  [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk((editGeo_))) setFontSizeMultiplierWithDouble:value];
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (IOSObjectArray *)getFonts {
  return fonts_;
}

- (IOSObjectArray *)getFontSizes {
  return [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getFontSizeStrings];
}

- (void)applyFontWithBoolean:(jboolean)isSerif {
  if (editGeo_ == nil) {
    return;
  }
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<GeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setSerifFontWithBoolean:isSerif];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:i])) updateVisualStyleRepaint];
  }
  [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk((editGeo_))) setSerifFontWithBoolean:isSerif];
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (void)applyDecimalPlacesWithInt:(jint)decimals {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<GeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    if (decimals < 8) {
      [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintDecimalsWithInt:IOSIntArray_Get(nil_chk(GeogebraCommonMainApp_get_roundingMenuLookup_()), decimals) withBoolean:YES];
    }
    else {
      [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setPrintFiguresWithInt:IOSIntArray_Get(nil_chk(GeogebraCommonMainApp_get_roundingMenuLookup_()), decimals) withBoolean:YES];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(text, [GeogebraCommonKernelGeosGeoElement class])))) updateRepaint];
  }
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

+ (jint)getFontStyleWithBoolean:(jboolean)isBold
                    withBoolean:(jboolean)isItalic {
  return GeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(isBold, isItalic);
}

- (void)applyFontStyleWithBoolean:(jboolean)isBold
                      withBoolean:(jboolean)isItalic {
  jint style = GeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(isBold, isItalic);
  for (jint i = 0; i < [self getGeosLength]; i++) {
    id<GeogebraCommonKernelGeosTextProperties> text = [self getTextPropertiesAtWithInt:i];
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontStyleWithInt:style];
    [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(text, [GeogebraCommonKernelGeosGeoElement class])) updateVisualStyleRepaint];
  }
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (NSString *)getGeoGebraStringWithJavaUtilArrayList:(JavaUtilArrayList *)list
                                         withBoolean:(jboolean)isLatex {
  return [((GeogebraCommonGuiInputfieldDynamicTextProcessor *) nil_chk(dTProcessor_)) buildGeoGebraStringWithJavaUtilArrayList:list withBoolean:isLatex];
}

- (GeogebraCommonKernelGeosGeoText *)getEditGeo {
  return editGeo_;
}

- (void)setEditGeoWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)editGeo {
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_editGeo_(self, editGeo);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_lastGeo_(self, editGeo);
}

- (void)setEditGeoTextWithNSString:(NSString *)text {
  if (editGeo_ == nil) {
    return;
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(editGeo_)) setTextStringWithNSString:text];
}

- (void)applyEditedGeoWithNSString:(NSString *)text
                       withBoolean:(jboolean)isLatex {
  GeogebraCommonKernelGeosGeoText *geo0 = [self getGeoTextAtWithInt:0];
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(geo0)) setTextStringWithNSString:text];
  [geo0 setLaTeXWithBoolean:isLatex withBoolean:YES];
  [geo0 updateRepaint];
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_editGeo_(self, nil);
}

- (void)cancelEditGeo {
  if (editGeo_ == nil) {
    return;
  }
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_editGeo_(self, nil);
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (void)setLaTeXWithBoolean:(jboolean)isLatex
                withBoolean:(jboolean)updateAlgo {
  if (editGeo_ == nil) {
    return;
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(editGeo_)) setLaTeXWithBoolean:isLatex withBoolean:updateAlgo];
  [((id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener>) nil_chk(listener_)) updatePreview];
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (jboolean)isTextEditable {
  return [self getGeosLength] == 1 && [[self getObjectAtWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoText class]] && ![((GeogebraCommonKernelGeosGeoText *) nil_chk([self getGeoTextAtWithInt:0])) isTextCommand] && ![((GeogebraCommonKernelGeosGeoText *) nil_chk([self getGeoTextAtWithInt:0])) isFixed];
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(fonts_);
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(dTProcessor_);
  RELEASE_(editGeo_);
  RELEASE_(lastGeo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener:", "TextOptionsModel", NULL, 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "getTextPropertiesAtWithInt:", "getTextPropertiesAt", "Lgeogebra.common.kernel.geos.TextProperties;", 0x1, NULL, NULL },
    { "getGeoTextAtWithInt:", "getGeoTextAt", "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyFontSizeFromStringWithNSString:", "applyFontSizeFromString", "V", 0x1, NULL, NULL },
    { "applyFontSizeFromIndexWithInt:", "applyFontSizeFromIndex", "V", 0x1, NULL, NULL },
    { "applyFontSizeWithDouble:", "applyFontSize", "V", 0x1, NULL, NULL },
    { "getFonts", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFontSizes", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "applyFontWithBoolean:", "applyFont", "V", 0x1, NULL, NULL },
    { "applyDecimalPlacesWithInt:", "applyDecimalPlaces", "V", 0x1, NULL, NULL },
    { "getFontStyleWithBoolean:withBoolean:", "getFontStyle", "I", 0x9, NULL, NULL },
    { "applyFontStyleWithBoolean:withBoolean:", "applyFontStyle", "V", 0x1, NULL, NULL },
    { "getGeoGebraStringWithJavaUtilArrayList:withBoolean:", "getGeoGebraString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getEditGeo", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "setEditGeoWithGeogebraCommonKernelGeosGeoText:", "setEditGeo", "V", 0x1, NULL, NULL },
    { "setEditGeoTextWithNSString:", "setEditGeoText", "V", 0x1, NULL, NULL },
    { "applyEditedGeoWithNSString:withBoolean:", "applyEditedGeo", "V", 0x1, NULL, NULL },
    { "cancelEditGeo", NULL, "V", 0x1, NULL, NULL },
    { "setLaTeXWithBoolean:withBoolean:", "setLaTeX", "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "isTextEditable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.TextOptionsModel$ITextOptionsListener;", NULL, NULL,  },
    { "justDisplayFontSize_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fonts_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "dTProcessor_", NULL, 0x2, "Lgeogebra.common.gui.inputfield.DynamicTextProcessor;", NULL, NULL,  },
    { "editGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "lastGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.TextOptionsModel$ITextOptionsListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelTextOptionsModel = { 2, "TextOptionsModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 23, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelTextOptionsModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(GeogebraCommonGuiDialogOptionsModelTextOptionsModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_setAndConsume_fonts_(self, [IOSObjectArray newArrayWithObjects:(id[]){ @"Sans Serif", @"Serif" } count:2 type:NSString_class_()]);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_listener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_app_(self, app);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getLocalization]);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_setAndConsume_dTProcessor_(self, new_GeogebraCommonGuiInputfieldDynamicTextProcessor_initWithGeogebraCommonMainApp_(app));
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_editGeo_(self, nil);
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_set_lastGeo_(self, nil);
}

GeogebraCommonGuiDialogOptionsModelTextOptionsModel *new_GeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener> listener) {
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel *self = [GeogebraCommonGuiDialogOptionsModelTextOptionsModel alloc];
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener_(self, app, listener);
  return self;
}

jint GeogebraCommonGuiDialogOptionsModelTextOptionsModel_getFontStyleWithBoolean_withBoolean_(jboolean isBold, jboolean isItalic) {
  GeogebraCommonGuiDialogOptionsModelTextOptionsModel_initialize();
  jint style = 0;
  if (isBold) style += 1;
  if (isItalic) style += 2;
  return style;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelTextOptionsModel)

@implementation GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setWidgetsVisibleWithBoolean:withBoolean:", "setWidgetsVisible", "V", 0x401, NULL, NULL },
    { "setFontSizeVisibleOnly", NULL, "V", 0x401, NULL, NULL },
    { "selectSizeWithInt:", "selectSize", "V", 0x401, NULL, NULL },
    { "selectFontWithInt:", "selectFont", "V", 0x401, NULL, NULL },
    { "selectDecimalPlacesWithInt:", "selectDecimalPlaces", "V", 0x401, NULL, NULL },
    { "setSecondLineVisibleWithBoolean:", "setSecondLineVisible", "V", 0x401, NULL, NULL },
    { "selectFontStyleWithInt:", "selectFontStyle", "V", 0x401, NULL, NULL },
    { "setEditorTextWithJavaUtilArrayList:", "setEditorText", "V", 0x401, NULL, NULL },
    { "setEditorTextWithNSString:", "setEditorText", "V", 0x401, NULL, NULL },
    { "updatePreview", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener = { 2, "ITextOptionsListener", "geogebra.common.gui.dialog.options.model", "TextOptionsModel", 0x609, 10, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelTextOptionsModel_ITextOptionsListener)
