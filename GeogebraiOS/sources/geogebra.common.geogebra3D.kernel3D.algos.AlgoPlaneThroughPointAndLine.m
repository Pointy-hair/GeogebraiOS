//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPointAndLine.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine, line_, id<GeogebraCommonKernelKernelNDGeoLineND>)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_compute(self);
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line_, [GeogebraCommonKernelGeosGeoElement class]);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PlaneThroughAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoPlaneThroughPointAndLine", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "line_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine = { 2, "AlgoPlaneThroughPointAndLine", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_set_line_(self, line);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getPlane] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_compute(self);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine *self) {
  GeogebraCommonKernelMatrixCoordSys *coordsys = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) getCoordSys];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) resetCoordSys];
  GeogebraCommonKernelMatrixCoords *cA = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *cB = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(self->line_)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *cC = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self->line_ getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:cA];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:cB];
  [coordsys addPointWithGeogebraCommonKernelMatrixCoords:cC];
  if ([coordsys makeOrthoMatrixWithBoolean:YES withBoolean:NO]) {
    [coordsys setEquationVectorWithGeogebraCommonKernelMatrixCoords:cA withGeogebraCommonKernelMatrixCoords:cB withGeogebraCommonKernelMatrixCoords:cC];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPointAndLine)
