//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLastString.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoFirstString.h"
#include "geogebra/common/kernel/algos/AlgoLastString.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"

@implementation GeogebraCommonKernelAlgosAlgoLastString

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)inputText
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAlgosAlgoLastString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputText, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Last();
}

- (void)compute {
  NSString *str = [((GeogebraCommonKernelGeosGeoText *) nil_chk(inputText_)) getTextString];
  if (str == nil) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(outputText_)) setUndefined];
    return;
  }
  size_ = ((jint) [((NSString *) nil_chk(str)) length]);
  jint outsize = n_ == nil ? 1 : J2ObjCFpToInt([n_ getDouble]);
  if (![inputText_ isDefined] || size_ == 0 || outsize < 0 || outsize > size_) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(outputText_)) setUndefined];
    return;
  }
  if (outsize == 0) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(outputText_)) setTextStringWithNSString:@""];
  }
  else {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(outputText_)) setTextStringWithNSString:[str substring:size_ - outsize]];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoLastString", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLastString = { 2, "AlgoLastString", "geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoLastString;
}

@end

void GeogebraCommonKernelAlgosAlgoLastString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoLastString *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *inputText, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoFirstString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputText, n);
}

GeogebraCommonKernelAlgosAlgoLastString *new_GeogebraCommonKernelAlgosAlgoLastString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *inputText, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoLastString *self = [GeogebraCommonKernelAlgosAlgoLastString alloc];
  GeogebraCommonKernelAlgosAlgoLastString_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputText, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLastString)
