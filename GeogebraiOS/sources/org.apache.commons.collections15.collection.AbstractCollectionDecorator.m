//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/collection/AbstractCollectionDecorator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/collections15/collection/AbstractCollectionDecorator.h"

@implementation OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator

- (instancetype)init {
  OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator_init(self);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator_initWithJavaUtilCollection_(self, coll);
  return self;
}

- (id<JavaUtilCollection>)getCollection {
  return collection_;
}

- (jboolean)addWithId:(id)object {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) addWithId:object];
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) addAllWithJavaUtilCollection:coll];
}

- (void)clear {
  [((id<JavaUtilCollection>) nil_chk(collection_)) clear];
}

- (jboolean)containsWithId:(id)object {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) containsWithId:object];
}

- (jboolean)isEmpty {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) isEmpty];
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) iterator];
}

- (jboolean)removeWithId:(id)object {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) removeWithId:object];
}

- (jint)size {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) size];
}

- (IOSObjectArray *)toArray {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) toArray];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)object {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) toArrayWithNSObjectArray:object];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) containsAllWithJavaUtilCollection:coll];
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) removeAllWithJavaUtilCollection:coll];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)coll {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) retainAllWithJavaUtilCollection:coll];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  return [((id<JavaUtilCollection>) nil_chk(collection_)) isEqual:object];
}

- (NSUInteger)hash {
  return ((jint) [((id<JavaUtilCollection>) nil_chk(collection_)) hash]);
}

- (NSString *)description {
  return [((id<JavaUtilCollection>) nil_chk(collection_)) description];
}

- (void)dealloc {
  RELEASE_(collection_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractCollectionDecorator", NULL, 0x4, NULL, NULL },
    { "initWithJavaUtilCollection:", "AbstractCollectionDecorator", NULL, 0x4, NULL, NULL },
    { "getCollection", NULL, "Ljava.util.Collection;", 0x4, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, "(TE;)Z" },
    { "addAllWithJavaUtilCollection:", "addAll", "Z", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "containsWithId:", "contains", "Z", 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "removeWithId:", "remove", "Z", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "toArray", NULL, "[Ljava.lang.Object;", 0x1, NULL, NULL },
    { "toArrayWithNSObjectArray:", "toArray", "[Ljava.lang.Object;", 0x1, NULL, "<T:Ljava/lang/Object;>([TT;)[TT;" },
    { "containsAllWithJavaUtilCollection:", "containsAll", "Z", 0x1, NULL, NULL },
    { "removeAllWithJavaUtilCollection:", "removeAll", "Z", 0x1, NULL, NULL },
    { "retainAllWithJavaUtilCollection:", "retainAll", "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "collection_", NULL, 0x4, "Ljava.util.Collection;", NULL, "Ljava/util/Collection<TE;>;",  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator = { 2, "AbstractCollectionDecorator", "org.apache.commons.collections15.collection", NULL, 0x401, 19, methods, 1, fields, 0, NULL, 0, NULL, NULL, "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Collection<TE;>;" };
  return &_OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator;
}

@end

void OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator_init(OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator *self) {
  NSObject_init(self);
}

void OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator_initWithJavaUtilCollection_(OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator *self, id<JavaUtilCollection> coll) {
  NSObject_init(self);
  if (coll == nil) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Collection must not be null") autorelease];
  }
  OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator_set_collection_(self, coll);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15CollectionAbstractCollectionDecorator)
