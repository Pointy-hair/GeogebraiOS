//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationIntersectLinesRestriction.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLines.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/locusequ/EquationElement.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationRestriction.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/elements/EquationIntersectLinesRestriction.h"

@implementation GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
           withGeogebraCommonKernelAlgosAlgoIntersectLines:(GeogebraCommonKernelAlgosAlgoIntersectLines *)algo
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLines_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoIntersectLines *)getAlgo {
  return (GeogebraCommonKernelAlgosAlgoIntersectLines *) check_class_cast([super getAlgo], [GeogebraCommonKernelAlgosAlgoIntersectLines class]);
}

- (GeogebraCommonKernelLocusequEquationList *)forPointImplWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  GeogebraCommonKernelLocusequEquationList *list = [new_GeogebraCommonKernelLocusequEquationList_initWithInt_(2) autorelease];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationElement *) nil_chk([((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLines *) nil_chk([self getAlgo])) getg]])) forPointWithGeogebraCommonKernelLocusequEquationPoint:p]];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationElement *) nil_chk([((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLines *) nil_chk([self getAlgo])) geth]])) forPointWithGeogebraCommonKernelLocusequEquationPoint:p]];
  return list;
}

- (jboolean)isAlgebraic {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosAlgoIntersectLines:withGeogebraCommonKernelLocusequEquationScope:", "EquationIntersectLinesRestriction", NULL, 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoIntersectLines;", 0x1, NULL, NULL },
    { "forPointImplWithGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x4, NULL, NULL },
    { "isAlgebraic", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction = { 2, "EquationIntersectLinesRestriction", "geogebra.common.kernel.locusequ.elements", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction;
}

@end

void GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLines_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectLines *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
}

GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction *new_GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLines_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectLines *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction *self = [GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction alloc];
  GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectLines_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationIntersectLinesRestriction)
