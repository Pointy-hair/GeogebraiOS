//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoUnique.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoUnique.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/FrequencyGgb.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Comparable.h"
#include "java/util/Iterator.h"
#include "org/apache/commons/math/stat/Frequency.h"

@interface GeogebraCommonKernelAdvancedAlgoUnique () {
 @public
  GeogebraCommonKernelGeosGeoList *dataList_;
  GeogebraCommonKernelGeosGeoList *uniqueList_;
  OrgApacheCommonsMathStatFrequency *f_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoUnique, dataList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoUnique, uniqueList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoUnique, f_, OrgApacheCommonsMathStatFrequency *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoUnique_compute(GeogebraCommonKernelAdvancedAlgoUnique *self);

@implementation GeogebraCommonKernelAdvancedAlgoUnique

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, dataList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, dataList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Unique();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(uniqueList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList_)) getTypeStringForXML]];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, dataList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:uniqueList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return uniqueList_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoUnique_compute(self);
}

- (void)dealloc {
  RELEASE_(dataList_);
  RELEASE_(uniqueList_);
  RELEASE_(f_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoUnique", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoUnique", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "uniqueList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lorg.apache.commons.math.stat.Frequency;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoUnique = { 2, "AlgoUnique", "geogebra.common.kernel.advanced", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoUnique;
}

@end

void GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoUnique *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, dataList);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->uniqueList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoUnique *new_GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelAdvancedAlgoUnique *self = [GeogebraCommonKernelAdvancedAlgoUnique alloc];
  GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, dataList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoUnique *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoUnique_set_dataList_(self, dataList);
  GeogebraCommonKernelAdvancedAlgoUnique_setAndConsume_uniqueList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoUnique_compute(self);
}

GeogebraCommonKernelAdvancedAlgoUnique *new_GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelAdvancedAlgoUnique *self = [GeogebraCommonKernelAdvancedAlgoUnique alloc];
  GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, dataList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoUnique_compute(GeogebraCommonKernelAdvancedAlgoUnique *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) isDefined] || [self->dataList_ size] == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->uniqueList_)) setUndefined];
    return;
  }
  if (!([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()] || [((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->uniqueList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->uniqueList_)) setDefinedWithBoolean:YES];
  [self->uniqueList_ clear];
  if (self->f_ == nil) GeogebraCommonKernelAdvancedAlgoUnique_setAndConsume_f_(self, new_GeogebraCommonKernelStatisticsFrequencyGgb_init());
  [((OrgApacheCommonsMathStatFrequency *) nil_chk(self->f_)) clear];
  for (jint i = 0; i < [self->dataList_ size]; i++) {
    if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()]) [self->f_ addValueWithJavaLangComparable:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) [self->f_ addValueWithJavaLangComparable:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]) autorelease]];
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()]) {
    id<JavaUtilIterator> itr = [self->f_ valuesIterator];
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      NSString *s = (NSString *) check_class_cast([itr next], [NSString class]);
      GeogebraCommonKernelGeosGeoText *text = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      [text setTextStringWithNSString:s];
      [self->uniqueList_ addWithGeogebraCommonKernelGeosGeoElement:text];
    }
  }
  else {
    id<JavaUtilIterator> itr = [self->f_ valuesIterator];
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      GeogebraCommonKernelArithmeticMyDouble *n = (GeogebraCommonKernelArithmeticMyDouble *) check_class_cast([itr next], [GeogebraCommonKernelArithmeticMyDouble class]);
      [self->uniqueList_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(n)) getDouble]) autorelease]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoUnique)
