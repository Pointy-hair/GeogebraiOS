//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/advanced/CmdIntersectPath.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D ()

+ (GeogebraCommonKernelGeosGeoElement *)intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelA
                                                                                      withNSString:(NSString *)label
                                                        withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                       withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)quadric;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoElement *GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonKernelKernel *kernelA, NSString *label, id<GeogebraCommonKernelKernelNDGeoPlaneND> plane, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric);

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  {
    GeogebraCommonKernelGeosGeoElement *ret;
    switch (n) {
      case 2:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D]) return [super processWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) {
        IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelGeosGeoSurfaceFinite:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
        return ret;
      }
      else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine]))) {
        IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelGeosGeoSurfaceFinite:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class])];
        return ret;
      }
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPolygon class])];
      else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPathWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class])];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolyhedron]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
      else if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolyhedron]))) return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectRegionWithNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]) withIntArray:[c getOutputSizes]];
      if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) IntersectPlanesWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      ret = GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(kernelA_, c, arg, ok);
      if (ret != nil) {
        return [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
      default:
      return [super processWithGeogebraCommonKernelArithmeticCommand:c];
    }
  }
}

+ (GeogebraCommonKernelGeosGeoElement *)processQuadricPlaneWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelA
                                                withGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                              withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                                         withBooleanArray:(IOSBooleanArray *)ok {
  return GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(kernelA, c, arg, ok);
}

+ (GeogebraCommonKernelGeosGeoElement *)intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernelA
                                                                                      withNSString:(NSString *)label
                                                        withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>)plane
                                       withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)quadric {
  return GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, label, plane, quadric);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdIntersectPath3D", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "processQuadricPlaneWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "processQuadricPlane", "Lgeogebra.common.kernel.geos.GeoElement;", 0x19, NULL, NULL },
    { "intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel:withNSString:withGeogebraCommonKernelKernelNDGeoPlaneND:withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:", "intersectPlaneQuadricLimited", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1a, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D = { 2, "CmdIntersectPath3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdIntersectPath_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_processQuadricPlaneWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoElementArray_withBooleanArray_(GeogebraCommonKernelKernel *kernelA, GeogebraCommonKernelArithmeticCommand *c, IOSObjectArray *arg, IOSBooleanArray *ok) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initialize();
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)])) && (*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]))) {
    return GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)), (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]));
  }
  else if ((*IOSBooleanArray_GetRef(ok, 0) = ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]])) && (*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
    return GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(kernelA, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)), (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]));
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]]))) {
    GeogebraCommonKernelGeosGeoElement *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelKernelNDGeoQuadricND class])];
    return ret;
  }
  else if (([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelKernelNDGeoQuadricND class]]) && ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:IOSObjectArray_Get(arg, 1)])) {
    GeogebraCommonKernelGeosGeoElement *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPlaneND)) withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoQuadricND class])];
    return ret;
  }
  return nil;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_intersectPlaneQuadricLimitedWithGeogebraCommonKernelKernel_withNSString_withGeogebraCommonKernelKernelNDGeoPlaneND_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonKernelKernel *kernelA, NSString *label, id<GeogebraCommonKernelKernelNDGeoPlaneND> plane, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initialize();
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA)) getManager3D])) IntersectQuadricLimitedWithNSString:label withGeogebraCommonKernelKernelNDGeoPlaneND:plane withGeogebraCommonKernelKernelNDGeoQuadricND:quadric];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D)
