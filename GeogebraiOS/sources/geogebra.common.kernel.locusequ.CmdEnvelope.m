//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/CmdEnvelope.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/locusequ/AlgoEnvelope.h"
#include "geogebra/common/kernel/locusequ/CmdEnvelope.h"
#include "geogebra/common/main/MyError.h"

__attribute__((unused)) static GeogebraCommonKernelImplicitGeoImplicitPoly *GeogebraCommonKernelLocusequCmdEnvelope_EnvelopeWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequCmdEnvelope *self, NSString *label, GeogebraCommonKernelGeosGeoElement *linear, GeogebraCommonKernelGeosGeoPoint *movingPoint);

@implementation GeogebraCommonKernelLocusequCmdEnvelope

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelLocusequCmdEnvelope_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  GeogebraCommonKernelGeosGeoPoint *movingPoint;
  GeogebraCommonKernelGeosGeoElement *linear;
  switch (n) {
    case 2:
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoElement])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint]))) {
      linear = IOSObjectArray_Get(arg, 0);
      movingPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPoint class]);
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    }
    break;
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelLocusequCmdEnvelope_EnvelopeWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], linear, movingPoint) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)EnvelopeWithNSString:(NSString *)label
                               withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)linear
                                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint {
  return GeogebraCommonKernelLocusequCmdEnvelope_EnvelopeWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_(self, label, linear, movingPoint);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdEnvelope", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "EnvelopeWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoPoint:", "Envelope", "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequCmdEnvelope = { 2, "CmdEnvelope", "geogebra.common.kernel.locusequ", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequCmdEnvelope;
}

@end

void GeogebraCommonKernelLocusequCmdEnvelope_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelLocusequCmdEnvelope *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelLocusequCmdEnvelope *new_GeogebraCommonKernelLocusequCmdEnvelope_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelLocusequCmdEnvelope *self = [GeogebraCommonKernelLocusequCmdEnvelope alloc];
  GeogebraCommonKernelLocusequCmdEnvelope_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelImplicitGeoImplicitPoly *GeogebraCommonKernelLocusequCmdEnvelope_EnvelopeWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequCmdEnvelope *self, NSString *label, GeogebraCommonKernelGeosGeoElement *linear, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(movingPoint)) getPath] == nil || ![movingPoint isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:linear]) return nil;
  GeogebraCommonKernelLocusequAlgoEnvelope *algo = [new_GeogebraCommonKernelLocusequAlgoEnvelope_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoPoint_(self->cons_, linear, movingPoint) autorelease];
  GeogebraCommonKernelImplicitGeoImplicitPoly *poly = [algo getPoly];
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(poly)) setLabelWithNSString:label];
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequCmdEnvelope)
