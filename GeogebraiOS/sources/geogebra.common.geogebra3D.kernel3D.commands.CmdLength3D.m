//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdLength3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLengthPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdLength3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/commands/CmdLength.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)lengthWithNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  if ([((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) LengthWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v];
  }
  return [super lengthWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v];
}

- (GeogebraCommonKernelGeosGeoElement *)lengthWithNSString:(NSString *)label
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthPoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLengthPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, label, p) autorelease];
  return [algo getLength];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdLength3D", NULL, 0x1, NULL, NULL },
    { "lengthWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:", "length", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "lengthWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:", "length", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D = { 2, "CmdLength3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdLength_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D)
