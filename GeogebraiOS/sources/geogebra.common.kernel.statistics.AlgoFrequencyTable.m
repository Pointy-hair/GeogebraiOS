//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFrequencyTable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "geogebra/common/kernel/statistics/AlgoFrequencyTable.h"
#include "geogebra/common/kernel/statistics/AlgoHistogram.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@class GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum;

@interface GeogebraCommonKernelStatisticsAlgoFrequencyTable () {
 @public
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *type_;
  GeogebraCommonKernelGeosGeoList *dataList_;
  GeogebraCommonKernelGeosGeoList *classList_;
  GeogebraCommonKernelGeosGeoBoolean *isCumulative_;
  GeogebraCommonKernelGeosGeoBoolean *useDensity_;
  GeogebraCommonKernelGeosGeoNumeric *density_;
  GeogebraCommonKernelGeosGeoNumeric *scale__;
  GeogebraCommonKernelGeosGeoNumeric *chart_;
  GeogebraCommonKernelGeosGeoText *table_;
  GeogebraCommonKernelStatisticsAlgoFrequency *freq_;
  JavaLangStringBuilder *sb_;
  jdouble scaleFactor_;
}

- (void)createTable;

- (void)createLaTeXTableWithBoolean:(jboolean)useClassList;

- (void)createLaTeXTableDWithBoolean:(jboolean)useClassList;

- (void)createLaTeXTableMQWithBoolean:(jboolean)useClassList;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, type_, GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, dataList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, classList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, isCumulative_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, useDensity_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, density_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, scale__, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, chart_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, table_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, freq_, GeogebraCommonKernelStatisticsAlgoFrequency *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList);

typedef NS_ENUM(NSUInteger, GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD = 0,
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM = 1,
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART = 2,
};

@interface GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values();

+ (GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

FOUNDATION_EXPORT GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[];

#define GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, STANDARD)

#define GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, HISTOGRAM)

#define GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum, BARCHART)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

@implementation GeogebraCommonKernelStatisticsAlgoFrequencyTable

- (void)createTable {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)chart {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, chart);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)chart {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FrequencyTable();
}

- (void)setInputOutput {
  {
    JavaUtilArrayList *tempList;
    switch ([type_ ordinal]) {
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM:
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART:
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(input_, 0, chart_);
      break;
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD:
      tempList = [new_JavaUtilArrayList_init() autorelease];
      if (isCumulative_ != nil) [tempList addWithId:isCumulative_];
      if (classList_ != nil) [tempList addWithId:classList_];
      [tempList addWithId:dataList_];
      if (useDensity_ != nil) [tempList addWithId:useDensity_];
      if (density_ != nil) [tempList addWithId:density_];
      if (scale__ != nil) [tempList addWithId:scale__];
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[tempList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
      GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [tempList toArrayWithNSObjectArray:input_]);
      break;
    }
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:table_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return table_;
}

- (IOSObjectArray *)getValueString {
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strValue_;
}

- (IOSObjectArray *)getFrequencyString {
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strFrequency_;
}

- (IOSObjectArray *)getHeaderString {
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(table_)) isDefined]) {
    return nil;
  }
  return strHeader_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
}

- (void)createLaTeXTableWithBoolean:(jboolean)useClassList {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, useClassList);
}

- (void)createLaTeXTableDWithBoolean:(jboolean)useClassList {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(self, useClassList);
}

- (void)createLaTeXTableMQWithBoolean:(jboolean)useClassList {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(self, useClassList);
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(dataList_);
  RELEASE_(classList_);
  RELEASE_(isCumulative_);
  RELEASE_(useDensity_);
  RELEASE_(density_);
  RELEASE_(scale__);
  RELEASE_(chart_);
  RELEASE_(table_);
  RELEASE_(freq_);
  RELEASE_(strHeader_);
  RELEASE_(strValue_);
  RELEASE_(strFrequency_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "createTable", NULL, "V", 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequencyTable", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "getValueString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getFrequencyString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getHeaderString", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "createLaTeXTableWithBoolean:", "createLaTeXTable", "V", 0x2, NULL, NULL },
    { "createLaTeXTableDWithBoolean:", "createLaTeXTableD", "V", 0x2, NULL, NULL },
    { "createLaTeXTableMQWithBoolean:", "createLaTeXTableMQ", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", NULL, NULL,  },
    { "dataList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "classList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isCumulative_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "useDensity_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "density_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "scale__", "scale", 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "chart_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "freq_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoFrequency;", NULL, NULL,  },
    { "strHeader_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "strValue_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "strFrequency_", NULL, 0x0, "[Ljava.lang.String;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "scaleFactor_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFrequencyTable = { 2, "AlgoFrequencyTable", "geogebra.common.kernel.statistics", NULL, 0x1, 18, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFrequencyTable;
}

@end

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_table_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->table_ setAbsoluteScreenLocWithInt:0 withInt:0];
  [self->table_ setAbsoluteScreenLocActiveWithBoolean:YES];
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, nil, nil, nil);
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, nil, nil, scale_);
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, scale_);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, nil);
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strHeader_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strFrequency_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_classList_(self, classList);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_dataList_(self, dataList);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_isCumulative_(self, isCumulative);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_useDensity_(self, useDensity);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_density_(self, density);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_scale__(self, scale_);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_freq_(self, new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons, isCumulative, classList, dataList, useDensity, density, scale_));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->freq_];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_STANDARD());
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
  ((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_))->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *chart) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *chart) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, chart);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *chart) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strHeader_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strFrequency_(self, nil);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(chart)) getParentAlgorithm];
  if ([algo isKindOfClass:[GeogebraCommonKernelStatisticsAlgoHistogram class]]) {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_HISTOGRAM());
  }
  else {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_type_(self, GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_get_BARCHART());
  }
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_chart_(self, chart);
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_createTable(self);
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(self);
  ((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_))->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *chart) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, chart);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_compute(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self) {
  {
    GeogebraCommonKernelStatisticsAlgoHistogram *algoHistogram;
    IOSDoubleArray *leftBorder;
    IOSDoubleArray *f;
    GeogebraCommonKernelAlgosAlgoBarChart *algoBarChart;
    IOSDoubleArray *f2;
    jboolean useDens;
    GeogebraCommonKernelGeosGeoList *fr;
    jint length;
    switch ([self->type_ ordinal]) {
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_HISTOGRAM:
      algoHistogram = (GeogebraCommonKernelStatisticsAlgoHistogram *) check_class_cast([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->chart_)) getParentAlgorithm], [GeogebraCommonKernelStatisticsAlgoHistogram class]);
      if (algoHistogram == nil || [algoHistogram getLeftBorder] == nil || [algoHistogram getYValue] == nil) {
        [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
      IOSObjectArray_Set(self->strHeader_, 0, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Interval"]);
      if ([((GeogebraCommonKernelStatisticsAlgoHistogram *) nil_chk(algoHistogram)) getUseDensityGeo] != nil && [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast([algoHistogram getUseDensityGeo], [GeogebraCommonKernelGeosGeoBoolean class])))) getBoolean]) {
        IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"]);
      }
      else {
        IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
      }
      leftBorder = [algoHistogram getLeftBorder];
      f = [algoHistogram getYValue];
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(f))->size_ type:NSString_class_()]);
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:f->size_ type:NSString_class_()]);
      for (jint i = 0; i < f->size_; i++) {
        IOSObjectArray_Set(self->strValue_, i, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(nil_chk(leftBorder), i) withGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
        IOSObjectArray_Set(self->strFrequency_, i, [self->kernel_ formatWithDouble:IOSDoubleArray_Get(f, i) withGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
      }
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, YES);
      break;
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_BARCHART:
      algoBarChart = (GeogebraCommonKernelAlgosAlgoBarChart *) check_class_cast([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->chart_)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoBarChart class]);
      if (algoBarChart == nil || [algoBarChart getValue] == nil || [algoBarChart getYValue] == nil) {
        [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
      IOSObjectArray_Set(self->strHeader_, 0, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Value"]);
      IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_set_strValue_(self, [((GeogebraCommonKernelAlgosAlgoBarChart *) nil_chk(algoBarChart)) getValue]);
      f2 = [algoBarChart getYValue];
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(f2))->size_ type:NSString_class_()]);
      for (jint i = 0; i < f2->size_; i++) {
        IOSObjectArray_Set(self->strFrequency_, i, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(f2, i) withGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
      }
      GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, NO);
      break;
      case GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputType_STANDARD:
      if (![((GeogebraCommonKernelGeosGeoList *) nil_chk([((GeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult])) isDefined]) {
        [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
        return;
      }
      useDens = (self->useDensity_ != nil && [self->useDensity_ getBoolean]);
      fr = [self->freq_ getResult];
      length = [((GeogebraCommonKernelGeosGeoList *) nil_chk(fr)) size];
      if (self->classList_ == nil) {
        if (self->scale__ != nil) {
          useDens = YES;
        }
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
        IOSObjectArray_Set(self->strHeader_, 0, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Value"]);
        if (useDens) {
          if (self->scale__ != nil) {
            jdouble scaleValue = [self->scale__ getDouble];
            if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(scaleValue, 1.0)) {
              IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Count"]);
            }
            else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(scaleValue * [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) size], 1)) {
              IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.RelativeFrequency"]);
            }
            else {
              IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Frequency"]);
            }
          }
          else {
            IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Frequency"]);
          }
        }
        else {
          IOSObjectArray_Set(self->strHeader_, 1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"FrequencyTable.Count"]);
        }
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:length type:NSString_class_()]);
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:length type:NSString_class_()]);
        GeogebraCommonKernelGeosGeoList *va = [self->freq_ getValue];
        for (jint i = 0; i < length; i++) {
          IOSObjectArray_Set(self->strValue_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(va)) getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
          IOSObjectArray_Set(self->strFrequency_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([fr getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
        }
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, NO);
      }
      else {
        if (![self->classList_ isDefined]) {
          [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
          return;
        }
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strHeader_(self, [IOSObjectArray newArrayWithLength:2 type:NSString_class_()]);
        IOSObjectArray_Set(self->strHeader_, 0, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Interval"]);
        IOSObjectArray_Set(self->strHeader_, 1, useDens ? [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"] : [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"]);
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strValue_(self, [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()]);
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_setAndConsume_strFrequency_(self, [IOSObjectArray newArrayWithLength:length + 1 type:NSString_class_()]);
        for (jint i = 0; i < length; i++) {
          IOSObjectArray_Set(self->strValue_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->classList_ getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
          IOSObjectArray_Set(self->strFrequency_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([fr getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:[self->table_ getStringTemplate]]);
        }
        IOSObjectArray_Set(self->strValue_, length, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->classList_ getWithInt:length])) toValueStringWithGeogebraCommonKernelStringTemplate:[((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) getStringTemplate]]);
        GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(self, YES);
      }
      break;
    }
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setTextStringWithNSString:[((JavaLangStringBuilder *) nil_chk(self->sb_)) description]];
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(self, useClassList);
  }
  else {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(self, useClassList);
  }
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableDWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
  [self->sb_ appendWithNSString:@"\\begin{array}{c|c}"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strHeader_), 0)];
  [self->sb_ appendWithNSString:@"&\\text{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strHeader_, 1)];
  [self->sb_ appendWithNSString:@"} \\\\\\hline "];
  if (useClassList) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_ - 1; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"\\text{ -- }"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strValue_, i + 1)];
      [self->sb_ appendWithNSString:@"&"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"\\\\"];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"&"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"\\\\"];
    }
  }
  [self->sb_ appendWithNSString:@"\\end{array}"];
}

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_createLaTeXTableMQWithBoolean_(GeogebraCommonKernelStatisticsAlgoFrequencyTable *self, jboolean useClassList) {
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
  [self->sb_ appendWithNSString:@"\\ggbtable{\\ggbtrlb{\\ggbtd{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strHeader_), 0)];
  [self->sb_ appendWithNSString:@"}\\ggbtdll{\\text{"];
  [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strHeader_, 1)];
  [self->sb_ appendWithNSString:@"}}}\\ggbtr{\\ggbtd{ "];
  if (useClassList) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_ - 1; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"\\text{ -- }"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strValue_, i + 1)];
      [self->sb_ appendWithNSString:@"}\\ggbtdll{"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"}\\ggbtr{\\ggbtd{"];
    }
  }
  else {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->strFrequency_))->size_; i++) {
      [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(self->strValue_), i)];
      [self->sb_ appendWithNSString:@"}\\ggbtdll{"];
      [self->sb_ appendWithNSString:IOSObjectArray_Get(self->strFrequency_, i)];
      [self->sb_ appendWithNSString:@"}}\\ggbtr{\\ggbtd{"];
    }
  }
  [self->sb_ appendWithNSString:@"}}}"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFrequencyTable)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)

GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[3];

@implementation GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values() {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_ count:3 type:GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values();
}

+ (GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *e = GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum class]) {
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD = new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"STANDARD", 0);
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM = new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"HISTOGRAM", 1);
    GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART = new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(@"BARCHART", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "STANDARD", "STANDARD", 0x4019, "Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_STANDARD, NULL,  },
    { "HISTOGRAM", "HISTOGRAM", 0x4019, "Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_HISTOGRAM, NULL,  },
    { "BARCHART", "BARCHART", 0x4019, "Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;", &GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_BARCHART, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.statistics.AlgoFrequencyTable$inputType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum = { 2, "inputType", "geogebra.common.kernel.statistics", "AlgoFrequencyTable", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/statistics/AlgoFrequencyTable$inputType;>;" };
  return &_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum;
}

@end

void GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *new_GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum *self = [GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum alloc];
  GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFrequencyTable_inputTypeEnum)
