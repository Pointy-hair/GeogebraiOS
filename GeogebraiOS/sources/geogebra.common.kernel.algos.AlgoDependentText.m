//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentText.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonKernelAlgosAlgoDependentText () {
 @public
  GeogebraCommonKernelArithmeticExpressionNode *root_;
  GeogebraCommonKernelGeosGeoText *text_;
  GeogebraCommonKernelStringTemplate *oldTpl_;
  id<GeogebraCommonKernelArithmeticExpressionValue> numToTrace_;
  jboolean numToTraceSet_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en;

- (id<GeogebraCommonKernelArithmeticExpressionValue>)copy__WithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev OBJC_METHOD_FAMILY_NONE;

- (void)setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentText, root_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentText, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentText, oldTpl_, GeogebraCommonKernelStringTemplate *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentText, numToTrace_, id<GeogebraCommonKernelArithmeticExpressionValue>)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentText_compute(GeogebraCommonKernelAlgosAlgoDependentText *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentText *self, GeogebraCommonKernelArithmeticExpressionNode *en);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelAlgosAlgoDependentText_copy__WithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelAlgosAlgoDependentText *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelAlgosAlgoDependentText *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev);

@implementation GeogebraCommonKernelAlgosAlgoDependentText

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TEXT;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getRoot {
  return root_;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) isGeoText]) [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(input_, i), [GeogebraCommonKernelGeosGeoText class])))) addTextDescendantWithGeogebraCommonKernelGeosGeoText:text_];
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getGeoText {
  return text_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentText_compute(self);
}

+ (void)nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                  withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text
                               withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelStringTemplate_(root, text, tpl);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (root_ == nil) return @"";
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)setSpreadsheetTraceableText {
  numToTraceSet_ = NO;
  GeogebraCommonKernelArithmeticExpressionNode *copy_ = GeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode_(self, root_);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setSpreadsheetTraceableWithGeogebraCommonKernelArithmeticExpressionNode:copy_ withGeogebraCommonKernelArithmeticExpressionValue:numToTrace_];
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en {
  return GeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode_(self, en);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)copy__WithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelAlgosAlgoDependentText_copy__WithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  GeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(text_);
  RELEASE_(oldTpl_);
  RELEASE_(numToTrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentText", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getRoot", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoText", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelStringTemplate:", "nodeToGeoText", "V", 0x19, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setSpreadsheetTraceableText", NULL, "V", 0x1, NULL, NULL },
    { "getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode:", "getSpecialCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "copy__WithGeogebraCommonKernelArithmeticExpressionValue:", "copy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x2, NULL, NULL },
    { "setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue:", "setNumToTrace", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "oldTpl_", NULL, 0x2, "Lgeogebra.common.kernel.StringTemplate;", NULL, NULL,  },
    { "numToTrace_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "numToTraceSet_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentText = { 2, "AlgoDependentText", "geogebra.common.kernel.algos", NULL, 0x1, 14, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentText;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentText *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentText_set_root_(self, root);
  GeogebraCommonKernelAlgosAlgoDependentText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self->text_ initSpreadsheetTraceableCase];
  GeogebraCommonKernelAlgosAlgoDependentText_compute(self);
  [self->text_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentText *new_GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentText *self = [GeogebraCommonKernelAlgosAlgoDependentText alloc];
  GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentText *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentText_set_root_(self, root);
  GeogebraCommonKernelAlgosAlgoDependentText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentText_compute(self);
}

GeogebraCommonKernelAlgosAlgoDependentText *new_GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentText *self = [GeogebraCommonKernelAlgosAlgoDependentText alloc];
  GeogebraCommonKernelAlgosAlgoDependentText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentText_compute(GeogebraCommonKernelAlgosAlgoDependentText *self) {
  GeogebraCommonKernelStringTemplate *tpl = [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getStringTemplate];
  if (self->oldTpl_ != tpl) {
    GeogebraCommonKernelAlgosAlgoDependentText_set_oldTpl_(self, tpl);
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isGeoText] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isLabelSet] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getParentAlgorithm] != nil) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:self->text_];
        [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) getParentAlgorithm])) update];
      }
    }
  }
  GeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelStringTemplate_(self->root_, self->text_, tpl);
}

void GeogebraCommonKernelAlgosAlgoDependentText_nodeToGeoTextWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticExpressionNode *root, GeogebraCommonKernelGeosGeoText *text, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelAlgosAlgoDependentText_initialize();
  @try {
    jboolean latex = [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLaTeX];
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root)) setHoldsLaTeXtextWithBoolean:latex];
    NSString *str;
    if (latex) {
      str = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root evaluateWithGeogebraCommonKernelStringTemplate:tpl])) toLaTeXStringWithBoolean:NO withGeogebraCommonKernelStringTemplate:tpl];
    }
    else {
      str = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([root evaluateWithGeogebraCommonKernelStringTemplate:tpl])) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
    }
    [text setTextStringWithNSString:str];
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setUndefined];
  }
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentText *self, GeogebraCommonKernelArithmeticExpressionNode *en) {
  GeogebraCommonKernelArithmeticExpressionNode *newNode = nil;
  id<GeogebraCommonKernelArithmeticExpressionValue> lev = nil, rev = nil;
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left != nil) {
    lev = GeogebraCommonKernelAlgosAlgoDependentText_copy__WithGeogebraCommonKernelArithmeticExpressionValue_(self, left);
  }
  if (right != nil) {
    rev = GeogebraCommonKernelAlgosAlgoDependentText_copy__WithGeogebraCommonKernelArithmeticExpressionValue_(self, right);
  }
  if (lev != nil) {
    newNode = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, lev, [en getOperation], rev) autorelease];
    newNode->leaf_ = en->leaf_;
  }
  else {
    return nil;
  }
  return newNode;
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelAlgosAlgoDependentText_copy__WithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelAlgosAlgoDependentText *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (ev == nil) {
    return nil;
  }
  id<GeogebraCommonKernelArithmeticExpressionValue> ret = nil;
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isNumberValue]) {
    GeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue_(self, ev);
    ret = [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @" ... ") autorelease];
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticExpressionNode *en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    ret = GeogebraCommonKernelAlgosAlgoDependentText_getSpecialCopyWithGeogebraCommonKernelArithmeticExpressionNode_(self, en);
  }
  else if ([ev isConstant] || ([ev isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]])) {
    ret = [ev deepCopyWithGeogebraCommonKernelKernel:self->kernel_];
  }
  else if ([ev isGeoElement]) {
    GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class]);
    GeogebraCommonKernelAlgosAlgoElement *algo = [geo getParentAlgorithm];
    if (algo != nil && ((IOSObjectArray *) nil_chk([algo getInput]))->size_ > 0) {
      GeogebraCommonKernelGeosGeoElement *geo2 = IOSObjectArray_Get(nil_chk([algo getInput]), 0);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isNumberValue]) {
        GeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue_(self, geo2);
        ret = [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @" ... ") autorelease];
      }
      else {
        ret = ev;
      }
    }
    else {
      ret = ev;
    }
  }
  else {
    ret = ev;
  }
  return ret;
}

void GeogebraCommonKernelAlgosAlgoDependentText_setNumToTraceWithGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelAlgosAlgoDependentText *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  if (!self->numToTraceSet_) {
    GeogebraCommonKernelAlgosAlgoDependentText_set_numToTrace_(self, ev);
    self->numToTraceSet_ = YES;
  }
  else GeogebraCommonKernelAlgosAlgoDependentText_set_numToTrace_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentText)
