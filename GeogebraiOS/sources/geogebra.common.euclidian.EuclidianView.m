//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/EuclidianView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GEllipse2DDouble.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GFontRenderContext.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/awt/font/GTextLayout.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableList.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianStyleBar.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/GetViewId.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/MyButton.h"
#include "geogebra/common/euclidian/MyZoomer.h"
#include "geogebra/common/euclidian/Previewable.h"
#include "geogebra/common/euclidian/RemoveNeeded.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/euclidian/draw/DrawButton.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawImage.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/euclidian/draw/DrawList.h"
#include "geogebra/common/euclidian/draw/DrawPolyLine.h"
#include "geogebra/common/euclidian/draw/DrawPolygon.h"
#include "geogebra/common/euclidian/draw/DrawRay.h"
#include "geogebra/common/euclidian/draw/DrawSegment.h"
#include "geogebra/common/euclidian/draw/DrawTextField.h"
#include "geogebra/common/euclidian/draw/DrawVector.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/factories/FormatFactory.h"
#include "geogebra/common/gui/Layout.h"
#include "geogebra/common/gui/dialog/options/OptionsEuclidian.h"
#include "geogebra/common/gui/layout/DockManager.h"
#include "geogebra/common/javax/swing/GBox.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/ModeSetter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/MyMath.h"
#include "geogebra/common/util/NumberFormatAdapter.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"

#pragma clang diagnostic ignored "-Wprotocol"

#define GeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE 10
#define GeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE 0.5
#define GeogebraCommonEuclidianEuclidianView_MAX_ANGLE 10.0
#define GeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN 45.0
#define GeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS 16
#define GeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS 8
#define GeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT 1000
#define GeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS 80

@interface GeogebraCommonEuclidianEuclidianView () {
 @public
  jdouble xZeroOld_, yZeroOld_;
  jint mode_;
  GeogebraCommonAwtGColor *axesColor_, *gridColor_;
  id<GeogebraCommonAwtGBasicStroke> axesStroke_, tickStroke_, gridStroke_;
  jint fontSize_;
  id<GeogebraCommonAwtGAffineTransform> coordTransform_;
  jboolean automaticGridDistance_;
  jint gridLineStyle_, axesLineType_;
  jint gridType_;
  GeogebraCommonAwtGFont *fontPoint_;
  GeogebraCommonAwtGFont *fontCoords_;
  jboolean showAxesCornerCoords_;
  id<GeogebraCommonEuclidianPreviewable> previewDrawable_;
  GeogebraCommonMainSettingsEuclidianSettings *settings_;
  GeogebraCommonEuclidianHits *hits_;
  jboolean updateBackgroundOnNextRepaint_;
  jboolean updatingBounds_;
  jdouble invXscale_;
  jdouble invYscale_;
  jdouble xZero_;
  jdouble yZero_;
  jdouble xscale_;
  jdouble yscale_;
  JavaUtilHashMap *DrawableMap_;
  JavaUtilArrayList *stickyPointList_;
  GeogebraCommonEuclidianDrawableList *allDrawableList_;
  GeogebraCommonEuclidianDrawableList *bgImageList_;
  jboolean needsAllDrawablesUpdate_;
  jboolean batchUpdate_;
  JavaUtilArrayList *geosWaiting_;
  JavaUtilArrayList *hitPointOrBoundary_, *hitFilling_, *hitLabel_;
  id<GeogebraCommonAwtGEllipse2DDouble> circle_;
  id<GeogebraCommonAwtGLine2D> tempLine_;
  id<GeogebraCommonAwtGGeneralPath> gp_;
  JavaUtilArrayList *axesLabelsPositionsY_;
  JavaUtilArrayList *axesLabelsPositionsX_;
  jdouble yLabelMaxWidth_;
  jdouble xLabelHeights_;
  jint widthTemp_, heightTemp_;
  jdouble xminTemp_, xmaxTemp_, yminTemp_, ymaxTemp_;
  GeogebraCommonEuclidianHits *tempArrayList_;
  GeogebraCommonEuclidianMyZoomer *zoomer_;
  GeogebraCommonEuclidianMyZoomer *axesRatioZoomer_;
  GeogebraCommonEuclidianMyZoomer *mover_;
  GeogebraCommonEuclidianMyZoomer *zoomerRW_;
  GeogebraCommonGuiDialogOptionsOptionsEuclidian *optionPanel_;
}

- (void)setStandardCoordSystemWithBoolean:(jboolean)repaint;

+ (jboolean)clearRectangleWithInt:(jint)mode;

- (void)setSizeListeners;

- (void)setXscaleWithDouble:(jdouble)xscale;

- (void)setYscaleWithDouble:(jdouble)yscale;

- (void)setCoordTransformIfNeeded;

- (jboolean)drawableNeededWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

- (void)setFontPointWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontPoint;

- (void)setFontCoordsWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontCoords;

- (jdouble)getXAxisCrossingPixel;

- (jdouble)getYAxisCrossingPixel;

- (jboolean)xAxisOnscreen;

- (jboolean)yAxisOnscreen;

- (void)drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                                     withDouble:(jdouble)x1
                                                     withDouble:(jdouble)y1
                                                     withDouble:(jdouble)x2
                                                     withDouble:(jdouble)y2
                                                     withDouble:(jdouble)xCrossPix;

- (void)drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                                     withDouble:(jdouble)x1
                                                     withDouble:(jdouble)y1
                                                     withDouble:(jdouble)x2
                                                     withDouble:(jdouble)y2
                                                     withDouble:(jdouble)yCrossPix;

- (void)drawStringWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                      withNSString:(NSString *)text
                                        withDouble:(jdouble)x
                                        withDouble:(jdouble)y;

+ (jdouble)estimateNumberHeightWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2;

- (jdouble)estimateNumberWidthWithDouble:(jdouble)d
              withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2;

+ (jdouble)estimateTextWidthWithNSString:(NSString *)s
              withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, axesColor_, GeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, gridColor_, GeogebraCommonAwtGColor *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, axesStroke_, id<GeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, tickStroke_, id<GeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, gridStroke_, id<GeogebraCommonAwtGBasicStroke>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, coordTransform_, id<GeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, fontPoint_, GeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, fontCoords_, GeogebraCommonAwtGFont *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, previewDrawable_, id<GeogebraCommonEuclidianPreviewable>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, settings_, GeogebraCommonMainSettingsEuclidianSettings *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, hits_, GeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, DrawableMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, stickyPointList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, allDrawableList_, GeogebraCommonEuclidianDrawableList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, bgImageList_, GeogebraCommonEuclidianDrawableList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, geosWaiting_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, hitPointOrBoundary_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, hitFilling_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, hitLabel_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, circle_, id<GeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, tempLine_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, gp_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, axesLabelsPositionsY_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, axesLabelsPositionsX_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, tempArrayList_, GeogebraCommonEuclidianHits *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, zoomer_, GeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, axesRatioZoomer_, GeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, mover_, GeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, zoomerRW_, GeogebraCommonEuclidianMyZoomer *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, optionPanel_, GeogebraCommonGuiDialogOptionsOptionsEuclidian *)

static GeogebraCommonAwtGColor *GeogebraCommonEuclidianEuclidianView_colZoomRectangle_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, colZoomRectangle_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, colZoomRectangleFill_, GeogebraCommonAwtGColor *)

static id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianEuclidianView_boldAxesStroke_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, boldAxesStroke_, id<GeogebraCommonAwtGBasicStroke>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonEuclidianEuclidianView, boldAxesStroke_, id<GeogebraCommonAwtGBasicStroke>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_PIXEL_DISTANCE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MIN_PIXEL_DISTANCE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_ANGLE, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_ANGLE_OFF_SCREEN, jdouble)

static jdouble GeogebraCommonEuclidianEuclidianView_MAX_BEND_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_BEND_, jdouble)

static jdouble GeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_BEND_OFF_SCREEN_, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_DEFINED_BISECTIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_PROBLEM_BISECTIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MAX_ZERO_COUNT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianEuclidianView, MIN_SAMPLE_POINTS, jint)

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(GeogebraCommonEuclidianEuclidianView *self, jboolean repaint);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(jint mode);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setSizeListeners(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xRW);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yRW);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_toScreenCoordXdWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xRW);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_toScreenCoordYdWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yRW);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble x);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble y);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xmin2, jdouble xmax2, jdouble ymin2, jdouble ymax2);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale, jboolean repaint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xscale);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yscale);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianView_getGridType(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(GeogebraCommonEuclidianEuclidianView *self, jboolean repaint);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianView_drawableNeededWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static GeogebraCommonEuclidianDrawableND *GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setFontPointWithGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonAwtGFont *fontPoint);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setFontCoordsWithGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonAwtGFont *fontCoords);

__attribute__((unused)) static jint GeogebraCommonEuclidianEuclidianView_getAllowToolTips(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_updateBackground(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianView_hasMouse2D(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_clearBackgroundWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_drawBackgroundWithGeogebraCommonAwtGGraphics2D_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g, jboolean clear);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_drawGridWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianView_xAxisOnscreen(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble xCrossPix);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble yCrossPix);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_drawStringWithGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, NSString *text, jdouble x, jdouble y);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(GeogebraCommonEuclidianEuclidianView *self);

__attribute__((unused)) static void GeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jint steps, jboolean storeUndo);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_(GeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, jdouble d, GeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static jdouble GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_(NSString *s, GeogebraCommonAwtGFont *fontAxes2);

__attribute__((unused)) static id<GeogebraCommonEuclidianEuclidianStyleBar> GeogebraCommonEuclidianEuclidianView_getStyleBar(GeogebraCommonEuclidianEuclidianView *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianEuclidianView)

jint GeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_ = 1001;
jint GeogebraCommonEuclidianEuclidianView_EVNO_3D_ = -1;
NSString *GeogebraCommonEuclidianEuclidianView_EXPORT1_ = @"Export_1";
NSString *GeogebraCommonEuclidianEuclidianView_EXPORT2_ = @"Export_2";
jint GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_ = 10;
GeogebraCommonAwtGColor *GeogebraCommonEuclidianEuclidianView_colDeletionSquare_;
id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_;
id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianEuclidianView_defAxesStroke_;

@implementation GeogebraCommonEuclidianEuclidianView

+ (IOSObjectArray *)getLineTypes {
  return GeogebraCommonEuclidianEuclidianView_getLineTypes();
}

+ (IOSObjectArray *)getPointStyles {
  return GeogebraCommonEuclidianEuclidianView_getPointStyles();
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec
                                                           withInt:(jint)viewNo
                   withGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)settings {
  GeogebraCommonEuclidianEuclidianView_initWithGeogebraCommonEuclidianEuclidianController_withInt_withGeogebraCommonMainSettingsEuclidianSettings_(self, ec, viewNo, settings);
  return self;
}

- (GeogebraCommonEuclidianEuclidianViewCompanion *)newEuclidianViewCompanion {
  return [new_GeogebraCommonEuclidianEuclidianViewCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self) autorelease];
}

- (GeogebraCommonEuclidianEuclidianViewCompanion *)getCompanion {
  return companion_;
}

- (void)initAxesValues {
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesNumberFormat_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonUtilNumberFormatAdapter_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_showAxesNumbers_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabels_(self, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:NSString_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabelsStyle_(self, [IOSIntArray newArrayWithInts:(jint[]){ GeogebraCommonAwtGFont_PLAIN, GeogebraCommonAwtGFont_PLAIN } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesUnitLabels_(self, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:NSString_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesTickStyles_(self, [IOSIntArray newArrayWithInts:(jint[]){ GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_automaticAxesNumberingDistances_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesNumberingDistances_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2 } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_drawBorderAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axisCross_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0 } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_positiveAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_piAxisUnit_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_gridDistances_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2, JavaLangMath_PI / 6 } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_AxesTickInterval_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1 } count:2]);
}

- (void)setAxesColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)axesColor {
  if (axesColor != nil) {
    GeogebraCommonEuclidianEuclidianView_set_axesColor_(self, axesColor);
  }
}

- (void)setStandardCoordSystem {
  GeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, YES);
}

- (void)setStandardCoordSystemWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, repaint);
}

- (void)attachView {
  [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) attachView];
}

- (jint)getPointCapturingMode {
  if (settings_ != nil) {
    return [settings_ getPointCapturingMode];
  }
  return pointCapturingMode_;
}

- (void)setPointCapturingWithInt:(jint)mode {
  if (settings_ != nil) {
    [settings_ setPointCapturingWithInt:mode];
  }
  else {
    pointCapturingMode_ = mode;
  }
}

- (jint)getMode {
  return mode_;
}

- (void)setModeWithInt:(jint)mode
withGeogebraCommonKernelModeSetterEnum:(GeogebraCommonKernelModeSetterEnum *)m {
  if (mode == self->mode_) {
    return;
  }
  self->mode_ = mode;
  [self initCursor];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) clearJustCreatedGeos];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) setModeWithInt:mode];
  if (GeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(mode)) {
    [self setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
  }
  [self setStyleBarModeWithInt:mode];
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

+ (jboolean)clearRectangleWithInt:(jint)mode {
  return GeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(mode);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getXminObject {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)updateBoundObjects {
  if ([self isZoomable]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getXmin]];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getXmax]];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getYmin]];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[self getYmax]];
  }
}

- (jboolean)isLockedAxesRatio {
  return lockedAxesRatio_ != nil || (gridType_ == GeogebraCommonEuclidianEuclidianView_GRID_POLAR);
}

- (void)setLockedAxesRatioWithJavaLangDouble:(JavaLangDouble *)flag {
  GeogebraCommonEuclidianEuclidianView_set_lockedAxesRatio_(self, flag);
  if (flag != nil) {
    [self updateBoundsWithBoolean:YES];
  }
}

- (void)updateBoundsWithBoolean:(jboolean)updateDrawables {
  if (updatingBounds_) return;
  updatingBounds_ = YES;
  jdouble xmin2 = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(xminObject_)) getDouble];
  jdouble xmax2 = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(xmaxObject_)) getDouble];
  jdouble ymin2 = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(yminObject_)) getDouble];
  jdouble ymax2 = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(ymaxObject_)) getDouble];
  if ([self isLockedAxesRatio] && ([self getHeight] > 0) && ([self getWidth] > 0)) {
    jdouble ratio = gridType_ == GeogebraCommonEuclidianEuclidianView_GRID_POLAR ? 1 : [((JavaLangDouble *) nil_chk(lockedAxesRatio_)) doubleValue];
    jdouble newWidth = ratio * ((ymax2 - ymin2) * [self getWidth]) / ([self getHeight] + 0.0);
    jdouble newHeight = 1 / ratio * ((xmax2 - xmin2) * [self getHeight]) / ([self getWidth] + 0.0);
    if ((xmax2 - xmin2) < newWidth) {
      jdouble c = (xmin2 + xmax2) / 2;
      xmin2 = c - (newWidth / 2);
      xmax2 = c + (newWidth / 2);
    }
    else {
      jdouble c = (ymin2 + ymax2) / 2;
      ymin2 = c - (newHeight / 2);
      ymax2 = c + (newHeight / 2);
    }
  }
  if (((xmax2 - xmin2) > GeogebraCommonKernelKernel_MAX_PRECISION) && ((ymax2 - ymin2) > GeogebraCommonKernelKernel_MAX_PRECISION)) {
    xmax_ = xmax2;
    xmin_ = xmin2;
    ymin_ = ymin2;
    ymax_ = ymax2;
    GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, [self getWidth] / (xmax2 - xmin2));
    GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, [self getHeight] / (ymax2 - ymin2));
    xZero_ = -xscale_ * xmin2;
    yZero_ = yscale_ * ymax2;
    [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
    [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
    [self calcPrintingScale];
    if ([self isLockedAxesRatio]) {
      [self updateBoundObjects];
    }
  }
  if (evNo_ != GeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setEuclidianViewBoundsWithInt:evNo_ withDouble:[self getXmin] withDouble:[self getXmax] withDouble:[self getYmin] withDouble:[self getYmax] withDouble:[self getXscale] withDouble:[self getYscale]];
  }
  GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  if (optionPanel_ != nil) [optionPanel_ updateBounds];
  if (updateDrawables) {
    GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
    self->updateBackgroundOnNextRepaint_ = YES;
  }
  updatingBounds_ = NO;
}

- (jboolean)isZoomable {
  if ((xminObject_ != nil) && (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((xmaxObject_ != nil) && (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((yminObject_ != nil) && (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  if ((ymaxObject_ != nil) && (![((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isIndependent] || [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) isLabelSet])) {
    return NO;
  }
  return YES;
}

- (void)setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xminObjectNew {
  if (xminObject_ != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (xminObjectNew == nil) {
    GeogebraCommonEuclidianEuclidianView_setAndConsume_xminObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    [self updateBoundObjects];
  }
  else {
    GeogebraCommonEuclidianEuclidianView_set_xminObject_(self, xminObjectNew);
  }
  GeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getXmaxObject {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)xmaxObjectNew {
  if (xmaxObject_ != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (xmaxObjectNew == nil) {
    GeogebraCommonEuclidianEuclidianView_setAndConsume_xmaxObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    [self updateBoundObjects];
  }
  else {
    GeogebraCommonEuclidianEuclidianView_set_xmaxObject_(self, xmaxObjectNew);
  }
  GeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getYminObject {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)yminObjectNew {
  if (yminObject_ != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (yminObjectNew == nil) {
    GeogebraCommonEuclidianEuclidianView_setAndConsume_yminObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    [self updateBoundObjects];
  }
  else {
    GeogebraCommonEuclidianEuclidianView_set_yminObject_(self, yminObjectNew);
  }
  GeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (void)setSizeListeners {
  GeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (jint)toScreenCoordXWithDouble:(jdouble)xRW {
  return GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, xRW);
}

- (jint)toScreenCoordYWithDouble:(jdouble)yRW {
  return GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, yRW);
}

- (jdouble)toScreenCoordXdWithDouble:(jdouble)xRW {
  return GeogebraCommonEuclidianEuclidianView_toScreenCoordXdWithDouble_(self, xRW);
}

- (jdouble)toScreenCoordYdWithDouble:(jdouble)yRW {
  return GeogebraCommonEuclidianEuclidianView_toScreenCoordYdWithDouble_(self, yRW);
}

- (jint)toClippedScreenCoordXWithDouble:(jdouble)xRW {
  if (xRW > [self getXmax]) {
    return [self getWidth] + 1;
  }
  else if (xRW < [self getXmin]) {
    return -1;
  }
  else {
    return GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, xRW);
  }
}

- (void)rememberOrigins {
  xZeroOld_ = [self getxZero];
  yZeroOld_ = [self getyZero];
}

- (jint)toClippedScreenCoordYWithDouble:(jdouble)yRW {
  if (yRW > [self getYmax]) {
    return -1;
  }
  else if (yRW < [self getYmin]) {
    return [self getHeight] + 1;
  }
  else {
    return GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, yRW);
  }
}

- (jboolean)toScreenCoordsWithDoubleArray:(IOSDoubleArray *)inOut {
  if ([self getXaxisLog]) {
    *IOSDoubleArray_GetRef(nil_chk(inOut), 0) = [self getxZero] + (JavaLangMath_log10WithDouble_(IOSDoubleArray_Get(inOut, 0)) * [self getXscale]);
  }
  else *IOSDoubleArray_GetRef(nil_chk(inOut), 0) = [self getxZero] + (IOSDoubleArray_Get(inOut, 0) * [self getXscale]);
  if ([self getYaxisLog]) {
    *IOSDoubleArray_GetRef(nil_chk(inOut), 1) = [self getyZero] - (JavaLangMath_log10WithDouble_(IOSDoubleArray_Get(inOut, 1)) * [self getYscale]);
  }
  else *IOSDoubleArray_GetRef(nil_chk(inOut), 1) = [self getyZero] - (IOSDoubleArray_Get(inOut, 1) * [self getYscale]);
  jboolean onScreen = YES;
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(inOut), 0)) || JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(inOut, 0))) {
    *IOSDoubleArray_GetRef(inOut, 0) = JavaLangDouble_NaN;
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 0) < 0) {
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 0) > [self getWidth]) {
    onScreen = NO;
  }
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(inOut, 1)) || JavaLangDouble_isInfiniteWithDouble_(IOSDoubleArray_Get(inOut, 1))) {
    *IOSDoubleArray_GetRef(inOut, 1) = JavaLangDouble_NaN;
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 1) < 0) {
    onScreen = NO;
  }
  else if (IOSDoubleArray_Get(inOut, 1) > [self getHeight]) {
    onScreen = NO;
  }
  return onScreen;
}

- (jboolean)isOnScreenWithDoubleArray:(IOSDoubleArray *)coords {
  return (IOSDoubleArray_Get(nil_chk(coords), 0) >= 0) && (IOSDoubleArray_Get(coords, 0) <= [self getWidth]) && (IOSDoubleArray_Get(coords, 1) >= 0) && (IOSDoubleArray_Get(coords, 1) <= [self getHeight]);
}

- (jboolean)isOnViewWithDoubleArray:(IOSDoubleArray *)coords {
  return (IOSDoubleArray_Get(nil_chk(coords), 0) >= [self getXmin]) && (IOSDoubleArray_Get(coords, 0) <= [self getXmax]) && (IOSDoubleArray_Get(coords, 1) >= [self getYmin]) && (IOSDoubleArray_Get(coords, 1) <= [self getYmax]);
}

- (IOSDoubleArray *)getOnScreenDiffWithDoubleArray:(IOSDoubleArray *)p1
                                   withDoubleArray:(IOSDoubleArray *)p2 {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = (IOSDoubleArray_Get(nil_chk(p2), 0) - IOSDoubleArray_Get(nil_chk(p1), 0)) * [self getXscale];
  *IOSDoubleArray_GetRef(ret, 1) = (IOSDoubleArray_Get(p2, 1) - IOSDoubleArray_Get(p1, 1)) * [self getYscale];
  return ret;
}

- (jboolean)isSegmentOffViewWithDoubleArray:(IOSDoubleArray *)p1
                            withDoubleArray:(IOSDoubleArray *)p2 {
  jdouble tolerance = GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE / [self getYscale];
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getYmin], IOSDoubleArray_Get(nil_chk(p1), 1), tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getYmin], IOSDoubleArray_Get(nil_chk(p2), 1), tolerance)) return YES;
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(p1, 1), [self getYmax], tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(p2), 1), [self getYmax], tolerance)) return YES;
  tolerance = GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE / [self getXscale];
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getXmin], IOSDoubleArray_Get(p1, 0), tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getXmin], IOSDoubleArray_Get(nil_chk(p2), 0), tolerance)) return YES;
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(p1, 0), [self getXmax], tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(nil_chk(p2), 0), [self getXmax], tolerance)) return YES;
  return NO;
}

- (jdouble)toRealWorldCoordXWithDouble:(jdouble)x {
  return GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, x);
}

- (jdouble)toRealWorldCoordYWithDouble:(jdouble)y {
  return GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, y);
}

- (void)setCoordSystemWithDouble:(jdouble)xZero
                      withDouble:(jdouble)yZero
                      withDouble:(jdouble)xscale
                      withDouble:(jdouble)yscale {
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xZero, yZero, xscale, yscale);
}

- (void)translateCoordSystemInPixelsWithInt:(jint)dx
                                    withInt:(jint)dy
                                    withInt:(jint)dz
                                    withInt:(jint)mode {
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xZeroOld_ + dx, yZeroOld_ + dy, [self getXscale], [self getYscale]);
}

- (void)setCoordSystemFromMouseMoveWithInt:(jint)dx
                                   withInt:(jint)dy
                                   withInt:(jint)mode {
  [self translateCoordSystemInPixelsWithInt:dx withInt:dy withInt:0 withInt:mode];
}

- (void)pageUpDownTranslateCoordSystemWithInt:(jint)height {
  [self translateCoordSystemInPixelsWithInt:0 withInt:height withInt:0 withInt:GeogebraCommonEuclidianEuclidianController_MOVE_VIEW];
}

- (void)setRealWorldCoordSystemWithDouble:(jdouble)xmin2
                               withDouble:(jdouble)xmax2
                               withDouble:(jdouble)ymin2
                               withDouble:(jdouble)ymax2 {
  GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, xmin2, xmax2, ymin2, ymax2);
}

- (void)setCoordSystemWithDouble:(jdouble)xZero
                      withDouble:(jdouble)yZero
                      withDouble:(jdouble)xscale
                      withDouble:(jdouble)yscale
                     withBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, xZero, yZero, xscale, yscale, repaint);
}

- (void)updateBackgroundIfNecessary {
  if (updateBackgroundOnNextRepaint_) {
    GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  }
  updateBackgroundOnNextRepaint_ = NO;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getYmaxObject {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (void)setAntialiasingWithBoolean:(jboolean)flag {
  if (flag == antiAliasing_) {
    return;
  }
  antiAliasing_ = flag;
  [self repaint];
}

- (jboolean)getAntialiasing {
  return antiAliasing_;
}

- (void)setEuclidianViewNoWithInt:(jint)evNo {
  if (evNo >= 2) {
    self->evNo_ = evNo;
  }
}

- (jint)getEuclidianViewNo {
  return evNo_;
}

- (void)setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)ymaxObjectNew {
  if (ymaxObject_ != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])) removeEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  }
  if (ymaxObjectNew == nil) {
    GeogebraCommonEuclidianEuclidianView_setAndConsume_ymaxObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
    [self updateBoundObjects];
  }
  else {
    GeogebraCommonEuclidianEuclidianView_set_ymaxObject_(self, ymaxObjectNew);
  }
  GeogebraCommonEuclidianEuclidianView_setSizeListeners(self);
}

- (void)setXscaleWithDouble:(jdouble)xscale {
  GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, xscale);
}

- (void)setYscaleWithDouble:(jdouble)yscale {
  GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, yscale);
}

- (void)setFontSizeWithInt:(jint)fontSize {
  self->fontSize_ = fontSize;
}

- (jdouble)getxZero {
  return xZero_;
}

- (jdouble)getyZero {
  return yZero_;
}

- (jdouble)getXZero {
  return [self getxZero];
}

- (jdouble)getYZero {
  return [self getyZero];
}

- (NSString *)getXYscaleRatioString {
  JavaLangStringBuilder *ratioSb = [new_JavaLangStringBuilder_init() autorelease];
  [ratioSb appendWithNSString:@"x : y = "];
  if ([self getXscale] >= [self getYscale]) {
    [ratioSb appendWithNSString:@"1 : "];
    [ratioSb appendWithNSString:[((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk(printScaleNF_)) formatWithDouble:[self getXscale] / [self getYscale]]];
  }
  else {
    [ratioSb appendWithNSString:[((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk(printScaleNF_)) formatWithDouble:[self getYscale] / [self getXscale]]];
    [ratioSb appendWithNSString:@" : 1"];
  }
  [ratioSb appendWithChar:' '];
  return [ratioSb description];
}

- (jdouble)getXscale {
  return xscale_;
}

- (jdouble)getYscale {
  return yscale_;
}

- (jdouble)getInvXscale {
  return invXscale_;
}

- (jdouble)getInvYscale {
  return invYscale_;
}

- (jint)getViewWidth {
  return [self getWidth];
}

- (jint)getViewHeight {
  return [self getHeight];
}

- (jdouble)getScaleRatio {
  return [self getYscale] / [self getXscale];
}

- (jdouble)getXmax {
  return xmax_;
}

- (jdouble)getXmin {
  return xmin_;
}

- (jdouble)getYmax {
  return ymax_;
}

- (jdouble)getYmin {
  return ymin_;
}

- (jint)getGridType {
  return GeogebraCommonEuclidianEuclidianView_getGridType(self);
}

- (void)setGridTypeWithInt:(jint)type {
  gridType_ = type;
  if (type == GeogebraCommonEuclidianEuclidianView_GRID_POLAR) {
    [self updateBoundsWithBoolean:YES];
  }
}

- (void)setXYMinMaxWithDoubleArray2:(IOSObjectArray *)minMax {
  xmin_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(minMax), 0)), 0));
  xmax_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 0)), 1));
  ymin_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 1)), 0));
  ymax_ = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(minMax, 1)), 1));
}

- (void)setRealWorldBounds {
  [self updateBoundObjects];
  [self updateBoundsWithBoolean:NO];
}

- (void)setXYMinMaxForSetCoordSystem {
  xmin_ = (-[self getxZero] * [self getInvXscale]);
  xmax_ = (([self getWidth] - [self getxZero]) * [self getInvXscale]);
  ymax_ = ([self getyZero] * [self getInvYscale]);
  ymin_ = (([self getyZero] - [self getHeight]) * [self getInvYscale]);
}

- (void)zoomAroundCenterWithDouble:(jdouble)zoomFactor {
  if (![self isZoomable]) {
    return;
  }
  GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, [self getXscale] * zoomFactor);
  GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, [self getYscale] * zoomFactor);
  xZero_ = -[self getXmin] * [self getXscale];
  [self setWidthWithInt:J2ObjCFpToInt((([self getXmax] * [self getXscale]) + [self getxZero]))];
  yZero_ = [self getYmax] * [self getYscale];
  [self setHeightWithInt:J2ObjCFpToInt(([self getyZero] - ([self getYmin] * [self getYscale])))];
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  [self calcPrintingScale];
  if (evNo_ != GeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setEuclidianViewBoundsWithInt:evNo_ withDouble:[self getXmin] withDouble:[self getXmax] withDouble:[self getYmin] withDouble:[self getYmax] withDouble:[self getXscale] withDouble:[self getYscale]];
  }
  GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (void)setCoordTransformIfNeeded {
  GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
}

- (void)updateAllDrawablesWithBoolean:(jboolean)repaint {
  GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, repaint);
}

- (void)startBatchUpdate {
  self->batchUpdate_ = YES;
}

- (void)endBatchUpdate {
  self->batchUpdate_ = NO;
  if (self->needsAllDrawablesUpdate_) {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) updateAll];
    [self repaint];
  }
}

- (void)drawListAsComboBoxWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
                                                  withBoolean:(jboolean)b {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) setDrawAsComboBoxWithBoolean:b];
  GeogebraCommonEuclidianDrawDrawList *d = (GeogebraCommonEuclidianDrawDrawList *) check_class_cast(GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(self, list), [GeogebraCommonEuclidianDrawDrawList class]);
  if (d != nil) {
    [d resetDrawType];
  }
}

- (void)calcPrintingScale {
  jdouble unitPerCM = GeogebraCommonEuclidianEuclidianView_PRINTER_PIXEL_PER_CM / [self getXscale];
  jint exp = (jint) JavaLangMath_roundWithDouble_(JavaLangMath_logWithDouble_(unitPerCM) / JavaLangMath_logWithDouble_(10));
  printingScale_ = JavaLangMath_powWithDouble_withDouble_(10, -exp);
}

- (void)setAxesIntervalsWithDouble:(jdouble)scale_
                           withInt:(jint)axis {
  jdouble maxPix = 100;
  jdouble units = maxPix / scale_;
  jint exp = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_logWithDouble_(units) / JavaLangMath_logWithDouble_(10)));
  jint maxFractionDigtis = JavaLangMath_maxWithInt_withInt_(-exp, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintDecimals]);
  if (IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), axis)) {
    if ((axis == 1) && IOSBooleanArray_Get(automaticAxesNumberingDistances_, 0) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(xscale_, yscale_)) {
      if (IOSBooleanArray_Get(nil_chk(piAxisUnit_), 0) == IOSBooleanArray_Get(piAxisUnit_, 1)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0);
      }
      else if (IOSBooleanArray_Get(piAxisUnit_, 0)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0) / JavaLangMath_PI;
      }
      else if (IOSBooleanArray_Get(piAxisUnit_, 1)) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), 1) = IOSDoubleArray_Get(axesNumberingDistances_, 0) * JavaLangMath_PI;
      }
    }
    else if (IOSBooleanArray_Get(nil_chk(piAxisUnit_), axis)) {
      *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = JavaLangMath_PI;
    }
    else {
      jdouble pot = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(JavaLangMath_powWithDouble_withDouble_(10, exp));
      jdouble n = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(units / pot);
      if (n > 5) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = 5 * pot;
      }
      else if (n > 2) {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = 2 * pot;
      }
      else {
        *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = pot;
      }
    }
  }
  *IOSDoubleArray_GetRef(nil_chk(AxesTickInterval_), axis) = IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), axis) / 2.0;
  if ((IOSDoubleArray_Get(axesNumberingDistances_, axis) < 10E-6) || (IOSDoubleArray_Get(axesNumberingDistances_, axis) > 10E6)) {
    maxFractionDigtis = JavaLangMath_minWithInt_withInt_(14, maxFractionDigtis);
    IOSObjectArray_Set(nil_chk(axesNumberFormat_), axis, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"0.##E0" withInt:maxFractionDigtis]);
  }
  else {
    IOSObjectArray_Set(nil_chk(axesNumberFormat_), axis, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"###0.##" withInt:maxFractionDigtis]);
  }
  if (automaticGridDistance_ && axis < 2) {
    *IOSDoubleArray_GetRef(nil_chk(gridDistances_), axis) = IOSDoubleArray_Get(axesNumberingDistances_, axis) * GeogebraCommonPluginEuclidianStyleConstants_get_automaticGridDistanceFactor_();
  }
}

- (jint)getFontSize {
  return fontSize_;
}

- (void)renameWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  id d = [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
  if (d != nil) {
    [((GeogebraCommonEuclidianDrawable *) check_class_cast(d, [GeogebraCommonEuclidianDrawable class])) update];
    [self repaint];
  }
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawableND *d = [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
  if (d != nil) {
    if ([d isKindOfClass:[GeogebraCommonEuclidianDrawDrawImage class]]) {
      self->updateBackgroundOnNextRepaint_ |= [((GeogebraCommonEuclidianDrawDrawImage *) check_class_cast(d, [GeogebraCommonEuclidianDrawDrawImage class])) checkInBackground];
      return;
    }
    if ((![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] || ![((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) isNeedsUpdatedBoundingBox]) && ![geo isGeoTextField] && (![geo getTrace] || [d isTracing])) {
      [d setNeedsUpdateWithBoolean:YES];
      return;
    }
    [d resetHatch];
    [d update];
  }
  else if (GeogebraCommonEuclidianEuclidianView_drawableNeededWithGeogebraCommonKernelGeosGeoElement_(self, geo) && [((JavaUtilArrayList *) nil_chk(geosWaiting_)) containsWithId:geo]) {
    [geosWaiting_ removeWithId:geo];
    [self addWithGeogebraCommonKernelGeosGeoElement:geo];
    d = [DrawableMap_ getWithId:geo];
    if (d != nil) {
      [d setNeedsUpdateWithBoolean:YES];
      [self repaint];
    }
  }
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!GeogebraCommonEuclidianEuclidianView_drawableNeededWithGeogebraCommonKernelGeosGeoElement_(self, geo)) {
    if ([self isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:geo]) {
      [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) addWithId:geo];
    }
    return;
  }
  GeogebraCommonEuclidianDrawableND *d = GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(self, geo);
  if (d != nil) {
    return;
  }
  d = [self createDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    [self addToDrawableListsWithGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *) check_class_cast(d, [GeogebraCommonEuclidianDrawable class])];
    [self repaint];
  }
}

- (jboolean)drawableNeededWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonEuclidianEuclidianView_drawableNeededWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jboolean)isPlotPanel {
  return NO;
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) removeWithId:geo];
  GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo], [GeogebraCommonEuclidianDrawable class]);
  jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
  if (d == nil) return;
  if ([GeogebraCommonEuclidianRemoveNeeded_class_() isInstance:d]) {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithGeogebraCommonEuclidianDrawable:d];
    [((id<GeogebraCommonEuclidianRemoveNeeded>) nil_chk(((id<GeogebraCommonEuclidianRemoveNeeded>) check_protocol_cast(d, @protocol(GeogebraCommonEuclidianRemoveNeeded))))) remove];
  }
  else {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithGeogebraCommonEuclidianDrawable:d];
  }
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) removeWithGeogebraCommonEuclidianDrawable:d];
  [DrawableMap_ removeWithId:geo];
  if ([geo isGeoPoint]) {
    [((JavaUtilArrayList *) nil_chk(stickyPointList_)) removeWithId:geo];
  }
  if (![((GeogebraCommonEuclidianDrawable *) nil_chk(d)) isCreatedByDrawListVisible]) [self repaint];
}

- (GeogebraCommonEuclidianHits *)getHits {
  return hits_;
}

- (jboolean)textfieldClickedWithInt:(jint)x
                            withInt:(jint)y
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    if (([d isKindOfClass:[GeogebraCommonEuclidianDrawDrawTextField class]]) && ([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) hitWithInt:x withInt:y withInt:[((GeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]] || [d hitLabelWithInt:x withInt:y])) {
      GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)setHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self setHitsWithGeogebraCommonAwtGPoint:[((GeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_)) getMouseLoc] withGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (void)setHitsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  [self setHitsWithGeogebraCommonAwtGPoint:p withInt:[((GeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]];
  if (type == GeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() && [((GeogebraCommonEuclidianHits *) nil_chk(self->hits_)) size] == 0) {
    [self setHitsWithGeogebraCommonAwtGPoint:p withInt:[app_ getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type] * 3];
  }
}

- (void)setHitsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
                                   withInt:(jint)hitThreshold {
  [((GeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (hitPointOrBoundary_ == nil) {
    GeogebraCommonEuclidianEuclidianView_setAndConsume_hitPointOrBoundary_(self, new_JavaUtilArrayList_init());
    GeogebraCommonEuclidianEuclidianView_setAndConsume_hitFilling_(self, new_JavaUtilArrayList_init());
    GeogebraCommonEuclidianEuclidianView_setAndConsume_hitLabel_(self, new_JavaUtilArrayList_init());
  }
  else {
    [hitPointOrBoundary_ clear];
    [((JavaUtilArrayList *) nil_chk(hitFilling_)) clear];
    [((JavaUtilArrayList *) nil_chk(hitLabel_)) clear];
  }
  if (p == nil) {
    return;
  }
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    if ([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) isEuclidianVisible]) {
      if ([d hitWithInt:((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:hitThreshold]) {
        GeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLastHitType] == GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()) {
          [((JavaUtilArrayList *) nil_chk(hitPointOrBoundary_)) addWithId:geo];
        }
        else {
          [((JavaUtilArrayList *) nil_chk(hitFilling_)) addWithId:geo];
        }
      }
      else if ([d hitLabelWithInt:p->x_ withInt:p->y_]) {
        GeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
        [((JavaUtilArrayList *) nil_chk(hitLabel_)) addWithId:geo];
      }
    }
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitLabel_)) {
    [hits_ addWithId:geo];
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitPointOrBoundary_)) {
    [hits_ addWithId:geo];
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hitFilling_)) {
    [hits_ addWithId:geo];
  }
  if ([hits_ getImageCount] == 0) {
    if (IOSBooleanArray_Get(nil_chk(showAxes_), 0) && (JavaLangMath_absWithDouble_(GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self) - ((GeogebraCommonAwtGPoint *) nil_chk(p))->y_) < hitThreshold)) {
      if (!IOSBooleanArray_Get(nil_chk(positiveAxes_), 0) || (GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self) < p->x_ - hitThreshold)) {
        [hits_ addWithId:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getXAxis]];
      }
    }
    if (IOSBooleanArray_Get(showAxes_, 1) && (JavaLangMath_absWithDouble_(GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self) - ((GeogebraCommonAwtGPoint *) nil_chk(p))->x_) < hitThreshold)) {
      if (!IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) || (GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self) > p->y_ - hitThreshold)) {
        [hits_ addWithId:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getYAxis]];
      }
    }
  }
  jint maxlayer = 0;
  for (jint i = 0; i < [hits_ size]; ++i) {
    GeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
    if (maxlayer < [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer]) {
      maxlayer = [geo getLayer];
    }
  }
  for (jint i = [hits_ size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] < maxlayer) {
      [hits_ removeWithInt:i];
    }
  }
  if (([hits_ size] - ([hits_ getListCount] + [hits_ getImageCount])) > 0) {
    for (jint i = [hits_ size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *geo = [hits_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList] || [geo isGeoImage]) {
        [hits_ removeWithInt:i];
      }
    }
  }
}

- (GeogebraCommonEuclidianMyButton *)getHitButtonWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
                        withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  GeogebraCommonEuclidianDrawable *d = nil;
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d2 = [it next];
    if ([d2 isKindOfClass:[GeogebraCommonEuclidianDrawDrawButton class]] && [((GeogebraCommonEuclidianDrawable *) nil_chk(d2)) hitWithInt:((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_ withInt:[((GeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]]) {
      if (d == nil || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([d2 getGeoElement])) getLayer] >= [((GeogebraCommonKernelGeosGeoElement *) nil_chk([d getGeoElement])) getLayer]) d = d2;
    }
  }
  if (d != nil) return ((GeogebraCommonEuclidianDrawDrawButton *) check_class_cast(d, [GeogebraCommonEuclidianDrawDrawButton class]))->myButton_;
  return nil;
}

- (GeogebraCommonKernelGeosGeoElement *)getLabelHitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
                          withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (![((GeogebraCommonMainApp *) nil_chk([self getApplication])) isLabelDragsEnabled]) {
    return nil;
  }
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    if ([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) hitLabelWithInt:((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ withInt:p->y_]) {
      GeogebraCommonKernelGeosGeoElement *geo = [d getGeoElement];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible]) {
        return geo;
      }
    }
  }
  return nil;
}

- (GeogebraCommonEuclidianDrawableND *)getDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (GeogebraCommonEuclidianDrawableND *)getDrawableNDWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToDrawableListsWithGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *)draw {
  if (draw == nil) {
    return;
  }
  GeogebraCommonEuclidianDrawable *d = draw;
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
  jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
  switch ([[geo getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_ANGLE:
    if ([geo isIndependent]) {
      [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithGeogebraCommonEuclidianDrawable:d];
    }
    else {
      if ([geo isDrawable]) {
        [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithGeogebraCommonEuclidianDrawable:d];
      }
      else {
        d = nil;
      }
    }
    break;
    case GeogebraCommonPluginGeoClass_IMAGE:
    if (![((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) containsWithGeogebraCommonEuclidianDrawable:d]) {
      [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithGeogebraCommonEuclidianDrawable:d];
    }
    break;
    default:
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithGeogebraCommonEuclidianDrawable:d];
    break;
  }
  if (d != nil) {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) addWithGeogebraCommonEuclidianDrawable:d];
  }
}

- (jboolean)isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonEuclidianDrawableND *)createDrawableNDWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [self createDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonEuclidianDrawableND *)createDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawableND *d = [self newDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    [((JavaUtilHashMap *) nil_chk(DrawableMap_)) putWithId:geo withId:d];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((JavaUtilArrayList *) nil_chk(stickyPointList_)) addWithId:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
    }
  }
  return d;
}

- (GeogebraCommonEuclidianDrawableND *)newDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) newDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)reset {
  [self resetMode];
  GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)resetMode {
  [self setModeWithInt:mode_];
}

- (void)setModeWithInt:(jint)mode2 {
  [self setModeWithInt:mode2 withGeogebraCommonKernelModeSetterEnum:GeogebraCommonKernelModeSetterEnum_get_TOOLBAR()];
}

- (void)repaintView {
  [self repaint];
}

- (void)updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self updateWithGeogebraCommonKernelGeosGeoElement:geo];
  if (styleBar_ != nil) [styleBar_ updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonEuclidianDrawableND *)getDrawableForWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo];
}

- (void)updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)updateDrawableFontSize {
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) updateFontSizeAll];
  [self repaint];
}

- (GeogebraCommonAwtGFont *)getFontPoint {
  if (fontPoint_ == nil) {
    return [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainFontCommon];
  }
  return fontPoint_;
}

- (void)setFontPointWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontPoint {
  GeogebraCommonEuclidianEuclidianView_setFontPointWithGeogebraCommonAwtGFont_(self, fontPoint);
}

- (GeogebraCommonAwtGFont *)getFontLine {
  return [self getFontPoint];
}

- (GeogebraCommonAwtGFont *)getFontVector {
  return [self getFontPoint];
}

- (GeogebraCommonAwtGFont *)getFontConic {
  return [self getFontPoint];
}

- (GeogebraCommonAwtGFont *)getFontCoords {
  if (fontCoords_ == nil) {
    return [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainFontCommon];
  }
  return fontCoords_;
}

- (void)setFontCoordsWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontCoords {
  GeogebraCommonEuclidianEuclidianView_setFontCoordsWithGeogebraCommonAwtGFont_(self, fontCoords);
}

- (GeogebraCommonAwtGFont *)getFontAxes {
  return [self getFontCoords];
}

- (GeogebraCommonAwtGFont *)getFontAngle {
  return [self getFontPoint];
}

- (JavaUtilArrayList *)getStickyPointList {
  return stickyPointList_;
}

- (void)setBooleanSizeWithInt:(jint)size {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setCheckboxSizeWithInt:size];
  GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (jint)getBooleanSize {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) getCheckboxSize];
}

- (void)setAllowToolTipsWithInt:(jint)setto {
  tooltipsInThisView_ = setto;
}

- (jint)getAllowToolTips {
  return GeogebraCommonEuclidianEuclidianView_getAllowToolTips(self);
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getMatrix];
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getInverseMatrix {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getMatrix];
}

- (NSString *)getFromPlaneString {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getFromPlaneString];
}

- (NSString *)getTranslatedFromPlaneString {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getTranslatedFromPlaneString];
}

- (jboolean)isDefault2D {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isDefault2D];
}

- (jboolean)isEuclidianView3D {
  return NO;
}

- (jint)getViewID {
  switch (evNo_) {
    case 1:
    return GeogebraCommonMainApp_VIEW_EUCLIDIAN;
    case 2:
    return GeogebraCommonMainApp_VIEW_EUCLIDIAN2;
    default:
    return GeogebraCommonMainApp_VIEW_NONE;
  }
}

- (void)changeLayerWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                  withInt:(jint)oldlayer
                                                  withInt:(jint)newlayer {
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), oldlayer))) removeWithGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *) check_class_cast([((JavaUtilHashMap *) nil_chk(DrawableMap_)) getWithId:geo], [GeogebraCommonEuclidianDrawable class])];
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(drawLayers_, newlayer))) addWithGeogebraCommonEuclidianDrawable:(GeogebraCommonEuclidianDrawable *) check_class_cast([DrawableMap_ getWithId:geo], [GeogebraCommonEuclidianDrawable class])];
}

- (id<GeogebraCommonKernelKernelNDGeoPlaneND>)getPlaneContaining {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getPlaneContaining];
}

- (id<GeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getDirection];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsForViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:coords];
}

- (jboolean)isMoveableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) isMoveableWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algoParent {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:algoParent];
}

- (void)replaceBoundObjectWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num
                          withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num2 {
  if (xmaxObject_ == num) {
    GeogebraCommonEuclidianEuclidianView_set_xmaxObject_(self, num2);
  }
  if (xminObject_ == num) {
    GeogebraCommonEuclidianEuclidianView_set_xminObject_(self, num2);
  }
  if (ymaxObject_ == num) {
    GeogebraCommonEuclidianEuclidianView_set_ymaxObject_(self, num2);
  }
  if (yminObject_ == num) {
    GeogebraCommonEuclidianEuclidianView_set_yminObject_(self, num2);
  }
  [self updateBoundsWithBoolean:YES];
}

- (jint)getRightAngleStyle {
  return ((GeogebraCommonMainApp *) nil_chk([self getApplication]))->rightAngleStyle_;
}

- (jboolean)isAutomaticGridDistance {
  return automaticGridDistance_;
}

- (IOSDoubleArray *)getGridDistances {
  return gridDistances_;
}

- (void)setGridDistancesWithDoubleArray:(IOSDoubleArray *)dist {
  if (dist == nil) {
    return;
  }
  GeogebraCommonEuclidianEuclidianView_set_gridDistances_(self, dist);
  [self setAutomaticGridDistanceWithBoolean:NO];
}

- (jint)getGridLineStyle {
  return gridLineStyle_;
}

- (void)setAutomaticGridDistanceWithBoolean:(jboolean)flag {
  automaticGridDistance_ = flag;
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  if (flag) {
    *IOSDoubleArray_GetRef(nil_chk(gridDistances_), 2) = JavaLangMath_PI / 6;
  }
}

- (jint)getAxesLineStyle {
  return axesLineType_;
}

- (void)setAxesLineStyleWithInt:(jint)axesLineStyle {
  self->axesLineType_ = axesLineStyle;
}

- (id<GeogebraCommonAwtGAffineTransform>)getCoordTransform {
  if (coordTransform_ == nil) GeogebraCommonEuclidianEuclidianView_set_coordTransform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  return coordTransform_;
}

- (void)setCoordTransformWithGeogebraCommonAwtGAffineTransform:(id<GeogebraCommonAwtGAffineTransform>)coordTransform {
  GeogebraCommonEuclidianEuclidianView_set_coordTransform_(self, coordTransform);
}

- (void)updateBackground {
  GeogebraCommonEuclidianEuclidianView_updateBackground(self);
}

- (id<GeogebraCommonAwtGGraphics2D>)getTempGraphics2DWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontForGraphics {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonAwtGFont *)getFont {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setHeightWithInt:(jint)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setWidthWithInt:(jint)h {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setStyleBarModeWithInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

+ (jboolean)usesSelectionAsInputWithInt:(jint)mode {
  return GeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(mode);
}

+ (jboolean)usesSelectionRectangleAsInputWithInt:(jint)mode {
  return GeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(mode);
}

- (void)setSelectionRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)selectionRectangle {
  GeogebraCommonEuclidianEuclidianView_set_selectionRectangle_(self, selectionRectangle);
}

- (IOSDoubleArray *)getAxesCross {
  return axisCross_;
}

- (void)setAxesCrossWithDoubleArray:(IOSDoubleArray *)axisCross {
  GeogebraCommonEuclidianEuclidianView_set_axisCross_(self, axisCross);
}

- (void)setAxisCrossWithInt:(jint)axis
                 withDouble:(jdouble)cross {
  *IOSDoubleArray_GetRef(nil_chk(axisCross_), axis) = cross;
}

- (IOSBooleanArray *)getPositiveAxes {
  return positiveAxes_;
}

- (void)setPositiveAxesWithBooleanArray:(IOSBooleanArray *)positiveAxis {
  GeogebraCommonEuclidianEuclidianView_set_positiveAxes_(self, positiveAxis);
}

- (void)setPositiveAxisWithInt:(jint)axis
                   withBoolean:(jboolean)isPositiveAxis {
  *IOSBooleanArray_GetRef(nil_chk(positiveAxes_), axis) = isPositiveAxis;
}

- (IOSBooleanArray *)getDrawBorderAxes {
  return drawBorderAxes_;
}

- (void)setDrawBorderAxesWithBooleanArray:(IOSBooleanArray *)drawBorderAxes {
  GeogebraCommonEuclidianEuclidianView_set_drawBorderAxes_(self, drawBorderAxes);
  [self setAxesCornerCoordsVisibleWithBoolean:!(IOSBooleanArray_Get(nil_chk(drawBorderAxes), 0) || IOSBooleanArray_Get(drawBorderAxes, 1))];
}

- (jboolean)isAxesCornerCoordsVisible {
  return showAxesCornerCoords_;
}

- (void)setAxesCornerCoordsVisibleWithBoolean:(jboolean)showAxesCornerCoords {
  self->showAxesCornerCoords_ = showAxesCornerCoords;
}

- (jdouble)getPrintingScale {
  return printingScale_;
}

- (void)setPrintingScaleWithDouble:(jdouble)printingScale {
  self->printingScale_ = printingScale;
}

- (IOSObjectArray *)getAxesLabelsWithBoolean:(jboolean)addBoldItalicTags {
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(axesLabels_))->size_ type:NSString_class_()];
  for (jint axis = 0; axis < axesLabels_->size_; axis++) {
    IOSObjectArray_Set(ret, axis, IOSObjectArray_Get(axesLabels_, axis));
  }
  if (addBoldItalicTags) {
    for (jint axis = 0; axis < axesLabels_->size_; axis++) {
      if (IOSObjectArray_Get(axesLabels_, axis) != nil) {
        IOSObjectArray_Set(ret, axis, [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(self->settings_)) axisLabelForXMLWithInt:axis]);
      }
    }
  }
  return ret;
}

- (void)setAxesLabelsWithNSStringArray:(IOSObjectArray *)axesLabels {
  [self setAxisLabelWithInt:0 withNSString:IOSObjectArray_Get(nil_chk(axesLabels), 0)];
  [self setAxisLabelWithInt:1 withNSString:IOSObjectArray_Get(axesLabels, 1)];
}

- (void)setAxisLabelWithInt:(jint)axis
               withNSString:(NSString *)axLabel {
  NSString *axisLabel = axLabel;
  if ((axisLabel == nil) || (((jint) [axisLabel length]) == 0)) {
    IOSObjectArray_Set(nil_chk(axesLabels_), axis, nil);
  }
  else {
    *IOSIntArray_GetRef(nil_chk(axesLabelsStyle_), axis) = GeogebraCommonAwtGFont_PLAIN;
    if ([axisLabel hasPrefix:@"<i>"] && [axisLabel hasSuffix:@"</i>"]) {
      axisLabel = [axisLabel substring:3 endIndex:((jint) [axisLabel length]) - 4];
      *IOSIntArray_GetRef(axesLabelsStyle_, axis) |= GeogebraCommonAwtGFont_ITALIC;
    }
    if ([((NSString *) nil_chk(axisLabel)) hasPrefix:@"<b>"] && [axisLabel hasSuffix:@"</b>"]) {
      axisLabel = [axisLabel substring:3 endIndex:((jint) [axisLabel length]) - 4];
      *IOSIntArray_GetRef(axesLabelsStyle_, axis) |= GeogebraCommonAwtGFont_BOLD;
    }
    IOSObjectArray_Set(nil_chk(axesLabels_), axis, axisLabel);
  }
}

- (jdouble)getScaleWithInt:(jint)i {
  if (i == 0) {
    return [self getXscale];
  }
  return [self getYscale];
}

- (void)setAutomaticAxesNumberingDistanceWithBoolean:(jboolean)flag
                                             withInt:(jint)axis {
  *IOSBooleanArray_GetRef(nil_chk(automaticAxesNumberingDistances_), axis) = flag;
  [self setAxesIntervalsWithDouble:[self getScaleWithInt:axis] withInt:axis];
}

- (IOSBooleanArray *)isAutomaticAxesNumberingDistance {
  return automaticAxesNumberingDistances_;
}

- (IOSDoubleArray *)getAxesNumberingDistances {
  return axesNumberingDistances_;
}

- (void)setAxesNumberingDistanceWithDouble:(jdouble)dist
                                   withInt:(jint)axis {
  if (!JavaLangDouble_isNaNWithDouble_(dist)) {
    *IOSDoubleArray_GetRef(nil_chk(axesNumberingDistances_), axis) = dist;
    [self setAutomaticAxesNumberingDistanceWithBoolean:NO withInt:axis];
  }
  else {
    [self setAutomaticAxesNumberingDistanceWithBoolean:YES withInt:axis];
  }
}

- (jboolean)getGridIsBold {
  return gridIsBold_;
}

- (IOSBooleanArray *)getShowAxesNumbers {
  return showAxesNumbers_;
}

- (void)setShowAxesNumbersWithBooleanArray:(IOSBooleanArray *)showAxesNumbers {
  GeogebraCommonEuclidianEuclidianView_set_showAxesNumbers_(self, showAxesNumbers);
}

- (void)setShowAxisNumbersWithInt:(jint)axis
                      withBoolean:(jboolean)showAxisNumbers {
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), axis) = showAxisNumbers;
}

- (IOSObjectArray *)getAxesUnitLabels {
  return axesUnitLabels_;
}

- (void)setAxesUnitLabelsWithNSStringArray:(IOSObjectArray *)axesUnitLabels {
  GeogebraCommonEuclidianEuclidianView_set_axesUnitLabels_(self, axesUnitLabels);
  for (jint i = 0; i < [self getDimension]; i++) {
    *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), i) = ((IOSObjectArray_Get(nil_chk(axesUnitLabels), i) != nil) && [((NSString *) nil_chk(IOSObjectArray_Get(axesUnitLabels, i))) isEqual:GeogebraCommonUtilUnicode_get_PI_STRING_()]);
  }
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
}

- (IOSIntArray *)getAxesTickStyles {
  return axesTickStyles_;
}

- (void)setAxisTickStyleWithInt:(jint)axis
                        withInt:(jint)tickStyle {
  *IOSIntArray_GetRef(nil_chk(axesTickStyles_), axis) = tickStyle;
}

- (void)setAxesTickStylesWithIntArray:(IOSIntArray *)axesTickStyles {
  GeogebraCommonEuclidianEuclidianView_set_axesTickStyles_(self, axesTickStyles);
}

- (void)setShowMouseCoordsWithBoolean:(jboolean)b {
  showMouseCoords_ = b;
}

- (jboolean)getAllowShowMouseCoords {
  return allowShowMouseCoords_;
}

- (void)setAllowShowMouseCoordsWithBoolean:(jboolean)neverShowMouseCoords {
  self->allowShowMouseCoords_ = neverShowMouseCoords;
}

- (jboolean)getShowMouseCoords {
  return showMouseCoords_;
}

- (void)setShowAxesRatioWithBoolean:(jboolean)b {
  showAxesRatio_ = b;
}

- (id<GeogebraCommonEuclidianPreviewable>)getPreviewDrawable {
  return previewDrawable_;
}

- (jdouble)getGridDistancesWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(gridDistances_), i);
}

- (jboolean)getShowGrid {
  return showGrid__;
}

- (jboolean)isGridOrAxesShown {
  return IOSBooleanArray_Get(nil_chk(showAxes_), 0) || IOSBooleanArray_Get(showAxes_, 1) || showGrid__;
}

- (jboolean)getShowAxisWithInt:(jint)axis {
  return IOSBooleanArray_Get(nil_chk(showAxes_), axis);
}

- (jboolean)getShowXaxis {
  return [self getShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X];
}

- (jboolean)getShowYaxis {
  return [self getShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y];
}

- (jboolean)getLogAxisWithInt:(jint)axis {
  return IOSBooleanArray_Get(nil_chk(logAxes_), axis);
}

- (jboolean)getXaxisLog {
  return [self getLogAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X];
}

- (jboolean)getYaxisLog {
  return [self getLogAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_LINE()) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_PERPENDICULAR_BISECTOR()) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewAngleBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withGeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_(self, selectedPoints, GeogebraCommonEuclidianDrawDrawLine_PreviewTypeEnum_get_ANGLE_BISECTOR()) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewSegmentWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewRayWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewVectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawVector_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewConicWithInt:(jint)mode1
                                              withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, mode1, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewParabolaWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                               withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return [new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, selectedPoints, selectedLines) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPolygonWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawPolygon_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewAngleWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonEuclidianDrawDrawPolyLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (void)updatePreviewable {
  GeogebraCommonAwtGPoint *mouseLoc = ((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController]))->mouseLoc_;
  [((id<GeogebraCommonEuclidianPreviewable>) nil_chk([self getPreviewDrawable])) updateMousePosWithDouble:GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc))->x_) withDouble:GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, mouseLoc->y_)];
}

- (void)updatePreviewableForProcessMode {
  if ([self getPreviewDrawable] != nil) {
    [((id<GeogebraCommonEuclidianPreviewable>) nil_chk([self getPreviewDrawable])) updatePreview];
  }
}

- (void)mouseEntered {
  hasMouse__ = YES;
}

- (void)mouseExited {
  hasMouse__ = NO;
}

- (jboolean)hasMouse {
  return GeogebraCommonEuclidianEuclidianView_hasMouse2D(self);
}

- (jboolean)hasMouse2D {
  return GeogebraCommonEuclidianEuclidianView_hasMouse2D(self);
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewParallelLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                   withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, selectedPoints, selectedLines, YES) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                        withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return [new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_withBoolean_(self, selectedPoints, selectedLines, NO) autorelease];
}

- (void)setApplicationWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)application {
  GeogebraCommonEuclidianEuclidianView_set_app_(self, application);
}

- (GeogebraCommonMainApp *)getApplication {
  return self->app_;
}

- (void)updateFonts {
  [self setFontSizeWithInt:[((GeogebraCommonMainApp *) nil_chk([self getApplication])) getFontSize]];
  GeogebraCommonEuclidianEuclidianView_setFontPointWithGeogebraCommonAwtGFont_(self, [((GeogebraCommonAwtGFont *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getPlainFontCommon])) deriveFontWithInt:GeogebraCommonAwtGFont_PLAIN withInt:[self getFontSize]]);
  GeogebraCommonEuclidianEuclidianView_setFontCoordsWithGeogebraCommonAwtGFont_(self, [((GeogebraCommonAwtGFont *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getPlainFontCommon])) deriveFontWithInt:GeogebraCommonAwtGFont_PLAIN withInt:[self getFontSize] - 2]);
  [self updateDrawableFontSize];
  GeogebraCommonEuclidianEuclidianView_updateBackground(self);
}

- (void)updateSize {
  [self updateSizeKeepDrawables];
  GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

- (void)updateSizeKeepDrawables {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)requestFocusInWindow {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)drawGeometricObjectsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  jint layer;
  for (layer = 0; layer <= [((GeogebraCommonMainApp *) nil_chk([self getApplication])) getMaxLayerUsed]; layer++) {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) drawAllWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)drawObjectsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [self drawGeometricObjectsWithGeogebraCommonAwtGGraphics2D:g2];
  [self drawActionObjectsWithGeogebraCommonAwtGGraphics2D:g2];
  if (previewDrawable_ != nil) {
    [previewDrawable_ drawPreviewWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)clearBackgroundWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g {
  GeogebraCommonEuclidianEuclidianView_clearBackgroundWithGeogebraCommonAwtGGraphics2D_(self, g);
}

- (void)drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g
                                                     withBoolean:(jboolean)transparency {
  if (!transparency) {
    GeogebraCommonEuclidianEuclidianView_clearBackgroundWithGeogebraCommonAwtGGraphics2D_(self, g);
  }
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) drawAllWithGeogebraCommonAwtGGraphics2D:g];
  GeogebraCommonEuclidianEuclidianView_drawBackgroundWithGeogebraCommonAwtGGraphics2D_withBoolean_(self, g, NO);
}

- (void)drawAxesRatioWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonAwtGPoint *pos = ((GeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_))->mouseLoc_;
  if (pos == nil) {
    return;
  }
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_darkGray_()];
  [g2 setFontWithGeogebraCommonAwtGFont:[self getFontLine]];
  [g2 drawStringWithNSString:[self getXYscaleRatioString] withInt:((GeogebraCommonAwtGPoint *) nil_chk(pos))->x_ + 15 withInt:pos->y_ + 30];
}

- (void)paintBackgroundWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setReInitingWithBoolean:(jboolean)reiniting {
  reIniting_ = reiniting;
  if (reiniting) {
    firstPaint_ = YES;
    GeogebraCommonEuclidianEuclidianView_set_bgImage_(self, nil);
    GeogebraCommonEuclidianEuclidianView_set_bgGraphics_(self, nil);
  }
}

- (void)paintWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  @synchronized([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConcurrentModificationLock]) {
    [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) paintWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)paintTheBackgroundWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (bgImage_ == nil) {
    if (firstPaint_) {
      if (([self getWidth] > 1) && ([self getHeight] > 1) && (!reIniting_)) {
        [self updateSizeKeepDrawables];
        [self paintBackgroundWithGeogebraCommonAwtGGraphics2D:g2];
        firstPaint_ = NO;
      }
      else {
        [self drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:g2];
      }
    }
    else {
      [self drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
  else {
    [self paintBackgroundWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)updateBackgroundImage {
  GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)drawZoomRectangleWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:GeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianEuclidianView_boldAxesStroke_];
  [g2 fillWithGeogebraCommonAwtGShape:selectionRectangle_];
  [g2 setColorWithGeogebraCommonAwtGColor:GeogebraCommonEuclidianEuclidianView_colZoomRectangle_];
  [g2 drawWithGeogebraCommonAwtGShape:selectionRectangle_];
}

- (void)drawRectWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)col
               withGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)stroke
                 withGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:col];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:stroke];
  [g2 drawWithGeogebraCommonAwtGShape:rect];
}

- (void)drawMouseCoordsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  if (((GeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_))->mouseLoc_ == nil) {
    return;
  }
  GeogebraCommonAwtGPoint *pos = euclidianController_->mouseLoc_;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb setLengthWithInt:0];
  [sb appendWithChar:'('];
  [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(euclidianController_->xRW_) withGeogebraCommonKernelStringTemplate:tpl]];
  if ([kernel_ getCoordStyle] == GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN) {
    [sb appendWithNSString:@" | "];
  }
  else {
    [sb appendWithNSString:@", "];
  }
  [sb appendWithNSString:[kernel_ formatWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(euclidianController_->yRW_) withGeogebraCommonKernelStringTemplate:tpl]];
  [sb appendWithChar:')'];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_darkGray_()];
  [g2 setFontWithGeogebraCommonAwtGFont:[self getFontCoords]];
  [g2 drawStringWithNSString:[sb description] withInt:((GeogebraCommonAwtGPoint *) nil_chk(pos))->x_ + 15 withInt:pos->y_ + 15];
}

- (void)drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g {
  [self drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:g withBoolean:NO];
}

- (void)drawBackgroundWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g
                                           withBoolean:(jboolean)clear {
  GeogebraCommonEuclidianEuclidianView_drawBackgroundWithGeogebraCommonAwtGGraphics2D_withBoolean_(self, g, clear);
}

- (void)drawGridWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianEuclidianView_drawGridWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jdouble)getXAxisCrossingPixel {
  return GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self);
}

- (jdouble)getYAxisCrossingPixel {
  return GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self);
}

- (void)drawAxesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  jdouble xCrossPix = GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(self);
  jdouble yCrossPix = GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(self);
  jint yAxisEnd = IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) ? J2ObjCFpToInt(yCrossPix) : [self getHeight];
  jint xAxisStart = IOSBooleanArray_Get(positiveAxes_, 0) ? J2ObjCFpToInt(xCrossPix) : 0;
  jdouble yZeroTick = yCrossPix;
  jdouble xZeroTick = xCrossPix;
  jdouble yBig = yCrossPix + 4;
  jdouble xBig = xCrossPix - 4;
  jdouble ySmall1 = yCrossPix + 0;
  jdouble ySmall2 = yCrossPix + 2;
  jdouble xSmall1 = xCrossPix - 0;
  jdouble xSmall2 = xCrossPix - 2;
  jint xoffset, yoffset;
  jboolean bold = [self areAxesBold];
  jboolean filled = (axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_FILL_ARROWS) != 0;
  if (filled && gp_ == nil) {
    GeogebraCommonEuclidianEuclidianView_set_gp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
  }
  jboolean drawRightArrow = ((axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_RIGHT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 0) && ([self getXmax] < IOSDoubleArray_Get(nil_chk(axisCross_), 1)));
  jboolean drawTopArrow = ((axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_RIGHT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 1) && ([self getYmax] < IOSDoubleArray_Get(nil_chk(axisCross_), 0)));
  jboolean drawLeftArrow = ((axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_LEFT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 0));
  jboolean drawBottomArrow = ((axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_LEFT_ARROW) != 0) && !(IOSBooleanArray_Get(positiveAxes_, 1));
  IOSBooleanArray *drawMajorTicks = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ IOSIntArray_Get(nil_chk(axesTickStyles_), 0) <= 1, IOSIntArray_Get(axesTickStyles_, 1) <= 1 } count:2];
  IOSBooleanArray *drawMinorTicks = [IOSBooleanArray arrayWithBooleans:(jboolean[]){ IOSIntArray_Get(axesTickStyles_, 0) == 0, IOSIntArray_Get(axesTickStyles_, 1) == 0 } count:2];
  GeogebraCommonAwtGFontRenderContext *frc = [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFontRenderContext];
  [g2 setFontWithGeogebraCommonAwtGFont:[self getFontAxes]];
  jint fontsize = [((GeogebraCommonAwtGFont *) nil_chk([self getFontAxes])) getSize];
  jint arrowSize = fontsize / 3;
  [g2 setPaintWithGeogebraCommonAwtGPaint:axesColor_];
  if (bold) {
    GeogebraCommonEuclidianEuclidianView_set_axesStroke_(self, GeogebraCommonEuclidianEuclidianView_boldAxesStroke_);
    GeogebraCommonEuclidianEuclidianView_set_tickStroke_(self, GeogebraCommonEuclidianEuclidianView_boldAxesStroke_);
    ySmall2++;
    xSmall2--;
    arrowSize += 1;
  }
  else {
    GeogebraCommonEuclidianEuclidianView_set_axesStroke_(self, GeogebraCommonEuclidianEuclidianView_defAxesStroke_);
    GeogebraCommonEuclidianEuclidianView_set_tickStroke_(self, GeogebraCommonEuclidianEuclidianView_defAxesStroke_);
  }
  jdouble arrowAdjustx = drawRightArrow ? [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(axesStroke_)) getLineWidth] : 0;
  jdouble arrowAdjusty = drawTopArrow ? [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(axesStroke_)) getLineWidth] : 0;
  if (GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self)) {
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:axesStroke_];
    [g2 drawStraightLineWithDouble:xCrossPix withDouble:arrowAdjusty + (drawTopArrow ? 1 : -1) withDouble:xCrossPix withDouble:yAxisEnd + (drawBottomArrow ? -2 : 0)];
    if (drawTopArrow) {
      if (filled) {
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) xCrossPix withFloat:(jfloat) arrowAdjusty];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix - arrowSize) withFloat:(jfloat) (arrowAdjusty + 4 * arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix + arrowSize) withFloat:(jfloat) (arrowAdjusty + 4 * arrowSize)];
        [g2 fillWithGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:xCrossPix + 0.5 withDouble:arrowAdjusty withDouble:xCrossPix - arrowSize withDouble:arrowAdjusty + arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:xCrossPix - 0.5 withDouble:arrowAdjusty withDouble:xCrossPix + arrowSize withDouble:arrowAdjusty + arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
      }
    }
    if (drawBottomArrow) {
      if (filled) {
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) xCrossPix withFloat:(jfloat) ([self getHeight] - arrowAdjusty)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix - arrowSize) withFloat:(jfloat) ([self getHeight] - arrowAdjusty - 4 * arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (xCrossPix + arrowSize) withFloat:(jfloat) ([self getHeight] - arrowAdjusty - 4 * arrowSize)];
        [g2 fillWithGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:xCrossPix + 0.5 withDouble:[self getHeight] - arrowAdjusty withDouble:xCrossPix - arrowSize withDouble:[self getHeight] - arrowAdjusty - arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:xCrossPix - 0.5 withDouble:[self getHeight] - arrowAdjusty withDouble:xCrossPix + arrowSize withDouble:[self getHeight] - arrowAdjusty - arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
      }
    }
  }
  if (GeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self)) {
    yoffset = fontsize + 4;
    xoffset = 1;
    if (IOSObjectArray_Get(nil_chk(axesLabels_), 0) != nil) {
      id<GeogebraCommonAwtFontGTextLayout> layout = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:IOSObjectArray_Get(axesLabels_, 0) withGeogebraCommonAwtGFont:[((GeogebraCommonAwtGFont *) nil_chk([self getFontLine])) deriveFontWithInt:IOSIntArray_Get(nil_chk(axesLabelsStyle_), 0)] withGeogebraCommonAwtGFontRenderContext:frc];
      [((id<GeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) drawWithGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt(([self getWidth] - 10 - GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_(IOSObjectArray_Get(axesLabels_, 0), [self getFontAxes]))) withInt:J2ObjCFpToInt((yCrossPix - 4))];
    }
    jdouble rw = [self getXmin] - (fmod([self getXmin], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 0)));
    jint labelno = (jint) JavaLangMath_roundWithDouble_(rw / IOSDoubleArray_Get(axesNumberingDistances_, 0));
    jdouble smallTickOffset = 0;
    jdouble axesStep = [self getXscale] * IOSDoubleArray_Get(axesNumberingDistances_, 0);
    if (IOSBooleanArray_Get(nil_chk([self getPositiveAxes]), 0) && (GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(rw, [self getXmin]))) {
      rw = GeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), 1), IOSDoubleArray_Get(axesNumberingDistances_, 0));
      smallTickOffset = axesStep;
      labelno = 0;
    }
    jdouble pix = [self getxZero] + (rw * [self getXscale]);
    jdouble smallTickPix;
    jdouble tickStep = axesStep / 2;
    jdouble labelLengthMax = JavaLangMath_maxWithDouble_withDouble_(GeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withGeogebraCommonAwtGFont_(self, rw, [self getFontAxes]), GeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withGeogebraCommonAwtGFont_(self, GeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_([self getXmax], IOSDoubleArray_Get(axesNumberingDistances_, 0)), [self getFontAxes]));
    jint unitsPerLabelX = J2ObjCFpToInt(GeogebraCommonUtilMyMath_nextPrettyNumberWithDouble_(labelLengthMax / axesStep));
    if (pix < GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_) {
      if (IOSBooleanArray_Get(drawMajorTicks, 0)) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
      }
      pix += axesStep;
      if (![self getXaxisLog] || [self getXmin] < 0) rw += IOSDoubleArray_Get(axesNumberingDistances_, 0);
      labelno += 1;
    }
    jint maxX = [self getWidth] - GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:axesStroke_];
    [g2 drawStraightLineWithDouble:xAxisStart + (drawLeftArrow ? 2 : 0) withDouble:yCrossPix withDouble:[self getWidth] - arrowAdjustx - 1 withDouble:yCrossPix];
    if (drawRightArrow) {
      if (filled) {
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx) withFloat:(jfloat) yCrossPix];
        [gp_ lineToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx - arrowSize * 4) withFloat:(jfloat) (yCrossPix - arrowSize)];
        [gp_ lineToWithFloat:(jfloat) ([self getWidth] - arrowAdjustx - arrowSize * 4) withFloat:(jfloat) (yCrossPix + arrowSize)];
        [g2 fillWithGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:[self getWidth] - arrowAdjustx withDouble:yCrossPix + 0.5 withDouble:[self getWidth] - arrowAdjustx - arrowSize withDouble:yCrossPix - arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:[self getWidth] - arrowAdjustx withDouble:yCrossPix - 0.5 withDouble:[self getWidth] - arrowAdjustx - arrowSize withDouble:yCrossPix + arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
      }
    }
    if (drawLeftArrow) {
      if (filled) {
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
        [gp_ moveToWithFloat:(jfloat) (arrowAdjustx) withFloat:(jfloat) yCrossPix];
        [gp_ lineToWithFloat:(jfloat) (arrowAdjustx + arrowSize * 4) withFloat:(jfloat) (yCrossPix - arrowSize)];
        [gp_ lineToWithFloat:(jfloat) (arrowAdjustx + arrowSize * 4) withFloat:(jfloat) (yCrossPix + arrowSize)];
        [g2 fillWithGeogebraCommonAwtGShape:gp_];
      }
      else {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(tempLine_)) setLineWithDouble:arrowAdjustx withDouble:yCrossPix + 0.5 withDouble:arrowAdjustx + arrowSize withDouble:yCrossPix - arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
        [tempLine_ setLineWithDouble:arrowAdjustx withDouble:yCrossPix - 0.5 withDouble:arrowAdjustx + arrowSize withDouble:yCrossPix + arrowSize];
        [g2 drawWithGeogebraCommonAwtGShape:tempLine_];
      }
    }
    NSString *crossAtStr = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:IOSDoubleArray_Get(nil_chk(axisCross_), 1) withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 0) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    *IOSDoubleArray_GetRef(axesNumberingDistances_, 0) = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 0));
    jint count = 0;
    jdouble rwBase = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
    for (; pix < [self getWidth]; count++, pix += [self getXaxisLog] ? 0 : axesStep) {
      if ([self getXaxisLog]) {
        jdouble r = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 0) * count);
        if (JavaLangMath_roundWithDouble_(r) == r) rw = JavaLangMath_powWithDouble_withDouble_(10, r);
        else {
          rw = JavaLangMath_powWithDouble_withDouble_(10, J2ObjCFpToInt(r));
          jdouble decimal = r - J2ObjCFpToInt(r);
          rw = decimal * 10 * rw;
        }
        pix = GeogebraCommonEuclidianEuclidianView_toScreenCoordXdWithDouble_(self, rw);
      }
      else rw = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 0) * count);
      if (pix >= xAxisStart && pix <= maxX) {
        if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 0)) {
          NSString *strNum = [kernel_ formatPiEWithDouble:rw withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 0) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          if ((labelno % unitsPerLabelX) == 0) {
            JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(strNum) autorelease];
            if ([sb charAtWithInt:0] == '-') {
              [sb setCharAtWithInt:0 withChar:GeogebraCommonUtilUnicode_nDash];
            }
            if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 0) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 0)) {
              [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 0)];
            }
            jint x, y = J2ObjCFpToInt((yCrossPix + yoffset));
            jboolean zero = [((NSString *) nil_chk(strNum)) isEqual:crossAtStr];
            if (zero && IOSBooleanArray_Get(nil_chk(showAxes_), 1) && !IOSBooleanArray_Get(positiveAxes_, 1) && IOSDoubleArray_Get(axisCross_, 1) == 0) {
              x = J2ObjCFpToInt((pix + 6));
            }
            else {
              x = J2ObjCFpToInt(((pix + xoffset) - (GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_([sb description], [self getFontAxes]) / 2)));
            }
            GeogebraCommonEuclidianEuclidianView_drawStringWithGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, [sb description], x, y);
            [((JavaUtilArrayList *) nil_chk(axesLabelsPositionsX_)) addWithId:[new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + GeogebraCommonKernelKernel_MIN_PRECISION))) autorelease]];
          }
        }
        if (IOSBooleanArray_Get(drawMajorTicks, 0) && rw != IOSDoubleArray_Get(axisCross_, 1)) {
          [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
          [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
        }
      }
      else if (IOSBooleanArray_Get(drawMajorTicks, 0) && !drawRightArrow) {
        [g2 drawStraightLineWithDouble:pix withDouble:yZeroTick withDouble:pix withDouble:yBig];
      }
      smallTickPix = (pix - tickStep) + smallTickOffset;
      if (IOSBooleanArray_Get(drawMinorTicks, 0)) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:smallTickPix withDouble:ySmall1 withDouble:smallTickPix withDouble:ySmall2];
      }
      labelno++;
    }
    smallTickPix = (pix - tickStep) + smallTickOffset;
    if (IOSBooleanArray_Get(drawMinorTicks, 0)) {
      [g2 drawStraightLineWithDouble:smallTickPix withDouble:ySmall1 withDouble:smallTickPix withDouble:ySmall2];
    }
  }
  if (GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self)) {
    xoffset = -4 - (fontsize / 4);
    yoffset = (fontsize / 2) - 1;
    if (IOSObjectArray_Get(nil_chk(axesLabels_), 1) != nil) {
      id<GeogebraCommonAwtFontGTextLayout> layout = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:IOSObjectArray_Get(axesLabels_, 1) withGeogebraCommonAwtGFont:[((GeogebraCommonAwtGFont *) nil_chk([self getFontLine])) deriveFontWithInt:IOSIntArray_Get(nil_chk(axesLabelsStyle_), 1)] withGeogebraCommonAwtGFontRenderContext:frc];
      [layout drawWithGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt((xCrossPix + 5)) withInt:J2ObjCFpToInt((5 + [((id<GeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) getAscent]))];
    }
    jdouble rw = [self getYmin] - (fmod([self getYmin], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 1)));
    jint labelno = (jint) JavaLangMath_roundWithDouble_(rw / IOSDoubleArray_Get(axesNumberingDistances_, 1));
    jdouble smallTickOffset = 0;
    jdouble axesStep = [self getYscale] * IOSDoubleArray_Get(axesNumberingDistances_, 1);
    if (IOSBooleanArray_Get(nil_chk([self getPositiveAxes]), 1) && (GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(rw, [self getYmin]))) {
      rw = GeogebraCommonUtilMyMath_nextMultipleWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), 0), IOSDoubleArray_Get(axesNumberingDistances_, 1));
      smallTickOffset = axesStep;
      labelno = 0;
    }
    jdouble pix = [self getyZero] - (rw * [self getYscale]);
    jdouble tickStep = axesStep / 2;
    jdouble maxHeight = GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_([self getFontAxes]);
    jint unitsPerLabelY = J2ObjCFpToInt(GeogebraCommonUtilMyMath_nextPrettyNumberWithDouble_(maxHeight / axesStep));
    if (pix > ([self getHeight] - GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_)) {
      if (IOSBooleanArray_Get(drawMajorTicks, 1)) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
      }
      pix -= axesStep;
      rw += IOSDoubleArray_Get(axesNumberingDistances_, 1);
      labelno++;
    }
    jdouble smallTickPix = pix + tickStep;
    jint maxY = GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
    NSString *crossAtStr = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:IOSDoubleArray_Get(nil_chk(axisCross_), 0) withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    jint count = 0;
    jdouble rwBase = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
    for (; pix >= maxY; count++, pix -= axesStep, labelno++) {
      if ([self getYaxisLog]) {
        jdouble r = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1) * count);
        if (JavaLangMath_roundWithDouble_(r) == r) rw = JavaLangMath_powWithDouble_withDouble_(10, r);
        else {
          rw = JavaLangMath_powWithDouble_withDouble_(10, J2ObjCFpToInt(r));
          jdouble decimal = r - J2ObjCFpToInt(r);
          rw = decimal * 10 * rw;
        }
        pix = 2 * [self getYZero] - GeogebraCommonEuclidianEuclidianView_toScreenCoordYdWithDouble_(self, rw);
      }
      else rw = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1) * count);
      if (pix >= maxY && pix <= yAxisEnd) {
        if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 1)) {
          NSString *strNum = [kernel_ formatPiEWithDouble:rw withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          if ((labelno % unitsPerLabelY) == 0) {
            JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(strNum) autorelease];
            if ([sb charAtWithInt:0] == '-') {
              [sb setCharAtWithInt:0 withChar:GeogebraCommonUtilUnicode_nDash];
            }
            if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 1) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 1)) {
              [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 1)];
            }
            jdouble width = GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_([sb description], [self getFontAxes]);
            jint x = J2ObjCFpToInt(((xCrossPix + xoffset) - width));
            jint y;
            jboolean zero = [((NSString *) nil_chk(strNum)) isEqual:crossAtStr];
            if (zero && IOSBooleanArray_Get(nil_chk(showAxes_), 0) && !IOSBooleanArray_Get(positiveAxes_, 0) && IOSDoubleArray_Get(axisCross_, 0) == 0) {
              y = J2ObjCFpToInt((yCrossPix - 2));
            }
            else {
              y = J2ObjCFpToInt((pix + yoffset));
            }
            GeogebraCommonEuclidianEuclidianView_drawStringWithGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, [sb description], x, y);
            if (width > yLabelMaxWidth_) {
              yLabelMaxWidth_ = width;
            }
            [((JavaUtilArrayList *) nil_chk(axesLabelsPositionsY_)) addWithId:[new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + GeogebraCommonKernelKernel_MIN_PRECISION))) autorelease]];
          }
        }
        if (IOSBooleanArray_Get(drawMajorTicks, 1) && rw != IOSDoubleArray_Get(axisCross_, 0)) {
          [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
          [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
        }
      }
      else if (IOSBooleanArray_Get(drawMajorTicks, 1) && !drawTopArrow) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xBig withDouble:pix withDouble:xZeroTick withDouble:pix];
      }
      smallTickPix = (pix + tickStep) - smallTickOffset;
      if (IOSBooleanArray_Get(drawMinorTicks, 1)) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:tickStroke_];
        [g2 drawStraightLineWithDouble:xSmall1 withDouble:smallTickPix withDouble:xSmall2 withDouble:smallTickPix];
      }
    }
  }
  if (showAxesCornerCoords_) {
    if (IOSBooleanArray_Get(nil_chk(showAxes_), 0) && IOSBooleanArray_Get(showAxes_, 1) && (!GeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self) || !GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self))) {
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb setLengthWithInt:0];
      [sb appendWithChar:'('];
      [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:[self getXmin] withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 0) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      [sb appendWithChar:((GeogebraCommonMainLocalization *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getLocalization]))->unicodeComma_];
      [sb appendWithNSString:@" "];
      [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getYmax] withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      [sb appendWithChar:')'];
      jint textHeight = 2 + [((GeogebraCommonAwtGFont *) nil_chk([self getFontAxes])) getSize];
      [g2 setFontWithGeogebraCommonAwtGFont:[self getFontAxes]];
      [g2 drawStringWithNSString:[sb description] withInt:5 withInt:textHeight];
      [sb setLengthWithInt:0];
      [sb appendWithChar:'('];
      [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getXmax] withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 0) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      [sb appendWithChar:((GeogebraCommonMainLocalization *) nil_chk([app_ getLocalization]))->unicodeComma_];
      [sb appendWithNSString:@" "];
      [sb appendWithNSString:[kernel_ formatPiEWithDouble:[self getYmin] withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(axesNumberFormat_, 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      [sb appendWithChar:')'];
      id<GeogebraCommonAwtFontGTextLayout> layout = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:[sb description] withGeogebraCommonAwtGFont:[self getFontAxes] withGeogebraCommonAwtGFontRenderContext:frc];
      [((id<GeogebraCommonAwtFontGTextLayout>) nil_chk(layout)) drawWithGeogebraCommonAwtGGraphics2D:g2 withInt:J2ObjCFpToInt(([self getWidth] - 5 - GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_([sb description], [self getFontAxes]))) withInt:[self getHeight] - 5];
    }
  }
}

- (jboolean)xAxisOnscreen {
  return GeogebraCommonEuclidianEuclidianView_xAxisOnscreen(self);
}

- (jboolean)yAxisOnscreen {
  return GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(self);
}

- (void)drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                                     withDouble:(jdouble)x1
                                                     withDouble:(jdouble)y1
                                                     withDouble:(jdouble)x2
                                                     withDouble:(jdouble)y2
                                                     withDouble:(jdouble)xCrossPix {
  GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, x1, y1, x2, y2, xCrossPix);
}

- (void)drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                                     withDouble:(jdouble)x1
                                                     withDouble:(jdouble)y1
                                                     withDouble:(jdouble)x2
                                                     withDouble:(jdouble)y2
                                                     withDouble:(jdouble)yCrossPix {
  GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, x1, y1, x2, y2, yCrossPix);
}

- (void)drawStringWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                      withNSString:(NSString *)text
                                        withDouble:(jdouble)x
                                        withDouble:(jdouble)y {
  GeogebraCommonEuclidianEuclidianView_drawStringWithGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(self, g2, text, x, y);
}

- (void)drawResetIconWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawActionObjectsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setDefRenderingHintsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
}

- (void)setAntialiasingWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawAnimationButtonsWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
}

- (void)setBackgroundWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)synchronizeMenuBarAndEuclidianStyleBarWithGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)evs {
  if (styleBar_ != nil) {
    [((id<GeogebraCommonEuclidianEuclidianStyleBar>) nil_chk(GeogebraCommonEuclidianEuclidianView_getStyleBar(self))) updateButtonPointCaptureWithInt:[((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(evs)) getPointCapturingMode]];
  }
}

- (void)setPreferredSizeWithGeogebraCommonAwtGDimension:(GeogebraCommonAwtGDimension *)preferredSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  return [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) showGridWithBoolean:show];
}

- (void)setGridIsBoldWithBoolean:(jboolean)gridIsBold {
  if (self->gridIsBold_ == gridIsBold) {
    return;
  }
  self->gridIsBold_ = gridIsBold;
  [self setGridLineStyleWithInt:gridLineStyle_];
  GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
}

- (void)setGridColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)gridColor {
  if (gridColor != nil) {
    GeogebraCommonEuclidianEuclidianView_set_gridColor_(self, gridColor);
  }
}

- (void)setGridLineStyleWithInt:(jint)gridLineStyle {
  self->gridLineStyle_ = gridLineStyle;
  GeogebraCommonEuclidianEuclidianView_set_gridStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(gridIsBold_ ? 2.0f : 1.0f, gridLineStyle));
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:settings];
  if (styleBar_ != nil) {
    [styleBar_ updateGUI];
  }
}

- (GeogebraCommonMainSettingsEuclidianSettings *)getSettings {
  return self->settings_;
}

- (void)setHitsWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  [((GeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (rect == nil) {
    return;
  }
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible] && [d isInsideWithGeogebraCommonAwtGRectangle:rect]) {
      [hits_ addWithId:geo];
    }
  }
}

- (void)updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
}

- (void)setIntersectionHitsWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  [((GeogebraCommonEuclidianHits *) nil_chk(hits_)) init__];
  if (rect == nil) {
    return;
  }
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible] && [d intersectsRectangleWithGeogebraCommonAwtGRectangle:rect]) {
      [hits_ addWithId:geo];
    }
  }
}

- (id<GeogebraCommonAwtGRectangle>)getSelectionRectangle {
  return selectionRectangle_;
}

- (GeogebraCommonEuclidianGeneralPathClipped *)getBoundingPath {
  GeogebraCommonEuclidianGeneralPathClipped *gs = [new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self) autorelease];
  [gs moveToWithDouble:0 withDouble:0];
  [gs lineToWithDouble:[self getWidth] withDouble:0];
  [gs lineToWithDouble:[self getWidth] withDouble:[self getHeight]];
  [gs lineToWithDouble:0 withDouble:[self getHeight]];
  [gs lineToWithDouble:0 withDouble:0];
  [gs closePath];
  return gs;
}

- (void)addBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:(GeogebraCommonEuclidianDrawDrawImage *)img {
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) addUniqueWithGeogebraCommonEuclidianDrawable:img];
  jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawDrawImage *) nil_chk(img)) getGeoElement])) getLayer];
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) removeWithGeogebraCommonEuclidianDrawable:img];
}

- (void)removeBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:(GeogebraCommonEuclidianDrawDrawImage *)img {
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) removeWithGeogebraCommonEuclidianDrawable:img];
  jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawDrawImage *) nil_chk(img)) getGeoElement])) getLayer];
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), layer))) addWithGeogebraCommonEuclidianDrawable:img];
}

- (void)resetLists {
  [((JavaUtilHashMap *) nil_chk(DrawableMap_)) clear];
  [((JavaUtilArrayList *) nil_chk(stickyPointList_)) clear];
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) clear];
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) clear];
  [((JavaUtilArrayList *) nil_chk(self->geosWaiting_)) clear];
  for (jint i = 0; i <= [((GeogebraCommonMainApp *) nil_chk([self getApplication])) getMaxLayerUsed]; i++) {
    [((GeogebraCommonEuclidianDrawableList *) nil_chk(IOSObjectArray_Get(nil_chk(drawLayers_), i))) clear];
  }
  [self setToolTipTextWithNSString:nil];
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  id<GeogebraCommonAwtGRectangle> result = nil;
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    GeogebraCommonEuclidianDrawable *d = [it next];
    id<GeogebraCommonAwtGRectangle> bb = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getBounds];
    if (bb != nil) {
      if (result == nil) {
        result = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithGeogebraCommonAwtGRectangle:bb];
      }
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(result)) addWithGeogebraCommonAwtGRectangle:bb];
    }
  }
  if (result == nil) {
    result = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:0 withInt:0];
  }
  return result;
}

- (void)setPreviewWithGeogebraCommonEuclidianPreviewable:(id<GeogebraCommonEuclidianPreviewable>)p {
  if (previewDrawable_ != nil) {
    [previewDrawable_ disposePreview];
  }
  GeogebraCommonEuclidianEuclidianView_set_previewDrawable_(self, p);
}

- (void)setTemporaryCoordSystemForExport {
  widthTemp_ = [self getWidth];
  heightTemp_ = [self getHeight];
  xminTemp_ = [self getXmin];
  xmaxTemp_ = [self getXmax];
  yminTemp_ = [self getYmin];
  ymaxTemp_ = [self getYmax];
  @try {
    GeogebraCommonKernelGeosGeoPoint *export1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getKernel])) lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT1_], [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *export2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getKernel])) lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT2_], [GeogebraCommonKernelGeosGeoPoint class]);
    if ((export1 == nil) || (export2 == nil)) {
      return;
    }
    IOSDoubleArray *xy1 = [IOSDoubleArray arrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray arrayWithLength:2];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 0), IOSDoubleArray_Get(xy2, 0)), JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 0), IOSDoubleArray_Get(xy2, 0)), JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 1), IOSDoubleArray_Get(xy2, 1)), JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(xy1, 1), IOSDoubleArray_Get(xy2, 1)));
  }
  @catch (JavaLangException *e) {
    GeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(self);
  }
}

- (GeogebraCommonAwtGPoint *)getMaximumLabelSizeWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonAwtGPoint *max = [new_GeogebraCommonAwtGPoint_initWithInt_withInt_(0, 0) autorelease];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[self getFontAxes]];
  jint yAxisHeight = IOSBooleanArray_Get(nil_chk(positiveAxes_), 1) ? J2ObjCFpToInt([self getyZero]) : [self getHeight];
  jint maxY = IOSBooleanArray_Get(positiveAxes_, 1) ? J2ObjCFpToInt([self getyZero]) : [self getHeight] - GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_;
  jdouble rw = [self getYmax] - (fmod([self getYmax], IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), 1)));
  jdouble pix = [self getyZero] - (rw * [self getYscale]);
  jdouble axesStep = [self getYscale] * IOSDoubleArray_Get(axesNumberingDistances_, 1);
  *IOSDoubleArray_GetRef(axesNumberingDistances_, 1) = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1));
  jint count = 0;
  jdouble rwBase = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
  for (; pix <= yAxisHeight; count++, pix += axesStep) {
    rw = rwBase - GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(axesNumberingDistances_, 1) * count);
    if (pix <= maxY) {
      if (IOSBooleanArray_Get(nil_chk(showAxesNumbers_), 1)) {
        NSString *strNum = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatPiEWithDouble:rw withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(axesNumberFormat_), 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
        [sb setLengthWithInt:0];
        [sb appendWithNSString:strNum];
        if ((IOSObjectArray_Get(nil_chk(axesUnitLabels_), 1) != nil) && !IOSBooleanArray_Get(nil_chk(piAxisUnit_), 1)) {
          [sb appendWithNSString:IOSObjectArray_Get(axesUnitLabels_, 1)];
        }
        jdouble width = GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_([sb description], [self getFontAxes]);
        if (max->x_ < width) {
          max->x_ = J2ObjCFpToInt(width);
        }
        if (max->y_ == 0) max->y_ = J2ObjCFpToInt(GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_([self getFontAxes]));
      }
    }
  }
  return max;
}

- (void)restoreOldCoordSystem {
  GeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(self);
}

- (void)setTemporarySizeWithInt:(jint)w
                        withInt:(jint)h {
  [self setWidthWithInt:w];
  [self setHeightWithInt:h];
  [self updateSize];
}

- (jboolean)setShowAxisWithInt:(jint)axis
                   withBoolean:(jboolean)flag
                   withBoolean:(jboolean)update {
  if (flag == IOSBooleanArray_Get(nil_chk(showAxes_), axis)) {
    return NO;
  }
  *IOSBooleanArray_GetRef(showAxes_, axis) = flag;
  if (update) {
    GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  }
  return YES;
}

- (jboolean)setShowAxesWithBoolean:(jboolean)flag
                       withBoolean:(jboolean)update {
  jboolean changedX = [self setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:flag withBoolean:NO];
  return [self setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:flag withBoolean:YES] || changedX;
}

- (jboolean)setLogAxisWithInt:(jint)axis
                  withBoolean:(jboolean)flag
                  withBoolean:(jboolean)update {
  if (flag == IOSBooleanArray_Get(nil_chk(logAxes_), axis)) {
    return NO;
  }
  *IOSBooleanArray_GetRef(logAxes_, axis) = flag;
  if (update) {
    GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  }
  return YES;
}

- (jboolean)setLogAxesWithBoolean:(jboolean)flag
                      withBoolean:(jboolean)update {
  jboolean changedX = [self setLogAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:flag withBoolean:NO];
  return [self setLogAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:flag withBoolean:YES] || changedX;
}

- (void)setBoldAxesWithBoolean:(jboolean)bold {
  axesLineType_ = GeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(bold, axesLineType_);
}

- (jboolean)isTracing {
  GeogebraCommonEuclidianDrawableList_DrawableIterator *it = [((GeogebraCommonEuclidianDrawableList *) nil_chk(allDrawableList_)) getIterator];
  while ([((GeogebraCommonEuclidianDrawableList_DrawableIterator *) nil_chk(it)) hasNext]) {
    if ([((GeogebraCommonEuclidianDrawable *) nil_chk([it next])) isTracing]) {
      return YES;
    }
  }
  return NO;
}

- (jboolean)hasBackgroundImages {
  return [((GeogebraCommonEuclidianDrawableList *) nil_chk(bgImageList_)) size] > 0;
}

- (id<GeogebraCommonAwtGGraphics2D>)getBackgroundGraphics {
  self->tracing_ = YES;
  return bgGraphics_;
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                            withBoolean:(jboolean)asPreference {
  [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getXMLWithJavaLangStringBuilder:sbxml withBoolean:asPreference];
}

- (void)startXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                              withBoolean:(jboolean)asPreference {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_xmlTemplate_();
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"<euclidianView>\n"];
  [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) getXMLidWithJavaLangStringBuilder:sbxml];
  if (([self getWidth] > GeogebraCommonEuclidianEuclidianView_MIN_WIDTH) && ([self getHeight] > GeogebraCommonEuclidianEuclidianView_MIN_HEIGHT)) {
    [sbxml appendWithNSString:@"\t<size "];
    [sbxml appendWithNSString:@" width=\""];
    [sbxml appendWithInt:[self getWidth]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" height=\""];
    [sbxml appendWithInt:[self getHeight]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@"/>\n"];
  }
  if (![self isZoomable] && !asPreference) {
    [sbxml appendWithNSString:@"\t<coordSystem"];
    [sbxml appendWithNSString:@" xMin=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" xMax=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" yMin=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" yMax=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@"/>\n"];
  }
  else {
    [sbxml appendWithNSString:@"\t<coordSystem"];
    [sbxml appendWithNSString:@" xZero=\""];
    [sbxml appendWithDouble:[self getxZero]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" yZero=\""];
    [sbxml appendWithDouble:[self getyZero]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" scale=\""];
    [sbxml appendWithDouble:[self getXscale]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@" yscale=\""];
    [sbxml appendWithDouble:[self getYscale]];
    [sbxml appendWithNSString:@"\""];
    [sbxml appendWithNSString:@"/>\n"];
  }
  [sbxml appendWithNSString:@"\t<evSettings axes=\""];
  [sbxml appendWithBoolean:IOSBooleanArray_Get(nil_chk(showAxes_), 0) || IOSBooleanArray_Get(showAxes_, 1)];
  [sbxml appendWithNSString:@"\" grid=\""];
  [sbxml appendWithBoolean:showGrid__];
  [sbxml appendWithNSString:@"\" gridIsBold=\""];
  [sbxml appendWithBoolean:gridIsBold_];
  [sbxml appendWithNSString:@"\" pointCapturing=\""];
  [sbxml appendWithInt:[self getPointCapturingMode] > GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_XML_MAX ? GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_DEFAULT : [self getPointCapturingMode]];
  [sbxml appendWithNSString:@"\" rightAngleStyle=\""];
  [sbxml appendWithInt:((GeogebraCommonMainApp *) nil_chk([self getApplication]))->rightAngleStyle_];
  if (asPreference) {
    [sbxml appendWithNSString:@"\" allowShowMouseCoords=\""];
    [sbxml appendWithBoolean:[self getAllowShowMouseCoords]];
    [sbxml appendWithNSString:@"\" allowToolTips=\""];
    [sbxml appendWithInt:GeogebraCommonEuclidianEuclidianView_getAllowToolTips(self)];
    [sbxml appendWithNSString:@"\" deleteToolSize=\""];
    [sbxml appendWithInt:[((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getDeleteToolSize]];
  }
  [sbxml appendWithNSString:@"\" checkboxSize=\""];
  [sbxml appendWithInt:[((GeogebraCommonMainApp *) nil_chk(app_)) getCheckboxSize]];
  [sbxml appendWithNSString:@"\" gridType=\""];
  [sbxml appendWithInt:GeogebraCommonEuclidianEuclidianView_getGridType(self)];
  if (lockedAxesRatio_ != nil) {
    [sbxml appendWithNSString:@"\" lockedAxesRatio=\""];
    [sbxml appendWithId:lockedAxesRatio_];
  }
  [sbxml appendWithNSString:@"\"/>\n"];
  [sbxml appendWithNSString:@"\t<bgColor r=\""];
  [sbxml appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getRed]];
  [sbxml appendWithNSString:@"\" g=\""];
  [sbxml appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getGreen]];
  [sbxml appendWithNSString:@"\" b=\""];
  [sbxml appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk([self getBackgroundCommon])) getBlue]];
  [sbxml appendWithNSString:@"\"/>\n"];
  [sbxml appendWithNSString:@"\t<axesColor r=\""];
  [sbxml appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk(axesColor_)) getRed]];
  [sbxml appendWithNSString:@"\" g=\""];
  [sbxml appendWithInt:[axesColor_ getGreen]];
  [sbxml appendWithNSString:@"\" b=\""];
  [sbxml appendWithInt:[axesColor_ getBlue]];
  [sbxml appendWithNSString:@"\"/>\n"];
  [sbxml appendWithNSString:@"\t<gridColor r=\""];
  [sbxml appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk(gridColor_)) getRed]];
  [sbxml appendWithNSString:@"\" g=\""];
  [sbxml appendWithInt:[gridColor_ getGreen]];
  [sbxml appendWithNSString:@"\" b=\""];
  [sbxml appendWithInt:[gridColor_ getBlue]];
  [sbxml appendWithNSString:@"\"/>\n"];
  [sbxml appendWithNSString:@"\t<lineStyle axes=\""];
  [sbxml appendWithInt:axesLineType_];
  [sbxml appendWithNSString:@"\" grid=\""];
  [sbxml appendWithInt:gridLineStyle_];
  [sbxml appendWithNSString:@"\"/>\n"];
  for (jint i = 0; i < 2; i++) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([self getSettings])) addAxisXMLWithInt:i withJavaLangStringBuilder:sbxml];
  }
  if (!automaticGridDistance_ || (GeogebraCommonPluginEuclidianStyleConstants_get_automaticGridDistanceFactor_() != GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_GRID_DIST_FACTOR)) {
    [sbxml appendWithNSString:@"\t<grid distX=\""];
    [sbxml appendWithDouble:IOSDoubleArray_Get(nil_chk(gridDistances_), 0)];
    [sbxml appendWithNSString:@"\" distY=\""];
    [sbxml appendWithDouble:IOSDoubleArray_Get(gridDistances_, 1)];
    [sbxml appendWithNSString:@"\" distTheta=\""];
    [sbxml appendWithDouble:IOSDoubleArray_Get(gridDistances_, 2)];
    [sbxml appendWithNSString:@"\"/>\n"];
  }
}

- (void)addAxisXMLWithInt:(jint)i
withJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<axis id=\""];
  [sbxml appendWithInt:i];
  [sbxml appendWithNSString:@"\" show=\""];
  [sbxml appendWithBoolean:[self getShowAxisWithInt:i]];
  [sbxml appendWithNSString:@"\" label=\""];
  if (IOSObjectArray_Get(nil_chk(axesLabels_), i) != nil) {
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(self->settings_)) axisLabelForXMLWithInt:i]);
  }
  [sbxml appendWithNSString:@"\" unitLabel=\""];
  if (IOSObjectArray_Get(nil_chk(axesUnitLabels_), i) != nil) {
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sbxml, IOSObjectArray_Get(axesUnitLabels_, i));
  }
  [sbxml appendWithNSString:@"\" tickStyle=\""];
  [sbxml appendWithInt:IOSIntArray_Get(nil_chk(axesTickStyles_), i)];
  [sbxml appendWithNSString:@"\" showNumbers=\""];
  [sbxml appendWithBoolean:IOSBooleanArray_Get(nil_chk(showAxesNumbers_), i)];
  if (!IOSBooleanArray_Get(nil_chk(automaticAxesNumberingDistances_), i)) {
    [sbxml appendWithNSString:@"\" tickDistance=\""];
    [sbxml appendWithDouble:IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), i)];
  }
  if (IOSBooleanArray_Get(nil_chk(drawBorderAxes_), i)) {
    [sbxml appendWithNSString:@"\" axisCrossEdge=\""];
    [sbxml appendWithBoolean:YES];
  }
  else if (!GeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(nil_chk(axisCross_), i)) && !IOSBooleanArray_Get(drawBorderAxes_, i)) {
    [sbxml appendWithNSString:@"\" axisCross=\""];
    [sbxml appendWithDouble:IOSDoubleArray_Get(axisCross_, i)];
  }
  if (IOSBooleanArray_Get(nil_chk(positiveAxes_), i)) {
    [sbxml appendWithNSString:@"\" positiveAxis=\""];
    [sbxml appendWithBoolean:IOSBooleanArray_Get(positiveAxes_, i)];
  }
  [sbxml appendWithNSString:@"\"/>\n"];
}

- (void)endXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"</euclidianView>\n"];
}

- (void)drawPointsWithGeogebraCommonKernelGeosGeoImage:(GeogebraCommonKernelGeosGeoImage *)ge
                                       withDoubleArray:(IOSDoubleArray *)x
                                       withDoubleArray:(IOSDoubleArray *)y {
  JavaUtilArrayList *ptList = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
    jint xi = GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, IOSDoubleArray_Get(x, i));
    jint yi = GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, IOSDoubleArray_Get(nil_chk(y), i));
    if ([((GeogebraCommonKernelGeosGeoImage *) nil_chk(ge)) getCornerWithInt:1] != nil) {
      jint w = [((id<GeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getWidth];
      jint h = [((id<GeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getHeight];
      IOSDoubleArray *cx = [IOSDoubleArray arrayWithLength:3], *cy = [IOSDoubleArray arrayWithLength:3];
      for (jint j = 0; j < ([ge getCornerWithInt:2] != nil ? 3 : 2); j++) {
        *IOSDoubleArray_GetRef(cx, j) = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:j]))->x_;
        *IOSDoubleArray_GetRef(cy, j) = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:j]))->y_;
      }
      if ([ge getCornerWithInt:2] == nil) {
        *IOSDoubleArray_GetRef(cx, 2) = IOSDoubleArray_Get(cx, 0) - ((h * (IOSDoubleArray_Get(cy, 1) - IOSDoubleArray_Get(cy, 0))) / w);
        *IOSDoubleArray_GetRef(cy, 2) = IOSDoubleArray_Get(cy, 0) + ((h * (IOSDoubleArray_Get(cx, 1) - IOSDoubleArray_Get(cx, 0))) / w);
      }
      jdouble dx1 = IOSDoubleArray_Get(cx, 1) - IOSDoubleArray_Get(cx, 0);
      jdouble dx2 = IOSDoubleArray_Get(cx, 2) - IOSDoubleArray_Get(cx, 0);
      jdouble dy1 = IOSDoubleArray_Get(cy, 1) - IOSDoubleArray_Get(cy, 0);
      jdouble dy2 = IOSDoubleArray_Get(cy, 2) - IOSDoubleArray_Get(cy, 0);
      jdouble ratio1 = (((IOSDoubleArray_Get(x, i) - IOSDoubleArray_Get(cx, 0)) * dy2) - (dx2 * (IOSDoubleArray_Get(y, i) - IOSDoubleArray_Get(cy, 0)))) / ((dx1 * dy2) - (dx2 * dy1));
      jdouble ratio2 = ((-(IOSDoubleArray_Get(x, i) - IOSDoubleArray_Get(cx, 0)) * dy1) + (dx1 * (IOSDoubleArray_Get(y, i) - IOSDoubleArray_Get(cy, 0)))) / ((dx1 * dy2) - (dx2 * dy1));
      xi = (jint) JavaLangMath_roundWithDouble_(w * ratio1);
      yi = (jint) JavaLangMath_roundWithDouble_(h * (1 - ratio2));
    }
    else if ([ge getCornerWithInt:0] != nil) {
      xi = xi - GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:0]))->x_);
      yi = [((id<GeogebraCommonAwtMyImage>) nil_chk([ge getFillImage])) getHeight] + (yi - GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk([ge getCornerWithInt:0]))->y_));
    }
    [ptList addWithId:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_(xi, yi) autorelease]];
  }
  [self doDrawPointsWithGeogebraCommonKernelGeosGeoImage:ge withJavaUtilList:ptList withGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_black_() withInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL withInt:1];
}

- (void)doDrawPointsWithGeogebraCommonKernelGeosGeoImage:(GeogebraCommonKernelGeosGeoImage *)gi
                                        withJavaUtilList:(id<JavaUtilList>)penPoints2
                             withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)penColor
                                                 withInt:(jint)penLineStyle
                                                 withInt:(jint)penSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)resetXYMinMaxObjects {
  if ((evNo_ == 1) || (evNo_ == 2)) {
    GeogebraCommonMainSettingsEuclidianSettings *es = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self getApplication])) getSettings])) getEuclidianWithInt:evNo_];
    GeogebraCommonKernelGeosGeoNumeric *xmao = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(xmaxObject_)) getNumber])) getDouble]) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *xmio = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(xminObject_)) getNumber])) getDouble]) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *ymao = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(ymaxObject_)) getNumber])) getDouble]) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *ymio = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(yminObject_)) getNumber])) getDouble]) autorelease];
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk(es)) setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:xmao withBoolean:NO];
    [es setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:xmio withBoolean:NO];
    [es setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:ymao withBoolean:NO];
    [es setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:ymio withBoolean:YES];
  }
}

- (void)setViewShowAllObjectsWithBoolean:(jboolean)storeUndo {
  jdouble x0RW = [self getXmin];
  jdouble x1RW;
  jdouble y0RW;
  jdouble y1RW;
  jdouble y0RWfunctions = 0;
  jdouble y1RWfunctions = 0;
  jdouble factor = 0.03;
  jdouble xGap = 0;
  JavaUtilTreeSet *allFunctions = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrderWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_FUNCTION()];
  jint noVisible = 0;
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(allFunctions)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(([it next]), [GeogebraCommonKernelGeosGeoFunction class])))) isEuclidianVisible]) {
      noVisible++;
    }
  }
  id<GeogebraCommonAwtGRectangle> rect = [self getBounds];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) getHeight]) || GeogebraCommonKernelKernel_isZeroWithDouble_([rect getWidth])) {
    if (noVisible == 0) {
      return;
    }
    x0RW = JavaLangDouble_MAX_VALUE;
    x1RW = -JavaLangDouble_MAX_VALUE;
    y0RW = JavaLangDouble_MAX_VALUE;
    y1RW = -JavaLangDouble_MAX_VALUE;
  }
  else {
    x0RW = GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [rect getMinX]);
    x1RW = GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [rect getMaxX]);
    y0RW = GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [rect getMaxY]);
    y1RW = GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [rect getMinY]);
  }
  xGap = (x1RW - x0RW) * factor;
  jboolean ok = NO;
  if (noVisible != 0) {
    x0RW = JavaLangMath_minWithDouble_withDouble_([self getXmin], x0RW);
    x1RW = JavaLangMath_maxWithDouble_withDouble_([self getXmax], x1RW);
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x0RW, [self getXmin]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x1RW, [self getXmax])) {
      xGap = 0;
    }
    else {
      xGap = (x1RW - x0RW) * factor;
    }
    y0RWfunctions = JavaLangDouble_MAX_VALUE;
    y1RWfunctions = -JavaLangDouble_MAX_VALUE;
    it = [allFunctions iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoFunction *fun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(([it next]), [GeogebraCommonKernelGeosGeoFunction class]);
      jdouble abscissa;
      for (jint i = 0; i < 200; i++) {
        if (i == 0) {
          abscissa = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x0RW];
        }
        else if (i == 1) {
          abscissa = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x1RW];
        }
        else {
          abscissa = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) evaluateWithDouble:x0RW + (JavaLangMath_random() * (x1RW - x0RW))];
        }
        if (!JavaLangDouble_isInfiniteWithDouble_(abscissa) && !JavaLangDouble_isNaNWithDouble_(abscissa)) {
          ok = YES;
          if (abscissa > y1RWfunctions) {
            y1RWfunctions = abscissa;
          }
          if (abscissa < y0RWfunctions) {
            y0RWfunctions = abscissa;
          }
        }
      }
    }
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(y1RWfunctions - y0RWfunctions) && ok) {
    y0RW = JavaLangMath_minWithDouble_withDouble_(y0RW, y0RWfunctions);
    y1RW = JavaLangMath_maxWithDouble_withDouble_(y1RW, y1RWfunctions);
  }
  jdouble yGap = (y1RW - y0RW) * factor;
  jdouble x0RW2 = x0RW - xGap;
  jdouble x1RW2 = x1RW + xGap;
  jdouble y0RW2 = y0RW - yGap;
  jdouble y1RW2 = y1RW + yGap;
  GeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(self, x0RW2, x1RW2, y0RW2, y1RW2, 10, storeUndo);
}

- (jint)getSelectedWidth {
  if (selectionRectangle_ == nil) {
    return [self getWidth];
  }
  return J2ObjCFpToInt([((id<GeogebraCommonAwtGRectangle>) nil_chk(selectionRectangle_)) getWidth]);
}

- (jint)getSelectedHeight {
  if (selectionRectangle_ == nil) {
    return [self getHeight];
  }
  return J2ObjCFpToInt([((id<GeogebraCommonAwtGRectangle>) nil_chk(selectionRectangle_)) getHeight]);
}

- (jint)getExportWidth {
  if (selectionRectangle_ != nil) {
    return J2ObjCFpToInt([selectionRectangle_ getWidth]);
  }
  @try {
    GeogebraCommonKernelGeosGeoPoint *export1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT1_], [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *export2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([kernel_ lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT2_], [GeogebraCommonKernelGeosGeoPoint class]);
    IOSDoubleArray *xy1 = [IOSDoubleArray arrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray arrayWithLength:2];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    jdouble x1 = IOSDoubleArray_Get(xy1, 0);
    jdouble x2 = IOSDoubleArray_Get(xy2, 0);
    x1 = (x1 / [self getInvXscale]) + [self getxZero];
    x2 = (x2 / [self getInvXscale]) + [self getxZero];
    return J2ObjCFpToInt(JavaLangMath_absWithDouble_(x1 - x2)) + 2;
  }
  @catch (JavaLangException *e) {
    return [self getWidth];
  }
}

- (jint)getExportHeight {
  if (selectionRectangle_ != nil) {
    return J2ObjCFpToInt([selectionRectangle_ getHeight]);
  }
  @try {
    GeogebraCommonKernelGeosGeoPoint *export1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT1_], [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *export2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([kernel_ lookupLabelWithNSString:GeogebraCommonEuclidianEuclidianView_EXPORT2_], [GeogebraCommonKernelGeosGeoPoint class]);
    IOSDoubleArray *xy1 = [IOSDoubleArray arrayWithLength:2];
    IOSDoubleArray *xy2 = [IOSDoubleArray arrayWithLength:2];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export1)) getInhomCoordsWithDoubleArray:xy1];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(export2)) getInhomCoordsWithDoubleArray:xy2];
    jdouble y1 = IOSDoubleArray_Get(xy1, 1);
    jdouble y2 = IOSDoubleArray_Get(xy2, 1);
    y1 = [self getyZero] - (y1 / [self getInvYscale]);
    y2 = [self getyZero] - (y2 / [self getInvYscale]);
    return J2ObjCFpToInt(JavaLangMath_absWithDouble_(y1 - y2)) + 2;
  }
  @catch (JavaLangException *e) {
    return [self getHeight];
  }
}

- (void)clickedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                             withBoolean:(jboolean)isControlDown {
  if (geo == nil) {
    return;
  }
  [((GeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addWithId:geo];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean changedKernel = [((GeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_)) processModeWithGeogebraCommonEuclidianHits:tempArrayList_ withBoolean:isControlDown withGeogebraCommonUtilAsyncOperation:nil];
  if (changedKernel) {
    [((GeogebraCommonMainApp *) nil_chk([self getApplication])) storeUndoInfo];
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (GeogebraCommonEuclidianMyZoomer *)newZoomer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)zoomWithDouble:(jdouble)px
            withDouble:(jdouble)py
            withDouble:(jdouble)zoomFactor
               withInt:(jint)steps
           withBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  if (zoomer_ == nil) {
    GeogebraCommonEuclidianEuclidianView_set_zoomer_(self, [self newZoomer]);
  }
  [((GeogebraCommonEuclidianMyZoomer *) nil_chk(zoomer_)) init__WithDouble:px withDouble:py withDouble:zoomFactor withInt:steps withBoolean:storeUndo];
  [zoomer_ startAnimation];
}

- (void)zoomAxesRatioWithDouble:(jdouble)newRatio
                    withBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  if ([self isLockedAxesRatio]) {
    return;
  }
  if (axesRatioZoomer_ == nil) {
    GeogebraCommonEuclidianEuclidianView_set_axesRatioZoomer_(self, [self newZoomer]);
  }
  [((GeogebraCommonEuclidianMyZoomer *) nil_chk(axesRatioZoomer_)) init__WithDouble:newRatio withBoolean:storeUndo];
  [axesRatioZoomer_ startAnimation];
}

- (void)setStandardViewWithBoolean:(jboolean)storeUndo {
  if (![self isZoomable]) {
    return;
  }
  jdouble xzero, yzero;
  if ([self getWidth] < (GeogebraCommonEuclidianEuclidianView_XZERO_STANDARD * 3)) {
    xzero = [self getWidth] / 3.0;
  }
  else {
    xzero = GeogebraCommonEuclidianEuclidianView_XZERO_STANDARD;
  }
  if ([self getHeight] < (GeogebraCommonEuclidianEuclidianView_YZERO_STANDARD * 1.6)) {
    yzero = [self getHeight] / 1.6;
  }
  else {
    yzero = GeogebraCommonEuclidianEuclidianView_YZERO_STANDARD;
  }
  if ([self getScaleRatio] != 1.0) {
    if (axesRatioZoomer_ == nil) {
      GeogebraCommonEuclidianEuclidianView_set_axesRatioZoomer_(self, [self newZoomer]);
    }
    [((GeogebraCommonEuclidianMyZoomer *) nil_chk(axesRatioZoomer_)) init__WithDouble:1 withBoolean:NO];
    [axesRatioZoomer_ setStandardViewAfterWithDouble:xzero withDouble:yzero];
    [axesRatioZoomer_ startAnimation];
  }
  else {
    [self setAnimatedCoordSystemWithDouble:xzero withDouble:yzero withInt:15 withBoolean:NO];
  }
  if (storeUndo) {
    [((GeogebraCommonMainApp *) nil_chk([self getApplication])) storeUndoInfo];
  }
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)originX
                              withDouble:(jdouble)originY
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  [self setAnimatedCoordSystemWithDouble:originX withDouble:originY withDouble:0 withDouble:GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD withInt:steps withBoolean:storeUndo];
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)originX
                              withDouble:(jdouble)originY
                              withDouble:(jdouble)f
                              withDouble:(jdouble)newScale
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  jdouble ox = originX + ([self getXZero] - originX) * f;
  jdouble oy = originY + ([self getYZero] - originY) * f;
  if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([self getXscale], newScale)) {
    jdouble factor = newScale / [self getXscale];
    [self zoomWithDouble:(ox - ([self getxZero] * factor)) / (1.0 - factor) withDouble:(oy - ([self getyZero] * factor)) / (1.0 - factor) withDouble:factor withInt:steps withBoolean:storeUndo];
  }
  else {
    if (mover_ == nil) {
      GeogebraCommonEuclidianEuclidianView_set_mover_(self, [self newZoomer]);
    }
    [((GeogebraCommonEuclidianMyZoomer *) nil_chk(mover_)) init__WithDouble:ox withDouble:oy withBoolean:storeUndo];
    [mover_ startAnimation];
  }
}

- (void)setAnimatedRealWorldCoordSystemWithDouble:(jdouble)xmin
                                       withDouble:(jdouble)xmax
                                       withDouble:(jdouble)ymin
                                       withDouble:(jdouble)ymax
                                          withInt:(jint)steps
                                      withBoolean:(jboolean)storeUndo {
  GeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(self, xmin, xmax, ymin, ymax, steps, storeUndo);
}

- (void)mouseMovedOverWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianHits *geos = nil;
  if (geo != nil) {
    [((GeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
    [tempArrayList_ addWithId:geo];
    geos = tempArrayList_;
  }
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean repaintNeeded = [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) refreshHighlightingWithGeogebraCommonEuclidianHits:geos withBoolean:NO];
  if (repaintNeeded) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (void)highlightWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) highlightWithGeogebraCommonKernelGeosGeoElement:geo]) [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)highlightWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) highlightWithJavaUtilArrayList:geos]) [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
}

- (void)mouseMovedOverListWithJavaUtilArrayList:(JavaUtilArrayList *)geoList {
  GeogebraCommonEuclidianHits *geos = nil;
  [((GeogebraCommonEuclidianHits *) nil_chk(tempArrayList_)) clear];
  [tempArrayList_ addAllWithJavaUtilCollection:geoList];
  geos = tempArrayList_;
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) startCollectingMinorRepaints];
  jboolean repaintNeeded = [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) refreshHighlightingWithGeogebraCommonEuclidianHits:geos withBoolean:NO];
  if (repaintNeeded) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) stopCollectingMinorRepaints];
}

- (jboolean)setAnimationButtonsHighlightedWithBoolean:(jboolean)flag {
  if (![self drawPlayButtonInThisView]) {
    return NO;
  }
  if (flag == highlightAnimationButtons_) {
    return NO;
  }
  highlightAnimationButtons_ = flag;
  return YES;
}

- (jboolean)drawPlayButtonInThisView {
  id<GeogebraCommonMainGuiManagerInterface> gui = [((GeogebraCommonMainApp *) nil_chk([self getApplication])) getGuiManager];
  if (gui == nil) {
    return YES;
  }
  id<GeogebraCommonEuclidianGetViewId> evp = [((GeogebraCommonGuiLayoutDockManager *) nil_chk([((GeogebraCommonGuiLayout *) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk(gui)) getLayout])) getDockManager])) getFocusedEuclidianPanel];
  if (evp == nil) {
    return YES;
  }
  return [self getViewID] == [((id<GeogebraCommonEuclidianGetViewId>) nil_chk(evp)) getViewId];
}

- (GeogebraCommonAwtGColor *)getAxesColor {
  return axesColor_;
}

- (GeogebraCommonAwtGColor *)getGridColor {
  return gridColor_;
}

- (void)addWithGeogebraCommonJavaxSwingGBox:(GeogebraCommonJavaxSwingGBox *)box {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeWithGeogebraCommonJavaxSwingGBox:(GeogebraCommonJavaxSwingGBox *)box {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)initViewWithBoolean:(jboolean)repaint {
  [self setGridLineStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self setAxesLineStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_AXES_LINE_TYPE_ARROW];
  [self setAxesColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_black_()];
  [self setGridColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_lightGray_()];
  [self setBackgroundWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_white_()];
  pointCapturingMode_ = GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_AUTOMATIC;
  *IOSBooleanArray_GetRef(nil_chk(showAxesNumbers_), 0) = YES;
  *IOSBooleanArray_GetRef(showAxesNumbers_, 1) = YES;
  IOSObjectArray_Set(nil_chk(axesLabels_), 0, nil);
  IOSObjectArray_Set(axesLabels_, 1, nil);
  IOSObjectArray_Set(nil_chk(axesUnitLabels_), 0, nil);
  IOSObjectArray_Set(axesUnitLabels_, 1, nil);
  *IOSBooleanArray_GetRef(nil_chk(piAxisUnit_), 0) = NO;
  *IOSBooleanArray_GetRef(piAxisUnit_, 1) = NO;
  *IOSIntArray_GetRef(nil_chk(axesTickStyles_), 0) = GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSIntArray_GetRef(axesTickStyles_, 1) = GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR;
  *IOSBooleanArray_GetRef(nil_chk(automaticAxesNumberingDistances_), 0) = YES;
  *IOSBooleanArray_GetRef(automaticAxesNumberingDistances_, 1) = YES;
  automaticGridDistance_ = YES;
  GeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(self, repaint);
}

- (void)setShowAxisWithBoolean:(jboolean)show {
  [self setShowAxisWithInt:0 withBoolean:show withBoolean:NO];
  [self setShowAxisWithInt:1 withBoolean:show withBoolean:YES];
}

- (void)setLogAxisWithBoolean:(jboolean)log {
  [self setLogAxisWithInt:0 withBoolean:log withBoolean:NO];
  [self setLogAxisWithInt:0 withBoolean:log withBoolean:YES];
}

- (void)setTransparentCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setEraserCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<GeogebraCommonAwtGGraphics2D>)getGraphicsForPen {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasStyleBar {
  return styleBar_ != nil;
}

+ (jboolean)isPenModeWithInt:(jint)mode {
  return GeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(mode);
}

- (void)setOptionPanelWithGeogebraCommonGuiDialogOptionsOptionsEuclidian:(GeogebraCommonGuiDialogOptionsOptionsEuclidian *)optionPanel {
  GeogebraCommonEuclidianEuclidianView_set_optionPanel_(self, optionPanel);
}

- (id<GeogebraCommonAwtGRectangle>)getDeletionRectangle {
  return deletionRectangle_;
}

- (void)setDeletionRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)deletionRectangle {
  GeogebraCommonEuclidianEuclidianView_set_deletionRectangle_(self, deletionRectangle);
}

+ (jint)getBoldAxesWithBoolean:(jboolean)bold
                       withInt:(jint)axesLineStyle {
  return GeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(bold, axesLineStyle);
}

- (jboolean)areAxesBold {
  return (axesLineType_ & GeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD) != 0;
}

+ (jdouble)estimateNumberHeightWithGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2 {
  return GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_(fontAxes2);
}

- (jdouble)estimateNumberWidthWithDouble:(jdouble)d
              withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2 {
  return GeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withGeogebraCommonAwtGFont_(self, d, fontAxes2);
}

+ (jdouble)estimateTextWidthWithNSString:(NSString *)s
              withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)fontAxes2 {
  return GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_(s, fontAxes2);
}

- (jint)getSliderOffsetY {
  return 50;
}

- (jdouble)getMinSamplePoints {
  return GeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS;
}

- (jdouble)getMaxBendOfScreen {
  return GeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_;
}

- (jdouble)getMaxBend {
  return GeogebraCommonEuclidianEuclidianView_MAX_BEND_;
}

- (jint)getMaxDefinedBisections {
  return GeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS;
}

- (jdouble)getMinPixelDistance {
  return GeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE;
}

- (jint)getMaxZeroCount {
  return GeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT;
}

- (jdouble)getMaxPixelDistance {
  return GeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE;
}

- (jint)getMaxProblemBisections {
  return GeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS;
}

- (jint)getAbsoluteTop {
  return -1;
}

- (jint)getAbsoluteLeft {
  return -1;
}

- (id<GeogebraCommonEuclidianEuclidianStyleBar>)getStyleBar {
  return GeogebraCommonEuclidianEuclidianView_getStyleBar(self);
}

- (id<GeogebraCommonEuclidianEuclidianStyleBar>)newEuclidianStyleBar {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jlong)getLastRepaintTime {
  return 0;
}

- (void)setLabels {
  if (self->styleBar_ != nil) {
    [styleBar_ setLabels];
  }
}

- (jint)getDimension {
  return 2;
}

- (void)exportPaintPreWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d
                                            withDouble:(jdouble)scale_
                                           withBoolean:(jboolean)transparency {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)exportPaintWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d
                                         withDouble:(jdouble)scale_
                                        withBoolean:(jboolean)transparency {
  ((GeogebraCommonMainApp *) nil_chk([self getApplication]))->exporting_ = YES;
  [self exportPaintPreWithGeogebraCommonAwtGGraphics2D:g2d withDouble:scale_ withBoolean:transparency];
  [self drawObjectsWithGeogebraCommonAwtGGraphics2D:g2d];
  ((GeogebraCommonMainApp *) nil_chk([self getApplication]))->exporting_ = NO;
}

- (void)exportPaintPreWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d
                                            withDouble:(jdouble)scale_ {
  [self exportPaintPreWithGeogebraCommonAwtGGraphics2D:g2d withDouble:scale_ withBoolean:NO];
}

- (void)centerViewWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *p = [self getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
  jdouble px = (GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, [self getWidth]) - GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(self, 0)) / 2;
  jdouble py = (-GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, [self getHeight]) + GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(self, 0)) / 2;
  GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX] - px, [p getX] + px, [p getY] - py, [p getY] + py);
}

+ (NSString *)getDraggedLabelsWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  return GeogebraCommonEuclidianEuclidianView_getDraggedLabelsWithJavaUtilArrayList_(list);
}

- (void)dealloc {
  RELEASE_(bgImage_);
  RELEASE_(bgGraphics_);
  RELEASE_(deletionRectangle_);
  RELEASE_(axesColor_);
  RELEASE_(gridColor_);
  RELEASE_(selectionRectangle_);
  RELEASE_(axesStroke_);
  RELEASE_(tickStroke_);
  RELEASE_(gridStroke_);
  RELEASE_(kernel_);
  RELEASE_(coordTransform_);
  RELEASE_(AxesTickInterval_);
  RELEASE_(axesNumberFormat_);
  RELEASE_(showAxes_);
  RELEASE_(logAxes_);
  RELEASE_(gridDistances_);
  RELEASE_(fontPoint_);
  RELEASE_(fontCoords_);
  RELEASE_(printScaleNF_);
  RELEASE_(showAxesNumbers_);
  RELEASE_(axesLabels_);
  RELEASE_(axesLabelsStyle_);
  RELEASE_(axesUnitLabels_);
  RELEASE_(previewDrawable_);
  RELEASE_(app_);
  RELEASE_(settings_);
  RELEASE_(euclidianController_);
  RELEASE_(hits_);
  RELEASE_(companion_);
  RELEASE_(xminObject_);
  RELEASE_(xmaxObject_);
  RELEASE_(yminObject_);
  RELEASE_(ymaxObject_);
  RELEASE_(lockedAxesRatio_);
  RELEASE_(DrawableMap_);
  RELEASE_(stickyPointList_);
  RELEASE_(allDrawableList_);
  RELEASE_(drawLayers_);
  RELEASE_(bgImageList_);
  RELEASE_(piAxisUnit_);
  RELEASE_(axesTickStyles_);
  RELEASE_(automaticAxesNumberingDistances_);
  RELEASE_(axesNumberingDistances_);
  RELEASE_(geosWaiting_);
  RELEASE_(hitPointOrBoundary_);
  RELEASE_(hitFilling_);
  RELEASE_(hitLabel_);
  RELEASE_(axisCross_);
  RELEASE_(positiveAxes_);
  RELEASE_(drawBorderAxes_);
  RELEASE_(circle_);
  RELEASE_(tempLine_);
  RELEASE_(gp_);
  RELEASE_(styleBar_);
  RELEASE_(axesLabelsPositionsY_);
  RELEASE_(axesLabelsPositionsX_);
  RELEASE_(tempArrayList_);
  RELEASE_(zoomer_);
  RELEASE_(axesRatioZoomer_);
  RELEASE_(mover_);
  RELEASE_(zoomerRW_);
  RELEASE_(optionPanel_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianEuclidianView class]) {
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_colZoomRectangle_, nil, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:200 withInt:200 withInt:230]);
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:200 withInt:200 withInt:230 withInt:50]);
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_colDeletionSquare_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:128 withInt:0 withInt:0]);
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:1.0f]);
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_defAxesStroke_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:1.0f withInt:GeogebraCommonAwtGBasicStroke_CAP_BUTT withInt:GeogebraCommonAwtGBasicStroke_JOIN_MITER]);
    JreStrongAssign(&GeogebraCommonEuclidianEuclidianView_boldAxesStroke_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:2.0f withInt:GeogebraCommonAwtGBasicStroke_CAP_BUTT withInt:GeogebraCommonAwtGBasicStroke_JOIN_MITER]);
    GeogebraCommonEuclidianEuclidianView_MAX_BEND_ = JavaLangMath_tanWithDouble_(GeogebraCommonEuclidianEuclidianView_MAX_ANGLE * GeogebraCommonKernelKernel_PI_180);
    GeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_ = JavaLangMath_tanWithDouble_(GeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN * GeogebraCommonKernelKernel_PI_180);
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianEuclidianView)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getLineTypes", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "getPointStyles", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianController:withInt:withGeogebraCommonMainSettingsEuclidianSettings:", "EuclidianView", NULL, 0x1, NULL, NULL },
    { "newEuclidianViewCompanion", NULL, "Lgeogebra.common.euclidian.EuclidianViewCompanion;", 0x4, NULL, NULL },
    { "getCompanion", NULL, "Lgeogebra.common.euclidian.EuclidianViewCompanion;", 0x1, NULL, NULL },
    { "initAxesValues", NULL, "V", 0x4, NULL, NULL },
    { "setAxesColorWithGeogebraCommonAwtGColor:", "setAxesColor", "V", 0x1, NULL, NULL },
    { "setStandardCoordSystem", NULL, "V", 0x1, NULL, NULL },
    { "setStandardCoordSystemWithBoolean:", "setStandardCoordSystem", "V", 0x2, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "getPointCapturingMode", NULL, "I", 0x1, NULL, NULL },
    { "setPointCapturingWithInt:", "setPointCapturing", "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setModeWithInt:withGeogebraCommonKernelModeSetterEnum:", "setMode", "V", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "clearRectangleWithInt:", "clearRectangle", "Z", 0x1a, NULL, NULL },
    { "getXminObject", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "updateBoundObjects", NULL, "V", 0x1, NULL, NULL },
    { "isLockedAxesRatio", NULL, "Z", 0x1, NULL, NULL },
    { "setLockedAxesRatioWithJavaLangDouble:", "setLockedAxesRatio", "V", 0x1, NULL, NULL },
    { "updateBoundsWithBoolean:", "updateBounds", "V", 0x1, NULL, NULL },
    { "isZoomable", NULL, "Z", 0x1, NULL, NULL },
    { "setXminObjectWithGeogebraCommonKernelArithmeticNumberValue:", "setXminObject", "V", 0x1, NULL, NULL },
    { "getXmaxObject", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setXmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:", "setXmaxObject", "V", 0x1, NULL, NULL },
    { "getYminObject", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setYminObjectWithGeogebraCommonKernelArithmeticNumberValue:", "setYminObject", "V", 0x1, NULL, NULL },
    { "setSizeListeners", NULL, "V", 0x2, NULL, NULL },
    { "toScreenCoordXWithDouble:", "toScreenCoordX", "I", 0x11, NULL, NULL },
    { "toScreenCoordYWithDouble:", "toScreenCoordY", "I", 0x11, NULL, NULL },
    { "toScreenCoordXdWithDouble:", "toScreenCoordXd", "D", 0x11, NULL, NULL },
    { "toScreenCoordYdWithDouble:", "toScreenCoordYd", "D", 0x11, NULL, NULL },
    { "toClippedScreenCoordXWithDouble:", "toClippedScreenCoordX", "I", 0x11, NULL, NULL },
    { "rememberOrigins", NULL, "V", 0x1, NULL, NULL },
    { "toClippedScreenCoordYWithDouble:", "toClippedScreenCoordY", "I", 0x11, NULL, NULL },
    { "toScreenCoordsWithDoubleArray:", "toScreenCoords", "Z", 0x11, NULL, NULL },
    { "isOnScreenWithDoubleArray:", "isOnScreen", "Z", 0x11, NULL, NULL },
    { "isOnViewWithDoubleArray:", "isOnView", "Z", 0x1, NULL, NULL },
    { "getOnScreenDiffWithDoubleArray:withDoubleArray:", "getOnScreenDiff", "[D", 0x1, NULL, NULL },
    { "isSegmentOffViewWithDoubleArray:withDoubleArray:", "isSegmentOffView", "Z", 0x1, NULL, NULL },
    { "toRealWorldCoordXWithDouble:", "toRealWorldCoordX", "D", 0x11, NULL, NULL },
    { "toRealWorldCoordYWithDouble:", "toRealWorldCoordY", "D", 0x11, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:", "setCoordSystem", "V", 0x11, NULL, NULL },
    { "translateCoordSystemInPixelsWithInt:withInt:withInt:withInt:", "translateCoordSystemInPixels", "V", 0x1, NULL, NULL },
    { "setCoordSystemFromMouseMoveWithInt:withInt:withInt:", "setCoordSystemFromMouseMove", "V", 0x1, NULL, NULL },
    { "pageUpDownTranslateCoordSystemWithInt:", "pageUpDownTranslateCoordSystem", "V", 0x1, NULL, NULL },
    { "setRealWorldCoordSystemWithDouble:withDouble:withDouble:withDouble:", "setRealWorldCoordSystem", "V", 0x11, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:withBoolean:", "setCoordSystem", "V", 0x11, NULL, NULL },
    { "updateBackgroundIfNecessary", NULL, "V", 0x4, NULL, NULL },
    { "getYmaxObject", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setAntialiasingWithBoolean:", "setAntialiasing", "V", 0x1, NULL, NULL },
    { "getAntialiasing", NULL, "Z", 0x1, NULL, NULL },
    { "setEuclidianViewNoWithInt:", "setEuclidianViewNo", "V", 0x1, NULL, NULL },
    { "getEuclidianViewNo", NULL, "I", 0x1, NULL, NULL },
    { "setYmaxObjectWithGeogebraCommonKernelArithmeticNumberValue:", "setYmaxObject", "V", 0x1, NULL, NULL },
    { "setXscaleWithDouble:", "setXscale", "V", 0x2, NULL, NULL },
    { "setYscaleWithDouble:", "setYscale", "V", 0x2, NULL, NULL },
    { "setFontSizeWithInt:", "setFontSize", "V", 0x4, NULL, NULL },
    { "getxZero", NULL, "D", 0x1, NULL, NULL },
    { "getyZero", NULL, "D", 0x1, NULL, NULL },
    { "getXZero", NULL, "D", 0x1, NULL, NULL },
    { "getYZero", NULL, "D", 0x1, NULL, NULL },
    { "getXYscaleRatioString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getXscale", NULL, "D", 0x1, NULL, NULL },
    { "getYscale", NULL, "D", 0x1, NULL, NULL },
    { "getInvXscale", NULL, "D", 0x1, NULL, NULL },
    { "getInvYscale", NULL, "D", 0x1, NULL, NULL },
    { "getViewWidth", NULL, "I", 0x1, NULL, NULL },
    { "getViewHeight", NULL, "I", 0x1, NULL, NULL },
    { "getScaleRatio", NULL, "D", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "getGridType", NULL, "I", 0x11, NULL, NULL },
    { "setGridTypeWithInt:", "setGridType", "V", 0x1, NULL, NULL },
    { "setXYMinMaxWithDoubleArray2:", "setXYMinMax", "V", 0x1, NULL, NULL },
    { "setRealWorldBounds", NULL, "V", 0x4, NULL, NULL },
    { "setXYMinMaxForSetCoordSystem", NULL, "V", 0x4, NULL, NULL },
    { "zoomAroundCenterWithDouble:", "zoomAroundCenter", "V", 0x11, NULL, NULL },
    { "setCoordTransformIfNeeded", NULL, "V", 0x2, NULL, NULL },
    { "updateAllDrawablesWithBoolean:", "updateAllDrawables", "V", 0x11, NULL, NULL },
    { "startBatchUpdate", NULL, "V", 0x11, NULL, NULL },
    { "endBatchUpdate", NULL, "V", 0x11, NULL, NULL },
    { "drawListAsComboBoxWithGeogebraCommonKernelGeosGeoList:withBoolean:", "drawListAsComboBox", "V", 0x1, NULL, NULL },
    { "calcPrintingScale", NULL, "V", 0x1, NULL, NULL },
    { "setAxesIntervalsWithDouble:withInt:", "setAxesIntervals", "V", 0x4, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "renameWithGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "drawableNeededWithGeogebraCommonKernelGeosGeoElement:", "drawableNeeded", "Z", 0x2, NULL, NULL },
    { "isPlotPanel", NULL, "Z", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "getHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "textfieldClickedWithInt:withInt:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "textfieldClicked", "Z", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setHits", "V", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGPoint:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setHits", "V", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGPoint:withInt:", "setHits", "V", 0x1, NULL, NULL },
    { "getHitButtonWithGeogebraCommonAwtGPoint:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getHitButton", "Lgeogebra.common.euclidian.MyButton;", 0x1, NULL, NULL },
    { "getLabelHitWithGeogebraCommonAwtGPoint:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getLabelHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getDrawableWithGeogebraCommonKernelGeosGeoElement:", "getDrawable", "Lgeogebra.common.euclidian.DrawableND;", 0x14, NULL, NULL },
    { "getDrawableNDWithGeogebraCommonKernelGeosGeoElement:", "getDrawableND", "Lgeogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "addToDrawableListsWithGeogebraCommonEuclidianDrawable:", "addToDrawableLists", "V", 0x4, NULL, NULL },
    { "isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:", "isVisibleInThisView", "Z", 0x1, NULL, NULL },
    { "createDrawableNDWithGeogebraCommonKernelGeosGeoElement:", "createDrawableND", "Lgeogebra.common.euclidian.DrawableND;", 0x11, NULL, NULL },
    { "createDrawableWithGeogebraCommonKernelGeosGeoElement:", "createDrawable", "Lgeogebra.common.euclidian.DrawableND;", 0x4, NULL, NULL },
    { "newDrawableWithGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lgeogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "resetMode", NULL, "V", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x1, NULL, NULL },
    { "getDrawableForWithGeogebraCommonKernelGeosGeoElement:", "getDrawableFor", "Lgeogebra.common.euclidian.DrawableND;", 0x11, NULL, NULL },
    { "updateAuxiliaryObjectWithGeogebraCommonKernelGeosGeoElement:", "updateAuxiliaryObject", "V", 0x11, NULL, NULL },
    { "updateDrawableFontSize", NULL, "V", 0x4, NULL, NULL },
    { "getFontPoint", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "setFontPointWithGeogebraCommonAwtGFont:", "setFontPoint", "V", 0x2, NULL, NULL },
    { "getFontLine", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontVector", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontConic", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontCoords", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "setFontCoordsWithGeogebraCommonAwtGFont:", "setFontCoords", "V", 0x2, NULL, NULL },
    { "getFontAxes", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getFontAngle", NULL, "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getStickyPointList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setBooleanSizeWithInt:", "setBooleanSize", "V", 0x1, NULL, NULL },
    { "getBooleanSize", NULL, "I", 0x11, NULL, NULL },
    { "setAllowToolTipsWithInt:", "setAllowToolTips", "V", 0x1, NULL, NULL },
    { "getAllowToolTips", NULL, "I", 0x11, NULL, NULL },
    { "getMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getInverseMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianView3D", NULL, "Z", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "changeLayerWithGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "changeLayer", "V", 0x1, NULL, NULL },
    { "getPlaneContaining", NULL, "Lgeogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "getCoordsForViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsForView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isMoveableWithGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "replaceBoundObjectWithGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "replaceBoundObject", "V", 0x1, NULL, NULL },
    { "getRightAngleStyle", NULL, "I", 0x11, NULL, NULL },
    { "isAutomaticGridDistance", NULL, "Z", 0x1, NULL, NULL },
    { "getGridDistances", NULL, "[D", 0x1, NULL, NULL },
    { "setGridDistancesWithDoubleArray:", "setGridDistances", "V", 0x1, NULL, NULL },
    { "getGridLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setAutomaticGridDistanceWithBoolean:", "setAutomaticGridDistance", "V", 0x1, NULL, NULL },
    { "getAxesLineStyle", NULL, "I", 0x1, NULL, NULL },
    { "setAxesLineStyleWithInt:", "setAxesLineStyle", "V", 0x1, NULL, NULL },
    { "getCoordTransform", NULL, "Lgeogebra.common.awt.GAffineTransform;", 0x1, NULL, NULL },
    { "setCoordTransformWithGeogebraCommonAwtGAffineTransform:", "setCoordTransform", "V", 0x4, NULL, NULL },
    { "updateBackground", NULL, "V", 0x11, NULL, NULL },
    { "getTempGraphics2DWithGeogebraCommonAwtGFont:", "getTempGraphics2D", "Lgeogebra.common.awt.GGraphics2D;", 0x401, NULL, NULL },
    { "getFont", NULL, "Lgeogebra.common.awt.GFont;", 0x401, NULL, NULL },
    { "setHeightWithInt:", "setHeight", "V", 0x404, NULL, NULL },
    { "setWidthWithInt:", "setWidth", "V", 0x404, NULL, NULL },
    { "initCursor", NULL, "V", 0x404, NULL, NULL },
    { "setStyleBarModeWithInt:", "setStyleBarMode", "V", 0x404, NULL, NULL },
    { "usesSelectionAsInputWithInt:", "usesSelectionAsInput", "Z", 0x19, NULL, NULL },
    { "usesSelectionRectangleAsInputWithInt:", "usesSelectionRectangleAsInput", "Z", 0x19, NULL, NULL },
    { "setSelectionRectangleWithGeogebraCommonAwtGRectangle:", "setSelectionRectangle", "V", 0x1, NULL, NULL },
    { "getAxesCross", NULL, "[D", 0x1, NULL, NULL },
    { "setAxesCrossWithDoubleArray:", "setAxesCross", "V", 0x1, NULL, NULL },
    { "setAxisCrossWithInt:withDouble:", "setAxisCross", "V", 0x1, NULL, NULL },
    { "getPositiveAxes", NULL, "[Z", 0x1, NULL, NULL },
    { "setPositiveAxesWithBooleanArray:", "setPositiveAxes", "V", 0x1, NULL, NULL },
    { "setPositiveAxisWithInt:withBoolean:", "setPositiveAxis", "V", 0x1, NULL, NULL },
    { "getDrawBorderAxes", NULL, "[Z", 0x1, NULL, NULL },
    { "setDrawBorderAxesWithBooleanArray:", "setDrawBorderAxes", "V", 0x1, NULL, NULL },
    { "isAxesCornerCoordsVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setAxesCornerCoordsVisibleWithBoolean:", "setAxesCornerCoordsVisible", "V", 0x1, NULL, NULL },
    { "getPrintingScale", NULL, "D", 0x11, NULL, NULL },
    { "setPrintingScaleWithDouble:", "setPrintingScale", "V", 0x11, NULL, NULL },
    { "getAxesLabelsWithBoolean:", "getAxesLabels", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAxesLabelsWithNSStringArray:", "setAxesLabels", "V", 0x1, NULL, NULL },
    { "setAxisLabelWithInt:withNSString:", "setAxisLabel", "V", 0x1, NULL, NULL },
    { "getScaleWithInt:", "getScale", "D", 0x1, NULL, NULL },
    { "setAutomaticAxesNumberingDistanceWithBoolean:withInt:", "setAutomaticAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "isAutomaticAxesNumberingDistance", NULL, "[Z", 0x1, NULL, NULL },
    { "getAxesNumberingDistances", NULL, "[D", 0x1, NULL, NULL },
    { "setAxesNumberingDistanceWithDouble:withInt:", "setAxesNumberingDistance", "V", 0x1, NULL, NULL },
    { "getGridIsBold", NULL, "Z", 0x1, NULL, NULL },
    { "getShowAxesNumbers", NULL, "[Z", 0x1, NULL, NULL },
    { "setShowAxesNumbersWithBooleanArray:", "setShowAxesNumbers", "V", 0x1, NULL, NULL },
    { "setShowAxisNumbersWithInt:withBoolean:", "setShowAxisNumbers", "V", 0x1, NULL, NULL },
    { "getAxesUnitLabels", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "setAxesUnitLabelsWithNSStringArray:", "setAxesUnitLabels", "V", 0x1, NULL, NULL },
    { "getAxesTickStyles", NULL, "[I", 0x1, NULL, NULL },
    { "setAxisTickStyleWithInt:withInt:", "setAxisTickStyle", "V", 0x1, NULL, NULL },
    { "setAxesTickStylesWithIntArray:", "setAxesTickStyles", "V", 0x1, NULL, NULL },
    { "setShowMouseCoordsWithBoolean:", "setShowMouseCoords", "V", 0x1, NULL, NULL },
    { "getAllowShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowShowMouseCoordsWithBoolean:", "setAllowShowMouseCoords", "V", 0x1, NULL, NULL },
    { "getShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setShowAxesRatioWithBoolean:", "setShowAxesRatio", "V", 0x1, NULL, NULL },
    { "getPreviewDrawable", NULL, "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "getGridDistancesWithInt:", "getGridDistances", "D", 0x1, NULL, NULL },
    { "getShowGrid", NULL, "Z", 0x1, NULL, NULL },
    { "isGridOrAxesShown", NULL, "Z", 0x1, NULL, NULL },
    { "getShowAxisWithInt:", "getShowAxis", "Z", 0x1, NULL, NULL },
    { "getShowXaxis", NULL, "Z", 0x1, NULL, NULL },
    { "getShowYaxis", NULL, "Z", 0x1, NULL, NULL },
    { "getLogAxisWithInt:", "getLogAxis", "Z", 0x1, NULL, NULL },
    { "getXaxisLog", NULL, "Z", 0x1, NULL, NULL },
    { "getYaxisLog", NULL, "Z", 0x1, NULL, NULL },
    { "createPreviewLineWithJavaUtilArrayList:", "createPreviewLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularBisectorWithJavaUtilArrayList:", "createPreviewPerpendicularBisector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewAngleBisectorWithJavaUtilArrayList:", "createPreviewAngleBisector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewSegmentWithJavaUtilArrayList:", "createPreviewSegment", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewRayWithJavaUtilArrayList:", "createPreviewRay", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewVectorWithJavaUtilArrayList:", "createPreviewVector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewConicWithInt:withJavaUtilArrayList:", "createPreviewConic", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewParabolaWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewParabola", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolygonWithJavaUtilArrayList:", "createPreviewPolygon", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewAngleWithJavaUtilArrayList:", "createPreviewAngle", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolyLineWithJavaUtilArrayList:", "createPreviewPolyLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "updatePreviewable", NULL, "V", 0x1, NULL, NULL },
    { "updatePreviewableForProcessMode", NULL, "V", 0x1, NULL, NULL },
    { "mouseEntered", NULL, "V", 0x11, NULL, NULL },
    { "mouseExited", NULL, "V", 0x11, NULL, NULL },
    { "hasMouse", NULL, "Z", 0x1, NULL, NULL },
    { "hasMouse2D", NULL, "Z", 0x11, NULL, NULL },
    { "createPreviewParallelLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewParallelLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewPerpendicularLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "setApplicationWithGeogebraCommonMainApp:", "setApplication", "V", 0x4, NULL, NULL },
    { "getApplication", NULL, "Lgeogebra.common.main.App;", 0x1, NULL, NULL },
    { "updateFonts", NULL, "V", 0x1, NULL, NULL },
    { "updateSize", NULL, "V", 0x1, NULL, NULL },
    { "updateSizeKeepDrawables", NULL, "V", 0x404, NULL, NULL },
    { "requestFocusInWindow", NULL, "Z", 0x401, NULL, NULL },
    { "drawGeometricObjectsWithGeogebraCommonAwtGGraphics2D:", "drawGeometricObjects", "V", 0x4, NULL, NULL },
    { "drawObjectsWithGeogebraCommonAwtGGraphics2D:", "drawObjects", "V", 0x4, NULL, NULL },
    { "clearBackgroundWithGeogebraCommonAwtGGraphics2D:", "clearBackground", "V", 0x14, NULL, NULL },
    { "drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:withBoolean:", "drawBackgroundWithImages", "V", 0x4, NULL, NULL },
    { "drawAxesRatioWithGeogebraCommonAwtGGraphics2D:", "drawAxesRatio", "V", 0x14, NULL, NULL },
    { "paintBackgroundWithGeogebraCommonAwtGGraphics2D:", "paintBackground", "V", 0x401, NULL, NULL },
    { "setReInitingWithBoolean:", "setReIniting", "V", 0x1, NULL, NULL },
    { "paintWithGeogebraCommonAwtGGraphics2D:", "paint", "V", 0x1, NULL, NULL },
    { "paintTheBackgroundWithGeogebraCommonAwtGGraphics2D:", "paintTheBackground", "V", 0x1, NULL, NULL },
    { "updateBackgroundImage", NULL, "V", 0x11, NULL, NULL },
    { "drawZoomRectangleWithGeogebraCommonAwtGGraphics2D:", "drawZoomRectangle", "V", 0x4, NULL, NULL },
    { "drawRectWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGBasicStroke:withGeogebraCommonAwtGRectangle:", "drawRect", "V", 0x4, NULL, NULL },
    { "drawMouseCoordsWithGeogebraCommonAwtGGraphics2D:", "drawMouseCoords", "V", 0x14, NULL, NULL },
    { "drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:", "drawBackgroundWithImages", "V", 0x4, NULL, NULL },
    { "drawBackgroundWithGeogebraCommonAwtGGraphics2D:withBoolean:", "drawBackground", "V", 0x14, NULL, NULL },
    { "drawGridWithGeogebraCommonAwtGGraphics2D:", "drawGrid", "V", 0x14, NULL, NULL },
    { "getXAxisCrossingPixel", NULL, "D", 0x2, NULL, NULL },
    { "getYAxisCrossingPixel", NULL, "D", 0x2, NULL, NULL },
    { "drawAxesWithGeogebraCommonAwtGGraphics2D:", "drawAxes", "V", 0x4, NULL, NULL },
    { "xAxisOnscreen", NULL, "Z", 0x2, NULL, NULL },
    { "yAxisOnscreen", NULL, "Z", 0x2, NULL, NULL },
    { "drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D:withDouble:withDouble:withDouble:withDouble:withDouble:", "drawLineAvoidingLabelsH", "V", 0x2, NULL, NULL },
    { "drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D:withDouble:withDouble:withDouble:withDouble:withDouble:", "drawLineAvoidingLabelsV", "V", 0x2, NULL, NULL },
    { "drawStringWithGeogebraCommonAwtGGraphics2D:withNSString:withDouble:withDouble:", "drawString", "V", 0x2, NULL, NULL },
    { "drawResetIconWithGeogebraCommonAwtGGraphics2D:", "drawResetIcon", "V", 0x404, NULL, NULL },
    { "drawActionObjectsWithGeogebraCommonAwtGGraphics2D:", "drawActionObjects", "V", 0x401, NULL, NULL },
    { "setDefRenderingHintsWithGeogebraCommonAwtGGraphics2D:", "setDefRenderingHints", "V", 0x1, NULL, NULL },
    { "setAntialiasingWithGeogebraCommonAwtGGraphics2D:", "setAntialiasing", "V", 0x404, NULL, NULL },
    { "drawAnimationButtonsWithGeogebraCommonAwtGGraphics2D:", "drawAnimationButtons", "V", 0x4, NULL, NULL },
    { "setBackgroundWithGeogebraCommonAwtGColor:", "setBackground", "V", 0x401, NULL, NULL },
    { "synchronizeMenuBarAndEuclidianStyleBarWithGeogebraCommonMainSettingsEuclidianSettings:", "synchronizeMenuBarAndEuclidianStyleBar", "V", 0x4, NULL, NULL },
    { "setPreferredSizeWithGeogebraCommonAwtGDimension:", "setPreferredSize", "V", 0x401, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setGridIsBoldWithBoolean:", "setGridIsBold", "V", 0x1, NULL, NULL },
    { "setGridColorWithGeogebraCommonAwtGColor:", "setGridColor", "V", 0x1, NULL, NULL },
    { "setGridLineStyleWithInt:", "setGridLineStyle", "V", 0x1, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "getSettings", NULL, "Lgeogebra.common.main.settings.EuclidianSettings;", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGRectangle:", "setHits", "V", 0x11, NULL, NULL },
    { "updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:", "updateCursor", "V", 0x1, NULL, NULL },
    { "setIntersectionHitsWithGeogebraCommonAwtGRectangle:", "setIntersectionHits", "V", 0x11, NULL, NULL },
    { "getSelectionRectangle", NULL, "Lgeogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "getBoundingPath", NULL, "Lgeogebra.common.euclidian.GeneralPathClipped;", 0x1, NULL, NULL },
    { "addBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:", "addBackgroundImage", "V", 0x11, NULL, NULL },
    { "removeBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:", "removeBackgroundImage", "V", 0x11, NULL, NULL },
    { "resetLists", NULL, "V", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "setPreviewWithGeogebraCommonEuclidianPreviewable:", "setPreview", "V", 0x1, NULL, NULL },
    { "setTemporaryCoordSystemForExport", NULL, "V", 0x11, NULL, NULL },
    { "getMaximumLabelSizeWithGeogebraCommonAwtGGraphics2D:", "getMaximumLabelSize", "Lgeogebra.common.awt.GPoint;", 0x1, NULL, NULL },
    { "restoreOldCoordSystem", NULL, "V", 0x11, NULL, NULL },
    { "setTemporarySizeWithInt:withInt:", "setTemporarySize", "V", 0x1, NULL, NULL },
    { "setShowAxisWithInt:withBoolean:withBoolean:", "setShowAxis", "Z", 0x1, NULL, NULL },
    { "setShowAxesWithBoolean:withBoolean:", "setShowAxes", "Z", 0x1, NULL, NULL },
    { "setLogAxisWithInt:withBoolean:withBoolean:", "setLogAxis", "Z", 0x1, NULL, NULL },
    { "setLogAxesWithBoolean:withBoolean:", "setLogAxes", "Z", 0x1, NULL, NULL },
    { "setBoldAxesWithBoolean:", "setBoldAxes", "V", 0x1, NULL, NULL },
    { "isTracing", NULL, "Z", 0x4, NULL, NULL },
    { "hasBackgroundImages", NULL, "Z", 0x4, NULL, NULL },
    { "getBackgroundGraphics", NULL, "Lgeogebra.common.awt.GGraphics2D;", 0x11, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "startXMLWithJavaLangStringBuilder:withBoolean:", "startXML", "V", 0x1, NULL, NULL },
    { "addAxisXMLWithInt:withJavaLangStringBuilder:", "addAxisXML", "V", 0x4, NULL, NULL },
    { "endXMLWithJavaLangStringBuilder:", "endXML", "V", 0x1, NULL, NULL },
    { "drawPointsWithGeogebraCommonKernelGeosGeoImage:withDoubleArray:withDoubleArray:", "drawPoints", "V", 0x1, NULL, NULL },
    { "doDrawPointsWithGeogebraCommonKernelGeosGeoImage:withJavaUtilList:withGeogebraCommonAwtGColor:withInt:withInt:", "doDrawPoints", "V", 0x404, NULL, NULL },
    { "resetXYMinMaxObjects", NULL, "V", 0x1, NULL, NULL },
    { "setViewShowAllObjectsWithBoolean:", "setViewShowAllObjects", "V", 0x1, NULL, NULL },
    { "getSelectedWidth", NULL, "I", 0x1, NULL, NULL },
    { "getSelectedHeight", NULL, "I", 0x1, NULL, NULL },
    { "getExportWidth", NULL, "I", 0x1, NULL, NULL },
    { "getExportHeight", NULL, "I", 0x1, NULL, NULL },
    { "clickedGeoWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "clickedGeo", "V", 0x11, NULL, NULL },
    { "newZoomer", NULL, "Lgeogebra.common.euclidian.MyZoomer;", 0x404, NULL, NULL },
    { "zoomWithDouble:withDouble:withDouble:withInt:withBoolean:", "zoom", "V", 0x1, NULL, NULL },
    { "zoomAxesRatioWithDouble:withBoolean:", "zoomAxesRatio", "V", 0x11, NULL, NULL },
    { "setStandardViewWithBoolean:", "setStandardView", "V", 0x11, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setAnimatedRealWorldCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:withBoolean:", "setAnimatedRealWorldCoordSystem", "V", 0x11, NULL, NULL },
    { "mouseMovedOverWithGeogebraCommonKernelGeosGeoElement:", "mouseMovedOver", "V", 0x11, NULL, NULL },
    { "highlightWithGeogebraCommonKernelGeosGeoElement:", "highlight", "V", 0x1, NULL, NULL },
    { "highlightWithJavaUtilArrayList:", "highlight", "V", 0x1, NULL, NULL },
    { "mouseMovedOverListWithJavaUtilArrayList:", "mouseMovedOverList", "V", 0x11, NULL, NULL },
    { "setAnimationButtonsHighlightedWithBoolean:", "setAnimationButtonsHighlighted", "Z", 0x11, NULL, NULL },
    { "drawPlayButtonInThisView", NULL, "Z", 0x4, NULL, NULL },
    { "getAxesColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getGridColor", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "addWithGeogebraCommonJavaxSwingGBox:", "add", "V", 0x401, NULL, NULL },
    { "removeWithGeogebraCommonJavaxSwingGBox:", "remove", "V", 0x401, NULL, NULL },
    { "initViewWithBoolean:", "initView", "V", 0x4, NULL, NULL },
    { "setShowAxisWithBoolean:", "setShowAxis", "V", 0x1, NULL, NULL },
    { "setLogAxisWithBoolean:", "setLogAxis", "V", 0x1, NULL, NULL },
    { "setTransparentCursor", NULL, "V", 0x401, NULL, NULL },
    { "setEraserCursor", NULL, "V", 0x401, NULL, NULL },
    { "getGraphicsForPen", NULL, "Lgeogebra.common.awt.GGraphics2D;", 0x401, NULL, NULL },
    { "hasStyleBar", NULL, "Z", 0x11, NULL, NULL },
    { "isPenModeWithInt:", "isPenMode", "Z", 0x9, NULL, NULL },
    { "setOptionPanelWithGeogebraCommonGuiDialogOptionsOptionsEuclidian:", "setOptionPanel", "V", 0x1, NULL, NULL },
    { "getDeletionRectangle", NULL, "Lgeogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "setDeletionRectangleWithGeogebraCommonAwtGRectangle:", "setDeletionRectangle", "V", 0x1, NULL, NULL },
    { "getBoldAxesWithBoolean:withInt:", "getBoldAxes", "I", 0x9, NULL, NULL },
    { "areAxesBold", NULL, "Z", 0x1, NULL, NULL },
    { "estimateNumberHeightWithGeogebraCommonAwtGFont:", "estimateNumberHeight", "D", 0xa, NULL, NULL },
    { "estimateNumberWidthWithDouble:withGeogebraCommonAwtGFont:", "estimateNumberWidth", "D", 0x2, NULL, NULL },
    { "estimateTextWidthWithNSString:withGeogebraCommonAwtGFont:", "estimateTextWidth", "D", 0xa, NULL, NULL },
    { "getSliderOffsetY", NULL, "I", 0x1, NULL, NULL },
    { "getMinSamplePoints", NULL, "D", 0x1, NULL, NULL },
    { "getMaxBendOfScreen", NULL, "D", 0x1, NULL, NULL },
    { "getMaxBend", NULL, "D", 0x1, NULL, NULL },
    { "getMaxDefinedBisections", NULL, "I", 0x1, NULL, NULL },
    { "getMinPixelDistance", NULL, "D", 0x1, NULL, NULL },
    { "getMaxZeroCount", NULL, "I", 0x1, NULL, NULL },
    { "getMaxPixelDistance", NULL, "D", 0x1, NULL, NULL },
    { "getMaxProblemBisections", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteTop", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteLeft", NULL, "I", 0x1, NULL, NULL },
    { "getStyleBar", NULL, "Lgeogebra.common.euclidian.EuclidianStyleBar;", 0x11, NULL, NULL },
    { "newEuclidianStyleBar", NULL, "Lgeogebra.common.euclidian.EuclidianStyleBar;", 0x404, NULL, NULL },
    { "getLastRepaintTime", NULL, "J", 0x1, NULL, NULL },
    { "setLabels", NULL, "V", 0x11, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "exportPaintPreWithGeogebraCommonAwtGGraphics2D:withDouble:withBoolean:", "exportPaintPre", "V", 0x401, NULL, NULL },
    { "exportPaintWithGeogebraCommonAwtGGraphics2D:withDouble:withBoolean:", "exportPaint", "V", 0x1, NULL, NULL },
    { "exportPaintPreWithGeogebraCommonAwtGGraphics2D:withDouble:", "exportPaintPre", "V", 0x1, NULL, NULL },
    { "centerViewWithGeogebraCommonKernelKernelNDGeoPointND:", "centerView", "V", 0x1, NULL, NULL },
    { "getDraggedLabelsWithJavaUtilArrayList:", "getDraggedLabels", "Ljava.lang.String;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hasMouse__", "hasMouse", 0x4, "Z", NULL, NULL,  },
    { "EVNO_GENERAL_", NULL, 0x9, "I", &GeogebraCommonEuclidianEuclidianView_EVNO_GENERAL_, NULL,  },
    { "EVNO_3D_", NULL, 0x9, "I", &GeogebraCommonEuclidianEuclidianView_EVNO_3D_, NULL,  },
    { "evNo_", NULL, 0x4, "I", NULL, NULL,  },
    { "xZeroOld_", NULL, 0x2, "D", NULL, NULL,  },
    { "yZeroOld_", NULL, 0x2, "D", NULL, NULL,  },
    { "mode_", NULL, 0x2, "I", NULL, NULL,  },
    { "MIN_WIDTH_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MIN_WIDTH },
    { "MIN_HEIGHT_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MIN_HEIGHT },
    { "EXPORT1_", NULL, 0x1c, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianView_EXPORT1_, NULL,  },
    { "EXPORT2_", NULL, 0x1c, "Ljava.lang.String;", &GeogebraCommonEuclidianEuclidianView_EXPORT2_, NULL,  },
    { "PRINTER_PIXEL_PER_CM_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_PRINTER_PIXEL_PER_CM },
    { "MODE_ZOOM_FACTOR_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_MODE_ZOOM_FACTOR },
    { "MOUSE_WHEEL_ZOOM_FACTOR_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_MOUSE_WHEEL_ZOOM_FACTOR },
    { "SCALE_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD },
    { "SCREEN_BORDER_", NULL, 0xc, "I", &GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_, NULL,  },
    { "XZERO_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_XZERO_STANDARD },
    { "YZERO_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_YZERO_STANDARD },
    { "bgImage_", NULL, 0x4, "Lgeogebra.common.awt.GBufferedImage;", NULL, NULL,  },
    { "bgGraphics_", NULL, 0x4, "Lgeogebra.common.awt.GGraphics2D;", NULL, NULL,  },
    { "colZoomRectangle_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonEuclidianEuclidianView_colZoomRectangle_, NULL,  },
    { "colZoomRectangleFill_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonEuclidianEuclidianView_colZoomRectangleFill_, NULL,  },
    { "colDeletionSquare_", NULL, 0x1c, "Lgeogebra.common.awt.GColor;", &GeogebraCommonEuclidianEuclidianView_colDeletionSquare_, NULL,  },
    { "strokeDeletionSquare_", NULL, 0x1c, "Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianEuclidianView_strokeDeletionSquare_, NULL,  },
    { "deletionRectangle_", NULL, 0x4, "Lgeogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "axesColor_", NULL, 0x2, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "gridColor_", NULL, 0x2, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "selectionRectangle_", NULL, 0x4, "Lgeogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "defAxesStroke_", NULL, 0x9, "Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianEuclidianView_defAxesStroke_, NULL,  },
    { "boldAxesStroke_", NULL, 0xa, "Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianEuclidianView_boldAxesStroke_, NULL,  },
    { "axesStroke_", NULL, 0x2, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "tickStroke_", NULL, 0x2, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "gridStroke_", NULL, 0x2, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "fontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "coordTransform_", NULL, 0x2, "Lgeogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "AxesTickInterval_", NULL, 0x4, "[D", NULL, NULL,  },
    { "axesNumberFormat_", NULL, 0x4, "[Lgeogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "showAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "logAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "automaticGridDistance_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gridDistances_", NULL, 0x4, "[D", NULL, NULL,  },
    { "gridLineStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "axesLineType_", NULL, 0x2, "I", NULL, NULL,  },
    { "gridIsBold_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tooltipsInThisView_", NULL, 0x4, "I", NULL, NULL,  },
    { "GRID_CARTESIAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN },
    { "GRID_ISOMETRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC },
    { "GRID_POLAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_GRID_POLAR },
    { "gridType_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontPoint_", NULL, 0x2, "Lgeogebra.common.awt.GFont;", NULL, NULL,  },
    { "fontCoords_", NULL, 0x2, "Lgeogebra.common.awt.GFont;", NULL, NULL,  },
    { "printScaleNF_", NULL, 0x4, "Lgeogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "showGrid__", "showGrid", 0x4, "Z", NULL, NULL,  },
    { "antiAliasing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showMouseCoords_", NULL, 0x4, "Z", NULL, NULL,  },
    { "allowShowMouseCoords_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showAxesRatio_", NULL, 0x4, "Z", NULL, NULL,  },
    { "highlightAnimationButtons_", NULL, 0x4, "Z", NULL, NULL,  },
    { "pointCapturingMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "showAxesCornerCoords_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showAxesNumbers_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "axesLabelsStyle_", NULL, 0x4, "[I", NULL, NULL,  },
    { "axesUnitLabels_", NULL, 0x4, "[Ljava.lang.String;", NULL, NULL,  },
    { "previewDrawable_", NULL, 0x2, "Lgeogebra.common.euclidian.Previewable;", NULL, NULL,  },
    { "firstPaint_", NULL, 0x4, "Z", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "settings_", NULL, 0x12, "Lgeogebra.common.main.settings.EuclidianSettings;", NULL, NULL,  },
    { "euclidianController_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianController;", NULL, NULL,  },
    { "hits_", NULL, 0x12, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "MAX_PIXEL_DISTANCE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MAX_PIXEL_DISTANCE },
    { "MIN_PIXEL_DISTANCE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_MIN_PIXEL_DISTANCE },
    { "MAX_ANGLE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_MAX_ANGLE },
    { "MAX_ANGLE_OFF_SCREEN_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianEuclidianView_MAX_ANGLE_OFF_SCREEN },
    { "MAX_BEND_", NULL, 0x1a, "D", &GeogebraCommonEuclidianEuclidianView_MAX_BEND_, NULL,  },
    { "MAX_BEND_OFF_SCREEN_", NULL, 0x1a, "D", &GeogebraCommonEuclidianEuclidianView_MAX_BEND_OFF_SCREEN_, NULL,  },
    { "MAX_DEFINED_BISECTIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MAX_DEFINED_BISECTIONS },
    { "MAX_PROBLEM_BISECTIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MAX_PROBLEM_BISECTIONS },
    { "MAX_ZERO_COUNT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MAX_ZERO_COUNT },
    { "MIN_SAMPLE_POINTS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianEuclidianView_MIN_SAMPLE_POINTS },
    { "companion_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianViewCompanion;", NULL, NULL,  },
    { "xminObject_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "xmaxObject_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "yminObject_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "ymaxObject_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "lockedAxesRatio_", NULL, 0x4, "Ljava.lang.Double;", NULL, NULL,  },
    { "updateBackgroundOnNextRepaint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "updatingBounds_", NULL, 0x2, "Z", NULL, NULL,  },
    { "xmin_", NULL, 0x1, "D", NULL, NULL,  },
    { "xmax_", NULL, 0x1, "D", NULL, NULL,  },
    { "ymin_", NULL, 0x1, "D", NULL, NULL,  },
    { "ymax_", NULL, 0x1, "D", NULL, NULL,  },
    { "invXscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "invYscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "xZero_", NULL, 0x2, "D", NULL, NULL,  },
    { "yZero_", NULL, 0x2, "D", NULL, NULL,  },
    { "xscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "yscale_", NULL, 0x2, "D", NULL, NULL,  },
    { "printingScale_", NULL, 0x4, "D", NULL, NULL,  },
    { "DrawableMap_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Lgeogebra/common/kernel/geos/GeoElement;Lgeogebra/common/euclidian/DrawableND;>;",  },
    { "stickyPointList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "allDrawableList_", NULL, 0x2, "Lgeogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "drawLayers_", NULL, 0x1, "[Lgeogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "bgImageList_", NULL, 0x2, "Lgeogebra.common.euclidian.DrawableList;", NULL, NULL,  },
    { "piAxisUnit_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesTickStyles_", NULL, 0x4, "[I", NULL, NULL,  },
    { "automaticAxesNumberingDistances_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "axesNumberingDistances_", NULL, 0x4, "[D", NULL, NULL,  },
    { "needsAllDrawablesUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "batchUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "geosWaiting_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitPointOrBoundary_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitFilling_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "hitLabel_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "axisCross_", NULL, 0x4, "[D", NULL, NULL,  },
    { "positiveAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "drawBorderAxes_", NULL, 0x4, "[Z", NULL, NULL,  },
    { "reIniting_", NULL, 0x4, "Z", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "tempLine_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "styleBar_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianStyleBar;", NULL, NULL,  },
    { "axesLabelsPositionsY_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;",  },
    { "axesLabelsPositionsX_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;",  },
    { "yLabelMaxWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "xLabelHeights_", NULL, 0x2, "D", NULL, NULL,  },
    { "widthTemp_", NULL, 0x2, "I", NULL, NULL,  },
    { "heightTemp_", NULL, 0x2, "I", NULL, NULL,  },
    { "xminTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "xmaxTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "yminTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "ymaxTemp_", NULL, 0x2, "D", NULL, NULL,  },
    { "tracing_", NULL, 0x4, "Z", NULL, NULL,  },
    { "tempArrayList_", NULL, 0x2, "Lgeogebra.common.euclidian.Hits;", NULL, NULL,  },
    { "zoomer_", NULL, 0x2, "Lgeogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "axesRatioZoomer_", NULL, 0x2, "Lgeogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "mover_", NULL, 0x2, "Lgeogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "zoomerRW_", NULL, 0x2, "Lgeogebra.common.euclidian.MyZoomer;", NULL, NULL,  },
    { "optionPanel_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.OptionsEuclidian;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianEuclidianView = { 2, "EuclidianView", "geogebra.common.euclidian", NULL, 0x401, 360, methods, 140, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianEuclidianView;
}

@end

IOSObjectArray *GeogebraCommonEuclidianEuclidianView_getLineTypes() {
  GeogebraCommonEuclidianEuclidianView_initialize();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DOTTED) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_DOTTED) autorelease] } count:5 type:JavaLangInteger_class_()];
  return ret;
}

IOSObjectArray *GeogebraCommonEuclidianEuclidianView_getPointStyles() {
  GeogebraCommonEuclidianEuclidianView_initialize();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST) autorelease], [new_JavaLangInteger_initWithInt_(GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST) autorelease] } count:10 type:JavaLangInteger_class_()];
  return ret;
}

void GeogebraCommonEuclidianEuclidianView_initWithGeogebraCommonEuclidianEuclidianController_withInt_withGeogebraCommonMainSettingsEuclidianSettings_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonEuclidianEuclidianController *ec, jint viewNo, GeogebraCommonMainSettingsEuclidianSettings *settings) {
  NSObject_init(self);
  self->evNo_ = 1;
  self->mode_ = GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE;
  GeogebraCommonEuclidianEuclidianView_set_coordTransform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_showAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_logAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO } count:2]);
  self->automaticGridDistance_ = YES;
  self->gridIsBold_ = NO;
  self->tooltipsInThisView_ = GeogebraCommonPluginEuclidianStyleConstants_TOOLTIPS_AUTOMATIC;
  self->gridType_ = GeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN;
  self->showGrid__ = NO;
  self->antiAliasing_ = YES;
  self->showMouseCoords_ = NO;
  self->allowShowMouseCoords_ = NO;
  self->showAxesRatio_ = NO;
  self->highlightAnimationButtons_ = NO;
  self->showAxesCornerCoords_ = YES;
  self->firstPaint_ = YES;
  self->updatingBounds_ = NO;
  GeogebraCommonEuclidianEuclidianView_setAndConsume_DrawableMap_(self, new_JavaUtilHashMap_initWithInt_(500));
  GeogebraCommonEuclidianEuclidianView_setAndConsume_stickyPointList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianView_setAndConsume_allDrawableList_(self, new_GeogebraCommonEuclidianDrawableList_init());
  GeogebraCommonEuclidianEuclidianView_setAndConsume_bgImageList_(self, new_GeogebraCommonEuclidianDrawableList_init());
  GeogebraCommonEuclidianEuclidianView_setAndConsume_automaticAxesNumberingDistances_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES } count:2]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_geosWaiting_(self, new_JavaUtilArrayList_init());
  self->reIniting_ = NO;
  GeogebraCommonEuclidianEuclidianView_set_circle_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble]);
  GeogebraCommonEuclidianEuclidianView_set_tempLine_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabelsPositionsY_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabelsPositionsX_(self, new_JavaUtilArrayList_init());
  self->yLabelMaxWidth_ = 0;
  self->xLabelHeights_ = 0;
  self->tracing_ = NO;
  GeogebraCommonEuclidianEuclidianView_setAndConsume_tempArrayList_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianView_set_optionPanel_(self, nil);
  [self setEuclidianViewNoWithInt:viewNo];
  GeogebraCommonEuclidianEuclidianView_set_companion_(self, [self newEuclidianViewCompanion]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_drawLayers_(self, [IOSObjectArray newArrayWithLength:GeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS + 1 type:GeogebraCommonEuclidianDrawableList_class_()]);
  for (jint k = 0; k <= GeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS; k++) {
    IOSObjectArray_SetAndConsume(self->drawLayers_, k, new_GeogebraCommonEuclidianDrawableList_init());
  }
  [self initAxesValues];
  GeogebraCommonEuclidianEuclidianView_set_euclidianController_(self, ec);
  GeogebraCommonEuclidianEuclidianView_set_kernel_(self, [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec)) getKernel]);
  GeogebraCommonEuclidianEuclidianView_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication]);
  GeogebraCommonEuclidianEuclidianView_set_settings_(self, settings);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_xminObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]));
  GeogebraCommonEuclidianEuclidianView_setAndConsume_xmaxObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]));
  GeogebraCommonEuclidianEuclidianView_setAndConsume_yminObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]));
  GeogebraCommonEuclidianEuclidianView_setAndConsume_ymaxObject_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([self->kernel_ getConstruction]));
  GeogebraCommonEuclidianEuclidianView_setAndConsume_hits_(self, new_GeogebraCommonEuclidianHits_init());
  GeogebraCommonEuclidianEuclidianView_set_printScaleNF_(self, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithNSString:@"#.#####" withInt:5]);
}

void GeogebraCommonEuclidianEuclidianView_setStandardCoordSystemWithBoolean_(GeogebraCommonEuclidianEuclidianView *self, jboolean repaint) {
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, GeogebraCommonEuclidianEuclidianView_XZERO_STANDARD, GeogebraCommonEuclidianEuclidianView_YZERO_STANDARD, GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD, GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD, repaint);
}

jboolean GeogebraCommonEuclidianEuclidianView_clearRectangleWithInt_(jint mode) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    return YES;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    return NO;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    return NO;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    return NO;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    return NO;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    return NO;
    default:
    return YES;
  }
}

void GeogebraCommonEuclidianEuclidianView_setSizeListeners(GeogebraCommonEuclidianEuclidianView *self) {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->xminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->yminObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->xmaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(self->ymaxObject_, [GeogebraCommonKernelGeosGeoNumeric class])))) addEVSizeListenerWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:self];
}

jint GeogebraCommonEuclidianEuclidianView_toScreenCoordXWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xRW) {
  return (jint) JavaLangMath_roundWithDouble_([self getxZero] + xRW * [self getXscale]);
}

jint GeogebraCommonEuclidianEuclidianView_toScreenCoordYWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yRW) {
  return (jint) JavaLangMath_roundWithDouble_([self getyZero] - (yRW * [self getYscale]));
}

jdouble GeogebraCommonEuclidianEuclidianView_toScreenCoordXdWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xRW) {
  if ([self getXaxisLog]) return [self getxZero] + (JavaLangMath_log10WithDouble_(xRW) * [self getXscale]);
  else return [self getxZero] + (xRW * [self getXscale]);
}

jdouble GeogebraCommonEuclidianEuclidianView_toScreenCoordYdWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yRW) {
  if ([self getYaxisLog]) return [self getYZero] + (JavaLangMath_log10WithDouble_(yRW) * [self getYscale]);
  else return [self getyZero] - (yRW * [self getYscale]);
}

jdouble GeogebraCommonEuclidianEuclidianView_toRealWorldCoordXWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble x) {
  return (x - [self getxZero]) * [self getInvXscale];
}

jdouble GeogebraCommonEuclidianEuclidianView_toRealWorldCoordYWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble y) {
  return ([self getyZero] - y) * [self getInvYscale];
}

void GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale) {
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(self, xZero, yZero, xscale, yscale, YES);
}

void GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xmin2, jdouble xmax2, jdouble ymin2, jdouble ymax2) {
  jdouble calcXscale = [self getWidth] / (xmax2 - xmin2);
  if ([self getXaxisLog]) {
    calcXscale = [self getWidth] / (xmax2 - xmin2);
  }
  jdouble calcYscale = [self getHeight] / (ymax2 - ymin2);
  jdouble calcXzero = -calcXscale * xmin2;
  jdouble calcYzero = calcYscale * ymax2;
  GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, calcXzero, calcYzero, calcXscale, calcYscale);
}

void GeogebraCommonEuclidianEuclidianView_setCoordSystemWithDouble_withDouble_withDouble_withDouble_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, jdouble xZero, jdouble yZero, jdouble xscale, jdouble yscale, jboolean repaint) {
  if (JavaLangDouble_isNaNWithDouble_(xscale) || (xscale < GeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (xscale > GeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  if (JavaLangDouble_isNaNWithDouble_(yscale) || (yscale < GeogebraCommonKernelKernel_MAX_DOUBLE_PRECISION) || (yscale > GeogebraCommonKernelKernel_INV_MAX_DOUBLE_PRECISION)) {
    return;
  }
  self->xZero_ = xZero;
  self->yZero_ = yZero;
  GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(self, xscale);
  GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(self, yscale);
  GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(self);
  [self setXYMinMaxForSetCoordSystem];
  [self setRealWorldBounds];
  if (repaint) {
    self->updateBackgroundOnNextRepaint_ = YES;
    GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, repaint);
    if ([((GeogebraCommonMainApp *) nil_chk([self getApplication])) hasEuclidianView2WithInt:1]) {
      [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(self->app_)) setCoordSystemOccured];
}

void GeogebraCommonEuclidianEuclidianView_setXscaleWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble xscale) {
  self->xscale_ = xscale;
  self->invXscale_ = 1 / xscale;
}

void GeogebraCommonEuclidianEuclidianView_setYscaleWithDouble_(GeogebraCommonEuclidianEuclidianView *self, jdouble yscale) {
  self->yscale_ = yscale;
  self->invYscale_ = 1 / yscale;
}

jint GeogebraCommonEuclidianEuclidianView_getGridType(GeogebraCommonEuclidianEuclidianView *self) {
  return self->gridType_;
}

void GeogebraCommonEuclidianEuclidianView_setCoordTransformIfNeeded(GeogebraCommonEuclidianEuclidianView *self) {
  if (self->coordTransform_ != nil) {
    [self->coordTransform_ setTransformWithDouble:self->xscale_ withDouble:0.0 withDouble:0.0 withDouble:-self->yscale_ withDouble:self->xZero_ withDouble:self->yZero_];
  }
}

void GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(GeogebraCommonEuclidianEuclidianView *self, jboolean repaint) {
  if (repaint && self->batchUpdate_) {
    self->needsAllDrawablesUpdate_ = YES;
    return;
  }
  [((GeogebraCommonEuclidianDrawableList *) nil_chk(self->allDrawableList_)) updateAll];
  if (repaint) {
    [self repaint];
  }
}

jboolean GeogebraCommonEuclidianEuclidianView_drawableNeededWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonKernelGeosGeoElement *geo) {
  return ([self isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:geo] && ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet] || [self isPlotPanel]) && ([geo isEuclidianVisible] || ([geo isGeoText] && [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) isNeedsUpdatedBoundingBox]) || ([geo isGeoAngle] && [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoAngle class]]))) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR];
}

GeogebraCommonEuclidianDrawableND *GeogebraCommonEuclidianEuclidianView_getDrawableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonKernelGeosGeoElement *geo) {
  return [((JavaUtilHashMap *) nil_chk(self->DrawableMap_)) getWithId:geo];
}

void GeogebraCommonEuclidianEuclidianView_setFontPointWithGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonAwtGFont *fontPoint) {
  GeogebraCommonEuclidianEuclidianView_set_fontPoint_(self, fontPoint);
}

void GeogebraCommonEuclidianEuclidianView_setFontCoordsWithGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, GeogebraCommonAwtGFont *fontCoords) {
  GeogebraCommonEuclidianEuclidianView_set_fontCoords_(self, fontCoords);
}

jint GeogebraCommonEuclidianEuclidianView_getAllowToolTips(GeogebraCommonEuclidianEuclidianView *self) {
  return self->tooltipsInThisView_;
}

void GeogebraCommonEuclidianEuclidianView_updateBackground(GeogebraCommonEuclidianEuclidianView *self) {
  [self setAxesIntervalsWithDouble:[self getXscale] withInt:0];
  [self setAxesIntervalsWithDouble:[self getYscale] withInt:1];
  GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(self);
  GeogebraCommonEuclidianEuclidianView_updateAllDrawablesWithBoolean_(self, YES);
}

jboolean GeogebraCommonEuclidianEuclidianView_usesSelectionAsInputWithInt_(jint mode) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    return NO;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PEN:
    return YES;
    default:
    return NO;
  }
}

jboolean GeogebraCommonEuclidianEuclidianView_usesSelectionRectangleAsInputWithInt_(jint mode) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_FITLINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CREATE_LIST:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATE_BY_VECTOR:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_DILATE_FROM_POINT:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_COPY_VISUAL_STYLE:
    return YES;
    default:
    return NO;
  }
}

jboolean GeogebraCommonEuclidianEuclidianView_hasMouse2D(GeogebraCommonEuclidianEuclidianView *self) {
  return self->hasMouse__;
}

void GeogebraCommonEuclidianEuclidianView_clearBackgroundWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g)) setColorWithGeogebraCommonAwtGColor:[self getBackgroundCommon]];
  [g updateCanvasColor];
  [g fillRectWithInt:0 withInt:0 withInt:[self getWidth] withInt:[self getHeight]];
}

void GeogebraCommonEuclidianEuclidianView_updateBackgroundImage(GeogebraCommonEuclidianEuclidianView *self) {
  if (self->bgGraphics_ != nil) {
    [self drawBackgroundWithImagesWithGeogebraCommonAwtGGraphics2D:self->bgGraphics_ withBoolean:NO];
  }
}

void GeogebraCommonEuclidianEuclidianView_drawBackgroundWithGeogebraCommonAwtGGraphics2D_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g, jboolean clear) {
  if (clear) {
    GeogebraCommonEuclidianEuclidianView_clearBackgroundWithGeogebraCommonAwtGGraphics2D_(self, g);
  }
  [self setAntialiasingWithGeogebraCommonAwtGGraphics2D:g];
  if (IOSBooleanArray_Get(nil_chk(self->drawBorderAxes_), 0) || IOSBooleanArray_Get(self->drawBorderAxes_, 1)) {
    GeogebraCommonAwtGPoint *labelOffset = [self getMaximumLabelSizeWithGeogebraCommonAwtGGraphics2D:g];
    if (IOSBooleanArray_Get(self->drawBorderAxes_, 0)) {
      *IOSDoubleArray_GetRef(nil_chk(self->axisCross_), 0) = [self getYmin] + ((((GeogebraCommonAwtGPoint *) nil_chk(labelOffset))->y_ + 10) / [self getYscale]);
    }
    if (IOSBooleanArray_Get(self->drawBorderAxes_, 1)) {
      *IOSDoubleArray_GetRef(nil_chk(self->axisCross_), 1) = [self getXmin] + ((((GeogebraCommonAwtGPoint *) nil_chk(labelOffset))->x_ + 10) / [self getXscale]);
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsY_)) clear];
  [((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsX_)) clear];
  self->yLabelMaxWidth_ = 0;
  self->xLabelHeights_ = GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_([self getFontAxes]);
  if (IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) || IOSBooleanArray_Get(self->showAxes_, 1)) {
    [self drawAxesWithGeogebraCommonAwtGGraphics2D:g];
  }
  if (self->showGrid__) {
    GeogebraCommonEuclidianEuclidianView_drawGridWithGeogebraCommonAwtGGraphics2D_(self, g);
  }
  if ([((GeogebraCommonMainApp *) nil_chk([self getApplication])) showResetIcon] && ([((GeogebraCommonMainApp *) nil_chk([self getApplication])) isApplet] || [((GeogebraCommonMainApp *) nil_chk([self getApplication])) isHTML5Applet])) {
    [self drawResetIconWithGeogebraCommonAwtGGraphics2D:g];
  }
}

void GeogebraCommonEuclidianEuclidianView_drawGridWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  jdouble xCrossPix = [self getxZero] + (IOSDoubleArray_Get(nil_chk(self->axisCross_), 1) * [self getXscale]);
  jdouble yCrossPix = [self getyZero] - (IOSDoubleArray_Get(self->axisCross_, 0) * [self getYscale]);
  jint yAxisEnd = (IOSBooleanArray_Get(nil_chk(self->positiveAxes_), 1) && yCrossPix < [self getHeight]) ? J2ObjCFpToInt(yCrossPix) : [self getHeight];
  jint xAxisStart = (IOSBooleanArray_Get(self->positiveAxes_, 0) && xCrossPix > 0) ? J2ObjCFpToInt(xCrossPix) : 0;
  id<GeogebraCommonAwtGShape> oldClip = [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getClip];
  if (self->gridType_ != GeogebraCommonEuclidianEuclidianView_GRID_POLAR) {
    [g2 setClipWithInt:xAxisStart withInt:0 withInt:[self getWidth] withInt:yAxisEnd];
  }
  [g2 setColorWithGeogebraCommonAwtGColor:self->gridColor_];
  [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->gridStroke_];
  {
    jdouble tickStep;
    jdouble start;
    jdouble pix;
    jdouble rw;
    jdouble rwBase;
    jdouble tickStepX;
    jdouble startX;
    jdouble startX2;
    jdouble tickStepY;
    jdouble startY;
    jint extra;
    jdouble min;
    jdouble d1;
    jdouble d2;
    jdouble d3;
    jdouble d4;
    jdouble max;
    jdouble tickStepR;
    jdouble r;
    jdouble angleStep;
    jdouble y1, y2, m;
    switch (self->gridType_) {
      case GeogebraCommonEuclidianEuclidianView_GRID_CARTESIAN:
      tickStep = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0);
      start = fmod([self getxZero], tickStep);
      pix = start;
      rw = [self getXmin] - (fmod([self getXmin], IOSDoubleArray_Get(nil_chk(self->axesNumberingDistances_), 0)));
      rwBase = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
      if (pix < GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_) {
        pix += tickStep;
        if (![self getXaxisLog] || [self getXmin] < 0) rw += IOSDoubleArray_Get(self->axesNumberingDistances_, 0);
      }
      for (jint i = 0; pix <= [self getWidth]; i++) {
        if ([self getXaxisLog]) {
          jdouble r = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(self->axesNumberingDistances_, 0) * i);
          if (JavaLangMath_roundWithDouble_(r) == r) rw = JavaLangMath_powWithDouble_withDouble_(10, r);
          else {
            rw = JavaLangMath_powWithDouble_withDouble_(10, J2ObjCFpToInt(r));
            jdouble decimal = r - J2ObjCFpToInt(r);
            rw = decimal * 10 * rw;
          }
          pix = GeogebraCommonEuclidianEuclidianView_toScreenCoordXdWithDouble_(self, rw);
        }
        if (!IOSBooleanArray_Get(nil_chk(self->showAxes_), 1) || JavaLangMath_absWithDouble_(pix - xCrossPix) > 2.0) {
          if ([((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsX_)) containsWithId:[new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + GeogebraCommonKernelKernel_MIN_PRECISION))) autorelease]]) {
            GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, pix, 0, pix, [self getHeight], yCrossPix);
          }
          else {
            [g2 drawStraightLineWithDouble:pix withDouble:0 withDouble:pix withDouble:[self getHeight]];
          }
        }
        pix = start + (i * tickStep);
      }
      tickStep = [self getYscale] * IOSDoubleArray_Get(self->gridDistances_, 1);
      start = fmod([self getyZero], tickStep);
      pix = start;
      rw = [self getYmin] - (fmod([self getYmin], IOSDoubleArray_Get(self->axesNumberingDistances_, 1)));
      rwBase = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(rw);
      if (pix > ([self getHeight] - GeogebraCommonEuclidianEuclidianView_SCREEN_BORDER_)) {
        pix -= tickStep;
        if (![self getYaxisLog] || [self getYmin] < 0) rw += IOSDoubleArray_Get(self->axesNumberingDistances_, 1);
      }
      for (jint j = 0; pix <= [self getHeight]; j++) {
        if ([self getYaxisLog]) {
          jdouble r = rwBase + GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(IOSDoubleArray_Get(self->axesNumberingDistances_, 1) * j);
          if (JavaLangMath_roundWithDouble_(r) == r) rw = JavaLangMath_powWithDouble_withDouble_(10, r);
          else {
            rw = JavaLangMath_powWithDouble_withDouble_(10, J2ObjCFpToInt(r));
            jdouble decimal = r - J2ObjCFpToInt(r);
            rw = decimal * 10 * rw;
          }
          pix = 2 * [self getYZero] - GeogebraCommonEuclidianEuclidianView_toScreenCoordYdWithDouble_(self, rw);
        }
        if (!IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) || JavaLangMath_absWithDouble_(pix - yCrossPix) > 2.0) {
          if ([((JavaUtilArrayList *) nil_chk(self->axesLabelsPositionsY_)) containsWithId:[new_JavaLangInteger_initWithInt_(J2ObjCFpToInt((pix + GeogebraCommonKernelKernel_MIN_PRECISION))) autorelease]]) {
            GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(self, g2, 0, pix, [self getWidth], pix, xCrossPix);
          }
          else {
            [g2 drawStraightLineWithDouble:0 withDouble:pix withDouble:[self getWidth] withDouble:pix];
          }
        }
        pix = start + (j * tickStep);
      }
      break;
      case GeogebraCommonEuclidianEuclidianView_GRID_ISOMETRIC:
      tickStepX = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0) * JavaLangMath_sqrtWithDouble_(3.0);
      startX = fmod([self getxZero], (tickStepX));
      startX2 = fmod([self getxZero], (tickStepX / 2));
      tickStepY = [self getYscale] * IOSDoubleArray_Get(self->gridDistances_, 0);
      startY = fmod([self getyZero], tickStepY);
      pix = startX2;
      for (jint j = 0; pix <= [self getWidth]; j++) {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:0 withDouble:pix withDouble:[self getHeight]];
        [g2 drawWithGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX2 + ((j * tickStepX) / 2.0);
      }
      extra = J2ObjCFpToInt((((([self getHeight] * [self getXscale]) / [self getYscale]) * JavaLangMath_sqrtWithDouble_(3.0)) / tickStepX)) + 3;
      pix = startX + (-(extra + 1) * tickStepX);
      for (jint j = -extra; pix <= [self getWidth]; j += 1) {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:startY - tickStepY withDouble:pix + ((([self getHeight] + tickStepY) * JavaLangMath_sqrtWithDouble_(3) * [self getXscale]) / [self getYscale]) withDouble:(startY - tickStepY) + [self getHeight] + tickStepY];
        [g2 drawWithGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX + (j * tickStepX);
      }
      pix = startX;
      for (jint j = 0; pix <= ([self getWidth] + (((([self getHeight] * [self getXscale]) / [self getYscale]) + tickStepY) * JavaLangMath_sqrtWithDouble_(3.0))); j += 1) {
        [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:pix withDouble:startY - tickStepY withDouble:pix - ((([self getHeight] + tickStepY) * JavaLangMath_sqrtWithDouble_(3) * [self getXscale]) / [self getYscale]) withDouble:(startY - tickStepY) + [self getHeight] + tickStepY];
        [g2 drawWithGeogebraCommonAwtGShape:self->tempLine_];
        pix = startX + (j * tickStepX);
      }
      break;
      case GeogebraCommonEuclidianEuclidianView_GRID_POLAR:
      if (([self getxZero] > 0) && ([self getxZero] < [self getWidth]) && ([self getyZero] > 0) && ([self getyZero] < [self getHeight])) {
        min = 0;
      }
      else {
        jdouble minW = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([self getxZero]), JavaLangMath_absWithDouble_([self getxZero] - [self getWidth]));
        jdouble minH = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_absWithDouble_([self getyZero]), JavaLangMath_absWithDouble_([self getyZero] - [self getHeight]));
        min = JavaLangMath_minWithDouble_withDouble_(minW, minH);
      }
      d1 = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero], [self getyZero]);
      d2 = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero], [self getyZero] - [self getHeight]);
      d3 = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero] - [self getWidth], [self getyZero]);
      d4 = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([self getxZero] - [self getWidth], [self getyZero] - [self getHeight]);
      max = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(d1, d2), JavaLangMath_maxWithDouble_withDouble_(d3, d4));
      tickStepR = [self getXscale] * IOSDoubleArray_Get(nil_chk(self->gridDistances_), 0);
      r = min - (fmod(min, tickStepR));
      while (r <= max) {
        [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circle_)) setFrameWithDouble:[self getxZero] - r withDouble:[self getyZero] - r withDouble:2 * r withDouble:2 * r];
        [g2 drawWithGeogebraCommonAwtGShape:self->circle_];
        r = r + tickStepR;
      }
      angleStep = IOSDoubleArray_Get(self->gridDistances_, 2);
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->tempLine_)) setLineWithDouble:0 withDouble:[self getyZero] withDouble:[self getWidth] withDouble:[self getyZero]];
      [g2 drawWithGeogebraCommonAwtGShape:self->tempLine_];
      for (jdouble a = angleStep; a < JavaLangMath_PI; a = a + angleStep) {
        if (JavaLangMath_absWithDouble_(a - (JavaLangMath_PI / 2)) < 0.0001) {
          [self->tempLine_ setLineWithDouble:[self getxZero] withDouble:0 withDouble:[self getxZero] withDouble:[self getHeight]];
        }
        else {
          m = JavaLangMath_tanWithDouble_(a);
          y1 = (m * ([self getxZero])) + [self getyZero];
          y2 = (m * ([self getxZero] - [self getWidth])) + [self getyZero];
          [self->tempLine_ setLineWithDouble:0 withDouble:y1 withDouble:[self getWidth] withDouble:y2];
        }
        [g2 drawWithGeogebraCommonAwtGShape:self->tempLine_];
      }
      break;
    }
  }
  [g2 setClipWithGeogebraCommonAwtGShape:oldClip];
}

jdouble GeogebraCommonEuclidianEuclidianView_getXAxisCrossingPixel(GeogebraCommonEuclidianEuclidianView *self) {
  return [self getxZero] + (IOSDoubleArray_Get(nil_chk(self->axisCross_), 1) * [self getXscale]);
}

jdouble GeogebraCommonEuclidianEuclidianView_getYAxisCrossingPixel(GeogebraCommonEuclidianEuclidianView *self) {
  return [self getyZero] - (IOSDoubleArray_Get(nil_chk(self->axisCross_), 0) * [self getYscale]);
}

jboolean GeogebraCommonEuclidianEuclidianView_xAxisOnscreen(GeogebraCommonEuclidianEuclidianView *self) {
  return IOSBooleanArray_Get(nil_chk(self->showAxes_), 0) && ([self getYmin] < IOSDoubleArray_Get(nil_chk(self->axisCross_), 0)) && ([self getYmax] > IOSDoubleArray_Get(self->axisCross_, 0));
}

jboolean GeogebraCommonEuclidianEuclidianView_yAxisOnscreen(GeogebraCommonEuclidianEuclidianView *self) {
  return IOSBooleanArray_Get(nil_chk(self->showAxes_), 1) && ([self getXmin] < IOSDoubleArray_Get(nil_chk(self->axisCross_), 1)) && ([self getXmax] > IOSDoubleArray_Get(self->axisCross_, 1));
}

void GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsHWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble xCrossPix) {
  if (xCrossPix > x1 && xCrossPix < x2) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:xCrossPix - self->yLabelMaxWidth_ - 10 withDouble:y2];
    [g2 drawStraightLineWithDouble:xCrossPix withDouble:y1 withDouble:x2 withDouble:y2];
  }
  else {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
  }
}

void GeogebraCommonEuclidianEuclidianView_drawLineAvoidingLabelsVWithGeogebraCommonAwtGGraphics2D_withDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, jdouble x1, jdouble y1, jdouble x2, jdouble y2, jdouble yCrossPix) {
  if (yCrossPix > y1 && yCrossPix < y2) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:yCrossPix];
    [g2 drawStraightLineWithDouble:x1 withDouble:yCrossPix + self->xLabelHeights_ + 5 withDouble:x2 withDouble:y2];
  }
  else {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawStraightLineWithDouble:x1 withDouble:y1 withDouble:x2 withDouble:y2];
  }
}

void GeogebraCommonEuclidianEuclidianView_drawStringWithGeogebraCommonAwtGGraphics2D_withNSString_withDouble_withDouble_(GeogebraCommonEuclidianEuclidianView *self, id<GeogebraCommonAwtGGraphics2D> g2, NSString *text, jdouble x, jdouble y) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:self->axesColor_];
  [g2 drawStringWithNSString:text withInt:J2ObjCFpToInt((x)) withInt:J2ObjCFpToInt(y)];
}

void GeogebraCommonEuclidianEuclidianView_restoreOldCoordSystem(GeogebraCommonEuclidianEuclidianView *self) {
  [self setWidthWithInt:self->widthTemp_];
  [self setHeightWithInt:self->heightTemp_];
  GeogebraCommonEuclidianEuclidianView_setRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_(self, self->xminTemp_, self->xmaxTemp_, self->yminTemp_, self->ymaxTemp_);
}

void GeogebraCommonEuclidianEuclidianView_setAnimatedRealWorldCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_withBoolean_(GeogebraCommonEuclidianEuclidianView *self, jdouble xmin, jdouble xmax, jdouble ymin, jdouble ymax, jint steps, jboolean storeUndo) {
  if (self->zoomerRW_ == nil) {
    GeogebraCommonEuclidianEuclidianView_set_zoomerRW_(self, [self newZoomer]);
  }
  [((GeogebraCommonEuclidianMyZoomer *) nil_chk(self->zoomerRW_)) initRWWithDouble:xmin withDouble:xmax withDouble:ymin withDouble:ymax withInt:steps withBoolean:storeUndo];
  [self->zoomerRW_ startAnimation];
}

jboolean GeogebraCommonEuclidianEuclidianView_isPenModeWithInt_(jint mode) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  return mode == GeogebraCommonEuclidianEuclidianConstants_MODE_PEN || mode == GeogebraCommonEuclidianEuclidianConstants_MODE_FREEHAND_SHAPE;
}

jint GeogebraCommonEuclidianEuclidianView_getBoldAxesWithBoolean_withInt_(jboolean bold, jint axesLineStyle) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  if (bold) {
    return axesLineStyle | GeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD;
  }
  return axesLineStyle & (~GeogebraCommonPluginEuclidianStyleConstants_AXES_BOLD);
}

jdouble GeogebraCommonEuclidianEuclidianView_estimateNumberHeightWithGeogebraCommonAwtGFont_(GeogebraCommonAwtGFont *fontAxes2) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  return GeogebraCommonUtilStringUtil_estimateHeightWithNSString_withGeogebraCommonAwtGFont_(@"", fontAxes2);
}

jdouble GeogebraCommonEuclidianEuclidianView_estimateNumberWidthWithDouble_withGeogebraCommonAwtGFont_(GeogebraCommonEuclidianEuclidianView *self, jdouble d, GeogebraCommonAwtGFont *fontAxes2) {
  NSString *s = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatPiEWithDouble:d withGeogebraCommonUtilNumberFormatAdapter:IOSObjectArray_Get(nil_chk(self->axesNumberFormat_), 0) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  return GeogebraCommonUtilStringUtil_estimateLengthWithNSString_withGeogebraCommonAwtGFont_(s, fontAxes2);
}

jdouble GeogebraCommonEuclidianEuclidianView_estimateTextWidthWithNSString_withGeogebraCommonAwtGFont_(NSString *s, GeogebraCommonAwtGFont *fontAxes2) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  return GeogebraCommonUtilStringUtil_estimateLengthWithNSString_withGeogebraCommonAwtGFont_(s, fontAxes2);
}

id<GeogebraCommonEuclidianEuclidianStyleBar> GeogebraCommonEuclidianEuclidianView_getStyleBar(GeogebraCommonEuclidianEuclidianView *self) {
  if (self->styleBar_ == nil) {
    GeogebraCommonEuclidianEuclidianView_set_styleBar_(self, [self newEuclidianStyleBar]);
  }
  return self->styleBar_;
}

NSString *GeogebraCommonEuclidianEuclidianView_getDraggedLabelsWithJavaUtilArrayList_(JavaUtilArrayList *list) {
  GeogebraCommonEuclidianEuclidianView_initialize();
  if ([((JavaUtilArrayList *) nil_chk(list)) size] == 0) {
    return nil;
  }
  NSString *text = nil;
  if ([list size] == 1) {
    text = JreStrcat("$$$", @"FormulaText[", [list getWithInt:0], @", true, true]");
  }
  else {
    text = @"TableText[";
    for (jint i = 0; i < [list size]; i++) {
      text = JreStrcat("$$", text, JreStrcat("$$$", @"{FormulaText[", [list getWithInt:i], @", true, true]}"));
      if (i < [list size] - 1) {
        text = JreStrcat("$C", text, ',');
      }
    }
    text = JreStrcat("$C", text, ']');
  }
  return text;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianEuclidianView)
