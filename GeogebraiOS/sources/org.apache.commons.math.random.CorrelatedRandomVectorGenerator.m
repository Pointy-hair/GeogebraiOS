//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/random/CorrelatedRandomVectorGenerator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/DimensionMismatchException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/NotPositiveDefiniteMatrixException.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/random/CorrelatedRandomVectorGenerator.h"
#include "org/apache/commons/math/random/NormalizedRandomGenerator.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator () {
 @public
  IOSDoubleArray *mean_;
  id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator_;
  IOSDoubleArray *normalized_;
  id<OrgApacheCommonsMathLinearRealMatrix> root_;
  jint rank_;
}

- (void)decomposeWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)covariance
                                               withDouble:(jdouble)small;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator, mean_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator, generator_, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator, normalized_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator, root_, id<OrgApacheCommonsMathLinearRealMatrix>)

__attribute__((unused)) static void OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_decomposeWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self, id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small);

@implementation OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)mean
withOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)covariance
                         withDouble:(jdouble)small
withOrgApacheCommonsMathRandomNormalizedRandomGenerator:(id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)generator {
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithDoubleArray_withOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, mean, covariance, small, generator);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)covariance
                                                  withDouble:(jdouble)small
     withOrgApacheCommonsMathRandomNormalizedRandomGenerator:(id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)generator {
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, covariance, small, generator);
  return self;
}

- (id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>)getGenerator {
  return generator_;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getRootMatrix {
  return root_;
}

- (jint)getRank {
  return rank_;
}

- (void)decomposeWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)covariance
                                               withDouble:(jdouble)small {
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_decomposeWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, covariance, small);
}

- (IOSDoubleArray *)nextVector {
  for (jint i = 0; i < rank_; ++i) {
    *IOSDoubleArray_GetRef(nil_chk(normalized_), i) = [((id<OrgApacheCommonsMathRandomNormalizedRandomGenerator>) nil_chk(generator_)) nextNormalizedDouble];
  }
  IOSDoubleArray *correlated = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(mean_))->size_];
  for (jint i = 0; i < correlated->size_; ++i) {
    *IOSDoubleArray_GetRef(correlated, i) = IOSDoubleArray_Get(mean_, i);
    for (jint j = 0; j < rank_; ++j) {
      *IOSDoubleArray_GetRef(correlated, i) += [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(root_)) getEntryWithInt:i withInt:j] * IOSDoubleArray_Get(nil_chk(normalized_), j);
    }
  }
  return correlated;
}

- (void)dealloc {
  RELEASE_(mean_);
  RELEASE_(generator_);
  RELEASE_(normalized_);
  RELEASE_(root_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDoubleArray:withOrgApacheCommonsMathLinearRealMatrix:withDouble:withOrgApacheCommonsMathRandomNormalizedRandomGenerator:", "CorrelatedRandomVectorGenerator", NULL, 0x1, "Lorg.apache.commons.math.linear.NotPositiveDefiniteMatrixException;Lorg.apache.commons.math.DimensionMismatchException;", NULL },
    { "initWithOrgApacheCommonsMathLinearRealMatrix:withDouble:withOrgApacheCommonsMathRandomNormalizedRandomGenerator:", "CorrelatedRandomVectorGenerator", NULL, 0x1, "Lorg.apache.commons.math.linear.NotPositiveDefiniteMatrixException;", NULL },
    { "getGenerator", NULL, "Lorg.apache.commons.math.random.NormalizedRandomGenerator;", 0x1, NULL, NULL },
    { "getRootMatrix", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "getRank", NULL, "I", 0x1, NULL, NULL },
    { "decomposeWithOrgApacheCommonsMathLinearRealMatrix:withDouble:", "decompose", "V", 0x2, "Lorg.apache.commons.math.linear.NotPositiveDefiniteMatrixException;", NULL },
    { "nextVector", NULL, "[D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mean_", NULL, 0x12, "[D", NULL, NULL,  },
    { "generator_", NULL, 0x12, "Lorg.apache.commons.math.random.NormalizedRandomGenerator;", NULL, NULL,  },
    { "normalized_", NULL, 0x12, "[D", NULL, NULL,  },
    { "root_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "rank_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator = { 2, "CorrelatedRandomVectorGenerator", "org.apache.commons.math.random", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator;
}

@end

void OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithDoubleArray_withOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self, IOSDoubleArray *mean, id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  NSObject_init(self);
  jint order = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(covariance)) getRowDimension];
  if (((IOSDoubleArray *) nil_chk(mean))->size_ != order) {
    @throw [new_OrgApacheCommonsMathDimensionMismatchException_initWithInt_withInt_(mean->size_, order) autorelease];
  }
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_set_mean_(self, [mean clone]);
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_decomposeWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, covariance, small);
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_set_generator_(self, generator);
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_setAndConsume_normalized_(self, [IOSDoubleArray newArrayWithLength:self->rank_]);
}

OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *new_OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithDoubleArray_withOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(IOSDoubleArray *mean, id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self = [OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator alloc];
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithDoubleArray_withOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, mean, covariance, small, generator);
  return self;
}

void OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self, id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  NSObject_init(self);
  jint order = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(covariance)) getRowDimension];
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_setAndConsume_mean_(self, [IOSDoubleArray newArrayWithLength:order]);
  for (jint i = 0; i < order; ++i) {
    *IOSDoubleArray_GetRef(self->mean_, i) = 0;
  }
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_decomposeWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(self, covariance, small);
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_set_generator_(self, generator);
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_setAndConsume_normalized_(self, [IOSDoubleArray newArrayWithLength:self->rank_]);
}

OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *new_OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small, id<OrgApacheCommonsMathRandomNormalizedRandomGenerator> generator) {
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self = [OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator alloc];
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_initWithOrgApacheCommonsMathLinearRealMatrix_withDouble_withOrgApacheCommonsMathRandomNormalizedRandomGenerator_(self, covariance, small, generator);
  return self;
}

void OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_decomposeWithOrgApacheCommonsMathLinearRealMatrix_withDouble_(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator *self, id<OrgApacheCommonsMathLinearRealMatrix> covariance, jdouble small) {
  jint order = [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(covariance)) getRowDimension];
  IOSObjectArray *c = [covariance getData];
  IOSObjectArray *b = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ order, order }];
  IOSIntArray *swap = [IOSIntArray arrayWithLength:order];
  IOSIntArray *index = [IOSIntArray arrayWithLength:order];
  for (jint i = 0; i < order; ++i) {
    *IOSIntArray_GetRef(index, i) = i;
  }
  self->rank_ = 0;
  for (jboolean loop = YES; loop; ) {
    *IOSIntArray_GetRef(swap, self->rank_) = self->rank_;
    for (jint i = self->rank_ + 1; i < order; ++i) {
      jint ii = IOSIntArray_Get(index, i);
      jint isi = IOSIntArray_Get(index, IOSIntArray_Get(swap, i));
      if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(c), ii)), ii) > IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, isi)), isi)) {
        *IOSIntArray_GetRef(swap, self->rank_) = i;
      }
    }
    if (IOSIntArray_Get(swap, self->rank_) != self->rank_) {
      jint tmp = IOSIntArray_Get(index, self->rank_);
      *IOSIntArray_GetRef(index, self->rank_) = IOSIntArray_Get(index, IOSIntArray_Get(swap, self->rank_));
      *IOSIntArray_GetRef(index, IOSIntArray_Get(swap, self->rank_)) = tmp;
    }
    jint ir = IOSIntArray_Get(index, self->rank_);
    if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(c), ir)), ir) < small) {
      if (self->rank_ == 0) {
        @throw [new_OrgApacheCommonsMathLinearNotPositiveDefiniteMatrixException_init() autorelease];
      }
      for (jint i = self->rank_; i < order; ++i) {
        if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, IOSIntArray_Get(index, i))), IOSIntArray_Get(index, i)) < -small) {
          @throw [new_OrgApacheCommonsMathLinearNotPositiveDefiniteMatrixException_init() autorelease];
        }
      }
      ++self->rank_;
      loop = NO;
    }
    else {
      jdouble sqrt = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, ir)), ir));
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(b, self->rank_)), self->rank_) = sqrt;
      jdouble inverse = 1 / sqrt;
      for (jint i = self->rank_ + 1; i < order; ++i) {
        jint ii = IOSIntArray_Get(index, i);
        jdouble e = inverse * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, ii)), ir);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(b, i)), self->rank_) = e;
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(c, ii)), ii) -= e * e;
        for (jint j = self->rank_ + 1; j < i; ++j) {
          jint ij = IOSIntArray_Get(index, j);
          jdouble f = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(c, ii)), ij) - e * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, j)), self->rank_);
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(c, ii)), ij) = f;
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(c, ij)), ii) = f;
        }
      }
      loop = (++self->rank_ < order);
    }
  }
  OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator_set_root_(self, OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(order, self->rank_));
  for (jint i = 0; i < order; ++i) {
    for (jint j = 0; j < self->rank_; ++j) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(self->root_)) setEntryWithInt:IOSIntArray_Get(index, i) withInt:j withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, i)), j)];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathRandomCorrelatedRandomVectorGenerator)
