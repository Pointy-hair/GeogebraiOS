//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoConePointLineAngle.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConePointLineAngle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerCone.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricPointNumber.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

__attribute__((unused)) static NSString *GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_getPlainName(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)axis
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, origin, axis, angle);
  return self;
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  id<GeogebraCommonKernelKernelNDGeoLineND> axis = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getSecondInput], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(axis)) getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([axis getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension]];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_getPlainName(self) withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getOrigin])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getNumber])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (NSString *)getPlainName {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_getPlainName(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ConeInfinite();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoConePointLineAngle", NULL, 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getPlainName", NULL, "Ljava.lang.String;", 0x14, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle = { 2, "AlgoConePointLineAngle", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> origin, id<GeogebraCommonKernelKernelNDGeoLineND> axis, id<GeogebraCommonKernelArithmeticNumberValue> angle) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricPointNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputer_(self, c, label, origin, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(axis, [GeogebraCommonKernelGeosGeoElement class]), angle, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCone_init() autorelease]);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> origin, id<GeogebraCommonKernelKernelNDGeoLineND> axis, id<GeogebraCommonKernelArithmeticNumberValue> angle) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, origin, axis, angle);
  return self;
}

NSString *GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle_getPlainName(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle *self) {
  return @"ConeWithCenterAAxisParallelToBAngleC";
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConePointLineAngle)
