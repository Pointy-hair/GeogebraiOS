//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/DuplicateSampleAbscissaException.h"
#include "org/apache/commons/math/analysis/interpolation/DividedDifferenceInterpolator.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunctionLagrangeForm.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunctionNewtonForm.h"

#define OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_serialVersionUID 107049519551235069LL

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator, serialVersionUID, jlong)

@implementation OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator

- (OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionNewtonForm *)interpolateWithDoubleArray:(IOSDoubleArray *)x
                                                                                    withDoubleArray:(IOSDoubleArray *)y {
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionLagrangeForm_verifyInterpolationArrayWithDoubleArray_withDoubleArray_(x, y);
  IOSDoubleArray *c = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(x))->size_ - 1];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(x, 0, c, 0, c->size_);
  IOSDoubleArray *a = OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_computeDividedDifferenceWithDoubleArray_withDoubleArray_(x, y);
  return [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionNewtonForm_initWithDoubleArray_withDoubleArray_(a, c) autorelease];
}

+ (IOSDoubleArray *)computeDividedDifferenceWithDoubleArray:(IOSDoubleArray *)x
                                            withDoubleArray:(IOSDoubleArray *)y {
  return OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_computeDividedDifferenceWithDoubleArray_withDoubleArray_(x, y);
}

- (instancetype)init {
  OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "interpolateWithDoubleArray:withDoubleArray:", "interpolate", "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonForm;", 0x1, "Lorg.apache.commons.math.DuplicateSampleAbscissaException;", NULL },
    { "computeDividedDifferenceWithDoubleArray:withDoubleArray:", "computeDividedDifference", "[D", 0xc, "Lorg.apache.commons.math.DuplicateSampleAbscissaException;", NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_serialVersionUID },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator = { 2, "DividedDifferenceInterpolator", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator;
}

@end

IOSDoubleArray *OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_computeDividedDifferenceWithDoubleArray_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y) {
  OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_initialize();
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunctionLagrangeForm_verifyInterpolationArrayWithDoubleArray_withDoubleArray_(x, y);
  IOSDoubleArray *divdiff = [((IOSDoubleArray *) nil_chk(y)) clone];
  jint n = ((IOSDoubleArray *) nil_chk(x))->size_;
  IOSDoubleArray *a = [IOSDoubleArray arrayWithLength:n];
  *IOSDoubleArray_GetRef(a, 0) = IOSDoubleArray_Get(nil_chk(divdiff), 0);
  for (jint i = 1; i < n; i++) {
    for (jint j = 0; j < n - i; j++) {
      jdouble denominator = IOSDoubleArray_Get(x, j + i) - IOSDoubleArray_Get(x, j);
      if (denominator == 0.0) {
        @throw [new_OrgApacheCommonsMathDuplicateSampleAbscissaException_initWithDouble_withInt_withInt_(IOSDoubleArray_Get(x, j), j, j + i) autorelease];
      }
      *IOSDoubleArray_GetRef(divdiff, j) = (IOSDoubleArray_Get(divdiff, j + 1) - IOSDoubleArray_Get(divdiff, j)) / denominator;
    }
    *IOSDoubleArray_GetRef(a, i) = IOSDoubleArray_Get(divdiff, 0);
  }
  return a;
}

void OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_init(OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator *self) {
  NSObject_init(self);
}

OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_init() {
  OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationDividedDifferenceInterpolator)
