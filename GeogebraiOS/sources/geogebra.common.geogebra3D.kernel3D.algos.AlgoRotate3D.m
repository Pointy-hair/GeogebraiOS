//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoRotate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/kernelND/RotateableND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)angle {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, inArg, angle);
  return self;
}

- (void)setOutput {
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_inGeo_(self, g);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]])) GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_out_(self, (id<GeogebraCommonKernelKernelNDRotateableND>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelKernelNDRotateableND)));
}

- (GeogebraCommonKernelGeosGeoElement *)getResultTemplateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] || [geo isKindOfClass:[GeogebraCommonKernelGeosGeoCurveCartesian class]]) return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [super getResultTemplateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonKernelGeosGeoElement *)copy__WithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) copy3DWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) copyInternal3DWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)dealloc {
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(out_);
  RELEASE_(angle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRotate3D", NULL, 0x1, NULL, NULL },
    { "setOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copy__WithGeogebraCommonKernelGeosGeoElement:", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "out_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.RotateableND;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D = { 2, "AlgoRotate3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelArithmeticNumberValue> angle) {
  GeogebraCommonKernelAlgosAlgoTransformation_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_inGeo_(self, inArg);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_angle_(self, angle);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_outGeo_(self, [self getResultTemplateWithGeogebraCommonKernelGeosGeoElement:self->inGeo_]);
  if ([GeogebraCommonKernelKernelNDRotateableND_class_() isInstance:self->outGeo_]) GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D_set_out_(self, (id<GeogebraCommonKernelKernelNDRotateableND>) check_protocol_cast(self->outGeo_, @protocol(GeogebraCommonKernelKernelNDRotateableND)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoRotate3D)
