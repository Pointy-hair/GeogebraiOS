//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorLines3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngularBisectorLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> g_, h_;
  IOSObjectArray *bisector_;
  IOSObjectArray *wv_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *B_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D, g_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D, h_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D, bisector_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D, wv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D, B_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, labels, g, h);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_AngularBisector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, g, h);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(h_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:bisector_];
  [self setDependencies];
}

- (IOSObjectArray *)getLines {
  return bisector_;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)getg {
  return g_;
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)geth {
  return h_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getB {
  return B_;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBisectorOfAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(bisector_);
  RELEASE_(wv_);
  RELEASE_(B_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoAngularBisectorLines3D", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoAngularBisectorLines3D", NULL, 0x0, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getLines", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "geth", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "bisector_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", NULL, NULL,  },
    { "wv_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D = { 2, "AlgoAngularBisectorLines3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, g, h);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, self->bisector_);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, labels, g, h);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_set_g_(self, g);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_set_h_(self, h);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_setAndConsume_bisector_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_class_()]);
  IOSObjectArray_SetAndConsume(self->bisector_, 0, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons));
  IOSObjectArray_SetAndConsume(self->bisector_, 1, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_setAndConsume_wv_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoVector_class_()]);
  IOSObjectArray_SetAndConsume(self->wv_, 0, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0))) setCoordsWithDouble:0 withDouble:0 withDouble:0];
  IOSObjectArray_SetAndConsume(self->wv_, 1, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1))) setCoordsWithDouble:0 withDouble:0 withDouble:0];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_setAndConsume_B_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(self->bisector_, 0))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:self->B_];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:self->B_];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_compute(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, g, h);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D *self) {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self getg])) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *v1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self getg])) getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *o2 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self geth])) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *v2 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self geth])) getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) crossProduct4WithGeogebraCommonKernelMatrixCoords:v2])) normalized];
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0))) setCoordWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(o1)) addWithGeogebraCommonKernelMatrixCoords:o2])) mulWithDouble:0.5] withGeogebraCommonKernelMatrixCoords:v1];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) setUndefined];
  }
  else {
    IOSObjectArray *points = GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(o1, v1, o2, v2);
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(points), 0))) equalsForKernelWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points, 1)]) {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0))) setUndefined];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) setUndefined];
    }
    else {
      v1 = [v1 copyVector];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) normalize];
      v2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v2)) copyVector];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(v2)) normalize];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0))) setCoordWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelMatrixCoords:[v1 addWithGeogebraCommonKernelMatrixCoords:v2]];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) setCoordWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points, 0) withGeogebraCommonKernelMatrixCoords:[v1 subWithGeogebraCommonKernelMatrixCoords:v2]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngularBisectorLines3D)
