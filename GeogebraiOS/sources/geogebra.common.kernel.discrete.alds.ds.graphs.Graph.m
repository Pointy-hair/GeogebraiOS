//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/alds/ds/graphs/Graph.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/discrete/alds/ds/graphs/Graph.h"
#include "geogebra/common/kernel/discrete/alds/ds/graphs/Vertex.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"

@interface GeogebraCommonKernelDiscreteAldsDsGraphsGraph () {
 @public
  IOSObjectArray *adjacencyList_;
  IOSObjectArray *adjacencyMatrix_;
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *type_;
}

- (IOSObjectArray *)cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertices;

- (jboolean)containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex;

- (IOSObjectArray *)deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs
                                                          withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)b;

- (IOSObjectArray *)addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs
                                                     withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex;

- (IOSObjectArray *)increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs;

- (IOSObjectArray *)increaseVertices;

- (void)buildAdjacencyMatrix;

- (jint)getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAldsDsGraphsGraph, adjacencyList_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAldsDsGraphsGraph, adjacencyMatrix_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteAldsDsGraphsGraph, type_, GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *)

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertices);

__attribute__((unused)) static jboolean GeogebraCommonKernelDiscreteAldsDsGraphsGraph_containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *b);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseVertices(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self);

__attribute__((unused)) static void GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self);

__attribute__((unused)) static jint GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex);

__attribute__((unused)) static void GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelDiscreteAldsDsGraphsGraph

- (instancetype)initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum:(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *)type {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(self, type);
  return self;
}

- (GeogebraCommonKernelDiscreteAldsDsGraphsGraph *)cloneGraph {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph *graph = [new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(self->type_) autorelease];
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_setAndConsume_adjacencyList_(graph, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->adjacencyList_))->size_ type:IOSClass_arrayType(GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_(), 1)]);
  for (jint i = 0; i < self->adjacencyList_->size_; i++) {
    IOSObjectArray_Set(graph->adjacencyList_, i, GeogebraCommonKernelDiscreteAldsDsGraphsGraph_cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(self, IOSObjectArray_Get(self->adjacencyList_, i)));
  }
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(graph);
  return graph;
}

- (IOSObjectArray *)cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertices {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(self, vertices);
}

- (GeogebraCommonKernelDiscreteAldsDsGraphsGraph *)addVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  if (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex)) {
    return self;
  }
  jint preLength = ((IOSObjectArray *) nil_chk(adjacencyList_))->size_;
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseVertices(self);
  IOSObjectArray_SetAndConsume(adjacencyList_, preLength, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()]);
  IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(adjacencyList_, preLength)), 0, vertex);
  return self;
}

- (jboolean)containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex);
}

- (GeogebraCommonKernelDiscreteAldsDsGraphsGraph *)addEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)a
                                                          withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)b {
  if ([((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(a)) isEqual:b] && GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED() == self->type_) {
    return self;
  }
  if (([self containsEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:a withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:b] || [self containsEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:a withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:b]) && GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED() == self->type_) {
    return self;
  }
  [self addVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:a];
  [self addVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:b];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(adjacencyList_))->size_; i++) {
    IOSObjectArray *vertexs = IOSObjectArray_Get(adjacencyList_, i);
    if ([((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(nil_chk(vertexs), 0))) isEqual:a]) {
      vertexs = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, b);
      IOSObjectArray_Set(adjacencyList_, i, vertexs);
    }
    else if ([((GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *) nil_chk(type_)) isEqual:GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED()] && [((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(vertexs, 0))) isEqual:b]) {
      vertexs = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, a);
      IOSObjectArray_Set(adjacencyList_, i, vertexs);
    }
  }
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(self);
  return self;
}

- (void)deleteEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)a
                  withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)b {
  if ([self containsEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:a withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:b]) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(adjacencyList_))->size_; i++) {
      IOSObjectArray *vertexs = IOSObjectArray_Get(adjacencyList_, i);
      if ([((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(nil_chk(vertexs), 0))) isEqual:a]) {
        vertexs = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, b);
        IOSObjectArray_Set(adjacencyList_, i, vertexs);
      }
      else if ([((GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *) nil_chk(type_)) isEqual:GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED()] && [((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(vertexs, 0))) isEqual:b]) {
        vertexs = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, a);
        IOSObjectArray_Set(adjacencyList_, i, vertexs);
      }
    }
  }
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(self);
}

- (IOSObjectArray *)deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs
                                                          withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)b {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, b);
}

- (jboolean)containsEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)a
                        withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)b {
  jint indexA = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, a);
  jint indexB = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, b);
  IOSObjectArray *m = [self getAdjacencyMatrix];
  if (m != nil && indexA >= 0 && indexB >= 0 && IOSIntArray_Get(nil_chk(IOSObjectArray_Get(m, indexA)), indexB) == 1) {
    return YES;
  }
  else {
    return NO;
  }
}

- (IOSObjectArray *)addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs
                                                     withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertexs, vertex);
}

- (IOSObjectArray *)increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:(IOSObjectArray *)vertexs {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(self, vertexs);
}

- (IOSObjectArray *)increaseVertices {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseVertices(self);
}

- (jint)numberOfVertices {
  return ((IOSObjectArray *) nil_chk(adjacencyList_))->size_;
}

- (jint)numberOfEdges {
  jint numberOfEdges = 0;
  for (jint i = 0; i < [self numberOfVertices]; i++) {
    numberOfEdges = numberOfEdges + ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(adjacencyList_), i)))->size_ - 1;
  }
  return numberOfEdges;
}

- (IOSObjectArray *)getAdjacencyList {
  return adjacencyList_;
}

- (void)buildAdjacencyMatrix {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(self);
}

- (IOSObjectArray *)getAdjacencyMatrix {
  return adjacencyMatrix_;
}

- (IOSObjectArray *)getAllAdjacentVerticesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  if (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex)) {
    jint index = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex);
    IOSObjectArray *vertexs = IOSObjectArray_Get(nil_chk(adjacencyList_), index);
    if (((IOSObjectArray *) nil_chk(vertexs))->size_ > 1) {
      IOSObjectArray *adjacent = [IOSObjectArray arrayWithLength:vertexs->size_ - 1 type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
      for (jint i = 1; i < vertexs->size_; i++) {
        IOSObjectArray_Set(adjacent, i - 1, IOSObjectArray_Get(vertexs, i));
      }
      return adjacent;
    }
  }
  return nil;
}

- (jint)getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex);
}

- (jint)getOutDegreeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  jint index = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex);
  if (index != -1) {
    return ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(adjacencyList_), index)))->size_ - 1;
  }
  return 0;
}

- (jint)getInDegreeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:(GeogebraCommonKernelDiscreteAldsDsGraphsVertex *)vertex {
  if (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_get_UNDIRECTED() == self->type_) {
    return [self getOutDegreeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:vertex];
  }
  else {
    jint indegree = 0;
    jint index = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex);
    if (index != -1) {
      {
        IOSObjectArray *a__ = adjacencyMatrix_;
        IOSIntArray * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        IOSIntArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSIntArray *col = *b__++;
          indegree = indegree + IOSIntArray_Get(nil_chk(col), index);
        }
      }
    }
    return indegree;
  }
}

- (NSString *)description {
  JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < [self numberOfVertices]; i++) {
    IOSObjectArray *vertexs = IOSObjectArray_Get(nil_chk(adjacencyList_), i);
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(vertexs))->size_; j++) {
      [builder appendWithId:IOSObjectArray_Get(vertexs, j)];
      [builder appendWithNSString:@"->"];
    }
    [builder appendWithNSString:@"/ \n"];
  }
  return [builder description];
}

- (NSString *)matrixToString {
  JavaLangStringBuilder *builder = [new_JavaLangStringBuilder_init() autorelease];
  IOSObjectArray *matrix = [self getAdjacencyMatrix];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(matrix))->size_; i++) {
    IOSIntArray *edges = IOSObjectArray_Get(matrix, i);
    for (jint j = 0; j < ((IOSIntArray *) nil_chk(edges))->size_; j++) {
      [builder appendWithInt:IOSIntArray_Get(edges, j)];
      [builder appendWithNSString:@" "];
    }
    [builder appendWithNSString:@"\n"];
  }
  return [builder description];
}

- (id<JavaUtilSet>)getVertices {
  id<JavaUtilSet> set = [new_JavaUtilHashSet_initWithInt_([self numberOfVertices]) autorelease];
  for (jint i = 0; i < [self numberOfVertices]; i++) {
    [set addWithId:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(adjacencyList_), i)), 0)];
  }
  return set;
}

- (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *)getType {
  return type_;
}

- (void)dealloc {
  RELEASE_(adjacencyList_);
  RELEASE_(adjacencyMatrix_);
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum:", "Graph", NULL, 0x1, NULL, NULL },
    { "cloneGraph", NULL, "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph;", 0x1, NULL, NULL },
    { "cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:", "cloneVertexList", "[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x2, NULL, NULL },
    { "addVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "addVertex", "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph;", 0x1, NULL, NULL },
    { "containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "containsVertex", "Z", 0x2, NULL, NULL },
    { "addEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "addEdge", "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph;", 0x1, NULL, NULL },
    { "deleteEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "deleteEdge", "V", 0x1, NULL, NULL },
    { "deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "deleteVertexFromAdjacentVerticies", "[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x2, NULL, NULL },
    { "containsEdgeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "containsEdge", "Z", 0x1, NULL, NULL },
    { "addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:withGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "addVertexToAdjacentVerticies", "[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x2, NULL, NULL },
    { "increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray:", "increaseSize", "[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x2, NULL, NULL },
    { "increaseVertices", NULL, "[[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x2, NULL, NULL },
    { "numberOfVertices", NULL, "I", 0x1, NULL, NULL },
    { "numberOfEdges", NULL, "I", 0x1, NULL, NULL },
    { "getAdjacencyList", NULL, "[[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x1, NULL, NULL },
    { "buildAdjacencyMatrix", NULL, "V", 0x2, NULL, NULL },
    { "getAdjacencyMatrix", NULL, "[[I", 0x1, NULL, NULL },
    { "getAllAdjacentVerticesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "getAllAdjacentVertices", "[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", 0x1, NULL, NULL },
    { "getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "getVertexIndex", "I", 0x2, NULL, NULL },
    { "getOutDegreeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "getOutDegree", "I", 0x1, NULL, NULL },
    { "getInDegreeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex:", "getInDegree", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "matrixToString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVertices", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "adjacencyList_", NULL, 0x2, "[[Lgeogebra.common.kernel.discrete.alds.ds.graphs.Vertex;", NULL, NULL,  },
    { "adjacencyMatrix_", NULL, 0x2, "[[I", NULL, NULL,  },
    { "type_", NULL, 0x12, "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAldsDsGraphsGraph = { 2, "Graph", "geogebra.common.kernel.discrete.alds.ds.graphs", NULL, 0x11, 25, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAldsDsGraphsGraph;
}

@end

void GeogebraCommonKernelDiscreteAldsDsGraphsGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *type) {
  NSObject_init(self);
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_setAndConsume_adjacencyList_(self, [IOSObjectArray newArrayWithLength:0 type:IOSClass_arrayType(GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_(), 1)]);
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_set_type_(self, type);
}

GeogebraCommonKernelDiscreteAldsDsGraphsGraph *new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *type) {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self = [GeogebraCommonKernelDiscreteAldsDsGraphsGraph alloc];
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_initWithGeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_(self, type);
  return self;
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_cloneVertexListWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertices) {
  IOSObjectArray *newVertices = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(vertices))->size_ type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
  for (jint i = 0; i < vertices->size_; i++) {
    IOSObjectArray_Set(newVertices, i, IOSObjectArray_Get(vertices, i));
  }
  return newVertices;
}

jboolean GeogebraCommonKernelDiscreteAldsDsGraphsGraph_containsVertexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex) {
  if (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, vertex) == -1) {
    return NO;
  }
  else {
    return YES;
  }
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_deleteVertexFromAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *b) {
  IOSObjectArray *vertexs2 = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(vertexs))->size_ - 1 type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
  jint j = 0;
  for (jint i = 0; i < vertexs->size_; i++) {
    if (![((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(vertexs, i))) isEqual:b]) {
      IOSObjectArray_Set(vertexs2, j++, IOSObjectArray_Get(vertexs, i));
    }
  }
  return vertexs2;
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_addVertexToAdjacentVerticiesWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_withGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex) {
  jint preLength = ((IOSObjectArray *) nil_chk(vertexs))->size_;
  vertexs = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(self, vertexs);
  IOSObjectArray_Set(nil_chk(vertexs), preLength, vertex);
  return vertexs;
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseSizeWithGeogebraCommonKernelDiscreteAldsDsGraphsVertexArray_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, IOSObjectArray *vertexs) {
  IOSObjectArray *newVertexs = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(vertexs))->size_ + 1 type:GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_()];
  for (jint i = 0; i < vertexs->size_; i++) {
    IOSObjectArray_Set(newVertexs, i, IOSObjectArray_Get(vertexs, i));
  }
  return newVertexs;
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_increaseVertices(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self) {
  IOSObjectArray *newAdjacencyList = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(self->adjacencyList_))->size_ + 1 type:IOSClass_arrayType(GeogebraCommonKernelDiscreteAldsDsGraphsVertex_class_(), 1)];
  for (jint i = 0; i < self->adjacencyList_->size_; i++) {
    IOSObjectArray_Set(newAdjacencyList, i, IOSObjectArray_Get(self->adjacencyList_, i));
  }
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_set_adjacencyList_(self, newAdjacencyList);
  return self->adjacencyList_;
}

void GeogebraCommonKernelDiscreteAldsDsGraphsGraph_buildAdjacencyMatrix(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self) {
  IOSObjectArray *matrix = [IOSObjectArray arrayWithLength:[self numberOfVertices] type:IOSClass_intArray(1)];
  for (jint i = 0; i < matrix->size_; i++) {
    IOSObjectArray_SetAndConsume(matrix, i, [IOSIntArray newArrayWithLength:[self numberOfVertices]]);
  }
  for (jint i = 0; i < [self numberOfVertices]; i++) {
    IOSObjectArray *edges = IOSObjectArray_Get(nil_chk(self->adjacencyList_), i);
    if (((IOSObjectArray *) nil_chk(edges))->size_ > 1) {
      jint indexOfRow = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, IOSObjectArray_Get(edges, 0));
      for (jint j = 1; j < edges->size_; j++) {
        jint indexOfColumn = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(self, IOSObjectArray_Get(edges, j));
        *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(matrix, indexOfRow)), indexOfColumn) = 1;
      }
    }
  }
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_set_adjacencyMatrix_(self, matrix);
}

jint GeogebraCommonKernelDiscreteAldsDsGraphsGraph_getVertexIndexWithGeogebraCommonKernelDiscreteAldsDsGraphsVertex_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph *self, GeogebraCommonKernelDiscreteAldsDsGraphsVertex *vertex) {
  for (jint i = 0; i < [self numberOfVertices]; i++) {
    if ([((GeogebraCommonKernelDiscreteAldsDsGraphsVertex *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->adjacencyList_), i)), 0))) isEqual:vertex]) {
      return i;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAldsDsGraphsGraph)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum)

GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_values_[2];

@implementation GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_values() {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_values_ count:2 type:GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_values();
}

+ (GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initialize();
  for (int i = 0; i < 2; i++) {
    GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *e = GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum class]) {
    GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_DIRECTED = new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(@"DIRECTED", 0);
    GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_UNDIRECTED = new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(@"UNDIRECTED", 1);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "DIRECTED", "DIRECTED", 0x4019, "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;", &GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_DIRECTED, NULL,  },
    { "UNDIRECTED", "UNDIRECTED", 0x4019, "Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;", &GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_UNDIRECTED, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.discrete.alds.ds.graphs.Graph$Type;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum = { 2, "Type", "geogebra.common.kernel.discrete.alds.ds.graphs", "Graph", 0x4019, 0, NULL, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/discrete/alds/ds/graphs/Graph$Type;>;" };
  return &_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum;
}

@end

void GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *new_GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum *self = [GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum alloc];
  GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAldsDsGraphsGraph_TypeEnum)
