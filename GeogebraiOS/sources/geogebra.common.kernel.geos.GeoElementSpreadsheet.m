//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoElementSpreadsheet.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"

static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoElementSpreadsheet, sb_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoElementSpreadsheet, sb_, JavaLangStringBuilder *)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoElementSpreadsheet)

ComGoogleGwtRegexpSharedRegExp *GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_;

@implementation GeogebraCommonKernelGeosGeoElementSpreadsheet

+ (NSString *)getSpreadsheetColumnNameWithInt:(jint)column {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(column);
}

+ (NSString *)getSpreadsheetColumnNameWithNSString:(NSString *)label {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithNSString_(label);
}

+ (NSString *)getSpreadsheetCellNameWithInt:(jint)column
                                    withInt:(jint)row {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row);
}

+ (GeogebraCommonAwtGPoint *)spreadsheetIndicesWithNSString:(NSString *)cellName {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(cellName);
}

+ (jboolean)hasSpreadsheetLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_hasSpreadsheetLabelWithGeogebraCommonKernelGeosGeoElement_(geo);
}

+ (jboolean)isSpreadsheetLabelWithNSString:(NSString *)str {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(str);
}

+ (jint)getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult:(ComGoogleGwtRegexpSharedMatchResult *)matcher {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher);
}

+ (jint)getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult:(ComGoogleGwtRegexpSharedMatchResult *)matcher {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher);
}

+ (GeogebraCommonAwtGPoint *)getSpreadsheetCoordsForLabelWithNSString:(NSString *)inputLabel {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(inputLabel);
}

- (void)setSpreadsheetCellWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                            withInt:(jint)row
                                            withInt:(jint)col
             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cellGeo {
  NSString *cellName = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(col, row);
  if (GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ == nil) JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_, nil, new_JavaLangStringBuilder_init());
  else [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_)) appendWithNSString:cellName];
  if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:cellGeo]) {
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:@"("];
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(cellGeo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:@")"];
  }
  NSString *label = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(cellGeo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if ([((NSString *) nil_chk(label)) indexOf:'='] == -1) [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithChar:'='];
  else [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithChar:':'];
  [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:label];
  if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:cellGeo] && [cellGeo isLabelSet]) {
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:@"("];
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(cellGeo, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    [GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ appendWithNSString:@")"];
  }
  [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) getAlgebraProcessor])) processAlgebraCommandWithNSString:[GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_ description] withBoolean:NO];
  GeogebraCommonKernelGeosGeoElement *cell = [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) lookupLabelWithNSString:cellName];
  if (cell != nil) {
    [(cell) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:cellGeo];
    [(cell) setAuxiliaryObjectWithBoolean:YES];
  }
}

+ (GeogebraCommonKernelGeosGeoElement *)autoCreateWithNSString:(NSString *)label
                          withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_autoCreateWithNSString_withGeogebraCommonKernelConstruction_(label, cons);
}

- (instancetype)init {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoElementSpreadsheet class]) {
    JreStrongAssign(&GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"^(\\$?)([A-Z]+)(\\$?)([1-9][0-9]*)$"));
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoElementSpreadsheet)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSpreadsheetColumnNameWithInt:", "getSpreadsheetColumnName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getSpreadsheetColumnNameWithNSString:", "getSpreadsheetColumnName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getSpreadsheetCellNameWithInt:withInt:", "getSpreadsheetCellName", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "spreadsheetIndicesWithNSString:", "spreadsheetIndices", "Lgeogebra.common.awt.GPoint;", 0x9, NULL, NULL },
    { "hasSpreadsheetLabelWithGeogebraCommonKernelGeosGeoElement:", "hasSpreadsheetLabel", "Z", 0x9, NULL, NULL },
    { "isSpreadsheetLabelWithNSString:", "isSpreadsheetLabel", "Z", 0x9, NULL, NULL },
    { "getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult:", "getSpreadsheetColumn", "I", 0x9, NULL, NULL },
    { "getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult:", "getSpreadsheetRow", "I", 0x9, NULL, NULL },
    { "getSpreadsheetCoordsForLabelWithNSString:", "getSpreadsheetCoordsForLabel", "Lgeogebra.common.awt.GPoint;", 0x9, NULL, NULL },
    { "setSpreadsheetCellWithGeogebraCommonMainApp:withInt:withInt:withGeogebraCommonKernelGeosGeoElement:", "setSpreadsheetCell", "V", 0x1, NULL, NULL },
    { "autoCreateWithNSString:withGeogebraCommonKernelConstruction:", "autoCreate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "spreadsheetPattern_", NULL, 0x19, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_, NULL,  },
    { "MATCH_COLUMN_$_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN_$ },
    { "MATCH_COLUMN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN },
    { "MATCH_ROW_$_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW_$ },
    { "MATCH_ROW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW },
    { "sb_", NULL, 0xa, "Ljava.lang.StringBuilder;", &GeogebraCommonKernelGeosGeoElementSpreadsheet_sb_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoElementSpreadsheet = { 2, "GeoElementSpreadsheet", "geogebra.common.kernel.geos", NULL, 0x1, 12, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoElementSpreadsheet;
}

@end

NSString *GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(jint column) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  jint i = column + 1;
  NSString *col = @"";
  while (i > 0) {
    col = JreStrcat("C$", (jchar) ('A' + (i - 1) % 26), col);
    i = (i - 1) / 26;
  }
  return col;
}

NSString *GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithNSString_(NSString *label) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_)) execWithNSString:label];
  if (matcher == nil) return nil;
  return [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN];
}

NSString *GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(jint column, jint row) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  if (column >= GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_() || row >= GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_() || column < 0 || row < 0) {
    return nil;
  }
  return JreStrcat("$I", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_(column), (row + 1));
}

GeogebraCommonAwtGPoint *GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(NSString *cellName) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_)) execWithNSString:cellName];
  return [new_GeogebraCommonAwtGPoint_initWithInt_withInt_(GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher), GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher)) autorelease];
}

jboolean GeogebraCommonKernelGeosGeoElementSpreadsheet_hasSpreadsheetLabelWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  return GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
}

jboolean GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(NSString *str) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  if (str == nil) return NO;
  ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_)) execWithNSString:str];
  if (matcher == nil) {
    return NO;
  }
  if (GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(matcher) == -1 || GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(matcher) == -1) {
    return NO;
  }
  return YES;
}

jint GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnWithComGoogleGwtRegexpSharedMatchResult_(ComGoogleGwtRegexpSharedMatchResult *matcher) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  if (matcher == nil) return -1;
  NSString *s = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN];
  jint column = 0;
  while (((jint) [((NSString *) nil_chk(s)) length]) > 0) {
    column *= 26;
    column += [s charAtWithInt:0] - 'A' + 1;
    s = [s substring:1];
  }
  if (column > GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_COLUMNS_DESKTOP_()) {
    return -1;
  }
  return column - 1;
}

jint GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetRowWithComGoogleGwtRegexpSharedMatchResult_(ComGoogleGwtRegexpSharedMatchResult *matcher) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  if (matcher == nil) return -1;
  jint ret = -1;
  @try {
    NSString *s = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW];
    ret = JavaLangInteger_parseIntWithNSString_(s) - 1;
  }
  @catch (JavaLangException *e) {
    return -1;
  }
  if (ret + 1 > GeogebraCommonKernelKernel_get_MAX_SPREADSHEET_ROWS_DESKTOP_()) {
    return -1;
  }
  return ret;
}

GeogebraCommonAwtGPoint *GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCoordsForLabelWithNSString_(NSString *inputLabel) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  GeogebraCommonAwtGPoint *p = GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetIndicesWithNSString_(inputLabel);
  if (((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ >= 0 && p->y_ >= 0) {
    return p;
  }
  return nil;
}

GeogebraCommonKernelGeosGeoElement *GeogebraCommonKernelGeosGeoElementSpreadsheet_autoCreateWithNSString_withGeogebraCommonKernelConstruction_(NSString *label, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelGeosGeoElementSpreadsheet_initialize();
  ComGoogleGwtRegexpSharedMatchResult *cellNameMatcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelGeosGeoElementSpreadsheet_spreadsheetPattern_)) execWithNSString:label];
  if (cellNameMatcher != nil) {
    NSString *col = [cellNameMatcher getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_COLUMN];
    jint row = JavaLangInteger_parseIntWithNSString_([cellNameMatcher getGroupWithInt:GeogebraCommonKernelGeosGeoElementSpreadsheet_MATCH_ROW]);
    GeogebraCommonKernelGeosGeoElement *neighbourCell = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) geoTableVarLookupWithNSString:JreStrcat("$I", col, (row - 1))];
    if (neighbourCell == nil) neighbourCell = [cons geoTableVarLookupWithNSString:JreStrcat("$I", col, (row + 1))];
    NSString *label1 = JreStrcat("$I", col, row);
    return [cons createSpreadsheetGeoElementWithGeogebraCommonKernelGeosGeoElement:neighbourCell withNSString:label1];
  }
  return nil;
}

void GeogebraCommonKernelGeosGeoElementSpreadsheet_init(GeogebraCommonKernelGeosGeoElementSpreadsheet *self) {
  NSObject_init(self);
}

GeogebraCommonKernelGeosGeoElementSpreadsheet *new_GeogebraCommonKernelGeosGeoElementSpreadsheet_init() {
  GeogebraCommonKernelGeosGeoElementSpreadsheet *self = [GeogebraCommonKernelGeosGeoElementSpreadsheet alloc];
  GeogebraCommonKernelGeosGeoElementSpreadsheet_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoElementSpreadsheet)
