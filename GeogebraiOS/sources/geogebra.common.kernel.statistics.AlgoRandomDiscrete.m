//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoRandomDiscrete.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoRandomDiscrete.h"
#include "geogebra/common/main/RandomUtil.h"

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoRandomDiscrete_compute(GeogebraCommonKernelStatisticsAlgoRandomDiscrete *self);

@implementation GeogebraCommonKernelStatisticsAlgoRandomDiscrete

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)discreteValue
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)probabilityList {
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, discreteValue, probabilityList);
  return self;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (id<GeogebraCommonKernelAlgosGetCommand>)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RandomDiscrete();
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_compute(self);
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((GeogebraCommonKernelGeosGeoList *) nil_chk(discreteValue_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, [((GeogebraCommonKernelGeosGeoList *) nil_chk(probabilityList_)) toGeoElement]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (void)dealloc {
  RELEASE_(discreteValue_);
  RELEASE_(probabilityList_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoRandomDiscrete", NULL, 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.GetCommand;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "discreteValue_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "probabilityList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoRandomDiscrete = { 2, "AlgoRandomDiscrete", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoRandomDiscrete;
}

@end

void GeogebraCommonKernelStatisticsAlgoRandomDiscrete_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoRandomDiscrete *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *discreteValue, GeogebraCommonKernelGeosGeoList *probabilityList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_set_discreteValue_(self, discreteValue);
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_set_probabilityList_(self, probabilityList);
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoRandomDiscrete *new_GeogebraCommonKernelStatisticsAlgoRandomDiscrete_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *discreteValue, GeogebraCommonKernelGeosGeoList *probabilityList) {
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete *self = [GeogebraCommonKernelStatisticsAlgoRandomDiscrete alloc];
  GeogebraCommonKernelStatisticsAlgoRandomDiscrete_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, discreteValue, probabilityList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoRandomDiscrete_compute(GeogebraCommonKernelStatisticsAlgoRandomDiscrete *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, 1))) isDefined]) {
    jint size1 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->discreteValue_)) size];
    jint size2 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->probabilityList_)) size];
    if (size1 != size2) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
      return;
    }
    jdouble tot = 0;
    jdouble randomV;
    jdouble prob;
    IOSDoubleArray *continuousProb = [IOSDoubleArray arrayWithLength:size1];
    for (jint i = 0; i < size1; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->discreteValue_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class]);
      GeogebraCommonKernelGeosGeoElement *geo2 = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->probabilityList_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class]);
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo2]) {
        id<GeogebraCommonKernelArithmeticNumberValue> p = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        prob = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(p)) getDouble];
        if (prob < 0) {
          [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
          return;
        }
        tot += prob;
        *IOSDoubleArray_GetRef(continuousProb, i) = tot;
      }
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    randomV = GeogebraCommonMainRandomUtil_randomUniformWithDouble_withDouble_(0, tot);
    for (jint i = 0; i < size1; i++) {
      if (IOSDoubleArray_Get(continuousProb, i) <= randomV) continue;
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setWithGeogebraCommonKernelGeosGeoElement:[self->discreteValue_ getWithInt:i]];
        break;
      }
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoRandomDiscrete)
