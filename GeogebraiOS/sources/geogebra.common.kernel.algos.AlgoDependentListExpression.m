//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentListExpression.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentListExpression.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelAlgosAlgoDependentListExpression () {
 @public
  GeogebraCommonKernelArithmeticExpressionNode *root_;
  GeogebraCommonKernelGeosGeoList *list_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentListExpression, root_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentListExpression, list_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentListExpression_compute(GeogebraCommonKernelAlgosAlgoDependentListExpression *self);

@implementation GeogebraCommonKernelAlgosAlgoDependentListExpression

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root {
  GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getList {
  return list_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return root_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentListExpression_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentListExpression", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticExpressionNode:", "AlgoDependentListExpression", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentListExpression = { 2, "AlgoDependentListExpression", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentListExpression;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentListExpression *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentListExpression *new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentListExpression *self = [GeogebraCommonKernelAlgosAlgoDependentListExpression alloc];
  GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, label, root);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelAlgosAlgoDependentListExpression *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentListExpression_set_root_(self, root);
  GeogebraCommonKernelAlgosAlgoDependentListExpression_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentListExpression_compute(self);
}

GeogebraCommonKernelAlgosAlgoDependentListExpression *new_GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root) {
  GeogebraCommonKernelAlgosAlgoDependentListExpression *self = [GeogebraCommonKernelAlgosAlgoDependentListExpression alloc];
  GeogebraCommonKernelAlgosAlgoDependentListExpression_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_(self, cons, root);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentListExpression_compute(GeogebraCommonKernelAlgosAlgoDependentListExpression *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> evlist = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->root_)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  GeogebraCommonKernelArithmeticMyList *myList = ([evlist isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) ? (GeogebraCommonKernelArithmeticMyList *) check_class_cast(evlist, [GeogebraCommonKernelArithmeticMyList class]) : [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(evlist, [GeogebraCommonKernelGeosGeoList class])))) getMyList];
  if (![myList isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) setDefinedWithBoolean:YES];
  jint evalListSize = [myList size];
  jint cachedListSize = [self->list_ getCacheSize];
  [self->list_ clear];
  for (jint i = 0; i < evalListSize; i++) {
    id<GeogebraCommonKernelArithmeticExpressionValue> element = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([myList getListElementWithInt:i])) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    GeogebraCommonKernelGeosGeoElement *geo = nil;
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:element]) {
      jdouble val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(element, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoNumeric]) {
          [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:val];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        geo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, val) autorelease];
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:element]) {
      GeogebraCommonKernelGeosGeoVec2D *vec = [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(element, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector];
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoPoint]) {
          [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoPoint class])) setCoordsWithGeogebraCommonKernelGeosGeoVec2D:vec];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        GeogebraCommonKernelGeosGeoPoint *point = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
        [point setCoordsWithGeogebraCommonKernelGeosGeoVec2D:vec];
        geo = point;
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
      GeogebraCommonKernelArithmeticMyList *myList2 = (GeogebraCommonKernelArithmeticMyList *) check_class_cast(element, [GeogebraCommonKernelArithmeticMyList class]);
      GeogebraCommonKernelGeosGeoList *list2 = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      [list2 clear];
      for (jint j = 0; j < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(myList2)) size]; j++) {
        id<GeogebraCommonKernelArithmeticExpressionValue> en = [myList2 getListElementWithInt:j];
        id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
          GeogebraCommonKernelGeosGeoNumeric *geo2 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
          [geo2 setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(ev, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
          [list2 addWithGeogebraCommonKernelGeosGeoElement:geo2];
        }
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:list2];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelArithmeticMyStringBuffer class]]) {
      GeogebraCommonKernelArithmeticMyStringBuffer *str = (GeogebraCommonKernelArithmeticMyStringBuffer *) check_class_cast(element, [GeogebraCommonKernelArithmeticMyStringBuffer class]);
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoText]) {
          [((GeogebraCommonKernelGeosGeoText *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoText class])) setTextStringWithNSString:[((GeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(str)) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        GeogebraCommonKernelGeosGeoText *text = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
        [text setTextStringWithNSString:[((GeogebraCommonKernelArithmeticMyStringBuffer *) nil_chk(str)) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        geo = text;
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelArithmeticMyBoolean class]]) {
      GeogebraCommonKernelArithmeticMyBoolean *bool_ = (GeogebraCommonKernelArithmeticMyBoolean *) check_class_cast(element, [GeogebraCommonKernelArithmeticMyBoolean class]);
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoBoolean]) {
          [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoBoolean class])) setValueWithBoolean:[((GeogebraCommonKernelArithmeticMyBoolean *) nil_chk(bool_)) getBoolean]];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        GeogebraCommonKernelGeosGeoBoolean *geoBool = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
        [geoBool setValueWithBoolean:[((GeogebraCommonKernelArithmeticMyBoolean *) nil_chk(bool_)) getBoolean]];
        geo = geoBool;
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      GeogebraCommonKernelGeosGeoFunction *fun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(element, [GeogebraCommonKernelGeosGeoFunction class]);
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoFunction]) {
          [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoFunction class])) setWithGeogebraCommonKernelGeosGeoElement:fun];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        GeogebraCommonKernelGeosGeoFunction *geoFun = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
        [geoFun setWithGeogebraCommonKernelGeosGeoElement:fun];
        geo = geoFun;
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) {
      GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast(element, [GeogebraCommonKernelGeosGeoText class]);
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) isGeoText]) {
          [((GeogebraCommonKernelGeosGeoText *) check_class_cast(cachedGeo, [GeogebraCommonKernelGeosGeoText class])) setWithGeogebraCommonKernelGeosGeoElement:text];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        GeogebraCommonKernelGeosGeoText *geoFun = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
        [geoFun setWithGeogebraCommonKernelGeosGeoElement:text];
        geo = geoFun;
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else if ([element isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
      GeogebraCommonKernelGeosGeoElement *geo0 = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(element, [GeogebraCommonKernelGeosGeoElement class]);
      if (i < cachedListSize) {
        GeogebraCommonKernelGeosGeoElement *cachedGeo = [self->list_ getCachedWithInt:i];
        if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(cachedGeo)) getGeoClassType])) isEqual:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getGeoClassType]]) {
          [cachedGeo setWithGeogebraCommonKernelGeosGeoElement:geo0];
          geo = cachedGeo;
        }
      }
      if (geo == nil) {
        geo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) copy__];
      }
      [self->list_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"unsupported list operation: ", [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(element)) getClass]));
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentListExpression)
