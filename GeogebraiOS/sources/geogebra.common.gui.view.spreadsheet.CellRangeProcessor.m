//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/spreadsheet/CellRangeProcessor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/gui/view/spreadsheet/CellFormatInterface.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "geogebra/common/gui/view/spreadsheet/CopyPasteCut.h"
#include "geogebra/common/gui/view/spreadsheet/MyTable.h"
#include "geogebra/common/gui/view/spreadsheet/RelativeCopy.h"
#include "geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoSort.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"

@class GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension;

@interface GeogebraCommonGuiViewSpreadsheetCellRangeProcessor () {
 @public
  id<GeogebraCommonGuiViewSpreadsheetMyTable> table_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonMainLocalization *loc_;
  GeogebraCommonKernelConstruction *cons_;
  GeogebraCommonMainSpreadsheetTableModel *tableModel_;
}

- (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)getView;

- (jboolean)containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cellRange
                                                                           withInt:(jint)minimumCount;

+ (void)getPointListDimensionsWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension:(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *)pd;

- (void)shiftColumnsRightWithInt:(jint)startColumn;

- (void)shiftColumnsLeftWithInt:(jint)startColumn
                        withInt:(jint)shiftAmount;

- (void)shiftRowsDownWithInt:(jint)startRow;

- (void)shiftRowsUpWithInt:(jint)startRow
                   withInt:(jint)shiftAmount;

+ (void)consolidateRangeListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor, table_, id<GeogebraCommonGuiViewSpreadsheetMyTable>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor, loc_, GeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor, tableModel_, GeogebraCommonMainSpreadsheetTableModel *)

__attribute__((unused)) static jboolean GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, GeogebraCommonGuiViewSpreadsheetCellRange *cellRange, jint minimumCount);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_getPointListDimensionsWithJavaUtilArrayList_withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_(JavaUtilArrayList *rangeList, GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *pd);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsRightWithInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startColumn);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsLeftWithInt_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startColumn, jint shiftAmount);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsDownWithInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startRow);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsUpWithInt_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startRow, jint shiftAmount);

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_consolidateRangeListWithJavaUtilArrayList_(JavaUtilArrayList *rangeList);

@interface GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension : NSObject {
 @public
  jboolean doHorizontalPairs_;
  jint c1_;
  jint c2_;
  jint r1_;
  jint r2_;
}

- (instancetype)initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor:(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension)

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *self, GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *outer$);

__attribute__((unused)) static GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension)

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonGuiViewSpreadsheetCellRangeProcessor

- (instancetype)initWithGeogebraCommonGuiViewSpreadsheetMyTable:(id<GeogebraCommonGuiViewSpreadsheetMyTable>)table {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initWithGeogebraCommonGuiViewSpreadsheetMyTable_(self, table);
  return self;
}

- (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)getView {
  return (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) check_protocol_cast([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getGuiManager])) getSpreadsheetView], @protocol(GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface));
}

+ (JavaUtilArrayList *)cloneWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  return GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_(rangeList);
}

- (jboolean)isCreatePointListPossibleWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] == 1 && [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) is2D]) return YES;
  else if ([rangeList size] == 2 && [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getWidth] == 1 && [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getWidth] == 1) return YES;
  else if ([rangeList size] == 1) return [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) isPointList];
  return NO;
}

- (jboolean)isCreateOperationTablePossibleWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] != 1) return NO;
  GeogebraCommonGuiViewSpreadsheetCellRange *cr = [rangeList getWithInt:0];
  jint r1 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinRow];
  jint c1 = [cr getMinColumn];
  if (!([GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, c1, r1) isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]])) return NO;
  for (jint r = r1 + 1; r <= [cr getMaxRow]; ++r) {
    if (!([GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, c1, r) isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]])) return NO;
  }
  for (jint c = c1 + 1; c <= [cr getMaxColumn]; ++c) {
    if (!([GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, c, r1) isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]])) return NO;
  }
  return YES;
}

- (jboolean)isCreateMatrixPossibleWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] == 1 && ![((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) hasEmptyCells]) {
    return YES;
  }
  return NO;
}

- (jboolean)isOneVarStatsPossibleWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                  withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClass {
  if (rangeList == nil || [rangeList size] == 0) return NO;
  jint count = 0;
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    count += [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getGeoCountWithGeogebraCommonPluginGeoClassEnum:geoClass];
    if (count >= 2) return YES;
  }
  return NO;
}

- (jboolean)isMultiVarStatsPossibleWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  if (rangeList == nil || [rangeList size] == 0) return NO;
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] == 1) {
    GeogebraCommonGuiViewSpreadsheetCellRange *cr = [rangeList getWithInt:0];
    if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMaxColumn] - [cr getMinColumn] < 1) return NO;
    for (jint col = [cr getMinColumn]; col <= [cr getMaxColumn]; col++) {
      if (!GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange_withInt_(self, [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, col, [cr getMinRow], col, [cr getMaxRow]) autorelease], 3)) return NO;
    }
    return YES;
  }
  jint columnCount = 0;
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in rangeList) {
    if (![((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) isColumn]) return NO;
    if (!GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange_withInt_(self, cr, 3)) return NO;
    columnCount += [cr getMaxColumn] - [cr getMinColumn] + 1;
  }
  return columnCount >= 2;
}

- (jboolean)containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cellRange
                                                                           withInt:(jint)minimumCount {
  return GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange_withInt_(self, cellRange, minimumCount);
}

- (jboolean)containsGeoClassWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
             withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClass {
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) containsGeoClassWithGeogebraCommonPluginGeoClassEnum:geoClass]) return YES;
  }
  return NO;
}

- (jint)getGeoCountWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
    withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClass {
  jint count = 0;
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    count += [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getGeoCountWithGeogebraCommonPluginGeoClassEnum:geoClass];
  }
  return count;
}

- (jboolean)is1DRangeListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  if (rangeList == nil || [rangeList size] > 1) {
    return NO;
  }
  return [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk(rangeList)) getWithInt:0])) is1D];
}

- (GeogebraCommonKernelGeosGeoList *)createCollectionListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                                   withBoolean:(jboolean)copyByValue
                                                                   withBoolean:(jboolean)addToConstruction
                                                                   withBoolean:(jboolean)scanByColumn {
  GeogebraCommonKernelGeosGeoList *tempGeo = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  jboolean oldSuppress = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonGuiViewSpreadsheetCellRange *tempRange = nil;
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    if (scanByColumn) {
      for (jint col = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn]; col <= [cr getMaxColumn]; col++) {
        if ([cr isColumn]) {
          tempRange = [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_(app_, col, -1) autorelease];
          [tempRange setActualRange];
        }
        else {
          tempRange = [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, col, [cr getMinRow], col, [cr getMaxRow]) autorelease];
        }
        JavaUtilArrayList *tempList = [new_JavaUtilArrayList_init() autorelease];
        [tempList addWithId:tempRange];
        [tempGeo addWithGeogebraCommonKernelGeosGeoElement:[self createListWithJavaUtilArrayList:tempList withBoolean:YES withBoolean:copyByValue withBoolean:NO withBoolean:NO withGeogebraCommonPluginGeoClassEnum:nil withBoolean:addToConstruction]];
      }
    }
    else {
      for (jint row = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinRow]; row <= [cr getMaxRow]; row++) {
        if ([cr isRow]) {
          tempRange = [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_(app_, -1, row) autorelease];
          [tempRange setActualRange];
        }
        else {
          tempRange = [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, [cr getMinColumn], row, [cr getMaxColumn], row) autorelease];
        }
        JavaUtilArrayList *tempList = [new_JavaUtilArrayList_init() autorelease];
        [tempList addWithId:tempRange];
        [tempGeo addWithGeogebraCommonKernelGeosGeoElement:[self createListWithJavaUtilArrayList:tempList withBoolean:YES withBoolean:copyByValue withBoolean:NO withBoolean:NO withGeogebraCommonPluginGeoClassEnum:nil withBoolean:addToConstruction]];
      }
    }
  }
  [cons_ setSuppressLabelCreationWithBoolean:oldSuppress];
  return tempGeo;
}

- (GeogebraCommonKernelGeosGeoElement *)createPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                                withBoolean:(jboolean)byValue
                                                                withBoolean:(jboolean)leftToRight {
  return [self createPolyLineWithJavaUtilArrayList:rangeList withBoolean:byValue withBoolean:leftToRight withBoolean:NO withBoolean:NO];
}

- (GeogebraCommonKernelGeosGeoElement *)createPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                                withBoolean:(jboolean)byValue
                                                                withBoolean:(jboolean)leftToRight
                                                                withBoolean:(jboolean)isSorted
                                                                withBoolean:(jboolean)doStoreUndo {
  jboolean doCreateFreePoints = YES;
  GeogebraCommonKernelGeosGeoList *list = [self createPointGeoListWithJavaUtilArrayList:rangeList withBoolean:byValue withBoolean:leftToRight withBoolean:isSorted withBoolean:doStoreUndo withBoolean:doCreateFreePoints];
  GeogebraCommonKernelAlgosAlgoPolyLine *al = [new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, list) autorelease];
  GeogebraCommonKernelGeosGeoElement *ret = IOSObjectArray_Get(nil_chk([al getGeoElements]), 0);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setLabelWithNSString:nil];
  return ret;
}

+ (void)getPointListDimensionsWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension:(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *)pd {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_getPointListDimensionsWithJavaUtilArrayList_withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_(rangeList, pd);
}

- (GeogebraCommonKernelGeosGeoList *)createPointGeoListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                                 withBoolean:(jboolean)byValue
                                                                 withBoolean:(jboolean)leftToRight
                                                                 withBoolean:(jboolean)isSorted
                                                                 withBoolean:(jboolean)doStoreUndo
                                                                 withBoolean:(jboolean)doCreateFreePoints {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *pd = [new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(self) autorelease];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_getPointListDimensionsWithJavaUtilArrayList_withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_(rangeList, pd);
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel];
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  @try {
    GeogebraCommonKernelGeosGeoElement *xCoord, *yCoord;
    if (pd->doHorizontalPairs_) {
      for (jint i = pd->r1_; i <= pd->r2_; ++i) {
        xCoord = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, i);
        yCoord = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c2_, i);
        if (xCoord == nil || yCoord == nil || ![xCoord isGeoNumeric] || ![yCoord isGeoNumeric]) continue;
        GeogebraCommonKernelGeosGeoPoint *geoPoint;
        GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = nil;
        if (byValue) {
          if (leftToRight) geoPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], 1.0) autorelease];
          else geoPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], 1.0) autorelease];
        }
        else {
          GeogebraCommonKernelArithmeticMyVecNode *vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, leftToRight ? xCoord : yCoord, leftToRight ? yCoord : xCoord) autorelease];
          GeogebraCommonKernelArithmeticExpressionNode *point = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
          [point setForcePoint];
          pointAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, point, NO) autorelease];
          geoPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]);
        }
        if (doCreateFreePoints) {
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) setLabelWithNSString:nil];
        }
        else {
          if (pointAlgo != nil) [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
        }
        [list addWithId:geoPoint];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(yCoord)) isAngle] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(xCoord)) isAngle]) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) setPolar];
      }
    }
    else {
      for (jint i = pd->c1_; i <= pd->c2_; ++i) {
        xCoord = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, i, pd->r1_);
        yCoord = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, i, pd->r2_);
        if (xCoord == nil || yCoord == nil || ![xCoord isGeoNumeric] || ![yCoord isGeoNumeric]) continue;
        GeogebraCommonKernelGeosGeoPoint *geoPoint;
        GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = nil;
        if (byValue) {
          geoPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(cons_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(xCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(yCoord, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble], 1.0) autorelease];
        }
        else {
          GeogebraCommonKernelArithmeticMyVecNode *vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, leftToRight ? xCoord : yCoord, leftToRight ? yCoord : xCoord) autorelease];
          GeogebraCommonKernelArithmeticExpressionNode *point = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
          [point setForcePoint];
          pointAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, point, NO) autorelease];
          geoPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]);
        }
        if (doCreateFreePoints) {
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) setLabelWithNSString:nil];
        }
        else {
          if (pointAlgo != nil) [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
        }
        [list addWithId:geoPoint];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(yCoord)) isAngle] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(xCoord)) isAngle]) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(geoPoint)) setPolar];
      }
    }
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Creating list of points expression failed with exception ", ex));
  }
  GeogebraCommonKernelAlgosAlgoDependentList *dl = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, list, NO) autorelease];
  [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:dl];
  return (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([dl getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]);
}

- (IOSObjectArray *)getPointListTitlesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                withBoolean:(jboolean)leftToRight {
  IOSObjectArray *title = [IOSObjectArray arrayWithLength:2 type:NSString_class_()];
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] == 1 && [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) isPointList]) return title;
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *pd = [new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(self) autorelease];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_getPointListDimensionsWithJavaUtilArrayList_withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_(rangeList, pd);
  if (pd->doHorizontalPairs_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r1_))) isGeoText]) {
      IOSObjectArray_Set(title, 0, [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r1_), [GeogebraCommonKernelGeosGeoText class])))) getTextString]);
    }
    else if (pd->r1_ == 0) {
      IOSObjectArray_Set(title, 0, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c1_, -1, pd->c1_, -1) autorelease]]);
    }
    else {
      IOSObjectArray_Set(title, 0, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c1_, pd->r1_, pd->c1_, pd->r2_) autorelease]]);
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c2_, pd->r1_))) isGeoText]) {
      IOSObjectArray_Set(title, 1, [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c2_, pd->r1_), [GeogebraCommonKernelGeosGeoText class])))) getTextString]);
    }
    else if (pd->r1_ == 0) {
      IOSObjectArray_Set(title, 1, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c2_, -1, pd->c2_, -1) autorelease]]);
    }
    else {
      IOSObjectArray_Set(title, 1, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c2_, pd->r1_, pd->c2_, pd->r2_) autorelease]]);
    }
  }
  else {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r1_))) isGeoText]) {
      IOSObjectArray_Set(title, 0, [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r1_), [GeogebraCommonKernelGeosGeoText class])))) getTextString]);
    }
    else if (pd->c1_ == 0) {
      IOSObjectArray_Set(title, 0, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, pd->r1_, -1, pd->r1_) autorelease]]);
    }
    else {
      IOSObjectArray_Set(title, 0, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c1_, pd->r1_, pd->c2_, pd->r1_) autorelease]]);
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r2_))) isGeoText]) {
      IOSObjectArray_Set(title, 1, [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, pd->c1_, pd->r2_), [GeogebraCommonKernelGeosGeoText class])))) getTextString]);
    }
    else if (pd->c1_ == 0) {
      IOSObjectArray_Set(title, 1, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, -1, pd->r2_, -1, pd->r2_) autorelease]]);
    }
    else {
      IOSObjectArray_Set(title, 1, [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, pd->c1_, pd->r2_, pd->c2_, pd->r2_) autorelease]]);
    }
  }
  if (!leftToRight) {
    NSString *temp = IOSObjectArray_Get(title, 0);
    IOSObjectArray_Set(title, 0, IOSObjectArray_Get(title, 1));
    IOSObjectArray_Set(title, 1, temp);
  }
  return title;
}

- (IOSObjectArray *)getColumnTitlesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  JavaUtilArrayList *titleList = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    for (jint col = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn]; col <= [cr getMaxColumn]; col++) {
      if (GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, col, 0) != nil && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, col, 0))) isGeoText]) {
        [titleList addWithId:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, col, 0), [GeogebraCommonKernelGeosGeoText class])))) getTextString]];
      }
      else {
        [titleList addWithId:[self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:[new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_withInt_withInt_(app_, col, -1, col, -1) autorelease]]];
      }
    }
  }
  IOSObjectArray *title = [IOSObjectArray arrayWithLength:[titleList size] type:NSString_class_()];
  title = [titleList toArrayWithNSObjectArray:title];
  return title;
}

- (GeogebraCommonKernelGeosGeoElement *)createListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                            withBoolean:(jboolean)scanByColumn
                                                            withBoolean:(jboolean)copyByValue {
  return [self createListWithJavaUtilArrayList:rangeList withBoolean:scanByColumn withBoolean:copyByValue withBoolean:NO withBoolean:NO withGeogebraCommonPluginGeoClassEnum:nil withBoolean:YES];
}

- (GeogebraCommonKernelGeosGeoList *)createListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                         withBoolean:(jboolean)scanByColumn
                                                         withBoolean:(jboolean)copyByValue
                                                         withBoolean:(jboolean)isSorted
                                                         withBoolean:(jboolean)doStoreUndo
                                withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoTypeFilter
                                                         withBoolean:(jboolean)setLabel {
  GeogebraCommonKernelGeosGeoList *geoList = nil;
  JavaUtilArrayList *list = nil;
  if (copyByValue) geoList = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  else list = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilArrayList *cellList = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilHashSet *usedCells = [new_JavaUtilHashSet_init() autorelease];
  @try {
    for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
      [cellList addAllWithJavaUtilCollection:[((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) toCellListWithBoolean:scanByColumn]];
    }
    for (GeogebraCommonAwtGPoint * __strong cell in cellList) {
      if (![usedCells containsWithId:cell]) {
        GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, ((GeogebraCommonAwtGPoint *) nil_chk(cell))->x_, cell->y_);
        if (geo != nil && (geoTypeFilter == nil || [geo getGeoClassType] == geoTypeFilter)) {
          if (copyByValue) [((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) addWithGeogebraCommonKernelGeosGeoElement:[geo copy__]];
          else [((JavaUtilArrayList *) nil_chk(list)) addWithId:geo];
        }
        [usedCells addWithId:cell];
      }
    }
    if (!copyByValue) {
      GeogebraCommonKernelAlgosAlgoDependentList *algo = [new_GeogebraCommonKernelAlgosAlgoDependentList_initWithGeogebraCommonKernelConstruction_withJavaUtilArrayList_withBoolean_(cons_, list, NO) autorelease];
      if (!setLabel) {
        [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      }
      geoList = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]);
    }
    if (isSorted) {
      GeogebraCommonKernelAlgosAlgoSort *algo = [new_GeogebraCommonKernelAlgosAlgoSort_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(cons_, geoList) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      geoList = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([algo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]);
    }
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Creating list failed with exception ", ex));
  }
  if (doStoreUndo) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  }
  if (setLabel) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList)) setLabelWithNSString:nil];
  }
  if (geoList != nil) {
    return geoList;
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoElement *)createListFromColumnWithInt:(jint)column
                                                        withBoolean:(jboolean)copyByValue
                                                        withBoolean:(jboolean)isSorted
                                                        withBoolean:(jboolean)storeUndoInfo
                               withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoTypeFilter
                                                        withBoolean:(jboolean)addToConstruction {
  JavaUtilArrayList *rangeList = [new_JavaUtilArrayList_init() autorelease];
  GeogebraCommonGuiViewSpreadsheetCellRange *cr = [new_GeogebraCommonGuiViewSpreadsheetCellRange_initWithGeogebraCommonMainApp_withInt_withInt_(app_, column, -1) autorelease];
  [cr setActualRange];
  [rangeList addWithId:cr];
  return [self createListWithJavaUtilArrayList:rangeList withBoolean:YES withBoolean:copyByValue withBoolean:isSorted withBoolean:storeUndoInfo withGeogebraCommonPluginGeoClassEnum:geoTypeFilter withBoolean:addToConstruction];
}

- (jboolean)isAllColumnsWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  jboolean isAllColumns = YES;
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    if (![((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) isColumn]) {
      isAllColumns = NO;
    }
  }
  return isAllColumns;
}

- (NSString *)createColumnMatrixExpressionWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                                                    withBoolean:(jboolean)copyByValue
                                                    withBoolean:(jboolean)addToConstruction {
  GeogebraCommonKernelGeosGeoElement *tempGeo;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"{"];
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    for (jint col = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn]; col <= [cr getMaxColumn]; col++) {
      tempGeo = [self createListFromColumnWithInt:col withBoolean:copyByValue withBoolean:NO withBoolean:NO withGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withBoolean:addToConstruction];
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(tempGeo)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      [sb appendWithNSString:@","];
      [tempGeo remove];
    }
  }
  [sb deleteCharAtWithInt:[sb length] - 1];
  [sb appendWithNSString:@"}"];
  return [sb description];
}

- (NSString *)createMatrixExpressionWithInt:(jint)column1
                                    withInt:(jint)column2
                                    withInt:(jint)row1
                                    withInt:(jint)row2
                                withBoolean:(jboolean)copyByValue
                                withBoolean:(jboolean)transpose {
  GeogebraCommonKernelGeosGeoElement *v2;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"{"];
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  if (!transpose) {
    for (jint j = row1; j <= row2; ++j) {
      [sb appendWithNSString:@"{"];
      for (jint i = column1; i <= column2; ++i) {
        v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, i, j);
        if (v2 != nil) {
          if (copyByValue) {
            [sb appendWithNSString:[v2 toDefinedValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [sb appendWithNSString:[v2 getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
          }
          [sb appendWithChar:','];
        }
        else {
          [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"CellAisNotDefined" withNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(i, j)]];
          return nil;
        }
      }
      [sb deleteCharAtWithInt:[sb length] - 1];
      [sb appendWithNSString:@"},"];
    }
  }
  else {
    for (jint j = column1; j <= column2; ++j) {
      [sb appendWithNSString:@"{"];
      for (jint i = row1; i <= row2; ++i) {
        v2 = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, j, i);
        if (v2 != nil) {
          if (copyByValue) {
            [sb appendWithNSString:[v2 toDefinedValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
          }
          else {
            [sb appendWithNSString:[v2 getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
          }
          [sb appendWithChar:','];
        }
        else {
          [((GeogebraCommonMainApp *) nil_chk(app_)) showErrorWithNSString:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"CellAisNotDefined" withNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(i, j)]];
          return nil;
        }
      }
      [sb deleteCharAtWithInt:[sb length] - 1];
      [sb appendWithNSString:@"},"];
    }
  }
  [sb deleteCharAtWithInt:[sb length] - 1];
  [sb appendWithChar:'}'];
  return [sb description];
}

- (GeogebraCommonKernelGeosGeoElement *)createMatrixWithInt:(jint)column1
                                                    withInt:(jint)column2
                                                    withInt:(jint)row1
                                                    withInt:(jint)row2
                                                withBoolean:(jboolean)copyByValue {
  return [self createMatrixWithInt:column1 withInt:column2 withInt:row1 withInt:row2 withBoolean:copyByValue withBoolean:NO];
}

- (GeogebraCommonKernelGeosGeoElement *)createMatrixWithInt:(jint)column1
                                                    withInt:(jint)column2
                                                    withInt:(jint)row1
                                                    withInt:(jint)row2
                                                withBoolean:(jboolean)copyByValue
                                                withBoolean:(jboolean)transpose {
  IOSObjectArray *geos = nil;
  NSString *expr = nil;
  @try {
    expr = [self createMatrixExpressionWithInt:column1 withInt:column2 withInt:row1 withInt:row2 withBoolean:copyByValue withBoolean:transpose];
    geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:expr withBoolean:NO];
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"creating matrix failed ", expr));
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
  if (geos != nil) {
    return IOSObjectArray_Get(geos, 0);
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoElement *)createTableTextWithInt:(jint)column1
                                                       withInt:(jint)column2
                                                       withInt:(jint)row1
                                                       withInt:(jint)row2
                                                   withBoolean:(jboolean)copyByValue
                                                   withBoolean:(jboolean)transpose {
  IOSObjectArray *geos = nil;
  JavaLangStringBuilder *text = [new_JavaLangStringBuilder_init() autorelease];
  @try {
    [text appendWithNSString:@"TableText["];
    [text appendWithNSString:[self createMatrixExpressionWithInt:column1 withInt:column2 withInt:row1 withInt:row2 withBoolean:copyByValue withBoolean:transpose]];
    [text appendWithNSString:@",\"|_\"]"];
    geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:[text description] withBoolean:NO];
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"creating TableText failed ", text));
    [((JavaLangException *) nil_chk(ex)) printStackTrace];
  }
  if (geos != nil) {
    return IOSObjectArray_Get(geos, 0);
  }
  return nil;
}

- (void)insertColumnWithInt:(jint)column1
                    withInt:(jint)column2
                withBoolean:(jboolean)insertLeft {
  if (insertLeft) {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsRightWithInt_(self, column1);
    [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCellFormatHandler])) shiftFormatsWithInt:column1 withInt:1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Right()];
  }
  else {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsRightWithInt_(self, column2 + 1);
    [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCellFormatHandler])) shiftFormatsWithInt:column2 + 1 withInt:1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Right()];
  }
  [((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) repaintAll];
}

- (void)deleteColumnsWithInt:(jint)column1
                     withInt:(jint)column2 {
  [((GeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) delete__WithInt:column1 withInt:0 withInt:column2 withInt:[((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getHighestUsedRow]];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsLeftWithInt_withInt_(self, column2 + 1, column2 - column1 + 1);
  [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([table_ getCellFormatHandler])) shiftFormatsWithInt:column2 + 1 withInt:column2 - column1 + 1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Left()];
  [table_ repaintAll];
}

- (void)shiftColumnsRightWithInt:(jint)startColumn {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsRightWithInt_(self, startColumn);
}

- (void)shiftColumnsLeftWithInt:(jint)startColumn
                        withInt:(jint)shiftAmount {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsLeftWithInt_withInt_(self, startColumn, shiftAmount);
}

- (void)insertRowWithInt:(jint)row1
                 withInt:(jint)row2
             withBoolean:(jboolean)insertAbove {
  if (insertAbove) {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsDownWithInt_(self, row1);
    [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCellFormatHandler])) shiftFormatsWithInt:row1 withInt:1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Down()];
  }
  else {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsDownWithInt_(self, row2 + 1);
    [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCellFormatHandler])) shiftFormatsWithInt:row2 + 1 withInt:1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Down()];
  }
  [((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) repaintAll];
}

- (void)deleteRowsWithInt:(jint)row1
                  withInt:(jint)row2 {
  [((GeogebraCommonGuiViewSpreadsheetCopyPasteCut *) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table_)) getCopyPasteCut])) delete__WithInt:0 withInt:row1 withInt:[((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(tableModel_)) getHighestUsedColumn] withInt:row2];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsUpWithInt_withInt_(self, row2 + 1, row2 - row1 + 1);
  [((id<GeogebraCommonGuiViewSpreadsheetCellFormatInterface>) nil_chk([table_ getCellFormatHandler])) shiftFormatsWithInt:row2 + 1 withInt:row2 - row1 + 1 withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_get_Up()];
  [table_ repaintAll];
}

- (void)shiftRowsDownWithInt:(jint)startRow {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsDownWithInt_(self, startRow);
}

- (void)shiftRowsUpWithInt:(jint)startRow
                   withInt:(jint)shiftAmount {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsUpWithInt_withInt_(self, startRow, shiftAmount);
}

- (void)createOperationTableWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)cr
                              withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)fcn {
  jint r1 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinRow];
  jint c1 = [cr getMinColumn];
  NSString *text = @"";
  IOSObjectArray *geos;
  fcn = (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(app_, c1, r1), [GeogebraCommonKernelGeosGeoFunctionNVar class]);
  for (jint r = r1 + 1; r <= [cr getMaxRow]; ++r) {
    for (jint c = c1 + 1; c <= [cr getMaxColumn]; ++c) {
      text = JreStrcat("$C$C", GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(c, r), '=', [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(fcn)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], '(');
      text = JreStrcat("$$", text, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(c1, r));
      text = JreStrcat("$C", text, ',');
      text = JreStrcat("$$", text, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(c, r1));
      text = JreStrcat("$C", text, ')');
      geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:text withBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(geos), 0))) setAuxiliaryObjectWithBoolean:YES];
    }
  }
}

+ (void)consolidateRangeListWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_consolidateRangeListWithJavaUtilArrayList_(rangeList);
}

- (NSString *)getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)range {
  return [self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:range withBoolean:YES];
}

- (NSString *)getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:(GeogebraCommonGuiViewSpreadsheetCellRange *)range
                                                                  withBoolean:(jboolean)onlyFirstRowColumn {
  NSString *s = @"";
  if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(range)) isColumn]) {
    s = JreStrcat("$C$", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getCommandWithNSString:@"Column"], ' ', GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_([range getMinColumn]));
    if (!onlyFirstRowColumn && ![range is1D]) {
      s = JreStrcat("$$", s, JreStrcat("$$C$", @" : ", [loc_ getCommandWithNSString:@"Column"], ' ', GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetColumnNameWithInt_([range getMaxColumn])));
    }
  }
  else if ([range isRow]) {
    s = JreStrcat("$CI", [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getCommandWithNSString:@"Row"], ' ', ([range getMinRow] + 1));
    if (!onlyFirstRowColumn && ![range is1D]) {
      s = JreStrcat("$$", s, JreStrcat("$$CI", @" : ", [loc_ getCommandWithNSString:@"Row"], ' ', ([range getMaxRow] + 1)));
    }
  }
  else {
    s = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_([range getMinColumn], [range getMinRow]);
    s = JreStrcat("$C", s, ':');
    s = JreStrcat("$$", s, GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_([range getMaxColumn], [range getMaxRow]));
  }
  return s;
}

- (NSString *)getCellRangeStringWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(list)) {
    [sb appendWithNSString:[self getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:cr withBoolean:NO]];
    [sb appendWithNSString:@", "];
  }
  [sb deleteCharAtWithInt:[sb lastIndexOfWithNSString:@", "]];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(table_);
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(cons_);
  RELEASE_(tableModel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiViewSpreadsheetMyTable:", "CellRangeProcessor", NULL, 0x1, NULL, NULL },
    { "getView", NULL, "Lgeogebra.common.gui.view.spreadsheet.SpreadsheetViewInterface;", 0x2, NULL, NULL },
    { "cloneWithJavaUtilArrayList:", "clone", "Ljava.util.ArrayList;", 0x9, NULL, NULL },
    { "isCreatePointListPossibleWithJavaUtilArrayList:", "isCreatePointListPossible", "Z", 0x1, NULL, NULL },
    { "isCreateOperationTablePossibleWithJavaUtilArrayList:", "isCreateOperationTablePossible", "Z", 0x1, NULL, NULL },
    { "isCreateMatrixPossibleWithJavaUtilArrayList:", "isCreateMatrixPossible", "Z", 0x1, NULL, NULL },
    { "isOneVarStatsPossibleWithJavaUtilArrayList:withGeogebraCommonPluginGeoClassEnum:", "isOneVarStatsPossible", "Z", 0x1, NULL, NULL },
    { "isMultiVarStatsPossibleWithJavaUtilArrayList:", "isMultiVarStatsPossible", "Z", 0x1, NULL, NULL },
    { "containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange:withInt:", "containsMinimumGeoNumeric", "Z", 0x2, NULL, NULL },
    { "containsGeoClassWithJavaUtilArrayList:withGeogebraCommonPluginGeoClassEnum:", "containsGeoClass", "Z", 0x1, NULL, NULL },
    { "getGeoCountWithJavaUtilArrayList:withGeogebraCommonPluginGeoClassEnum:", "getGeoCount", "I", 0x1, NULL, NULL },
    { "is1DRangeListWithJavaUtilArrayList:", "is1DRangeList", "Z", 0x1, NULL, NULL },
    { "createCollectionListWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:", "createCollectionList", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "createPolyLineWithJavaUtilArrayList:withBoolean:withBoolean:", "createPolyLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createPolyLineWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:withBoolean:", "createPolyLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPointListDimensionsWithJavaUtilArrayList:withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension:", "getPointListDimensions", "V", 0xa, NULL, NULL },
    { "createPointGeoListWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:", "createPointGeoList", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getPointListTitlesWithJavaUtilArrayList:withBoolean:", "getPointListTitles", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getColumnTitlesWithJavaUtilArrayList:", "getColumnTitles", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "createListWithJavaUtilArrayList:withBoolean:withBoolean:", "createList", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createListWithJavaUtilArrayList:withBoolean:withBoolean:withBoolean:withBoolean:withGeogebraCommonPluginGeoClassEnum:withBoolean:", "createList", "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "createListFromColumnWithInt:withBoolean:withBoolean:withBoolean:withGeogebraCommonPluginGeoClassEnum:withBoolean:", "createListFromColumn", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isAllColumnsWithJavaUtilArrayList:", "isAllColumns", "Z", 0x1, NULL, NULL },
    { "createColumnMatrixExpressionWithJavaUtilArrayList:withBoolean:withBoolean:", "createColumnMatrixExpression", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createMatrixExpressionWithInt:withInt:withInt:withInt:withBoolean:withBoolean:", "createMatrixExpression", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:withInt:withInt:withBoolean:", "createMatrix", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:withInt:withInt:withBoolean:withBoolean:", "createMatrix", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createTableTextWithInt:withInt:withInt:withInt:withBoolean:withBoolean:", "createTableText", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "insertColumnWithInt:withInt:withBoolean:", "insertColumn", "V", 0x1, NULL, NULL },
    { "deleteColumnsWithInt:withInt:", "deleteColumns", "V", 0x1, NULL, NULL },
    { "shiftColumnsRightWithInt:", "shiftColumnsRight", "V", 0x2, NULL, NULL },
    { "shiftColumnsLeftWithInt:withInt:", "shiftColumnsLeft", "V", 0x2, NULL, NULL },
    { "insertRowWithInt:withInt:withBoolean:", "insertRow", "V", 0x1, NULL, NULL },
    { "deleteRowsWithInt:withInt:", "deleteRows", "V", 0x1, NULL, NULL },
    { "shiftRowsDownWithInt:", "shiftRowsDown", "V", 0x2, NULL, NULL },
    { "shiftRowsUpWithInt:withInt:", "shiftRowsUp", "V", 0x2, NULL, NULL },
    { "createOperationTableWithGeogebraCommonGuiViewSpreadsheetCellRange:withGeogebraCommonKernelGeosGeoFunctionNVar:", "createOperationTable", "V", 0x1, NULL, NULL },
    { "consolidateRangeListWithJavaUtilArrayList:", "consolidateRangeList", "V", 0xa, NULL, NULL },
    { "getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:", "getCellRangeString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCellRangeStringWithGeogebraCommonGuiViewSpreadsheetCellRange:withBoolean:", "getCellRangeString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCellRangeStringWithJavaUtilArrayList:", "getCellRangeString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "table_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.MyTable;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "tableModel_", NULL, 0x2, "Lgeogebra.common.main.SpreadsheetTableModel;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$PointDimension;", "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCellRangeProcessor = { 2, "CellRangeProcessor", "geogebra.common.gui.view.spreadsheet", NULL, 0x1, 41, methods, 5, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor;
}

@end

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initWithGeogebraCommonGuiViewSpreadsheetMyTable_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, id<GeogebraCommonGuiViewSpreadsheetMyTable> table) {
  NSObject_init(self);
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_set_table_(self, table);
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(table)) getKernel])) getApplication]);
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_set_tableModel_(self, [self->app_ getSpreadsheetTableModel]);
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk([table getKernel])) getConstruction]);
}

GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initWithGeogebraCommonGuiViewSpreadsheetMyTable_(id<GeogebraCommonGuiViewSpreadsheetMyTable> table) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self = [GeogebraCommonGuiViewSpreadsheetCellRangeProcessor alloc];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initWithGeogebraCommonGuiViewSpreadsheetMyTable_(self, table);
  return self;
}

JavaUtilArrayList *GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_(JavaUtilArrayList *rangeList) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initialize();
  JavaUtilArrayList *newList = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
    [newList addWithId:[((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) clone]];
  }
  return newList;
}

jboolean GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_containsMinimumGeoNumericWithGeogebraCommonGuiViewSpreadsheetCellRange_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, GeogebraCommonGuiViewSpreadsheetCellRange *cellRange, jint minimumCount) {
  jint count = 0;
  for (jint col = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cellRange)) getMinColumn]; col <= [cellRange getMaxColumn]; ++col) {
    for (jint row = [cellRange getMinRow]; row <= [cellRange getMaxRow]; ++row) {
      GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, col, row);
      if (geo != nil && [geo isGeoNumeric]) ++count;
      if (count >= minimumCount) return YES;
    }
  }
  return NO;
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_getPointListDimensionsWithJavaUtilArrayList_withGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_(JavaUtilArrayList *rangeList, GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *pd) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initialize();
  ((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *) nil_chk(pd))->doHorizontalPairs_ = YES;
  if ([((JavaUtilArrayList *) nil_chk(rangeList)) size] == 1) {
    pd->doHorizontalPairs_ = ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getWidth] == 2);
    pd->c1_ = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinColumn];
    pd->c2_ = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxColumn];
    pd->r1_ = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinRow];
    pd->r2_ = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxRow];
  }
  else {
    if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getWidth] == 1 && [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getWidth] == 1) {
      pd->doHorizontalPairs_ = YES;
      pd->c1_ = JavaLangMath_minWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinColumn], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMinColumn]);
      pd->c2_ = JavaLangMath_maxWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxColumn], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMaxColumn]);
      pd->r1_ = JavaLangMath_maxWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinRow], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMinRow]);
      pd->r2_ = JavaLangMath_minWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxRow], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMaxRow]);
    }
    else {
      pd->doHorizontalPairs_ = YES;
      pd->r1_ = JavaLangMath_minWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinRow], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMinRow]);
      pd->r2_ = JavaLangMath_maxWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxRow], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMaxRow]);
      pd->c1_ = JavaLangMath_maxWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinColumn], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMinColumn]);
      pd->c2_ = JavaLangMath_minWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxColumn], [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) getMaxColumn]);
    }
  }
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsRightWithInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startColumn) {
  jboolean succ = NO;
  jint maxColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(self->tableModel_)) getHighestUsedColumn];
  jint maxRow = [self->tableModel_ getHighestUsedRow];
  for (jint column = maxColumn; column >= startColumn; --column) {
    for (jint row = 0; row <= maxRow; ++row) {
      GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
      if (geo == nil) continue;
      NSString *newLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column + 1, row);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:newLabel];
      succ = YES;
    }
  }
  if (succ) {
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) storeUndoInfo];
  }
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftColumnsLeftWithInt_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startColumn, jint shiftAmount) {
  jboolean succ = NO;
  jint maxColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(self->tableModel_)) getHighestUsedColumn];
  jint maxRow = [self->tableModel_ getHighestUsedRow];
  for (jint column = startColumn; column <= maxColumn; ++column) {
    for (jint row = 0; row <= maxRow; ++row) {
      GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
      if (geo == nil) continue;
      NSString *newLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column - shiftAmount, row);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:newLabel];
      succ = YES;
    }
  }
  if (succ) {
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) storeUndoInfo];
  }
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsDownWithInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startRow) {
  jint maxColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(self->tableModel_)) getHighestUsedColumn];
  jint maxRow = [self->tableModel_ getHighestUsedRow];
  jboolean succ = NO;
  for (jint row = maxRow; row >= startRow; --row) {
    for (jint column = 0; column <= maxColumn; ++column) {
      GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
      if (geo == nil) continue;
      NSString *newLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row + 1);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:newLabel];
      succ = YES;
    }
  }
  if (succ) [((GeogebraCommonMainApp *) nil_chk(self->app_)) storeUndoInfo];
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_shiftRowsUpWithInt_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *self, jint startRow, jint shiftAmount) {
  jboolean succ = NO;
  jint maxColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk(self->tableModel_)) getHighestUsedColumn];
  jint maxRow = [self->tableModel_ getHighestUsedRow];
  for (jint row = startRow; row <= maxRow; ++row) {
    for (jint column = 0; column <= maxColumn; ++column) {
      GeogebraCommonKernelGeosGeoElement *geo = GeogebraCommonGuiViewSpreadsheetRelativeCopy_getValueWithGeogebraCommonMainApp_withInt_withInt_(self->app_, column, row);
      if (geo == nil) continue;
      NSString *newLabel = GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row - shiftAmount);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:newLabel];
      succ = YES;
    }
  }
  if (succ) {
    [((GeogebraCommonMainApp *) nil_chk(self->app_)) storeUndoInfo];
  }
}

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_consolidateRangeListWithJavaUtilArrayList_(JavaUtilArrayList *rangeList) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_initialize();
  JavaUtilArrayList *matrix = [new_JavaUtilArrayList_init() autorelease];
  jint minRow = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk(rangeList)) getWithInt:0])) getMinRow];
  jint maxRow = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxRow];
  jint minColumn = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMinColumn];
  jint maxColumn = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) getMaxColumn];
  for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in rangeList) {
    minColumn = JavaLangMath_minWithInt_withInt_([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) getMinColumn], minColumn);
    maxColumn = JavaLangMath_maxWithInt_withInt_([cr getMaxColumn], maxColumn);
    minRow = JavaLangMath_minWithInt_withInt_([cr getMinRow], minRow);
    maxRow = JavaLangMath_maxWithInt_withInt_([cr getMaxRow], maxRow);
    for (jint col = [cr getMinColumn]; col <= [cr getMaxColumn]; col++) {
      if ([matrix getWithInt:col] == nil) {
        [matrix addWithInt:col withId:[new_JavaUtilArrayList_init() autorelease]];
        [((JavaUtilArrayList *) nil_chk([matrix getWithInt:col])) addWithId:[new_GeogebraCommonAwtGPoint_initWithInt_withInt_([cr getMinColumn], [cr getMaxColumn]) autorelease]];
      }
      else {
      }
    }
    for (jint col = minColumn; col <= maxColumn; col++) {
      if ([matrix containsWithId:JavaLangInteger_valueOfWithInt_(col)]) {
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor)

@implementation GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension

- (instancetype)initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor:(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)outer$ {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "doHorizontalPairs_", NULL, 0x0, "Z", NULL, NULL,  },
    { "c1_", NULL, 0x0, "I", NULL, NULL,  },
    { "c2_", NULL, 0x0, "I", NULL, NULL,  },
    { "r1_", NULL, 0x0, "I", NULL, NULL,  },
    { "r2_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension = { 2, "PointDimension", "geogebra.common.gui.view.spreadsheet", "CellRangeProcessor", 0x2, 1, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension;
}

@end

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *self, GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *outer$) {
  NSObject_init(self);
}

GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *outer$) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension *self = [GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension alloc];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension_initWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_PointDimension)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum)

GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_values_[4];

@implementation GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_values() {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_values_ count:4 type:GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_values();
}

+ (GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_valueOfWithNSString_(name);
}

GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *e = GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum class]) {
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Left = new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(@"Left", 0);
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Right = new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(@"Right", 1);
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Up = new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(@"Up", 2);
    GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Down = new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(@"Down", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "Left", "Left", 0x4019, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;", &GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Left, NULL,  },
    { "Right", "Right", 0x4019, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;", &GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Right, NULL,  },
    { "Up", "Up", 0x4019, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;", &GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Up, NULL,  },
    { "Down", "Down", 0x4019, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;", &GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_Down, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor$Direction;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum = { 2, "Direction", "geogebra.common.gui.view.spreadsheet", "CellRangeProcessor", 0x4019, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/gui/view/spreadsheet/CellRangeProcessor$Direction;>;" };
  return &_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum;
}

@end

void GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *new_GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum *self = [GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum alloc];
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_DirectionEnum)
