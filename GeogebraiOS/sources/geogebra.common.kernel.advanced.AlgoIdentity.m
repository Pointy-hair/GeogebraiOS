//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoIdentity.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoIdentity.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@interface GeogebraCommonKernelAdvancedAlgoIdentity () {
 @public
  id<GeogebraCommonKernelGeosGeoNumberValue> n_;
  GeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoIdentity, n_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoIdentity, result_, GeogebraCommonKernelGeosGeoList *)

@implementation GeogebraCommonKernelAdvancedAlgoIdentity

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)n {
  GeogebraCommonKernelAdvancedAlgoIdentity_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, label, n);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(n_)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (void)compute {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) clear];
  jint size = J2ObjCFpToInt([((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(n_)) getDouble]);
  if (size <= 0) {
    [result_ setUndefined];
    return;
  }
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoList *toAdd = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    for (jint j = 0; j < size; j++) {
      [toAdd addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, i == j ? 1 : 0) autorelease]];
    }
    [result_ addWithGeogebraCommonKernelGeosGeoElement:toAdd];
  }
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Identity();
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoIdentity", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoIdentity = { 2, "AlgoIdentity", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoIdentity;
}

@end

void GeogebraCommonKernelAdvancedAlgoIdentity_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAdvancedAlgoIdentity *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAdvancedAlgoIdentity_set_n_(self, n);
  GeogebraCommonKernelAdvancedAlgoIdentity_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(c));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoIdentity *new_GeogebraCommonKernelAdvancedAlgoIdentity_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> n) {
  GeogebraCommonKernelAdvancedAlgoIdentity *self = [GeogebraCommonKernelAdvancedAlgoIdentity alloc];
  GeogebraCommonKernelAdvancedAlgoIdentity_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, label, n);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoIdentity)
