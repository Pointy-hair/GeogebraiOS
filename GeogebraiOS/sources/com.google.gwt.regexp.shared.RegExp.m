//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/google/gwt/regexp/shared/RegExp.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "com/google/gwt/regexp/shared/SplitResult.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@interface ComGoogleGwtRegexpSharedRegExp () {
 @public
  jboolean globalFlag_;
  jint lastIndex_;
  JavaUtilRegexPattern *pattern_;
  NSString *source_;
}

+ (id<JavaUtilSet>)parseFlagsWithNSString:(NSString *)flags;

- (instancetype)initWithNSString:(NSString *)source
        withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                     withBoolean:(jboolean)globalFlag;

@end

J2OBJC_FIELD_SETTER(ComGoogleGwtRegexpSharedRegExp, pattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(ComGoogleGwtRegexpSharedRegExp, source_, NSString *)

static JavaUtilRegexPattern *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_BACKSLASH_, JavaUtilRegexPattern *)

static NSString *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_FOR_JAVA_ = @"\\\\\\\\";
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_BACKSLASH_FOR_JAVA_, NSString *)

static JavaUtilRegexPattern *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_DOLLAR_AMPERSAND_, JavaUtilRegexPattern *)

static NSString *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_FOR_JAVA_ = @"$1\\$0";
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_DOLLAR_AMPERSAND_FOR_JAVA_, NSString *)

static JavaUtilRegexPattern *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_APOSTROPHE_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_DOLLAR_APOSTROPHE_, JavaUtilRegexPattern *)

static JavaUtilRegexPattern *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_;
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_DOLLAR_DOLLAR_, JavaUtilRegexPattern *)

static NSString *ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_FOR_JAVA_ = @"\\\\\\$";
J2OBJC_STATIC_FIELD_GETTER(ComGoogleGwtRegexpSharedRegExp, REPLACEMENT_DOLLAR_DOLLAR_FOR_JAVA_, NSString *)

__attribute__((unused)) static id<JavaUtilSet> ComGoogleGwtRegexpSharedRegExp_parseFlagsWithNSString_(NSString *flags);

__attribute__((unused)) static void ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(ComGoogleGwtRegexpSharedRegExp *self, NSString *source, JavaUtilRegexPattern *pattern, jboolean globalFlag);

__attribute__((unused)) static ComGoogleGwtRegexpSharedRegExp *new_ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(NSString *source, JavaUtilRegexPattern *pattern, jboolean globalFlag) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(ComGoogleGwtRegexpSharedRegExp)

@implementation ComGoogleGwtRegexpSharedRegExp

+ (ComGoogleGwtRegexpSharedRegExp *)compileWithNSString:(NSString *)pattern {
  return ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(pattern);
}

+ (ComGoogleGwtRegexpSharedRegExp *)compileWithNSString:(NSString *)pattern
                                           withNSString:(NSString *)flags {
  return ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(pattern, flags);
}

+ (NSString *)quoteWithNSString:(NSString *)input {
  return ComGoogleGwtRegexpSharedRegExp_quoteWithNSString_(input);
}

+ (id<JavaUtilSet>)parseFlagsWithNSString:(NSString *)flags {
  return ComGoogleGwtRegexpSharedRegExp_parseFlagsWithNSString_(flags);
}

- (instancetype)initWithNSString:(NSString *)source
        withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                     withBoolean:(jboolean)globalFlag {
  ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(self, source, pattern, globalFlag);
  return self;
}

- (ComGoogleGwtRegexpSharedMatchResult *)execWithNSString:(NSString *)input {
  jint searchStartIndex = (globalFlag_) ? lastIndex_ : 0;
  JavaUtilRegexMatcher *matcher;
  if (input == nil || searchStartIndex < 0 || searchStartIndex > ((jint) [input length])) {
    matcher = nil;
  }
  else {
    matcher = [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input];
    if (![((JavaUtilRegexMatcher *) nil_chk(matcher)) findWithInt:searchStartIndex]) {
      matcher = nil;
    }
  }
  if (matcher != nil) {
    jint groupCount = [matcher groupCount];
    id<JavaUtilList> groups = [new_JavaUtilArrayList_initWithInt_(1 + groupCount) autorelease];
    for (jint group = 0; group <= groupCount; group++) {
      [groups addWithId:[matcher groupWithInt:group]];
    }
    if (globalFlag_) {
      lastIndex_ = [matcher end];
    }
    return [new_ComGoogleGwtRegexpSharedMatchResult_initWithInt_withNSString_withJavaUtilList_([matcher start], input, groups) autorelease];
  }
  else {
    if (globalFlag_) {
      lastIndex_ = 0;
    }
    return nil;
  }
}

- (jboolean)getGlobal {
  return globalFlag_;
}

- (jboolean)getIgnoreCase {
  return ([((JavaUtilRegexPattern *) nil_chk(pattern_)) flags] & JavaUtilRegexPattern_CASE_INSENSITIVE) != 0;
}

- (jint)getLastIndex {
  return lastIndex_;
}

- (jboolean)getMultiline {
  return ([((JavaUtilRegexPattern *) nil_chk(pattern_)) flags] & JavaUtilRegexPattern_MULTILINE) != 0;
}

- (NSString *)getSource {
  return source_;
}

- (NSString *)replaceWithNSString:(NSString *)input
                     withNSString:(NSString *)replacement {
  replacement = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_)) matcherWithJavaLangCharSequence:replacement])) replaceAllWithNSString:ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_FOR_JAVA_];
  replacement = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_)) matcherWithJavaLangCharSequence:replacement])) replaceAllWithNSString:ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_FOR_JAVA_];
  if ([((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_APOSTROPHE_)) matcherWithJavaLangCharSequence:replacement])) find]) {
    @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(@"$` and $' replacements are not supported") autorelease];
  }
  replacement = [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_)) matcherWithJavaLangCharSequence:replacement])) replaceAllWithNSString:ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_FOR_JAVA_];
  return globalFlag_ ? [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input])) replaceAllWithNSString:replacement] : [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:input])) replaceFirstWithNSString:replacement];
}

- (void)setLastIndexWithInt:(jint)lastIndex {
  self->lastIndex_ = lastIndex;
}

- (ComGoogleGwtRegexpSharedSplitResult *)splitWithNSString:(NSString *)input {
  return [self splitWithNSString:input withInt:-1];
}

- (ComGoogleGwtRegexpSharedSplitResult *)splitWithNSString:(NSString *)input
                                                   withInt:(jint)limit {
  IOSObjectArray *result;
  if (((jint) [((NSString *) nil_chk(source_)) length]) == 0) {
    jint resultLength = ((jint) [((NSString *) nil_chk(input)) length]);
    if (resultLength > limit && limit >= 0) {
      resultLength = limit;
    }
    result = [IOSObjectArray arrayWithLength:resultLength type:NSString_class_()];
    for (jint i = 0; i < resultLength; i++) {
      IOSObjectArray_Set(result, i, [input substring:i endIndex:i + 1]);
    }
  }
  else {
    result = [((JavaUtilRegexPattern *) nil_chk(pattern_)) splitWithJavaLangCharSequence:input withInt:limit < 0 ? -1 : (limit + 1)];
    if (((IOSObjectArray *) nil_chk(result))->size_ > limit && limit >= 0) {
      IOSObjectArray *realResult = [IOSObjectArray arrayWithLength:limit type:NSString_class_()];
      for (jint i = 0; i < limit; i++) {
        IOSObjectArray_Set(realResult, i, IOSObjectArray_Get(result, i));
      }
      result = realResult;
    }
  }
  return [new_ComGoogleGwtRegexpSharedSplitResult_initWithNSStringArray_(result) autorelease];
}

- (jboolean)testWithNSString:(NSString *)input {
  return [self execWithNSString:input] != nil;
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(source_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [ComGoogleGwtRegexpSharedRegExp class]) {
    JreStrongAssign(&ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_, nil, JavaUtilRegexPattern_compileWithNSString_(@"\\\\"));
    JreStrongAssign(&ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_, nil, JavaUtilRegexPattern_compileWithNSString_(@"((?:^|\\G|[^$])(?:\\$\\$)*)\\$&"));
    JreStrongAssign(&ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_APOSTROPHE_, nil, JavaUtilRegexPattern_compileWithNSString_(@"(?:^|[^$])(?:\\$\\$)*\\$[`']"));
    JreStrongAssign(&ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_, nil, JavaUtilRegexPattern_compileWithNSString_(@"\\$\\$"));
    J2OBJC_SET_INITIALIZED(ComGoogleGwtRegexpSharedRegExp)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compileWithNSString:", "compile", "Lcom.google.gwt.regexp.shared.RegExp;", 0x9, NULL, NULL },
    { "compileWithNSString:withNSString:", "compile", "Lcom.google.gwt.regexp.shared.RegExp;", 0x9, NULL, NULL },
    { "quoteWithNSString:", "quote", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "parseFlagsWithNSString:", "parseFlags", "Ljava.util.Set;", 0xa, NULL, NULL },
    { "initWithNSString:withJavaUtilRegexPattern:withBoolean:", "RegExp", NULL, 0x2, NULL, NULL },
    { "execWithNSString:", "exec", "Lcom.google.gwt.regexp.shared.MatchResult;", 0x1, NULL, NULL },
    { "getGlobal", NULL, "Z", 0x1, NULL, NULL },
    { "getIgnoreCase", NULL, "Z", 0x1, NULL, NULL },
    { "getLastIndex", NULL, "I", 0x1, NULL, NULL },
    { "getMultiline", NULL, "Z", 0x1, NULL, NULL },
    { "getSource", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "replaceWithNSString:withNSString:", "replace", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLastIndexWithInt:", "setLastIndex", "V", 0x1, NULL, NULL },
    { "splitWithNSString:", "split", "Lcom.google.gwt.regexp.shared.SplitResult;", 0x1, NULL, NULL },
    { "splitWithNSString:withInt:", "split", "Lcom.google.gwt.regexp.shared.SplitResult;", 0x1, NULL, NULL },
    { "testWithNSString:", "test", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "REPLACEMENT_BACKSLASH_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_, NULL,  },
    { "REPLACEMENT_BACKSLASH_FOR_JAVA_", NULL, 0x1a, "Ljava.lang.String;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_BACKSLASH_FOR_JAVA_, NULL,  },
    { "REPLACEMENT_DOLLAR_AMPERSAND_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_, NULL,  },
    { "REPLACEMENT_DOLLAR_AMPERSAND_FOR_JAVA_", NULL, 0x1a, "Ljava.lang.String;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_AMPERSAND_FOR_JAVA_, NULL,  },
    { "REPLACEMENT_DOLLAR_APOSTROPHE_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_APOSTROPHE_, NULL,  },
    { "REPLACEMENT_DOLLAR_DOLLAR_", NULL, 0x1a, "Ljava.util.regex.Pattern;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_, NULL,  },
    { "REPLACEMENT_DOLLAR_DOLLAR_FOR_JAVA_", NULL, 0x1a, "Ljava.lang.String;", &ComGoogleGwtRegexpSharedRegExp_REPLACEMENT_DOLLAR_DOLLAR_FOR_JAVA_, NULL,  },
    { "globalFlag_", NULL, 0x12, "Z", NULL, NULL,  },
    { "lastIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "pattern_", NULL, 0x12, "Ljava.util.regex.Pattern;", NULL, NULL,  },
    { "source_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComGoogleGwtRegexpSharedRegExp = { 2, "RegExp", "com.google.gwt.regexp.shared", NULL, 0x1, 16, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComGoogleGwtRegexpSharedRegExp;
}

@end

ComGoogleGwtRegexpSharedRegExp *ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(NSString *pattern) {
  ComGoogleGwtRegexpSharedRegExp_initialize();
  return ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(pattern, @"");
}

ComGoogleGwtRegexpSharedRegExp *ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(NSString *pattern, NSString *flags) {
  ComGoogleGwtRegexpSharedRegExp_initialize();
  jboolean globalFlag = NO;
  jint javaPatternFlags = JavaUtilRegexPattern_UNIX_LINES;
  for (JavaLangCharacter *boxed__ in nil_chk(ComGoogleGwtRegexpSharedRegExp_parseFlagsWithNSString_(flags))) {
    jchar flag = [((JavaLangCharacter *) nil_chk(boxed__)) charValue];
    switch (flag) {
      case 'g':
      globalFlag = YES;
      break;
      case 'i':
      javaPatternFlags |= JavaUtilRegexPattern_CASE_INSENSITIVE | JavaUtilRegexPattern_UNICODE_CASE;
      break;
      case 'm':
      javaPatternFlags |= JavaUtilRegexPattern_MULTILINE;
      break;
      default:
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$CC", @"Unknown regexp flag: '", flag, '\'')) autorelease];
    }
  }
  JavaUtilRegexPattern *javaPattern = JavaUtilRegexPattern_compileWithNSString_withInt_(pattern, javaPatternFlags);
  return [new_ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(pattern, javaPattern, globalFlag) autorelease];
}

NSString *ComGoogleGwtRegexpSharedRegExp_quoteWithNSString_(NSString *input) {
  ComGoogleGwtRegexpSharedRegExp_initialize();
  return JavaUtilRegexPattern_quoteWithNSString_(input);
}

id<JavaUtilSet> ComGoogleGwtRegexpSharedRegExp_parseFlagsWithNSString_(NSString *flags) {
  ComGoogleGwtRegexpSharedRegExp_initialize();
  id<JavaUtilSet> flagsSet = [new_JavaUtilHashSet_initWithInt_(((jint) [((NSString *) nil_chk(flags)) length])) autorelease];
  for (jint flagIndex = 0; flagIndex < ((jint) [flags length]); flagIndex++) {
    jchar flag = [flags charAtWithInt:flagIndex];
    if (![flagsSet addWithId:JavaLangCharacter_valueOfWithChar_(flag)]) {
      @throw [new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$CC", @"Flag cannot be specified twice: '", flag, '\'')) autorelease];
    }
  }
  return flagsSet;
}

void ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(ComGoogleGwtRegexpSharedRegExp *self, NSString *source, JavaUtilRegexPattern *pattern, jboolean globalFlag) {
  NSObject_init(self);
  ComGoogleGwtRegexpSharedRegExp_set_source_(self, source);
  ComGoogleGwtRegexpSharedRegExp_set_pattern_(self, pattern);
  self->globalFlag_ = globalFlag;
  self->lastIndex_ = 0;
}

ComGoogleGwtRegexpSharedRegExp *new_ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(NSString *source, JavaUtilRegexPattern *pattern, jboolean globalFlag) {
  ComGoogleGwtRegexpSharedRegExp *self = [ComGoogleGwtRegexpSharedRegExp alloc];
  ComGoogleGwtRegexpSharedRegExp_initWithNSString_withJavaUtilRegexPattern_withBoolean_(self, source, pattern, globalFlag);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComGoogleGwtRegexpSharedRegExp)
