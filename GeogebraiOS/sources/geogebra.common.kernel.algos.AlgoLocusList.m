//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoLocusList.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLocus.h"
#include "geogebra/common/kernel/algos/AlgoLocusList.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelAlgosAlgoLocusList () {
 @public
  GeogebraCommonKernelGeosGeoPoint *movingPoint_, *locusPoint_;
  GeogebraCommonKernelGeosGeoLocus *locus_;
  IOSObjectArray *efficientInput_AlgoLocusList_, *standardInput_;
  id<GeogebraCommonKernelPath> path_;
  jboolean foundDefined_;
  JavaUtilTreeSet *Qin_;
  jboolean shouldUpdateScreenBorders_;
}

- (void)fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P;

+ (jboolean)isPathIterableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement;

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, movingPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, locusPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, efficientInput_AlgoLocusList_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, path_, id<GeogebraCommonKernelPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoLocusList, Qin_, JavaUtilTreeSet *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusList *self, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusList_compute(GeogebraCommonKernelAlgosAlgoLocusList *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geoElement);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusList *self, jdouble x, jdouble y, jboolean lineTo);

jint GeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_ = 16;

@implementation GeogebraCommonKernelAlgosAlgoLocusList

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                                                 withInt:(jint)try_steps {
  GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(self, cons, Q, P, try_steps);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, Q, P);
  return self;
}

- (void)fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, Q, P);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Locus();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_LOCUS;
}

- (JavaUtilArrayList *)getMoveableInputPoints {
  return nil;
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return locusPoint_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getLocusPoint {
  return locusPoint_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getMovingPoint {
  return movingPoint_;
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  [inSet addWithId:[((id<GeogebraCommonKernelPath>) nil_chk(path_)) toGeoElement]];
  GeogebraCommonKernelAlgosAlgoLocusList_set_Qin_(self, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(locusPoint_)) getAllPredecessors]);
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(Qin_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  [inSet removeWithId:movingPoint_];
  GeogebraCommonKernelAlgosAlgoLocusList_setAndConsume_efficientInput_AlgoLocusList_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  it = [inSet iterator];
  jint i = 0;
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    IOSObjectArray_Set(efficientInput_AlgoLocusList_, i, [it next]);
    i++;
  }
  GeogebraCommonKernelAlgosAlgoLocusList_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, locusPoint_);
  IOSObjectArray_Set(standardInput_, 1, movingPoint_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:locus_];
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:standardInput_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusList_];
}

- (GeogebraCommonKernelGeosGeoLocus *)getLocus {
  return locus_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoLocusList_compute(self);
}

+ (jboolean)isPathIterableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoElement {
  return GeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(geoElement);
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                  withBoolean:(jboolean)lineTo {
  GeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (jboolean)euclidianViewUpdate {
  [self updateScreenBorders];
  [self update];
  return NO;
}

- (void)updateScreenBorders {
  shouldUpdateScreenBorders_ = YES;
}

- (void)dealloc {
  RELEASE_(arrLocus_);
  RELEASE_(movingPoint_);
  RELEASE_(locusPoint_);
  RELEASE_(locus_);
  RELEASE_(efficientInput_AlgoLocusList_);
  RELEASE_(standardInput_);
  RELEASE_(path_);
  RELEASE_(Qin_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withInt:", "AlgoLocusList", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusList", NULL, 0x1, NULL, NULL },
    { "fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "fillLocusArray", "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getMoveableInputPoints", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLocusPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getMovingPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getLocus", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isPathIterableWithGeogebraCommonKernelGeosGeoElement:", "isPathIterable", "Z", 0xa, NULL, NULL },
    { "insertPointWithDouble:withDouble:withBoolean:", "insertPoint", "V", 0x2, NULL, NULL },
    { "euclidianViewUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "updateScreenBorders", NULL, "V", 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MIN_STEPS_REALLY_", NULL, 0x9, "I", &GeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_, NULL,  },
    { "arrLocus_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/AlgoElement;>;",  },
    { "movingPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "efficientInput_AlgoLocusList_", "efficientInput", 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "path_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "foundDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "Qin_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "shouldUpdateScreenBorders_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoLocusList = { 2, "AlgoLocusList", "geogebra.common.kernel.algos", NULL, 0x1, 16, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoLocusList;
}

@end

void GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(GeogebraCommonKernelAlgosAlgoLocusList *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P, jint try_steps) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->shouldUpdateScreenBorders_ = NO;
  GeogebraCommonKernelAlgosAlgoLocusList_set_movingPoint_(self, P);
  GeogebraCommonKernelAlgosAlgoLocusList_set_locusPoint_(self, Q);
  GeogebraCommonKernelAlgosAlgoLocusList_set_path_(self, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath]);
  GeogebraCommonKernelAlgosAlgoLocusList_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoLocusList_compute(self);
  [((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
}

GeogebraCommonKernelAlgosAlgoLocusList *new_GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P, jint try_steps) {
  GeogebraCommonKernelAlgosAlgoLocusList *self = [GeogebraCommonKernelAlgosAlgoLocusList alloc];
  GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(self, cons, Q, P, try_steps);
  return self;
}

void GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusList *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->shouldUpdateScreenBorders_ = NO;
  GeogebraCommonKernelAlgosAlgoLocusList_set_movingPoint_(self, P);
  GeogebraCommonKernelAlgosAlgoLocusList_set_locusPoint_(self, Q);
  GeogebraCommonKernelAlgosAlgoLocusList_set_path_(self, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath]);
  GeogebraCommonKernelAlgosAlgoLocusList_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  [self updateScreenBorders];
  [self setInputOutput];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  GeogebraCommonKernelAlgosAlgoLocusList_compute(self);
  [((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
  [self->locus_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoLocusList *new_GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoLocusList *self = [GeogebraCommonKernelAlgosAlgoLocusList alloc];
  GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, Q, P);
  return self;
}

void GeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoLocusList *self, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPoint *P) {
  if (self->arrLocus_ == nil) GeogebraCommonKernelAlgosAlgoLocusList_setAndConsume_arrLocus_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelGeosGeoElement *actel, *pathp;
  GeogebraCommonKernelAlgosAlgoElement *actal;
  id<GeogebraCommonKernelPath> oldel;
  @try {
    jint try_steps = GeogebraCommonKernelPathMover_MIN_STEPS / [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [GeogebraCommonKernelGeosGeoList class])))) size] + 1;
    if (try_steps < GeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_) {
      try_steps = GeogebraCommonKernelAlgosAlgoLocusList_MIN_STEPS_REALLY_;
    }
    jint arrLocusSize = [((JavaUtilArrayList *) nil_chk(self->arrLocus_)) size];
    for (jint i = arrLocusSize - 1; i >= [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [GeogebraCommonKernelGeosGeoList class])))) size]; i--) {
      [self->arrLocus_ removeWithInt:i];
    }
    arrLocusSize = [self->arrLocus_ size];
    for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [GeogebraCommonKernelGeosGeoList class])))) size]; i++) {
      actel = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(self->path_, [GeogebraCommonKernelGeosGeoList class])))) getWithInt:i];
      if (actel != nil && [GeogebraCommonKernelPath_class_() isInstance:actel]) {
        if (i < arrLocusSize) {
          if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocusList class]]) {
            oldel = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([((GeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast([self->arrLocus_ getWithInt:i], [GeogebraCommonKernelAlgosAlgoLocusList class])))) getMovingPoint])) getPath];
          }
          else if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocus class]]) {
            oldel = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((GeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast([self->arrLocus_ getWithInt:i], [GeogebraCommonKernelAlgosAlgoLocus class])))) getMovingPoint])) getPath];
          }
          else {
            oldel = nil;
          }
          if (oldel == actel) {
            if (self->shouldUpdateScreenBorders_) {
              if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocus class]]) {
                [((GeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast([self->arrLocus_ getWithInt:i], [GeogebraCommonKernelAlgosAlgoLocus class])))) updateScreenBorders];
              }
              else if ([[self->arrLocus_ getWithInt:i] isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocusList class]]) {
                [((GeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast([self->arrLocus_ getWithInt:i], [GeogebraCommonKernelAlgosAlgoLocusList class])))) updateScreenBorders];
              }
            }
            [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->arrLocus_ getWithInt:i])) compute];
            continue;
          }
        }
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) setPathWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>) check_protocol_cast(actel, @protocol(GeogebraCommonKernelPath))];
        if ([actel isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) {
          if ([((GeogebraCommonKernelGeosGeoList *) check_class_cast(actel, [GeogebraCommonKernelGeosGeoList class])) shouldUseAlgoLocusListWithBoolean:YES]) {
            actal = [new_GeogebraCommonKernelAlgosAlgoLocusList_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(self->cons_, Q, P, try_steps) autorelease];
            pathp = [((GeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast(actal, [GeogebraCommonKernelAlgosAlgoLocusList class])) getLocus];
          }
          else {
            actal = [new_GeogebraCommonKernelAlgosAlgoLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self->cons_, Q, P, try_steps, NO) autorelease];
            pathp = [((GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actal, [GeogebraCommonKernelAlgosAlgoLocus class])) getLocus];
          }
        }
        else {
          actal = [new_GeogebraCommonKernelAlgosAlgoLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_withBoolean_(self->cons_, Q, P, try_steps, NO) autorelease];
          pathp = [((GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actal, [GeogebraCommonKernelAlgosAlgoLocus class])) getLocus];
        }
        [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:actal];
        [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:actal];
        [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pathp];
        [P setPathWithGeogebraCommonKernelPath:self->path_];
        if (i < arrLocusSize) [self->arrLocus_ setWithInt:i withId:actal];
        else [self->arrLocus_ addWithId:actal];
      }
      else {
        if (i < arrLocusSize) [self->arrLocus_ setWithInt:i withId:nil];
        else [self->arrLocus_ addWithId:nil];
      }
    }
  }
  @catch (JavaLangException *ex) {
    GeogebraCommonMainApp_errorWithNSString_([((JavaLangException *) nil_chk(ex)) getMessage]);
  }
}

void GeogebraCommonKernelAlgosAlgoLocusList_compute(GeogebraCommonKernelAlgosAlgoLocusList *self) {
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->movingPoint_)) isDefined] || !GeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithGeogebraCommonKernelGeosGeoElement_([((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) toGeoElement])) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  GeogebraCommonKernelAlgosAlgoLocusList_fillLocusArrayWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, self->locusPoint_, self->movingPoint_);
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) clearPoints];
  self->foundDefined_ = NO;
  GeogebraCommonKernelAlgosAlgoElement *actLocus;
  GeogebraCommonKernelGeosGeoLocus *actGeo;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(self->arrLocus_)) size]; i++) {
    actLocus = [self->arrLocus_ getWithInt:i];
    if ([actLocus isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocusList class]]) actGeo = [((GeogebraCommonKernelAlgosAlgoLocusList *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocusList *) check_class_cast(actLocus, [GeogebraCommonKernelAlgosAlgoLocusList class])))) getLocus];
    else if ([actLocus isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocus class]]) actGeo = (GeogebraCommonKernelGeosGeoLocus *) check_class_cast([((GeogebraCommonKernelAlgosAlgoLocus *) nil_chk(((GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast(actLocus, [GeogebraCommonKernelAlgosAlgoLocus class])))) getLocus], [GeogebraCommonKernelGeosGeoLocus class]);
    else continue;
    for (jint j = 0; j < [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(actGeo)) getPointLength]; j++) {
      GeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(self, ((GeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->x_, ((GeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->y_, (j == 0) ? NO : ((GeogebraCommonKernelMyPoint *) nil_chk([((JavaUtilArrayList *) nil_chk([actGeo getPoints])) getWithInt:j]))->lineTo_);
    }
    if ([actGeo getPointLength] > 0) self->foundDefined_ = YES;
  }
  [self->locus_ setDefinedWithBoolean:self->foundDefined_];
  self->shouldUpdateScreenBorders_ = NO;
}

jboolean GeogebraCommonKernelAlgosAlgoLocusList_isPathIterableWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geoElement) {
  GeogebraCommonKernelAlgosAlgoLocusList_initialize();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement)) isGeoImplicitPoly]) return [((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(geoElement, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) isOnScreen];
  return [geoElement isDefined];
}

void GeogebraCommonKernelAlgosAlgoLocusList_insertPointWithDouble_withDouble_withBoolean_(GeogebraCommonKernelAlgosAlgoLocusList *self, jdouble x, jdouble y, jboolean lineTo) {
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) insertPointWithDouble:x withDouble:y withBoolean:lineTo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoLocusList)
