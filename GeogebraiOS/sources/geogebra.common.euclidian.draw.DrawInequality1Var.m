//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawInequality1Var.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GEllipse2DDouble.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawInequality1Var.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/arithmetic/Inequality.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"

@interface GeogebraCommonEuclidianDrawDrawInequality1Var () {
 @public
  GeogebraCommonKernelArithmeticInequality *ineq_;
  IOSObjectArray *gp_;
  IOSObjectArray *circle_;
  jboolean varIsY_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality1Var, ineq_, GeogebraCommonKernelArithmeticInequality *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality1Var, gp_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawInequality1Var, circle_, IOSObjectArray *)

@implementation GeogebraCommonEuclidianDrawDrawInequality1Var

- (instancetype)initWithGeogebraCommonKernelArithmeticInequality:(GeogebraCommonKernelArithmeticInequality *)ineq
                        withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                          withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withBoolean:(jboolean)varIsY {
  GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, ineq, view, geo, varIsY);
  return self;
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (gp_ == nil) return;
  jint i = 0;
  while (i < ((IOSObjectArray *) nil_chk(gp_))->size_ && IOSObjectArray_Get(gp_, i) != nil) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gp_, i)];
    }
    if (geo_->lineThickness_ > 0) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(geo_->lineThickness_ / 2.0f, ((GeogebraCommonKernelGeosGeoElement *) nil_chk(([((GeogebraCommonKernelArithmeticInequality *) nil_chk(ineq_)) getFunBorder])))->lineType_)];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gp_, i)];
    }
    i++;
  }
  if (circle_ == nil) return;
  while (i < ((IOSObjectArray *) nil_chk(circle_))->size_ && IOSObjectArray_Get(circle_, i) != nil) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:IOSObjectArray_Get(circle_, i)];
    }
    if (geo_->lineThickness_ > 0) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(geo_->lineThickness_ / 2.0f, GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL)];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:IOSObjectArray_Get(circle_, i)];
      if (![((GeogebraCommonKernelArithmeticInequality *) nil_chk(ineq_)) isStrict]) {
        [g2 fillWithGeogebraCommonAwtGShape:IOSObjectArray_Get(circle_, i)];
      }
    }
    i++;
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(gp_))->size_; i++) if (IOSObjectArray_Get(gp_, i) != nil && [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) containsWithInt:x withInt:y]) return YES;
  return NO;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)update {
  if (varIsY_) {
    IOSObjectArray *roots = [((GeogebraCommonKernelArithmeticInequality *) nil_chk(ineq_)) getZeros];
    IOSDoubleArray *x = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(roots))->size_ + 2];
    *IOSDoubleArray_GetRef(x, 0) = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getHeight] + 10;
    jint numOfX = 1;
    for (jint i = 0; i < roots->size_; i++) if (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_ < [view_ toRealWorldCoordYWithDouble:-10] && ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_ > [view_ toRealWorldCoordYWithDouble:[view_ getHeight] + 10]) *IOSDoubleArray_GetRef(x, numOfX++) = [view_ toScreenCoordYWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_];
    *IOSDoubleArray_GetRef(x, numOfX++) = -10;
    if (numOfX > 2 && IOSDoubleArray_Get(x, numOfX - 2) > 0 && IOSDoubleArray_Get(x, numOfX - 2) < [view_ getHeight]) yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(x, numOfX - 2)) - 5;
    else yLabel_ = 10;
    xLabel_ = J2ObjCFpToInt([view_ getxZero]) + 6;
    if (gp_ == nil) GeogebraCommonEuclidianDrawDrawInequality1Var_setAndConsume_gp_(self, [IOSObjectArray newArrayWithLength:numOfX / 2 type:GeogebraCommonEuclidianGeneralPathClipped_class_()]);
    jint j = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([ineq_ getFunBorder])) evaluateWithDouble:[view_ toRealWorldCoordYWithDouble:[view_ getHeight] + 10]] <= 0 ? 1 : 0;
    id<GeogebraCommonAwtGArea> a = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArea];
    for (jint i = 0; 2 * i + j + 1 < numOfX; i++) {
      IOSObjectArray_SetAndConsume(nil_chk(gp_), i, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) moveToWithDouble:-10 withDouble:IOSDoubleArray_Get(x, 2 * i + j)];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:[view_ getWidth] + 10 withDouble:IOSDoubleArray_Get(x, 2 * i + j)];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:[view_ getWidth] + 10 withDouble:IOSDoubleArray_Get(x, 2 * i + j + 1)];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:-10 withDouble:IOSDoubleArray_Get(x, 2 * i + j + 1)];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:-10 withDouble:IOSDoubleArray_Get(x, 2 * i + j)];
      [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) closePath];
      [((id<GeogebraCommonAwtGArea>) nil_chk(a)) addWithGeogebraCommonAwtGArea:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gp_, i)]];
    }
    [self setShapeWithGeogebraCommonAwtGArea:a];
  }
  else {
    IOSObjectArray *roots = [((GeogebraCommonKernelArithmeticInequality *) nil_chk(ineq_)) getZeros];
    IOSDoubleArray *x = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(roots))->size_ + 2];
    *IOSDoubleArray_GetRef(x, 0) = -10;
    jint numOfX = 1;
    for (jint i = 0; i < roots->size_; i++) if (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_ > [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:-10] && ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_ < [view_ toRealWorldCoordXWithDouble:[view_ getWidth] + 10]) *IOSDoubleArray_GetRef(x, numOfX++) = [view_ toScreenCoordXWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(roots, i)))->x_];
    *IOSDoubleArray_GetRef(x, numOfX++) = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] + 10;
    if (numOfX > 2 && IOSDoubleArray_Get(x, numOfX - 2) > 0 && IOSDoubleArray_Get(x, numOfX - 2) < [view_ getHeight]) xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(x, numOfX - 2)) - 10;
    else xLabel_ = 10;
    yLabel_ = J2ObjCFpToInt([view_ getyZero]) + 15;
    if (gp_ == nil) GeogebraCommonEuclidianDrawDrawInequality1Var_setAndConsume_gp_(self, [IOSObjectArray newArrayWithLength:numOfX / 2 type:GeogebraCommonEuclidianGeneralPathClipped_class_()]);
    id<GeogebraCommonAwtGArea> a = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArea];
    jint circleCount = 0;
    if (([geo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) && [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoFunction class])))) showOnAxis]) {
      GeogebraCommonEuclidianDrawDrawInequality1Var_setAndConsume_circle_(self, [IOSObjectArray newArrayWithLength:numOfX type:GeogebraCommonAwtGEllipse2DDouble_class_()]);
      for (jint i = 0; i < numOfX; i++) {
        if (IOSDoubleArray_Get(x, i) < 0) continue;
        if (IOSDoubleArray_Get(x, i) > [view_ getWidth]) break;
        IOSObjectArray_Set(circle_, circleCount, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble]);
        jdouble radius = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLineThickness] * GeogebraCommonEuclidianDrawDrawInequality1Var_DOT_RADIUS;
        [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(IOSObjectArray_Get(circle_, circleCount))) setFrameWithDouble:IOSDoubleArray_Get(x, i) - radius withDouble:[view_ toScreenCoordYWithDouble:0] - radius withDouble:2 * radius withDouble:2 * radius];
        circleCount++;
      }
    }
    else {
      jint j = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([ineq_ getFunBorder])) evaluateWithDouble:[view_ toRealWorldCoordXWithDouble:-10]] <= 0 ? 1 : 0;
      for (jint i = 0; 2 * i + j + 1 < numOfX; i++) {
        IOSObjectArray_SetAndConsume(nil_chk(gp_), i, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) moveToWithDouble:IOSDoubleArray_Get(x, 2 * i + j) withDouble:-10];
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:IOSDoubleArray_Get(x, 2 * i + j) withDouble:[view_ getHeight] + 10];
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:IOSDoubleArray_Get(x, 2 * i + j + 1) withDouble:[view_ getHeight] + 10];
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:IOSDoubleArray_Get(x, 2 * i + j + 1) withDouble:-10];
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) lineToWithDouble:IOSDoubleArray_Get(x, 2 * i + j) withDouble:-10];
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(IOSObjectArray_Get(gp_, i))) closePath];
        [((id<GeogebraCommonAwtGArea>) nil_chk(a)) addWithGeogebraCommonAwtGArea:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:IOSObjectArray_Get(gp_, i)]];
      }
    }
    [self setShapeWithGeogebraCommonAwtGArea:a];
  }
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:geo_];
}

- (void)dealloc {
  RELEASE_(ineq_);
  RELEASE_(gp_);
  RELEASE_(circle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelArithmeticInequality:withGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "DrawInequality1Var", NULL, 0x1, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DOT_RADIUS_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianDrawDrawInequality1Var_DOT_RADIUS },
    { "ineq_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Inequality;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "[Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "circle_", NULL, 0x2, "[Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "varIsY_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawInequality1Var = { 2, "DrawInequality1Var", "geogebra.common.euclidian.draw", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawInequality1Var;
}

@end

void GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonEuclidianDrawDrawInequality1Var *self, GeogebraCommonKernelArithmeticInequality *ineq, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo, jboolean varIsY) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawInequality1Var_set_ineq_(self, ineq);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  self->varIsY_ = varIsY;
}

GeogebraCommonEuclidianDrawDrawInequality1Var *new_GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelArithmeticInequality *ineq, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoElement *geo, jboolean varIsY) {
  GeogebraCommonEuclidianDrawDrawInequality1Var *self = [GeogebraCommonEuclidianDrawDrawInequality1Var alloc];
  GeogebraCommonEuclidianDrawDrawInequality1Var_initWithGeogebraCommonKernelArithmeticInequality_withGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, ineq, view, geo, varIsY);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawInequality1Var)
