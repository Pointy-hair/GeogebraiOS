//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/ode/sampling/AbstractStepInterpolator.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/lang/Double.h"
#include "java/lang/Throwable.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/sampling/AbstractStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepInterpolator.h"

@interface OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator () {
 @public
  jdouble globalPreviousTime_;
  jdouble globalCurrentTime_;
  jdouble softPreviousTime_;
  jdouble softCurrentTime_;
  jboolean finalized_;
  jboolean forward_;
  jboolean dirtyState_;
}

@end

__attribute__((unused)) static void OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_finalizeStep(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *self);

@implementation OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator

- (instancetype)init {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_init(self);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)y
                        withBoolean:(jboolean)forward {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_initWithDoubleArray_withBoolean_(self, y, forward);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *)interpolator {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_(self, interpolator);
  return self;
}

- (void)reinitializeWithDoubleArray:(IOSDoubleArray *)y
                        withBoolean:(jboolean)isForward {
  globalPreviousTime_ = JavaLangDouble_NaN;
  globalCurrentTime_ = JavaLangDouble_NaN;
  softPreviousTime_ = JavaLangDouble_NaN;
  softCurrentTime_ = JavaLangDouble_NaN;
  h_ = JavaLangDouble_NaN;
  interpolatedTime_ = JavaLangDouble_NaN;
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, y);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_setAndConsume_interpolatedState_(self, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(y))->size_]);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_setAndConsume_interpolatedDerivatives_(self, [IOSDoubleArray newArrayWithLength:y->size_]);
  finalized_ = NO;
  self->forward_ = isForward;
  self->dirtyState_ = YES;
}

- (id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)copy__ {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_finalizeStep(self);
  return [self doCopy];
}

- (id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)doCopy {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)shift {
  globalPreviousTime_ = globalCurrentTime_;
  softPreviousTime_ = globalPreviousTime_;
  softCurrentTime_ = globalCurrentTime_;
}

- (void)storeTimeWithDouble:(jdouble)t {
  globalCurrentTime_ = t;
  softCurrentTime_ = globalCurrentTime_;
  h_ = globalCurrentTime_ - globalPreviousTime_;
  [self setInterpolatedTimeWithDouble:t];
  finalized_ = NO;
}

- (void)setSoftPreviousTimeWithDouble:(jdouble)softPreviousTime {
  self->softPreviousTime_ = softPreviousTime;
}

- (void)setSoftCurrentTimeWithDouble:(jdouble)softCurrentTime {
  self->softCurrentTime_ = softCurrentTime;
}

- (jdouble)getGlobalPreviousTime {
  return globalPreviousTime_;
}

- (jdouble)getGlobalCurrentTime {
  return globalCurrentTime_;
}

- (jdouble)getPreviousTime {
  return softPreviousTime_;
}

- (jdouble)getCurrentTime {
  return softCurrentTime_;
}

- (jdouble)getInterpolatedTime {
  return interpolatedTime_;
}

- (void)setInterpolatedTimeWithDouble:(jdouble)time {
  interpolatedTime_ = time;
  dirtyState_ = YES;
}

- (jboolean)isForward {
  return forward_;
}

- (void)computeInterpolatedStateAndDerivativesWithDouble:(jdouble)theta
                                              withDouble:(jdouble)oneMinusThetaH {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSDoubleArray *)getInterpolatedState {
  if (dirtyState_) {
    jdouble oneMinusThetaH = globalCurrentTime_ - interpolatedTime_;
    jdouble theta = (h_ == 0) ? 0 : (h_ - oneMinusThetaH) / h_;
    [self computeInterpolatedStateAndDerivativesWithDouble:theta withDouble:oneMinusThetaH];
    dirtyState_ = NO;
  }
  return interpolatedState_;
}

- (IOSDoubleArray *)getInterpolatedDerivatives {
  if (dirtyState_) {
    jdouble oneMinusThetaH = globalCurrentTime_ - interpolatedTime_;
    jdouble theta = (h_ == 0) ? 0 : (h_ - oneMinusThetaH) / h_;
    [self computeInterpolatedStateAndDerivativesWithDouble:theta withDouble:oneMinusThetaH];
    dirtyState_ = NO;
  }
  return interpolatedDerivatives_;
}

- (void)finalizeStep {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_finalizeStep(self);
}

- (void)doFinalize {
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)writeBaseExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  if (currentState_ == nil) {
    [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeIntWithInt:-1];
  }
  else {
    [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeIntWithInt:currentState_->size_];
  }
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeDoubleWithDouble:globalPreviousTime_];
  [outArg writeDoubleWithDouble:globalCurrentTime_];
  [outArg writeDoubleWithDouble:softPreviousTime_];
  [outArg writeDoubleWithDouble:softCurrentTime_];
  [outArg writeDoubleWithDouble:h_];
  [outArg writeBooleanWithBoolean:forward_];
  if (currentState_ != nil) {
    for (jint i = 0; i < currentState_->size_; ++i) {
      [outArg writeDoubleWithDouble:IOSDoubleArray_Get(currentState_, i)];
    }
  }
  [outArg writeDoubleWithDouble:interpolatedTime_];
  @try {
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_finalizeStep(self);
  }
  @catch (OrgApacheCommonsMathOdeDerivativeException *e) {
    JavaIoIOException *ioe = [new_JavaIoIOException_initWithNSString_([((OrgApacheCommonsMathOdeDerivativeException *) nil_chk(e)) getLocalizedMessage]) autorelease];
    [ioe initCauseWithJavaLangThrowable:e];
    @throw ioe;
  }
}

- (jdouble)readBaseExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  jint dimension = [((id<JavaIoObjectInput>) nil_chk(inArg)) readInt];
  globalPreviousTime_ = [inArg readDouble];
  globalCurrentTime_ = [inArg readDouble];
  softPreviousTime_ = [inArg readDouble];
  softCurrentTime_ = [inArg readDouble];
  h_ = [inArg readDouble];
  forward_ = [inArg readBoolean];
  dirtyState_ = YES;
  if (dimension < 0) {
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, nil);
  }
  else {
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_setAndConsume_currentState_(self, [IOSDoubleArray newArrayWithLength:dimension]);
    for (jint i = 0; i < currentState_->size_; ++i) {
      *IOSDoubleArray_GetRef(currentState_, i) = [inArg readDouble];
    }
  }
  interpolatedTime_ = JavaLangDouble_NaN;
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedState_(self, (dimension < 0) ? nil : [IOSDoubleArray arrayWithLength:dimension]);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedDerivatives_(self, (dimension < 0) ? nil : [IOSDoubleArray arrayWithLength:dimension]);
  finalized_ = YES;
  return [inArg readDouble];
}

- (void)dealloc {
  RELEASE_(currentState_);
  RELEASE_(interpolatedState_);
  RELEASE_(interpolatedDerivatives_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractStepInterpolator", NULL, 0x4, NULL, NULL },
    { "initWithDoubleArray:withBoolean:", "AbstractStepInterpolator", NULL, 0x4, NULL, NULL },
    { "initWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:", "AbstractStepInterpolator", NULL, 0x4, NULL, NULL },
    { "reinitializeWithDoubleArray:withBoolean:", "reinitialize", "V", 0x4, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.ode.sampling.StepInterpolator;", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "doCopy", NULL, "Lorg.apache.commons.math.ode.sampling.StepInterpolator;", 0x404, NULL, NULL },
    { "shift", NULL, "V", 0x1, NULL, NULL },
    { "storeTimeWithDouble:", "storeTime", "V", 0x1, NULL, NULL },
    { "setSoftPreviousTimeWithDouble:", "setSoftPreviousTime", "V", 0x1, NULL, NULL },
    { "setSoftCurrentTimeWithDouble:", "setSoftCurrentTime", "V", 0x1, NULL, NULL },
    { "getGlobalPreviousTime", NULL, "D", 0x1, NULL, NULL },
    { "getGlobalCurrentTime", NULL, "D", 0x1, NULL, NULL },
    { "getPreviousTime", NULL, "D", 0x1, NULL, NULL },
    { "getCurrentTime", NULL, "D", 0x1, NULL, NULL },
    { "getInterpolatedTime", NULL, "D", 0x1, NULL, NULL },
    { "setInterpolatedTimeWithDouble:", "setInterpolatedTime", "V", 0x1, NULL, NULL },
    { "isForward", NULL, "Z", 0x1, NULL, NULL },
    { "computeInterpolatedStateAndDerivativesWithDouble:withDouble:", "computeInterpolatedStateAndDerivatives", "V", 0x404, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "getInterpolatedState", NULL, "[D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "getInterpolatedDerivatives", NULL, "[D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "finalizeStep", NULL, "V", 0x11, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "doFinalize", NULL, "V", 0x4, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x401, "Ljava.io.IOException;", NULL },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x401, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
    { "writeBaseExternalWithJavaIoObjectOutput:", "writeBaseExternal", "V", 0x4, "Ljava.io.IOException;", NULL },
    { "readBaseExternalWithJavaIoObjectInput:", "readBaseExternal", "D", 0x4, "Ljava.io.IOException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "h_", NULL, 0x4, "D", NULL, NULL,  },
    { "currentState_", NULL, 0x4, "[D", NULL, NULL,  },
    { "interpolatedTime_", NULL, 0x4, "D", NULL, NULL,  },
    { "interpolatedState_", NULL, 0x4, "[D", NULL, NULL,  },
    { "interpolatedDerivatives_", NULL, 0x4, "[D", NULL, NULL,  },
    { "globalPreviousTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "globalCurrentTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "softPreviousTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "softCurrentTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "finalized_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forward_", NULL, 0x2, "Z", NULL, NULL,  },
    { "dirtyState_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator = { 2, "AbstractStepInterpolator", "org.apache.commons.math.ode.sampling", NULL, 0x401, 26, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator;
}

@end

void OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_init(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *self) {
  NSObject_init(self);
  self->globalPreviousTime_ = JavaLangDouble_NaN;
  self->globalCurrentTime_ = JavaLangDouble_NaN;
  self->softPreviousTime_ = JavaLangDouble_NaN;
  self->softCurrentTime_ = JavaLangDouble_NaN;
  self->h_ = JavaLangDouble_NaN;
  self->interpolatedTime_ = JavaLangDouble_NaN;
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, nil);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedState_(self, nil);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedDerivatives_(self, nil);
  self->finalized_ = NO;
  self->forward_ = YES;
  self->dirtyState_ = YES;
}

void OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_initWithDoubleArray_withBoolean_(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *self, IOSDoubleArray *y, jboolean forward) {
  NSObject_init(self);
  self->globalPreviousTime_ = JavaLangDouble_NaN;
  self->globalCurrentTime_ = JavaLangDouble_NaN;
  self->softPreviousTime_ = JavaLangDouble_NaN;
  self->softCurrentTime_ = JavaLangDouble_NaN;
  self->h_ = JavaLangDouble_NaN;
  self->interpolatedTime_ = JavaLangDouble_NaN;
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, y);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_setAndConsume_interpolatedState_(self, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(y))->size_]);
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_setAndConsume_interpolatedDerivatives_(self, [IOSDoubleArray newArrayWithLength:y->size_]);
  self->finalized_ = NO;
  self->forward_ = forward;
  self->dirtyState_ = YES;
}

void OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *self, OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *interpolator) {
  NSObject_init(self);
  self->globalPreviousTime_ = ((OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *) nil_chk(interpolator))->globalPreviousTime_;
  self->globalCurrentTime_ = interpolator->globalCurrentTime_;
  self->softPreviousTime_ = interpolator->softPreviousTime_;
  self->softCurrentTime_ = interpolator->softCurrentTime_;
  self->h_ = interpolator->h_;
  self->interpolatedTime_ = interpolator->interpolatedTime_;
  if (interpolator->currentState_ != nil) {
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, [interpolator->currentState_ clone]);
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedState_(self, [((IOSDoubleArray *) nil_chk(interpolator->interpolatedState_)) clone]);
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedDerivatives_(self, [((IOSDoubleArray *) nil_chk(interpolator->interpolatedDerivatives_)) clone]);
  }
  else {
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_currentState_(self, nil);
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedState_(self, nil);
    OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_set_interpolatedDerivatives_(self, nil);
  }
  self->finalized_ = interpolator->finalized_;
  self->forward_ = interpolator->forward_;
  self->dirtyState_ = interpolator->dirtyState_;
}

void OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_finalizeStep(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *self) {
  if (!self->finalized_) {
    [self doFinalize];
    self->finalized_ = YES;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator)
