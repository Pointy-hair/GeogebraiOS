//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoApplyMatrix.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MatrixTransformable.h"
#include "geogebra/common/kernel/advanced/AlgoApplyMatrix.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"

@interface GeogebraCommonKernelAdvancedAlgoApplyMatrix () {
 @public
  id<GeogebraCommonKernelMatrixTransformable> out_;
  GeogebraCommonKernelGeosGeoElement *inGeo_, *outGeo_;
  GeogebraCommonKernelGeosGeoList *matrix_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoApplyMatrix, out_, id<GeogebraCommonKernelMatrixTransformable>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoApplyMatrix, inGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoApplyMatrix, outGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoApplyMatrix, matrix_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(GeogebraCommonKernelAdvancedAlgoApplyMatrix *self);

@implementation GeogebraCommonKernelAdvancedAlgoApplyMatrix

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)matrix {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inArg, matrix);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)matrix {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ApplyMatrix();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 1, inGeo_);
  IOSObjectArray_Set(input_, 0, matrix_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(self);
}

- (void)setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g2 {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_inGeo_(self, g);
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_outGeo_(self, g2);
  if (!([out_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]) && ([GeogebraCommonKernelMatrixTransformable_class_() isInstance:outGeo_])) {
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_out_(self, (id<GeogebraCommonKernelMatrixTransformable>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelMatrixTransformable)));
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getResultTemplateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    return [new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  }
  return [super getResultTemplateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)swapOrientationWithGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)arc {
  jdouble a, b, c, d;
  a = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([((GeogebraCommonKernelGeosGeoList *) nil_chk(matrix_)) getWithInt:0 withInt:0]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  b = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:0]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  c = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:0 withInt:1]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  d = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:1]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return (arc == nil || [arc positiveOrientation]) ^ (((a * d) - (b * c)) < 0);
}

- (void)transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b {
  if (!([a isKindOfClass:[GeogebraCommonKernelGeosGeoConicPart class]])) {
    [super transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  }
  else {
    [super transformLimitedConicWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  }
}

- (jdouble)getAreaScaleFactor {
  jdouble a = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([((GeogebraCommonKernelGeosGeoList *) nil_chk(matrix_)) getWithInt:0 withInt:0]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble b = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:0]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble c = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:0 withInt:1]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  jdouble d = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(([matrix_ getWithInt:1 withInt:1]), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  return (a * d) - (b * c);
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(matrix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoList:", "AlgoApplyMatrix", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoList:", "AlgoApplyMatrix", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "swapOrientationWithGeogebraCommonKernelGeosGeoConicPart:", "swapOrientation", "Z", 0x1, NULL, NULL },
    { "transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "transformLimitedPath", "V", 0x4, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lgeogebra.common.kernel.MatrixTransformable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "matrix_", NULL, 0x12, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoApplyMatrix = { 2, "AlgoApplyMatrix", "geogebra.common.kernel.advanced", NULL, 0x1, 11, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoApplyMatrix;
}

@end

void GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoApplyMatrix *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoApplyMatrix *new_GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix *self = [GeogebraCommonKernelAdvancedAlgoApplyMatrix alloc];
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inArg, matrix);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoApplyMatrix *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelAlgosAlgoTransformation_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_matrix_(self, matrix);
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_inGeo_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(inArg)) toGeoElement]);
  if (([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:self->inGeo_]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isLimitedPath]) {
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_outGeo_(self, [inArg copyInternalWithGeogebraCommonKernelConstruction:cons]);
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_out_(self, (id<GeogebraCommonKernelMatrixTransformable>) check_protocol_cast(self->outGeo_, @protocol(GeogebraCommonKernelMatrixTransformable)));
  }
  else if ([self->inGeo_ isGeoList]) {
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_setAndConsume_outGeo_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  }
  else if ([self->inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_setAndConsume_out_(self, new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons));
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_outGeo_(self, [self->out_ toGeoElement]);
  }
  else {
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_out_(self, (id<GeogebraCommonKernelMatrixTransformable>) check_protocol_cast([self->inGeo_ copy__], @protocol(GeogebraCommonKernelMatrixTransformable)));
    GeogebraCommonKernelAdvancedAlgoApplyMatrix_set_outGeo_(self, [((id<GeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) toGeoElement]);
  }
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(self);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoFunction]) {
    [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  }
}

GeogebraCommonKernelAdvancedAlgoApplyMatrix *new_GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix *self = [GeogebraCommonKernelAdvancedAlgoApplyMatrix alloc];
  GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, cons, inArg, matrix);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoApplyMatrix_compute(GeogebraCommonKernelAdvancedAlgoApplyMatrix *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoList class]) withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if ([self->inGeo_ isGeoFunction]) {
    [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoFunction class])) toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setWithGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  GeogebraCommonKernelArithmeticMyList *list = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->matrix_)) getMyList];
  if (([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list)) getMatrixCols] != [list getMatrixRows]) || ([list getMatrixRows] < 2) || ([list getMatrixRows] > 3)) {
    [self->outGeo_ setUndefined];
    return;
  }
  jdouble a, b, c, d, e, f, g, h, i;
  if ([list getMatrixRows] < 3) {
    a = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 0))) evaluateDouble];
    b = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 0))) evaluateDouble];
    c = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 1))) evaluateDouble];
    d = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 1))) evaluateDouble];
    [((id<GeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:a withDouble:b withDouble:c withDouble:d];
  }
  else {
    a = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 0))) evaluateDouble];
    b = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 0))) evaluateDouble];
    c = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 0))) evaluateDouble];
    d = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 1))) evaluateDouble];
    e = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 1))) evaluateDouble];
    f = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 1))) evaluateDouble];
    g = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 0, 2))) evaluateDouble];
    h = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 1, 2))) evaluateDouble];
    i = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(GeogebraCommonKernelArithmeticMyList_getCellWithGeogebraCommonKernelArithmeticMyList_withInt_withInt_(list, 2, 2))) evaluateDouble];
    [((id<GeogebraCommonKernelMatrixTransformable>) nil_chk(self->out_)) matrixTransformWithDouble:a withDouble:b withDouble:c withDouble:d withDouble:e withDouble:f withDouble:g withDouble:h withDouble:i];
  }
  if ([self->inGeo_ isLimitedPath]) {
    [self transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:self->inGeo_ withGeogebraCommonKernelGeosGeoElement:self->outGeo_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoApplyMatrix)
