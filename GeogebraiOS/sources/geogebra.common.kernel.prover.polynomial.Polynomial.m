//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/polynomial/Polynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/cas/GeoGebraCAS.h"
#include "geogebra/common/cas/giac/CASgiac.h"
#include "geogebra/common/cas/singularws/SingularWebService.h"
#include "geogebra/common/kernel/CASException.h"
#include "geogebra/common/kernel/CASGenericInterface.h"
#include "geogebra/common/kernel/GeoGebraCasInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/prover/polynomial/ParseException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/PolynomialParser.h"
#include "geogebra/common/kernel/prover/polynomial/Term.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/SortedMap.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelProverPolynomialPolynomial () {
 @public
  JavaUtilTreeMap *terms_;
}

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)terms;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverPolynomialPolynomial, terms_, JavaUtilTreeMap *)

__attribute__((unused)) static void GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(GeogebraCommonKernelProverPolynomialPolynomial *self, JavaUtilTreeMap *terms);

__attribute__((unused)) static GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(JavaUtilTreeMap *terms) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelProverPolynomialPolynomial

- (instancetype)init {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(self, poly);
  return self;
}

- (instancetype)initWithJavaUtilTreeMap:(JavaUtilTreeMap *)terms {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(self, terms);
  return self;
}

- (JavaUtilTreeMap *)getTerms {
  return terms_;
}

- (instancetype)initWithInt:(jint)coeff {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(self, coeff);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(self, coeff, variable);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)variable
                    withInt:(jint)power {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(self, coeff, variable, power);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

- (instancetype)initWithInt:(jint)coeff
withGeogebraCommonKernelProverPolynomialTerm:(GeogebraCommonKernelProverPolynomialTerm *)t {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(self, coeff, t);
  return self;
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)addWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly {
  JavaUtilTreeMap *result = [new_JavaUtilTreeMap_initWithJavaUtilSortedMap_(terms_) autorelease];
  JavaUtilTreeMap *terms2 = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms2)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t = [it next];
    if ([((JavaUtilTreeMap *) nil_chk(terms_)) containsKeyWithId:t]) {
      jint coefficient = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue] + [((JavaLangInteger *) nil_chk([terms2 getWithId:t])) intValue];
      if (coefficient == 0) {
        [result removeWithId:t];
      }
      else {
        [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue] + [((JavaLangInteger *) nil_chk([terms2 getWithId:t])) intValue])];
      }
    }
    else {
      [result putWithId:t withId:[terms2 getWithId:t]];
    }
  }
  return [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result) autorelease];
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)negate {
  JavaUtilTreeMap *result = [new_JavaUtilTreeMap_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t = [it next];
    [result putWithId:t withId:JavaLangInteger_valueOfWithInt_(0 - [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue])];
  }
  return [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result) autorelease];
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)subtractWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly {
  return [self addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) negate]];
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)poly {
  JavaUtilTreeMap *result = [new_JavaUtilTreeMap_init() autorelease];
  JavaUtilTreeMap *terms2 = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  id<JavaUtilIterator> it1 = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it1)) hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t1 = [it1 next];
    id<JavaUtilIterator> it2 = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms2)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      GeogebraCommonKernelProverPolynomialTerm *t2 = [it2 next];
      GeogebraCommonKernelProverPolynomialTerm *product = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t1)) timesWithGeogebraCommonKernelProverPolynomialTerm:t2];
      jint productCoefficient = [((JavaLangInteger *) nil_chk([terms_ getWithId:t1])) intValue] * [((JavaLangInteger *) nil_chk([terms2 getWithId:t2])) intValue];
      if ([result containsKeyWithId:product]) {
        jint sum = [((JavaLangInteger *) nil_chk([result getWithId:product])) intValue] + productCoefficient;
        if (sum == 0) {
          [result removeWithId:product];
        }
        else {
          [result putWithId:product withId:JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk([result getWithId:product])) intValue] + productCoefficient)];
        }
      }
      else {
        [result putWithId:product withId:JavaLangInteger_valueOfWithInt_(productCoefficient)];
      }
    }
  }
  return [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result) autorelease];
}

- (jint)compareToWithId:(GeogebraCommonKernelProverPolynomialPolynomial *)poly {
  check_class_cast(poly, [GeogebraCommonKernelProverPolynomialPolynomial class]);
  if (self == poly) {
    return 0;
  }
  JavaUtilTreeMap *polyVars = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms];
  if ([((JavaUtilTreeMap *) nil_chk(polyVars)) isEmpty]) {
    if ([((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty]) {
      return 0;
    }
    return 1;
  }
  if ([((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty]) {
    return -1;
  }
  GeogebraCommonKernelProverPolynomialTerm *termsLastKey = [terms_ lastKey], *polyVarsLastKey = [polyVars lastKey];
  jint compare = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(termsLastKey)) compareToWithId:polyVarsLastKey];
  if (compare == 0) {
    compare = [((JavaLangInteger *) nil_chk([terms_ getWithId:termsLastKey])) compareToWithId:[polyVars getWithId:polyVarsLastKey]];
  }
  if (compare != 0) {
    return compare;
  }
  do {
    id<JavaUtilSortedMap> termsSub = [terms_ headMapWithId:termsLastKey];
    id<JavaUtilSortedMap> oSub = [polyVars headMapWithId:polyVarsLastKey];
    if ([((id<JavaUtilSortedMap>) nil_chk(termsSub)) isEmpty]) {
      if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
        return 0;
      }
      return -1;
    }
    if ([((id<JavaUtilSortedMap>) nil_chk(oSub)) isEmpty]) {
      return 1;
    }
    termsLastKey = [termsSub lastKey];
    polyVarsLastKey = [oSub lastKey];
    compare = [((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(termsLastKey)) compareToWithId:polyVarsLastKey];
    if (compare == 0) {
      compare = [((JavaLangInteger *) nil_chk([termsSub getWithId:termsLastKey])) compareToWithId:[oSub getWithId:polyVarsLastKey]];
    }
  }
  while (compare == 0);
  return compare;
}

- (NSString *)description {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    return @"0";
  }
  while ([it hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t = [it next];
    jint c = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue];
    if (![((JavaUtilTreeMap *) nil_chk([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getTerm])) isEmpty]) {
      if (c != 1) [sb appendWithNSString:JreStrcat("IC", c, '*')];
      [sb appendWithId:t];
    }
    else [sb appendWithInt:c];
    [sb appendWithChar:'+'];
  }
  return [sb substringWithInt:0 withInt:[sb length] - 1];
}

- (NSString *)toTeX {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  if (![((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    return @"0";
  }
  while ([it hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t = [it next];
    jint c = [((JavaLangInteger *) nil_chk([terms_ getWithId:t])) intValue];
    if (![((JavaUtilTreeMap *) nil_chk([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getTerm])) isEmpty]) {
      if (c != 1) {
        if (c != -1) {
          if (c < -1) {
            if ([sb length] > 0) {
              [sb deleteCharAtWithInt:[sb length] - 1];
            }
          }
          [sb appendWithInt:c];
        }
        else {
          if ([sb length] > 0) {
            [sb deleteCharAtWithInt:[sb length] - 1];
          }
          [sb appendWithChar:'-'];
        }
      }
      [sb appendWithNSString:[t toTeX]];
    }
    else [sb appendWithInt:c];
    [sb appendWithChar:'+'];
  }
  return [sb substringWithInt:0 withInt:[sb length] - 1];
}

- (JavaUtilHashSet *)getVars {
  JavaUtilHashSet *v = [new_JavaUtilHashSet_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t = [it next];
    [v addAllWithJavaUtilCollection:[((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t)) getVars]];
  }
  return v;
}

+ (JavaUtilHashSet *)getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys {
  return GeogebraCommonKernelProverPolynomialPolynomial_getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
}

+ (NSString *)getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                               withJavaUtilHashSet:(JavaUtilHashSet *)extraVars
                                                                               withJavaLangBoolean:(JavaLangBoolean *)free {
  return GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, extraVars, free);
}

+ (NSString *)getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys {
  return GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
}

- (NSString *)getSingularMultiplicationWithNSString:(NSString *)ringVariable
 withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p1
 withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p2 {
  NSString *vars = GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_([IOSObjectArray arrayWithObjects:(id[]){ p1, p2 } count:2 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()], nil, nil);
  if (![@"" isEqual:vars]) return JreStrcat("$$$$$$$$$", @"ring ", ringVariable, @"=0,(", vars, @"),dp;short=0;(", [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) description], @")*(", [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p2)) description], @");");
  return JreStrcat("$C$C", [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) description], '*', [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p2)) description], ';');
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)collinearWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv1
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv2
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv3
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv4
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv5
                                                             withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)fv6 {
  return GeogebraCommonKernelProverPolynomialPolynomial_collinearWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(fv1, fv2, fv3, fv4, fv5, fv6);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)perpendicularWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v1
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v2
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v3
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v4
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v5
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v6
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v7
                                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v8 {
  return GeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(v1, v2, v3, v4, v5, v6, v7, v8);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)parallelWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v1
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v2
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v3
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v4
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v5
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v6
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v7
                                                            withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)v8 {
  return GeogebraCommonKernelProverPolynomialPolynomial_parallelWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(v1, v2, v3, v4, v5, v6, v7, v8);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2:(IOSObjectArray *)matrix {
  return GeogebraCommonKernelProverPolynomialPolynomial_det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2_(matrix);
}

+ (IOSObjectArray *)crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)a
                                withGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)b {
  return GeogebraCommonKernelProverPolynomialPolynomial_crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialPolynomialArray_(a, b);
}

- (GeogebraCommonKernelProverPolynomialPolynomial *)substituteWithJavaUtilMap:(id<JavaUtilMap>)substitutions {
  if (substitutions == nil) return self;
  JavaUtilTreeMap *result = [new_JavaUtilTreeMap_init() autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilTreeMap *) nil_chk(terms_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialTerm *t1 = [it next];
    JavaUtilTreeMap *term = [new_JavaUtilTreeMap_initWithJavaUtilSortedMap_([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk(t1)) getTerm]) autorelease];
    JavaMathBigInteger *product = JavaMathBigInteger_get_ONE_();
    id<JavaUtilIterator> itSubst = [((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(substitutions)) keySet])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(itSubst)) hasNext]) {
      GeogebraCommonKernelProverPolynomialVariable *variable = [itSubst next];
      JavaLangInteger *exponent = [term getWithId:variable];
      if (exponent != nil) {
        product = [((JavaMathBigInteger *) nil_chk(product)) multiplyWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([substitutions getWithId:variable])) intValue]))) powWithInt:[exponent intValue]]];
        [term removeWithId:variable];
      }
    }
    product = [((JavaMathBigInteger *) nil_chk(product)) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([terms_ getWithId:t1])) intValue])];
    GeogebraCommonKernelProverPolynomialTerm *t = [new_GeogebraCommonKernelProverPolynomialTerm_initWithJavaUtilTreeMap_(term) autorelease];
    if ([result containsKeyWithId:t]) {
      JavaMathBigInteger *sum = [((JavaMathBigInteger *) nil_chk(JavaMathBigInteger_valueOfWithLong_([((JavaLangInteger *) nil_chk([result getWithId:t])) intValue]))) addWithJavaMathBigInteger:product];
      if ([((JavaMathBigInteger *) nil_chk(sum)) intValue] == 0) {
        [result removeWithId:t];
      }
      else {
        [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([sum intValue])];
      }
    }
    else if ([((JavaMathBigInteger *) nil_chk(product)) intValue] != 0) {
      [result putWithId:t withId:JavaLangInteger_valueOfWithInt_([product intValue])];
    }
  }
  return [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(result) autorelease];
}

- (jboolean)isEqual:(id)o {
  if ([o isKindOfClass:[GeogebraCommonKernelProverPolynomialPolynomial class]]) {
    return [self compareToWithId:(GeogebraCommonKernelProverPolynomialPolynomial *) check_class_cast(o, [GeogebraCommonKernelProverPolynomialPolynomial class])] == 0;
  }
  return [super isEqual:o];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilTreeMap *) nil_chk(terms_)) hash]);
}

- (jboolean)isZero {
  return [((JavaUtilTreeMap *) nil_chk(terms_)) isEmpty];
}

- (jboolean)isConstant {
  if ([((JavaUtilTreeMap *) nil_chk(terms_)) size] > 1) {
    return NO;
  }
  if ([((GeogebraCommonKernelProverPolynomialTerm *) nil_chk([terms_ firstKey])) isEqual:[new_GeogebraCommonKernelProverPolynomialTerm_init() autorelease]]) {
    return YES;
  }
  return NO;
}

+ (jboolean)areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p1
                          withGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p2 {
  return GeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial_withGeogebraCommonKernelProverPolynomialPolynomial_(p1, p2);
}

- (jboolean)isOne {
  return [self isEqual:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(1) autorelease]];
}

+ (NSString *)substitutionsStringWithJavaUtilHashMap:(JavaUtilHashMap *)subst {
  return GeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(subst);
}

+ (NSString *)addLeadingCommaWithNSString:(NSString *)inArg {
  return GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(inArg);
}

+ (NSString *)coalesceWithNSString:(NSString *)in1
                      withNSString:(NSString *)in2 {
  return GeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(in1, in2);
}

+ (NSString *)createGroebnerSolvableScriptWithJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                 withNSString:(NSString *)polys
                                                 withNSString:(NSString *)fieldVars
                                                 withNSString:(NSString *)ringVars
                                                  withBoolean:(jboolean)transcext {
  return GeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(substitutions, polys, fieldVars, ringVars, transcext);
}

+ (NSString *)createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                               withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)pVariables
                                                                                     withJavaUtilSet:(id<JavaUtilSet>)dependentVariables {
  return GeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(polys, pVariables, dependentVariables);
}

+ (JavaLangBoolean *)solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)polys
                                                                 withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                      withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                         withBoolean:(jboolean)transcext {
  return GeogebraCommonKernelProverPolynomialPolynomial_solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withBoolean_(polys, substitutions, kernel, transcext);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)sqrWithGeogebraCommonKernelProverPolynomialPolynomial:(GeogebraCommonKernelProverPolynomialPolynomial *)p {
  return GeogebraCommonKernelProverPolynomialPolynomial_sqrWithGeogebraCommonKernelProverPolynomialPolynomial_(p);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b2 {
  return GeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(a1, a2, b1, b2);
}

+ (GeogebraCommonKernelProverPolynomialPolynomial *)equidistantWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)a2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)o1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)o2
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b1
                                                               withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)b2 {
  return GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(a1, a2, o1, o2, b1, b2);
}

+ (id<JavaUtilSet>)eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray:(IOSObjectArray *)eqSystem
                                                                withJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                     withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                            withInt:(jint)permutation {
  return GeogebraCommonKernelProverPolynomialPolynomial_eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withInt_(eqSystem, substitutions, kernel, permutation);
}

- (void)dealloc {
  RELEASE_(terms_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialPolynomial:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithJavaUtilTreeMap:", "Polynomial", NULL, 0x2, NULL, NULL },
    { "getTerms", NULL, "Ljava.util.TreeMap;", 0x1, NULL, NULL },
    { "initWithInt:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialVariable:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withGeogebraCommonKernelProverPolynomialVariable:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withGeogebraCommonKernelProverPolynomialVariable:withInt:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelProverPolynomialTerm:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "initWithInt:withGeogebraCommonKernelProverPolynomialTerm:", "Polynomial", NULL, 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelProverPolynomialPolynomial:", "add", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "negate", NULL, "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "subtractWithGeogebraCommonKernelProverPolynomialPolynomial:", "subtract", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:", "multiply", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toTeX", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getVars", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray:", "getVars", "Ljava.util.HashSet;", 0x9, NULL, NULL },
    { "getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashSet:withJavaLangBoolean:", "getVarsAsCommaSeparatedString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray:", "getPolysAsCommaSeparatedString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "getSingularMultiplicationWithNSString:withGeogebraCommonKernelProverPolynomialPolynomial:withGeogebraCommonKernelProverPolynomialPolynomial:", "getSingularMultiplication", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "collinearWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:", "collinear", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "perpendicularWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:", "perpendicular", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "parallelWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:", "parallel", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2:", "det4", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray:withGeogebraCommonKernelProverPolynomialPolynomialArray:", "crossProduct", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "substituteWithJavaUtilMap:", "substitute", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isZero", NULL, "Z", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial:withGeogebraCommonKernelProverPolynomialPolynomial:", "areAssociates1", "Z", 0x9, NULL, NULL },
    { "isOne", NULL, "Z", 0x1, NULL, NULL },
    { "substitutionsStringWithJavaUtilHashMap:", "substitutionsString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "addLeadingCommaWithNSString:", "addLeadingComma", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "coalesceWithNSString:withNSString:", "coalesce", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "createGroebnerSolvableScriptWithJavaUtilHashMap:withNSString:withNSString:withNSString:withBoolean:", "createGroebnerSolvableScript", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray:withGeogebraCommonKernelProverPolynomialVariableArray:withJavaUtilSet:", "createEliminateFactorizedScript", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashMap:withGeogebraCommonKernelKernel:withBoolean:", "solvable", "Ljava.lang.Boolean;", 0x9, NULL, NULL },
    { "sqrWithGeogebraCommonKernelProverPolynomialPolynomial:", "sqr", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:", "sqrDistance", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "equidistantWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:", "equidistant", "Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray:withJavaUtilHashMap:withGeogebraCommonKernelKernel:withInt:", "eliminate", "Ljava.util.Set;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "terms_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/prover/polynomial/Term;Ljava/lang/Integer;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverPolynomialPolynomial = { 2, "Polynomial", "geogebra.common.kernel.prover.polynomial", NULL, 0x1, 44, methods, 1, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lgeogebra/common/kernel/prover/polynomial/Polynomial;>;" };
  return &_GeogebraCommonKernelProverPolynomialPolynomial;
}

@end

void GeogebraCommonKernelProverPolynomialPolynomial_init(GeogebraCommonKernelProverPolynomialPolynomial *self) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomial_setAndConsume_terms_(self, new_JavaUtilTreeMap_init());
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_init() {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialPolynomial *poly) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomial_setAndConsume_terms_(self, new_JavaUtilTreeMap_initWithJavaUtilSortedMap_([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(poly)) getTerms]));
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *poly) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialPolynomial_(self, poly);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(GeogebraCommonKernelProverPolynomialPolynomial *self, JavaUtilTreeMap *terms) {
  NSObject_init(self);
  GeogebraCommonKernelProverPolynomialPolynomial_set_terms_(self, terms);
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(JavaUtilTreeMap *terms) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithJavaUtilTreeMap_(self, terms);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff) {
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(self, coeff, [new_GeogebraCommonKernelProverPolynomialTerm_init() autorelease]);
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(jint coeff) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(self, coeff);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialVariable *fv) {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:[new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(fv) autorelease] withId:JavaLangInteger_valueOfWithInt_(1)];
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *fv) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(self, fv);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable) {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:[new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_(variable) autorelease] withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_(self, coeff, variable);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable, jint power) {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:[new_GeogebraCommonKernelProverPolynomialTerm_initWithGeogebraCommonKernelProverPolynomialVariable_withInt_(variable, power) autorelease] withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(jint coeff, GeogebraCommonKernelProverPolynomialVariable *variable, jint power) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialVariable_withInt_(self, coeff, variable, power);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialPolynomial *self, GeogebraCommonKernelProverPolynomialTerm *t) {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:t withId:JavaLangInteger_valueOfWithInt_(1)];
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialTerm *t) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialTerm_(self, t);
  return self;
}

void GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(GeogebraCommonKernelProverPolynomialPolynomial *self, jint coeff, GeogebraCommonKernelProverPolynomialTerm *t) {
  GeogebraCommonKernelProverPolynomialPolynomial_init(self);
  if (coeff != 0) [((JavaUtilTreeMap *) nil_chk(self->terms_)) putWithId:t withId:JavaLangInteger_valueOfWithInt_(coeff)];
}

GeogebraCommonKernelProverPolynomialPolynomial *new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(jint coeff, GeogebraCommonKernelProverPolynomialTerm *t) {
  GeogebraCommonKernelProverPolynomialPolynomial *self = [GeogebraCommonKernelProverPolynomialPolynomial alloc];
  GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_withGeogebraCommonKernelProverPolynomialTerm_(self, coeff, t);
  return self;
}

JavaUtilHashSet *GeogebraCommonKernelProverPolynomialPolynomial_getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilHashSet *v = [new_JavaUtilHashSet_init() autorelease];
  jint polysLength = 0;
  if (polys != nil) polysLength = polys->size_;
  for (jint i = 0; i < polysLength; ++i) {
    JavaUtilHashSet *vars = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(polys), i))) getVars];
    if (vars != nil) [v addAllWithJavaUtilCollection:vars];
  }
  return v;
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(IOSObjectArray *polys, JavaUtilHashSet *extraVars, JavaLangBoolean *free) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  JavaUtilHashSet *vars = GeogebraCommonKernelProverPolynomialPolynomial_getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
  if (extraVars != nil) [((JavaUtilHashSet *) nil_chk(vars)) addAllWithJavaUtilCollection:extraVars];
  id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(vars)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *fv = [it next];
    if ((free == nil) || ([free booleanValue] && [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) isFree]) || (![free booleanValue] && ![((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(fv)) isFree])) [sb appendWithNSString:JreStrcat("C@", ',', fv)];
  }
  if ([sb length] > 0) return [sb substringWithInt:1];
  return @"";
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *polys) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(polys))->size_; ++i) [sb appendWithNSString:JreStrcat("C$", ',', [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(polys, i))) description])];
  if ([sb length] > 0) return [sb substringWithInt:1];
  return @"";
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_collinearWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *fv1, GeogebraCommonKernelProverPolynomialVariable *fv2, GeogebraCommonKernelProverPolynomialVariable *fv3, GeogebraCommonKernelProverPolynomialVariable *fv4, GeogebraCommonKernelProverPolynomialVariable *fv5, GeogebraCommonKernelProverPolynomialVariable *fv6) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  GeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@C", @"Setting up equation for collinear points (", fv1, ',', fv2, @"), (", fv3, ',', fv4, @") and (", fv5, ',', fv6, ')'));
  GeogebraCommonKernelProverPolynomialPolynomial *a = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv1) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *b = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv2) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv3) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv4) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *e = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv5) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *f = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(fv6) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *ret = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([a multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:d])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[b multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:c]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[e multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[b subtractWithGeogebraCommonKernelProverPolynomialPolynomial:d]]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[f multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[a subtractWithGeogebraCommonKernelProverPolynomialPolynomial:c]]];
  return ret;
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_perpendicularWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *v1, GeogebraCommonKernelProverPolynomialVariable *v2, GeogebraCommonKernelProverPolynomialVariable *v3, GeogebraCommonKernelProverPolynomialVariable *v4, GeogebraCommonKernelProverPolynomialVariable *v5, GeogebraCommonKernelProverPolynomialVariable *v6, GeogebraCommonKernelProverPolynomialVariable *v7, GeogebraCommonKernelProverPolynomialVariable *v8) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  GeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@$@C@C", @"Setting up equation for perpendicular lines (", v1, ',', v2, @")-(", v3, ',', v4, @") and (", v5, ',', v6, @")-(", v7, ',', v8, ')'));
  GeogebraCommonKernelProverPolynomialPolynomial *a1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v1) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *a2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v2) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *b1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v3) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *b2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v4) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v5) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v6) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v7) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v8) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *ret = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:b1]))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[c1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:d1]]))) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a2 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:b2]))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[c2 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:d2]]];
  return ret;
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_parallelWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *v1, GeogebraCommonKernelProverPolynomialVariable *v2, GeogebraCommonKernelProverPolynomialVariable *v3, GeogebraCommonKernelProverPolynomialVariable *v4, GeogebraCommonKernelProverPolynomialVariable *v5, GeogebraCommonKernelProverPolynomialVariable *v6, GeogebraCommonKernelProverPolynomialVariable *v7, GeogebraCommonKernelProverPolynomialVariable *v8) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  GeogebraCommonMainApp_traceWithNSString_(JreStrcat("$@C@$@C@$@C@$@C@C", @"Setting up equation for parallel lines (", v1, ',', v2, @")-(", v3, ',', v4, @") and (", v5, ',', v6, @")-(", v7, ',', v8, ')'));
  GeogebraCommonKernelProverPolynomialPolynomial *a1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v1) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *a2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v2) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *b1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v3) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *b2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v4) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v5) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v6) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v7) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(v8) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *ret = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:b1]))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[c2 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:d2]]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([a2 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:b2]))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[c1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:d1]]];
  return ret;
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_det4WithGeogebraCommonKernelProverPolynomialPolynomialArray2_(IOSObjectArray *matrix) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  GeogebraCommonKernelProverPolynomialPolynomial *complex$1 = [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
  return [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(complex$1)) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
}

IOSObjectArray *GeogebraCommonKernelProverPolynomialPolynomial_crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialPolynomialArray_(IOSObjectArray *a, IOSObjectArray *b) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()];
  IOSObjectArray_Set(result, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(a), 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(b), 2)]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 1)]]);
  IOSObjectArray_Set(result, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 0)]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 2)]]);
  IOSObjectArray_Set(result, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 1)]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(b, 0)]]);
  return result;
}

jboolean GeogebraCommonKernelProverPolynomialPolynomial_areAssociates1WithGeogebraCommonKernelProverPolynomialPolynomial_withGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *p1, GeogebraCommonKernelProverPolynomialPolynomial *p2) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p1)) isEqual:p2] || [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([p1 addWithGeogebraCommonKernelProverPolynomialPolynomial:p2])) isZero];
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(JavaUtilHashMap *subst) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ret = @"";
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(subst)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *v = [it next];
    ret = JreStrcat("$$", ret, JreStrcat("C$C@", ',', [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(v)) description], ',', [subst getWithId:v]));
  }
  if (((jint) [ret length]) > 0) return [ret substring:1];
  return @"";
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(NSString *inArg) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  if (inArg == nil || ((jint) [inArg length]) == 0) return @"";
  return JreStrcat("C$", ',', inArg);
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(NSString *in1, NSString *in2) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  if (in1 == nil || ((jint) [in1 length]) == 0) return in2;
  return in1;
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(JavaUtilHashMap *substitutions, NSString *polys, NSString *fieldVars, NSString *ringVars, jboolean transcext) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ringVariable = @"r";
  NSString *idealVariable = @"i";
  NSString *dummyVar = @"d";
  NSString *vars = JreStrcat("$$", ringVars, GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(fieldVars));
  NSString *substCommand = @"";
  if (substitutions != nil) {
    NSString *substParams = GeogebraCommonKernelProverPolynomialPolynomial_substitutionsStringWithJavaUtilHashMap_(substitutions);
    substCommand = JreStrcat("$$$C$$", idealVariable, @"=subst(", idealVariable, ',', substParams, @");");
  }
  NSString *ret = JreStrcat("$$C", @"ring ", ringVariable, '=');
  if (transcext) {
    ret = JreStrcat("$$", ret, JreStrcat("$$$$", @"(0", GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(fieldVars), @"),(", GeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(ringVars, dummyVar)));
  }
  else {
    ret = JreStrcat("$$", ret, JreStrcat("$$", @"0,(", GeogebraCommonKernelProverPolynomialPolynomial_coalesceWithNSString_withNSString_(vars, dummyVar)));
  }
  ret = JreStrcat("$$", ret, JreStrcat("$$C$C", @"),dp;ideal ", idealVariable, '=', polys, ';'));
  ret = JreStrcat("$$", ret, substCommand);
  ret = JreStrcat("$$", ret, JreStrcat("$$$", @"groebner(", idealVariable, @")!=1;"));
  return ret;
}

NSString *GeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(IOSObjectArray *polys, IOSObjectArray *pVariables, id<JavaUtilSet> dependentVariables) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  NSString *ringVariable = @"r";
  NSString *idealVariable = @"i";
  NSString *loopVariable = @"j";
  NSString *sizeVariable = @"s";
  NSString *eliminationVariable = @"e";
  NSString *outputVariable = @"o";
  NSString *dummyVar = @"d";
  JavaLangStringBuffer *ret = [new_JavaLangStringBuffer_initWithNSString_(@"ring ") autorelease];
  [ret appendWithNSString:ringVariable];
  [ret appendWithNSString:@"=0,("];
  NSString *vars = @"";
  {
    IOSObjectArray *a__ = pVariables;
    GeogebraCommonKernelProverPolynomialVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelProverPolynomialVariable * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelProverPolynomialVariable *v = *b__++;
      vars = JreStrcat("$$", vars, JreStrcat("@C", v, ','));
    }
  }
  if (![@"" isEqual:vars]) {
    vars = [vars substring:0 endIndex:((jint) [vars length]) - 1];
  }
  if (![@"" isEqual:vars]) [ret appendWithNSString:vars];
  else [ret appendWithNSString:dummyVar];
  [ret appendWithNSString:@"),dp;"];
  [ret appendWithNSString:@"ideal "];
  [ret appendWithNSString:idealVariable];
  [ret appendWithNSString:@"="];
  [ret appendWithNSString:GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(polys)];
  [ret appendWithNSString:@";"];
  [ret appendWithNSString:@"ideal "];
  [ret appendWithNSString:eliminationVariable];
  [ret appendWithNSString:@"="];
  [ret appendWithNSString:@"eliminate("];
  [ret appendWithNSString:idealVariable];
  [ret appendWithNSString:@","];
  vars = @"";
  id<JavaUtilIterator> dependentVariablesIterator = [((id<JavaUtilSet>) nil_chk(dependentVariables)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(dependentVariablesIterator)) hasNext]) {
    vars = JreStrcat("$@", vars, [dependentVariablesIterator next]);
    if ([dependentVariablesIterator hasNext]) {
      vars = JreStrcat("$C", vars, '*');
    }
  }
  if (![@"" isEqual:vars]) [ret appendWithNSString:vars];
  else [ret appendWithNSString:dummyVar];
  [ret appendWithNSString:@");"];
  [ret appendWithNSString:JreStrcat("$$$$$$$", @"list ", outputVariable, @";int ", sizeVariable, @"=size(", eliminationVariable, @");")];
  [ret appendWithNSString:JreStrcat("$$$$$$$$C$C$$", @"int ", loopVariable, @";for(", loopVariable, @"=1;", loopVariable, @"<=", sizeVariable, ';', loopVariable, '=', loopVariable, @"+1)")];
  [ret appendWithNSString:JreStrcat("C$C$$$C$$", '{', outputVariable, '[', loopVariable, @"]=factorize(", eliminationVariable, '[', loopVariable, @"]);}o;")];
  return [ret description];
}

JavaLangBoolean *GeogebraCommonKernelProverPolynomialPolynomial_solvableWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withBoolean_(IOSObjectArray *polys, JavaUtilHashMap *substitutions, GeogebraCommonKernelKernel *kernel, jboolean transcext) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilHashSet *substVars = nil;
  NSString *polysAsCommaSeparatedString = GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(polys);
  substVars = [new_JavaUtilHashSet_initWithJavaUtilCollection_([((JavaUtilHashMap *) nil_chk(substitutions)) keySet]) autorelease];
  NSString *freeVars = GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, substVars, JavaLangBoolean_valueOfWithBoolean_(YES));
  NSString *dependantVars = GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(polys, substVars, JavaLangBoolean_valueOfWithBoolean_(NO));
  NSString *solvableResult, *solvableProgram;
  if (GeogebraCommonMainApp_get_singularWS_() != nil && [GeogebraCommonMainApp_get_singularWS_() isAvailable]) {
    solvableProgram = GeogebraCommonKernelProverPolynomialPolynomial_createGroebnerSolvableScriptWithJavaUtilHashMap_withNSString_withNSString_withNSString_withBoolean_(substitutions, polysAsCommaSeparatedString, freeVars, dependantVars, transcext);
    if (((jint) [((NSString *) nil_chk(solvableProgram)) length]) > 500) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$", ((jint) [solvableProgram length]), @" bytes -> singular"));
    else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", solvableProgram, @" -> singular"));
    @try {
      solvableResult = [GeogebraCommonMainApp_get_singularWS_() directCommandWithNSString:solvableProgram];
      if (((jint) [((NSString *) nil_chk(solvableResult)) length]) > 500) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$", @"singular -> ", ((jint) [solvableResult length]), @" bytes"));
      else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"singular -> ", solvableResult));
      if ([@"0" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(NO);
    }
    @catch (JavaLangThrowable *e) {
      @throw [new_GeogebraCommonKernelCASException_initWithNSString_(@"Couldn't compute ") autorelease];
    }
    return JavaLangBoolean_valueOfWithBoolean_(YES);
  }
  GeogebraCommonCasGeoGebraCAS *cas = (GeogebraCommonCasGeoGebraCAS *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS], [GeogebraCommonCasGeoGebraCAS class]);
  solvableProgram = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((GeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) createGroebnerSolvableScriptWithJavaUtilHashMap:substitutions withNSString:polysAsCommaSeparatedString withNSString:freeVars withNSString:dependantVars withBoolean:transcext];
  if (solvableProgram == nil) {
    GeogebraCommonUtilDebugLog_infoWithNSString_(@"Not implemented (yet)");
    return nil;
  }
  GeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[groebnerSolvable] input to cas: ", solvableProgram));
  @try {
    [cas evaluateRawWithNSString:GeogebraCommonCasGiacCASgiac_get_closeString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  solvableResult = [cas evaluateWithNSString:solvableProgram];
  @try {
    [cas evaluateRawWithNSString:GeogebraCommonCasGiacCASgiac_get_initString_()];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
  GeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[groebnerSolvable] output from cas: ", solvableResult));
  if ([@"0" isEqual:solvableResult] || [@"false" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(NO);
  if ([@"1" isEqual:solvableResult] || [@"true" isEqual:solvableResult]) return JavaLangBoolean_valueOfWithBoolean_(YES);
  return nil;
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_sqrWithGeogebraCommonKernelProverPolynomialPolynomial_(GeogebraCommonKernelProverPolynomialPolynomial *p) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(p)) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:p];
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *a1, GeogebraCommonKernelProverPolynomialVariable *a2, GeogebraCommonKernelProverPolynomialVariable *b1, GeogebraCommonKernelProverPolynomialVariable *b2) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(GeogebraCommonKernelProverPolynomialPolynomial_sqrWithGeogebraCommonKernelProverPolynomialPolynomial_([((GeogebraCommonKernelProverPolynomialPolynomial *) [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(a1) autorelease]) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(b1) autorelease]]))) addWithGeogebraCommonKernelProverPolynomialPolynomial:GeogebraCommonKernelProverPolynomialPolynomial_sqrWithGeogebraCommonKernelProverPolynomialPolynomial_([((GeogebraCommonKernelProverPolynomialPolynomial *) [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(a2) autorelease]) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(b2) autorelease]])];
}

GeogebraCommonKernelProverPolynomialPolynomial *GeogebraCommonKernelProverPolynomialPolynomial_equidistantWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(GeogebraCommonKernelProverPolynomialVariable *a1, GeogebraCommonKernelProverPolynomialVariable *a2, GeogebraCommonKernelProverPolynomialVariable *o1, GeogebraCommonKernelProverPolynomialVariable *o2, GeogebraCommonKernelProverPolynomialVariable *b1, GeogebraCommonKernelProverPolynomialVariable *b2) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  return [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(GeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(a1, a2, o1, o2))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:GeogebraCommonKernelProverPolynomialPolynomial_sqrDistanceWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_(o1, o2, b1, b2)];
}

id<JavaUtilSet> GeogebraCommonKernelProverPolynomialPolynomial_eliminateWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashMap_withGeogebraCommonKernelKernel_withInt_(IOSObjectArray *eqSystem, JavaUtilHashMap *substitutions, GeogebraCommonKernelKernel *kernel, jint permutation) {
  GeogebraCommonKernelProverPolynomialPolynomial_initialize();
  JavaUtilTreeSet *dependentVariables = [new_JavaUtilTreeSet_init() autorelease];
  JavaUtilTreeSet *freeVariables = [new_JavaUtilTreeSet_init() autorelease];
  JavaUtilTreeSet *variables = [new_JavaUtilTreeSet_initWithJavaUtilCollection_(GeogebraCommonKernelProverPolynomialPolynomial_getVarsWithGeogebraCommonKernelProverPolynomialPolynomialArray_(eqSystem)) autorelease];
  id<JavaUtilIterator> variablesIterator = [variables iterator];
  while ([((id<JavaUtilIterator>) nil_chk(variablesIterator)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *variable = [variablesIterator next];
    if (![((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(variable)) isFree]) {
      [dependentVariables addWithId:variable];
    }
    else {
      if (![((JavaUtilHashMap *) nil_chk(substitutions)) containsKeyWithId:variable]) {
        [freeVariables addWithId:variable];
      }
    }
  }
  IOSObjectArray *eqSystemSubstituted;
  if (substitutions != nil) {
    eqSystemSubstituted = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(eqSystem))->size_ type:GeogebraCommonKernelProverPolynomialPolynomial_class_()];
    for (jint i = 0; i < eqSystem->size_; i++) {
      IOSObjectArray_Set(eqSystemSubstituted, i, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(eqSystem, i))) substituteWithJavaUtilMap:substitutions]);
    }
    [variables removeAllWithJavaUtilCollection:[substitutions keySet]];
  }
  else {
    eqSystemSubstituted = eqSystem;
  }
  NSString *elimResult, *elimProgram;
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$I$", @"Eliminating system in ", [variables size], @" variables (", [dependentVariables size], @" dependent)"));
  if (GeogebraCommonMainApp_get_singularWS_() != nil && [GeogebraCommonMainApp_get_singularWS_() isAvailable]) {
    jint vSize = [freeVariables size];
    IOSObjectArray *aVariables = [IOSObjectArray arrayWithLength:vSize type:GeogebraCommonKernelProverPolynomialVariable_class_()];
    id<JavaUtilIterator> it = [freeVariables iterator];
    jint ai = 0;
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      IOSObjectArray_Set(aVariables, ai++, [it next]);
    }
    IOSIntArray *indices = [IOSIntArray arrayWithLength:vSize];
    for (jint i = 0; i < vSize; ++i) {
      *IOSIntArray_GetRef(indices, i) = i;
    }
    if (vSize >= 4) {
      IOSObjectArray *perms = [IOSObjectArray arrayWithObjects:(id[]){ [IOSIntArray arrayWithInts:(jint[]){ 3, 2, 1, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 3, 2, 0, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 3, 1, 2, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 3, 1, 0, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 3, 0, 1, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 3, 0, 2, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 3, 1, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 3, 0, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 1, 0, 3 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 1, 3, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 0, 1, 3 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 2, 0, 3, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 3, 2, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 3, 0, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 2, 3, 0 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 2, 0, 3 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 0, 3, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 1, 0, 2, 3 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 3, 2, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 3, 1, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 2, 3, 1 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 2, 1, 3 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 1, 3, 2 } count:4], [IOSIntArray arrayWithInts:(jint[]){ 0, 1, 2, 3 } count:4] } count:24 type:IOSClass_intArray(1)];
      for (jint j = 0; j < 4; ++j) {
        *IOSIntArray_GetRef(indices, j + vSize - 4) = 3 - IOSIntArray_Get(nil_chk(IOSObjectArray_Get(perms, permutation)), j) + vSize - 4;
      }
    }
    IOSObjectArray *pVariables = [IOSObjectArray arrayWithLength:[variables size] type:GeogebraCommonKernelProverPolynomialVariable_class_()];
    NSString *debug = @"";
    for (jint j = 0; j < vSize; ++j) {
      IOSObjectArray_Set(pVariables, j, IOSObjectArray_Get(aVariables, IOSIntArray_Get(indices, j)));
      debug = JreStrcat("$$", debug, JreStrcat("@C", IOSObjectArray_Get(aVariables, IOSIntArray_Get(indices, j)), ','));
    }
    if (![@"" isEqual:debug]) {
      debug = [debug substring:0 endIndex:((jint) [debug length]) - 1];
    }
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$$", @"Checking variable permutation #", permutation, @": ", debug));
    it = [dependentVariables iterator];
    for (jint j = vSize; j < [variables size]; ++j) {
      IOSObjectArray_Set(pVariables, j, [((id<JavaUtilIterator>) nil_chk(it)) next]);
    }
    elimProgram = GeogebraCommonKernelProverPolynomialPolynomial_createEliminateFactorizedScriptWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialVariableArray_withJavaUtilSet_(eqSystemSubstituted, pVariables, dependentVariables);
    if (((jint) [((NSString *) nil_chk(elimProgram)) length]) > 500) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("I$", ((jint) [elimProgram length]), @" bytes -> singular"));
    else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", elimProgram, @" -> singular"));
    @try {
      elimResult = [GeogebraCommonMainApp_get_singularWS_() directCommandWithNSString:elimProgram];
      if (elimResult == nil) {
        return nil;
      }
      if (((jint) [((NSString *) nil_chk(elimResult)) length]) > 500) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$I$", @"singular -> ", ((jint) [elimResult length]), @" bytes"));
      else GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"singular -> ", elimResult));
    }
    @catch (JavaLangThrowable *e) {
      @throw [new_GeogebraCommonKernelCASException_initWithNSString_(@"Cannot compute elimination with SingularWS") autorelease];
    }
  }
  else {
    GeogebraCommonCasGeoGebraCAS *cas = (GeogebraCommonCasGeoGebraCAS *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getGeoGebraCAS], [GeogebraCommonCasGeoGebraCAS class]);
    NSString *polys = GeogebraCommonKernelProverPolynomialPolynomial_getPolysAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_(eqSystemSubstituted);
    NSString *elimVars = GeogebraCommonKernelProverPolynomialPolynomial_getVarsAsCommaSeparatedStringWithGeogebraCommonKernelProverPolynomialPolynomialArray_withJavaUtilHashSet_withJavaLangBoolean_(eqSystemSubstituted, nil, JavaLangBoolean_valueOfWithBoolean_(NO));
    elimProgram = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((GeogebraCommonCasGeoGebraCAS *) nil_chk(cas)) getCurrentCAS])) createEliminateFactorizedScriptWithNSString:polys withNSString:elimVars];
    if (elimProgram == nil) {
      GeogebraCommonUtilDebugLog_infoWithNSString_(@"Not implemented (yet)");
      return nil;
    }
    GeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[eliminateFactorized] input to cas: ", elimProgram));
    @try {
      [cas evaluateRawWithNSString:GeogebraCommonCasGiacCASgiac_get_closeString_()];
    }
    @catch (JavaLangThrowable *e) {
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    }
    elimResult = [((NSString *) nil_chk([((NSString *) nil_chk([cas evaluateWithNSString:elimProgram])) replace:@"unicode95u" withSequence:@"_"])) replace:@"unicode91u" withSequence:@"["];
    @try {
      [cas evaluateRawWithNSString:GeogebraCommonCasGiacCASgiac_get_initString_()];
    }
    @catch (JavaLangThrowable *e) {
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    }
    GeogebraCommonUtilDebugLog_infoWithNSString_(JreStrcat("$$", @"[eliminateFactorized] output from cas: ", elimResult));
  }
  if ([@"empty list" isEqual:elimResult] || [@"[0]" isEqual:elimResult]) {
    id<JavaUtilSet> ret = [new_JavaUtilHashSet_init() autorelease];
    JavaUtilHashSet *polys = [new_JavaUtilHashSet_init() autorelease];
    [polys addWithId:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(0) autorelease]];
    [ret addWithId:polys];
    return ret;
  }
  if ([@"?" isEqual:elimResult] || [@"" isEqual:elimResult]) {
    return nil;
  }
  @try {
    return GeogebraCommonKernelProverPolynomialPolynomialParser_parseFactoredPolynomialSetWithNSString_withJavaUtilSet_(elimResult, variables);
  }
  @catch (GeogebraCommonKernelProverPolynomialParseException *e) {
    [((GeogebraCommonKernelProverPolynomialParseException *) nil_chk(e)) printStackTrace];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverPolynomialPolynomial)
