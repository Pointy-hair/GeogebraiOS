//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdPolygon.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdPolygon

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdPolygon_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  return [self processWithGeogebraCommonKernelArithmeticCommand:c withInt:n withGeogebraCommonKernelGeosGeoElementArray:arg];
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                             withInt:(jint)n
                         withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg {
  {
    IOSObjectArray *points;
    jboolean is3D;
    switch (n) {
      case 0:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withInt:n];
      case 1:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) PolygonWithNSStringArray:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])];
      case 3:
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint] && [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]) return [self regularPolygonWithNSStringArray:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
      default:
      points = [IOSObjectArray arrayWithLength:n type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
      is3D = NO;
      for (jint i = 0; i < n; i++) {
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), i))) isGeoPoint])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
        IOSObjectArray_Set(points, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, i), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
        is3D = [self checkIs3DWithBoolean:is3D withGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, i)];
      }
      return [self polygonWithNSStringArray:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:is3D];
    }
  }
}

- (jboolean)checkIs3DWithBoolean:(jboolean)is3D
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return NO;
}

- (IOSObjectArray *)polygonWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                 withBoolean:(jboolean)is3D {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) PolygonWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:points];
}

- (IOSObjectArray *)regularPolygonWithNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
         withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)n {
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self getAlgoDispatcher])) RegularPolygonWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelArithmeticNumberValue:n];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPolygon", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:withInt:withGeogebraCommonKernelGeosGeoElementArray:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
    { "checkIs3DWithBoolean:withGeogebraCommonKernelGeosGeoElement:", "checkIs3D", "Z", 0x4, NULL, NULL },
    { "polygonWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "polygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "regularPolygonWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:", "regularPolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdPolygon = { 2, "CmdPolygon", "geogebra.common.kernel.commands", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdPolygon;
}

@end

void GeogebraCommonKernelCommandsCmdPolygon_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdPolygon *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdPolygon *new_GeogebraCommonKernelCommandsCmdPolygon_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdPolygon *self = [GeogebraCommonKernelCommandsCmdPolygon alloc];
  GeogebraCommonKernelCommandsCmdPolygon_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdPolygon)
