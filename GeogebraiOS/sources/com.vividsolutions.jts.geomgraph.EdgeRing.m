//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geomgraph/EdgeRing.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/Envelope.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdge.h"
#include "com/vividsolutions/jts/geomgraph/DirectedEdgeStar.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeEndStar.h"
#include "com/vividsolutions/jts/geomgraph/EdgeRing.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomgraphEdgeRing () {
 @public
  jint maxNodeDegree_;
  id<JavaUtilList> edges_;
  id<JavaUtilList> pts_;
  ComVividsolutionsJtsGeomgraphLabel *label_;
  ComVividsolutionsJtsGeomLinearRing *ring_;
  jboolean isHole__;
  ComVividsolutionsJtsGeomgraphEdgeRing *shell_;
  JavaUtilArrayList *holes_;
}

- (void)computeMaxNodeDegree;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, edges_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, pts_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, label_, ComVividsolutionsJtsGeomgraphLabel *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, ring_, ComVividsolutionsJtsGeomLinearRing *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, shell_, ComVividsolutionsJtsGeomgraphEdgeRing *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphEdgeRing, holes_, JavaUtilArrayList *)

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphEdgeRing_computeMaxNodeDegree(ComVividsolutionsJtsGeomgraphEdgeRing *self);

@implementation ComVividsolutionsJtsGeomgraphEdgeRing

- (instancetype)initWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)start
                      withComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)geometryFactory {
  ComVividsolutionsJtsGeomgraphEdgeRing_initWithComVividsolutionsJtsGeomgraphDirectedEdge_withComVividsolutionsJtsGeomGeometryFactory_(self, start, geometryFactory);
  return self;
}

- (jboolean)isIsolated {
  return [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label_)) getGeometryCount] == 1;
}

- (jboolean)isHole {
  return isHole__;
}

- (ComVividsolutionsJtsGeomCoordinate *)getCoordinateWithInt:(jint)i {
  return (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([((id<JavaUtilList>) nil_chk(pts_)) getWithInt:i], [ComVividsolutionsJtsGeomCoordinate class]);
}

- (ComVividsolutionsJtsGeomLinearRing *)getLinearRing {
  return ring_;
}

- (ComVividsolutionsJtsGeomgraphLabel *)getLabel {
  return label_;
}

- (jboolean)isShell {
  return shell_ == nil;
}

- (ComVividsolutionsJtsGeomgraphEdgeRing *)getShell {
  return shell_;
}

- (void)setShellWithComVividsolutionsJtsGeomgraphEdgeRing:(ComVividsolutionsJtsGeomgraphEdgeRing *)shell {
  ComVividsolutionsJtsGeomgraphEdgeRing_set_shell_(self, shell);
  if (shell != nil) [shell addHoleWithComVividsolutionsJtsGeomgraphEdgeRing:self];
}

- (void)addHoleWithComVividsolutionsJtsGeomgraphEdgeRing:(ComVividsolutionsJtsGeomgraphEdgeRing *)ring {
  [((JavaUtilArrayList *) nil_chk(holes_)) addWithId:ring];
}

- (ComVividsolutionsJtsGeomPolygon *)toPolygonWithComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)geometryFactory {
  IOSObjectArray *holeLR = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(holes_)) size] type:ComVividsolutionsJtsGeomLinearRing_class_()];
  for (jint i = 0; i < [holes_ size]; i++) {
    IOSObjectArray_Set(holeLR, i, [((ComVividsolutionsJtsGeomgraphEdgeRing *) nil_chk(((ComVividsolutionsJtsGeomgraphEdgeRing *) check_class_cast([holes_ getWithInt:i], [ComVividsolutionsJtsGeomgraphEdgeRing class])))) getLinearRing]);
  }
  ComVividsolutionsJtsGeomPolygon *poly = [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geometryFactory)) createPolygonWithComVividsolutionsJtsGeomLinearRing:[self getLinearRing] withComVividsolutionsJtsGeomLinearRingArray:holeLR];
  return poly;
}

- (void)computeRing {
  if (ring_ != nil) return;
  IOSObjectArray *coord = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(pts_)) size] type:ComVividsolutionsJtsGeomCoordinate_class_()];
  for (jint i = 0; i < [pts_ size]; i++) {
    IOSObjectArray_Set(coord, i, (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([pts_ getWithInt:i], [ComVividsolutionsJtsGeomCoordinate class]));
  }
  ComVividsolutionsJtsGeomgraphEdgeRing_set_ring_(self, [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk(geometryFactory_)) createLinearRingWithComVividsolutionsJtsGeomCoordinateArray:coord]);
  isHole__ = ComVividsolutionsJtsAlgorithmCGAlgorithms_isCCWWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(ring_)) getCoordinates]);
}

- (ComVividsolutionsJtsGeomgraphDirectedEdge *)getNextWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)de {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setEdgeRingWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)de
                       withComVividsolutionsJtsGeomgraphEdgeRing:(ComVividsolutionsJtsGeomgraphEdgeRing *)er {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaUtilList>)getEdges {
  return edges_;
}

- (void)computePointsWithComVividsolutionsJtsGeomgraphDirectedEdge:(ComVividsolutionsJtsGeomgraphDirectedEdge *)start {
  ComVividsolutionsJtsGeomgraphEdgeRing_set_startDe_(self, start);
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = start;
  jboolean isFirstEdge = YES;
  do {
    if (de == nil) @throw [new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_(@"Found null DirectedEdge") autorelease];
    if ([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getEdgeRing] == self) @throw [new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_(JreStrcat("$@", @"Directed Edge visited twice during ring-building at ", [de getCoordinate])) autorelease];
    [((id<JavaUtilList>) nil_chk(edges_)) addWithId:de];
    ComVividsolutionsJtsGeomgraphLabel *label = [de getLabel];
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label)) isArea]);
    [self mergeLabelWithComVividsolutionsJtsGeomgraphLabel:label];
    [self addPointsWithComVividsolutionsJtsGeomgraphEdge:[de getEdge] withBoolean:[de isForward] withBoolean:isFirstEdge];
    isFirstEdge = NO;
    [self setEdgeRingWithComVividsolutionsJtsGeomgraphDirectedEdge:de withComVividsolutionsJtsGeomgraphEdgeRing:self];
    de = [self getNextWithComVividsolutionsJtsGeomgraphDirectedEdge:de];
  }
  while (de != startDe_);
}

- (jint)getMaxNodeDegree {
  if (maxNodeDegree_ < 0) ComVividsolutionsJtsGeomgraphEdgeRing_computeMaxNodeDegree(self);
  return maxNodeDegree_;
}

- (void)computeMaxNodeDegree {
  ComVividsolutionsJtsGeomgraphEdgeRing_computeMaxNodeDegree(self);
}

- (void)setInResult {
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = startDe_;
  do {
    [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk([((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getEdge])) setInResultWithBoolean:YES];
    de = [de getNext];
  }
  while (de != startDe_);
}

- (void)mergeLabelWithComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)deLabel {
  [self mergeLabelWithComVividsolutionsJtsGeomgraphLabel:deLabel withInt:0];
  [self mergeLabelWithComVividsolutionsJtsGeomgraphLabel:deLabel withInt:1];
}

- (void)mergeLabelWithComVividsolutionsJtsGeomgraphLabel:(ComVividsolutionsJtsGeomgraphLabel *)deLabel
                                                 withInt:(jint)geomIndex {
  jint loc = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(deLabel)) getLocationWithInt:geomIndex withInt:ComVividsolutionsJtsGeomgraphPosition_RIGHT];
  if (loc == ComVividsolutionsJtsGeomLocation_NONE) return;
  if ([((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(label_)) getLocationWithInt:geomIndex] == ComVividsolutionsJtsGeomLocation_NONE) {
    [label_ setLocationWithInt:geomIndex withInt:loc];
    return;
  }
}

- (void)addPointsWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)edge
                                           withBoolean:(jboolean)isForward
                                           withBoolean:(jboolean)isFirstEdge {
  IOSObjectArray *edgePts = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(edge)) getCoordinates];
  if (isForward) {
    jint startIndex = 1;
    if (isFirstEdge) startIndex = 0;
    for (jint i = startIndex; i < ((IOSObjectArray *) nil_chk(edgePts))->size_; i++) {
      [((id<JavaUtilList>) nil_chk(pts_)) addWithId:IOSObjectArray_Get(edgePts, i)];
    }
  }
  else {
    jint startIndex = ((IOSObjectArray *) nil_chk(edgePts))->size_ - 2;
    if (isFirstEdge) startIndex = edgePts->size_ - 1;
    for (jint i = startIndex; i >= 0; i--) {
      [((id<JavaUtilList>) nil_chk(pts_)) addWithId:IOSObjectArray_Get(edgePts, i)];
    }
  }
}

- (jboolean)containsPointWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)p {
  ComVividsolutionsJtsGeomLinearRing *shell = [self getLinearRing];
  ComVividsolutionsJtsGeomEnvelope *env = [((ComVividsolutionsJtsGeomLinearRing *) nil_chk(shell)) getEnvelopeInternal];
  if (![((ComVividsolutionsJtsGeomEnvelope *) nil_chk(env)) containsWithComVividsolutionsJtsGeomCoordinate:p]) return NO;
  if (!ComVividsolutionsJtsAlgorithmCGAlgorithms_isPointInRingWithComVividsolutionsJtsGeomCoordinate_withComVividsolutionsJtsGeomCoordinateArray_(p, [shell getCoordinates])) return NO;
  for (id<JavaUtilIterator> i = [((JavaUtilArrayList *) nil_chk(holes_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdgeRing *hole = (ComVividsolutionsJtsGeomgraphEdgeRing *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdgeRing class]);
    if ([((ComVividsolutionsJtsGeomgraphEdgeRing *) nil_chk(hole)) containsPointWithComVividsolutionsJtsGeomCoordinate:p]) return NO;
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(startDe_);
  RELEASE_(edges_);
  RELEASE_(pts_);
  RELEASE_(label_);
  RELEASE_(ring_);
  RELEASE_(shell_);
  RELEASE_(holes_);
  RELEASE_(geometryFactory_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomgraphDirectedEdge:withComVividsolutionsJtsGeomGeometryFactory:", "EdgeRing", NULL, 0x1, NULL, NULL },
    { "isIsolated", NULL, "Z", 0x1, NULL, NULL },
    { "isHole", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordinateWithInt:", "getCoordinate", "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getLinearRing", NULL, "Lcom.vividsolutions.jts.geom.LinearRing;", 0x1, NULL, NULL },
    { "getLabel", NULL, "Lcom.vividsolutions.jts.geomgraph.Label;", 0x1, NULL, NULL },
    { "isShell", NULL, "Z", 0x1, NULL, NULL },
    { "getShell", NULL, "Lcom.vividsolutions.jts.geomgraph.EdgeRing;", 0x1, NULL, NULL },
    { "setShellWithComVividsolutionsJtsGeomgraphEdgeRing:", "setShell", "V", 0x1, NULL, NULL },
    { "addHoleWithComVividsolutionsJtsGeomgraphEdgeRing:", "addHole", "V", 0x1, NULL, NULL },
    { "toPolygonWithComVividsolutionsJtsGeomGeometryFactory:", "toPolygon", "Lcom.vividsolutions.jts.geom.Polygon;", 0x1, NULL, NULL },
    { "computeRing", NULL, "V", 0x1, NULL, NULL },
    { "getNextWithComVividsolutionsJtsGeomgraphDirectedEdge:", "getNext", "Lcom.vividsolutions.jts.geomgraph.DirectedEdge;", 0x401, NULL, NULL },
    { "setEdgeRingWithComVividsolutionsJtsGeomgraphDirectedEdge:withComVividsolutionsJtsGeomgraphEdgeRing:", "setEdgeRing", "V", 0x401, NULL, NULL },
    { "getEdges", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "computePointsWithComVividsolutionsJtsGeomgraphDirectedEdge:", "computePoints", "V", 0x4, NULL, NULL },
    { "getMaxNodeDegree", NULL, "I", 0x1, NULL, NULL },
    { "computeMaxNodeDegree", NULL, "V", 0x2, NULL, NULL },
    { "setInResult", NULL, "V", 0x1, NULL, NULL },
    { "mergeLabelWithComVividsolutionsJtsGeomgraphLabel:", "mergeLabel", "V", 0x4, NULL, NULL },
    { "mergeLabelWithComVividsolutionsJtsGeomgraphLabel:withInt:", "mergeLabel", "V", 0x4, NULL, NULL },
    { "addPointsWithComVividsolutionsJtsGeomgraphEdge:withBoolean:withBoolean:", "addPoints", "V", 0x4, NULL, NULL },
    { "containsPointWithComVividsolutionsJtsGeomCoordinate:", "containsPoint", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startDe_", NULL, 0x4, "Lcom.vividsolutions.jts.geomgraph.DirectedEdge;", NULL, NULL,  },
    { "maxNodeDegree_", NULL, 0x2, "I", NULL, NULL,  },
    { "edges_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "pts_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
    { "label_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.Label;", NULL, NULL,  },
    { "ring_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.LinearRing;", NULL, NULL,  },
    { "isHole__", "isHole", 0x2, "Z", NULL, NULL,  },
    { "shell_", NULL, 0x2, "Lcom.vividsolutions.jts.geomgraph.EdgeRing;", NULL, NULL,  },
    { "holes_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, NULL,  },
    { "geometryFactory_", NULL, 0x4, "Lcom.vividsolutions.jts.geom.GeometryFactory;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphEdgeRing = { 2, "EdgeRing", "com.vividsolutions.jts.geomgraph", NULL, 0x401, 23, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphEdgeRing;
}

@end

void ComVividsolutionsJtsGeomgraphEdgeRing_initWithComVividsolutionsJtsGeomgraphDirectedEdge_withComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomgraphEdgeRing *self, ComVividsolutionsJtsGeomgraphDirectedEdge *start, ComVividsolutionsJtsGeomGeometryFactory *geometryFactory) {
  NSObject_init(self);
  self->maxNodeDegree_ = -1;
  ComVividsolutionsJtsGeomgraphEdgeRing_setAndConsume_edges_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphEdgeRing_setAndConsume_pts_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphEdgeRing_setAndConsume_label_(self, new_ComVividsolutionsJtsGeomgraphLabel_initWithInt_(ComVividsolutionsJtsGeomLocation_NONE));
  ComVividsolutionsJtsGeomgraphEdgeRing_setAndConsume_holes_(self, new_JavaUtilArrayList_init());
  ComVividsolutionsJtsGeomgraphEdgeRing_set_geometryFactory_(self, geometryFactory);
  [self computePointsWithComVividsolutionsJtsGeomgraphDirectedEdge:start];
  [self computeRing];
}

void ComVividsolutionsJtsGeomgraphEdgeRing_computeMaxNodeDegree(ComVividsolutionsJtsGeomgraphEdgeRing *self) {
  self->maxNodeDegree_ = 0;
  ComVividsolutionsJtsGeomgraphDirectedEdge *de = self->startDe_;
  do {
    ComVividsolutionsJtsGeomgraphNode *node = [((ComVividsolutionsJtsGeomgraphDirectedEdge *) nil_chk(de)) getNode];
    jint degree = [((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) nil_chk(((ComVividsolutionsJtsGeomgraphDirectedEdgeStar *) check_class_cast([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getEdges], [ComVividsolutionsJtsGeomgraphDirectedEdgeStar class])))) getOutgoingDegreeWithComVividsolutionsJtsGeomgraphEdgeRing:self];
    if (degree > self->maxNodeDegree_) self->maxNodeDegree_ = degree;
    de = [self getNextWithComVividsolutionsJtsGeomgraphDirectedEdge:de];
  }
  while (de != self->startDe_);
  self->maxNodeDegree_ *= 2;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphEdgeRing)
