//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/arith/EquationSqrtOperator.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "geogebra/common/kernel/locusequ/arith/EquationExpression.h"
#include "geogebra/common/kernel/locusequ/arith/EquationSqrtOperator.h"
#include "geogebra/common/kernel/locusequ/arith/EquationUnaryOperator.h"
#include "java/lang/Math.h"

@implementation GeogebraCommonKernelLocusequArithEquationSqrtOperator

- (instancetype)initWithGeogebraCommonKernelLocusequArithEquationExpression:(GeogebraCommonKernelLocusequArithEquationExpression *)expr {
  GeogebraCommonKernelLocusequArithEquationSqrtOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

- (jdouble)operationWithDouble:(jdouble)a {
  return (a < 0) ? -1 : JavaLangMath_sqrtWithDouble_(a);
}

- (jlong)toLong {
  jlong value = [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) toLong];
  return J2ObjCFpToLong(((value < 0) ? -1 : JavaLangMath_ceilWithDouble_(JavaLangMath_sqrtWithDouble_(value))));
}

- (NSString *)description {
  return JreStrcat("$$C", @"sqrt(", [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) description], ')');
}

- (jboolean)isSqrt {
  return YES;
}

- (id)translateImplWithGeogebraCommonKernelLocusequEquationTranslator:(GeogebraCommonKernelLocusequEquationTranslator *)translator {
  if ([((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) containsSymbolicValuesImpl]) {
    return [((GeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) sqrtWithId:[((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) translateWithGeogebraCommonKernelLocusequEquationTranslator:translator]];
  }
  return [((GeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) numberWithDouble:JavaLangMath_sqrtWithDouble_([((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getOriginalExpression])) computeValue])];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelLocusequArithEquationExpression:", "EquationSqrtOperator", NULL, 0x1, NULL, NULL },
    { "operationWithDouble:", "operation", "D", 0x4, NULL, NULL },
    { "toLong", NULL, "J", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isSqrt", NULL, "Z", 0x1, NULL, NULL },
    { "translateImplWithGeogebraCommonKernelLocusequEquationTranslator:", "translateImpl", "TT;", 0x4, NULL, "<T:Ljava/lang/Object;>(Lgeogebra/common/kernel/locusequ/EquationTranslator<TT;>;)TT;" },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequArithEquationSqrtOperator = { 2, "EquationSqrtOperator", "geogebra.common.kernel.locusequ.arith", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequArithEquationSqrtOperator;
}

@end

void GeogebraCommonKernelLocusequArithEquationSqrtOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_(GeogebraCommonKernelLocusequArithEquationSqrtOperator *self, GeogebraCommonKernelLocusequArithEquationExpression *expr) {
  GeogebraCommonKernelLocusequArithEquationUnaryOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
}

GeogebraCommonKernelLocusequArithEquationSqrtOperator *new_GeogebraCommonKernelLocusequArithEquationSqrtOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_(GeogebraCommonKernelLocusequArithEquationExpression *expr) {
  GeogebraCommonKernelLocusequArithEquationSqrtOperator *self = [GeogebraCommonKernelLocusequArithEquationSqrtOperator alloc];
  GeogebraCommonKernelLocusequArithEquationSqrtOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_(self, expr);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequArithEquationSqrtOperator)
