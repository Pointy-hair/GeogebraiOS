//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolygonRegular.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegular.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoPolygonRegular () {
 @public
  GeogebraCommonKernelMatrixCoords *centerPointCoords_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonRegular, centerPointCoords_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonKernelAlgosAlgoPolygonRegular

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A1
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B1
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num {
  GeogebraCommonKernelAlgosAlgoPolygonRegular_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, A1, B1, num);
  return self;
}

- (GeogebraCommonKernelGeosGeoPolygon *)newGeoPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelGeosGeoElement *)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelGeosGeoPoint *newPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:1];
  return newPoint;
}

- (void)setCenterPointWithInt:(jint)n
                   withDouble:(jdouble)beta {
  jdouble xA = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoPoint class]))))->inhomX_;
  jdouble yA = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoPoint class]))))->inhomY_;
  jdouble xB = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoPoint class]))))->inhomX_;
  jdouble yB = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoPoint class]))))->inhomY_;
  jdouble mx = (xA + xB) / 2;
  jdouble my = (yA + yB) / 2;
  jdouble nx = yA - yB;
  jdouble ny = xB - xA;
  jdouble tanBetaHalf = JavaLangMath_tanWithDouble_(beta) / 2;
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(centerPoint_)) setCoordsWithDouble:mx + tanBetaHalf * nx withDouble:my + tanBetaHalf * ny withDouble:1.0];
  GeogebraCommonKernelAlgosAlgoPolygonRegular_set_centerPointCoords_(self, [centerPoint_ getInhomCoords]);
}

- (void)rotateWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) rotateWithGeogebraCommonKernelArithmeticNumberValue:rotAngle_ withGeogebraCommonKernelMatrixCoords:centerPointCoords_];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) toGeoElement]);
  for (jint i = 0; i < input_->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getPoly])) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
}

- (void)calcCentroidWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(centerPoint_, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (void)dealloc {
  RELEASE_(centerPointCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoPolygonRegular", NULL, 0x1, NULL, NULL },
    { "newGeoPolygonWithGeogebraCommonKernelConstruction:", "newGeoPolygon", "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setCenterPointWithInt:withDouble:", "setCenterPoint", "V", 0x4, NULL, NULL },
    { "rotateWithGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:", "setDirection", "V", 0x14, NULL, NULL },
    { "calcCentroidWithGeogebraCommonKernelGeosGeoPoint:", "calcCentroid", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "centerPointCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonRegular = { 2, "AlgoPolygonRegular", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolygonRegular;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonRegular_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoPolygonRegular *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> A1, id<GeogebraCommonKernelKernelNDGeoPointND> B1, id<GeogebraCommonKernelArithmeticNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, c, labels, A1, B1, num, nil);
}

GeogebraCommonKernelAlgosAlgoPolygonRegular *new_GeogebraCommonKernelAlgosAlgoPolygonRegular_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> A1, id<GeogebraCommonKernelKernelNDGeoPointND> B1, id<GeogebraCommonKernelArithmeticNumberValue> num) {
  GeogebraCommonKernelAlgosAlgoPolygonRegular *self = [GeogebraCommonKernelAlgosAlgoPolygonRegular alloc];
  GeogebraCommonKernelAlgosAlgoPolygonRegular_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, A1, B1, num);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonRegular)
