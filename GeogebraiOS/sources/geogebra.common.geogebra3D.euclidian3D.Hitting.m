//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/Hitting.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPlane3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DHitting

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view {
  GeogebraCommonGeogebra3DEuclidian3DHitting_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

- (void)setHitsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc
                                   withInt:(jint)threshold {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) setCenteredPositionWithGeogebraCommonAwtGPoint:mouseLoc withGeogebraCommonAwtGPoint:pos_];
  GeogebraCommonGeogebra3DEuclidian3DHitting_set_origin_(self, [view_ getPickPointWithGeogebraCommonAwtGPoint:mouseLoc]);
  if ([view_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || [view_ getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    GeogebraCommonGeogebra3DEuclidian3DHitting_set_origin_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([view_ getRenderer])) getPerspEye])) copyVector]);
  }
  [view_ toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:origin_];
  GeogebraCommonGeogebra3DEuclidian3DHitting_set_direction_(self, [view_ getViewDirection]);
  self->threshold_ = threshold;
  [self setHits];
}

- (void)setHits {
  GeogebraCommonGeogebra3DEuclidian3DHits3D *hits = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getHits3D];
  [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits)) init__];
  if ([view_ getShowPlane]) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk([view_ getPlaneDrawable])) hitIfVisibleAndPickableWithGeogebraCommonGeogebra3DEuclidian3DHitting:self withGeogebraCommonGeogebra3DEuclidian3DHits3D:hits];
  }
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk([view_ getAxisDrawableWithInt:i])) hitIfVisibleAndPickableWithGeogebraCommonGeogebra3DEuclidian3DHitting:self withGeogebraCommonGeogebra3DEuclidian3DHits3D:hits];
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *) nil_chk([view_ getDrawList3D])) hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:self withGeogebraCommonGeogebra3DEuclidian3DHits3D:hits];
  [hits sort];
}

- (GeogebraCommonKernelGeosGeoElement *)getLabelHitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) setCenteredPositionWithGeogebraCommonAwtGPoint:mouseLoc withGeogebraCommonAwtGPoint:pos_];
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *) nil_chk([view_ getDrawList3D])) getLabelHitWithGeogebraCommonAwtGPoint:pos_];
}

- (jboolean)isInsideClippingWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) useClippingCube]) {
    return [view_ isInsideWithGeogebraCommonKernelMatrixCoords:p];
  }
  return YES;
}

- (jint)getThreshold {
  return threshold_;
}

- (jboolean)isSphere {
  return NO;
}

- (void)dealloc {
  RELEASE_(origin_);
  RELEASE_(direction_);
  RELEASE_(pos_);
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Hitting", NULL, 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGPoint:withInt:", "setHits", "V", 0x1, NULL, NULL },
    { "setHits", NULL, "V", 0x4, NULL, NULL },
    { "getLabelHitWithGeogebraCommonAwtGPoint:", "getLabelHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isInsideClippingWithGeogebraCommonKernelMatrixCoords:", "isInsideClipping", "Z", 0x11, NULL, NULL },
    { "getThreshold", NULL, "I", 0x1, NULL, NULL },
    { "isSphere", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", NULL, 0x1, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction_", NULL, 0x1, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pos_", NULL, 0x1, "Lgeogebra.common.awt.GPoint;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "threshold_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DHitting = { 2, "Hitting", "geogebra.common.geogebra3D.euclidian3D", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DHitting;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DHitting_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DHitting *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DHitting_set_view_(self, view);
  GeogebraCommonGeogebra3DEuclidian3DHitting_setAndConsume_pos_(self, new_GeogebraCommonAwtGPoint_init());
}

GeogebraCommonGeogebra3DEuclidian3DHitting *new_GeogebraCommonGeogebra3DEuclidian3DHitting_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view) {
  GeogebraCommonGeogebra3DEuclidian3DHitting *self = [GeogebraCommonGeogebra3DEuclidian3DHitting alloc];
  GeogebraCommonGeogebra3DEuclidian3DHitting_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DHitting)
