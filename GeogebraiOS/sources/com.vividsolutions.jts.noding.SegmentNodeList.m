//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/noding/SegmentNodeList.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/noding/NodedSegmentString.h"
#include "com/vividsolutions/jts/noding/SegmentNode.h"
#include "com/vividsolutions/jts/noding/SegmentNodeList.h"
#include "com/vividsolutions/jts/noding/SegmentString.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/io/PrintStream.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/TreeMap.h"

@interface ComVividsolutionsJtsNodingSegmentNodeList () {
 @public
  id<JavaUtilMap> nodeMap_;
  ComVividsolutionsJtsNodingNodedSegmentString *edge_;
}

- (void)addEndpoints;

- (void)addCollapsedNodes;

- (void)findCollapsesFromExistingVerticesWithJavaUtilList:(id<JavaUtilList>)collapsedVertexIndexes;

- (void)findCollapsesFromInsertedNodesWithJavaUtilList:(id<JavaUtilList>)collapsedVertexIndexes;

- (jboolean)findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei0
                             withComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei1
                                                          withIntArray:(IOSIntArray *)collapsedVertexIndex;

- (void)checkSplitEdgesCorrectnessWithJavaUtilList:(id<JavaUtilList>)splitEdges;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingSegmentNodeList, nodeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingSegmentNodeList, edge_, ComVividsolutionsJtsNodingNodedSegmentString *)

__attribute__((unused)) static void ComVividsolutionsJtsNodingSegmentNodeList_addEndpoints(ComVividsolutionsJtsNodingSegmentNodeList *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSegmentNodeList_addCollapsedNodes(ComVividsolutionsJtsNodingSegmentNodeList *self);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromExistingVerticesWithJavaUtilList_(ComVividsolutionsJtsNodingSegmentNodeList *self, id<JavaUtilList> collapsedVertexIndexes);

__attribute__((unused)) static void ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromInsertedNodesWithJavaUtilList_(ComVividsolutionsJtsNodingSegmentNodeList *self, id<JavaUtilList> collapsedVertexIndexes);

__attribute__((unused)) static jboolean ComVividsolutionsJtsNodingSegmentNodeList_findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode_withComVividsolutionsJtsNodingSegmentNode_withIntArray_(ComVividsolutionsJtsNodingSegmentNodeList *self, ComVividsolutionsJtsNodingSegmentNode *ei0, ComVividsolutionsJtsNodingSegmentNode *ei1, IOSIntArray *collapsedVertexIndex);

@interface ComVividsolutionsJtsNodingNodeVertexIterator () {
 @public
  ComVividsolutionsJtsNodingSegmentNodeList *nodeList_;
  ComVividsolutionsJtsNodingNodedSegmentString *edge_;
  id<JavaUtilIterator> nodeIt_;
  ComVividsolutionsJtsNodingSegmentNode *currNode_;
  ComVividsolutionsJtsNodingSegmentNode *nextNode_;
  jint currSegIndex_;
}

- (void)readNextNode;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodeVertexIterator, nodeList_, ComVividsolutionsJtsNodingSegmentNodeList *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodeVertexIterator, edge_, ComVividsolutionsJtsNodingNodedSegmentString *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodeVertexIterator, nodeIt_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodeVertexIterator, currNode_, ComVividsolutionsJtsNodingSegmentNode *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingNodeVertexIterator, nextNode_, ComVividsolutionsJtsNodingSegmentNode *)

__attribute__((unused)) static void ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(ComVividsolutionsJtsNodingNodeVertexIterator *self);

@implementation ComVividsolutionsJtsNodingSegmentNodeList

- (instancetype)initWithComVividsolutionsJtsNodingNodedSegmentString:(ComVividsolutionsJtsNodingNodedSegmentString *)edge {
  ComVividsolutionsJtsNodingSegmentNodeList_initWithComVividsolutionsJtsNodingNodedSegmentString_(self, edge);
  return self;
}

- (ComVividsolutionsJtsNodingNodedSegmentString *)getEdge {
  return edge_;
}

- (ComVividsolutionsJtsNodingSegmentNode *)addWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)intPt
                                                                             withInt:(jint)segmentIndex {
  ComVividsolutionsJtsNodingSegmentNode *eiNew = [new_ComVividsolutionsJtsNodingSegmentNode_initWithComVividsolutionsJtsNodingNodedSegmentString_withComVividsolutionsJtsGeomCoordinate_withInt_withInt_(edge_, intPt, segmentIndex, [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(edge_)) getSegmentOctantWithInt:segmentIndex]) autorelease];
  ComVividsolutionsJtsNodingSegmentNode *ei = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([((id<JavaUtilMap>) nil_chk(nodeMap_)) getWithId:eiNew], [ComVividsolutionsJtsNodingSegmentNode class]);
  if (ei != nil) {
    ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(ei->coord_)) equals2DWithComVividsolutionsJtsGeomCoordinate:intPt], @"Found equal nodes with different coordinates");
    return ei;
  }
  [nodeMap_ putWithId:eiNew withId:eiNew];
  return eiNew;
}

- (id<JavaUtilIterator>)iterator {
  return [((id<JavaUtilCollection>) nil_chk([((id<JavaUtilMap>) nil_chk(nodeMap_)) values])) iterator];
}

- (void)addEndpoints {
  ComVividsolutionsJtsNodingSegmentNodeList_addEndpoints(self);
}

- (void)addCollapsedNodes {
  ComVividsolutionsJtsNodingSegmentNodeList_addCollapsedNodes(self);
}

- (void)findCollapsesFromExistingVerticesWithJavaUtilList:(id<JavaUtilList>)collapsedVertexIndexes {
  ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromExistingVerticesWithJavaUtilList_(self, collapsedVertexIndexes);
}

- (void)findCollapsesFromInsertedNodesWithJavaUtilList:(id<JavaUtilList>)collapsedVertexIndexes {
  ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromInsertedNodesWithJavaUtilList_(self, collapsedVertexIndexes);
}

- (jboolean)findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei0
                             withComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei1
                                                          withIntArray:(IOSIntArray *)collapsedVertexIndex {
  return ComVividsolutionsJtsNodingSegmentNodeList_findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode_withComVividsolutionsJtsNodingSegmentNode_withIntArray_(self, ei0, ei1, collapsedVertexIndex);
}

- (void)addSplitEdgesWithJavaUtilCollection:(id<JavaUtilCollection>)edgeList {
  ComVividsolutionsJtsNodingSegmentNodeList_addEndpoints(self);
  ComVividsolutionsJtsNodingSegmentNodeList_addCollapsedNodes(self);
  id<JavaUtilIterator> it = [self iterator];
  ComVividsolutionsJtsNodingSegmentNode *eiPrev = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([((id<JavaUtilIterator>) nil_chk(it)) next], [ComVividsolutionsJtsNodingSegmentNode class]);
  while ([it hasNext]) {
    ComVividsolutionsJtsNodingSegmentNode *ei = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([it next], [ComVividsolutionsJtsNodingSegmentNode class]);
    id<ComVividsolutionsJtsNodingSegmentString> newEdge = [self createSplitEdgeWithComVividsolutionsJtsNodingSegmentNode:eiPrev withComVividsolutionsJtsNodingSegmentNode:ei];
    [((id<JavaUtilCollection>) nil_chk(edgeList)) addWithId:newEdge];
    eiPrev = ei;
  }
}

- (void)checkSplitEdgesCorrectnessWithJavaUtilList:(id<JavaUtilList>)splitEdges {
  IOSObjectArray *edgePts = [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(edge_)) getCoordinates];
  id<ComVividsolutionsJtsNodingSegmentString> split0 = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([((id<JavaUtilList>) nil_chk(splitEdges)) getWithInt:0], @protocol(ComVividsolutionsJtsNodingSegmentString));
  ComVividsolutionsJtsGeomCoordinate *pt0 = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(split0)) getCoordinateWithInt:0];
  if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(pt0)) equals2DWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(nil_chk(edgePts), 0)]) @throw [new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"bad split edge start point at ", pt0)) autorelease];
  id<ComVividsolutionsJtsNodingSegmentString> splitn = (id<ComVividsolutionsJtsNodingSegmentString>) check_protocol_cast([splitEdges getWithInt:[splitEdges size] - 1], @protocol(ComVividsolutionsJtsNodingSegmentString));
  IOSObjectArray *splitnPts = [((id<ComVividsolutionsJtsNodingSegmentString>) nil_chk(splitn)) getCoordinates];
  ComVividsolutionsJtsGeomCoordinate *ptn = IOSObjectArray_Get(splitnPts, ((IOSObjectArray *) nil_chk(splitnPts))->size_ - 1);
  if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(ptn)) equals2DWithComVividsolutionsJtsGeomCoordinate:IOSObjectArray_Get(edgePts, edgePts->size_ - 1)]) @throw [new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"bad split edge end point at ", ptn)) autorelease];
}

- (id<ComVividsolutionsJtsNodingSegmentString>)createSplitEdgeWithComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei0
                                                              withComVividsolutionsJtsNodingSegmentNode:(ComVividsolutionsJtsNodingSegmentNode *)ei1 {
  jint npts = ((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(ei1))->segmentIndex_ - ((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(ei0))->segmentIndex_ + 2;
  ComVividsolutionsJtsGeomCoordinate *lastSegStartPt = [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(edge_)) getCoordinateWithInt:ei1->segmentIndex_];
  jboolean useIntPt1 = [ei1 isInterior] || ![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(ei1->coord_)) equals2DWithComVividsolutionsJtsGeomCoordinate:lastSegStartPt];
  if (!useIntPt1) {
    npts--;
  }
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:npts type:ComVividsolutionsJtsGeomCoordinate_class_()];
  jint ipt = 0;
  IOSObjectArray_SetAndConsume(pts, ipt++, new_ComVividsolutionsJtsGeomCoordinate_initWithComVividsolutionsJtsGeomCoordinate_(ei0->coord_));
  for (jint i = ei0->segmentIndex_ + 1; i <= ei1->segmentIndex_; i++) {
    IOSObjectArray_Set(pts, ipt++, [edge_ getCoordinateWithInt:i]);
  }
  if (useIntPt1) IOSObjectArray_Set(pts, ipt, ei1->coord_);
  return [new_ComVividsolutionsJtsNodingNodedSegmentString_initWithComVividsolutionsJtsGeomCoordinateArray_withId_(pts, [edge_ getData]) autorelease];
}

- (void)printWithJavaIoPrintStream:(JavaIoPrintStream *)outArg {
  [((JavaIoPrintStream *) nil_chk(outArg)) printlnWithNSString:@"Intersections:"];
  for (id<JavaUtilIterator> it = [self iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsNodingSegmentNode *ei = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([it next], [ComVividsolutionsJtsNodingSegmentNode class]);
    [((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(ei)) printWithJavaIoPrintStream:outArg];
  }
}

- (void)dealloc {
  RELEASE_(nodeMap_);
  RELEASE_(edge_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsNodingNodedSegmentString:", "SegmentNodeList", NULL, 0x1, NULL, NULL },
    { "getEdge", NULL, "Lcom.vividsolutions.jts.noding.NodedSegmentString;", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomCoordinate:withInt:", "add", "Lcom.vividsolutions.jts.noding.SegmentNode;", 0x1, NULL, NULL },
    { "iterator", NULL, "Ljava.util.Iterator;", 0x1, NULL, NULL },
    { "addEndpoints", NULL, "V", 0x2, NULL, NULL },
    { "addCollapsedNodes", NULL, "V", 0x2, NULL, NULL },
    { "findCollapsesFromExistingVerticesWithJavaUtilList:", "findCollapsesFromExistingVertices", "V", 0x2, NULL, NULL },
    { "findCollapsesFromInsertedNodesWithJavaUtilList:", "findCollapsesFromInsertedNodes", "V", 0x2, NULL, NULL },
    { "findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode:withComVividsolutionsJtsNodingSegmentNode:withIntArray:", "findCollapseIndex", "Z", 0x2, NULL, NULL },
    { "addSplitEdgesWithJavaUtilCollection:", "addSplitEdges", "V", 0x1, NULL, NULL },
    { "checkSplitEdgesCorrectnessWithJavaUtilList:", "checkSplitEdgesCorrectness", "V", 0x2, NULL, NULL },
    { "createSplitEdgeWithComVividsolutionsJtsNodingSegmentNode:withComVividsolutionsJtsNodingSegmentNode:", "createSplitEdge", "Lcom.vividsolutions.jts.noding.SegmentString;", 0x0, NULL, NULL },
    { "printWithJavaIoPrintStream:", "print", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nodeMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "edge_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.NodedSegmentString;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingSegmentNodeList = { 2, "SegmentNodeList", "com.vividsolutions.jts.noding", NULL, 0x1, 13, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingSegmentNodeList;
}

@end

void ComVividsolutionsJtsNodingSegmentNodeList_initWithComVividsolutionsJtsNodingNodedSegmentString_(ComVividsolutionsJtsNodingSegmentNodeList *self, ComVividsolutionsJtsNodingNodedSegmentString *edge) {
  NSObject_init(self);
  ComVividsolutionsJtsNodingSegmentNodeList_setAndConsume_nodeMap_(self, new_JavaUtilTreeMap_init());
  ComVividsolutionsJtsNodingSegmentNodeList_set_edge_(self, edge);
}

ComVividsolutionsJtsNodingSegmentNodeList *new_ComVividsolutionsJtsNodingSegmentNodeList_initWithComVividsolutionsJtsNodingNodedSegmentString_(ComVividsolutionsJtsNodingNodedSegmentString *edge) {
  ComVividsolutionsJtsNodingSegmentNodeList *self = [ComVividsolutionsJtsNodingSegmentNodeList alloc];
  ComVividsolutionsJtsNodingSegmentNodeList_initWithComVividsolutionsJtsNodingNodedSegmentString_(self, edge);
  return self;
}

void ComVividsolutionsJtsNodingSegmentNodeList_addEndpoints(ComVividsolutionsJtsNodingSegmentNodeList *self) {
  jint maxSegIndex = [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(self->edge_)) size] - 1;
  [self addWithComVividsolutionsJtsGeomCoordinate:[self->edge_ getCoordinateWithInt:0] withInt:0];
  [self addWithComVividsolutionsJtsGeomCoordinate:[self->edge_ getCoordinateWithInt:maxSegIndex] withInt:maxSegIndex];
}

void ComVividsolutionsJtsNodingSegmentNodeList_addCollapsedNodes(ComVividsolutionsJtsNodingSegmentNodeList *self) {
  id<JavaUtilList> collapsedVertexIndexes = [new_JavaUtilArrayList_init() autorelease];
  ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromInsertedNodesWithJavaUtilList_(self, collapsedVertexIndexes);
  ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromExistingVerticesWithJavaUtilList_(self, collapsedVertexIndexes);
  for (id<JavaUtilIterator> it = [collapsedVertexIndexes iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    jint vertexIndex = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([it next], [JavaLangInteger class])))) intValue];
    [self addWithComVividsolutionsJtsGeomCoordinate:[((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(self->edge_)) getCoordinateWithInt:vertexIndex] withInt:vertexIndex];
  }
}

void ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromExistingVerticesWithJavaUtilList_(ComVividsolutionsJtsNodingSegmentNodeList *self, id<JavaUtilList> collapsedVertexIndexes) {
  for (jint i = 0; i < [((ComVividsolutionsJtsNodingNodedSegmentString *) nil_chk(self->edge_)) size] - 2; i++) {
    ComVividsolutionsJtsGeomCoordinate *p0 = [self->edge_ getCoordinateWithInt:i];
    ComVividsolutionsJtsGeomCoordinate *p1 = [self->edge_ getCoordinateWithInt:i + 1];
    ComVividsolutionsJtsGeomCoordinate *p2 = [self->edge_ getCoordinateWithInt:i + 2];
    if ([((ComVividsolutionsJtsGeomCoordinate *) nil_chk(p0)) equals2DWithComVividsolutionsJtsGeomCoordinate:p2]) {
      [((id<JavaUtilList>) nil_chk(collapsedVertexIndexes)) addWithId:[new_JavaLangInteger_initWithInt_(i + 1) autorelease]];
    }
  }
}

void ComVividsolutionsJtsNodingSegmentNodeList_findCollapsesFromInsertedNodesWithJavaUtilList_(ComVividsolutionsJtsNodingSegmentNodeList *self, id<JavaUtilList> collapsedVertexIndexes) {
  IOSIntArray *collapsedVertexIndex = [IOSIntArray arrayWithLength:1];
  id<JavaUtilIterator> it = [self iterator];
  ComVividsolutionsJtsNodingSegmentNode *eiPrev = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([((id<JavaUtilIterator>) nil_chk(it)) next], [ComVividsolutionsJtsNodingSegmentNode class]);
  while ([it hasNext]) {
    ComVividsolutionsJtsNodingSegmentNode *ei = (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([it next], [ComVividsolutionsJtsNodingSegmentNode class]);
    jboolean isCollapsed = ComVividsolutionsJtsNodingSegmentNodeList_findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode_withComVividsolutionsJtsNodingSegmentNode_withIntArray_(self, eiPrev, ei, collapsedVertexIndex);
    if (isCollapsed) [((id<JavaUtilList>) nil_chk(collapsedVertexIndexes)) addWithId:[new_JavaLangInteger_initWithInt_(IOSIntArray_Get(collapsedVertexIndex, 0)) autorelease]];
    eiPrev = ei;
  }
}

jboolean ComVividsolutionsJtsNodingSegmentNodeList_findCollapseIndexWithComVividsolutionsJtsNodingSegmentNode_withComVividsolutionsJtsNodingSegmentNode_withIntArray_(ComVividsolutionsJtsNodingSegmentNodeList *self, ComVividsolutionsJtsNodingSegmentNode *ei0, ComVividsolutionsJtsNodingSegmentNode *ei1, IOSIntArray *collapsedVertexIndex) {
  if (![((ComVividsolutionsJtsGeomCoordinate *) nil_chk(((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(ei0))->coord_)) equals2DWithComVividsolutionsJtsGeomCoordinate:((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(ei1))->coord_]) return NO;
  jint numVerticesBetween = ei1->segmentIndex_ - ei0->segmentIndex_;
  if (![ei1 isInterior]) {
    numVerticesBetween--;
  }
  if (numVerticesBetween == 1) {
    *IOSIntArray_GetRef(nil_chk(collapsedVertexIndex), 0) = ei0->segmentIndex_ + 1;
    return YES;
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingSegmentNodeList)

@implementation ComVividsolutionsJtsNodingNodeVertexIterator

- (instancetype)initWithComVividsolutionsJtsNodingSegmentNodeList:(ComVividsolutionsJtsNodingSegmentNodeList *)nodeList {
  ComVividsolutionsJtsNodingNodeVertexIterator_initWithComVividsolutionsJtsNodingSegmentNodeList_(self, nodeList);
  return self;
}

- (jboolean)hasNext {
  if (nextNode_ == nil) return NO;
  return YES;
}

- (id)next {
  if (currNode_ == nil) {
    ComVividsolutionsJtsNodingNodeVertexIterator_set_currNode_(self, nextNode_);
    currSegIndex_ = ((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(currNode_))->segmentIndex_;
    ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(self);
    return currNode_;
  }
  if (nextNode_ == nil) return nil;
  if (((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(nextNode_))->segmentIndex_ == ((ComVividsolutionsJtsNodingSegmentNode *) nil_chk(currNode_))->segmentIndex_) {
    ComVividsolutionsJtsNodingNodeVertexIterator_set_currNode_(self, nextNode_);
    currSegIndex_ = currNode_->segmentIndex_;
    ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(self);
    return currNode_;
  }
  if (nextNode_->segmentIndex_ > currNode_->segmentIndex_) {
  }
  return nil;
}

- (void)readNextNode {
  ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(self);
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_([[self getClass] getName]) autorelease];
}

- (void)dealloc {
  RELEASE_(nodeList_);
  RELEASE_(edge_);
  RELEASE_(nodeIt_);
  RELEASE_(currNode_);
  RELEASE_(nextNode_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsNodingSegmentNodeList:", "NodeVertexIterator", NULL, 0x0, NULL, NULL },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "readNextNode", NULL, "V", 0x2, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "nodeList_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.SegmentNodeList;", NULL, NULL,  },
    { "edge_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.NodedSegmentString;", NULL, NULL,  },
    { "nodeIt_", NULL, 0x2, "Ljava.util.Iterator;", NULL, NULL,  },
    { "currNode_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.SegmentNode;", NULL, NULL,  },
    { "nextNode_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.SegmentNode;", NULL, NULL,  },
    { "currSegIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingNodeVertexIterator = { 2, "NodeVertexIterator", "com.vividsolutions.jts.noding", NULL, 0x0, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingNodeVertexIterator;
}

@end

void ComVividsolutionsJtsNodingNodeVertexIterator_initWithComVividsolutionsJtsNodingSegmentNodeList_(ComVividsolutionsJtsNodingNodeVertexIterator *self, ComVividsolutionsJtsNodingSegmentNodeList *nodeList) {
  NSObject_init(self);
  ComVividsolutionsJtsNodingNodeVertexIterator_set_currNode_(self, nil);
  ComVividsolutionsJtsNodingNodeVertexIterator_set_nextNode_(self, nil);
  self->currSegIndex_ = 0;
  ComVividsolutionsJtsNodingNodeVertexIterator_set_nodeList_(self, nodeList);
  ComVividsolutionsJtsNodingNodeVertexIterator_set_edge_(self, [((ComVividsolutionsJtsNodingSegmentNodeList *) nil_chk(nodeList)) getEdge]);
  ComVividsolutionsJtsNodingNodeVertexIterator_set_nodeIt_(self, [nodeList iterator]);
  ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(self);
}

ComVividsolutionsJtsNodingNodeVertexIterator *new_ComVividsolutionsJtsNodingNodeVertexIterator_initWithComVividsolutionsJtsNodingSegmentNodeList_(ComVividsolutionsJtsNodingSegmentNodeList *nodeList) {
  ComVividsolutionsJtsNodingNodeVertexIterator *self = [ComVividsolutionsJtsNodingNodeVertexIterator alloc];
  ComVividsolutionsJtsNodingNodeVertexIterator_initWithComVividsolutionsJtsNodingSegmentNodeList_(self, nodeList);
  return self;
}

void ComVividsolutionsJtsNodingNodeVertexIterator_readNextNode(ComVividsolutionsJtsNodingNodeVertexIterator *self) {
  if ([((id<JavaUtilIterator>) nil_chk(self->nodeIt_)) hasNext]) ComVividsolutionsJtsNodingNodeVertexIterator_set_nextNode_(self, (ComVividsolutionsJtsNodingSegmentNode *) check_class_cast([self->nodeIt_ next], [ComVividsolutionsJtsNodingSegmentNode class]));
  else ComVividsolutionsJtsNodingNodeVertexIterator_set_nextNode_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingNodeVertexIterator)
