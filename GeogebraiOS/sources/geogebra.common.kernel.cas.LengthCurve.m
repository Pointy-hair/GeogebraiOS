//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/LengthCurve.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/cas/LengthCurve.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelCasLengthCurve () {
 @public
  GeogebraCommonKernelGeosGeoCurveCartesian *c1_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasLengthCurve, c1_, GeogebraCommonKernelGeosGeoCurveCartesian *)

@implementation GeogebraCommonKernelCasLengthCurve

- (instancetype)initWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)c1 {
  GeogebraCommonKernelCasLengthCurve_initWithGeogebraCommonKernelGeosGeoCurveCartesian_(self, c1);
  return self;
}

- (jdouble)evaluateWithDouble:(jdouble)t {
  IOSDoubleArray *f1eval = [IOSDoubleArray arrayWithLength:2];
  [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(c1_)) evaluateCurveWithDouble:t withDoubleArray:f1eval];
  return (JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(f1eval, 0) * IOSDoubleArray_Get(f1eval, 0) + IOSDoubleArray_Get(f1eval, 1) * IOSDoubleArray_Get(f1eval, 1)));
}

- (void)dealloc {
  RELEASE_(c1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoCurveCartesian:", "LengthCurve", NULL, 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "c1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasLengthCurve = { 2, "LengthCurve", "geogebra.common.kernel.cas", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasLengthCurve;
}

@end

void GeogebraCommonKernelCasLengthCurve_initWithGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelCasLengthCurve *self, GeogebraCommonKernelGeosGeoCurveCartesian *c1) {
  NSObject_init(self);
  GeogebraCommonKernelCasLengthCurve_set_c1_(self, c1);
}

GeogebraCommonKernelCasLengthCurve *new_GeogebraCommonKernelCasLengthCurve_initWithGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelGeosGeoCurveCartesian *c1) {
  GeogebraCommonKernelCasLengthCurve *self = [GeogebraCommonKernelCasLengthCurve alloc];
  GeogebraCommonKernelCasLengthCurve_initWithGeogebraCommonKernelGeosGeoCurveCartesian_(self, c1);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasLengthCurve)
