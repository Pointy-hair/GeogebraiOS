//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoRSquare.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoRSquare.h"

@interface GeogebraCommonKernelStatisticsAlgoRSquare () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  id<GeogebraCommonKernelGeosGeoFunctionable> function_;
  GeogebraCommonKernelGeosGeoNumeric *r2_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRSquare, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRSquare, function_, id<GeogebraCommonKernelGeosGeoFunctionable>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRSquare, r2_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoRSquare_compute(GeogebraCommonKernelStatisticsAlgoRSquare *self);

@implementation GeogebraCommonKernelStatisticsAlgoRSquare

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
             withGeogebraCommonKernelGeosGeoFunctionable:(id<GeogebraCommonKernelGeosGeoFunctionable>)function {
  GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(self, cons, label, inputList, function);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
             withGeogebraCommonKernelGeosGeoFunctionable:(id<GeogebraCommonKernelGeosGeoFunctionable>)function {
  GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RSquare();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(function_)) toGeoElement]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:r2_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getRSquare {
  return r2_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoRSquare_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(function_);
  RELEASE_(r2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoFunctionable:", "AlgoRSquare", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoFunctionable:", "AlgoRSquare", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRSquare", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "function_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionable;", NULL, NULL,  },
    { "r2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoRSquare = { 2, "AlgoRSquare", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoRSquare;
}

@end

void GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(GeogebraCommonKernelStatisticsAlgoRSquare *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelGeosGeoFunctionable> function) {
  GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoRSquare *new_GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelGeosGeoFunctionable> function) {
  GeogebraCommonKernelStatisticsAlgoRSquare *self = [GeogebraCommonKernelStatisticsAlgoRSquare alloc];
  GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(self, cons, label, inputList, function);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(GeogebraCommonKernelStatisticsAlgoRSquare *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelGeosGeoFunctionable> function) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoRSquare_set_inputList_(self, inputList);
  GeogebraCommonKernelStatisticsAlgoRSquare_set_function_(self, function);
  GeogebraCommonKernelStatisticsAlgoRSquare_setAndConsume_r2_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoRSquare_compute(self);
}

GeogebraCommonKernelStatisticsAlgoRSquare *new_GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelGeosGeoFunctionable> function) {
  GeogebraCommonKernelStatisticsAlgoRSquare *self = [GeogebraCommonKernelStatisticsAlgoRSquare alloc];
  GeogebraCommonKernelStatisticsAlgoRSquare_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoFunctionable_(self, cons, inputList, function);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoRSquare_compute(GeogebraCommonKernelStatisticsAlgoRSquare *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(self->function_)) toGeoElement])) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setUndefined];
    return;
  }
  GeogebraCommonKernelGeosGeoFunction *funGeo = [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(self->function_)) getGeoFunction];
  jdouble sumyy = 0.0;
  jdouble sumy = 0.0;
  jdouble syy = 0.0;
  jdouble errorsum = 0.0;
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  GeogebraCommonKernelGeosGeoPoint *point = nil;
  jdouble x, y, v;
  for (jint i = 0; i < self->size_; i++) {
    geo = [self->inputList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]);
      x = [point getX];
      y = [point getY];
      v = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(funGeo)) evaluateWithDouble:x];
      errorsum += (v - y) * (v - y);
      sumy += y;
      sumyy += y * y;
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setUndefined];
      return;
    }
  }
  syy = sumyy - sumy * sumy / self->size_;
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->r2_)) setValueWithDouble:1 - errorsum / syy];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoRSquare)
