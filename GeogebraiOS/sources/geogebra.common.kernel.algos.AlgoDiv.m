//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDiv.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDiv.h"
#include "geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Math.h"

@implementation GeogebraCommonKernelAlgosAlgoDiv

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  GeogebraCommonKernelAlgosAlgoDiv_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Div();
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    jdouble numerator = GeogebraCommonKernelKernel_checkIntegerWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble]);
    jdouble denominator = GeogebraCommonKernelKernel_checkIntegerWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble]);
    if (JavaLangMath_absWithDouble_(numerator) > GeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_() || JavaLangMath_absWithDouble_(denominator) > GeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_()) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
      return;
    }
    jdouble fraction = numerator / denominator;
    jdouble integer = JavaLangMath_roundWithDouble_(fraction);
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(fraction, integer)) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:integer];
    }
    else if (denominator > 0) {
      jdouble div = JavaLangMath_floorWithDouble_(fraction);
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:div];
    }
    else {
      jdouble div = JavaLangMath_ceilWithDouble_(fraction);
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:div];
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoDiv", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDiv = { 2, "AlgoDiv", "geogebra.common.kernel.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDiv;
}

@end

void GeogebraCommonKernelAlgosAlgoDiv_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoDiv *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
}

GeogebraCommonKernelAlgosAlgoDiv *new_GeogebraCommonKernelAlgosAlgoDiv_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoDiv *self = [GeogebraCommonKernelAlgosAlgoDiv alloc];
  GeogebraCommonKernelAlgosAlgoDiv_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDiv)
