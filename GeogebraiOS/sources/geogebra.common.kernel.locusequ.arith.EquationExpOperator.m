//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/arith/EquationExpOperator.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "geogebra/common/kernel/locusequ/arith/EquationBinaryOperator.h"
#include "geogebra/common/kernel/locusequ/arith/EquationExpOperator.h"
#include "geogebra/common/kernel/locusequ/arith/EquationExpression.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@implementation GeogebraCommonKernelLocusequArithEquationExpOperator

- (instancetype)initWithGeogebraCommonKernelLocusequArithEquationExpression:(GeogebraCommonKernelLocusequArithEquationExpression *)base
                    withGeogebraCommonKernelLocusequArithEquationExpression:(GeogebraCommonKernelLocusequArithEquationExpression *)exp {
  GeogebraCommonKernelLocusequArithEquationExpOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_withGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
  return self;
}

- (GeogebraCommonKernelLocusequArithEquationExpression *)getBase {
  return [super getFirstExpression];
}

- (GeogebraCommonKernelLocusequArithEquationExpression *)getExp {
  return [super getSecondExpression];
}

- (jboolean)isExp {
  return YES;
}

- (jlong)toLong {
  return J2ObjCFpToLong(JavaLangMath_powWithDouble_withDouble_([((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) toLong], [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) toLong]));
}

- (NSString *)description {
  return JreStrcat("C$C$C", '(', [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) description], '^', [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) description], ')');
}

- (jdouble)operationWithDouble:(jdouble)a
                    withDouble:(jdouble)b {
  if (a == 0 && b == 0) {
    return JavaLangDouble_NaN;
  }
  return JavaLangMath_powWithDouble_withDouble_(a, b);
}

- (id)translateImplWithGeogebraCommonKernelLocusequEquationTranslator:(GeogebraCommonKernelLocusequEquationTranslator *)translator {
  return [((GeogebraCommonKernelLocusequEquationTranslator *) nil_chk(translator)) expWithId:[((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getBase])) translateWithGeogebraCommonKernelLocusequEquationTranslator:translator] withLong:[((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([self getExp])) toLong]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelLocusequArithEquationExpression:withGeogebraCommonKernelLocusequArithEquationExpression:", "EquationExpOperator", NULL, 0x1, NULL, NULL },
    { "getBase", NULL, "Lgeogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "getExp", NULL, "Lgeogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "isExp", NULL, "Z", 0x1, NULL, NULL },
    { "toLong", NULL, "J", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "operationWithDouble:withDouble:", "operation", "D", 0x4, NULL, NULL },
    { "translateImplWithGeogebraCommonKernelLocusequEquationTranslator:", "translateImpl", "TT;", 0x4, NULL, "<T:Ljava/lang/Object;>(Lgeogebra/common/kernel/locusequ/EquationTranslator<TT;>;)TT;" },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequArithEquationExpOperator = { 2, "EquationExpOperator", "geogebra.common.kernel.locusequ.arith", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequArithEquationExpOperator;
}

@end

void GeogebraCommonKernelLocusequArithEquationExpOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_withGeogebraCommonKernelLocusequArithEquationExpression_(GeogebraCommonKernelLocusequArithEquationExpOperator *self, GeogebraCommonKernelLocusequArithEquationExpression *base, GeogebraCommonKernelLocusequArithEquationExpression *exp) {
  GeogebraCommonKernelLocusequArithEquationBinaryOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_withGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
}

GeogebraCommonKernelLocusequArithEquationExpOperator *new_GeogebraCommonKernelLocusequArithEquationExpOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_withGeogebraCommonKernelLocusequArithEquationExpression_(GeogebraCommonKernelLocusequArithEquationExpression *base, GeogebraCommonKernelLocusequArithEquationExpression *exp) {
  GeogebraCommonKernelLocusequArithEquationExpOperator *self = [GeogebraCommonKernelLocusequArithEquationExpOperator alloc];
  GeogebraCommonKernelLocusequArithEquationExpOperator_initWithGeogebraCommonKernelLocusequArithEquationExpression_withGeogebraCommonKernelLocusequArithEquationExpression_(self, base, exp);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequArithEquationExpOperator)
