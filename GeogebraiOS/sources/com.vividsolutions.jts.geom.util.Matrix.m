//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geom/util/Matrix.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/util/Matrix.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@interface ComVividsolutionsJtsGeomUtilMatrix ()

+ (void)swapRowsWithDoubleArray2:(IOSObjectArray *)m
                         withInt:(jint)i
                         withInt:(jint)j;

+ (void)swapRowsWithDoubleArray:(IOSDoubleArray *)m
                        withInt:(jint)i
                        withInt:(jint)j;

@end

__attribute__((unused)) static void ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray2_withInt_withInt_(IOSObjectArray *m, jint i, jint j);

__attribute__((unused)) static void ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray_withInt_withInt_(IOSDoubleArray *m, jint i, jint j);

@implementation ComVividsolutionsJtsGeomUtilMatrix

+ (void)swapRowsWithDoubleArray2:(IOSObjectArray *)m
                         withInt:(jint)i
                         withInt:(jint)j {
  ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray2_withInt_withInt_(m, i, j);
}

+ (void)swapRowsWithDoubleArray:(IOSDoubleArray *)m
                        withInt:(jint)i
                        withInt:(jint)j {
  ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray_withInt_withInt_(m, i, j);
}

+ (IOSDoubleArray *)solveWithDoubleArray2:(IOSObjectArray *)a
                          withDoubleArray:(IOSDoubleArray *)b {
  return ComVividsolutionsJtsGeomUtilMatrix_solveWithDoubleArray2_withDoubleArray_(a, b);
}

- (instancetype)init {
  ComVividsolutionsJtsGeomUtilMatrix_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "swapRowsWithDoubleArray2:withInt:withInt:", "swapRows", "V", 0xa, NULL, NULL },
    { "swapRowsWithDoubleArray:withInt:withInt:", "swapRows", "V", 0xa, NULL, NULL },
    { "solveWithDoubleArray2:withDoubleArray:", "solve", "[D", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomUtilMatrix = { 2, "Matrix", "com.vividsolutions.jts.geom.util", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomUtilMatrix;
}

@end

void ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray2_withInt_withInt_(IOSObjectArray *m, jint i, jint j) {
  ComVividsolutionsJtsGeomUtilMatrix_initialize();
  if (i == j) return;
  for (jint col = 0; col < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(m), 0)))->size_; col++) {
    jdouble temp = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(m, i)), col);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(m, i)), col) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(m, j)), col);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(m, j)), col) = temp;
  }
}

void ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray_withInt_withInt_(IOSDoubleArray *m, jint i, jint j) {
  ComVividsolutionsJtsGeomUtilMatrix_initialize();
  if (i == j) return;
  jdouble temp = IOSDoubleArray_Get(nil_chk(m), i);
  *IOSDoubleArray_GetRef(m, i) = IOSDoubleArray_Get(m, j);
  *IOSDoubleArray_GetRef(m, j) = temp;
}

IOSDoubleArray *ComVividsolutionsJtsGeomUtilMatrix_solveWithDoubleArray2_withDoubleArray_(IOSObjectArray *a, IOSDoubleArray *b) {
  ComVividsolutionsJtsGeomUtilMatrix_initialize();
  jint n = ((IOSDoubleArray *) nil_chk(b))->size_;
  if (((IOSObjectArray *) nil_chk(a))->size_ != n || ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(a, 0)))->size_ != n) @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Matrix A is incorrectly sized") autorelease];
  for (jint i = 0; i < n; i++) {
    jint maxElementRow = i;
    for (jint j = i + 1; j < n; j++) if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, j)), i)) > JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, maxElementRow)), i))) maxElementRow = j;
    if (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, maxElementRow)), i) == 0.0) return nil;
    ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray2_withInt_withInt_(a, i, maxElementRow);
    ComVividsolutionsJtsGeomUtilMatrix_swapRowsWithDoubleArray_withInt_withInt_(b, i, maxElementRow);
    for (jint j = i + 1; j < n; j++) {
      jdouble rowFactor = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, j)), i) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, i)), i);
      for (jint k = n - 1; k >= i; k--) *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(a, j)), k) -= IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, i)), k) * rowFactor;
      *IOSDoubleArray_GetRef(b, j) -= IOSDoubleArray_Get(b, i) * rowFactor;
    }
  }
  IOSDoubleArray *solution = [IOSDoubleArray arrayWithLength:n];
  for (jint j = n - 1; j >= 0; j--) {
    jdouble t = 0.0;
    for (jint k = j + 1; k < n; k++) t += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, j)), k) * IOSDoubleArray_Get(solution, k);
    *IOSDoubleArray_GetRef(solution, j) = (IOSDoubleArray_Get(b, j) - t) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(a, j)), j);
  }
  return solution;
}

void ComVividsolutionsJtsGeomUtilMatrix_init(ComVividsolutionsJtsGeomUtilMatrix *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsGeomUtilMatrix *new_ComVividsolutionsJtsGeomUtilMatrix_init() {
  ComVividsolutionsJtsGeomUtilMatrix *self = [ComVividsolutionsJtsGeomUtilMatrix alloc];
  ComVividsolutionsJtsGeomUtilMatrix_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomUtilMatrix)
