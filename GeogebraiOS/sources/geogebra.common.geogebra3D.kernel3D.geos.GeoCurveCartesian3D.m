//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/DistanceFunction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Matrix/Coords3D.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMacro.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/optimization/ExtremumFinder.h"
#include "geogebra/common/kernel/roots/RealRootFunction.h"
#include "geogebra/common/kernel/roots/RealRootUtil.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D () {
 @public
  jboolean trace_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
}

- (void)updateDerivatives;

- (void)transformWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)m;

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                  withBoolean:(jboolean)changePoint;

- (jdouble)adjustRangeWithDouble:(jdouble)startValResult;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, GeogebraCommonKernelMatrixCoordMatrix4x4 *m);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_pathChangedWithGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, jboolean changePoint);

__attribute__((unused)) static jdouble GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_adjustRangeWithDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, jdouble startValResult);

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction : NSObject < GeogebraCommonKernelDistanceFunction > {
 @public
  GeogebraCommonKernelMatrixCoords *distCoords_, *distDirection_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)outer$
                    withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)curve;

- (void)setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p;

- (jdouble)evaluateWithDouble:(jdouble)t;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction, distCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction, distDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction, curve_, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction *self, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *outer$, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction *new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *outer$, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelArithmeticFunctionArray:(IOSObjectArray *)fun {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionArray_(self, c, fun);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)curve {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, curve);
  return self;
}

- (GeogebraCommonKernelArithmeticFunction *)getFunWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(fun_), i);
}

- (GeogebraCommonKernelMatrixCoords *)evaluateTangentWithDouble:(jdouble)t {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(self);
  GeogebraCommonKernelMatrixCoords *v = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  for (jint i = 0; i < 3; i++) [v setWithInt:i + 1 withDouble:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(funD1_), i))) evaluateWithDouble:t]];
  return [v normalized];
}

- (void)evaluateCurveWithDouble:(jdouble)t
                withDoubleArray:(IOSDoubleArray *)outArg {
  for (jint i = 0; i < 3; i++) {
    *IOSDoubleArray_GetRef(nil_chk(outArg), i) = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), i))) evaluateWithDouble:t];
  }
}

- (IOSDoubleArray *)newDoubleArray {
  return [IOSDoubleArray arrayWithLength:3];
}

- (GeogebraCommonKernelMatrixCoords *)evaluateCurve3DWithDouble:(jdouble)t {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), 0))) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, 1))) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, 2))) evaluateWithDouble:t], 1) autorelease];
}

- (GeogebraCommonKernelMatrixCoords3D *)evaluateTangent3DWithDouble:(jdouble)t {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(self);
  return [((GeogebraCommonKernelMatrixCoords3D *) [new_GeogebraCommonKernelMatrixCoords3D_initWithDouble_withDouble_withDouble_withDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(funD1_), 0))) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(funD1_, 1))) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(funD1_, 2))) evaluateWithDouble:t], 1) autorelease]) normalize];
}

- (jdouble)evaluateCurvatureWithDouble:(jdouble)t {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(self);
  GeogebraCommonKernelMatrixCoords *D1 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  GeogebraCommonKernelMatrixCoords *D2 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  for (jint i = 0; i < 3; i++) [D1 setWithInt:i + 1 withDouble:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(funD1_), i))) evaluateWithDouble:t]];
  for (jint i = 0; i < 3; i++) [D2 setWithInt:i + 1 withDouble:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(funD2_), i))) evaluateWithDouble:t]];
  GeogebraCommonKernelMatrixCoords *cross = [D1 crossProductWithGeogebraCommonKernelMatrixCoords:D2];
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(cross)) norm] / JavaLangMath_powWithDouble_withDouble_([D1 norm], 3);
}

- (void)updateDerivatives {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(self);
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self) autorelease];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (!([geo isKindOfClass:[GeogebraCommonKernelKernelNDGeoCurveCartesianND class]])) {
    return;
  }
  GeogebraCommonKernelKernelNDGeoCurveCartesianND *geoCurve = (GeogebraCommonKernelKernelNDGeoCurveCartesianND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoCurveCartesianND class]);
  for (jint i = 0; i < 2; i++) {
    IOSObjectArray_SetAndConsume(nil_chk(fun_), i, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_([((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(geoCurve)) getFunWithInt:i], kernel_));
  }
  if ([((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(geoCurve)) isGeoElement3D]) {
    IOSObjectArray_SetAndConsume(nil_chk(fun_), 2, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_([geoCurve getFunWithInt:2], kernel_));
  }
  else {
    IOSObjectArray_SetAndConsume(nil_chk(fun_), 2, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 0) autorelease], [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"t") autorelease]));
  }
  startParam_ = [geoCurve getMinParameter];
  endParam_ = [geoCurve getMaxParameter];
  isDefined__ = [geoCurve isDefined];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getConstruction] != cons_ && [self isAlgoMacroOutput]) {
    if (![geo isIndependent]) {
      GeogebraCommonKernelAlgosAlgoMacro *algoMacro = (GeogebraCommonKernelAlgosAlgoMacro *) check_class_cast([self getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoMacro class]);
      for (jint i = 0; i < 3; i++) [((GeogebraCommonKernelAlgosAlgoMacro *) nil_chk(algoMacro)) initFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:IOSObjectArray_Get(nil_chk(fun_), i)];
    }
  }
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return YES;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_CURVE_CARTESIAN3D();
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithDouble_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3])) normalized], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (void)transformWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)m {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, m);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_Rotation4x4WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized], [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) getDouble], [line getStartInhomCoords], tmpMatrix4x4_);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, tmpMatrix4x4_);
}

- (IOSDoubleArray *)getDefinedIntervalWithDouble:(jdouble)a
                                      withDouble:(jdouble)b {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_getDefinedIntervalWithDouble_withDouble_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_(a, b, IOSObjectArray_Get(nil_chk(fun_), 0), IOSObjectArray_Get(fun_, 1), IOSObjectArray_Get(fun_, 2));
}

+ (IOSDoubleArray *)getDefinedIntervalWithDouble:(jdouble)a
                                      withDouble:(jdouble)b
   withGeogebraCommonKernelRootsRealRootFunction:(id<GeogebraCommonKernelRootsRealRootFunction>)funX
   withGeogebraCommonKernelRootsRealRootFunction:(id<GeogebraCommonKernelRootsRealRootFunction>)funY
   withGeogebraCommonKernelRootsRealRootFunction:(id<GeogebraCommonKernelRootsRealRootFunction>)funZ {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_getDefinedIntervalWithDouble_withDouble_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_(a, b, funX, funY, funZ);
}

- (jboolean)isClosedPath {
  return NO;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  jdouble t = [self getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:P withDouble:((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_];
  pp->t_ = t;
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_pathChangedWithGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, P, NO);
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getPath] == self) return YES;
  GeogebraCommonKernelPathParameter *pp = [PI getPathParameter];
  jdouble t = [self getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:PI withDouble:((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_];
  GeogebraCommonKernelMatrixCoords *coords = [PI getInhomCoordsInD3];
  jboolean onPath = JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), 0))) evaluateWithDouble:t] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX]) <= eps && JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, 1))) evaluateWithDouble:t] - [coords getY]) <= eps && JavaLangMath_absWithDouble_([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, 2))) evaluateWithDouble:t] - [coords getZ]) <= eps;
  return onPath;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_pathChangedWithGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, PI, ![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:PI]);
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                  withBoolean:(jboolean)changePoint {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_pathChangedWithGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, P, changePoint);
}

- (jdouble)getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                              withDouble:(jdouble)startValue {
  jdouble startVal = startValue;
  if (distFun_ == nil) GeogebraCommonKernelKernelNDGeoCurveCartesianND_setAndConsume_distFun_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, self));
  [((id<GeogebraCommonKernelDistanceFunction>) nil_chk(distFun_)) setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:P];
  {
    GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
    jdouble pathParam = ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_;
    if ([distFun_ evaluateWithDouble:pathParam] < GeogebraCommonKernelKernel_MIN_PRECISION * GeogebraCommonKernelKernel_MIN_PRECISION) return pathParam;
    if (JavaLangDouble_isNaNWithDouble_(startVal)) startVal = pathParam;
  }
  jdouble step = (endParam_ - startParam_) / GeogebraCommonKernelKernelNDGeoCurveCartesianND_CLOSEST_PARAMETER_SAMPLES;
  jdouble minVal = [distFun_ evaluateWithDouble:startParam_];
  jdouble minParam = startParam_;
  jdouble t = startParam_;
  for (jint i = 0; i < GeogebraCommonKernelKernelNDGeoCurveCartesianND_CLOSEST_PARAMETER_SAMPLES; i++) {
    t = t + step;
    jdouble ft = [distFun_ evaluateWithDouble:t];
    if (ft < minVal) {
      minVal = ft;
      minParam = t;
    }
  }
  jdouble left = minParam - step;
  jdouble right = minParam + step;
  GeogebraCommonKernelOptimizationExtremumFinder *extFinder = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getExtremumFinder];
  jdouble sampleResult = [((GeogebraCommonKernelOptimizationExtremumFinder *) nil_chk(extFinder)) findMinimumWithDouble:left withDouble:right withGeogebraCommonKernelRootsRealRootFunction:distFun_ withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
  sampleResult = GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_adjustRangeWithDouble_(self, sampleResult);
  if (!JavaLangDouble_isNaNWithDouble_(startVal) && (startVal < left || right < startVal)) {
    left = startVal - step;
    right = startVal + step;
    jdouble startValResult = [extFinder findMinimumWithDouble:left withDouble:right withGeogebraCommonKernelRootsRealRootFunction:distFun_ withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
    startValResult = GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_adjustRangeWithDouble_(self, startValResult);
    if ([distFun_ evaluateWithDouble:startValResult] < [distFun_ evaluateWithDouble:sampleResult] + GeogebraCommonKernelKernel_MIN_PRECISION / 2) {
      return startValResult;
    }
  }
  return sampleResult;
}

- (jdouble)adjustRangeWithDouble:(jdouble)startValResult {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_adjustRangeWithDouble_(self, startValResult);
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  for (jint i = 0; i < 3; i++) {
    GeogebraCommonKernelArithmeticExpressionNode *expr = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) check_class_cast([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), i))) deepCopyWithGeogebraCommonKernelKernel:kernel_], [GeogebraCommonKernelArithmeticFunction class])))) getExpression];
    GeogebraCommonKernelArithmeticExpressionNode *trans = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) plusWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getWithInt:i + 1]];
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, i))) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:trans];
  }
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [self dilateWithGeogebraCommonKernelArithmeticNumberValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease] withGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_AxialSymetryWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized], [line getStartInhomCoords]));
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonKernelMatrixCoordMatrix4x4 *m = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys])) getMatrixOrthonormal];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_PlaneSymetryWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(m)) getVz], [m getOrigin]));
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)ratio
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)P {
  [self translateWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) mulWithDouble:-1]];
  for (jint i = 0; i < 3; i++) {
    GeogebraCommonKernelArithmeticExpressionNode *expr = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) check_class_cast([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), i))) deepCopyWithGeogebraCommonKernelKernel:kernel_], [GeogebraCommonKernelArithmeticFunction class])))) getExpression];
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(fun_, i))) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ratio, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr) autorelease]];
  }
  [self translateWithGeogebraCommonKernelMatrixCoords:P];
}

- (void)clearCasEvalMapWithNSString:(NSString *)string {
}

- (jboolean)isFunctionInX {
  return NO;
}

- (jdouble)distanceMaxWithDoubleArray:(IOSDoubleArray *)p1
                      withDoubleArray:(IOSDoubleArray *)p2 {
  return JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(p1), 0) - IOSDoubleArray_Get(nil_chk(p2), 0)), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(p1, 1) - IOSDoubleArray_Get(p2, 1))), JavaLangMath_absWithDouble_(IOSDoubleArray_Get(p1, 2) - IOSDoubleArray_Get(p2, 2)));
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *)evaluateCurveWithDouble:(jdouble)t {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(self->kernel_, [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:0])) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:1])) evaluateWithDouble:t], [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:2])) evaluateWithDouble:t]) autorelease];
}

- (GeogebraCommonKernelKernelNDGeoCurveCartesianND *)newGeoCurveCartesianWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(tmpMatrix4x4_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoCurveCartesian3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionArray:", "GeoCurveCartesian3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "GeoCurveCartesian3D", NULL, 0x1, NULL, NULL },
    { "getFunWithInt:", "getFun", "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "evaluateTangentWithDouble:", "evaluateTangent", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateCurveWithDouble:withDoubleArray:", "evaluateCurve", "V", 0x1, NULL, NULL },
    { "newDoubleArray", NULL, "[D", 0x1, NULL, NULL },
    { "evaluateCurve3DWithDouble:", "evaluateCurve3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateTangent3DWithDouble:", "evaluateTangent3D", "Lgeogebra.common.kernel.Matrix.Coords3D;", 0x1, NULL, NULL },
    { "evaluateCurvatureWithDouble:", "evaluateCurvature", "D", 0x1, NULL, NULL },
    { "updateDerivatives", NULL, "V", 0x2, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "transformWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "transform", "V", 0x2, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "getDefinedIntervalWithDouble:withDouble:", "getDefinedInterval", "[D", 0x1, NULL, NULL },
    { "getDefinedIntervalWithDouble:withDouble:withGeogebraCommonKernelRootsRealRootFunction:withGeogebraCommonKernelRootsRealRootFunction:withGeogebraCommonKernelRootsRealRootFunction:", "getDefinedInterval", "[D", 0x9, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "pathChanged", "V", 0x2, NULL, NULL },
    { "getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "getClosestParameter", "D", 0x1, NULL, NULL },
    { "adjustRangeWithDouble:", "adjustRange", "D", 0x2, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "clearCasEvalMapWithNSString:", "clearCasEvalMap", "V", 0x1, NULL, NULL },
    { "isFunctionInX", NULL, "Z", 0x1, NULL, NULL },
    { "distanceMaxWithDoubleArray:withDoubleArray:", "distanceMax", "D", 0x1, NULL, NULL },
    { "evaluateCurveWithDouble:", "evaluateCurve", "Lgeogebra.common.geogebra3D.kernel3D.geos.Geo3DVec;", 0x1, NULL, NULL },
    { "newGeoCurveCartesianWithGeogebraCommonKernelConstruction:", "newGeoCurveCartesian", "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D$CurveCartesian3DDistanceFunction;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D = { 2, "GeoCurveCartesian3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 49, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithGeogebraCommonKernelConstruction_withInt_(self, c, 3);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionArray_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *fun) {
  GeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionArray_(self, c, fun);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionArray_(GeogebraCommonKernelConstruction *c, IOSObjectArray *fun) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionArray_(self, c, fun);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  GeogebraCommonKernelKernelNDGeoCurveCartesianND_initWithGeogebraCommonKernelConstruction_withInt_(self, ((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(curve))->cons_, 3);
  [self setWithGeogebraCommonKernelGeosGeoElement:curve];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, curve);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_updateDerivatives(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self) {
  jint dim = 3;
  GeogebraCommonKernelKernelNDGeoCurveCartesianND_setAndConsume_funD1_(self, [IOSObjectArray newArrayWithLength:dim type:GeogebraCommonKernelArithmeticFunction_class_()]);
  GeogebraCommonKernelKernelNDGeoCurveCartesianND_setAndConsume_funD2_(self, [IOSObjectArray newArrayWithLength:dim type:GeogebraCommonKernelArithmeticFunction_class_()]);
  for (jint i = 0; i < dim; i++) {
    IOSObjectArray_Set(self->funD1_, i, [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:i])) getDerivativeWithInt:1 withBoolean:YES]);
    IOSObjectArray_Set(self->funD2_, i, [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self getFunWithInt:i])) getDerivativeWithInt:2 withBoolean:YES]);
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_transformWithGeogebraCommonKernelMatrixCoordMatrix4x4_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, GeogebraCommonKernelMatrixCoordMatrix4x4 *m) {
  IOSObjectArray *expr = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelArithmeticExpressionNode_class_()];
  for (jint i = 0; i < 3; i++) {
    IOSObjectArray_Set(expr, i, [((GeogebraCommonKernelArithmeticFunction *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) check_class_cast([((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(self->fun_), i))) deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticFunction class])))) getExpression]);
  }
  for (jint row = 0; row < 3; row++) {
    IOSObjectArray *coeff = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelArithmeticMyDouble_class_()];
    for (jint i = 0; i < 4; i++) {
      IOSObjectArray_SetAndConsume(coeff, i, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(m)) getWithInt:row + 1 withInt:i + 1]));
    }
    GeogebraCommonKernelArithmeticExpressionNode *trans = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(coeff, 3)) autorelease];
    for (jint i = 0; i < 3; i++) {
      trans = [trans plusWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(expr, i))) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(coeff, i)]];
    }
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk(IOSObjectArray_Get(nil_chk(self->fun_), row))) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:trans];
  }
}

IOSDoubleArray *GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_getDefinedIntervalWithDouble_withDouble_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_withGeogebraCommonKernelRootsRealRootFunction_(jdouble a, jdouble b, id<GeogebraCommonKernelRootsRealRootFunction> funX, id<GeogebraCommonKernelRootsRealRootFunction> funY, id<GeogebraCommonKernelRootsRealRootFunction> funZ) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_initialize();
  IOSDoubleArray *interval = GeogebraCommonKernelRootsRealRootUtil_getDefinedIntervalWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_(funX, a, b);
  GeogebraCommonKernelRootsRealRootUtil_updateDefinedIntervalIntersectingWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDoubleArray_(funY, a, b, interval);
  GeogebraCommonKernelRootsRealRootUtil_updateDefinedIntervalIntersectingWithGeogebraCommonKernelRootsRealRootFunction_withDouble_withDouble_withDoubleArray_(funZ, a, b, interval);
  return interval;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_pathChangedWithGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, jboolean changePoint) {
  if (changePoint) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  if (((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ < self->startParam_) pp->t_ = self->startParam_;
  else if (pp->t_ > self->endParam_) pp->t_ = self->endParam_;
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:[self evaluateCurve3DWithDouble:pp->t_] withBoolean:NO];
}

jdouble GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_adjustRangeWithDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *self, jdouble startValResult) {
  if (startValResult < self->startParam_) {
    return startValResult + (self->endParam_ - self->startParam_);
  }
  if (startValResult > self->endParam_) {
    return startValResult - (self->endParam_ - self->startParam_);
  }
  return startValResult;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)outer$
                    withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)curve {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, outer$, curve);
  return self;
}

- (void)setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p3D = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    if ([p3D hasWillingCoords]) {
      GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_distCoords_(self, [p3D getWillingCoords]);
    }
    else {
      GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_distCoords_(self, [p3D getInhomCoordsInD3]);
    }
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_distDirection_(self, [p3D getWillingDirection]);
  }
  else {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_distCoords_(self, [p getInhomCoordsInD3]);
    GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_distDirection_(self, nil);
  }
}

- (jdouble)evaluateWithDouble:(jdouble)t {
  GeogebraCommonKernelMatrixCoords *eval = [((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(curve_)) evaluateCurve3DWithDouble:t];
  if (distDirection_ == nil || ![distDirection_ isDefined]) {
    return [((GeogebraCommonKernelMatrixCoords *) nil_chk(eval)) squareDistance3WithGeogebraCommonKernelMatrixCoords:distCoords_];
  }
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(eval)) squareDistLine3WithGeogebraCommonKernelMatrixCoords:distCoords_ withGeogebraCommonKernelMatrixCoords:distDirection_];
}

- (void)dealloc {
  RELEASE_(distCoords_);
  RELEASE_(distDirection_);
  RELEASE_(curve_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "CurveCartesian3DDistanceFunction", NULL, 0x1, NULL, NULL },
    { "setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setDistantPoint", "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "distCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "distDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "curve_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction = { 2, "CurveCartesian3DDistanceFunction", "geogebra.common.geogebra3D.kernel3D.geos", "GeoCurveCartesian3D", 0x2, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction *self, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *outer$, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_set_curve_(self, curve);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction *new_GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *outer$, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *curve) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, outer$, curve);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_CurveCartesian3DDistanceFunction)
