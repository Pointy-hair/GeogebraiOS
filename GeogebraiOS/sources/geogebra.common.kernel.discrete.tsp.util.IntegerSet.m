//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/tsp/util/IntegerSet.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/discrete/tsp/util/IntegerSet.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"

@interface GeogebraCommonKernelDiscreteTspUtilIntegerSet () {
 @public
  IOSIntArray *bitset_;
  IOSIntArray *list_;
  jint size__;
  IOSIntArray *index_;
}

- (void)swapWithInt:(jint)n1
            withInt:(jint)n2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilIntegerSet, bitset_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilIntegerSet, list_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelDiscreteTspUtilIntegerSet, index_, IOSIntArray *)

__attribute__((unused)) static void GeogebraCommonKernelDiscreteTspUtilIntegerSet_swapWithInt_withInt_(GeogebraCommonKernelDiscreteTspUtilIntegerSet *self, jint n1, jint n2);

@implementation GeogebraCommonKernelDiscreteTspUtilIntegerSet

- (jint)size {
  return self->size__;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_initWithInt_(self, initialCapacity);
  return self;
}

- (jboolean)containsWithInt:(jint)value {
  return IOSIntArray_Get(nil_chk(self->bitset_), value) > 0;
}

- (jboolean)addWithInt:(jint)value {
  if (IOSIntArray_Get(nil_chk(self->bitset_), value) == 0) {
    *IOSIntArray_GetRef(nil_chk(self->list_), self->size__++) = value;
    *IOSIntArray_GetRef(self->bitset_, value) = self->size__;
    return YES;
  }
  return NO;
}

- (jint)getWithInt:(jint)index {
  if (index >= self->size__) {
    @throw [new_JavaLangArrayIndexOutOfBoundsException_init() autorelease];
  }
  return IOSIntArray_Get(nil_chk(self->list_), index);
}

- (jboolean)removeWithInt:(jint)value {
  if (IOSIntArray_Get(nil_chk(self->bitset_), value) > 0) {
    jint index = IOSIntArray_Get(self->bitset_, value) - 1;
    GeogebraCommonKernelDiscreteTspUtilIntegerSet_swapWithInt_withInt_(self, index, --self->size__);
    *IOSIntArray_GetRef(self->bitset_, IOSIntArray_Get(nil_chk(self->list_), index)) = IOSIntArray_Get(self->bitset_, value);
    *IOSIntArray_GetRef(self->bitset_, value) = 0;
    return YES;
  }
  return NO;
}

- (void)swapWithInt:(jint)n1
            withInt:(jint)n2 {
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_swapWithInt_withInt_(self, n1, n2);
}

- (void)dealloc {
  RELEASE_(bitset_);
  RELEASE_(list_);
  RELEASE_(index_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "initWithInt:", "IntegerSet", NULL, 0x1, NULL, NULL },
    { "containsWithInt:", "contains", "Z", 0x1, NULL, NULL },
    { "addWithInt:", "add", "Z", 0x1, NULL, NULL },
    { "getWithInt:", "get", "I", 0x1, NULL, NULL },
    { "removeWithInt:", "remove", "Z", 0x1, NULL, NULL },
    { "swapWithInt:withInt:", "swap", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bitset_", NULL, 0x2, "[I", NULL, NULL,  },
    { "list_", NULL, 0x2, "[I", NULL, NULL,  },
    { "size__", "size", 0x2, "I", NULL, NULL,  },
    { "index_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteTspUtilIntegerSet = { 2, "IntegerSet", "geogebra.common.kernel.discrete.tsp.util", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteTspUtilIntegerSet;
}

@end

void GeogebraCommonKernelDiscreteTspUtilIntegerSet_initWithInt_(GeogebraCommonKernelDiscreteTspUtilIntegerSet *self, jint initialCapacity) {
  NSObject_init(self);
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_setAndConsume_bitset_(self, [IOSIntArray newArrayWithLength:initialCapacity]);
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_setAndConsume_list_(self, [IOSIntArray newArrayWithLength:initialCapacity]);
  self->size__ = 0;
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_setAndConsume_index_(self, [IOSIntArray newArrayWithLength:initialCapacity]);
  for (jint i = 0; i < self->index_->size_; i++) {
    *IOSIntArray_GetRef(self->index_, i) = i;
  }
}

GeogebraCommonKernelDiscreteTspUtilIntegerSet *new_GeogebraCommonKernelDiscreteTspUtilIntegerSet_initWithInt_(jint initialCapacity) {
  GeogebraCommonKernelDiscreteTspUtilIntegerSet *self = [GeogebraCommonKernelDiscreteTspUtilIntegerSet alloc];
  GeogebraCommonKernelDiscreteTspUtilIntegerSet_initWithInt_(self, initialCapacity);
  return self;
}

void GeogebraCommonKernelDiscreteTspUtilIntegerSet_swapWithInt_withInt_(GeogebraCommonKernelDiscreteTspUtilIntegerSet *self, jint n1, jint n2) {
  jint tmp = IOSIntArray_Get(nil_chk(self->list_), n1);
  *IOSIntArray_GetRef(self->list_, n1) = IOSIntArray_Get(self->list_, n2);
  *IOSIntArray_GetRef(self->list_, n2) = tmp;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteTspUtilIntegerSet)
