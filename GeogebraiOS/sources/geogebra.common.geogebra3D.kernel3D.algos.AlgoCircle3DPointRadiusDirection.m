//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointRadiusDirection.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointRadiusDirection.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)forAxis {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, radius, forAxis);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)forAxis {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, point, radius, forAxis);
  return self;
}

- (jdouble)getRadius {
  return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self getSecondInput], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (NSString *)getCommandString {
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:[self getForAxis]]) return @"CircleWithCenterARadiusBParallelToC";
  return @"CircleWithCenterAandRadiusBAxisParallelToC";
}

- (jboolean)setCoordSys {
  if ([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast([self getForAxis], @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3] == nil) {
    return NO;
  }
  return [super setCoordSys];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoCircle3DPointRadiusDirection", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoCircle3DPointRadiusDirection", NULL, 0x1, NULL, NULL },
    { "getRadius", NULL, "D", 0x14, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getCommandString", NULL, "Ljava.lang.String;", 0x14, NULL, NULL },
    { "setCoordSys", NULL, "Z", 0x14, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection = { 2, "AlgoCircle3DPointRadiusDirection", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelArithmeticNumberValue> radius, id<GeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(radius)) toGeoElement], forAxis);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelArithmeticNumberValue> radius, id<GeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, radius, forAxis);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelArithmeticNumberValue> radius, id<GeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, point, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(radius)) toGeoElement], (GeogebraCommonKernelGeosGeoElement *) check_class_cast(forAxis, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelArithmeticNumberValue> radius, id<GeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, point, radius, forAxis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointRadiusDirection)
