//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationGenericPolygon.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/locusequ/EquationElement.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/elements/EquationGenericPolygon.h"
#include "java/lang/System.h"

@interface GeogebraCommonKernelLocusequElementsEquationGenericPolygon () {
 @public
  IOSObjectArray *segments_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationGenericPolygon, segments_, IOSObjectArray *)

@implementation GeogebraCommonKernelLocusequElementsEquationGenericPolygon

- (instancetype)init {
  GeogebraCommonKernelLocusequElementsEquationGenericPolygon_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)element
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationGenericPolygon_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, element, scope);
  return self;
}

- (GeogebraCommonKernelLocusequEquationList *)forPointImplWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  GeogebraCommonKernelLocusequEquationList *el = [new_GeogebraCommonKernelLocusequEquationList_initWithInt_(((IOSObjectArray *) nil_chk([self getSegments]))->size_) autorelease];
  {
    IOSObjectArray *a__ = [self getSegments];
    GeogebraCommonKernelGeosGeoSegment * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelGeosGeoSegment * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelGeosGeoSegment *s = *b__++;
      [el addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationElement *) nil_chk([((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getElementWithGeogebraCommonKernelGeosGeoElement:s])) forPointWithGeogebraCommonKernelLocusequEquationPoint:p]];
    }
  }
  return el;
}

- (IOSObjectArray *)getSegments {
  IOSObjectArray *res = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(self->segments_))->size_ type:GeogebraCommonKernelGeosGeoSegment_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->segments_, 0, res, 0, self->segments_->size_);
  return res;
}

- (void)setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:(IOSObjectArray *)sis {
  GeogebraCommonKernelLocusequElementsEquationGenericPolygon_setAndConsume_segments_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(sis))->size_ type:GeogebraCommonKernelGeosGeoSegment_class_()]);
  for (jint i = 0; i < sis->size_; i++) {
    IOSObjectArray_Set(self->segments_, i, (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(IOSObjectArray_Get(sis, i), [GeogebraCommonKernelGeosGeoSegment class]));
  }
}

- (jboolean)isAlgebraic {
  return NO;
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "EquationGenericPolygon", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelLocusequEquationScope:", "EquationGenericPolygon", NULL, 0x1, NULL, NULL },
    { "forPointImplWithGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x4, NULL, NULL },
    { "getSegments", NULL, "[Lgeogebra.common.kernel.geos.GeoSegment;", 0x4, NULL, NULL },
    { "setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:", "setSegments", "V", 0x4, NULL, NULL },
    { "isAlgebraic", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segments_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoSegment;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationGenericPolygon = { 2, "EquationGenericPolygon", "geogebra.common.kernel.locusequ.elements", NULL, 0x401, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationGenericPolygon;
}

@end

void GeogebraCommonKernelLocusequElementsEquationGenericPolygon_init(GeogebraCommonKernelLocusequElementsEquationGenericPolygon *self) {
  GeogebraCommonKernelLocusequEquationElement_init(self);
}

void GeogebraCommonKernelLocusequElementsEquationGenericPolygon_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationGenericPolygon *self, GeogebraCommonKernelGeosGeoElement *element, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequEquationElement_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, element, scope);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationGenericPolygon)
