//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoArcLength.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoArcLength.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoArcLength () {
 @public
  id<GeogebraCommonKernelKernelNDGeoConicPartND> arc_;
  GeogebraCommonKernelGeosGeoNumeric *num_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoArcLength, arc_, id<GeogebraCommonKernelKernelNDGeoConicPartND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoArcLength, num_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoArcLength_compute(GeogebraCommonKernelAlgosAlgoArcLength *self);

@implementation GeogebraCommonKernelAlgosAlgoArcLength

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
          withGeogebraCommonKernelKernelNDGeoConicPartND:(id<GeogebraCommonKernelKernelNDGeoConicPartND>)arc {
  GeogebraCommonKernelAlgosAlgoArcLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicPartND_(self, cons, label, arc);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Length();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(arc_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:num_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getArcLength {
  return num_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoArcLength_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ArcLengthOfA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(arc_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(arc_);
  RELEASE_(num_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoConicPartND:", "AlgoArcLength", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getArcLength", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arc_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoConicPartND;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoArcLength = { 2, "AlgoArcLength", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoArcLength;
}

@end

void GeogebraCommonKernelAlgosAlgoArcLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicPartND_(GeogebraCommonKernelAlgosAlgoArcLength *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoConicPartND> arc) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoArcLength_set_arc_(self, arc);
  GeogebraCommonKernelAlgosAlgoArcLength_setAndConsume_num_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoArcLength_compute(self);
  [self->num_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoArcLength *new_GeogebraCommonKernelAlgosAlgoArcLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicPartND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoConicPartND> arc) {
  GeogebraCommonKernelAlgosAlgoArcLength *self = [GeogebraCommonKernelAlgosAlgoArcLength alloc];
  GeogebraCommonKernelAlgosAlgoArcLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicPartND_(self, cons, label, arc);
  return self;
}

void GeogebraCommonKernelAlgosAlgoArcLength_compute(GeogebraCommonKernelAlgosAlgoArcLength *self) {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->num_)) setValueWithDouble:[((id<GeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(self->arc_)) getArcLength]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoArcLength)
