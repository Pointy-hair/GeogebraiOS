//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/implicit/AlgoImplicitPolyFunction.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelImplicitAlgoImplicitPolyFunction () {
 @public
  GeogebraCommonKernelGeosGeoFunctionNVar *function_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *implicitPoly_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoImplicitPolyFunction, function_, GeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoImplicitPolyFunction, implicitPoly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)

@implementation GeogebraCommonKernelImplicitAlgoImplicitPolyFunction

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
             withGeogebraCommonKernelGeosGeoFunctionNVar:(GeogebraCommonKernelGeosGeoFunctionNVar *)func {
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, label, func);
  return self;
}

- (void)compute {
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(implicitPoly_)) setDefined];
  GeogebraCommonKernelArithmeticFunctionNVar *f = [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(function_)) getFunction];
  IOSObjectArray *fvars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) getFunctionVariables];
  if (((IOSObjectArray *) nil_chk(fvars))->size_ != 2) {
    [implicitPoly_ setUndefined];
    return;
  }
  @try {
    GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f getExpression])) getCopyWithGeogebraCommonKernelKernel:kernel_];
    GeogebraCommonKernelArithmeticEquation *equ = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, en, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(kernel_) autorelease]) autorelease];
    [equ initEquation];
    GeogebraCommonKernelArithmeticPolynomial *poly = [equ getNormalForm];
    [implicitPoly_ setCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2:[((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(poly)) getCoeff]];
  }
  @catch (GeogebraCommonMainMyError *e) {
    GeogebraCommonMainApp_debugWithNSString_([((GeogebraCommonMainMyError *) nil_chk(e)) getMessage]);
    [implicitPoly_ setUndefined];
  }
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ function_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:implicitPoly_];
  [self setDependencies];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ImplicitCurve();
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)getImplicitPoly {
  return implicitPoly_;
}

- (void)dealloc {
  RELEASE_(function_);
  RELEASE_(implicitPoly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunctionNVar:", "AlgoImplicitPolyFunction", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getImplicitPoly", NULL, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "function_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "implicitPoly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoImplicitPolyFunction = { 2, "AlgoImplicitPolyFunction", "geogebra.common.kernel.implicit", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelImplicitAlgoImplicitPolyFunction;
}

@end

void GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_(GeogebraCommonKernelImplicitAlgoImplicitPolyFunction *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_set_function_(self, func);
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_setAndConsume_implicitPoly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->implicitPoly_ setLabelWithNSString:label];
}

GeogebraCommonKernelImplicitAlgoImplicitPolyFunction *new_GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoFunctionNVar *func) {
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction *self = [GeogebraCommonKernelImplicitAlgoImplicitPolyFunction alloc];
  GeogebraCommonKernelImplicitAlgoImplicitPolyFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunctionNVar_(self, c, label, func);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoImplicitPolyFunction)
