//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoBarChart.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/draw/DrawBarGraph.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoBarChart.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "geogebra/common/kernel/statistics/AlgoUsingUniqueAndFrequency.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/Cloner.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "org/apache/commons/math/distribution/BinomialDistributionImpl.h"
#include "org/apache/commons/math/distribution/HypergeometricDistributionImpl.h"
#include "org/apache/commons/math/distribution/IntegerDistribution.h"
#include "org/apache/commons/math/distribution/PascalDistributionImpl.h"
#include "org/apache/commons/math/distribution/PoissonDistributionImpl.h"
#include "org/apache/commons/math/distribution/ZipfDistributionImpl.h"

#define GeogebraCommonKernelAlgosAlgoBarChart_MAX_RECTANGLES 10000

@interface GeogebraCommonKernelAlgosAlgoBarChart () {
 @public
  id<JavaUtilMap> tags_;
  GeogebraCommonKernelGeosGeoNumeric *sum_;
  id<GeogebraCommonKernelArithmeticNumberValue> a_, b_, p1_, p2_, p3_;
  GeogebraCommonKernelGeosGeoList *list1_, *list2_;
  GeogebraCommonKernelGeosGeoElement *ageo_, *bgeo_, *ngeo_, *widthGeo_, *isCumulative_, *isHorizontal_, *p1geo_, *p2geo_, *p3geo_, *hasJoin_, *pointType_;
  jint type_;
  jint N_;
  IOSDoubleArray *yval_;
  IOSDoubleArray *leftBorder_;
  IOSObjectArray *value_;
  jdouble barWidth_;
  jdouble freqMax_;
  jdouble dataSize_;
  NSString *toolTipText_;
  jboolean isAreaSum_;
  GeogebraCommonKernelGeosGeoNumeric *scale__;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)a
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N;

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N;

- (void)computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                                      withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2;

- (void)computeFromPointListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1;

- (jboolean)prepareDistributionLists;

- (void)loadDistributionListsWithInt:(jint)first
                             withInt:(jint)last
withOrgApacheCommonsMathDistributionIntegerDistribution:(id<OrgApacheCommonsMathDistributionIntegerDistribution>)dist;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, tags_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, sum_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, a_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, b_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p1_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p2_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p3_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, list1_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, list2_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, ageo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, bgeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, ngeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, widthGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, isCumulative_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, isHorizontal_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p1geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p2geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, p3geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, hasJoin_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, pointType_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, yval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, leftBorder_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, value_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, toolTipText_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart, scale__, GeogebraCommonKernelGeosGeoNumeric *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoBarChart, MAX_RECTANGLES, jint)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *a, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *a, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> width, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> width, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_computeFromPointListWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelGeosGeoList *list1);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoBarChart_prepareDistributionLists(GeogebraCommonKernelAlgosAlgoBarChart *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_loadDistributionListsWithInt_withInt_withOrgApacheCommonsMathDistributionIntegerDistribution_(GeogebraCommonKernelAlgosAlgoBarChart *self, jint first, jint last, id<OrgApacheCommonsMathDistributionIntegerDistribution> dist);

@interface GeogebraCommonKernelAlgosAlgoBarChart_$1 : GeogebraCommonKernelGeosGeoNumeric {
 @public
  GeogebraCommonKernelAlgosAlgoBarChart *this$0_;
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoBarChart_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart_$1, this$0_, GeogebraCommonKernelAlgosAlgoBarChart *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$1 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart_$1 *new_GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoBarChart_$1)

@interface GeogebraCommonKernelAlgosAlgoBarChart_$2 : GeogebraCommonKernelGeosGeoNumeric {
 @public
  GeogebraCommonKernelAlgosAlgoBarChart *this$0_;
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoBarChart_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart_$2, this$0_, GeogebraCommonKernelAlgosAlgoBarChart *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$2 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart_$2 *new_GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoBarChart_$2)

@interface GeogebraCommonKernelAlgosAlgoBarChart_$3 : GeogebraCommonKernelGeosGeoNumeric {
 @public
  GeogebraCommonKernelAlgosAlgoBarChart *this$0_;
}

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoBarChart_$3)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoBarChart_$3, this$0_, GeogebraCommonKernelAlgosAlgoBarChart *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$3 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoBarChart_$3 *new_GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoBarChart_$3)

@implementation GeogebraCommonKernelAlgosAlgoBarChart

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1 {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_(self, cons, label, a, b, list1);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)width {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list1, width);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)width
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list1, width, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)width {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, list1, width);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2 {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list1, list2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2 {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, list1, list2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, list1, list2, width);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, list1, list2, width);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isHorizontal
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)join
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)pointType
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, label, list1, list2, width, isHorizontal, join, pointType, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isHorizontal
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)join
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)pointType
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isHorizontal
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)join
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)pointType
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, scale_, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p1
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p2
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p3
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                                                 withInt:(jint)type {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_(self, cons, label, p1, p2, p3, isCumulative, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p1
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p2
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)p3
                           withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                                                          withInt:(jint)type
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
                    withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
                                                  withDoubleArray:(IOSDoubleArray *)vals
                                                  withDoubleArray:(IOSDoubleArray *)borders
                                                          withInt:(jint)N {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, p1, p2, p3, isCumulative, type, a, b, vals, borders, N);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, cons, a, b, vals, borders, N);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)a
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(self, cons, a, vals, borders, N);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(self, cons, vals, borders, N);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)width
                                         withDoubleArray:(IOSDoubleArray *)vals
                                         withDoubleArray:(IOSDoubleArray *)borders
                                                 withInt:(jint)N {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, cons, width, vals, borders, N);
  return self;
}

- (void)setInputOutput {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  {
    JavaUtilArrayList *inputList;
    switch (type_) {
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION:
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(input_, 0, ageo_);
      IOSObjectArray_Set(input_, 1, bgeo_);
      IOSObjectArray_Set(input_, 2, list1_);
      break;
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA:
      [self createHelperAlgosWithGeogebraCommonKernelGeosGeoList:list1_ withGeogebraCommonKernelGeosGeoNumeric:scale__];
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH:
      [list addWithId:list1_];
      if (list2_ != nil) {
        [list addWithId:list2_];
      }
      if (widthGeo_ != nil) {
        [list addWithId:widthGeo_];
      }
      if (scale__ != nil) {
        [list addWithId:scale__];
      }
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[list size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
      GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [list toArrayWithNSObjectArray:input_]);
      break;
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STICKGRAPH:
      [list addWithId:list1_];
      if (list2_ != nil) {
        [list addWithId:list2_];
      }
      if (isHorizontal_ != nil) {
        [list addWithId:isHorizontal_];
      }
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[list size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
      GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [list toArrayWithNSObjectArray:input_]);
      break;
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STEPGRAPH:
      [list addWithId:list1_];
      if (list2_ != nil) {
        [list addWithId:list2_];
      }
      if (hasJoin_ != nil) {
        [list addWithId:hasJoin_];
      }
      if (pointType_ != nil) {
        [list addWithId:pointType_];
      }
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[list size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
      GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [list toArrayWithNSObjectArray:input_]);
      break;
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BERNOULLI:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BINOMIAL:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_PASCAL:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_HYPERGEOMETRIC:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_POISSON:
      case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_ZIPF:
      inputList = [new_JavaUtilArrayList_init() autorelease];
      [inputList addWithId:p1geo_];
      if (p2geo_ != nil) [inputList addWithId:p2geo_];
      if (p3geo_ != nil) [inputList addWithId:p3geo_];
      if (isCumulative_ != nil) [inputList addWithId:isCumulative_];
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[inputList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
      GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [inputList toArrayWithNSObjectArray:input_]);
      break;
    }
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:sum_];
  [self setDependencies];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_BarChart();
}

- (GeogebraCommonKernelGeosGeoNumeric *)getSum {
  return sum_;
}

- (GeogebraCommonKernelGeosGeoElement *)getIsCumulative {
  return isCumulative_;
}

- (jdouble)getFreqMax {
  freqMax_ = 0.0;
  for (jint k = 0; k < ((IOSDoubleArray *) nil_chk(yval_))->size_; ++k) {
    freqMax_ = JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(yval_, k), freqMax_);
  }
  return freqMax_;
}

- (IOSDoubleArray *)getYValue {
  return yval_;
}

- (IOSDoubleArray *)getLeftBorder {
  return leftBorder_;
}

- (IOSObjectArray *)getValue {
  return value_;
}

- (jint)getType {
  return type_;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getA {
  return a_ == nil ? [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangDouble_NaN) autorelease] : ((id) a_);
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getB {
  return b_ == nil ? [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, JavaLangDouble_NaN) autorelease] : ((id) b_);
}

- (IOSDoubleArray *)getValues {
  return yval_;
}

- (GeogebraCommonKernelGeosGeoNumeric *)getN {
  return (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(ngeo_, [GeogebraCommonKernelGeosGeoNumeric class]);
}

- (jint)getIntervals {
  return N_;
}

- (jdouble)getWidth {
  return barWidth_;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getP1 {
  return p1_;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getP2 {
  return p2_;
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getP3 {
  return p3_;
}

- (GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum *)getDrawType {
  if (type_ == GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STEPGRAPH) {
    if ((hasJoin_ != nil && [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(hasJoin_, [GeogebraCommonKernelGeosGeoBoolean class])) getBoolean])) {
      return GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum_get_STEP_GRAPH_CONTINUOUS();
    }
    return GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum_get_STEP_GRAPH_JUMP();
  }
  else if (isCumulative_ != nil && [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(isCumulative_, [GeogebraCommonKernelGeosGeoBoolean class])) getBoolean]) {
    return GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum_get_STEP_GRAPH_CONTINUOUS();
  }
  else if (isHorizontal_ != nil && [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(isHorizontal_, [GeogebraCommonKernelGeosGeoBoolean class])) getBoolean]) {
    return GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum_get_HORIZONTAL_BAR();
  }
  else {
    return GeogebraCommonEuclidianDrawDrawBarGraph_DrawTypeEnum_get_VERTICAL_BAR();
  }
}

- (jboolean)hasPoints {
  return (type_ == GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STICKGRAPH || type_ == GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STEPGRAPH);
}

- (jint)getPointType {
  if (type_ == GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STICKGRAPH) {
    return GeogebraCommonEuclidianDrawDrawBarGraph_POINT_LEFT;
  }
  if (pointType_ == nil) return GeogebraCommonEuclidianDrawDrawBarGraph_POINT_NONE;
  jint p = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(pointType_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
  if (p < -2 || p > 2) {
    p = GeogebraCommonEuclidianDrawDrawBarGraph_POINT_NONE;
  }
  return p;
}

- (void)compute {
  isAreaSum_ = YES;
  switch (type_) {
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH:
    [self computeWithFrequency];
    break;
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STICKGRAPH:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STEPGRAPH:
    isAreaSum_ = NO;
    if (list1_ == nil || ![list1_ isDefined]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
      return;
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(list1_)) getGeoElementForPropertiesDialog])) isGeoPoint]) {
      GeogebraCommonKernelAlgosAlgoBarChart_computeFromPointListWithGeogebraCommonKernelGeosGeoList_(self, list1_);
    }
    else {
      barWidth_ = 0.0;
      GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, list1_, list2_);
    }
    break;
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION:
    [self computeWithExp];
    break;
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA:
    [self computeWithRawData];
    break;
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BINOMIAL:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_POISSON:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_HYPERGEOMETRIC:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_PASCAL:
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_ZIPF:
    if (!GeogebraCommonKernelAlgosAlgoBarChart_prepareDistributionLists(self)) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
      return;
    }
    barWidth_ = -1;
    [self computeWithFrequency];
    break;
  }
}

- (void)computeWithExp {
  GeogebraCommonKernelGeosGeoElement *geo;
  if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(ageo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(bgeo_)) isDefined] && [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1_)) isDefined])) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  N_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1_)) size];
  jdouble ad = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble];
  jdouble bd = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble];
  jdouble ints = [list1_ size];
  if (ints < 1) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  else if (ints > GeogebraCommonKernelAlgosAlgoBarChart_MAX_RECTANGLES) {
    N_ = GeogebraCommonKernelAlgosAlgoBarChart_MAX_RECTANGLES;
  }
  else {
    N_ = (jint) JavaLangMath_roundWithDouble_(ints);
  }
  barWidth_ = (bd - ad) / N_;
  if (yval_ == nil || yval_->size_ < N_) {
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_yval_(self, [IOSDoubleArray newArrayWithLength:N_]);
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_leftBorder_(self, [IOSDoubleArray newArrayWithLength:N_]);
  }
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_value_(self, [IOSObjectArray newArrayWithLength:N_ type:NSString_class_()]);
  jdouble ySum = 0;
  for (jint i = 0; i < N_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(leftBorder_), i) = ad + i * barWidth_;
    geo = [list1_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) *IOSDoubleArray_GetRef(nil_chk(yval_), i) = [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getDouble];
    else *IOSDoubleArray_GetRef(nil_chk(yval_), i) = 0;
    IOSObjectArray_Set(value_, i, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:ad + i * barWidth_ / 2 withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    ySum += IOSDoubleArray_Get(nil_chk(yval_), i);
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setValueWithDouble:ySum * barWidth_];
  dataSize_ = ySum;
}

- (void)computeWithRawData {
  if (widthGeo_ == nil || ![widthGeo_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  barWidth_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(widthGeo_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  if (barWidth_ < 0) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, [((GeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(algoFreq_)) getValue], [algoFreq_ getResult]);
}

- (void)computeWithFrequency {
  if (list1_ == nil || ![list1_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(list2_)) isDefined] || [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1_)) size] == 0 || [list1_ size] != [list2_ size]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list1_)) size] == 0 || [list1_ size] != [list2_ size]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
    return;
  }
  if (type_ == GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH) {
    if (widthGeo_ == nil || ![widthGeo_ isDefined]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
      return;
    }
    barWidth_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(widthGeo_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    if (barWidth_ < 0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(sum_)) setUndefined];
      return;
    }
  }
  else {
    barWidth_ = -1;
  }
  GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, list1_, list2_);
}

- (void)computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                                      withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2 {
  GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, list1, list2);
}

- (void)computeFromPointListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1 {
  GeogebraCommonKernelAlgosAlgoBarChart_computeFromPointListWithGeogebraCommonKernelGeosGeoList_(self, list1);
}

- (jboolean)prepareDistributionLists {
  return GeogebraCommonKernelAlgosAlgoBarChart_prepareDistributionLists(self);
}

- (void)loadDistributionListsWithInt:(jint)first
                             withInt:(jint)last
withOrgApacheCommonsMathDistributionIntegerDistribution:(id<OrgApacheCommonsMathDistributionIntegerDistribution>)dist {
  GeogebraCommonKernelAlgosAlgoBarChart_loadDistributionListsWithInt_withInt_withOrgApacheCommonsMathDistributionIntegerDistribution_(self, first, last, dist);
}

- (id<GeogebraCommonKernelAlgosDrawInformationAlgo>)copy__ {
  jint N = [self getIntervals];
  switch ([self getType]) {
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION:
    return [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(cons_, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk([self getA])) deepCopyWithGeogebraCommonKernelKernel:kernel_], @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk([self getB])) deepCopyWithGeogebraCommonKernelKernel:kernel_], @protocol(GeogebraCommonKernelArithmeticNumberValue)), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getValues]), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getLeftBorder]), N) autorelease];
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE:
    return [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction], GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getValues]), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getLeftBorder]), N) autorelease];
    case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH:
    return [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(cons_, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk([self getA])) deepCopyWithGeogebraCommonKernelKernel:kernel_], @protocol(GeogebraCommonKernelArithmeticNumberValue)), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getValues]), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getLeftBorder]), N) autorelease];
    default:
    return [new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(cons_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk([self getN])) copy__], GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getValues]), GeogebraCommonUtilCloner_cloneWithDoubleArray_([self getLeftBorder]), N) autorelease];
  }
}

- (void)remove {
  [super remove];
  if (protectedInput_) {
    return;
  }
  [self removeHelperAlgos];
}

- (void)setBarColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                       withInt:(jint)numBar {
  if (color == nil) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(0)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(0) withId:color];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(0) withId:color];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (GeogebraCommonAwtGColor *)getBarColorWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil) {
    return (GeogebraCommonAwtGColor *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(0)], [GeogebraCommonAwtGColor class]);
  }
  return nil;
}

- (void)setBarAlphaWithFloat:(jfloat)alpha
                     withInt:(jint)numBar {
  if (alpha == -1) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(1)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(1) withId:JavaLangFloat_valueOfWithFloat_(alpha)];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(1) withId:JavaLangFloat_valueOfWithFloat_(alpha)];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (jfloat)getBarAlphaWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil && [hm getWithId:JavaLangInteger_valueOfWithInt_(1)] != nil) {
    return [((JavaLangFloat *) nil_chk(((JavaLangFloat *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(1)], [JavaLangFloat class])))) floatValue];
  }
  return -1;
}

- (void)setBarFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType
                                                                  withInt:(jint)numBar {
  GeogebraCommonKernelGeosGeoElement_FillTypeEnum *fill = fillType == nil ? GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD() : fillType;
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(2) withId:fill];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(2) withId:fill];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)getBarFillTypeWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil) {
    if ([hm getWithId:JavaLangInteger_valueOfWithInt_(2)] == nil) {
      return GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD();
    }
    return (GeogebraCommonKernelGeosGeoElement_FillTypeEnum *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(2)], [GeogebraCommonKernelGeosGeoElement_FillTypeEnum class]);
  }
  return GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD();
}

- (void)setBarSymbolWithNSString:(NSString *)symbol
                         withInt:(jint)numBar {
  if (symbol == nil) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(3)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(3) withId:symbol];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(3) withId:symbol];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (NSString *)getBarSymbolWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil) {
    return (NSString *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(3)], [NSString class]);
  }
  return nil;
}

- (void)setBarImageWithNSString:(NSString *)image
                        withInt:(jint)numBar {
  if (image == nil) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(4)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(4) withId:image];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(4) withId:image];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (NSString *)getBarImageWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil) {
    return (NSString *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(4)], [NSString class]);
  }
  return nil;
}

- (void)setBarHatchDistanceWithInt:(jint)distance
                           withInt:(jint)numBar {
  if (distance == -1) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(5)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(5) withId:JavaLangInteger_valueOfWithInt_(distance)];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(5) withId:JavaLangInteger_valueOfWithInt_(distance)];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (jint)getBarHatchDistanceWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil && [hm getWithId:JavaLangInteger_valueOfWithInt_(5)] != nil) {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(5)], [JavaLangInteger class])))) intValue];
  }
  return -1;
}

- (void)setBarHatchAngleWithInt:(jint)angle
                        withInt:(jint)numBar {
  if (angle == -1) {
    if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
      [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) removeWithId:JavaLangInteger_valueOfWithInt_(6)];
    }
    return;
  }
  if ([((id<JavaUtilMap>) nil_chk(tags_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(numBar)]) {
    [((JavaUtilHashMap *) nil_chk([tags_ getWithId:JavaLangInteger_valueOfWithInt_(numBar)])) putWithId:JavaLangInteger_valueOfWithInt_(6) withId:JavaLangInteger_valueOfWithInt_(angle)];
  }
  else {
    JavaUtilHashMap *hm = [new_JavaUtilHashMap_init() autorelease];
    [hm putWithId:JavaLangInteger_valueOfWithInt_(6) withId:JavaLangInteger_valueOfWithInt_(angle)];
    [tags_ putWithId:JavaLangInteger_valueOfWithInt_(numBar) withId:hm];
  }
}

- (jint)getBarHatchAngleWithInt:(jint)numBar {
  JavaUtilHashMap *hm = [((id<JavaUtilMap>) nil_chk(tags_)) getWithId:JavaLangInteger_valueOfWithInt_(numBar)];
  if (hm != nil && [hm getWithId:JavaLangInteger_valueOfWithInt_(6)] != nil) {
    return [((JavaLangInteger *) nil_chk(((JavaLangInteger *) check_class_cast([hm getWithId:JavaLangInteger_valueOfWithInt_(6)], [JavaLangInteger class])))) intValue];
  }
  return -1;
}

- (void)barXmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<tags>\n"];
  for (jint i = 1; i <= N_; i++) {
    if ([self getBarColorWithInt:i] != nil) {
      [sb appendWithNSString:JreStrcat("$I$$$", @"\t\t<tag key=\"barColor\" barNumber=\"", i, @"\" value=\"", GeogebraCommonAwtGColor_getColorStringWithGeogebraCommonAwtGColor_([self getBarColorWithInt:i]), @"\" />\n")];
    }
    if ([self getBarAlphaWithInt:i] != -1) {
      [sb appendWithNSString:JreStrcat("$I$F$", @"\t\t<tag key=\"barAlpha\" barNumber=\"", i, @"\" value=\"", [self getBarAlphaWithInt:i], @"\" />\n")];
    }
    if ([self getBarHatchDistanceWithInt:i] != -1) {
      [sb appendWithNSString:JreStrcat("$I$I$", @"\t\t<tag key=\"barHatchDistance\" barNumber=\"", i, @"\" value=\"", [self getBarHatchDistanceWithInt:i], @"\" />\n")];
    }
    if ([self getBarHatchAngleWithInt:i] != -1) {
      [sb appendWithNSString:JreStrcat("$I$I$", @"\t\t<tag key=\"barHatchAngle\" barNumber=\"", i, @"\" value=\"", [self getBarHatchAngleWithInt:i], @"\" />\n")];
    }
    if ([self getBarFillTypeWithInt:i] != GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_STANDARD()) {
      [sb appendWithNSString:JreStrcat("$I$I$", @"\t\t<tag key=\"barFillType\" barNumber=\"", i, @"\" value=\"", [((GeogebraCommonKernelGeosGeoElement_FillTypeEnum *) nil_chk([self getBarFillTypeWithInt:i])) ordinal], @"\" />\n")];
    }
    if ([self getBarImageWithInt:i] != nil) {
      [sb appendWithNSString:JreStrcat("$I$$$", @"\t\t<tag key=\"barImage\" barNumber=\"", i, @"\" value=\"", [self getBarImageWithInt:i], @"\" />\n")];
    }
    if ([self getBarSymbolWithInt:i] != nil) {
      [sb appendWithNSString:JreStrcat("$I$$$", @"\t\t<tag key=\"barSymbol\" barNumber=\"", i, @"\" value=\"", [self getBarSymbolWithInt:i], @"\" />\n")];
    }
  }
  [sb appendWithNSString:@"\t</tags>\n"];
}

- (void)setToolTipTextWithInt:(jint)index {
  jint freq = J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(yval_), index));
  jdouble percent = 100 * freq / dataSize_;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Value"], @" = ", IOSObjectArray_Get(nil_chk(value_), index))];
  [sb appendWithNSString:@"<br>"];
  [sb appendWithNSString:JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Count"], @" = ", [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:freq withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])];
  [sb appendWithNSString:@"<br>"];
  [sb appendWithNSString:JreStrcat("$C", [kernel_ formatWithDouble:percent withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], '%')];
  GeogebraCommonKernelAlgosAlgoBarChart_set_toolTipText_(self, [sb description]);
}

- (void)dealloc {
  RELEASE_(tags_);
  RELEASE_(sum_);
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  RELEASE_(p3_);
  RELEASE_(list1_);
  RELEASE_(list2_);
  RELEASE_(ageo_);
  RELEASE_(bgeo_);
  RELEASE_(ngeo_);
  RELEASE_(widthGeo_);
  RELEASE_(isCumulative_);
  RELEASE_(isHorizontal_);
  RELEASE_(p1geo_);
  RELEASE_(p2geo_);
  RELEASE_(p3geo_);
  RELEASE_(hasJoin_);
  RELEASE_(pointType_);
  RELEASE_(yval_);
  RELEASE_(leftBorder_);
  RELEASE_(value_);
  RELEASE_(toolTipText_);
  RELEASE_(scale__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoList:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withInt:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withInt:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withInt:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withInt:", "AlgoBarChart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withInt:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withDoubleArray:withDoubleArray:withInt:", "AlgoBarChart", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withDoubleArray:withDoubleArray:withInt:", "AlgoBarChart", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withDoubleArray:withDoubleArray:withInt:", "AlgoBarChart", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withDoubleArray:withDoubleArray:withInt:", "AlgoBarChart", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticNumberValue:withDoubleArray:withDoubleArray:withInt:", "AlgoBarChart", NULL, 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getSum", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getIsCumulative", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getFreqMax", NULL, "D", 0x1, NULL, NULL },
    { "getYValue", NULL, "[D", 0x1, NULL, NULL },
    { "getLeftBorder", NULL, "[D", 0x1, NULL, NULL },
    { "getValue", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getValues", NULL, "[D", 0x1, NULL, NULL },
    { "getN", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getIntervals", NULL, "I", 0x1, NULL, NULL },
    { "getWidth", NULL, "D", 0x1, NULL, NULL },
    { "getP1", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getP2", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getP3", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "getDrawType", NULL, "Lgeogebra.common.euclidian.draw.DrawBarGraph$DrawType;", 0x1, NULL, NULL },
    { "hasPoints", NULL, "Z", 0x1, NULL, NULL },
    { "getPointType", NULL, "I", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "computeWithExp", NULL, "V", 0x1, NULL, NULL },
    { "computeWithRawData", NULL, "V", 0x1, NULL, NULL },
    { "computeWithFrequency", NULL, "V", 0x1, NULL, NULL },
    { "computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "computeFromValueFrequencyLists", "V", 0x2, NULL, NULL },
    { "computeFromPointListWithGeogebraCommonKernelGeosGeoList:", "computeFromPointList", "V", 0x2, NULL, NULL },
    { "prepareDistributionLists", NULL, "Z", 0x2, NULL, NULL },
    { "loadDistributionListsWithInt:withInt:withOrgApacheCommonsMathDistributionIntegerDistribution:", "loadDistributionLists", "V", 0x2, "Ljava.lang.Exception;", NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.algos.DrawInformationAlgo;", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "setBarColorWithGeogebraCommonAwtGColor:withInt:", "setBarColor", "V", 0x1, NULL, NULL },
    { "getBarColorWithInt:", "getBarColor", "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setBarAlphaWithFloat:withInt:", "setBarAlpha", "V", 0x1, NULL, NULL },
    { "getBarAlphaWithInt:", "getBarAlpha", "F", 0x1, NULL, NULL },
    { "setBarFillTypeWithGeogebraCommonKernelGeosGeoElement_FillTypeEnum:withInt:", "setBarFillType", "V", 0x1, NULL, NULL },
    { "getBarFillTypeWithInt:", "getBarFillType", "Lgeogebra.common.kernel.geos.GeoElement$FillType;", 0x1, NULL, NULL },
    { "setBarSymbolWithNSString:withInt:", "setBarSymbol", "V", 0x1, NULL, NULL },
    { "getBarSymbolWithInt:", "getBarSymbol", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setBarImageWithNSString:withInt:", "setBarImage", "V", 0x1, NULL, NULL },
    { "getBarImageWithInt:", "getBarImage", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setBarHatchDistanceWithInt:withInt:", "setBarHatchDistance", "V", 0x1, NULL, NULL },
    { "getBarHatchDistanceWithInt:", "getBarHatchDistance", "I", 0x1, NULL, NULL },
    { "setBarHatchAngleWithInt:withInt:", "setBarHatchAngle", "V", 0x1, NULL, NULL },
    { "getBarHatchAngleWithInt:", "getBarHatchAngle", "I", 0x1, NULL, NULL },
    { "barXmlWithJavaLangStringBuilder:", "barXml", "V", 0x1, NULL, NULL },
    { "setToolTipTextWithInt:", "setToolTipText", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tags_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/Integer;Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/Object;>;>;",  },
    { "TYPE_BARCHART_EXPRESSION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION },
    { "TYPE_BARCHART_RAWDATA_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA },
    { "TYPE_BARCHART_FREQUENCY_TABLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE },
    { "TYPE_BARCHART_FREQUENCY_TABLE_WIDTH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH },
    { "TYPE_STICKGRAPH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STICKGRAPH },
    { "TYPE_STEPGRAPH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_STEPGRAPH },
    { "TYPE_BARCHART_BINOMIAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BINOMIAL },
    { "TYPE_BARCHART_PASCAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_PASCAL },
    { "TYPE_BARCHART_POISSON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_POISSON },
    { "TYPE_BARCHART_HYPERGEOMETRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_HYPERGEOMETRIC },
    { "TYPE_BARCHART_BERNOULLI_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BERNOULLI },
    { "TYPE_BARCHART_ZIPF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_ZIPF },
    { "MAX_RECTANGLES_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoBarChart_MAX_RECTANGLES },
    { "sum_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "p1_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "p2_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "p3_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "list1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "ageo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "bgeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "ngeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "widthGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "isCumulative_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "isHorizontal_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "p1geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "p2geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "p3geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "hasJoin_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "pointType_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "N_", NULL, 0x2, "I", NULL, NULL,  },
    { "yval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "leftBorder_", NULL, 0x2, "[D", NULL, NULL,  },
    { "value_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "barWidth_", NULL, 0x2, "D", NULL, NULL,  },
    { "freqMax_", NULL, 0x2, "D", NULL, NULL,  },
    { "dataSize_", NULL, 0x2, "D", NULL, NULL,  },
    { "toolTipText_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "isAreaSum_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scale__", "scale", 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoBarChart = { 2, "AlgoBarChart", "geogebra.common.kernel.algos", NULL, 0x1, 64, methods, 44, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoBarChart;
}

@end

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, GeogebraCommonKernelGeosGeoList *list1) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION;
  GeogebraCommonKernelAlgosAlgoBarChart_set_a_(self, a);
  GeogebraCommonKernelAlgosAlgoBarChart_set_b_(self, b);
  GeogebraCommonKernelAlgosAlgoBarChart_set_list1_(self, list1);
  GeogebraCommonKernelAlgosAlgoBarChart_set_ageo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoBarChart_set_bgeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_sum_(self, new_GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, cons));
  [self setInputOutput];
  [self compute];
  [self->sum_ setDrawableWithBoolean:YES];
  [self->sum_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, GeogebraCommonKernelGeosGeoList *list1) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoList_(self, cons, label, a, b, list1);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, nil, width, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list1, width);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, nil, width, nil, nil, nil, scale_, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list1, width, scale_);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, nil, width, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA);
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoNumeric *width) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, list1, width);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, nil, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list1, list2);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, nil, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE);
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, list1, list2);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, list1, list2, width);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, nil, nil, nil, GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH);
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, list1, list2, width);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, type);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, label, list1, list2, width, isHorizontal, join, pointType, type);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, nil, type);
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, type);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, GeogebraCommonKernelGeosGeoNumeric *scale_, jint type) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = type;
  GeogebraCommonKernelAlgosAlgoBarChart_set_list1_(self, list1);
  GeogebraCommonKernelAlgosAlgoBarChart_set_list2_(self, list2);
  if (width != nil) {
    GeogebraCommonKernelAlgosAlgoBarChart_set_widthGeo_(self, [width toGeoElement]);
  }
  GeogebraCommonKernelAlgosAlgoBarChart_set_isHorizontal_(self, isHorizontal);
  GeogebraCommonKernelAlgosAlgoBarChart_set_hasJoin_(self, join);
  GeogebraCommonKernelAlgosAlgoBarChart_set_pointType_(self, pointType);
  GeogebraCommonKernelAlgosAlgoBarChart_set_scale__(self, scale_);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_sum_(self, new_GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, cons));
  [self setInputOutput];
  [self compute];
  [self->sum_ setDrawableWithBoolean:YES];
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, id<GeogebraCommonKernelArithmeticNumberValue> width, GeogebraCommonKernelGeosGeoBoolean *isHorizontal, GeogebraCommonKernelGeosGeoBoolean *join, GeogebraCommonKernelGeosGeoNumeric *pointType, GeogebraCommonKernelGeosGeoNumeric *scale_, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withInt_(self, cons, list1, list2, width, isHorizontal, join, pointType, scale_, type);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> p1, id<GeogebraCommonKernelArithmeticNumberValue> p2, id<GeogebraCommonKernelArithmeticNumberValue> p3, GeogebraCommonKernelGeosGeoBoolean *isCumulative, jint type) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = type;
  GeogebraCommonKernelAlgosAlgoBarChart_set_p1_(self, p1);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p2_(self, p2);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p3_(self, p3);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p1geo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(p1)) toGeoElement]);
  if (p2 != nil) GeogebraCommonKernelAlgosAlgoBarChart_set_p2geo_(self, [p2 toGeoElement]);
  if (p3 != nil) GeogebraCommonKernelAlgosAlgoBarChart_set_p3geo_(self, [p3 toGeoElement]);
  GeogebraCommonKernelAlgosAlgoBarChart_set_isCumulative_(self, isCumulative);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_sum_(self, new_GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, cons));
  [self setInputOutput];
  [self compute];
  [self->sum_ setDrawableWithBoolean:YES];
  [self->sum_ setLabelWithNSString:label];
  if (self->yval_ == nil) {
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_yval_(self, [IOSDoubleArray newArrayWithLength:0]);
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_leftBorder_(self, [IOSDoubleArray newArrayWithLength:0]);
  }
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> p1, id<GeogebraCommonKernelArithmeticNumberValue> p2, id<GeogebraCommonKernelArithmeticNumberValue> p3, GeogebraCommonKernelGeosGeoBoolean *isCumulative, jint type) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_(self, cons, label, p1, p2, p3, isCumulative, type);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, id<GeogebraCommonKernelArithmeticNumberValue> p1, id<GeogebraCommonKernelArithmeticNumberValue> p2, id<GeogebraCommonKernelArithmeticNumberValue> p3, GeogebraCommonKernelGeosGeoBoolean *isCumulative, jint type, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_withBoolean_(self, [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(isCumulative)) getConstruction], NO);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = type;
  GeogebraCommonKernelAlgosAlgoBarChart_set_p1_(self, p1);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p2_(self, p2);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p3_(self, p3);
  GeogebraCommonKernelAlgosAlgoBarChart_set_p1geo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(p1)) toGeoElement]);
  if (p2 != nil) GeogebraCommonKernelAlgosAlgoBarChart_set_p2geo_(self, [p2 toGeoElement]);
  if (p3 != nil) GeogebraCommonKernelAlgosAlgoBarChart_set_p3geo_(self, [p3 toGeoElement]);
  GeogebraCommonKernelAlgosAlgoBarChart_set_isCumulative_(self, isCumulative);
  GeogebraCommonKernelAlgosAlgoBarChart_set_a_(self, a);
  GeogebraCommonKernelAlgosAlgoBarChart_set_b_(self, b);
  GeogebraCommonKernelAlgosAlgoBarChart_set_yval_(self, vals);
  GeogebraCommonKernelAlgosAlgoBarChart_set_leftBorder_(self, borders);
  self->N_ = N;
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(id<GeogebraCommonKernelArithmeticNumberValue> p1, id<GeogebraCommonKernelArithmeticNumberValue> p2, id<GeogebraCommonKernelArithmeticNumberValue> p3, GeogebraCommonKernelGeosGeoBoolean *isCumulative, jint type, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withInt_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, p1, p2, p3, isCumulative, type, a, b, vals, borders, N);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_EXPRESSION;
  GeogebraCommonKernelAlgosAlgoBarChart_set_a_(self, a);
  GeogebraCommonKernelAlgosAlgoBarChart_set_b_(self, b);
  GeogebraCommonKernelAlgosAlgoBarChart_set_yval_(self, vals);
  GeogebraCommonKernelAlgosAlgoBarChart_set_leftBorder_(self, borders);
  self->N_ = N;
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, cons, a, b, vals, borders, N);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *a, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_RAWDATA;
  GeogebraCommonKernelAlgosAlgoBarChart_set_yval_(self, vals);
  GeogebraCommonKernelAlgosAlgoBarChart_set_leftBorder_(self, borders);
  self->N_ = N;
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *a, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withDoubleArray_withDoubleArray_withInt_(self, cons, a, vals, borders, N);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE;
  GeogebraCommonKernelAlgosAlgoBarChart_set_yval_(self, vals);
  GeogebraCommonKernelAlgosAlgoBarChart_set_leftBorder_(self, borders);
  self->N_ = N;
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withDoubleArray_withDoubleArray_withInt_(self, cons, vals, borders, N);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> width, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelStatisticsAlgoUsingUniqueAndFrequency_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, NO);
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_tags_(self, new_JavaUtilHashMap_init());
  self->isAreaSum_ = YES;
  self->type_ = GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_FREQUENCY_TABLE_WIDTH;
  GeogebraCommonKernelAlgosAlgoBarChart_set_widthGeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(width)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoBarChart_set_yval_(self, vals);
  GeogebraCommonKernelAlgosAlgoBarChart_set_leftBorder_(self, borders);
  self->N_ = N;
}

GeogebraCommonKernelAlgosAlgoBarChart *new_GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> width, IOSDoubleArray *vals, IOSDoubleArray *borders, jint N) {
  GeogebraCommonKernelAlgosAlgoBarChart *self = [GeogebraCommonKernelAlgosAlgoBarChart alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withDoubleArray_withDoubleArray_withInt_(self, cons, width, vals, borders, N);
  return self;
}

void GeogebraCommonKernelAlgosAlgoBarChart_computeFromValueFrequencyListsWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2) {
  if (self->barWidth_ < 0) {
    if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list1)) size] > 1) {
      jdouble x1, x2;
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:1])) isGeoNumeric]) {
        x1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:0])) evaluateDouble];
        x2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:1])) evaluateDouble];
      }
      else {
        x1 = 1;
        x2 = 2;
      }
      if (!JavaLangDouble_isNaNWithDouble_(x1) && !JavaLangDouble_isNaNWithDouble_(x2)) {
        self->barWidth_ = x2 - x1;
      }
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
        return;
      }
    }
    else {
      self->barWidth_ = 0.5;
    }
  }
  self->N_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1)) size];
  if (self->yval_ == nil || self->yval_->size_ < self->N_) {
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_yval_(self, [IOSDoubleArray newArrayWithLength:self->N_]);
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_leftBorder_(self, [IOSDoubleArray newArrayWithLength:self->N_]);
  }
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_value_(self, [IOSObjectArray newArrayWithLength:self->N_ type:NSString_class_()]);
  for (jint i = 0; i < self->N_; i++) {
    IOSObjectArray_Set(self->value_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
  }
  jdouble ySum = 0;
  jdouble x = 0;
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(list2)) size] < self->N_) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
    return;
  }
  for (jint i = 0; i < self->N_; i++) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:i])) isGeoNumeric]) {
      x = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list1 getWithInt:i])) evaluateDouble];
    }
    else {
      x = i + 1;
    }
    if (!JavaLangDouble_isNaNWithDouble_(x)) {
      *IOSDoubleArray_GetRef(nil_chk(self->leftBorder_), i) = x - self->barWidth_ / 2;
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
      return;
    }
    jdouble y = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([list2 getWithInt:i])) evaluateDouble];
    if (!JavaLangDouble_isNaNWithDouble_(y)) {
      *IOSDoubleArray_GetRef(nil_chk(self->yval_), i) = y;
      ySum += y;
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
      return;
    }
  }
  if (self->isAreaSum_) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setValueWithDouble:JavaLangMath_absWithDouble_(ySum) * self->barWidth_];
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setValueWithDouble:JavaLangMath_absWithDouble_(ySum)];
  }
  self->dataSize_ = ySum;
}

void GeogebraCommonKernelAlgosAlgoBarChart_computeFromPointListWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoBarChart *self, GeogebraCommonKernelGeosGeoList *list1) {
  self->N_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list1)) size];
  if (self->yval_ == nil || self->yval_->size_ < self->N_) {
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_yval_(self, [IOSDoubleArray newArrayWithLength:self->N_]);
    GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_leftBorder_(self, [IOSDoubleArray newArrayWithLength:self->N_]);
  }
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_value_(self, [IOSObjectArray newArrayWithLength:self->N_ type:NSString_class_()]);
  jdouble ySum = 0;
  for (jint i = 0; i < self->N_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [list1 getWithInt:i];
    jdouble x = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])))) getX];
    if (!JavaLangDouble_isNaNWithDouble_(x)) {
      *IOSDoubleArray_GetRef(nil_chk(self->leftBorder_), i) = x - self->barWidth_ / 2;
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
      return;
    }
    IOSObjectArray_Set(self->value_, i, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    jdouble y = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])))) getY];
    if (!JavaLangDouble_isNaNWithDouble_(y)) {
      *IOSDoubleArray_GetRef(nil_chk(self->yval_), i) = y;
      ySum += y;
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setUndefined];
      return;
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sum_)) setValueWithDouble:ySum];
}

jboolean GeogebraCommonKernelAlgosAlgoBarChart_prepareDistributionLists(GeogebraCommonKernelAlgosAlgoBarChart *self) {
  id<OrgApacheCommonsMathDistributionIntegerDistribution> dist = nil;
  jint first = 0, last = 0;
  @try {
    {
      jint n;
      jdouble p;
      jdouble lambda;
      jint pop;
      jint successes;
      jint sample;
      switch (self->type_) {
        case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_BINOMIAL:
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p1geo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p2geo_)) isDefined])) return NO;
        n = (jint) JavaLangMath_roundWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p1_)) getDouble]);
        p = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p2_)) getDouble];
        dist = [new_OrgApacheCommonsMathDistributionBinomialDistributionImpl_initWithInt_withDouble_(n, p) autorelease];
        first = 0;
        last = n;
        break;
        case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_PASCAL:
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p1geo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p2geo_)) isDefined])) return NO;
        n = (jint) JavaLangMath_roundWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p1_)) getDouble]);
        p = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p2_)) getDouble];
        dist = [new_OrgApacheCommonsMathDistributionPascalDistributionImpl_initWithInt_withDouble_(n, p) autorelease];
        first = 0;
        last = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(1, [((GeogebraCommonKernelKernel *) nil_chk((self->kernel_))) getXmax] + 1));
        break;
        case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_ZIPF:
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p1geo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p2geo_)) isDefined])) return NO;
        n = (jint) JavaLangMath_roundWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p1_)) getDouble]);
        p = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p2_)) getDouble];
        dist = [new_OrgApacheCommonsMathDistributionZipfDistributionImpl_initWithInt_withDouble_(n, p) autorelease];
        first = 0;
        last = n;
        break;
        case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_POISSON:
        if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p1geo_)) isDefined]) return NO;
        lambda = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p1_)) getDouble];
        dist = [new_OrgApacheCommonsMathDistributionPoissonDistributionImpl_initWithDouble_(lambda) autorelease];
        first = 0;
        last = J2ObjCFpToInt(JavaLangMath_maxWithDouble_withDouble_(1, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getXmax] + 1));
        break;
        case GeogebraCommonKernelAlgosAlgoBarChart_TYPE_BARCHART_HYPERGEOMETRIC:
        if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p1geo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p2geo_)) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->p3geo_)) isDefined])) return NO;
        pop = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p1_)) getDouble]);
        successes = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p2_)) getDouble]);
        sample = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->p3_)) getDouble]);
        dist = [new_OrgApacheCommonsMathDistributionHypergeometricDistributionImpl_initWithInt_withInt_withInt_(pop, successes, sample) autorelease];
        first = JavaLangMath_maxWithInt_withInt_(0, successes + sample - pop);
        last = JavaLangMath_minWithInt_withInt_(successes, sample);
        break;
      }
    }
    GeogebraCommonKernelAlgosAlgoBarChart_loadDistributionListsWithInt_withInt_withOrgApacheCommonsMathDistributionIntegerDistribution_(self, first, last, dist);
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_([((JavaLangException *) nil_chk(e)) getMessage]);
    return NO;
  }
  return YES;
}

void GeogebraCommonKernelAlgosAlgoBarChart_loadDistributionListsWithInt_withInt_withOrgApacheCommonsMathDistributionIntegerDistribution_(GeogebraCommonKernelAlgosAlgoBarChart *self, jint first, jint last, id<OrgApacheCommonsMathDistributionIntegerDistribution> dist) {
  jboolean oldSuppress = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
  [self->cons_ setSuppressLabelCreationWithBoolean:YES];
  if (self->list1_ != nil) [self->list1_ remove];
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_list1_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  if (self->list2_ != nil) [self->list2_ remove];
  GeogebraCommonKernelAlgosAlgoBarChart_setAndConsume_list2_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  jdouble prob;
  jdouble cumProb = 0;
  for (jint i = first; i <= last; i++) {
    [self->list1_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, i) autorelease]];
    prob = [((id<OrgApacheCommonsMathDistributionIntegerDistribution>) nil_chk(dist)) probabilityWithInt:i];
    cumProb += prob;
    if (self->isCumulative_ != nil && [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(self->isCumulative_, [GeogebraCommonKernelGeosGeoBoolean class])) getBoolean]) [self->list2_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, cumProb) autorelease]];
    else [self->list2_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, prob) autorelease]];
  }
  [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppress];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoBarChart)

@implementation GeogebraCommonKernelAlgosAlgoBarChart_$1

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  return this$0_->toolTipText_;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0 {
  GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoBarChart:withGeogebraCommonKernelConstruction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoBarChart;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoBarChart", "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoList:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoBarChart_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoBarChart", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelAlgosAlgoBarChart_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$1 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$1_set_this$0_(self, outer$);
  GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self, arg$0);
}

GeogebraCommonKernelAlgosAlgoBarChart_$1 *new_GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$1 *self = [GeogebraCommonKernelAlgosAlgoBarChart_$1 alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_$1_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoBarChart_$1)

@implementation GeogebraCommonKernelAlgosAlgoBarChart_$2

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  return this$0_->toolTipText_;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0 {
  GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoBarChart:withGeogebraCommonKernelConstruction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoBarChart;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoBarChart", "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withInt:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoBarChart_$2 = { 2, "", "geogebra.common.kernel.algos", "AlgoBarChart", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelAlgosAlgoBarChart_$2;
}

@end

void GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$2 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$2_set_this$0_(self, outer$);
  GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self, arg$0);
}

GeogebraCommonKernelAlgosAlgoBarChart_$2 *new_GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$2 *self = [GeogebraCommonKernelAlgosAlgoBarChart_$2 alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_$2_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoBarChart_$2)

@implementation GeogebraCommonKernelAlgosAlgoBarChart_$3

- (NSString *)getTooltipTextWithBoolean:(jboolean)colored
                            withBoolean:(jboolean)alwaysOn {
  return this$0_->toolTipText_;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoBarChart:(GeogebraCommonKernelAlgosAlgoBarChart *)outer$
                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)arg$0 {
  GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getTooltipTextWithBoolean:withBoolean:", "getTooltipText", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoBarChart:withGeogebraCommonKernelConstruction:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoBarChart;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoBarChart", "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:withInt:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoBarChart_$3 = { 2, "", "geogebra.common.kernel.algos", "AlgoBarChart", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelAlgosAlgoBarChart_$3;
}

@end

void GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart_$3 *self, GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$3_set_this$0_(self, outer$);
  GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self, arg$0);
}

GeogebraCommonKernelAlgosAlgoBarChart_$3 *new_GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoBarChart *outer$, GeogebraCommonKernelConstruction *arg$0) {
  GeogebraCommonKernelAlgosAlgoBarChart_$3 *self = [GeogebraCommonKernelAlgosAlgoBarChart_$3 alloc];
  GeogebraCommonKernelAlgosAlgoBarChart_$3_initWithGeogebraCommonKernelAlgosAlgoBarChart_withGeogebraCommonKernelConstruction_(self, outer$, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoBarChart_$3)
