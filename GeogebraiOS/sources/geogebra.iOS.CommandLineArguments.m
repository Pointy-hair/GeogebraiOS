//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/iOS/CommandLineArguments.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/main/App.h"
#include "geogebra/iOS/CommandLineArguments.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Locale.h"
#include "java/util/Set.h"

@interface GeogebraIOSCommandLineArguments () {
 @public
  JavaUtilHashMap *args_;
  jint noOfFiles_;
  jint noOfTools_;
}

- (void)addFileWithNSString:(NSString *)string;

@end

J2OBJC_FIELD_SETTER(GeogebraIOSCommandLineArguments, args_, JavaUtilHashMap *)

__attribute__((unused)) static void GeogebraIOSCommandLineArguments_addFileWithNSString_(GeogebraIOSCommandLineArguments *self, NSString *string);

@implementation GeogebraIOSCommandLineArguments

- (instancetype)initWithNSStringArray:(IOSObjectArray *)cmdArgs {
  GeogebraIOSCommandLineArguments_initWithNSStringArray_(self, cmdArgs);
  return self;
}

- (void)addFileWithNSString:(NSString *)string {
  GeogebraIOSCommandLineArguments_addFileWithNSString_(self, string);
}

- (jint)getNoOfFiles {
  return noOfFiles_;
}

- (jint)getNoOfTools {
  return noOfTools_;
}

- (NSString *)getStringValueWithNSString:(NSString *)name {
  NSString *strValue = [((JavaUtilHashMap *) nil_chk(args_)) getWithId:[((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()]];
  return (strValue == nil ? @"" : strValue);
}

- (jboolean)getBooleanValueWithNSString:(NSString *)name
                            withBoolean:(jboolean)defaultValue {
  NSString *strValue = [((JavaUtilHashMap *) nil_chk(args_)) getWithId:[((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()]];
  if (strValue == nil || ![self isBooleanWithNSString:name]) {
    return defaultValue;
  }
  return [((NSString *) nil_chk([((NSString *) nil_chk(strValue)) lowercaseString])) isEqual:@"true"];
}

- (jboolean)isBooleanWithNSString:(NSString *)name {
  NSString *strValue = [((JavaUtilHashMap *) nil_chk(args_)) getWithId:[((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()]];
  if (strValue == nil) {
    return NO;
  }
  strValue = [((NSString *) nil_chk(strValue)) lowercaseString];
  return [((NSString *) nil_chk(strValue)) isEqual:@"true"] || [strValue isEqual:@"false"];
}

- (jboolean)containsArgWithNSString:(NSString *)name {
  return [((JavaUtilHashMap *) nil_chk(args_)) containsKeyWithId:[((NSString *) nil_chk(name)) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()]];
}

- (GeogebraIOSCommandLineArguments *)addWithNSString:(NSString *)newKey
                                        withNSString:(NSString *)newValue {
  GeogebraIOSCommandLineArguments *ret = [new_GeogebraIOSCommandLineArguments_initWithNSStringArray_(nil) autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(args_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    NSString *value = [args_ getWithId:key];
    [ret->args_ putWithId:key withId:value];
  }
  [ret->args_ putWithId:newKey withId:newValue];
  if ([((NSString *) nil_chk(newKey)) hasPrefix:@"file"]) {
    ++(ret->noOfFiles_);
  }
  if ([((NSString *) nil_chk(newValue)) hasSuffix:@".ggt"]) {
    ++(ret->noOfTools_);
  }
  return ret;
}

- (GeogebraIOSCommandLineArguments *)getGlobalArguments {
  GeogebraIOSCommandLineArguments *ret = [new_GeogebraIOSCommandLineArguments_initWithNSStringArray_(nil) autorelease];
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(args_)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    NSString *key = [it next];
    if (![((NSString *) nil_chk(key)) hasPrefix:@"file"]) {
      NSString *value = [args_ getWithId:key];
      [ret->args_ putWithId:key withId:value];
    }
  }
  return ret;
}

- (void)dealloc {
  RELEASE_(args_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSStringArray:", "CommandLineArguments", NULL, 0x1, NULL, NULL },
    { "addFileWithNSString:", "addFile", "V", 0x2, NULL, NULL },
    { "getNoOfFiles", NULL, "I", 0x1, NULL, NULL },
    { "getNoOfTools", NULL, "I", 0x1, NULL, NULL },
    { "getStringValueWithNSString:", "getStringValue", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getBooleanValueWithNSString:withBoolean:", "getBooleanValue", "Z", 0x1, NULL, NULL },
    { "isBooleanWithNSString:", "isBoolean", "Z", 0x1, NULL, NULL },
    { "containsArgWithNSString:", "containsArg", "Z", 0x1, NULL, NULL },
    { "addWithNSString:withNSString:", "add", "Lgeogebra.iOS.CommandLineArguments;", 0x1, NULL, NULL },
    { "getGlobalArguments", NULL, "Lgeogebra.iOS.CommandLineArguments;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "args_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "noOfFiles_", NULL, 0x2, "I", NULL, NULL,  },
    { "noOfTools_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraIOSCommandLineArguments = { 2, "CommandLineArguments", "geogebra.iOS", NULL, 0x1, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraIOSCommandLineArguments;
}

@end

void GeogebraIOSCommandLineArguments_initWithNSStringArray_(GeogebraIOSCommandLineArguments *self, IOSObjectArray *cmdArgs) {
  NSObject_init(self);
  self->noOfFiles_ = 0;
  GeogebraIOSCommandLineArguments_setAndConsume_args_(self, new_JavaUtilHashMap_init());
  if (cmdArgs == nil) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cmdArgs))->size_; ++i) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) hasPrefix:@"--"]) {
      jint equalSignIndex = [((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) lastIndexOf:'='];
      if (equalSignIndex != -1) {
        [self->args_ putWithId:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) substring:2 endIndex:equalSignIndex])) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()] withId:[((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) substring:equalSignIndex + 1]];
      }
      else {
        [self->args_ putWithId:[((NSString *) nil_chk([((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) substring:2])) lowercaseStringWithJRELocale:JavaUtilLocale_get_US_()] withId:@""];
      }
    }
    else if (![((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) hasPrefix:@"-"]) {
      if ([((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) indexOf:','] > -1) {
        IOSObjectArray *files = [((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) split:@","];
        for (jint j = 0; j < ((IOSObjectArray *) nil_chk(files))->size_; j++) {
          if ([((NSString *) nil_chk(IOSObjectArray_Get(files, j))) indexOf:'='] > -1) {
            jint equalSignIndex = [((NSString *) nil_chk(IOSObjectArray_Get(files, j))) lastIndexOf:'='];
            if (equalSignIndex > -1) {
              [self->args_ putWithId:[((NSString *) nil_chk(IOSObjectArray_Get(files, j))) substring:0 endIndex:equalSignIndex] withId:[((NSString *) nil_chk(IOSObjectArray_Get(files, j))) substring:equalSignIndex + 1]];
            }
            else {
              [self->args_ putWithId:IOSObjectArray_Get(files, j) withId:@""];
            }
          }
          else {
            GeogebraIOSCommandLineArguments_addFileWithNSString_(self, IOSObjectArray_Get(files, j));
          }
        }
      }
      else {
        IOSObjectArray_Set(cmdArgs, i, [((NSString *) nil_chk(IOSObjectArray_Get(cmdArgs, i))) replaceAll:@"%20" withReplacement:@" "]);
        GeogebraIOSCommandLineArguments_addFileWithNSString_(self, IOSObjectArray_Get(cmdArgs, i));
      }
    }
    else {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"unknown argument ", IOSObjectArray_Get(cmdArgs, i)));
    }
  }
}

GeogebraIOSCommandLineArguments *new_GeogebraIOSCommandLineArguments_initWithNSStringArray_(IOSObjectArray *cmdArgs) {
  GeogebraIOSCommandLineArguments *self = [GeogebraIOSCommandLineArguments alloc];
  GeogebraIOSCommandLineArguments_initWithNSStringArray_(self, cmdArgs);
  return self;
}

void GeogebraIOSCommandLineArguments_addFileWithNSString_(GeogebraIOSCommandLineArguments *self, NSString *string) {
  NSString *filename = [((NSString *) nil_chk(string)) replaceAll:@"%20" withReplacement:@" "];
  [((JavaUtilHashMap *) nil_chk(self->args_)) putWithId:JreStrcat("$I", @"file", (self->noOfFiles_++)) withId:filename];
  if ([((NSString *) nil_chk(filename)) hasSuffix:@".ggt"]) {
    self->noOfTools_++;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraIOSCommandLineArguments)
