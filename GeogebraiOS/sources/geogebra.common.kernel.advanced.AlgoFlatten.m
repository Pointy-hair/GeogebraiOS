//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoFlatten.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoFlatten.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"

@interface GeogebraCommonKernelAdvancedAlgoFlatten () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
}

- (void)flattenWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)outputList
               withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFlatten, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFlatten, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoFlatten_compute(GeogebraCommonKernelAdvancedAlgoFlatten *self);

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoFlatten_flattenWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoFlatten *self, GeogebraCommonKernelGeosGeoList *outputList, GeogebraCommonKernelGeosGeoList *list);

@implementation GeogebraCommonKernelAdvancedAlgoFlatten

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAdvancedAlgoFlatten_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Flatten();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoFlatten_compute(self);
}

- (void)flattenWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)outputList
               withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelAdvancedAlgoFlatten_flattenWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, outputList, list);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFlatten", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "flattenWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "flatten", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoFlatten = { 2, "AlgoFlatten", "geogebra.common.kernel.advanced", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoFlatten;
}

@end

void GeogebraCommonKernelAdvancedAlgoFlatten_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoFlatten *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoFlatten_set_inputList_(self, inputList);
  GeogebraCommonKernelAdvancedAlgoFlatten_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoFlatten_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoFlatten *new_GeogebraCommonKernelAdvancedAlgoFlatten_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAdvancedAlgoFlatten *self = [GeogebraCommonKernelAdvancedAlgoFlatten alloc];
  GeogebraCommonKernelAdvancedAlgoFlatten_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoFlatten_compute(GeogebraCommonKernelAdvancedAlgoFlatten *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  GeogebraCommonKernelAdvancedAlgoFlatten_flattenWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, self->outputList_, self->inputList_);
}

void GeogebraCommonKernelAdvancedAlgoFlatten_flattenWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoFlatten *self, GeogebraCommonKernelGeosGeoList *outputList, GeogebraCommonKernelGeosGeoList *list) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *element = [list getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(element)) isGeoList]) {
      GeogebraCommonKernelAdvancedAlgoFlatten_flattenWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, outputList, (GeogebraCommonKernelGeosGeoList *) check_class_cast(element, [GeogebraCommonKernelGeosGeoList class]));
    }
    else [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList)) addWithGeogebraCommonKernelGeosGeoElement:[element copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoFlatten)
