//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoConicPart.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordNearest.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/RegionParameters.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformMirror.h"
#include "geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircle.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircumcircle.h"
#include "geogebra/common/kernel/algos/AlgoConicPartConicParameters.h"
#include "geogebra/common/kernel/algos/AlgoConicPartConicPoints.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSemicircle.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartParameters.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoConicPart () {
 @public
  GeogebraCommonKernelKernelNDGeoConicPartParameters *parameters_;
  JavaLangStringBuilder *sbToString_;
  GeogebraCommonKernelPathParameter *tempPP_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
  IOSDoubleArray *tmpParameters_;
}

- (GeogebraCommonKernelPathParameter *)getTempPathParameter;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoConicPart, parameters_, GeogebraCommonKernelKernelNDGeoConicPartParameters *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoConicPart, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoConicPart, tempPP_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoConicPart, tmpCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoConicPart, tmpParameters_, IOSDoubleArray *)

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoConicPart_getConicPartType(GeogebraCommonKernelGeosGeoConicPart *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoConicPart_getValue(GeogebraCommonKernelGeosGeoConicPart *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoConicPart_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoConicPart *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoConicPart_getTempPathParameter(GeogebraCommonKernelGeosGeoConicPart *self);

@implementation GeogebraCommonKernelGeosGeoConicPart

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)type {
  GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(self, c, type);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)conic {
  GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelGeosGeoConicPart_(self, conic);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_CONICPART();
}

- (NSString *)getTypeString {
  switch (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->conic_part_type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC:
    return @"Arc";
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR:
    return @"Sector";
    default:
    return [super getTypeString];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)construction {
  GeogebraCommonKernelGeosGeoConicPart *ret = [new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(construction, ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->conic_part_type_) autorelease];
  [ret setWithGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConicPart]) return;
  GeogebraCommonKernelGeosGeoConicPart *cp = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoConicPart class]);
  [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) setWithGeogebraCommonKernelKernelNDGeoConicPartParameters:cp->parameters_];
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConicPart]) {
    id<GeogebraCommonKernelKernelNDGeoConicPartND> cp = (id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND));
    ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->allowOutlyingIntersections_ = ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk([cp getParameters]))->allowOutlyingIntersections_;
  }
}

- (jint)getConicPartType {
  return GeogebraCommonKernelGeosGeoConicPart_getConicPartType(self);
}

- (jdouble)getParameterStart {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->paramStart_;
}

- (jdouble)getParameterEnd {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->paramEnd_;
}

- (jdouble)getParameterExtent {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->paramExtent_;
}

- (jboolean)positiveOrientation {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->posOrientation_;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoConicPart]) return NO;
  GeogebraCommonKernelGeosGeoConicPart *other = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoConicPart class]);
  return [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) isEqualWithGeogebraCommonKernelKernelNDGeoConicPartParameters:other->parameters_] && [super isEqualWithGeogebraCommonKernelGeosGeoElement:other];
}

- (void)setParametersWithDouble:(jdouble)start
                     withDouble:(jdouble)end
                    withBoolean:(jboolean)positiveOrientation {
  [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) setParametersWithBoolean:[super isDefined] withDouble:start withDouble:end withBoolean:positiveOrientation];
}

- (jboolean)isDefined {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->value_defined_;
}

- (void)setUndefined {
  ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->value_defined_ = NO;
}

- (jdouble)getValue {
  return GeogebraCommonKernelGeosGeoConicPart_getValue(self);
}

- (jdouble)getArcLength {
  return [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) getArcLength];
}

- (jdouble)getArea {
  return [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) getArea];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithNSString:label_];
  [sbToString_ appendWithNSString:@" = "];
  [sbToString_ appendWithNSString:GeogebraCommonKernelGeosGeoConicPart_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoConicPart_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (jboolean)allowOutlyingIntersections {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->allowOutlyingIntersections_;
}

- (void)setAllowOutlyingIntersectionsWithBoolean:(jboolean)flag {
  ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->allowOutlyingIntersections_ = flag;
}

- (jboolean)keepsTypeOnGeometricTransform {
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->keepTypeOnGeometricTransform_;
}

- (void)setKeepTypeOnGeometricTransformWithBoolean:(jboolean)flag {
  ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->keepTypeOnGeometricTransform_ = flag;
}

- (jboolean)isLimitedPath {
  return YES;
}

- (jboolean)isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)pt
                                                                 withDouble:(jdouble)eps {
  if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->allowOutlyingIntersections_) {
    return [self isOnFullConicWithGeogebraCommonKernelKernelNDGeoPointND:pt withDouble:eps];
  }
  return [self isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:pt withDouble:eps];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)precision {
  jdouble eps = precision;
  GeogebraCommonKernelGeosGeoPoint *P = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [GeogebraCommonKernelGeosGeoPoint class]);
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) return YES;
  if (![self isOnFullConicWithGeogebraCommonKernelKernelNDGeoPointND:P withDouble:eps]) return NO;
  jdouble px = P->x_, py = P->y_, pz = P->z_;
  GeogebraCommonKernelPathParameter *tempParam = GeogebraCommonKernelGeosGeoConicPart_getTempPathParameter(self);
  GeogebraCommonKernelPathParameter *pPP = [P getPathParameter];
  [((GeogebraCommonKernelPathParameter *) nil_chk(tempParam)) setWithGeogebraCommonKernelPathParameter:pPP];
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) setEllipseParameterWithGeogebraCommonKernelMatrixCoords:[P getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]] withGeogebraCommonKernelPathParameter:[P getPathParameter]];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->posOrientation_) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    }
    else {
      ((GeogebraCommonKernelPathParameter *) nil_chk([P getPathParameter]))->t_ = -1;
    }
    break;
    default:
    ((GeogebraCommonKernelPathParameter *) nil_chk(pPP))->t_ = -1;
  }
  if (IOSDoubleArray_Get(nil_chk(halfAxes_), 0) > 100) eps = JavaLangMath_maxWithDouble_withDouble_(GeogebraCommonKernelKernel_MAX_PRECISION, eps / IOSDoubleArray_Get(halfAxes_, 0));
  jboolean result = ((GeogebraCommonKernelPathParameter *) nil_chk(pPP))->t_ >= -eps && pPP->t_ <= 1 + eps;
  P->x_ = px;
  P->y_ = py;
  P->z_ = pz;
  [pPP setWithGeogebraCommonKernelPathParameter:tempParam];
  return result;
}

- (GeogebraCommonKernelPathParameter *)getTempPathParameter {
  return GeogebraCommonKernelGeosGeoConicPart_getTempPathParameter(self);
}

- (jboolean)isClosedPath {
  return NO;
}

- (void)superPointChangedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)P
                        withGeogebraCommonKernelPathParameter:(GeogebraCommonKernelPathParameter *)pp {
  [super pointChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
}

- (void)pointChangedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)P
                   withGeogebraCommonKernelPathParameter:(GeogebraCommonKernelPathParameter *)pp
                                             withBoolean:(jboolean)checkSection {
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setPathTypeWithInt:type_];
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) setEllipseParameterWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
    [parameters_ clipEllipseParameterWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->posOrientation_) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) doPointChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
      if (pp->t_ < 0) {
        pp->t_ = 0;
        [self pathChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
      }
      else if (pp->t_ > 1) {
        pp->t_ = 1;
        [self pathChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
      }
    }
    else {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:-((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0)))->y_];
      [P setYWithDouble:((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 0)))->x_];
      [P setZWithDouble:0];
    }
    break;
    default:
    pp->t_ = JavaLangDouble_NaN;
  }
}

- (void)pathChangedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)P
                  withGeogebraCommonKernelPathParameter:(GeogebraCommonKernelPathParameter *)pp {
  if (!((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->value_defined_) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:JavaLangDouble_NaN];
    return;
  }
  if ([((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getPathType] != type_ || JavaLangDouble_isNaNWithDouble_(pp->t_)) {
    [self pointChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
    return;
  }
  if (pp->t_ < 0.0) {
    pp->t_ = 0;
  }
  else if (pp->t_ > 1.0) {
    pp->t_ = 1;
  }
  {
    jdouble t;
    jdouble angle;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      if ([pp getPathType] != type_) {
        [self pointChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
        return;
      }
      t = parameters_->posOrientation_ ? pp->t_ : 1.0 - pp->t_;
      angle = parameters_->paramStart_ + t * parameters_->paramExtent_;
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * JavaLangMath_cosWithDouble_(angle)];
      [P setYWithDouble:IOSDoubleArray_Get(halfAxes_, 1) * JavaLangMath_sinWithDouble_(angle)];
      [P setZWithDouble:1];
      [self coordsEVtoRWWithGeogebraCommonKernelMatrixCoords:P];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      if (parameters_->posOrientation_) {
        if ([pp getPathType] != type_) {
          [self pointChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
        }
        else {
          [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) pathChangedWithGeogebraCommonKernelMatrixCoords:P withGeogebraCommonKernelPathParameter:pp];
        }
      }
      else {
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:-((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0)))->y_];
        [P setYWithDouble:((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, 0)))->x_];
        [P setZWithDouble:0];
      }
      break;
      default:
      ;
    }
  }
}

- (jdouble)getMinParameter {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return 0;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->posOrientation_) {
      return 0;
    }
    return JavaLangDouble_NEGATIVE_INFINITY;
    default:
    return JavaLangDouble_NaN;
  }
}

- (jdouble)getMaxParameter {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return 1;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->posOrientation_) {
      return 1;
    }
    return JavaLangDouble_POSITIVE_INFINITY;
    default:
    return JavaLangDouble_NaN;
  }
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) getXMLtagsWithJavaLangStringBuilder:sb];
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, GeogebraCommonKernelGeosGeoConicPart_getValue(self)) autorelease];
}

- (jdouble)getDouble {
  return GeogebraCommonKernelGeosGeoConicPart_getValue(self);
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)isGeoConicPart {
  return YES;
}

- (IOSObjectArray *)createTransformedObjectWithGeogebraCommonKernelTransform:(GeogebraCommonKernelTransform *)t
                                                                withNSString:(NSString *)transformedLabel {
  if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->keepTypeOnGeometricTransform_) {
    GeogebraCommonKernelGeosGeoElement_set_algoParent_(self, [self getParentAlgorithm]);
  }
  jint conic_part_type = parameters_->conic_part_type_;
  if ([algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartCircle class]]) {
    GeogebraCommonKernelAlgosAlgoConicPartCircle *algo = (GeogebraCommonKernelAlgosAlgoConicPartCircle *) check_class_cast(algoParent_, [GeogebraCommonKernelAlgosAlgoConicPartCircle class]);
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoConicPartCircle *) nil_chk(algo)) getCenter], [algo getStartPoint], [algo getEndPoint] } count:3 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    GeogebraCommonKernelAlgosAlgoCircleTwoPoints *algoCircle = [new_GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCircle];
    GeogebraCommonKernelGeosGeoConic *circle = [algoCircle getCircle];
    points = [((GeogebraCommonKernelTransform *) nil_chk(t)) transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    GeogebraCommonKernelKernelNDGeoConicND *transformedCircle = [t getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:circle];
    [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(transformedCircle)) getParentAlgorithm]];
    GeogebraCommonKernelAlgosAlgoConicPartConicPoints *algoResult = [new_GeogebraCommonKernelAlgosAlgoConicPartConicPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, transformedLabel, transformedCircle, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoPoint class]), conic_part_type) autorelease];
    GeogebraCommonKernelGeosGeoConicPart *conicPart = [algoResult getConicPart];
    [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(conicPart)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ conicPart, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class]) } count:4 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else if ([algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartCircumcircle class]]) {
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent_))->input_), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(algoParent_->input_, 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(algoParent_->input_, 2), [GeogebraCommonKernelGeosGeoPoint class]) } count:3 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    points = [((GeogebraCommonKernelTransform *) nil_chk(t)) transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    GeogebraCommonKernelAlgosAlgoConicPartCircumcircle *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartCircumcircle_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withInt_(cons_, transformedLabel, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoPoint class]), conic_part_type) autorelease];
    GeogebraCommonKernelGeosGeoConicPart *res = [algo getConicPart];
    [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(res)) setLabelWithNSString:transformedLabel];
    [res setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ res, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 2), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoElement class]) } count:4 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else if ([algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartConicParameters class]]) {
    GeogebraCommonKernelAlgosAlgoConicPartConicParameters *algo = (GeogebraCommonKernelAlgosAlgoConicPartConicParameters *) check_class_cast(algoParent_, [GeogebraCommonKernelAlgosAlgoConicPartConicParameters class]);
    GeogebraCommonKernelKernelNDGeoConicND *transformedConic = [((GeogebraCommonKernelTransform *) nil_chk(t)) getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:((GeogebraCommonKernelAlgosAlgoConicPartConicParameters *) nil_chk(algo))->conic_];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(transformedConic)) getParentAlgorithm]];
    algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicParameters_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withInt_(cons_, transformedLabel, transformedConic, algo->startParam_, algo->endParam_, conic_part_type) autorelease];
    GeogebraCommonKernelGeosGeoElement *ret = [algo getConicPart];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else if ([algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartConicPoints class]]) {
    GeogebraCommonKernelAlgosAlgoConicPartConicPoints *algo = (GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast(algoParent_, [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class]);
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(algo)) getStartPoint], [algo getEndPoint] } count:2 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    points = [((GeogebraCommonKernelTransform *) nil_chk(t)) transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    GeogebraCommonKernelKernelNDGeoConicND *orgConic = [algo getConic];
    GeogebraCommonKernelKernelNDGeoConicND *transformedConic = [t getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:orgConic];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(transformedConic)) getParentAlgorithm]];
    algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, transformedLabel, transformedConic, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class]), conic_part_type) autorelease];
    GeogebraCommonKernelGeosGeoConicPart *conicPart = [algo getConicPart];
    [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(conicPart)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ conicPart, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else if ([algoParent_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoSemicircle class]]) {
    GeogebraCommonKernelAlgosAlgoElement *algo = algoParent_;
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelAlgosAlgoSemicircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoSemicircle *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoSemicircle class])))) getA], [((GeogebraCommonKernelAlgosAlgoSemicircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoSemicircle *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoSemicircle class])))) getB] } count:2 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    points = [((GeogebraCommonKernelTransform *) nil_chk(t)) transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    GeogebraCommonKernelGeosGeoConic *semCirc;
    if ([t isKindOfClass:[GeogebraCommonKernelTransformMirror class]] && [t changesOrientation]) {
      semCirc = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) SemicircleWithNSString:transformedLabel withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 1), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class])];
    }
    else if ([t isSimilar]) {
      semCirc = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) SemicircleWithNSString:transformedLabel withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class])];
    }
    else {
      GeogebraCommonKernelGeosGeoConic *orgConic = [((GeogebraCommonKernelAlgosAlgoSemicircle *) nil_chk(((GeogebraCommonKernelAlgosAlgoSemicircle *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoSemicircle class])))) getConic];
      GeogebraCommonKernelKernelNDGeoConicND *transformedConic = [t getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:orgConic];
      [((GeogebraCommonKernelConstruction *) nil_chk((cons_))) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(transformedConic)) getParentAlgorithm]];
      if ([t changesOrientation]) {
        algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, transformedLabel, transformedConic, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoPoint class]), conic_part_type) autorelease];
      }
      else algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, transformedLabel, transformedConic, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoPoint class]), conic_part_type) autorelease];
      GeogebraCommonKernelGeosGeoConicPart *conicPart = [((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class])))) getConicPart];
      [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(conicPart)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
      IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ conicPart, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return geos;
    }
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(semCirc)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ semCirc, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(points), 0), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else {
    GeogebraCommonKernelKernelNDGeoConicND *transformedConic = [((GeogebraCommonKernelTransform *) nil_chk(t)) getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:self];
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(transformedConic)) setLabelWithNSString:transformedLabel];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ transformedConic } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelGeosGeoConicPart_(self) autorelease];
}

- (jboolean)isInRegionWithDouble:(jdouble)x0
                      withDouble:(jdouble)y0 {
  if (![super isInRegionWithDouble:x0 withDouble:y0]) return NO;
  return [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_)) isInRegionWithDouble:x0 withDouble:y0];
}

- (void)moveBackToRegionWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)pi
                          withGeogebraCommonKernelRegionParameters:(GeogebraCommonKernelRegionParameters *)rp {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pi)) getCoordsInD2WithGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  GeogebraCommonKernelPathParameter *pp = [pi getPathParameter];
  GeogebraCommonKernelMatrixCoordNearest *nearestPoint = [new_GeogebraCommonKernelMatrixCoordNearest_initWithGeogebraCommonKernelMatrixCoords_(coords) autorelease];
  GeogebraCommonKernelMatrixCoords *midPoint = [self getMidpoint2D];
  if (GeogebraCommonKernelGeosGeoConicPart_getConicPartType(self) == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:midPoint];
  GeogebraCommonKernelMatrixCoords *ev0 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  [ev0 setWithGeogebraCommonKernelMatrixCoords:[self getEigenvecWithInt:0]];
  GeogebraCommonKernelMatrixCoords *ev1 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  [ev1 setWithGeogebraCommonKernelMatrixCoords:[self getEigenvecWithInt:1]];
  GeogebraCommonKernelMatrixCoords *firstPoint = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(midPoint)) addWithGeogebraCommonKernelMatrixCoords:[ev0 mulWithDouble:[self getHalfAxisWithInt:0] * JavaLangMath_cosWithDouble_(((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->paramStart_)]])) addWithGeogebraCommonKernelMatrixCoords:[ev1 mulWithDouble:[self getHalfAxisWithInt:1] * JavaLangMath_sinWithDouble_(parameters_->paramStart_)]];
  [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:firstPoint];
  GeogebraCommonKernelMatrixCoords *secondPoint = [((GeogebraCommonKernelMatrixCoords *) nil_chk([midPoint addWithGeogebraCommonKernelMatrixCoords:[ev0 mulWithDouble:[self getHalfAxisWithInt:0] * JavaLangMath_cosWithDouble_(parameters_->paramEnd_)]])) addWithGeogebraCommonKernelMatrixCoords:[ev1 mulWithDouble:[self getHalfAxisWithInt:1] * JavaLangMath_sinWithDouble_(parameters_->paramEnd_)]];
  [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:secondPoint];
  if (GeogebraCommonKernelGeosGeoConicPart_getConicPartType(self) == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectLineWithGeogebraCommonKernelMatrixCoords:midPoint withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(firstPoint)) subWithGeogebraCommonKernelMatrixCoords:midPoint] withGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpParameters_];
    if (IOSDoubleArray_Get(nil_chk(tmpParameters_), 0) > 0 && IOSDoubleArray_Get(tmpParameters_, 0) < 1) [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
    [coords projectLineWithGeogebraCommonKernelMatrixCoords:midPoint withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(secondPoint)) subWithGeogebraCommonKernelMatrixCoords:midPoint] withGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpParameters_];
    if (IOSDoubleArray_Get(tmpParameters_, 0) > 0 && IOSDoubleArray_Get(tmpParameters_, 0) < 1) [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  else {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectLineWithGeogebraCommonKernelMatrixCoords:firstPoint withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(secondPoint)) subWithGeogebraCommonKernelMatrixCoords:firstPoint] withGeogebraCommonKernelMatrixCoords:tmpCoords_ withDoubleArray:tmpParameters_];
    if (IOSDoubleArray_Get(nil_chk(tmpParameters_), 0) > 0 && IOSDoubleArray_Get(tmpParameters_, 0) < 1) [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:tmpCoords_];
  }
  if (![super isInRegionWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY]]) {
    GeogebraCommonKernelMatrixCoords *pointConic = [coords copyVector];
    [self pointChangedWithGeogebraCommonKernelMatrixCoords:pointConic withGeogebraCommonKernelPathParameter:pp];
    [nearestPoint checkWithGeogebraCommonKernelMatrixCoords:pointConic];
    [((GeogebraCommonKernelRegionParameters *) nil_chk(rp)) setIsOnPathWithBoolean:YES];
  }
  coords = [nearestPoint get];
  [pi setCoords2DWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [pi updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:[self getCoordSys]];
  [pi updateCoords];
}

- (void)regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:PI]) {
    [self pointChangedForRegionWithGeogebraCommonKernelKernelNDGeoPointND:PI];
    return;
  }
  [super regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) updateCoords2D];
  if (![self isInRegionWithGeogebraCommonKernelKernelNDGeoPointND:PI]) [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:PI];
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (jboolean)isAllEndpointsLabelsSet {
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo == nil) return NO;
  if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartConicPoints class]]) return [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class])))) getStartPoint])) isLabelSet] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) nil_chk(((GeogebraCommonKernelAlgosAlgoConicPartConicPoints *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoConicPartConicPoints class])))) getEndPoint])) isLabelSet];
  if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicPartCircumcircle class]]) return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]), 0))) isLabelSet] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), 1))) isLabelSet] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), 2))) isLabelSet];
  return NO;
}

- (GeogebraCommonKernelGeosGeoPoint *)getPointParamWithDouble:(jdouble)param {
  GeogebraCommonKernelGeosGeoPoint *ret = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [self pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:ret];
  [((GeogebraCommonKernelPathParameter *) nil_chk([ret getPathParameter])) setTWithDouble:param];
  [self pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:ret];
  [ret updateCoords];
  return ret;
}

- (GeogebraCommonKernelKernelNDGeoConicPartParameters *)getParameters {
  return parameters_;
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin3DWithInt:(jint)i {
  return [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), i))) getStartInhomCoords];
}

- (GeogebraCommonKernelMatrixCoords *)getSegmentEnd3D {
  return [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), 0))) getEndInhomCoords];
}

- (void)setParametersToSinglePoint {
  ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(parameters_))->value_ = 0;
  parameters_->value_defined_ = YES;
}

- (void)dealloc {
  RELEASE_(parameters_);
  RELEASE_(sbToString_);
  RELEASE_(tempPP_);
  RELEASE_(tmpCoords_);
  RELEASE_(tmpParameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoConicPart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoConicPart:", "GeoConicPart", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "getConicPartType", NULL, "I", 0x11, NULL, NULL },
    { "getParameterStart", NULL, "D", 0x11, NULL, NULL },
    { "getParameterEnd", NULL, "D", 0x11, NULL, NULL },
    { "getParameterExtent", NULL, "D", 0x11, NULL, NULL },
    { "positiveOrientation", NULL, "Z", 0x11, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "setParametersWithDouble:withDouble:withBoolean:", "setParameters", "V", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "getValue", NULL, "D", 0x11, NULL, NULL },
    { "getArcLength", NULL, "D", 0x11, NULL, NULL },
    { "getArea", NULL, "D", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "allowOutlyingIntersections", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowOutlyingIntersectionsWithBoolean:", "setAllowOutlyingIntersections", "V", 0x1, NULL, NULL },
    { "keepsTypeOnGeometricTransform", NULL, "Z", 0x1, NULL, NULL },
    { "setKeepTypeOnGeometricTransformWithBoolean:", "setKeepTypeOnGeometricTransform", "V", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x11, NULL, NULL },
    { "isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "getTempPathParameter", NULL, "Lgeogebra.common.kernel.PathParameter;", 0x2, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "superPointChangedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelPathParameter:", "superPointChanged", "V", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelPathParameter:withBoolean:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelPathParameter:", "pathChanged", "V", 0x4, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoConicPart", NULL, "Z", 0x1, NULL, NULL },
    { "createTransformedObjectWithGeogebraCommonKernelTransform:withNSString:", "createTransformedObject", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "isInRegionWithDouble:withDouble:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "moveBackToRegionWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelRegionParameters:", "moveBackToRegion", "V", 0x4, NULL, NULL },
    { "regionChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "regionChanged", "V", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "isAllEndpointsLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "getPointParamWithDouble:", "getPointParam", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getParameters", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicPartParameters;", 0x1, NULL, NULL },
    { "getOrigin3DWithInt:", "getOrigin3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getSegmentEnd3D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setParametersToSinglePoint", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parameters_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoConicPartParameters;", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "tempPP_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpParameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoConicPart = { 2, "GeoConicPart", "geogebra.common.kernel.geos", NULL, 0x1, 53, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoConicPart;
}

@end

void GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelGeosGeoConicPart *self, GeogebraCommonKernelConstruction *c, jint type) {
  GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoConicPart_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonKernelGeosGeoConicPart_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonKernelGeosGeoConicPart_setAndConsume_tmpParameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelGeosGeoConicPart_setAndConsume_parameters_(self, new_GeogebraCommonKernelKernelNDGeoConicPartParameters_initWithGeogebraCommonKernelKernelNDGeoConicND_withInt_(self, type));
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoConicPart *new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *c, jint type) {
  GeogebraCommonKernelGeosGeoConicPart *self = [GeogebraCommonKernelGeosGeoConicPart alloc];
  GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(self, c, type);
  return self;
}

void GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelGeosGeoConicPart_(GeogebraCommonKernelGeosGeoConicPart *self, GeogebraCommonKernelGeosGeoConicPart *conic) {
  GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(self, ((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(conic))->cons_, GeogebraCommonKernelGeosGeoConicPart_getConicPartType(conic));
  [self setWithGeogebraCommonKernelGeosGeoElement:conic];
}

GeogebraCommonKernelGeosGeoConicPart *new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelGeosGeoConicPart_(GeogebraCommonKernelGeosGeoConicPart *conic) {
  GeogebraCommonKernelGeosGeoConicPart *self = [GeogebraCommonKernelGeosGeoConicPart alloc];
  GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelGeosGeoConicPart_(self, conic);
  return self;
}

jint GeogebraCommonKernelGeosGeoConicPart_getConicPartType(GeogebraCommonKernelGeosGeoConicPart *self) {
  if (self->parameters_ == nil) {
    return GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC;
  }
  return ((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(self->parameters_))->conic_part_type_;
}

jdouble GeogebraCommonKernelGeosGeoConicPart_getValue(GeogebraCommonKernelGeosGeoConicPart *self) {
  return [((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(self->parameters_)) getValue];
}

NSString *GeogebraCommonKernelGeosGeoConicPart_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoConicPart *self, GeogebraCommonKernelStringTemplate *tpl) {
  if (((GeogebraCommonKernelKernelNDGeoConicPartParameters *) nil_chk(self->parameters_))->value_defined_) return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:self->parameters_->value_ withGeogebraCommonKernelStringTemplate:tpl];
  return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:JavaLangDouble_NaN withGeogebraCommonKernelStringTemplate:tpl];
}

GeogebraCommonKernelPathParameter *GeogebraCommonKernelGeosGeoConicPart_getTempPathParameter(GeogebraCommonKernelGeosGeoConicPart *self) {
  if (self->tempPP_ == nil) GeogebraCommonKernelGeosGeoConicPart_setAndConsume_tempPP_(self, new_GeogebraCommonKernelPathParameter_init());
  return self->tempPP_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoConicPart)
