//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/cas/CASparser.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/cas/CASparser.h"
#include "geogebra/common/cas/giac/Ggb2giac.h"
#include "geogebra/common/kernel/CASException.h"
#include "geogebra/common/kernel/CASGenericInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoDummyVariable.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/BracketsError.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonCasCASparser () {
 @public
  GeogebraCommonKernelParserParser *parser_;
  GeogebraCommonKernelParserCashandlersParserFunctions *parserFunctions_;
  id<JavaUtilMap> rbCasTranslations_;
}

+ (void)appendcodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)replaceIndices
                                    withInt:(jint)code;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonCasCASparser, parser_, GeogebraCommonKernelParserParser *)
J2OBJC_FIELD_SETTER(GeogebraCommonCasCASparser, parserFunctions_, GeogebraCommonKernelParserCashandlersParserFunctions *)
J2OBJC_FIELD_SETTER(GeogebraCommonCasCASparser, rbCasTranslations_, id<JavaUtilMap>)

__attribute__((unused)) static void GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(JavaLangStringBuilder *replaceIndices, jint code);

typedef NS_ENUM(NSUInteger, GeogebraCommonCasCASparser_FA) {
  GeogebraCommonCasCASparser_FA_NORMAL = 0,
  GeogebraCommonCasCASparser_FA_UNDERSCORE = 1,
  GeogebraCommonCasCASparser_FA_LONG_INDEX = 2,
};

@interface GeogebraCommonCasCASparser_FAEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonCasCASparser_FAEnum_values();

+ (GeogebraCommonCasCASparser_FAEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonCasCASparser_FAEnum *GeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonCasCASparser_FAEnum)

FOUNDATION_EXPORT GeogebraCommonCasCASparser_FAEnum *GeogebraCommonCasCASparser_FAEnum_values_[];

#define GeogebraCommonCasCASparser_FAEnum_NORMAL GeogebraCommonCasCASparser_FAEnum_values_[GeogebraCommonCasCASparser_FA_NORMAL]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonCasCASparser_FAEnum, NORMAL)

#define GeogebraCommonCasCASparser_FAEnum_UNDERSCORE GeogebraCommonCasCASparser_FAEnum_values_[GeogebraCommonCasCASparser_FA_UNDERSCORE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonCasCASparser_FAEnum, UNDERSCORE)

#define GeogebraCommonCasCASparser_FAEnum_LONG_INDEX GeogebraCommonCasCASparser_FAEnum_values_[GeogebraCommonCasCASparser_FA_LONG_INDEX]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonCasCASparser_FAEnum, LONG_INDEX)

__attribute__((unused)) static void GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(GeogebraCommonCasCASparser_FAEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonCasCASparser_FAEnum *new_GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonCasCASparser_FAEnum)

@implementation GeogebraCommonCasCASparser

- (instancetype)initWithGeogebraCommonKernelParserParser:(GeogebraCommonKernelParserParser *)parser
withGeogebraCommonKernelParserCashandlersParserFunctions:(GeogebraCommonKernelParserCashandlersParserFunctions *)pf {
  GeogebraCommonCasCASparser_initWithGeogebraCommonKernelParserParser_withGeogebraCommonKernelParserCashandlersParserFunctions_(self, parser, pf);
  return self;
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputWithNSString:(NSString *)exp {
  GeogebraCommonKernelCASException *c;
  @try {
    return [((GeogebraCommonKernelParserParser *) nil_chk(parser_)) parseGeoGebraCASWithNSString:exp];
  }
  @catch (GeogebraCommonKernelParserParseException *e) {
    c = [new_GeogebraCommonKernelCASException_initWithJavaLangThrowable_(e) autorelease];
    [c setKeyWithNSString:@"InvalidInput"];
    @throw c;
  }
  @catch (GeogebraCommonMainBracketsError *e) {
    c = [new_GeogebraCommonKernelCASException_initWithJavaLangThrowable_(e) autorelease];
    [c setKeyWithNSString:@"UnbalancedBrackets"];
    @throw c;
  }
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASInputAndResolveDummyVarsWithNSString:(NSString *)inValue
                                                                         withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  if (inValue == nil || ((jint) [inValue length]) == 0) return nil;
  @try {
    GeogebraCommonKernelArithmeticValidExpression *ve = [self parseGeoGebraCASInputWithNSString:inValue];
    [self resolveVariablesForCASWithGeogebraCommonKernelArithmeticExpressionValue:ve withGeogebraCommonKernelKernel:kernel];
    if ([ve isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
      [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_FunctionCreator_getCreator()];
    }
    return ve;
  }
  @catch (JavaLangThrowable *e) {
    if ([e isKindOfClass:[GeogebraCommonKernelCASException class]]) @throw (GeogebraCommonKernelCASException *) check_class_cast(e, [GeogebraCommonKernelCASException class]);
    @throw [new_GeogebraCommonKernelCASException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (void)resolveVariablesForCASWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                 withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  @synchronized(self) {
    jboolean isFunction = [ev isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]];
    IOSObjectArray *funVars = nil;
    if (isFunction) {
      GeogebraCommonKernelConstruction *cmdCons = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction];
      funVars = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunction class])))) getFunctionVariables];
      {
        IOSObjectArray *a__ = funVars;
        GeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelArithmeticFunctionVariable *funVar = *b__++;
          GeogebraCommonKernelGeosGeoElement *localVarGeo = [new_GeogebraCommonKernelGeosGeoDummyVariable_initWithGeogebraCommonKernelConstruction_withNSString_(cmdCons, [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funVar)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]) autorelease];
          [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) addLocalVariableWithNSString:[funVar toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()] withGeogebraCommonKernelGeosGeoElement:localVarGeo];
        }
      }
    }
    [((GeogebraCommonKernelKernel *) nil_chk(kernel)) setResolveUnkownVarsAsDummyGeosWithBoolean:YES];
    [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) resolveVariables];
    [kernel setResolveUnkownVarsAsDummyGeosWithBoolean:NO];
    id<JavaUtilSet> nonFunctions = [new_JavaUtilTreeSet_init() autorelease];
    GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector *c = GeogebraCommonKernelArithmeticTraversing_NonFunctionCollector_getCollectorWithJavaUtilSet_(nonFunctions);
    GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer *r = GeogebraCommonKernelArithmeticTraversing_NonFunctionReplacer_getCollectorWithJavaUtilSet_(nonFunctions);
    [ev traverseWithGeogebraCommonKernelArithmeticTraversing:c];
    [ev traverseWithGeogebraCommonKernelArithmeticTraversing:r];
    if (isFunction) {
      GeogebraCommonKernelConstruction *cmdCons = [kernel getConstruction];
      {
        IOSObjectArray *a__ = funVars;
        GeogebraCommonKernelArithmeticFunctionVariable * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelArithmeticFunctionVariable * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelArithmeticFunctionVariable *funVar = *b__++;
          [((GeogebraCommonKernelConstruction *) nil_chk(cmdCons)) removeLocalVariableWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(funVar)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
        }
      }
    }
  }
}

- (NSString *)toGeoGebraStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                         withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  @try {
    return [self toStringWithGeogebraCommonKernelArithmeticExpressionValue:ev withGeogebraCommonKernelStringTemplate:tpl];
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    @throw [new_GeogebraCommonKernelCASException_initWithJavaLangThrowable_(e) autorelease];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                 withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  NSString *GeoGebraString;
  GeogebraCommonKernelArithmeticExpressionNode *expr;
  if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    expr = [ev wrap];
  }
  else expr = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
  GeoGebraString = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expr)) getCASstringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:YES];
  return GeoGebraString;
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGiacWithNSString:(NSString *)exp {
  @try {
    return [((GeogebraCommonKernelParserParser *) nil_chk(parser_)) parseGiacWithNSString:exp];
  }
  @catch (JavaLangThrowable *t) {
    @throw [new_GeogebraCommonKernelCASException_initWithJavaLangThrowable_(t) autorelease];
  }
}

- (NSString *)replaceIndicesWithNSString:(NSString *)str
                             withBoolean:(jboolean)replaceUnicode {
  @synchronized(self) {
    jint len = ((jint) [((NSString *) nil_chk(str)) length]);
    JavaLangStringBuilder *replaceIndices = [new_JavaLangStringBuilder_init() autorelease];
    GeogebraCommonCasCASparser_FAEnum *state = GeogebraCommonCasCASparser_FAEnum_get_NORMAL();
    for (jint i = 0; i < len; i++) {
      jchar c = [str charAtWithInt:i];
      switch ([state ordinal]) {
        case GeogebraCommonCasCASparser_FA_NORMAL:
        if (c == '_') {
          if (i > 0 && [str charAtWithInt:i - 1] == '\\') {
            [replaceIndices deleteCharAtWithInt:[replaceIndices length] - 1];
            [replaceIndices appendWithChar:'_'];
          }
          else {
            state = GeogebraCommonCasCASparser_FAEnum_get_UNDERSCORE();
            GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, '_');
          }
        }
        else if (replaceUnicode && c > 127 && c != GeogebraCommonUtilUnicode_angle) {
          GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        }
        else {
          [replaceIndices appendWithChar:c];
        }
        break;
        case GeogebraCommonCasCASparser_FA_UNDERSCORE:
        if (c == '{') {
          state = GeogebraCommonCasCASparser_FAEnum_get_LONG_INDEX();
        }
        else {
          state = GeogebraCommonCasCASparser_FAEnum_get_NORMAL();
        }
        GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        break;
        case GeogebraCommonCasCASparser_FA_LONG_INDEX:
        if (c == '}') {
          state = GeogebraCommonCasCASparser_FAEnum_get_NORMAL();
        }
        GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, c);
        break;
      }
    }
    return [replaceIndices description];
  }
}

+ (void)appendcodeWithJavaLangStringBuilder:(JavaLangStringBuilder *)replaceIndices
                                    withInt:(jint)code {
  GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(replaceIndices, code);
}

- (NSString *)insertSpecialCharsWithNSString:(NSString *)str {
  jint prefixLen = ((jint) [((NSString *) nil_chk(GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_())) length]);
  if (((jint) [((NSString *) nil_chk(str)) length]) < prefixLen) return str;
  jint len = ((jint) [str length]);
  JavaLangStringBuilder *insertSpecial = [new_JavaLangStringBuilder_init() autorelease];
  jchar prefixStart = [GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_() charAtWithInt:0];
  jboolean prefixFound;
  for (jint i = 0; i < len; i++) {
    jchar c = [str charAtWithInt:i];
    prefixFound = NO;
    if (c == prefixStart && i + prefixLen < ((jint) [str length])) {
      prefixFound = YES;
      jint j = i;
      for (jint k = 0; k < prefixLen; k++, j++) {
        if ([GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_() charAtWithInt:k] != [str charAtWithInt:j]) {
          prefixFound = NO;
          break;
        }
      }
      if (prefixFound) {
        jint code = 0;
        jchar digit;
        while (j < len && GeogebraCommonUtilStringUtil_isDigitWithChar_(digit = [str charAtWithInt:j])) {
          code = 10 * code + (digit - 48);
          j++;
        }
        if (code > 0 && code < 65536) {
          [insertSpecial appendWithChar:(jchar) code];
          i = j;
        }
        else {
          [insertSpecial appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_()];
          i += prefixLen;
        }
      }
      else {
        [insertSpecial appendWithChar:c];
      }
    }
    else {
      [insertSpecial appendWithChar:c];
    }
  }
  return [insertSpecial description];
}

- (GeogebraCommonKernelParserCashandlersParserFunctions *)getParserFunctions {
  return parserFunctions_;
}

- (NSString *)translateToCASWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)ve
                                       withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)casStringType
                                  withGeogebraCommonKernelCASGenericInterface:(id<GeogebraCommonKernelCASGenericInterface>)cas {
  @try {
    NSString *body = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) wrap])) getCASstringWithGeogebraCommonKernelStringTemplate:casStringType withBoolean:NO];
    return body;
  }
  @finally {
  }
}

- (NSString *)getTranslatedCASCommandWithNSString:(NSString *)command {
  return [((id<JavaUtilMap>) nil_chk([self getTranslationRessourceBundle])) getWithId:command];
}

- (jboolean)isCommandAvailableWithNSString:(NSString *)commandKey {
  return [self getTranslatedCASCommandWithNSString:commandKey] != nil;
}

- (id<JavaUtilMap>)getTranslationRessourceBundle {
  @synchronized(self) {
    if (rbCasTranslations_ == nil) {
      GeogebraCommonCasCASparser_set_rbCasTranslations_(self, GeogebraCommonCasGiacGgb2giac_getMap());
    }
    return rbCasTranslations_;
  }
}

- (void)dealloc {
  RELEASE_(parser_);
  RELEASE_(parserFunctions_);
  RELEASE_(rbCasTranslations_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelParserParser:withGeogebraCommonKernelParserCashandlersParserFunctions:", "CASparser", NULL, 0x1, NULL, NULL },
    { "parseGeoGebraCASInputWithNSString:", "parseGeoGebraCASInput", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.CASException;", NULL },
    { "parseGeoGebraCASInputAndResolveDummyVarsWithNSString:withGeogebraCommonKernelKernel:", "parseGeoGebraCASInputAndResolveDummyVars", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.CASException;", NULL },
    { "resolveVariablesForCASWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelKernel:", "resolveVariablesForCAS", "V", 0x21, NULL, NULL },
    { "toGeoGebraStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:", "toGeoGebraString", "Ljava.lang.String;", 0x1, "Lgeogebra.common.kernel.CASException;", NULL },
    { "toStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parseGiacWithNSString:", "parseGiac", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.CASException;", NULL },
    { "replaceIndicesWithNSString:withBoolean:", "replaceIndices", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "appendcodeWithJavaLangStringBuilder:withInt:", "appendcode", "V", 0xa, NULL, NULL },
    { "insertSpecialCharsWithNSString:", "insertSpecialChars", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getParserFunctions", NULL, "Lgeogebra.common.kernel.parser.cashandlers.ParserFunctions;", 0x1, NULL, NULL },
    { "translateToCASWithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelStringTemplate:withGeogebraCommonKernelCASGenericInterface:", "translateToCAS", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedCASCommandWithNSString:", "getTranslatedCASCommand", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isCommandAvailableWithNSString:", "isCommandAvailable", "Z", 0x11, NULL, NULL },
    { "getTranslationRessourceBundle", NULL, "Ljava.util.Map;", 0x20, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Parser;", NULL, NULL,  },
    { "parserFunctions_", NULL, 0x2, "Lgeogebra.common.kernel.parser.cashandlers.ParserFunctions;", NULL, NULL,  },
    { "rbCasTranslations_", NULL, 0x2, "Ljava.util.Map;", NULL, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.cas.CASparser$FA;"};
  static const J2ObjcClassInfo _GeogebraCommonCasCASparser = { 2, "CASparser", "geogebra.common.cas", NULL, 0x1, 15, methods, 3, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonCasCASparser;
}

@end

void GeogebraCommonCasCASparser_initWithGeogebraCommonKernelParserParser_withGeogebraCommonKernelParserCashandlersParserFunctions_(GeogebraCommonCasCASparser *self, GeogebraCommonKernelParserParser *parser, GeogebraCommonKernelParserCashandlersParserFunctions *pf) {
  NSObject_init(self);
  GeogebraCommonCasCASparser_set_parser_(self, parser);
  GeogebraCommonCasCASparser_set_parserFunctions_(self, pf);
}

GeogebraCommonCasCASparser *new_GeogebraCommonCasCASparser_initWithGeogebraCommonKernelParserParser_withGeogebraCommonKernelParserCashandlersParserFunctions_(GeogebraCommonKernelParserParser *parser, GeogebraCommonKernelParserCashandlersParserFunctions *pf) {
  GeogebraCommonCasCASparser *self = [GeogebraCommonCasCASparser alloc];
  GeogebraCommonCasCASparser_initWithGeogebraCommonKernelParserParser_withGeogebraCommonKernelParserCashandlersParserFunctions_(self, parser, pf);
  return self;
}

void GeogebraCommonCasCASparser_appendcodeWithJavaLangStringBuilder_withInt_(JavaLangStringBuilder *replaceIndices, jint code) {
  GeogebraCommonCasCASparser_initialize();
  [((JavaLangStringBuilder *) nil_chk(replaceIndices)) appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_PREFIX_()];
  [replaceIndices appendWithInt:code];
  [replaceIndices appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_UNICODE_DELIMITER_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonCasCASparser)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonCasCASparser_FAEnum)

GeogebraCommonCasCASparser_FAEnum *GeogebraCommonCasCASparser_FAEnum_values_[3];

@implementation GeogebraCommonCasCASparser_FAEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonCasCASparser_FAEnum_values() {
  GeogebraCommonCasCASparser_FAEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonCasCASparser_FAEnum_values_ count:3 type:GeogebraCommonCasCASparser_FAEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonCasCASparser_FAEnum_values();
}

+ (GeogebraCommonCasCASparser_FAEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(name);
}

GeogebraCommonCasCASparser_FAEnum *GeogebraCommonCasCASparser_FAEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonCasCASparser_FAEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonCasCASparser_FAEnum *e = GeogebraCommonCasCASparser_FAEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonCasCASparser_FAEnum class]) {
    GeogebraCommonCasCASparser_FAEnum_NORMAL = new_GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"NORMAL", 0);
    GeogebraCommonCasCASparser_FAEnum_UNDERSCORE = new_GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"UNDERSCORE", 1);
    GeogebraCommonCasCASparser_FAEnum_LONG_INDEX = new_GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(@"LONG_INDEX", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonCasCASparser_FAEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "NORMAL", 0x4019, "Lgeogebra.common.cas.CASparser$FA;", &GeogebraCommonCasCASparser_FAEnum_NORMAL, NULL,  },
    { "UNDERSCORE", "UNDERSCORE", 0x4019, "Lgeogebra.common.cas.CASparser$FA;", &GeogebraCommonCasCASparser_FAEnum_UNDERSCORE, NULL,  },
    { "LONG_INDEX", "LONG_INDEX", 0x4019, "Lgeogebra.common.cas.CASparser$FA;", &GeogebraCommonCasCASparser_FAEnum_LONG_INDEX, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.cas.CASparser$FA;"};
  static const J2ObjcClassInfo _GeogebraCommonCasCASparser_FAEnum = { 2, "FA", "geogebra.common.cas", "CASparser", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/cas/CASparser$FA;>;" };
  return &_GeogebraCommonCasCASparser_FAEnum;
}

@end

void GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(GeogebraCommonCasCASparser_FAEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonCasCASparser_FAEnum *new_GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonCasCASparser_FAEnum *self = [GeogebraCommonCasCASparser_FAEnum alloc];
  GeogebraCommonCasCASparser_FAEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonCasCASparser_FAEnum)
