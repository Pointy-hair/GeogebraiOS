//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/Construction3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrtho.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSpace.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D ()

- (id<GeogebraCommonKernelKernelNDGeoLineND>)getInputLine;

@end

__attribute__((unused)) static id<GeogebraCommonKernelKernelNDGeoLineND> GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

- (void)setSpecificInputOutput {
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [GeogebraCommonKernelGeosGeoElement class]), inputOrtho_, [((GeogebraCommonGeogebra3DKernel3DConstruction3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DConstruction3D *) check_class_cast(cons_, [GeogebraCommonGeogebra3DKernel3DConstruction3D class])))) getSpace] } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ line_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (id<GeogebraCommonKernelKernelNDGeoLineND>)getInputLine {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(self);
}

- (void)compute {
  id<GeogebraCommonKernelKernelNDGeoLineND> line = GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(self);
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *v1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o];
  GeogebraCommonKernelMatrixCoords *o2 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *v2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(o2)) subWithGeogebraCommonKernelMatrixCoords:o];
  GeogebraCommonKernelMatrixCoords *v3 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) crossProductWithGeogebraCommonKernelMatrixCoords:v2];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v3)) crossProductWithGeogebraCommonKernelMatrixCoords:v1];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setUndefined];
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setCoordWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getPoint])) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[v normalize]];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToBinSpace" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputOrtho_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoOrthoLinePointLine3D", NULL, 0x1, NULL, NULL },
    { "setSpecificInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getInputLine", NULL, "Lgeogebra.common.kernel.kernelND.GeoLineND;", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D = { 2, "AlgoOrthoLinePointLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrtho_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

id<GeogebraCommonKernelKernelNDGeoLineND> GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D_getInputLine(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D *self) {
  return (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getInputOrtho], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointLine3D)
