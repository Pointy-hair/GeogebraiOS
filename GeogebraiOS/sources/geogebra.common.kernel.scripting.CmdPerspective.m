//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdPerspective.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdPerspective.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GgbAPI.h"

@implementation GeogebraCommonKernelScriptingCmdPerspective

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdPerspective_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  IOSObjectArray *args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if (((IOSObjectArray *) nil_chk(args))->size_ != 1) {
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withInt:args->size_];
  }
  if ([IOSObjectArray_Get(args, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoText class]] || [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(args, 0)]) {
    NSString *code = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(args, 0))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    [((GeogebraCommonPluginGgbAPI *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getGgbApi])) setPerspectiveWithNSString:code];
    return;
  }
  @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 0)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPerspective", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdPerspective = { 2, "CmdPerspective", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdPerspective;
}

@end

void GeogebraCommonKernelScriptingCmdPerspective_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdPerspective *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdPerspective *new_GeogebraCommonKernelScriptingCmdPerspective_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdPerspective *self = [GeogebraCommonKernelScriptingCmdPerspective alloc];
  GeogebraCommonKernelScriptingCmdPerspective_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdPerspective)
