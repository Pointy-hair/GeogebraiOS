//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawImage.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GAlphaComposite.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GComposite.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawImage.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonEuclidianDrawDrawImage () {
 @public
  GeogebraCommonKernelGeosGeoImage *geoImage_;
  jboolean isVisible_;
  id<GeogebraCommonAwtMyImage> image_;
  jboolean absoluteLocation_;
  id<GeogebraCommonAwtGAlphaComposite> alphaComp_;
  jfloat alpha_;
  jboolean isInBackground__;
  id<GeogebraCommonAwtGAffineTransform> at_, atInverse_, tempAT_;
  jboolean needsInterpolationRenderingHint_;
  jint screenX_, screenY_;
  id<GeogebraCommonAwtGRectangle> boundingBox_;
  id<GeogebraCommonAwtGGeneralPath> highlighting_;
  IOSDoubleArray *hitCoords_;
}

- (void)drawHighlightingWithGeogebraCommonAwtGAffineTransform:(id<GeogebraCommonAwtGAffineTransform>)at2
                             withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, geoImage_, GeogebraCommonKernelGeosGeoImage *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, image_, id<GeogebraCommonAwtMyImage>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, alphaComp_, id<GeogebraCommonAwtGAlphaComposite>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, at_, id<GeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, atInverse_, id<GeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, tempAT_, id<GeogebraCommonAwtGAffineTransform>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, boundingBox_, id<GeogebraCommonAwtGRectangle>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, highlighting_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawImage, hitCoords_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawImage_update(GeogebraCommonEuclidianDrawDrawImage *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawImage *self, id<GeogebraCommonAwtGAffineTransform> at2, id<GeogebraCommonAwtGGraphics2D> g2);

@implementation GeogebraCommonEuclidianDrawDrawImage

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                        withGeogebraCommonKernelGeosGeoImage:(GeogebraCommonKernelGeosGeoImage *)geoImage {
  GeogebraCommonEuclidianDrawDrawImage_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoImage_(self, view, geoImage);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawImage_update(self);
}

- (jboolean)checkInBackground {
  if (isInBackground__ != [((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) {
    GeogebraCommonEuclidianDrawDrawImage_update(self);
  }
  else {
    [self setNeedsUpdateWithBoolean:YES];
  }
  return isInBackground__ && [geoImage_ isInBackground];
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g3 {
  if (isVisible_) {
    id<GeogebraCommonAwtGComposite> oldComp = [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g3)) getComposite];
    if (alpha_ >= 0.0f && alpha_ < 1.0f) {
      if (alphaComp_ == nil) GeogebraCommonEuclidianDrawDrawImage_set_alphaComp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAlphaCompositeWithInt:GeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:alpha_]);
      [g3 setCompositeWithGeogebraCommonAwtGComposite:alphaComp_];
    }
    if (absoluteLocation_) {
      [g3 drawImageWithGeogebraCommonAwtMyImage:image_ withGeogebraCommonAwtGBufferedImageOp:nil withInt:screenX_ withInt:screenY_];
      if (!isInBackground__ && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [g3 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
        [g3 setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonAwtGColor_get_lightGray_()];
        [g3 drawWithGeogebraCommonAwtGShape:labelRectangle_];
      }
    }
    else {
      id<GeogebraCommonAwtGAffineTransform> oldAT = [g3 getTransform];
      [g3 transformWithGeogebraCommonAwtGAffineTransform:at_];
      id oldInterpolationHint = [g3 setInterpolationHintWithBoolean:needsInterpolationRenderingHint_];
      [g3 drawImageWithGeogebraCommonAwtMyImage:image_ withInt:0 withInt:0];
      if (!isInBackground__ && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [g3 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
        [g3 setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonAwtGColor_get_lightGray_()];
        GeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGGraphics2D_(self, at_, g3);
        GeogebraCommonAwtGPoint2D *corner1 = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2DWithDouble:[((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) getMinX] withDouble:[labelRectangle_ getMinY]];
        GeogebraCommonAwtGPoint2D *corner2 = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMinX] withDouble:[labelRectangle_ getMaxY]];
        GeogebraCommonAwtGPoint2D *corner3 = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMaxX] withDouble:[labelRectangle_ getMaxY]];
        GeogebraCommonAwtGPoint2D *corner4 = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newPoint2DWithDouble:[labelRectangle_ getMaxX] withDouble:[labelRectangle_ getMinY]];
        [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(at_)) transformWithGeogebraCommonAwtGPoint2D:corner1 withGeogebraCommonAwtGPoint2D:corner1];
        [at_ transformWithGeogebraCommonAwtGPoint2D:corner2 withGeogebraCommonAwtGPoint2D:corner2];
        [at_ transformWithGeogebraCommonAwtGPoint2D:corner3 withGeogebraCommonAwtGPoint2D:corner3];
        [at_ transformWithGeogebraCommonAwtGPoint2D:corner4 withGeogebraCommonAwtGPoint2D:corner4];
        if (highlighting_ == nil) GeogebraCommonEuclidianDrawDrawImage_set_highlighting_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
        else [highlighting_ reset];
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(highlighting_)) moveToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(corner1)) getX] withFloat:(jfloat) [corner1 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(corner2)) getX] withFloat:(jfloat) [corner2 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(corner3)) getX] withFloat:(jfloat) [corner3 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(corner4)) getX] withFloat:(jfloat) [corner4 getY]];
        [highlighting_ lineToWithFloat:(jfloat) [corner1 getX] withFloat:(jfloat) [corner1 getY]];
        [g3 setTransformWithGeogebraCommonAwtGAffineTransform:oldAT];
        [g3 drawWithGeogebraCommonAwtGShape:highlighting_];
      }
      [g3 resetInterpolationHintWithId:oldInterpolationHint];
      [g3 setTransformWithGeogebraCommonAwtGAffineTransform:oldAT];
    }
    [g3 setCompositeWithGeogebraCommonAwtGComposite:oldComp];
  }
}

- (void)drawHighlightingWithGeogebraCommonAwtGAffineTransform:(id<GeogebraCommonAwtGAffineTransform>)at2
                             withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGGraphics2D_(self, at2, g2);
}

- (jboolean)isInBackground {
  return [((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground];
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if (!isVisible_ || [((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  *IOSDoubleArray_GetRef(nil_chk(hitCoords_), 0) = x;
  *IOSDoubleArray_GetRef(hitCoords_, 1) = y;
  if (![((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isAbsoluteScreenLocActive]) {
    [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(atInverse_)) transformWithDoubleArray:hitCoords_ withInt:0 withDoubleArray:hitCoords_ withInt:0 withInt:1];
  }
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) containsWithDouble:IOSDoubleArray_Get(hitCoords_, 0) withDouble:IOSDoubleArray_Get(hitCoords_, 1)];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if (!isVisible_ || [((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) intersectsWithGeogebraCommonAwtGRectangle2D:boundingBox_];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if (!isVisible_ || [((GeogebraCommonKernelGeosGeoImage *) nil_chk(geoImage_)) isInBackground]) return NO;
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:boundingBox_];
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return boundingBox_;
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(geoImage_);
  RELEASE_(image_);
  RELEASE_(alphaComp_);
  RELEASE_(at_);
  RELEASE_(atInverse_);
  RELEASE_(tempAT_);
  RELEASE_(boundingBox_);
  RELEASE_(highlighting_);
  RELEASE_(hitCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoImage:", "DrawImage", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "checkInBackground", NULL, "Z", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawHighlightingWithGeogebraCommonAwtGAffineTransform:withGeogebraCommonAwtGGraphics2D:", "drawHighlighting", "V", 0x2, NULL, NULL },
    { "isInBackground", NULL, "Z", 0x0, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoImage_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoImage;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "image_", NULL, 0x2, "Lgeogebra.common.awt.MyImage;", NULL, NULL,  },
    { "absoluteLocation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "alphaComp_", NULL, 0x2, "Lgeogebra.common.awt.GAlphaComposite;", NULL, NULL,  },
    { "alpha_", NULL, 0x2, "F", NULL, NULL,  },
    { "isInBackground__", "isInBackground", 0x2, "Z", NULL, NULL,  },
    { "at_", NULL, 0x2, "Lgeogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "atInverse_", NULL, 0x2, "Lgeogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "tempAT_", NULL, 0x2, "Lgeogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "needsInterpolationRenderingHint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "screenX_", NULL, 0x2, "I", NULL, NULL,  },
    { "screenY_", NULL, 0x2, "I", NULL, NULL,  },
    { "boundingBox_", NULL, 0x2, "Lgeogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "highlighting_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "hitCoords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawImage = { 2, "DrawImage", "geogebra.common.euclidian.draw", NULL, 0x11, 13, methods, 16, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawImage;
}

@end

void GeogebraCommonEuclidianDrawDrawImage_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoImage_(GeogebraCommonEuclidianDrawDrawImage *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoImage *geoImage) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->alpha_ = -1;
  self->isInBackground__ = NO;
  GeogebraCommonEuclidianDrawDrawImage_setAndConsume_hitCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawImage_set_geoImage_(self, geoImage);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geoImage);
  GeogebraCommonEuclidianDrawDrawImage_set_at_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  GeogebraCommonEuclidianDrawDrawImage_set_tempAT_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newAffineTransform]);
  GeogebraCommonEuclidianDrawDrawImage_set_boundingBox_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangle]);
  GeogebraCommonEuclidianDrawable_set_selStroke_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newMyBasicStrokeWithFloat:1.5f]);
  GeogebraCommonEuclidianDrawDrawImage_update(self);
}

GeogebraCommonEuclidianDrawDrawImage *new_GeogebraCommonEuclidianDrawDrawImage_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoImage_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoImage *geoImage) {
  GeogebraCommonEuclidianDrawDrawImage *self = [GeogebraCommonEuclidianDrawDrawImage alloc];
  GeogebraCommonEuclidianDrawDrawImage_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoImage_(self, view, geoImage);
  return self;
}

void GeogebraCommonEuclidianDrawDrawImage_update(GeogebraCommonEuclidianDrawDrawImage *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  if ([self->geo_ getAlphaValue] != self->alpha_) {
    self->alpha_ = [self->geo_ getAlphaValue];
    GeogebraCommonEuclidianDrawDrawImage_set_alphaComp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAlphaCompositeWithInt:GeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:self->alpha_]);
  }
  GeogebraCommonEuclidianDrawDrawImage_set_image_(self, [((GeogebraCommonKernelGeosGeoImage *) nil_chk(self->geoImage_)) getFillImage]);
  jint width = [((id<GeogebraCommonAwtMyImage>) nil_chk(self->image_)) getWidth];
  jint height = [self->image_ getHeight];
  self->absoluteLocation_ = [self->geoImage_ isAbsoluteScreenLocActive];
  if (self->absoluteLocation_) {
    self->screenX_ = [self->geoImage_ getAbsoluteScreenLocX];
    self->screenY_ = [self->geoImage_ getAbsoluteScreenLocY] - height;
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->screenX_ withInt:self->screenY_ withInt:width withInt:height];
  }
  else {
    GeogebraCommonKernelGeosGeoPoint *A = [self->geoImage_ getCornerWithInt:0];
    GeogebraCommonKernelGeosGeoPoint *B = [self->geoImage_ getCornerWithInt:1];
    GeogebraCommonKernelGeosGeoPoint *D = [self->geoImage_ getCornerWithInt:2];
    jdouble ax = 0;
    jdouble ay = 0;
    if (A != nil) {
      if (![A isDefined] || [A isInfinite]) {
        self->isVisible_ = NO;
        return;
      }
      ax = A->inhomX_;
      ay = A->inhomY_;
    }
    [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(self->at_)) setTransformWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordTransform]];
    [self->at_ translateWithDouble:ax withDouble:ay];
    if (B == nil) {
      if (D == nil) {
        [self->at_ scale__WithDouble:[self->view_ getInvXscale] withDouble:-[self->view_ getInvXscale]];
      }
      else {
        if (![D isDefined] || [D isInfinite]) {
          self->isVisible_ = NO;
          return;
        }
        jdouble ADx = D->inhomX_ - ax;
        jdouble ADy = D->inhomY_ - ay;
        [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ADy withDouble:-ADx withDouble:ADx withDouble:ADy withDouble:0 withDouble:0];
        [self->at_ concatenateWithGeogebraCommonAwtGAffineTransform:self->tempAT_];
        jdouble yscale = 1.0 / height;
        [self->at_ scale__WithDouble:yscale withDouble:-yscale];
      }
    }
    else {
      if (![B isDefined] || [B isInfinite]) {
        self->isVisible_ = NO;
        return;
      }
      if (D == nil) {
        jdouble ABx = B->inhomX_ - ax;
        jdouble ABy = B->inhomY_ - ay;
        [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ABx withDouble:ABy withDouble:-ABy withDouble:ABx withDouble:0 withDouble:0];
        [self->at_ concatenateWithGeogebraCommonAwtGAffineTransform:self->tempAT_];
        jdouble xscale = 1.0 / width;
        [self->at_ scale__WithDouble:xscale withDouble:-xscale];
      }
      else {
        if (![D isDefined] || [D isInfinite]) {
          self->isVisible_ = NO;
          return;
        }
        jdouble ABx = B->inhomX_ - ax;
        jdouble ABy = B->inhomY_ - ay;
        jdouble ADx = D->inhomX_ - ax;
        jdouble ADy = D->inhomY_ - ay;
        [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(self->tempAT_)) setTransformWithDouble:ABx withDouble:ABy withDouble:ADx withDouble:ADy withDouble:0 withDouble:0];
        [self->at_ concatenateWithGeogebraCommonAwtGAffineTransform:self->tempAT_];
        [self->at_ scale__WithDouble:1.0 / width withDouble:-1.0 / height];
      }
    }
    [self->at_ translateWithDouble:0 withDouble:-height];
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:0 withInt:0 withInt:width withInt:height];
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->boundingBox_)) setBoundsWithInt:0 withInt:0 withInt:width withInt:height];
    id<GeogebraCommonAwtGShape> shape = [self->at_ createTransformedShapeWithGeogebraCommonAwtGShape:self->boundingBox_];
    GeogebraCommonEuclidianDrawDrawImage_set_boundingBox_(self, [((id<GeogebraCommonAwtGShape>) nil_chk(shape)) getBounds]);
    @try {
      GeogebraCommonEuclidianDrawDrawImage_set_atInverse_(self, [self->at_ createInverse]);
    }
    @catch (JavaLangException *e) {
      self->isVisible_ = NO;
      return;
    }
    self->needsInterpolationRenderingHint_ = (([self->geoImage_ isInterpolate]) && !(GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getScaleX], 1.0, GeogebraCommonKernelKernel_MAX_PRECISION) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getScaleY], 1.0, GeogebraCommonKernelKernel_MAX_PRECISION) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getShearX], 0.0, GeogebraCommonKernelKernel_MAX_PRECISION) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([self->at_ getShearY], 0.0, GeogebraCommonKernelKernel_MAX_PRECISION)));
  }
  if (self->isInBackground__ != [self->geoImage_ isInBackground]) {
    self->isInBackground__ = !self->isInBackground__;
    if (self->isInBackground__) {
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) addBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:self];
    }
    else {
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) removeBackgroundImageWithGeogebraCommonEuclidianDrawDrawImage:self];
      [self->view_ updateBackgroundImage];
    }
  }
  if (self->isInBackground__) [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) updateBackgroundImage];
}

void GeogebraCommonEuclidianDrawDrawImage_drawHighlightingWithGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawImage *self, id<GeogebraCommonAwtGAffineTransform> at2, id<GeogebraCommonAwtGGraphics2D> g2) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawImage)
