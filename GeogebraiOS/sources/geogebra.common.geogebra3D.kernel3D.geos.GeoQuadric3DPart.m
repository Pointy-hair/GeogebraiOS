//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart () {
 @public
  jdouble min_;
  jdouble max_;
  jdouble bottom_, top_;
  jdouble area_;
  GeogebraCommonKernelGeosGeoElement *meta_;
}

- (IOSObjectArray *)getProjectionSortedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection
                                                                 withDouble:(jdouble)t1
                                                                 withDouble:(jdouble)t2;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart, meta_, GeogebraCommonKernelGeosGeoElement *)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)quadric {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self, quadric);
  return self;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]);
  [self setLimitsWithDouble:((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(quadric))->bottom_ withDouble:quadric->top_];
  area_ = [quadric getArea];
}

- (void)setLimitsWithDouble:(jdouble)min
                 withDouble:(jdouble)max {
  bottom_ = min;
  top_ = max;
  if (min < max) {
    self->min_ = min;
    self->max_ = max;
  }
  else {
    self->min_ = max;
    self->max_ = min;
  }
}

- (jdouble)getBottomParameter {
  return bottom_;
}

- (jdouble)getTopParameter {
  return top_;
}

- (jdouble)getMinParameterWithInt:(jint)index {
  if (index == 1) return min_;
  return [super getMinParameterWithInt:index];
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  if (index == 1) return max_;
  return [super getMaxParameterWithInt:index];
}

- (void)setWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                     withDouble:(jdouble)r {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    [self setCylinderWithGeogebraCommonKernelMatrixCoords:origin withGeogebraCommonKernelMatrixCoords:direction withDouble:r];
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    [self setConeWithGeogebraCommonKernelMatrixCoords:origin withGeogebraCommonKernelMatrixCoords:direction withDouble:r];
    break;
  }
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_QUADRIC_PART();
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:area_ withGeogebraCommonKernelStringTemplate:tpl];
  }
  return @"todo-GeoQuadric3DPart";
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [new_JavaLangStringBuilder_initWithNSString_([self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]) autorelease];
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self) autorelease];
}

- (void)getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                          withDoubleArray:(IOSDoubleArray *)parameters {
  [super getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:coords withDoubleArray:parameters];
  if (IOSDoubleArray_Get(nil_chk(parameters), 1) < [self getMinParameterWithInt:1]) {
    *IOSDoubleArray_GetRef(parameters, 1) = [self getMinParameterWithInt:1];
  }
  else if (IOSDoubleArray_Get(parameters, 1) > [self getMaxParameterWithInt:1]) {
    *IOSDoubleArray_GetRef(parameters, 1) = [self getMaxParameterWithInt:1];
  }
}

- (IOSObjectArray *)getProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection
                                                           withDouble:(jdouble)t1
                                                           withDouble:(jdouble)t2 {
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(t2, t1)) {
    return [self getProjectionSortedWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1 withDouble:t2];
  }
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(t1, t2)) {
    return [self getProjectionSortedWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t2 withDouble:t1];
  }
  return [super getProjectionWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection withDouble:t1 withDouble:t2];
}

- (jboolean)checkParametersWithDoubleArray:(IOSDoubleArray *)parameters {
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([self getMinParameterWithInt:1], IOSDoubleArray_Get(nil_chk(parameters), 1))) {
    *IOSDoubleArray_GetRef(parameters, 1) = [self getMinParameterWithInt:1];
    return NO;
  }
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(parameters, 1), [self getMaxParameterWithInt:1])) {
    *IOSDoubleArray_GetRef(parameters, 1) = [self getMaxParameterWithInt:1];
    return NO;
  }
  return [super checkParametersWithDoubleArray:parameters];
}

- (IOSObjectArray *)getProjectionSortedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingCoords
                                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection
                                                                 withDouble:(jdouble)t1
                                                                 withDouble:(jdouble)t2 {
  [super getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingCoords)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(willingDirection)) mulWithDouble:t1]] withDoubleArray:tmpDouble2_];
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([self getMinParameterWithInt:1], IOSDoubleArray_Get(nil_chk(tmpDouble2_), 1))) {
    *IOSDoubleArray_GetRef(tmpDouble2_, 1) = [self getMinParameterWithInt:1];
  }
  else if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(tmpDouble2_, 1), [self getMaxParameterWithInt:1])) {
    *IOSDoubleArray_GetRef(tmpDouble2_, 1) = [self getMaxParameterWithInt:1];
  }
  else {
    return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1)], [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2_) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  }
  [super getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:[willingCoords addWithGeogebraCommonKernelMatrixCoords:[willingDirection mulWithDouble:t2]] withDoubleArray:tmpDouble2bis_];
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_([self getMinParameterWithInt:1], IOSDoubleArray_Get(nil_chk(tmpDouble2bis_), 1))) {
    *IOSDoubleArray_GetRef(tmpDouble2bis_, 1) = [self getMinParameterWithInt:1];
  }
  else if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(IOSDoubleArray_Get(tmpDouble2bis_, 1), [self getMaxParameterWithInt:1])) {
    *IOSDoubleArray_GetRef(tmpDouble2bis_, 1) = [self getMaxParameterWithInt:1];
  }
  else {
    return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2bis_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2bis_, 1)], [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2bis_) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  }
  GeogebraCommonKernelMatrixCoords *l1 = [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1)];
  GeogebraCommonKernelMatrixCoords *l2 = [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2bis_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2bis_, 1)];
  jdouble d1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(l1)) distLineWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection];
  jdouble d2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(l2)) distLineWithGeogebraCommonKernelMatrixCoords:willingCoords withGeogebraCommonKernelMatrixCoords:willingDirection];
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(d1, d2)) {
    return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2bis_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2bis_, 1)], [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2bis_) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ [self getPointWithDouble:IOSDoubleArray_Get(tmpDouble2_, 0) withDouble:IOSDoubleArray_Get(tmpDouble2_, 1)], [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_(tmpDouble2_) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
}

- (jboolean)isInRegionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  if (![super isInRegionWithGeogebraCommonKernelMatrixCoords:coords]) {
    return NO;
  }
  [super getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:coords withDoubleArray:tmpDouble2_];
  if (IOSDoubleArray_Get(nil_chk(tmpDouble2_), 1) < [self getMinParameterWithInt:1]) return NO;
  if (IOSDoubleArray_Get(tmpDouble2_, 1) > [self getMaxParameterWithInt:1]) return NO;
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getPointInRegionWithDouble:(jdouble)u
                                                      withDouble:(jdouble)v {
  jdouble v0;
  if (v < [self getMinParameterWithInt:1]) {
    v0 = [self getMinParameterWithInt:1];
  }
  else if (v > [self getMaxParameterWithInt:1]) {
    v0 = [self getMaxParameterWithInt:1];
  }
  else {
    v0 = v;
  }
  return [super getPointInRegionWithDouble:u withDouble:v0];
}

- (void)calcArea {
  {
    jdouble r2;
    jdouble h2;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      area_ = 2 * [self getHalfAxisWithInt:0] * JavaLangMath_PI * (max_ - min_);
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      r2 = [self getHalfAxisWithInt:0];
      r2 *= r2;
      if (min_ * max_ < 0) {
        h2 = min_ * min_ + max_ * max_;
      }
      else {
        h2 = JavaLangMath_absWithDouble_(max_ * max_ - min_ * min_);
      }
      area_ = JavaLangMath_PI * h2 * r2 * JavaLangMath_sqrtWithDouble_(1 + 1 / r2);
      break;
    }
  }
}

- (jdouble)getArea {
  if (defined_) return area_;
  else return JavaLangDouble_NaN;
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [self getDouble]) autorelease];
}

- (jdouble)getDouble {
  return [self getArea];
}

- (jboolean)isNumberValue {
  return YES;
}

- (jint)getMetasLength {
  if (meta_ == nil) {
    return 0;
  }
  return 1;
}

- (IOSObjectArray *)getMetas {
  return [IOSObjectArray arrayWithObjects:(id[]){ meta_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (void)setFromMetaWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)quadric {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_set_meta_(self, quadric);
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  [super dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  area_ *= r * r;
  jdouble rAbs = JavaLangMath_absWithDouble_(r);
  bottom_ *= rAbs;
  top_ *= rAbs;
  min_ *= rAbs;
  max_ *= rAbs;
}

- (void)getXMLtagsMatrixWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
}

- (void)classifyQuadric {
  GeogebraCommonMainApp_errorWithNSString_(@"GeoQuadric3DPart should not need classification");
}

- (NSString *)getTypeString {
  return @"Surface";
}

- (NSString *)getQuadricTypeString {
  return [super getTypeString];
}

- (void)dealloc {
  RELEASE_(meta_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoQuadric3DPart", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:", "GeoQuadric3DPart", NULL, 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setLimitsWithDouble:withDouble:", "setLimits", "V", 0x1, NULL, NULL },
    { "getBottomParameter", NULL, "D", 0x1, NULL, NULL },
    { "getTopParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:", "set", "V", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getNormalProjectionParametersWithGeogebraCommonKernelMatrixCoords:withDoubleArray:", "getNormalProjectionParameters", "V", 0x4, NULL, NULL },
    { "getProjectionWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "getProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "checkParametersWithDoubleArray:", "checkParameters", "Z", 0x4, NULL, NULL },
    { "getProjectionSortedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "getProjectionSorted", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "isInRegionWithGeogebraCommonKernelMatrixCoords:", "isInRegion", "Z", 0x1, NULL, NULL },
    { "getPointInRegionWithDouble:withDouble:", "getPointInRegion", "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "calcArea", NULL, "V", 0x1, NULL, NULL },
    { "getArea", NULL, "D", 0x1, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "getMetas", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setFromMetaWithGeogebraCommonKernelGeosGeoElement:", "setFromMeta", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "getXMLtagsMatrixWithJavaLangStringBuilder:", "getXMLtagsMatrix", "V", 0x4, NULL, NULL },
    { "classifyQuadric", NULL, "V", 0x4, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getQuadricTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "min_", NULL, 0x2, "D", NULL, NULL,  },
    { "max_", NULL, 0x2, "D", NULL, NULL,  },
    { "bottom_", NULL, 0x2, "D", NULL, NULL,  },
    { "top_", NULL, 0x2, "D", NULL, NULL,  },
    { "area_", NULL, 0x2, "D", NULL, NULL,  },
    { "meta_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart = { 2, "GeoQuadric3DPart", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 32, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_set_meta_(self, nil);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *self, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, quadric);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_set_meta_(self, nil);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self, quadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart)
