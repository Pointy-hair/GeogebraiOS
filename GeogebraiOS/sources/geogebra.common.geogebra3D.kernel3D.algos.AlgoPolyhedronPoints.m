//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"
#include "java/util/Collection.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints () {
 @public
  IOSObjectArray *bottomPoints_;
  id<GeogebraCommonKernelKernelNDGeoPointND> topPoint_;
  jint shift_;
}

- (void)createPolyhedron;

- (void)setTopPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints, bottomPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints, topPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, id<GeogebraCommonKernelKernelNDGeoPointND> p);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, c, labels, points);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, polygon, point);
  return self;
}

- (void)createOutputSegments {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputSegmentsBottom_(self, [self createOutputSegmentsHandler]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputSegmentsSide_(self, [self createOutputSegmentsHandler]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputSegmentsTop_(self, [self createOutputSegmentsHandler]);
}

- (void)createOutputPolygons {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputPolygonsBottom_(self, [self createOutputPolygonsHandler]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputPolygonsSide_(self, [self createOutputPolygonsHandler]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_outputPolygonsTop_(self, [self createOutputPolygonsHandler]);
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels == nil || labels->size_ <= 1) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) initLabelsWithNSStringArray:labels];
  else {
    [self augmentOutputSizeWithInt:labels->size_];
    for (jint i = 0; i < labels->size_; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels, i)];
    }
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setAllLabelsAreSetWithBoolean:YES];
  }
}

- (void)augmentOutputSizeWithInt:(jint)length {
  jint n = [self getSideLengthFromLabelsLengthWithInt:length];
  if (n > [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]) {
    if ([[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
      GeogebraCommonKernelAlgosAlgoPolygonRegularND *algo = (GeogebraCommonKernelAlgosAlgoPolygonRegularND *) check_class_cast([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolygonRegularND class]);
      jint nOld = [((GeogebraCommonKernelAlgosAlgoPolygonRegularND *) nil_chk(algo)) getCurrentPointsLength];
      if (nOld < n) {
        [algo computeWithInt:n];
        [self updateOutputWithInt:n];
        [algo computeWithInt:nOld];
      }
      else {
        [self updateOutputWithInt:n];
      }
    }
    else {
      GeogebraCommonKernelGeosGeoPolygon *polygon = [self getBottom];
      jint nOld = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) getPointsLength];
      if (nOld < n) {
        [polygon setPointsAndSegmentsLengthWithInt:n];
        [self updateOutputWithInt:n];
        [polygon setPointsAndSegmentsLengthWithInt:nOld];
      }
      [self updateOutputWithInt:n];
    }
  }
}

- (jint)getSideLengthFromLabelsLengthWithInt:(jint)length {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)height {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, polygon, height);
  return self;
}

- (void)initCoords {
}

- (void)updateOutputPoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateOutputSegmentsAndPolygonsParentAlgorithms {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)createPolyhedron {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
}

- (void)createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)bottomPoints1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateOutputWithInt:(jint)newBottomPointsLength {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setBottomWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)polyhedron {
  if (bottom_ != nil) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron)) addPolygonLinkedWithGeogebraCommonKernelGeosGeoPolygon:bottom_];
  }
  else {
    IOSObjectArray *bottomPoints = [self getBottomPoints];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron)) startNewFace];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bottomPoints))->size_; i++) {
      [polyhedron addPointToCurrentFaceWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(bottomPoints, i)];
    }
    [polyhedron endCurrentFace];
  }
}

- (GeogebraCommonKernelGeosGeoPolygon *)getBottom {
  if (bottom_ != nil) return bottom_;
  return [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) getElementWithInt:0];
}

- (jint)getShift {
  return shift_;
}

- (jboolean)preCompute {
  if (bottomAsInput_) {
    if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) isDefined]) {
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setUndefined];
      return NO;
    }
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setDefined];
    [self updateOutputWithInt:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(bottom_)) getPointsLength]];
    if (height_ == nil && ![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) wasInitLabelsCalled]) {
      [self updateOutputSegmentsAndPolygonsParentAlgorithms];
    }
  }
  jdouble h;
  if (height_ != nil) {
    h = [height_ getDouble];
  }
  else {
    h = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([self getTopPoint])) getInhomCoordsInD3])) distPlaneOrientedWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0))) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getDirectionInD3]];
  }
  [self updateVolumeWithDouble:JavaLangMath_absWithDouble_(h)];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(polyhedron_)) setOrientedHeightWithDouble:h];
  if (height_ != nil) {
    [polyhedron_ setReverseNormalsForDrawingWithBoolean:[height_ getDouble] < 0];
  }
  return YES;
}

- (void)updateVolumeWithDouble:(jdouble)height {
  if (!bottomAsInput_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast([self getBottom], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) updateCoordSys];
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) calcArea];
  }
}

- (IOSObjectArray *)getBottomPoints {
  if (bottom_ != nil) return [bottom_ getPointsND];
  return bottomPoints_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getTopPoint {
  return topPoint_;
}

- (void)setTopPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(self, p);
}

- (void)setOutputOtherEuclidianVisibleWithBoolean:(jboolean)visible {
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsBottom_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsSide_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsTop_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk([outputSegmentsTop_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsBottom_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsSide_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk([outputPolygonsTop_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible withBoolean:NO];
}

- (void)notifyUpdateOutputOther {
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsBottom_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputSegmentsBottom_ getElementWithInt:i]];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsSide_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputSegmentsSide_ getElementWithInt:i]];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegmentsTop_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputSegmentsTop_ getElementWithInt:i]];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsBottom_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputPolygonsBottom_ getElementWithInt:i]];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputPolygonsSide_ getElementWithInt:i]];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputPolygonsTop_ getElementWithInt:i]];
}

- (void)setOutputPointsEuclidianVisibleWithBoolean:(jboolean)visible {
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([outputPoints_ getElementWithInt:i])) setEuclidianVisibleWithBoolean:visible];
}

- (void)notifyUpdateOutputPoints {
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:[outputPoints_ getElementWithInt:i]];
}

- (GeogebraCommonKernelMatrixCoords *)getBottomMiddlePoint {
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  IOSObjectArray *points = [self getBottomPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) ret = [ret addWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getInhomCoordsInD3]];
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(ret)) mulWithDouble:(jdouble) 1 / points->size_];
}

- (GeogebraCommonKernelMatrixCoords *)getTopMiddlePoint {
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) ret = [ret addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([outputPoints_ getElementWithInt:i])) getInhomCoordsInD3]];
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(ret)) mulWithDouble:(jdouble) 1 / [outputPoints_ size]];
}

- (GeogebraCommonKernelGeosGeoPolygon *)getTopFace {
  return [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsTop_)) getElementWithInt:0];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *)getSideWithInt:(jint)i {
  return [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPolygonsSide_)) getElementWithInt:i];
}

- (id<GeogebraCommonKernelArithmeticNumberValue>)getHeight {
  return height_;
}

- (jboolean)isFirstInputPointVisible {
  GeogebraCommonKernelGeosGeoElement *point = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0), [GeogebraCommonKernelGeosGeoElement class]);
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(point)) isEuclidianVisible] && [point isLabelSet];
}

- (jboolean)isFirstInputPointLabelVisible {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk([self getBottomPoints]), 0), [GeogebraCommonKernelGeosGeoElement class])))) getLabelVisible];
}

- (void)dealloc {
  RELEASE_(bottomPoints_);
  RELEASE_(points_);
  RELEASE_(topPoint_);
  RELEASE_(bottom_);
  RELEASE_(height_);
  RELEASE_(outputSegmentsBottom_);
  RELEASE_(outputSegmentsSide_);
  RELEASE_(outputSegmentsTop_);
  RELEASE_(outputPolygonsBottom_);
  RELEASE_(outputPolygonsSide_);
  RELEASE_(outputPolygonsTop_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "createOutputSegments", NULL, "V", 0x4, NULL, NULL },
    { "createOutputPolygons", NULL, "V", 0x4, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "augmentOutputSizeWithInt:", "augmentOutputSize", "V", 0x4, NULL, NULL },
    { "getSideLengthFromLabelsLengthWithInt:", "getSideLengthFromLabelsLength", "I", 0x404, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoPolyhedronPoints", NULL, 0x1, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateOutputPoints", NULL, "V", 0x404, NULL, NULL },
    { "updateOutputSegmentsAndPolygonsParentAlgorithms", NULL, "V", 0x404, NULL, NULL },
    { "createPolyhedron", NULL, "V", 0x12, NULL, NULL },
    { "createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "createPolyhedron", "V", 0x404, NULL, NULL },
    { "updateOutputWithInt:", "updateOutput", "V", 0x404, NULL, NULL },
    { "setBottomWithGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "setBottom", "V", 0x4, NULL, NULL },
    { "getBottom", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "getShift", NULL, "I", 0x4, NULL, NULL },
    { "preCompute", NULL, "Z", 0x1, NULL, NULL },
    { "updateVolumeWithDouble:", "updateVolume", "V", 0x4, NULL, NULL },
    { "getBottomPoints", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getTopPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "setTopPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setTopPoint", "V", 0x2, NULL, NULL },
    { "setOutputOtherEuclidianVisibleWithBoolean:", "setOutputOtherEuclidianVisible", "V", 0x1, NULL, NULL },
    { "notifyUpdateOutputOther", NULL, "V", 0x1, NULL, NULL },
    { "setOutputPointsEuclidianVisibleWithBoolean:", "setOutputPointsEuclidianVisible", "V", 0x1, NULL, NULL },
    { "notifyUpdateOutputPoints", NULL, "V", 0x1, NULL, NULL },
    { "getBottomMiddlePoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getTopMiddlePoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getTopFace", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "getSideWithInt:", "getSide", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPolygon3D;", 0x1, NULL, NULL },
    { "getHeight", NULL, "Lgeogebra.common.kernel.arithmetic.NumberValue;", 0x1, NULL, NULL },
    { "isFirstInputPointVisible", NULL, "Z", 0x14, NULL, NULL },
    { "isFirstInputPointLabelVisible", NULL, "Z", 0x14, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bottomPoints_", NULL, 0x2, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "points_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "topPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "bottom_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "height_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "bottomAsInput_", NULL, 0x4, "Z", NULL, NULL,  },
    { "bottomPointsLength_", NULL, 0x4, "I", NULL, NULL,  },
    { "outputSegmentsBottom_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputSegmentsSide_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputSegmentsTop_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D;>;",  },
    { "outputPolygonsBottom_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPolygonsSide_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "outputPolygonsTop_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D;>;",  },
    { "shift_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints = { 2, "AlgoPolyhedronPoints", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 33, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setAndConsume_bottomPoints_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ - 1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()]);
  for (jint i = 0; i < points->size_ - 1; i++) IOSObjectArray_Set(self->bottomPoints_, i, IOSObjectArray_Get(points, i));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(self, IOSObjectArray_Get(points, points->size_ - 1));
  self->shift_ = 1;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:points->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < points->size_; i++) IOSObjectArray_Set(self->input_, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_bottom_(self, polygon);
  self->bottomAsInput_ = YES;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(self, point);
  self->shift_ = 1;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(self->input_, 0, self->bottom_);
  IOSObjectArray_Set(self->input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->topPoint_, [GeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoPolygon *polygon, id<GeogebraCommonKernelArithmeticNumberValue> height) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedron_initWithGeogebraCommonKernelConstruction_(self, c);
  self->bottomAsInput_ = NO;
  self->bottomPointsLength_ = -1;
  [self initCoords];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_bottom_(self, polygon);
  self->bottomAsInput_ = YES;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_height_(self, height);
  self->shift_ = 0;
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) augmentOutputSizeWithInt:1 withBoolean:NO];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(self, [self->outputPoints_ getElementWithInt:0]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(self);
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(self->input_, 0, self->bottom_);
  IOSObjectArray_Set(self->input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(height, [GeogebraCommonKernelGeosGeoElement class]));
  [self addAlgoToInput];
  [self updateOutputPoints];
  [self createFaces];
  [self setOutput];
  if ([height isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
    if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(height, [GeogebraCommonKernelGeosGeoNumeric class])))) isIndependent]) {
      for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(self->polyhedron_)) getPolygons])) {
        [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) setChangeableCoordParentWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(height, [GeogebraCommonKernelGeosGeoNumeric class]) withGeogebraCommonKernelGeosGeoElement:self->bottom_];
      }
    }
  }
  [self setLabelsWithNSStringArray:labels];
  [self update];
  [self updateOutputSegmentsAndPolygonsParentAlgorithms];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_createPolyhedron(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self) {
  IOSObjectArray *bottomPoints1 = [self getBottomPoints];
  if (bottomPoints1 == nil) {
    if ([[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
      GeogebraCommonKernelAlgosAlgoPolygonRegularND *algo = (GeogebraCommonKernelAlgosAlgoPolygonRegularND *) check_class_cast([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getBottom])) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolygonRegularND class]);
      [((GeogebraCommonKernelAlgosAlgoPolygonRegularND *) nil_chk(algo)) computeWithInt:3];
      bottomPoints1 = [self getBottomPoints];
      [self createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:bottomPoints1];
      [algo computeWithInt:2];
    }
  }
  else {
    [self createPolyhedronWithGeogebraCommonKernelKernelNDGeoPointNDArray:bottomPoints1];
  }
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_setTopPointWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *self, id<GeogebraCommonKernelKernelNDGeoPointND> p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints_set_topPoint_(self, p);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints)
