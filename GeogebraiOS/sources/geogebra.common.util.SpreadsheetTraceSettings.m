//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/SpreadsheetTraceSettings.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/util/SpreadsheetTraceSettings.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonUtilSpreadsheetTraceSettings

- (instancetype)init {
  GeogebraCommonUtilSpreadsheetTraceSettings_init(self);
  return self;
}

- (void)debugWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"====================================="];
  [JavaLangSystem_get_out_() printlnWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"traceColumn1 = ", traceColumn1_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"traceColumn2 = ", traceColumn2_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"traceRow1 = ", traceRow1_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"traceRow2 = ", traceRow2_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"tracingRow = ", tracingRow_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"numRows = ", numRows_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$I", @"headerOffset = ", headerOffset_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"doColumnReset = ", doColumnReset_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"needsColumnReset =", needsColumnReset_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"doRowLimit =", doRowLimit_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"showLabel =", showLabel_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"showTraceList =", showTraceList_)];
  [JavaLangSystem_get_out_() printlnWithNSString:JreStrcat("$Z", @"doTraceGeoCopy =", doTraceGeoCopy_)];
  [JavaLangSystem_get_out_() printlnWithNSString:@"====================================="];
}

- (void)dealloc {
  RELEASE_(lastTrace_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SpreadsheetTraceSettings", NULL, 0x1, NULL, NULL },
    { "debugWithGeogebraCommonKernelGeosGeoElement:", "debug", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "traceColumn1_", NULL, 0x1, "I", NULL, NULL,  },
    { "traceColumn2_", NULL, 0x1, "I", NULL, NULL,  },
    { "traceRow1_", NULL, 0x1, "I", NULL, NULL,  },
    { "traceRow2_", NULL, 0x1, "I", NULL, NULL,  },
    { "tracingRow_", NULL, 0x1, "I", NULL, NULL,  },
    { "numRows_", NULL, 0x1, "I", NULL, NULL,  },
    { "headerOffset_", NULL, 0x1, "I", NULL, NULL,  },
    { "lastTrace_", NULL, 0x1, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "doColumnReset_", NULL, 0x1, "Z", NULL, NULL,  },
    { "needsColumnReset_", NULL, 0x1, "Z", NULL, NULL,  },
    { "doRowLimit_", NULL, 0x1, "Z", NULL, NULL,  },
    { "showLabel_", NULL, 0x1, "Z", NULL, NULL,  },
    { "showTraceList_", NULL, 0x1, "Z", NULL, NULL,  },
    { "doTraceGeoCopy_", NULL, 0x1, "Z", NULL, NULL,  },
    { "pause_", NULL, 0x1, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilSpreadsheetTraceSettings = { 2, "SpreadsheetTraceSettings", "geogebra.common.util", NULL, 0x1, 2, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilSpreadsheetTraceSettings;
}

@end

void GeogebraCommonUtilSpreadsheetTraceSettings_init(GeogebraCommonUtilSpreadsheetTraceSettings *self) {
  NSObject_init(self);
  self->traceColumn1_ = -1;
  self->traceColumn2_ = -1;
  self->traceRow1_ = -1;
  self->traceRow2_ = -1;
  self->tracingRow_ = 0;
  self->numRows_ = 10;
  self->headerOffset_ = 1;
  GeogebraCommonUtilSpreadsheetTraceSettings_setAndConsume_lastTrace_(self, new_JavaUtilArrayList_init());
  self->doColumnReset_ = NO;
  self->needsColumnReset_ = NO;
  self->doRowLimit_ = NO;
  self->showLabel_ = YES;
  self->showTraceList_ = NO;
  self->doTraceGeoCopy_ = NO;
  self->pause_ = NO;
}

GeogebraCommonUtilSpreadsheetTraceSettings *new_GeogebraCommonUtilSpreadsheetTraceSettings_init() {
  GeogebraCommonUtilSpreadsheetTraceSettings *self = [GeogebraCommonUtilSpreadsheetTraceSettings alloc];
  GeogebraCommonUtilSpreadsheetTraceSettings_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilSpreadsheetTraceSettings)
