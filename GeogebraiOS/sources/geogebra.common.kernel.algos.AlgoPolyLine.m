//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolyLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPenStroke.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAlgosAlgoPolyLine () {
 @public
  jboolean penStroke_;
}

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList;

@end

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolyLine_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelGeosGeoList *pointList);

@implementation GeogebraCommonKernelAlgosAlgoPolyLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                                             withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, geoList, penStroke);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                             withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self, cons, labels, points, penStroke);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                             withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self, cons, points, penStroke);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                                             withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, points, geoList, penStroke);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                                             withBoolean:(jboolean)penStroke {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, points, geoList, penStroke);
  return self;
}

- (void)createPolyLine {
  if (penStroke_) {
    GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_poly_(self, new_GeogebraCommonKernelGeosGeoPenStroke_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self->cons_, self->points_));
  }
  else {
    GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_poly_(self, new_GeogebraCommonKernelGeosGeoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self->cons_, self->points_));
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_PolyLine();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE;
}

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonKernelAlgosAlgoPolyLine_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, pointList);
}

- (void)setInputOutput {
  if (geoList_ != nil) {
    if (penStroke_) {
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(input_, 0, geoList_);
      IOSObjectArray_SetAndConsume(input_, 1, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, YES));
    }
    else {
      GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(input_, 0, geoList_);
    }
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ + (penStroke_ ? 1 : 0) type:GeogebraCommonKernelGeosGeoElement_class_()]);
    for (jint i = 0; i < points_->size_; i++) {
      IOSObjectArray_Set(input_, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points_, i), [GeogebraCommonKernelGeosGeoElement class]));
    }
    if (penStroke_) {
      IOSObjectArray_SetAndConsume(input_, points_->size_, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(cons_, YES));
    }
  }
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  [self setDependencies];
}

- (void)update {
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) update];
}

- (GeogebraCommonKernelGeosGeoPolyLine *)getPoly {
  return poly_;
}

- (IOSObjectArray *)getPoints {
  return (IOSObjectArray *) check_class_cast(points_, [IOSObjectArray class]);
}

- (GeogebraCommonKernelGeosGeoList *)getPointsList {
  return geoList_;
}

- (void)compute {
  if (geoList_ != nil) {
    GeogebraCommonKernelAlgosAlgoPolyLine_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, geoList_);
  }
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly_)) calcLength];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PolyLine"]];
  [sb_ appendWithChar:' '];
  if (geoList_ != nil) {
    [sb_ appendWithNSString:[geoList_ getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  else if (((IOSObjectArray *) nil_chk(points_))->size_ < 20) {
    jint last = points_->size_ - 1;
    for (jint i = 0; i < last; i++) {
      [sb_ appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, i))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb_ appendWithNSString:@", "];
    }
    [sb_ appendWithNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points_, last))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  else {
    return @"";
  }
  return [sb_ description];
}

- (void)setPointsListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)newPts {
  GeogebraCommonKernelAlgosAlgoPolyLine_set_geoList_(self, newPts);
}

- (void)dealloc {
  RELEASE_(points_);
  RELEASE_(geoList_);
  RELEASE_(poly_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoList:withBoolean:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:withBoolean:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:withBoolean:", "AlgoPolyLine", NULL, 0x1, NULL, NULL },
    { "createPolyLine", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "updatePointArrayWithGeogebraCommonKernelGeosGeoList:", "updatePointArray", "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.geos.GeoPolyLine;", 0x1, NULL, NULL },
    { "getPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getPointsList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setPointsListWithGeogebraCommonKernelGeosGeoList:", "setPointsList", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "points_", NULL, 0x4, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "geoList_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "poly_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "penStroke_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sb_", NULL, 0x0, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolyLine = { 2, "AlgoPolyLine", "geogebra.common.kernel.algos", NULL, 0x1, 20, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolyLine;
}

@end

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, nil, geoList);
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, nil, geoList, penStroke);
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, geoList, penStroke);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, nil, geoList, NO);
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, points, nil, penStroke);
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self, cons, labels, points, penStroke);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, points, nil, penStroke);
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_(self, cons, points, penStroke);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, points, geoList, NO);
  if (labels != nil) [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setLabelWithNSString:IOSObjectArray_Get(labels, 0)];
  else [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setLabelWithNSString:nil];
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, points, geoList, penStroke);
  if (labels != nil) [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setLabelWithNSString:IOSObjectArray_Get(labels, 0)];
  else [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setLabelWithNSString:nil];
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, labels, points, geoList, penStroke);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPolyLine_set_points_(self, points);
  GeogebraCommonKernelAlgosAlgoPolyLine_set_geoList_(self, geoList);
  self->penStroke_ = penStroke;
  [self createPolyLine];
  [self compute];
  [self setInputOutput];
}

GeogebraCommonKernelAlgosAlgoPolyLine *new_GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList, jboolean penStroke) {
  GeogebraCommonKernelAlgosAlgoPolyLine *self = [GeogebraCommonKernelAlgosAlgoPolyLine alloc];
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, points, geoList, penStroke);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolyLine_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolyLine *self, GeogebraCommonKernelGeosGeoList *pointList) {
  if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jint size = [pointList size];
  GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:size type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(self->points_, i, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([pointList getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]));
  }
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolyLine)
