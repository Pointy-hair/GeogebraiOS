//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/polynomial/BigPolynomial.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/polynomial/BigComplex.h"
#include "geogebra/common/kernel/polynomial/BigPolynomial.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/ArithmeticException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "java/math/BigInteger.h"
#include "java/math/MathContext.h"

@interface GeogebraCommonKernelPolynomialBigPolynomial ()

- (instancetype)init;

- (instancetype)initWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p;

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)coeff;

@end

static jint GeogebraCommonKernelPolynomialBigPolynomial_MAX_ITERATIONS_ = 20;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelPolynomialBigPolynomial, MAX_ITERATIONS_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelPolynomialBigPolynomial, MAX_ITERATIONS_, jint)

__attribute__((unused)) static void GeogebraCommonKernelPolynomialBigPolynomial_init(GeogebraCommonKernelPolynomialBigPolynomial *self);

__attribute__((unused)) static GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(GeogebraCommonKernelPolynomialBigPolynomial *self, GeogebraCommonKernelPolynomialBigPolynomial *p);

__attribute__((unused)) static GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(GeogebraCommonKernelPolynomialBigPolynomial *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSObjectArray *coeff);

__attribute__((unused)) static GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(IOSObjectArray *coeff) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelPolynomialBigPolynomial

- (instancetype)init {
  GeogebraCommonKernelPolynomialBigPolynomial_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(self, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p
                                        withJavaMathBigDecimalArray:(IOSObjectArray *)coeff {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, p, coeff);
  return self;
}

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)coeff {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(self, coeff);
  return self;
}

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)coeff
                         withJavaMathBigDecimal:(JavaMathBigDecimal *)eps
                        withJavaMathMathContext:(JavaMathMathContext *)mc {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(self, coeff, eps, mc);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)coeff
            withJavaMathMathContext:(JavaMathMathContext *)mc {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(self, coeff, mc);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)coeff
                            withInt:(jint)precision {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(self, coeff, precision);
  return self;
}

- (instancetype)initWithDouble:(jdouble)constant
                       withInt:(jint)precision {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(self, constant, precision);
  return self;
}

- (GeogebraCommonKernelPolynomialBigPolynomial *)copy__ {
  return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(self) autorelease];
}

- (id)clone {
  return [self copy__];
}

- (jint)degree {
  return ((IOSObjectArray *) nil_chk(coefficients_))->size_ - 1;
}

- (JavaMathBigDecimal *)evalWithJavaMathBigDecimal:(JavaMathBigDecimal *)val {
  if (((IOSObjectArray *) nil_chk(coefficients_))->size_ > 0) {
    JavaMathBigDecimal *sum = IOSObjectArray_Get(coefficients_, coefficients_->size_ - 1);
    for (jint i = coefficients_->size_ - 1; i >= 0; i--) {
      sum = [((JavaMathBigDecimal *) nil_chk(sum)) multiplyWithJavaMathBigDecimal:val withJavaMathMathContext:mc_];
      sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:IOSObjectArray_Get(coefficients_, i) withJavaMathMathContext:mc_];
    }
    return sum;
  }
  return JavaMathBigDecimal_get_ZERO_();
}

- (jdouble)evalWithDouble:(jdouble)d {
  return [((JavaMathBigDecimal *) nil_chk([self evalWithJavaMathBigDecimal:[new_JavaMathBigDecimal_initWithDouble_(d) autorelease]])) doubleValue];
}

- (GeogebraCommonKernelPolynomialBigPolynomial *)addWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p {
  IOSObjectArray *coeff = [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigDecimal_get_ZERO_() } count:1 type:JavaMathBigDecimal_class_()];
  for (jint i = JavaLangMath_maxWithInt_withInt_(((IOSObjectArray *) nil_chk(coefficients_))->size_, ((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(p))->coefficients_->size_) - 1; i >= 0; i--) {
    JavaMathBigDecimal *newCoeff = JavaMathBigDecimal_get_ZERO_();
    if (i < coefficients_->size_ && i < p->coefficients_->size_) {
      newCoeff = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) addWithJavaMathBigDecimal:IOSObjectArray_Get(p->coefficients_, i) withJavaMathMathContext:mc_];
    }
    else {
      if (i >= coefficients_->size_) {
        newCoeff = IOSObjectArray_Get(p->coefficients_, i);
      }
      else {
        newCoeff = IOSObjectArray_Get(coefficients_, i);
      }
    }
    if (![self smallerEpsWithJavaMathBigDecimal:newCoeff]) {
      if (coeff->size_ == 1) {
        coeff = [IOSObjectArray arrayWithLength:i + 1 type:JavaMathBigDecimal_class_()];
      }
      IOSObjectArray_Set(coeff, i, newCoeff);
    }
    else {
      if (coeff->size_ > 1) {
        IOSObjectArray_Set(coeff, i, JavaMathBigDecimal_get_ZERO_());
      }
    }
  }
  return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, coeff) autorelease];
}

- (GeogebraCommonKernelPolynomialBigPolynomial *)subtractWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p {
  IOSObjectArray *coeff = [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigDecimal_get_ZERO_() } count:1 type:JavaMathBigDecimal_class_()];
  for (jint i = JavaLangMath_maxWithInt_withInt_(((IOSObjectArray *) nil_chk(coefficients_))->size_, ((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(p))->coefficients_->size_) - 1; i >= 0; i--) {
    JavaMathBigDecimal *newCoeff = JavaMathBigDecimal_get_ZERO_();
    if (i < coefficients_->size_ && i < p->coefficients_->size_) {
      newCoeff = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) subtractWithJavaMathBigDecimal:IOSObjectArray_Get(p->coefficients_, i) withJavaMathMathContext:mc_];
    }
    else {
      if (i >= coefficients_->size_) {
        newCoeff = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(p->coefficients_, i))) negate];
      }
      else {
        newCoeff = IOSObjectArray_Get(coefficients_, i);
      }
    }
    if (![self smallerEpsWithJavaMathBigDecimal:newCoeff]) {
      if (coeff->size_ == 1) {
        coeff = [IOSObjectArray arrayWithLength:i + 1 type:JavaMathBigDecimal_class_()];
      }
      IOSObjectArray_Set(coeff, i, newCoeff);
    }
    else {
      if (coeff->size_ > 1) {
        IOSObjectArray_Set(coeff, i, JavaMathBigDecimal_get_ZERO_());
      }
    }
  }
  return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, coeff) autorelease];
}

- (GeogebraCommonKernelPolynomialBigPolynomial *)multiplyWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)p {
  IOSObjectArray *coeff = [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigDecimal_get_ZERO_() } count:1 type:JavaMathBigDecimal_class_()];
  for (jint i = (((IOSObjectArray *) nil_chk(coefficients_))->size_ + ((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(p))->coefficients_->size_) - 2; i >= 0; i--) {
    JavaMathBigDecimal *sum = JavaMathBigDecimal_get_ZERO_();
    for (jint j = 0; j <= i; j++) {
      if (j < coefficients_->size_ && (i - j) < p->coefficients_->size_) {
        sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, j))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(p->coefficients_, i - j) withJavaMathMathContext:mc_] withJavaMathMathContext:mc_];
      }
    }
    if (![self smallerEpsWithJavaMathBigDecimal:sum]) {
      if (coeff->size_ == 1) {
        coeff = [IOSObjectArray arrayWithLength:i + 1 type:JavaMathBigDecimal_class_()];
      }
      IOSObjectArray_Set(coeff, i, sum);
    }
    else {
      if (coeff->size_ > 1) {
        IOSObjectArray_Set(coeff, i, JavaMathBigDecimal_get_ZERO_());
      }
    }
  }
  return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, coeff) autorelease];
}

- (GeogebraCommonKernelPolynomialBigPolynomial *)divideWithGeogebraCommonKernelPolynomialBigPolynomial:(GeogebraCommonKernelPolynomialBigPolynomial *)divisor {
  IOSObjectArray *quotient;
  jint degD = [((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(divisor)) degree];
  if (degD < 0) {
    @throw [new_JavaLangArithmeticException_initWithNSString_(@"divide by zero polynomial") autorelease];
  }
  IOSObjectArray *remainder = [self getCoefficients];
  jint k = ((IOSObjectArray *) nil_chk(remainder))->size_ - 1;
  if (k < degD) {
    return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigDecimal_get_ZERO_() } count:1 type:JavaMathBigDecimal_class_()]) autorelease];
  }
  quotient = [IOSObjectArray arrayWithObjects:(id[]){ JavaMathBigDecimal_get_ZERO_() } count:1 type:JavaMathBigDecimal_class_()];
  JavaMathBigDecimal *lcd = IOSObjectArray_Get(nil_chk(divisor->coefficients_), degD);
  for (jint i = k - degD; i >= 0; i--) {
    JavaMathBigDecimal *q = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(remainder, k))) divideWithJavaMathBigDecimal:lcd withJavaMathMathContext:mc_];
    if (![self smallerEpsWithJavaMathBigDecimal:q]) {
      if (quotient->size_ == 1) {
        quotient = [IOSObjectArray arrayWithLength:i + 1 type:JavaMathBigDecimal_class_()];
      }
      IOSObjectArray_Set(quotient, i, q);
      for (jint j = 0; j <= degD - 1; j++) {
        IOSObjectArray_Set(remainder, j + i, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(remainder, j + i))) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(quotient, i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(divisor->coefficients_, j) withJavaMathMathContext:mc_] withJavaMathMathContext:mc_]);
      }
    }
    else {
      if (quotient->size_ > 1) {
        IOSObjectArray_Set(quotient, i, JavaMathBigDecimal_get_ZERO_());
      }
    }
    k--;
  }
  return [new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, quotient) autorelease];
}

- (IOSDoubleArray *)getCoefficientsDouble {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(coefficients_))->size_];
  for (jint i = 0; i < coefficients_->size_; i++) {
    *IOSDoubleArray_GetRef(ret, i) = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) doubleValue];
  }
  return ret;
}

- (IOSObjectArray *)getCoefficients {
  IOSObjectArray *coefficients_clone = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(coefficients_))->size_ type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < coefficients_->size_; i++) IOSObjectArray_SetAndConsume(coefficients_clone, i, new_JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_withJavaMathMathContext_([((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) unscaledValue], [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) scale__], [new_JavaMathMathContext_initWithInt_([((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) precision]) autorelease]));
  return coefficients_clone;
}

- (JavaMathBigDecimal *)getCoeffWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(coefficients_), index);
}

- (jdouble)getCoeffDoubleWithInt:(jint)index {
  return [((JavaMathBigDecimal *) nil_chk([self getCoeffWithInt:index])) doubleValue];
}

- (NSString *)description {
  if (((jint) [((NSString *) nil_chk(representation_)) length]) == 0) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coefficients_))->size_; i++) {
      NSString *c = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coefficients_, i))) toPlainString];
      if ([((NSString *) nil_chk(c)) charAtWithInt:0] != '-' && i != 0) [sb appendWithChar:'+'];
      [sb appendWithNSString:c];
      [sb appendWithNSString:@" x^"];
      [sb appendWithInt:i];
    }
    GeogebraCommonKernelPolynomialBigPolynomial_set_representation_(self, [sb description]);
  }
  return representation_;
}

- (jboolean)isZeroPolynomial {
  return [self smallerEpsWithJavaMathBigDecimal:IOSObjectArray_Get(coefficients_, ((IOSObjectArray *) nil_chk(coefficients_))->size_ - 1)];
}

- (jboolean)smallerEpsWithJavaMathBigDecimal:(JavaMathBigDecimal *)d {
  return ([((JavaMathBigDecimal *) nil_chk(minusEps_)) compareToWithId:d] <= 0) && ([((JavaMathBigDecimal *) nil_chk(d)) compareToWithId:plusEps_] <= 0);
}

- (GeogebraCommonKernelPolynomialBigComplex *)rootPolishingWithGeogebraCommonKernelPolynomialBigComplex:(GeogebraCommonKernelPolynomialBigComplex *)x {
  jint MAX_ITER = 10;
  GeogebraCommonKernelPolynomialBigComplex *oldX = x;
  JavaMathBigDecimal *lastErr = nil;
  for (jint i = 0; i < MAX_ITER; i++) {
    jint n = ((IOSObjectArray *) nil_chk(coefficients_))->size_ - 1;
    GeogebraCommonKernelPolynomialBigComplex *px = [new_GeogebraCommonKernelPolynomialBigComplex_initWithJavaMathBigDecimal_(IOSObjectArray_Get(coefficients_, n)) autorelease];
    GeogebraCommonKernelPolynomialBigComplex *dpx = GeogebraCommonKernelPolynomialBigComplex_get_ZERO_();
    for (jint j = n - 1; j >= 0; j--) {
      dpx = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(x)) multiplyWithGeogebraCommonKernelPolynomialBigComplex:dpx withJavaMathMathContext:mc_])) addWithGeogebraCommonKernelPolynomialBigComplex:px withJavaMathMathContext:mc_];
      px = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([px multiplyWithGeogebraCommonKernelPolynomialBigComplex:x withJavaMathMathContext:mc_])) addWithJavaMathBigDecimal:IOSObjectArray_Get(coefficients_, j) withJavaMathMathContext:mc_];
    }
    JavaMathBigDecimal *err = [((JavaMathBigDecimal *) nil_chk([((JavaMathBigDecimal *) nil_chk(((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(px))->real_)) absWithJavaMathMathContext:mc_])) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(px->imag_)) absWithJavaMathMathContext:mc_] withJavaMathMathContext:mc_];
    if (i > 0 && [((JavaMathBigDecimal *) nil_chk(lastErr)) compareToWithId:err] <= 0) {
      x = oldX;
      break;
    }
    oldX = x;
    x = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(x)) subtractWithGeogebraCommonKernelPolynomialBigComplex:[px divideWithGeogebraCommonKernelPolynomialBigComplex:dpx withJavaMathMathContext:mc_] withJavaMathMathContext:mc_];
    lastErr = err;
  }
  return x;
}

- (IOSDoubleArray *)getRealRootsDoubleWithInt:(jint)precision {
  JavaMathMathContext *mc = [new_JavaMathMathContext_initWithInt_(precision) autorelease];
  IOSObjectArray *roots = [self getRootsLaguerreWithJavaMathMathContext:mc];
  IOSDoubleArray *doubleRoots = [IOSDoubleArray arrayWithLength:((IOSObjectArray *) nil_chk(roots))->size_];
  jint c = 0;
  for (jint i = 0; i < roots->size_; i++) {
    GeogebraCommonKernelPolynomialBigComplex *root = [self rootPolishingWithGeogebraCommonKernelPolynomialBigComplex:IOSObjectArray_Get(roots, i)];
    jdouble imag = [((JavaMathBigDecimal *) nil_chk(((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(root))->imag_)) doubleValue];
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(imag, 0., 10E-5)) {
      *IOSDoubleArray_GetRef(doubleRoots, c++) = [((JavaMathBigDecimal *) nil_chk(root->real_)) doubleValue];
    }
  }
  if (c < roots->size_) {
    IOSDoubleArray *doubleRootsFinal = [IOSDoubleArray arrayWithLength:c];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(doubleRoots, 0, doubleRootsFinal, 0, c);
    return doubleRootsFinal;
  }
  return doubleRoots;
}

- (IOSObjectArray *)getRootsLaguerreWithJavaMathMathContext:(JavaMathMathContext *)mc {
  if (((IOSObjectArray *) nil_chk(coefficients_))->size_ <= 1) {
    return [IOSObjectArray arrayWithLength:0 type:GeogebraCommonKernelPolynomialBigComplex_class_()];
  }
  IOSObjectArray *coeff = [IOSObjectArray arrayWithLength:coefficients_->size_ type:GeogebraCommonKernelPolynomialBigComplex_class_()];
  IOSObjectArray *roots = [IOSObjectArray arrayWithLength:coefficients_->size_ - 1 type:GeogebraCommonKernelPolynomialBigComplex_class_()];
  for (jint i = 0; i < coeff->size_; i++) {
    IOSObjectArray_SetAndConsume(coeff, i, new_GeogebraCommonKernelPolynomialBigComplex_initWithJavaMathBigDecimal_(IOSObjectArray_Get(coefficients_, i)));
  }
  for (jint i = 0; i < roots->size_ - 1; i++) {
    IOSObjectArray_Set(roots, i, [self getRootWithGeogebraCommonKernelPolynomialBigComplexArray:coeff withGeogebraCommonKernelPolynomialBigComplex:GeogebraCommonKernelPolynomialBigComplex_get_ONE_() withJavaMathMathContext:mc]);
    IOSObjectArray *newCoeff = [IOSObjectArray arrayWithLength:coeff->size_ - 1 type:GeogebraCommonKernelPolynomialBigComplex_class_()];
    jint n = coeff->size_ - 1;
    GeogebraCommonKernelPolynomialBigComplex *s = IOSObjectArray_Get(coeff, n);
    IOSObjectArray_Set(newCoeff, n - 1, s);
    for (jint j = n - 2; j >= 0; j--) {
      s = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(s)) multiplyWithGeogebraCommonKernelPolynomialBigComplex:IOSObjectArray_Get(roots, i) withJavaMathMathContext:mc];
      s = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(s)) addWithGeogebraCommonKernelPolynomialBigComplex:IOSObjectArray_Get(coeff, j + 1) withJavaMathMathContext:mc];
      IOSObjectArray_Set(newCoeff, j, s);
    }
    coeff = newCoeff;
  }
  IOSObjectArray_Set(roots, roots->size_ - 1, [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(IOSObjectArray_Get(coeff, 0))) negate])) divideWithGeogebraCommonKernelPolynomialBigComplex:IOSObjectArray_Get(coeff, 1) withJavaMathMathContext:mc]);
  return roots;
}

- (GeogebraCommonKernelPolynomialBigComplex *)getRootWithGeogebraCommonKernelPolynomialBigComplexArray:(IOSObjectArray *)coeff
                                                          withGeogebraCommonKernelPolynomialBigComplex:(GeogebraCommonKernelPolynomialBigComplex *)start
                                                                               withJavaMathMathContext:(JavaMathMathContext *)mc {
  GeogebraCommonKernelPolynomialBigComplex *x = start;
  for (jint i = 0; i < GeogebraCommonKernelPolynomialBigPolynomial_MAX_ITERATIONS_; i++) {
    jint n = ((IOSObjectArray *) nil_chk(coeff))->size_ - 1;
    GeogebraCommonKernelPolynomialBigComplex *px = IOSObjectArray_Get(coeff, n);
    GeogebraCommonKernelPolynomialBigComplex *dpx = GeogebraCommonKernelPolynomialBigComplex_get_ZERO_();
    GeogebraCommonKernelPolynomialBigComplex *ddpx = GeogebraCommonKernelPolynomialBigComplex_get_ZERO_();
    JavaMathBigDecimal *err = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(px)) absWithJavaMathMathContext:mc];
    JavaMathBigDecimal *abx = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(x)) absWithJavaMathMathContext:mc];
    for (jint j = n - 1; j >= 0; j--) {
      ddpx = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([x multiplyWithGeogebraCommonKernelPolynomialBigComplex:ddpx withJavaMathMathContext:mc])) addWithGeogebraCommonKernelPolynomialBigComplex:dpx withJavaMathMathContext:mc];
      dpx = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([x multiplyWithGeogebraCommonKernelPolynomialBigComplex:dpx withJavaMathMathContext:mc])) addWithGeogebraCommonKernelPolynomialBigComplex:px withJavaMathMathContext:mc];
      px = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(IOSObjectArray_Get(coeff, j))) addWithGeogebraCommonKernelPolynomialBigComplex:[px multiplyWithGeogebraCommonKernelPolynomialBigComplex:x withJavaMathMathContext:mc] withJavaMathMathContext:mc];
      err = [((JavaMathBigDecimal *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(px)) absWithJavaMathMathContext:mc])) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(abx)) multiplyWithJavaMathBigDecimal:err withJavaMathMathContext:mc] withJavaMathMathContext:mc];
    }
    ddpx = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(ddpx)) addWithGeogebraCommonKernelPolynomialBigComplex:ddpx withJavaMathMathContext:mc];
    err = [((JavaMathBigDecimal *) nil_chk(err)) multiplyWithJavaMathBigDecimal:plusEps_ withJavaMathMathContext:mc];
    if ([((JavaMathBigDecimal *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(px)) absWithJavaMathMathContext:mc])) compareToWithId:err] <= 0) {
      return x;
    }
    GeogebraCommonKernelPolynomialBigComplex *g = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(dpx)) divideWithGeogebraCommonKernelPolynomialBigComplex:px withJavaMathMathContext:mc];
    GeogebraCommonKernelPolynomialBigComplex *g2 = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(g)) multiplyWithGeogebraCommonKernelPolynomialBigComplex:g withJavaMathMathContext:mc];
    GeogebraCommonKernelPolynomialBigComplex *h = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(g2)) subtractWithGeogebraCommonKernelPolynomialBigComplex:[((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(ddpx)) divideWithGeogebraCommonKernelPolynomialBigComplex:px withJavaMathMathContext:mc] withJavaMathMathContext:mc];
    GeogebraCommonKernelPolynomialBigComplex *sq = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(h)) multiplyWithJavaMathBigDecimal:JavaMathBigDecimal_valueOfWithLong_(n) withJavaMathMathContext:mc])) subtractWithGeogebraCommonKernelPolynomialBigComplex:g2 withJavaMathMathContext:mc])) multiplyWithJavaMathBigDecimal:JavaMathBigDecimal_valueOfWithLong_(n - 1) withJavaMathMathContext:mc])) sqrtWithJavaMathMathContext:mc];
    GeogebraCommonKernelPolynomialBigComplex *gp = [g addWithGeogebraCommonKernelPolynomialBigComplex:sq withJavaMathMathContext:mc];
    GeogebraCommonKernelPolynomialBigComplex *gm = [g subtractWithGeogebraCommonKernelPolynomialBigComplex:sq withJavaMathMathContext:mc];
    JavaMathBigDecimal *abp = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(gp)) absWithJavaMathMathContext:mc];
    JavaMathBigDecimal *abm = [((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(gm)) absWithJavaMathMathContext:mc];
    if ([((JavaMathBigDecimal *) nil_chk(abp)) compareToWithId:abm] < 0) {
      gp = gm;
      abp = abm;
    }
    GeogebraCommonKernelPolynomialBigComplex *dx;
    if ([((JavaMathBigDecimal *) nil_chk(abp)) compareToWithId:JavaMathBigDecimal_get_ZERO_()] > 0) {
      dx = [([new_GeogebraCommonKernelPolynomialBigComplex_initWithJavaMathBigDecimal_(JavaMathBigDecimal_valueOfWithLong_(n)) autorelease]) divideWithGeogebraCommonKernelPolynomialBigComplex:gp withJavaMathMathContext:mc];
    }
    else {
      GeogebraCommonMainApp_debugWithNSString_(@"unhandled case");
      dx = GeogebraCommonKernelPolynomialBigComplex_get_ZERO_();
    }
    if ([((JavaMathBigDecimal *) nil_chk([((GeogebraCommonKernelPolynomialBigComplex *) nil_chk(dx)) absWithJavaMathMathContext:mc])) compareToWithId:plusEps_] <= 0) {
      return x;
    }
    x = [x subtractWithGeogebraCommonKernelPolynomialBigComplex:dx withJavaMathMathContext:mc];
  }
  GeogebraCommonUtilDebugLog_warnWithNSString_(@"Max Iterations exceeded");
  return x;
}

- (void)dealloc {
  RELEASE_(coefficients_);
  RELEASE_(representation_);
  RELEASE_(mc_);
  RELEASE_(plusEps_);
  RELEASE_(minusEps_);
  [super dealloc];
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self clone] retain];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BigPolynomial", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelPolynomialBigPolynomial:", "BigPolynomial", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelPolynomialBigPolynomial:withJavaMathBigDecimalArray:", "BigPolynomial", NULL, 0x4, NULL, NULL },
    { "initWithJavaMathBigDecimalArray:", "BigPolynomial", NULL, 0x2, NULL, NULL },
    { "initWithJavaMathBigDecimalArray:withJavaMathBigDecimal:withJavaMathMathContext:", "BigPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withJavaMathMathContext:", "BigPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:withInt:", "BigPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withInt:", "BigPolynomial", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.polynomial.BigPolynomial;", 0x1, NULL, NULL },
    { "clone", NULL, "Ljava.lang.Object;", 0x1, NULL, NULL },
    { "degree", NULL, "I", 0x1, NULL, NULL },
    { "evalWithJavaMathBigDecimal:", "eval", "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "evalWithDouble:", "eval", "D", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelPolynomialBigPolynomial:", "add", "Lgeogebra.common.kernel.polynomial.BigPolynomial;", 0x1, NULL, NULL },
    { "subtractWithGeogebraCommonKernelPolynomialBigPolynomial:", "subtract", "Lgeogebra.common.kernel.polynomial.BigPolynomial;", 0x1, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelPolynomialBigPolynomial:", "multiply", "Lgeogebra.common.kernel.polynomial.BigPolynomial;", 0x1, NULL, NULL },
    { "divideWithGeogebraCommonKernelPolynomialBigPolynomial:", "divide", "Lgeogebra.common.kernel.polynomial.BigPolynomial;", 0x1, NULL, NULL },
    { "getCoefficientsDouble", NULL, "[D", 0x1, NULL, NULL },
    { "getCoefficients", NULL, "[Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getCoeffWithInt:", "getCoeff", "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getCoeffDoubleWithInt:", "getCoeffDouble", "D", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isZeroPolynomial", NULL, "Z", 0x1, NULL, NULL },
    { "smallerEpsWithJavaMathBigDecimal:", "smallerEps", "Z", 0x4, NULL, NULL },
    { "rootPolishingWithGeogebraCommonKernelPolynomialBigComplex:", "rootPolishing", "Lgeogebra.common.kernel.polynomial.BigComplex;", 0x1, NULL, NULL },
    { "getRealRootsDoubleWithInt:", "getRealRootsDouble", "[D", 0x1, NULL, NULL },
    { "getRootsLaguerreWithJavaMathMathContext:", "getRootsLaguerre", "[Lgeogebra.common.kernel.polynomial.BigComplex;", 0x1, NULL, NULL },
    { "getRootWithGeogebraCommonKernelPolynomialBigComplexArray:withGeogebraCommonKernelPolynomialBigComplex:withJavaMathMathContext:", "getRoot", "Lgeogebra.common.kernel.polynomial.BigComplex;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coefficients_", NULL, 0x4, "[Ljava.math.BigDecimal;", NULL, NULL,  },
    { "representation_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "mc_", NULL, 0x4, "Ljava.math.MathContext;", NULL, NULL,  },
    { "plusEps_", NULL, 0x4, "Ljava.math.BigDecimal;", NULL, NULL,  },
    { "minusEps_", NULL, 0x4, "Ljava.math.BigDecimal;", NULL, NULL,  },
    { "MAX_ITERATIONS_", NULL, 0xa, "I", &GeogebraCommonKernelPolynomialBigPolynomial_MAX_ITERATIONS_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelPolynomialBigPolynomial = { 2, "BigPolynomial", "geogebra.common.kernel.polynomial", NULL, 0x1, 28, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelPolynomialBigPolynomial;
}

@end

void GeogebraCommonKernelPolynomialBigPolynomial_init(GeogebraCommonKernelPolynomialBigPolynomial *self) {
  NSObject_init(self);
  GeogebraCommonKernelPolynomialBigPolynomial_set_representation_(self, @"");
  GeogebraCommonKernelPolynomialBigPolynomial_set_mc_(self, JavaMathMathContext_get_UNLIMITED_());
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_init() {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_init(self);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(GeogebraCommonKernelPolynomialBigPolynomial *self, GeogebraCommonKernelPolynomialBigPolynomial *p) {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, p, [((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(p)) getCoefficients]);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(GeogebraCommonKernelPolynomialBigPolynomial *p) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_(self, p);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *self, GeogebraCommonKernelPolynomialBigPolynomial *p, IOSObjectArray *coeff) {
  GeogebraCommonKernelPolynomialBigPolynomial_init(self);
  GeogebraCommonKernelPolynomialBigPolynomial_set_mc_(self, ((GeogebraCommonKernelPolynomialBigPolynomial *) nil_chk(p))->mc_);
  GeogebraCommonKernelPolynomialBigPolynomial_set_plusEps_(self, p->plusEps_);
  GeogebraCommonKernelPolynomialBigPolynomial_set_minusEps_(self, p->minusEps_);
  GeogebraCommonKernelPolynomialBigPolynomial_set_coefficients_(self, coeff);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *p, IOSObjectArray *coeff) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithGeogebraCommonKernelPolynomialBigPolynomial_withJavaMathBigDecimalArray_(self, p, coeff);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSObjectArray *coeff) {
  GeogebraCommonKernelPolynomialBigPolynomial_init(self);
  IOSObjectArray *coefficients_clone = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(coeff))->size_ type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < coeff->size_; i++) IOSObjectArray_SetAndConsume(coefficients_clone, i, new_JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_withJavaMathMathContext_([((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coeff, i))) unscaledValue], [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coeff, i))) scale__], [new_JavaMathMathContext_initWithInt_([((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(coeff, i))) precision]) autorelease]));
  GeogebraCommonKernelPolynomialBigPolynomial_set_coefficients_(self, coefficients_clone);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(IOSObjectArray *coeff) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(self, coeff);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSObjectArray *coeff, JavaMathBigDecimal *eps, JavaMathMathContext *mc) {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_(self, coeff);
  GeogebraCommonKernelPolynomialBigPolynomial_set_plusEps_(self, eps);
  GeogebraCommonKernelPolynomialBigPolynomial_set_minusEps_(self, [((JavaMathBigDecimal *) nil_chk(self->plusEps_)) negate]);
  GeogebraCommonKernelPolynomialBigPolynomial_set_mc_(self, mc);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(IOSObjectArray *coeff, JavaMathBigDecimal *eps, JavaMathMathContext *mc) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithJavaMathBigDecimalArray_withJavaMathBigDecimal_withJavaMathMathContext_(self, coeff, eps, mc);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSDoubleArray *coeff, JavaMathMathContext *mc) {
  GeogebraCommonKernelPolynomialBigPolynomial_init(self);
  GeogebraCommonKernelPolynomialBigPolynomial_setAndConsume_coefficients_(self, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(coeff))->size_ type:JavaMathBigDecimal_class_()]);
  for (jint i = 0; i < coeff->size_; i++) {
    IOSObjectArray_SetAndConsume(self->coefficients_, i, new_JavaMathBigDecimal_initWithDouble_withJavaMathMathContext_(IOSDoubleArray_Get(coeff, i), mc));
  }
  GeogebraCommonKernelPolynomialBigPolynomial_set_mc_(self, mc);
  GeogebraCommonKernelPolynomialBigPolynomial_setAndConsume_plusEps_(self, new_JavaMathBigDecimal_initWithJavaMathBigInteger_withInt_(JavaMathBigInteger_get_ONE_(), [((JavaMathMathContext *) nil_chk(mc)) getPrecision] / 2));
  GeogebraCommonKernelPolynomialBigPolynomial_set_minusEps_(self, [self->plusEps_ negate]);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(IOSDoubleArray *coeff, JavaMathMathContext *mc) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(self, coeff, mc);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(GeogebraCommonKernelPolynomialBigPolynomial *self, IOSDoubleArray *coeff, jint precision) {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withJavaMathMathContext_(self, coeff, [new_JavaMathMathContext_initWithInt_(precision) autorelease]);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(IOSDoubleArray *coeff, jint precision) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(self, coeff, precision);
  return self;
}

void GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(GeogebraCommonKernelPolynomialBigPolynomial *self, jdouble constant, jint precision) {
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDoubleArray_withInt_(self, [IOSDoubleArray arrayWithDoubles:(jdouble[]){ constant } count:1], precision);
}

GeogebraCommonKernelPolynomialBigPolynomial *new_GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(jdouble constant, jint precision) {
  GeogebraCommonKernelPolynomialBigPolynomial *self = [GeogebraCommonKernelPolynomialBigPolynomial alloc];
  GeogebraCommonKernelPolynomialBigPolynomial_initWithDouble_withInt_(self, constant, precision);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelPolynomialBigPolynomial)
