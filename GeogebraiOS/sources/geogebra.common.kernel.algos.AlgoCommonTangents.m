//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCommonTangents.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoCommonTangents.h"
#include "geogebra/common/kernel/algos/AlgoCommonTangentsND.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonKernelAlgosAlgoCommonTangents

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  GeogebraCommonKernelAlgosAlgoCommonTangents_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
  return self;
}

- (void)createPointsWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_setAndConsume_P_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  IOSObjectArray_SetAndConsume(P_, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  IOSObjectArray_SetAndConsume(P_, 1, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
}

- (void)setCoordsAsPointWithInt:(jint)index
                     withDouble:(jdouble)x
                     withDouble:(jdouble)y {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:x withDouble:y withDouble:1];
}

- (void)setCoordsAsVectorWithInt:(jint)index
                      withDouble:(jdouble)x
                      withDouble:(jdouble)y {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:x withDouble:y withDouble:0];
}

- (void)initTangents {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 + 2 type:GeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), 0), [GeogebraCommonKernelGeosGeoPoint class])];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 0), [GeogebraCommonKernelGeosGeoPoint class])];
  IOSObjectArray_SetAndConsume(tangents_, 0 + 2, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1 + 2, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0 + 2), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [GeogebraCommonKernelGeosGeoPoint class])];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1 + 2), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelKernelNDAlgoIntersectND *)createAlgoWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                            withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line
                                                     withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) polarLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:line];
  return [new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(cons, line, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(conic, [GeogebraCommonKernelGeosGeoConic class])) autorelease];
}

- (void)initForNearToRelationship {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
  GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints2_, IOSObjectArray_Get(tangents_, 2), algoIntersect2_);
}

- (void)updatePolarLines {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), 0))) polarLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), 0), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:polar_];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(c_, 1))) polarLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, 1), [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelGeosGeoLine:polar2_];
}

- (jboolean)isIntersectionPointIncidentWithInt:(jint)index
    withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [GeogebraCommonKernelGeosGeoPoint class]) withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
}

- (void)updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                                              withInt:(jint)index {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(P_), index), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0 + 2 * index), [GeogebraCommonKernelGeosGeoLine class]));
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(P_, index), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(tangentPoints, 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1 + 2 * index), [GeogebraCommonKernelGeosGeoLine class]));
}

- (void)setTangentFromPolarWithInt:(jint)i
withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [GeogebraCommonKernelGeosGeoLine class])))) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:line];
}

- (jdouble)getMidpointXWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  return [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), mpIndex)))->b_)) getX];
}

- (jdouble)getMidpointYWithInt:(jint)csIndex
                       withInt:(jint)mpIndex {
  return [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(IOSObjectArray_Get(nil_chk(c_), mpIndex)))->b_)) getY];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCommonTangents", NULL, 0x1, NULL, NULL },
    { "createPointsWithGeogebraCommonKernelConstruction:", "createPoints", "V", 0x4, NULL, NULL },
    { "setCoordsAsPointWithInt:withDouble:withDouble:", "setCoordsAsPoint", "V", 0x4, NULL, NULL },
    { "setCoordsAsVectorWithInt:withDouble:withDouble:", "setCoordsAsVector", "V", 0x4, NULL, NULL },
    { "initTangents", NULL, "V", 0x4, NULL, NULL },
    { "createAlgoWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelKernelNDGeoConicND:", "createAlgo", "Lgeogebra.common.kernel.kernelND.AlgoIntersectND;", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "updatePolarLines", NULL, "V", 0x4, NULL, NULL },
    { "isIntersectionPointIncidentWithInt:withGeogebraCommonKernelKernelNDGeoConicND:", "isIntersectionPointIncident", "Z", 0x4, NULL, NULL },
    { "updateTangentsWithGeogebraCommonKernelKernelNDGeoPointNDArray:withInt:", "updateTangents", "V", 0x4, NULL, NULL },
    { "setTangentFromPolarWithInt:withGeogebraCommonKernelGeosGeoLine:", "setTangentFromPolar", "V", 0x4, NULL, NULL },
    { "getMidpointXWithInt:withInt:", "getMidpointX", "D", 0x4, NULL, NULL },
    { "getMidpointYWithInt:withInt:", "getMidpointY", "D", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCommonTangents = { 2, "AlgoCommonTangents", "geogebra.common.kernel.algos", NULL, 0x1, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCommonTangents;
}

@end

void GeogebraCommonKernelAlgosAlgoCommonTangents_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoCommonTangents *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoConicND *c, GeogebraCommonKernelKernelNDGeoConicND *c2) {
  GeogebraCommonKernelAlgosAlgoCommonTangentsND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
}

GeogebraCommonKernelAlgosAlgoCommonTangents *new_GeogebraCommonKernelAlgosAlgoCommonTangents_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoConicND *c, GeogebraCommonKernelKernelNDGeoConicND *c2) {
  GeogebraCommonKernelAlgosAlgoCommonTangents *self = [GeogebraCommonKernelAlgosAlgoCommonTangents alloc];
  GeogebraCommonKernelAlgosAlgoCommonTangents_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, c, c2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCommonTangents)
