//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoRandomNormal.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoRandomNormal.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelStatisticsAlgoRandomNormal ()

- (jdouble)randomNormalWithDouble:(jdouble)mean
                       withDouble:(jdouble)sd;

@end

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoRandomNormal *self, jdouble mean, jdouble sd);

@implementation GeogebraCommonKernelStatisticsAlgoRandomNormal

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  GeogebraCommonKernelStatisticsAlgoRandomNormal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RandomNormal();
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    if ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] < 0) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
    else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:GeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble], [b_ getDouble])];
  }
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
}

- (jdouble)randomNormalWithDouble:(jdouble)mean
                       withDouble:(jdouble)sd {
  return GeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(self, mean, sd);
}

- (void)setRandomValueWithDouble:(jdouble)d {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:d];
  [num_ updateRepaint];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomNormal", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "randomNormalWithDouble:withDouble:", "randomNormal", "D", 0x2, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoRandomNormal = { 2, "AlgoRandomNormal", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoRandomNormal;
}

@end

void GeogebraCommonKernelStatisticsAlgoRandomNormal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoRandomNormal *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithGeogebraCommonKernelGeosGeoElement:self->num_];
}

GeogebraCommonKernelStatisticsAlgoRandomNormal *new_GeogebraCommonKernelStatisticsAlgoRandomNormal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelStatisticsAlgoRandomNormal *self = [GeogebraCommonKernelStatisticsAlgoRandomNormal alloc];
  GeogebraCommonKernelStatisticsAlgoRandomNormal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

jdouble GeogebraCommonKernelStatisticsAlgoRandomNormal_randomNormalWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoRandomNormal *self, jdouble mean, jdouble sd) {
  jdouble fac, rsq, v1, v2;
  do {
    v1 = 2.0 * [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomNumber] - 1;
    v2 = 2.0 * [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getRandomNumber] - 1;
    rsq = v1 * v1 + v2 * v2;
  }
  while (rsq >= 1.0 || rsq == 0.0);
  fac = JavaLangMath_sqrtWithDouble_(-2.0 * JavaLangMath_logWithDouble_(rsq) / rsq);
  return v1 * fac * sd + mean;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoRandomNormal)
