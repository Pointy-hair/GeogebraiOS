//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/ParametricCurveDistanceFunction.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/ParametricCurveDistanceFunction.h"
#include "geogebra/common/kernel/geos/ParametricCurve.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/roots/RealRootFunction.h"

@interface GeogebraCommonKernelParametricCurveDistanceFunction () {
 @public
  jdouble px_, py_;
  id<GeogebraCommonKernelRootsRealRootFunction> funX_, funY_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelParametricCurveDistanceFunction, funX_, id<GeogebraCommonKernelRootsRealRootFunction>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParametricCurveDistanceFunction, funY_, id<GeogebraCommonKernelRootsRealRootFunction>)

@implementation GeogebraCommonKernelParametricCurveDistanceFunction

- (instancetype)initWithGeogebraCommonKernelGeosParametricCurve:(id<GeogebraCommonKernelGeosParametricCurve>)curve {
  GeogebraCommonKernelParametricCurveDistanceFunction_initWithGeogebraCommonKernelGeosParametricCurve_(self, curve);
  return self;
}

- (jdouble)evaluateWithDouble:(jdouble)t {
  jdouble dx = [((id<GeogebraCommonKernelRootsRealRootFunction>) nil_chk(funX_)) evaluateWithDouble:t] - px_;
  jdouble dy = [((id<GeogebraCommonKernelRootsRealRootFunction>) nil_chk(funY_)) evaluateWithDouble:t] - py_;
  return dx * dx + dy * dy;
}

- (void)setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  px_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ];
  py_ = [coords getY] / [coords getZ];
}

- (void)dealloc {
  RELEASE_(funX_);
  RELEASE_(funY_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosParametricCurve:", "ParametricCurveDistanceFunction", NULL, 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "setDistantPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setDistantPoint", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "px_", NULL, 0x2, "D", NULL, NULL,  },
    { "py_", NULL, 0x2, "D", NULL, NULL,  },
    { "funX_", NULL, 0x2, "Lgeogebra.common.kernel.roots.RealRootFunction;", NULL, NULL,  },
    { "funY_", NULL, 0x2, "Lgeogebra.common.kernel.roots.RealRootFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelParametricCurveDistanceFunction = { 2, "ParametricCurveDistanceFunction", "geogebra.common.kernel", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelParametricCurveDistanceFunction;
}

@end

void GeogebraCommonKernelParametricCurveDistanceFunction_initWithGeogebraCommonKernelGeosParametricCurve_(GeogebraCommonKernelParametricCurveDistanceFunction *self, id<GeogebraCommonKernelGeosParametricCurve> curve) {
  NSObject_init(self);
  GeogebraCommonKernelParametricCurveDistanceFunction_set_funX_(self, [((id<GeogebraCommonKernelGeosParametricCurve>) nil_chk(curve)) getRealRootFunctionX]);
  GeogebraCommonKernelParametricCurveDistanceFunction_set_funY_(self, [curve getRealRootFunctionY]);
}

GeogebraCommonKernelParametricCurveDistanceFunction *new_GeogebraCommonKernelParametricCurveDistanceFunction_initWithGeogebraCommonKernelGeosParametricCurve_(id<GeogebraCommonKernelGeosParametricCurve> curve) {
  GeogebraCommonKernelParametricCurveDistanceFunction *self = [GeogebraCommonKernelParametricCurveDistanceFunction alloc];
  GeogebraCommonKernelParametricCurveDistanceFunction_initWithGeogebraCommonKernelGeosParametricCurve_(self, curve);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParametricCurveDistanceFunction)
