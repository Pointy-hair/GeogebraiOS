//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoSurfaceCartesianND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/StringBuilder.h"

static GeogebraCommonKernelArithmeticTraversing_FunctionExpander *GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_functionExpander_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelKernelNDGeoSurfaceCartesianND, functionExpander_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelKernelNDGeoSurfaceCartesianND, functionExpander_, GeogebraCommonKernelArithmeticTraversing_FunctionExpander *)

@implementation GeogebraCommonKernelKernelNDGeoSurfaceCartesianND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
     withGeogebraCommonKernelArithmeticFunctionNVarArray:(IOSObjectArray *)fun {
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVarArray_(self, c, fun);
  return self;
}

- (void)setDerivatives {
  if (fun1_ != nil) {
    return;
  }
  IOSObjectArray *vars = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), 0))) getFunctionVariables];
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_setAndConsume_fun1_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(vars))->size_ type:IOSClass_arrayType(GeogebraCommonKernelArithmeticFunctionNVar_class_(), 1)]);
  for (jint j = 0; j < vars->size_; j++) {
    IOSObjectArray_SetAndConsume(fun1_, j, [IOSObjectArray newArrayWithLength:fun_->size_ type:GeogebraCommonKernelArithmeticFunctionNVar_class_()]);
  }
  if (GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_functionExpander_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_functionExpander_, nil, new_GeogebraCommonKernelArithmeticTraversing_FunctionExpander_init());
  }
  for (jint i = 0; i < fun_->size_; i++) {
    GeogebraCommonKernelArithmeticValidExpression *ve = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, i))) deepCopyWithGeogebraCommonKernelKernel:[self getKernel]], [GeogebraCommonKernelArithmeticValidExpression class]);
    ve = (GeogebraCommonKernelArithmeticValidExpression *) check_class_cast([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_functionExpander_], [GeogebraCommonKernelArithmeticValidExpression class]);
    for (jint j = 0; j < vars->size_; j++) {
      IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(fun1_, j)), i, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(vars, j)])) wrap], vars));
    }
  }
}

- (void)resetDerivatives {
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_set_fun1_(self, nil);
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fun_))->size_; i++) if (IOSObjectArray_Get(fun_, i) != nil) {
    [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, i))) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (void)setIntervalsWithDoubleArray:(IOSDoubleArray *)startParam
                    withDoubleArray:(IOSDoubleArray *)endParam {
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_set_startParam_(self, startParam);
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_set_endParam_(self, endParam);
  isDefined__ = YES;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(startParam))->size_ && isDefined__; i++) isDefined__ = (IOSDoubleArray_Get(startParam, i) <= IOSDoubleArray_Get(nil_chk(endParam), i));
}

- (jdouble)getMinParameterWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(startParam_), i);
}

- (jdouble)getMaxParameterWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(endParam_), i);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
}

- (jboolean)isDefined {
  return isDefined__;
}

- (void)setDefinedWithBoolean:(jboolean)defined {
  isDefined__ = defined;
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  [sbToString setLengthWithInt:0];
  if ([self isLabelSet]) {
    [sbToString appendWithNSString:label_];
    [sbToString appendWithChar:'('];
    [sbToString appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(nil_chk(fun_), 0))) getFunctionVariables]), 0))) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sbToString appendWithChar:','];
    [sbToString appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, 0))) getFunctionVariables]), 1))) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sbToString appendWithNSString:@") = "];
  }
  [sbToString appendWithNSString:[self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isDefined__) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
    [sbTemp setLengthWithInt:0];
    [sbTemp appendWithChar:'('];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fun_))->size_; i++) {
      [sbTemp appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, i))) toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
      if (i < fun_->size_ - 1) [sbTemp appendWithNSString:@", "];
    }
    [sbTemp appendWithChar:')'];
    return [sbTemp description];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toSymbolicStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isDefined__) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
    [sbTemp setLengthWithInt:0];
    [sbTemp appendWithChar:'('];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fun_))->size_; i++) {
      [sbTemp appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, i))) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
      if (i < fun_->size_ - 1) [sbTemp appendWithNSString:@", "];
    }
    [sbTemp appendWithChar:')'];
    return [sbTemp description];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (isDefined__) {
    JavaLangStringBuilder *sbTemp = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
    [sbTemp setLengthWithInt:0];
    [sbTemp appendWithNSString:@"\\left(\\begin{array}{c}"];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(fun_))->size_; i++) {
      [sbTemp appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(IOSObjectArray_Get(fun_, i))) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl]];
      if (i < fun_->size_ - 1) [sbTemp appendWithNSString:@"\\\\"];
    }
    [sbTemp appendWithNSString:@"\\end{array}\\right)"];
    return [sbTemp description];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
}

- (jboolean)isGeoSurfaceCartesian {
  return YES;
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(fun1_);
  RELEASE_(startParam_);
  RELEASE_(endParam_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoSurfaceCartesianND", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionNVarArray:", "GeoSurfaceCartesianND", NULL, 0x1, NULL, NULL },
    { "setDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "resetDerivatives", NULL, "V", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "setIntervalsWithDoubleArray:withDoubleArray:", "setIntervals", "V", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "setDefinedWithBoolean:", "setDefined", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toSymbolicStringWithGeogebraCommonKernelStringTemplate:", "toSymbolicString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoSurfaceCartesian", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x4, "[Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "fun1_", NULL, 0x4, "[[Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "startParam_", NULL, 0x4, "[D", NULL, NULL,  },
    { "endParam_", NULL, 0x4, "[D", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x4, "Z", NULL, NULL,  },
    { "functionExpander_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.Traversing$FunctionExpander;", &GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_functionExpander_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelKernelNDGeoSurfaceCartesianND = { 2, "GeoSurfaceCartesianND", "geogebra.common.kernel.kernelND", NULL, 0x401, 17, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelKernelNDGeoSurfaceCartesianND;
}

@end

void GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isDefined__ = YES;
  [self setConstructionDefaults];
}

void GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVarArray_(GeogebraCommonKernelKernelNDGeoSurfaceCartesianND *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *fun) {
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelKernelNDGeoSurfaceCartesianND_set_fun_(self, fun);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelKernelNDGeoSurfaceCartesianND)
