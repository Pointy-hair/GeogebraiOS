//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCircleTwoPoints.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSphereNDTwoPoints.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoCircleTwoPoints () {
 @public
  IOSObjectArray *botanaVars_;
}

- (void)setIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCircleTwoPoints, botanaVars_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setIncidence(GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self);

@implementation GeogebraCommonKernelAlgosAlgoCircleTwoPoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, M, P);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)M
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, M, P);
  return self;
}

- (void)setIncidence {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setIncidence(self);
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)createSphereNDWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelGeosGeoConic *circle = [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [circle addPointOnConicWithGeogebraCommonKernelKernelNDGeoPointND:[self getP]];
  return circle;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS;
}

- (GeogebraCommonKernelGeosGeoConic *)getCircle {
  return (GeogebraCommonKernelGeosGeoConic *) check_class_cast([self getSphereND], [GeogebraCommonKernelGeosGeoConic class]);
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaVars_ == nil) {
    IOSObjectArray *circle1vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
    IOSObjectArray *centerVars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
    GeogebraCommonKernelGeosGeoElement *P = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self getP], [GeogebraCommonKernelGeosGeoElement class]);
    GeogebraCommonKernelGeosGeoElement *M = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self getM], [GeogebraCommonKernelGeosGeoElement class]);
    circle1vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(P, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:P];
    centerVars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(M, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:M];
    GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
    IOSObjectArray_Set(botanaVars_, 0, IOSObjectArray_Get(nil_chk(centerVars), 0));
    IOSObjectArray_Set(botanaVars_, 1, IOSObjectArray_Get(centerVars, 1));
    IOSObjectArray_Set(botanaVars_, 2, IOSObjectArray_Get(nil_chk(circle1vars), 0));
    IOSObjectArray_Set(botanaVars_, 3, IOSObjectArray_Get(circle1vars, 1));
  }
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return nil;
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnCircleTwoPointsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (jint)getInputLengthForXML {
  return [self getInputLengthForXMLMayNeedXOYPlane];
}

- (jint)getInputLengthForCommandDescription {
  return [self getInputLengthForCommandDescriptionMayNeedXOYPlane];
}

- (GeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return [self getInputMaybeXOYPlaneWithInt:i];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CircleThroughAwithCenterB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([self getP], [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([self getM], [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(botanaVars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoCircleTwoPoints", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoCircleTwoPoints", NULL, 0x1, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "createSphereNDWithGeogebraCommonKernelConstruction:", "createSphereND", "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getCircle", NULL, "Lgeogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCircleTwoPoints = { 2, "AlgoCircleTwoPoints", "geogebra.common.kernel.algos", NULL, 0x1, 15, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCircleTwoPoints;
}

@end

void GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, M, P);
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setIncidence(self);
}

GeogebraCommonKernelAlgosAlgoCircleTwoPoints *new_GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self = [GeogebraCommonKernelAlgosAlgoCircleTwoPoints alloc];
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, M, P);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, M, P);
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setIncidence(self);
}

GeogebraCommonKernelAlgosAlgoCircleTwoPoints *new_GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *M, GeogebraCommonKernelGeosGeoPoint *P) {
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self = [GeogebraCommonKernelAlgosAlgoCircleTwoPoints alloc];
  GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, M, P);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCircleTwoPoints_setIncidence(GeogebraCommonKernelAlgosAlgoCircleTwoPoints *self) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self getP], [GeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:[self getCircle] withBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCircleTwoPoints)
