//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoLeftRightSide.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoLeftRightSide.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"

@interface GeogebraCommonKernelAdvancedAlgoLeftRightSide () {
 @public
  GeogebraCommonKernelGeosGeoElement *equation_;
  GeogebraCommonKernelGeosGeoFunctionNVar *side_;
  jboolean left_;
  IOSObjectArray *fv_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoLeftRightSide, equation_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoLeftRightSide, side_, GeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoLeftRightSide, fv_, IOSObjectArray *)

@implementation GeogebraCommonKernelAdvancedAlgoLeftRightSide

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)equation
                                             withBoolean:(jboolean)left {
  GeogebraCommonKernelAdvancedAlgoLeftRightSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, equation, left);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:side_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ equation_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(equation_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(side_)) setUndefined];
    return;
  }
  NSString *str = [equation_ toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()];
  IOSObjectArray *sides = [((NSString *) nil_chk(str)) split:@"="];
  NSString *sideStr = left_ ? IOSObjectArray_Get(nil_chk(sides), 0) : IOSObjectArray_Get(nil_chk(sides), 1);
  GeogebraCommonKernelGeosGeoFunctionNVar *processed = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToFunctionNVarWithNSString:sideStr withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(side_)) setWithGeogebraCommonKernelGeosGeoElement:processed];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return left_ ? GeogebraCommonKernelCommandsCommandsEnum_get_LeftSide() : GeogebraCommonKernelCommandsCommandsEnum_get_RightSide();
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)getResult {
  return side_;
}

- (void)dealloc {
  RELEASE_(equation_);
  RELEASE_(side_);
  RELEASE_(fv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "AlgoLeftRightSide", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "equation_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "side_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "left_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fv_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoLeftRightSide = { 2, "AlgoLeftRightSide", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoLeftRightSide;
}

@end

void GeogebraCommonKernelAdvancedAlgoLeftRightSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelAdvancedAlgoLeftRightSide *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *equation, jboolean left) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoLeftRightSide_set_equation_(self, equation);
  self->left_ = left;
  GeogebraCommonKernelAdvancedAlgoLeftRightSide_setAndConsume_fv_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x") autorelease], [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"y") autorelease] } count:2 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]);
  GeogebraCommonKernelArithmeticFunctionNVar *f = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(self->fv_, 0)) autorelease], self->fv_) autorelease];
  GeogebraCommonKernelAdvancedAlgoLeftRightSide_setAndConsume_side_(self, new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(cons, f));
  [self setInputOutput];
  [self compute];
  [self->side_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoLeftRightSide *new_GeogebraCommonKernelAdvancedAlgoLeftRightSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *equation, jboolean left) {
  GeogebraCommonKernelAdvancedAlgoLeftRightSide *self = [GeogebraCommonKernelAdvancedAlgoLeftRightSide alloc];
  GeogebraCommonKernelAdvancedAlgoLeftRightSide_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, equation, left);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoLeftRightSide)
