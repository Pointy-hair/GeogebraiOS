//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdDensityPlot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDensityPlot.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CmdDensityPlot.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Double.h"

@interface GeogebraCommonKernelCommandsCmdDensityPlot () {
 @public
  jdouble lowX_;
  jdouble highX_;
  jdouble lowY_;
  jdouble highY_;
  IOSObjectArray *args_;
}

- (void)controlWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCommandsCmdDensityPlot, args_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelCommandsCmdDensityPlot_controlWithGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCmdDensityPlot *self, GeogebraCommonKernelArithmeticCommand *c);

@implementation GeogebraCommonKernelCommandsCmdDensityPlot

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdDensityPlot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    GeogebraCommonKernelAlgosAlgoDensityPlot *algo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      GeogebraCommonKernelCommandsCmdDensityPlot_set_args_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args_), 0))) isGeoFunctionNVar] || [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(args_, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class])))) getVarNumber] != 2) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args_, 0)];
      }
      algo = [new_GeogebraCommonKernelAlgosAlgoDensityPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(args_, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class])) autorelease];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 5:
      GeogebraCommonKernelCommandsCmdDensityPlot_controlWithGeogebraCommonKernelArithmeticCommand_(self, c);
      algo = [new_GeogebraCommonKernelAlgosAlgoDensityPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(cons_, (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]), lowX_, highX_, lowY_, highY_, YES) autorelease];
      ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [algo getResult]);
      return ret;
      case 6:
      GeogebraCommonKernelCommandsCmdDensityPlot_controlWithGeogebraCommonKernelArithmeticCommand_(self, c);
      algo = [new_GeogebraCommonKernelAlgosAlgoDensityPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunctionNVar_withDouble_withDouble_withDouble_withDouble_withBoolean_(cons_, (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(nil_chk(args_), 0), [GeogebraCommonKernelGeosGeoFunctionNVar class]), lowX_, highX_, lowY_, highY_, [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(args_, 5), [GeogebraCommonKernelGeosGeoBoolean class])))) getBoolean]) autorelease];
      ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      IOSObjectArray_Set(ret, 0, [algo getResult]);
      return ret;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (void)controlWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  GeogebraCommonKernelCommandsCmdDensityPlot_controlWithGeogebraCommonKernelArithmeticCommand_(self, c);
}

- (void)dealloc {
  RELEASE_(args_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdDensityPlot", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "controlWithGeogebraCommonKernelArithmeticCommand:", "control", "V", 0x2, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "lowX_", NULL, 0x2, "D", NULL, NULL,  },
    { "highX_", NULL, 0x2, "D", NULL, NULL,  },
    { "lowY_", NULL, 0x2, "D", NULL, NULL,  },
    { "highY_", NULL, 0x2, "D", NULL, NULL,  },
    { "args_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdDensityPlot = { 2, "CmdDensityPlot", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdDensityPlot;
}

@end

void GeogebraCommonKernelCommandsCmdDensityPlot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdDensityPlot *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdDensityPlot *new_GeogebraCommonKernelCommandsCmdDensityPlot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdDensityPlot *self = [GeogebraCommonKernelCommandsCmdDensityPlot alloc];
  GeogebraCommonKernelCommandsCmdDensityPlot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelCommandsCmdDensityPlot_controlWithGeogebraCommonKernelArithmeticCommand_(GeogebraCommonKernelCommandsCmdDensityPlot *self, GeogebraCommonKernelArithmeticCommand *c) {
  GeogebraCommonKernelCommandsCmdDensityPlot_set_args_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->args_), 0))) isGeoFunctionNVar] || [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(self->args_, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class])))) getVarNumber] != 2) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->args_, 0)];
  }
  self->lowX_ = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentWithInt:1])) evaluateDouble];
  self->highX_ = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:2])) evaluateDouble];
  self->lowY_ = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:3])) evaluateDouble];
  self->highY_ = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:4])) evaluateDouble];
  if (JavaLangDouble_isNaNWithDouble_(self->lowX_) || JavaLangDouble_isNaNWithDouble_(self->highX_) || self->lowX_ >= self->highX_) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:1]];
  }
  if (JavaLangDouble_isNaNWithDouble_(self->lowY_) || JavaLangDouble_isNaNWithDouble_(self->highY_) || self->lowY_ >= self->highY_) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:[c getArgumentWithInt:3]];
  }
  if (self->args_->size_ == 6 && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->args_, 5))) isGeoBoolean]) {
    @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->args_, 5)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdDensityPlot)
