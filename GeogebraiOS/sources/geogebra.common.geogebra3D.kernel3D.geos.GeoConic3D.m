//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D () {
 @public
  GeogebraCommonKernelMatrixCoordSys *coordSys_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *euclidianViewForPlane_;
}

- (void)buildValueStringMidpointConicWithBoolean:(jboolean)plusMinusX
                                    withNSString:(NSString *)s1
                                    withNSString:(NSString *)s2
          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                       withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString;

- (void)buildValueStringWithBoolean:(jboolean)plusMinusX
                       withNSString:(NSString *)s1
                       withNSString:(NSString *)s2
                         withDouble:(jdouble)r1
                         withDouble:(jdouble)r2
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
          withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString;

- (void)setSinglePointMatrix;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction;

- (void)updateViewForPlane;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D, coordSys_, GeogebraCommonKernelMatrixCoordSys *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D, euclidianViewForPlane_, GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringMidpointConicWithBoolean_withNSString_withNSString_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, jboolean plusMinusX, NSString *s1, NSString *s2, GeogebraCommonKernelStringTemplate *tpl, JavaLangStringBuilder *sbBuildValueString);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringWithBoolean_withNSString_withNSString_withDouble_withDouble_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, jboolean plusMinusX, NSString *s1, NSString *s2, jdouble r1, jdouble r2, GeogebraCommonKernelStringTemplate *tpl, JavaLangStringBuilder *sbBuildValueString);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointMatrix(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiVal, GeogebraCommonKernelMatrixCoords *center, GeogebraCommonKernelMatrixCoords *direction);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_updateViewForPlane(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                  withGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_(self, c, cs);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_(self, conic);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  return self;
}

- (void)setCoordSysWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_set_coordSys_(self, cs);
}

- (GeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  return coordSys_;
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getNormal];
}

- (GeogebraCommonKernelMatrixCoords *)getEigenvec3DWithInt:(jint)i {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getVectorWithGeogebraCommonKernelMatrixCoords:[super getEigenvecWithInt:i]];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpointND {
  return [self getMidpoint3D];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint3D {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getPointWithGeogebraCommonKernelMatrixCoords:[super getMidpoint2D]];
}

- (GeogebraCommonKernelMatrixCoords *)getDirection3DWithInt:(jint)i {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVectorWithDouble:((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(lines_), i)))->y_ withDouble:-((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(lines_, i)))->x_];
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin3DWithInt:(jint)i {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(startPoints_), i)))->x_ withDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(startPoints_, i)))->y_];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_CONIC3D();
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_init() autorelease];
  switch ([self getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    GeogebraCommonKernelGeosGeoFunction_initStringBuilderWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_withNSString_withNSString_withBoolean_withBoolean_(sbToString, tpl, label_, @"t", [self isLabelSet], NO);
    break;
    default:
    [sbToString setLengthWithInt:0];
    [sbToString appendWithNSString:label_];
    [sbToString appendWithNSString:@": "];
    break;
  }
  [sbToString appendWithJavaLangCharSequence:[self buildValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString description];
}

- (jboolean)hasValueStringChangeableRegardingView {
  return YES;
}

- (void)buildValueStringMidpointConicWithBoolean:(jboolean)plusMinusX
                                    withNSString:(NSString *)s1
                                    withNSString:(NSString *)s2
          withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                       withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringMidpointConicWithBoolean_withNSString_withNSString_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, plusMinusX, s1, s2, tpl, sbBuildValueString);
}

- (void)buildValueStringWithBoolean:(jboolean)plusMinusX
                       withNSString:(NSString *)s1
                       withNSString:(NSString *)s2
                         withDouble:(jdouble)r1
                         withDouble:(jdouble)r2
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
          withJavaLangStringBuilder:(JavaLangStringBuilder *)sbBuildValueString {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringWithBoolean_withNSString_withNSString_withDouble_withDouble_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, plusMinusX, s1, s2, r1, r2, tpl, sbBuildValueString);
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbBuildValueString = [new_JavaLangStringBuilder_init() autorelease];
  if (![self isDefined]) {
    [sbBuildValueString appendWithNSString:@"?"];
    return sbBuildValueString;
  }
  {
    GeogebraCommonKernelMatrixCoords *center;
    GeogebraCommonKernelMatrixCoords *d1;
    GeogebraCommonKernelMatrixCoords *d2;
    GeogebraCommonKernelMatrixCoords *e1;
    GeogebraCommonKernelMatrixCoords *e2;
    GeogebraCommonKernelMatrixCoords *c1;
    GeogebraCommonKernelMatrixCoords *c2;
    GeogebraCommonKernelMatrixCoords *d;
    switch ([self getType]) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringMidpointConicWithBoolean_withNSString_withNSString_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, NO, @"cos(t)", @"sin(t)", tpl, sbBuildValueString);
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringMidpointConicWithBoolean_withNSString_withNSString_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, YES, @"cosh(t)", @"sinh(t)", tpl, sbBuildValueString);
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringWithBoolean_withNSString_withNSString_withDouble_withDouble_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, NO, @"t\u00b2", @"t", linearEccentricity_, 2 * linearEccentricity_, tpl, sbBuildValueString);
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      center = [self getMidpoint3D];
      GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [((GeogebraCommonKernelMatrixCoords *) nil_chk(center)) getX], [center getY], [center getZ], sbBuildValueString);
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      center = [self getMidpoint3D];
      d1 = [self getDirection3DWithInt:0];
      d2 = [self getDirection3DWithInt:1];
      e1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(d1)) addWithGeogebraCommonKernelMatrixCoords:d2])) mulWithDouble:0.5];
      e2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(d2)) subWithGeogebraCommonKernelMatrixCoords:d1])) mulWithDouble:0.5];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(e2)) checkReverseForFirstValuePositive];
      [sbBuildValueString appendWithNSString:@"X = ("];
      [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(center)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[center getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[center getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@") + "];
      [sbBuildValueString appendWithChar:GeogebraCommonUtilUnicode_lambda];
      [sbBuildValueString appendWithNSString:@" ("];
      [kernel_ appendTwoCoeffsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(e1)) getX] withDouble:[e2 getX] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@", "];
      [kernel_ appendTwoCoeffsWithDouble:[e1 getY] withDouble:[e2 getY] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@", "];
      [kernel_ appendTwoCoeffsWithDouble:[e1 getZ] withDouble:[e2 getZ] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@")"];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      c1 = [self getOrigin3DWithInt:0];
      c2 = [self getOrigin3DWithInt:1];
      d = [self getDirection3DWithInt:0];
      e1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(c1)) addWithGeogebraCommonKernelMatrixCoords:c2])) mulWithDouble:0.5];
      e2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(c2)) subWithGeogebraCommonKernelMatrixCoords:c1])) mulWithDouble:0.5];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(e2)) checkReverseForFirstValuePositive];
      [sbBuildValueString appendWithNSString:@"X = ("];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) appendTwoCoeffsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(e1)) getX] withDouble:[e2 getX] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@", "];
      [kernel_ appendTwoCoeffsWithDouble:[e1 getY] withDouble:[e2 getY] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@", "];
      [kernel_ appendTwoCoeffsWithDouble:[e1 getZ] withDouble:[e2 getZ] withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
      [sbBuildValueString appendWithNSString:@") + "];
      [sbBuildValueString appendWithChar:GeogebraCommonUtilUnicode_lambda];
      [sbBuildValueString appendWithNSString:@" ("];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[d getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[d getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@")"];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      center = [self getMidpoint3D];
      d = [self getDirection3DWithInt:0];
      [sbBuildValueString appendWithNSString:@"X = ("];
      [sbBuildValueString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(center)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[center getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[center getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@") + "];
      [sbBuildValueString appendWithChar:GeogebraCommonUtilUnicode_lambda];
      [sbBuildValueString appendWithNSString:@" ("];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[d getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@", "];
      [sbBuildValueString appendWithNSString:[kernel_ formatWithDouble:[d getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueString appendWithNSString:@")"];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      [sbBuildValueString appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"]];
      break;
      default:
      [sbBuildValueString appendWithNSString:@"todo-GeoConic3D"];
      break;
    }
  }
  return sbBuildValueString;
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                 withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
}

- (void)setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)m {
  [self setMidpointWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(m)) getInhomCoordsInD3]]), 1))) get]];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointMatrix(self);
  [self singlePoint];
}

- (void)setSinglePointMatrix {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointMatrix(self);
}

+ (void)setSinglePointWithGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)conic
                                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)m {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointWithGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_withGeogebraCommonKernelMatrixCoords_(conic, m);
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_(self) autorelease];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]]) {
    [super setWithGeogebraCommonKernelGeosGeoElement:geo];
    if (coordSys_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setAndConsume_coordSys_(self, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
    [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) setWithGeogebraCommonKernelMatrixCoordSys:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])))) getCoordSys]];
    [self setIsEndOfQuadricWithBoolean:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])))) isEndOfQuadric]];
  }
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x2d
                                              withDouble:(jdouble)y2d {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:x2d withDouble:y2d];
}

- (IOSObjectArray *)getNormalProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:coords];
}

- (IOSObjectArray *)getProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:willingDirection withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (jboolean)isIntersection {
  return isIntersection_;
}

- (void)doTranslateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) translateWithGeogebraCommonKernelMatrixCoords:v];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  IOSDoubleArray *ret = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
  [super matrixTransformWithDouble:IOSDoubleArray_Get(nil_chk(ret), 0) withDouble:IOSDoubleArray_Get(ret, 1) withDouble:0 withDouble:IOSDoubleArray_Get(ret, 2)];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:a02];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:a12];
  [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:a20];
  [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:a21];
  [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:a22];
  IOSDoubleArray *ret = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
  [super matrixTransformWithDouble:IOSDoubleArray_Get(nil_chk(ret), 0) withDouble:IOSDoubleArray_Get(ret, 1) withDouble:0 withDouble:IOSDoubleArray_Get(ret, 2)];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_O_()];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordSys_)) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getInhomCoordsInD3]];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q)) getInhomCoordsInD3], [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords], [line getDirectionInD3]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiVal, center, direction);
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return nil;
    default:
    return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVz];
  }
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) translateWithGeogebraCommonKernelMatrixCoords:v];
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *point = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *direction = [((GeogebraCommonKernelMatrixCoords *) nil_chk([line getDirectionInD3])) normalized];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:direction];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) mirrorWithGeogebraCommonKernelMatrixCoordSys:[((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys]];
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) dilateWithDouble:r withGeogebraCommonKernelMatrixCoords:S];
  if (r < 0) {
    r = -r;
  }
  [self dilateWithDouble:r];
}

- (void)createView2D {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_set_euclidianViewForPlane_(self, (GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast([((GeogebraCommonMainAppCompanion *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getCompanion])) createEuclidianViewForPlaneWithGeogebraCommonKernelKernelNDViewCreator:self withBoolean:YES], [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
  [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) setTransformRegardingView];
}

- (void)removeView2D {
  [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) doRemove];
}

- (void)doRemove {
  if (euclidianViewForPlane_ != nil) {
    [self removeView2D];
  }
  [super doRemove];
}

- (jboolean)hasView2DVisible {
  return euclidianViewForPlane_ != nil && [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) showViewWithInt:[euclidianViewForPlane_ getId]];
}

- (void)setView2DVisibleWithBoolean:(jboolean)flag {
  if (euclidianViewForPlane_ == nil) {
    if (flag) [self createView2D];
    return;
  }
  [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getGuiManager])) setShowViewWithBoolean:flag withInt:[((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(euclidianViewForPlane_)) getId]];
}

- (void)update {
  [super update];
  if (euclidianViewForPlane_ != nil) {
    [euclidianViewForPlane_ updateMatrix];
    GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_updateViewForPlane(self);
  }
}

- (void)updateViewForPlane {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_updateViewForPlane(self);
}

- (void)setEuclidianViewForPlaneWithGeogebraCommonEuclidianEuclidianViewCompanion:(GeogebraCommonEuclidianEuclidianViewCompanion *)view {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_set_euclidianViewForPlane_(self, (GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) check_class_cast(view, [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion class]));
}

- (void)dealloc {
  RELEASE_(coordSys_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(euclidianViewForPlane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelMatrixCoordSys:", "GeoConic3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoConicND:", "GeoConic3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoConic3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoConic3D", NULL, 0x1, NULL, NULL },
    { "setCoordSysWithGeogebraCommonKernelMatrixCoordSys:", "setCoordSys", "V", 0x1, NULL, NULL },
    { "getCoordSys", NULL, "Lgeogebra.common.kernel.Matrix.CoordSys;", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEigenvec3DWithInt:", "getEigenvec3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpointND", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpoint3D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getDirection3DWithInt:", "getDirection3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getOrigin3DWithInt:", "getOrigin3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "hasValueStringChangeableRegardingView", NULL, "Z", 0x1, NULL, NULL },
    { "buildValueStringMidpointConicWithBoolean:withNSString:withNSString:withGeogebraCommonKernelStringTemplate:withJavaLangStringBuilder:", "buildValueStringMidpointConic", "V", 0x2, NULL, NULL },
    { "buildValueStringWithBoolean:withNSString:withNSString:withDouble:withDouble:withGeogebraCommonKernelStringTemplate:withJavaLangStringBuilder:", "buildValueString", "V", 0x2, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSinglePointWithGeogebraCommonKernelKernelNDGeoPointND:", "setSinglePoint", "V", 0x1, NULL, NULL },
    { "setSinglePointMatrix", NULL, "V", 0x2, NULL, NULL },
    { "setSinglePointWithGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:withGeogebraCommonKernelMatrixCoords:", "setSinglePoint", "V", 0x19, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormalProjectionWithGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "doTranslateWithGeogebraCommonKernelMatrixCoords:", "doTranslate", "V", 0x4, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x12, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "createView2D", NULL, "V", 0x1, NULL, NULL },
    { "removeView2D", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "hasView2DVisible", NULL, "Z", 0x1, NULL, NULL },
    { "setView2DVisibleWithBoolean:", "setView2DVisible", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "updateViewForPlane", NULL, "V", 0x2, NULL, NULL },
    { "setEuclidianViewForPlaneWithGeogebraCommonEuclidianEuclidianViewCompanion:", "setEuclidianViewForPlane", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coordSys_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "euclidianViewForPlane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidianForPlane.EuclidianViewForPlaneCompanion;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D = { 2, "GeoConic3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 54, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelMatrixCoordSys *cs) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setCoordSysWithGeogebraCommonKernelMatrixCoordSys:cs];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelMatrixCoordSys *cs) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoordSys_(self, c, cs);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getConstruction]);
  [self setWithGeogebraCommonKernelGeosGeoElement:conic];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelKernelNDGeoConicND_(self, conic);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, GeogebraCommonKernelConstruction *c, jboolean isIntersection) {
  GeogebraCommonKernelKernelNDGeoConicND_initWithGeogebraCommonKernelConstruction_withInt_withBoolean_(self, c, 2, isIntersection);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *c, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringMidpointConicWithBoolean_withNSString_withNSString_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, jboolean plusMinusX, NSString *s1, NSString *s2, GeogebraCommonKernelStringTemplate *tpl, JavaLangStringBuilder *sbBuildValueString) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringWithBoolean_withNSString_withNSString_withDouble_withDouble_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(self, plusMinusX, s1, s2, [self getHalfAxisWithInt:0], [self getHalfAxisWithInt:1], tpl, sbBuildValueString);
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_buildValueStringWithBoolean_withNSString_withNSString_withDouble_withDouble_withGeogebraCommonKernelStringTemplate_withJavaLangStringBuilder_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, jboolean plusMinusX, NSString *s1, NSString *s2, jdouble r1, jdouble r2, GeogebraCommonKernelStringTemplate *tpl, JavaLangStringBuilder *sbBuildValueString) {
  GeogebraCommonKernelMatrixCoords *center = [self getMidpoint3D];
  GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(self->kernel_, tpl, [((GeogebraCommonKernelMatrixCoords *) nil_chk(center)) getX], [center getY], [center getZ], sbBuildValueString);
  GeogebraCommonKernelMatrixCoords *ev1 = [self getEigenvec3DWithInt:0];
  GeogebraCommonKernelMatrixCoords *ev2 = [self getEigenvec3DWithInt:1];
  NSString *separator = GeogebraCommonKernelGeosGeoPoint_buildValueStringSeparatorWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_(self->kernel_, tpl);
  [((JavaLangStringBuilder *) nil_chk(sbBuildValueString)) appendWithNSString:@" + ("];
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) appendTwoCoeffsWithBoolean:plusMinusX withDouble:r1 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1)) getX] withDouble:r2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(ev2)) getX] withNSString:s1 withNSString:s2 withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
  [sbBuildValueString appendWithNSString:separator];
  [sbBuildValueString appendWithNSString:@" "];
  [self->kernel_ appendTwoCoeffsWithBoolean:plusMinusX withDouble:r1 * [ev1 getY] withDouble:r2 * [ev2 getY] withNSString:s1 withNSString:s2 withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
  [sbBuildValueString appendWithNSString:separator];
  [sbBuildValueString appendWithNSString:@" "];
  [self->kernel_ appendTwoCoeffsWithBoolean:plusMinusX withDouble:r1 * [ev1 getZ] withDouble:r2 * [ev2 getZ] withNSString:s1 withNSString:s2 withGeogebraCommonKernelStringTemplate:tpl withJavaLangStringBuilder:sbBuildValueString];
  [sbBuildValueString appendWithChar:')'];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointMatrix(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self) {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->matrix_))->size_; i++) *IOSDoubleArray_GetRef(self->matrix_, i) = 0;
  for (jint i = 0; i < 3; i++) *IOSDoubleArray_GetRef(self->matrix_, i) = 1.0;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointWithGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *conic, GeogebraCommonKernelMatrixCoords *m) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initialize();
  GeogebraCommonKernelMatrixCoordSys *cs = [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(conic)) getCoordSys];
  if (cs == nil) {
    cs = [new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2) autorelease];
    [conic setCoordSysWithGeogebraCommonKernelMatrixCoordSys:cs];
  }
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) resetCoordSys];
  [cs addPointWithGeogebraCommonKernelMatrixCoords:m];
  [cs completeCoordSys2D];
  [cs makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  [conic setMidpointWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0 } count:2]];
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointMatrix(conic);
  [conic singlePoint];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiVal, GeogebraCommonKernelMatrixCoords *center, GeogebraCommonKernelMatrixCoords *direction) {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(self->coordSys_)) rotateWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble] withGeogebraCommonKernelMatrixCoords:center withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) normalized]];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_updateViewForPlane(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *self) {
  [((GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *) nil_chk(self->euclidianViewForPlane_)) updateAllDrawablesWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D)
