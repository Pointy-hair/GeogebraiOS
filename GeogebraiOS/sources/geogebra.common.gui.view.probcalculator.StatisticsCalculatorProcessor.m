//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/probcalculator/StatisticsCalculatorProcessor.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/probcalculator/StatisticsCalculator.h"
#include "geogebra/common/gui/view/probcalculator/StatisticsCalculatorProcessor.h"
#include "geogebra/common/gui/view/probcalculator/StatisticsCollection.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoTMean2Estimate.h"
#include "geogebra/common/kernel/statistics/AlgoTMeanEstimate.h"
#include "geogebra/common/kernel/statistics/AlgoTTest.h"
#include "geogebra/common/kernel/statistics/AlgoTTest2.h"
#include "geogebra/common/kernel/statistics/AlgoZMean2Estimate.h"
#include "geogebra/common/kernel/statistics/AlgoZMean2Test.h"
#include "geogebra/common/kernel/statistics/AlgoZMeanEstimate.h"
#include "geogebra/common/kernel/statistics/AlgoZMeanTest.h"
#include "geogebra/common/kernel/statistics/AlgoZProportion2Estimate.h"
#include "geogebra/common/kernel/statistics/AlgoZProportion2Test.h"
#include "geogebra/common/kernel/statistics/AlgoZProportionEstimate.h"
#include "geogebra/common/kernel/statistics/AlgoZProportionTest.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistribution.h"
#include "org/apache/commons/math/distribution/ChiSquaredDistributionImpl.h"

@interface GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonKernelConstruction *cons_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc_;
  GeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc_;
  GeogebraCommonKernelGeosGeoNumeric *n_, *n2_, *mean_, *mean2_, *sd_, *sd2_, *proportion_, *proportion2_, *nullHyp_, *level_;
  GeogebraCommonKernelGeosGeoText *tail_;
  GeogebraCommonKernelGeosGeoBoolean *pooled_;
  JavaUtilArrayList *geos_;
  id<OrgApacheCommonsMathDistributionChiSquaredDistribution> chisquared_;
}

- (void)createGeos;

- (void)updateGeoValues;

- (void)setT2Stats;

- (void)updateChiSq;

- (void)updateGOF;

- (id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)getChiSquaredDistributionWithDouble:(jdouble)df;

- (jdouble)parseStringDataWithNSString:(NSString *)s;

- (void)setTestResultsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result;

- (void)setIntervalResultsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, statCalc_, GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sc_, GeogebraCommonGuiViewProbcalculatorStatisticsCollection *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, n2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, mean_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, mean2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sd_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, sd2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, proportion_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, proportion2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, nullHyp_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, level_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, tail_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, pooled_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, geos_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor, chisquared_, id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self);

__attribute__((unused)) static id<OrgApacheCommonsMathDistributionChiSquaredDistribution> GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, jdouble df);

__attribute__((unused)) static jdouble GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, NSString *s);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, GeogebraCommonKernelGeosGeoElement *result);

__attribute__((unused)) static void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, GeogebraCommonKernelGeosGeoElement *result);

@implementation GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator:(GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *)statCalc
withGeogebraCommonGuiViewProbcalculatorStatisticsCollection:(GeogebraCommonGuiViewProbcalculatorStatisticsCollection *)sc {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(self, app, statCalc, sc);
  return self;
}

- (void)createGeos {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(self);
}

- (void)updateGeoValues {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(self);
}

- (void)doCalculate {
  GeogebraCommonKernelAlgosAlgoElement *algo;
  IOSObjectArray *result;
  GeogebraCommonKernelGeosGeoList *list;
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(self);
  switch ([[((GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *) nil_chk(statCalc_)) getSelectedProcedure] ordinal]) {
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZMeanTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, nullHyp_, tail_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZMeanEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, level_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((GeogebraCommonKernelStatisticsAlgoZMeanEstimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZMeanEstimate class])) getME];
    sc_->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, nullHyp_, tail_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    sc_->df_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getDouble] - 1;
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoTMeanEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, level_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((GeogebraCommonKernelStatisticsAlgoTMeanEstimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoTMeanEstimate class])) getME];
    sc_->se_ = sc_->sd_ / JavaLangMath_sqrtWithDouble_(sc_->n_);
    sc_->df_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) getDouble] - 1;
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZMean2Test_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, tail_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((GeogebraCommonKernelStatisticsAlgoZMean2Test *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZMean2Test class])) getSE];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, level_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((GeogebraCommonKernelStatisticsAlgoZMean2Estimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZMean2Estimate class])) getSE];
    sc_->me_ = [((GeogebraCommonKernelStatisticsAlgoZMean2Estimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZMean2Estimate class])) getME];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoTTest2_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoBoolean_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, tail_, pooled_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(cons_, mean_, sd_, n_, mean2_, sd2_, n2_, level_, pooled_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZProportionTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(cons_, proportion_, n_, nullHyp_, tail_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((GeogebraCommonKernelStatisticsAlgoZProportionTest *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportionTest class])) getSE];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, proportion_, n_, level_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((GeogebraCommonKernelStatisticsAlgoZProportionEstimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportionEstimate class])) getSE];
    sc_->me_ = [((GeogebraCommonKernelStatisticsAlgoZProportionEstimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportionEstimate class])) getME];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_TEST:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZProportion2Test_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(cons_, proportion_, n_, proportion2_, n2_, tail_) autorelease];
    [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->se_ = [((GeogebraCommonKernelStatisticsAlgoZProportion2Test *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportion2Test class])) getSE];
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_CI:
    algo = [new_GeogebraCommonKernelStatisticsAlgoZProportion2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(cons_, proportion_, n_, proportion2_, n2_, level_) autorelease];
    result = [algo getOutput];
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, IOSObjectArray_Get(nil_chk(result), 0));
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(sc_))->me_ = [((GeogebraCommonKernelStatisticsAlgoZProportion2Estimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportion2Estimate class])) getME];
    sc_->se_ = [((GeogebraCommonKernelStatisticsAlgoZProportion2Estimate *) check_class_cast(algo, [GeogebraCommonKernelStatisticsAlgoZProportion2Estimate class])) getSE];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_CHISQ_TEST:
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(self);
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_GOF_TEST:
    GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(self);
    break;
  }
}

- (void)setT2Stats {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(self);
}

- (void)updateChiSq {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(self);
}

- (void)updateGOF {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(self);
}

- (id<OrgApacheCommonsMathDistributionChiSquaredDistribution>)getChiSquaredDistributionWithDouble:(jdouble)df {
  return GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, df);
}

- (jdouble)parseStringDataWithNSString:(NSString *)s {
  return GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, s);
}

- (void)setTestResultsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(self, result);
}

- (void)setIntervalResultsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)result {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(self, result);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(cons_);
  RELEASE_(kernel_);
  RELEASE_(statCalc_);
  RELEASE_(sc_);
  RELEASE_(n_);
  RELEASE_(n2_);
  RELEASE_(mean_);
  RELEASE_(mean2_);
  RELEASE_(sd_);
  RELEASE_(sd2_);
  RELEASE_(proportion_);
  RELEASE_(proportion2_);
  RELEASE_(nullHyp_);
  RELEASE_(level_);
  RELEASE_(tail_);
  RELEASE_(pooled_);
  RELEASE_(geos_);
  RELEASE_(chisquared_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator:withGeogebraCommonGuiViewProbcalculatorStatisticsCollection:", "StatisticsCalculatorProcessor", NULL, 0x1, NULL, NULL },
    { "createGeos", NULL, "V", 0x2, NULL, NULL },
    { "updateGeoValues", NULL, "V", 0x2, NULL, NULL },
    { "doCalculate", NULL, "V", 0x1, NULL, NULL },
    { "setT2Stats", NULL, "V", 0x2, NULL, NULL },
    { "updateChiSq", NULL, "V", 0x2, NULL, NULL },
    { "updateGOF", NULL, "V", 0x2, NULL, NULL },
    { "getChiSquaredDistributionWithDouble:", "getChiSquaredDistribution", "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", 0x2, NULL, NULL },
    { "parseStringDataWithNSString:", "parseStringData", "D", 0x2, NULL, NULL },
    { "setTestResultsWithGeogebraCommonKernelGeosGeoElement:", "setTestResults", "V", 0x2, NULL, NULL },
    { "setIntervalResultsWithGeogebraCommonKernelGeosGeoElement:", "setIntervalResults", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "statCalc_", NULL, 0x2, "Lgeogebra.common.gui.view.probcalculator.StatisticsCalculator;", NULL, NULL,  },
    { "sc_", NULL, 0x2, "Lgeogebra.common.gui.view.probcalculator.StatisticsCollection;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "proportion2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "nullHyp_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "level_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "pooled_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "geos_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "chisquared_", NULL, 0x2, "Lorg.apache.commons.math.distribution.ChiSquaredDistribution;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor = { 2, "StatisticsCalculatorProcessor", "geogebra.common.gui.view.probcalculator", NULL, 0x1, 11, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor;
}

@end

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, GeogebraCommonMainApp *app, GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc, GeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc) {
  NSObject_init(self);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_app_(self, app);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) getConstruction]);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_kernel_(self, [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel]);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_statCalc_(self, statCalc);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_set_sc_(self, sc);
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(self);
}

GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *new_GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(GeogebraCommonMainApp *app, GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *statCalc, GeogebraCommonGuiViewProbcalculatorStatisticsCollection *sc) {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self = [GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor alloc];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewProbcalculatorStatisticsCalculator_withGeogebraCommonGuiViewProbcalculatorStatisticsCollection_(self, app, statCalc, sc);
  return self;
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_createGeos(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_geos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_n_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->n_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_n2_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->n2_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_mean_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->mean_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_mean2_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->mean2_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_sd_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->sd_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_sd2_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->sd2_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_proportion_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->proportion_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_proportion2_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->proportion2_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_nullHyp_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->nullHyp_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_level_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->level_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_tail_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->geos_ addWithId:self->tail_];
  GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_pooled_(self, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self->cons_));
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in self->geos_) {
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:geo];
  }
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGeoValues(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->level_)) setValueWithDouble:((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->level_];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->nullHyp_)) setValueWithDouble:self->sc_->nullHyp_];
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) setTextStringWithNSString:self->sc_->tail_];
  [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) setValueWithBoolean:self->sc_->pooled_];
  switch ([[((GeogebraCommonGuiViewProbcalculatorStatisticsCalculator *) nil_chk(self->statCalc_)) getSelectedProcedure] ordinal]) {
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN_CI:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN_CI:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) setValueWithDouble:self->sc_->mean_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) setValueWithDouble:self->sc_->sd_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZMEAN2_CI:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_TMEAN2_CI:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) setValueWithDouble:self->sc_->mean_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) setValueWithDouble:self->sc_->sd_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean2_)) setValueWithDouble:self->sc_->mean2_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd2_)) setValueWithDouble:self->sc_->sd2_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) setValueWithDouble:self->sc_->n2_];
    [self->pooled_ setValueWithBoolean:self->sc_->pooled_];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP_CI:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) setValueWithDouble:[self->sc_ getProportion]];
    break;
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_TEST:
    case GeogebraCommonGuiViewProbcalculatorStatisticsCalculator_Procedure_ZPROP2_CI:
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) setValueWithDouble:self->sc_->n_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) setValueWithDouble:[self->sc_ getProportion]];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) setValueWithDouble:self->sc_->n2_];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion2_)) setValueWithDouble:[self->sc_ getProportion2]];
    break;
  }
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setT2Stats(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  jdouble N1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  jdouble N2 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n2_)) getDouble];
  jdouble SD1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) getDouble];
  jdouble SD2 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd2_)) getDouble];
  if ([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->pooled_)) getBoolean]) {
    jdouble df = N1 + N2 - 2;
    jdouble pooledVariance = (1 / N1 + 1 / N2) * ((N1 - 1) * SD1 * SD1 + (N2 - 1) * SD2 * SD2) / df;
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->se_ = JavaLangMath_sqrtWithDouble_(pooledVariance);
    self->sc_->df_ = df;
  }
  else {
    jdouble V1 = SD1 * SD1 / N1;
    jdouble V2 = SD2 * SD2 / N2;
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->se_ = JavaLangMath_sqrtWithDouble_(V1 + V2);
    self->sc_->df_ = ((V1 + V2) * (V1 + V2)) / ((V1 * V1) / (N1 - 1) + (V2 * V2) / (N2 - 1));
  }
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateChiSq(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  for (jint j = 0; j < ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->columns_; j++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) = 0;
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) = 0;
  }
  self->sc_->total_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      jdouble value = GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->chiSquareData_), i + 1)), j + 1));
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), j) = value;
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j))) {
        *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
        *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
        self->sc_->total_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j);
      }
    }
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), j) = IOSDoubleArray_Get(nil_chk(self->sc_->rowSum_), i) * IOSDoubleArray_Get(nil_chk(self->sc_->columnSum_), j) / self->sc_->total_;
    }
  }
  self->sc_->testStat_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    for (jint j = 0; j < self->sc_->columns_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->diff_), i)), j) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), j)) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), j)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), j);
      self->sc_->testStat_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->diff_, i)), j);
    }
  }
  self->sc_->df_ = (self->sc_->columns_ - 1) * (self->sc_->rows_ - 1);
  @try {
    jdouble leftArea = [((id<OrgApacheCommonsMathDistributionChiSquaredDistribution>) nil_chk(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, self->sc_->df_))) cumulativeProbabilityWithDouble:self->sc_->testStat_];
    self->sc_->P_ = 1 - leftArea;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_updateGOF(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self) {
  for (jint j = 0; j < ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->columns_; j++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), j) = 0;
  }
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(self->sc_->rowSum_), i) = 0;
  }
  self->sc_->total_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    jdouble value = GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->chiSquareData_), i + 1)), 1));
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), 0) = value;
    value = GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(self, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->chiSquareData_, i + 1)), 2));
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), 0) = value;
    if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0))) {
      *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), 0) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0);
    }
    if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 1))) {
      *IOSDoubleArray_GetRef(nil_chk(self->sc_->columnSum_), 1) += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0);
    }
  }
  self->sc_->testStat_ = 0;
  for (jint i = 0; i < self->sc_->rows_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->diff_), i)), 0) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->observed_), i)), 0) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->sc_->expected_), i)), 0)) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->observed_, i)), 0) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0)) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->expected_, i)), 0);
    self->sc_->testStat_ += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->sc_->diff_, i)), 0);
  }
  self->sc_->df_ = self->sc_->rows_ - 1;
  @try {
    jdouble leftArea = [((id<OrgApacheCommonsMathDistributionChiSquaredDistribution>) nil_chk(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(self, self->sc_->df_))) cumulativeProbabilityWithDouble:self->sc_->testStat_];
    self->sc_->P_ = 1 - leftArea;
  }
  @catch (JavaLangIllegalArgumentException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    self->sc_->P_ = JavaLangDouble_NaN;
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

id<OrgApacheCommonsMathDistributionChiSquaredDistribution> GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_getChiSquaredDistributionWithDouble_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, jdouble df) {
  if (self->chisquared_ == nil || [self->chisquared_ getDegreesOfFreedom] != df) GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setAndConsume_chisquared_(self, new_OrgApacheCommonsMathDistributionChiSquaredDistributionImpl_initWithDouble_(df));
  return self->chisquared_;
}

jdouble GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_parseStringDataWithNSString_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, NSString *s) {
  if (s == nil || ((jint) [s length]) == 0) {
    return JavaLangDouble_NaN;
  }
  @try {
    NSString *inputText = [((NSString *) nil_chk(s)) trim];
    id<GeogebraCommonKernelArithmeticNumberValue> nv;
    nv = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getAlgebraProcessor])) evaluateToNumericWithNSString:inputText withBoolean:NO];
    return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble];
  }
  @catch (JavaLangNumberFormatException *e) {
    [((JavaLangNumberFormatException *) nil_chk(e)) printStackTrace];
  }
  return JavaLangDouble_NaN;
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setTestResultsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, GeogebraCommonKernelGeosGeoElement *result) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(result)) isDefined] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) size] > 0) {
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->P_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->testStat_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) getWithInt:1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  else {
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->P_ = JavaLangDouble_NaN;
    self->sc_->testStat_ = JavaLangDouble_NaN;
  }
}

void GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor_setIntervalResultsWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor *self, GeogebraCommonKernelGeosGeoElement *result) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(result)) isDefined] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) size] > 0) {
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->lower_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->upper_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) check_class_cast(result, [GeogebraCommonKernelGeosGeoList class])) getWithInt:1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    self->sc_->me_ = (self->sc_->upper_ - self->sc_->lower_) / 2;
  }
  else {
    ((GeogebraCommonGuiViewProbcalculatorStatisticsCollection *) nil_chk(self->sc_))->lower_ = JavaLangDouble_NaN;
    self->sc_->upper_ = JavaLangDouble_NaN;
    self->sc_->me_ = JavaLangDouble_NaN;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewProbcalculatorStatisticsCalculatorProcessor)
