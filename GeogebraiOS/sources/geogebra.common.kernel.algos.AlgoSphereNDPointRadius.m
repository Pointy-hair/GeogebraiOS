//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSphereNDPointRadius.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSphereNDPointRadius.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface GeogebraCommonKernelAlgosAlgoSphereNDPointRadius () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> M_;
  id<GeogebraCommonKernelArithmeticNumberValue> r_;
  GeogebraCommonKernelGeosGeoElement *rgeo_;
  GeogebraCommonKernelKernelNDGeoQuadricND *sphereND_;
  jint type_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius, M_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius, r_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius, rgeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius, sphereND_, GeogebraCommonKernelKernelNDGeoQuadricND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self);

@implementation GeogebraCommonKernelAlgosAlgoSphereNDPointRadius

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, M, r);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
            withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment
                                             withBoolean:(jboolean)dummy {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_withBoolean_(self, cons, label, M, segment, dummy);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
            withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)rgeo {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, M, rgeo);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)createSphereNDWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(M_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, rgeo_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:sphereND_];
  [self setDependencies];
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)getSphereND {
  return sphereND_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getM {
  return M_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getCenter {
  return [self getM];
}

- (GeogebraCommonKernelGeosGeoElement *)getRGeo {
  return rgeo_;
}

- (GeogebraCommonKernelGeosGeoElement *)getRadiusGeo {
  return [self getRGeo];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

- (jint)getType {
  return self->type_;
}

- (void)setRadiusWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)newRadius {
  if (type_ == GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS) {
    GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_r_(self, newRadius);
    GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(newRadius)) toGeoElement]);
    IOSObjectArray_Set(nil_chk(self->input_), 1, rgeo_);
    [self update];
  }
}

- (void)dealloc {
  RELEASE_(M_);
  RELEASE_(r_);
  RELEASE_(rgeo_);
  RELEASE_(sphereND_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:withBoolean:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoSphereNDPointRadius", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "AlgoSphereNDPointRadius", NULL, 0x4, NULL, NULL },
    { "createSphereNDWithGeogebraCommonKernelConstruction:", "createSphereND", "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x404, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSphereND", NULL, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x1, NULL, NULL },
    { "getM", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getCenter", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getRGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getRadiusGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getType", NULL, "I", 0x4, NULL, NULL },
    { "setRadiusWithGeogebraCommonKernelArithmeticNumberValue:", "setRadius", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "M_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "r_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "rgeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "sphereND_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "TYPE_RADIUS_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS },
    { "TYPE_SEGMENT_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSphereNDPointRadius = { 2, "AlgoSphereNDPointRadius", "geogebra.common.kernel.algos", NULL, 0x401, 14, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSphereNDPointRadius;
}

@end

void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, M, r);
  [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_withBoolean_(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment, jboolean dummy) {
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, M, segment);
  [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS;
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_M_(self, M);
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_r_(self, r);
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(r)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_sphereND_(self, [self createSphereNDWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelKernelNDGeoSegmentND> rgeo) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->type_ = GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT;
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_M_(self, M);
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_rgeo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(rgeo, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_set_sphereND_(self, [self createSphereNDWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(self);
}

void GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_compute(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius *self) {
  switch (self->type_) {
    case GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_RADIUS:
    [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:self->M_ withDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->r_)) getDouble]];
    break;
    case GeogebraCommonKernelAlgosAlgoSphereNDPointRadius_TYPE_SEGMENT:
    [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:self->M_ withGeogebraCommonKernelKernelNDGeoSegmentND:(GeogebraCommonKernelGeosGeoSegment *) check_class_cast(self->rgeo_, [GeogebraCommonKernelGeosGeoSegment class])];
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSphereNDPointRadius)
