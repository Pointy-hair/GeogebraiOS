//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdApplyMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/advanced/CmdApplyMatrix.h"
#include "geogebra/common/kernel/advanced/TransformApplyMatrix.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelAdvancedCmdApplyMatrix ()

- (IOSObjectArray *)ApplyMatrixWithNSString:(NSString *)label
     withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
        withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)matrix;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelAdvancedCmdApplyMatrix_ApplyMatrixWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedCmdApplyMatrix *self, NSString *label, GeogebraCommonKernelGeosGeoElement *Q, GeogebraCommonKernelGeosGeoList *matrix);

@implementation GeogebraCommonKernelAdvancedCmdApplyMatrix

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdApplyMatrix_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  NSString *label = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel];
  jint n = [c getArgumentNumber];
  IOSObjectArray *arg;
  IOSObjectArray *ret;
  switch (n) {
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList]) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isMatrixTransformable] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunction] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolygon] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPolyLine] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoList]) {
        ret = GeogebraCommonKernelAdvancedCmdApplyMatrix_ApplyMatrixWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, label, IOSObjectArray_Get(arg, 1), (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]));
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (IOSObjectArray *)ApplyMatrixWithNSString:(NSString *)label
     withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
        withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)matrix {
  return GeogebraCommonKernelAdvancedCmdApplyMatrix_ApplyMatrixWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(self, label, Q, matrix);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdApplyMatrix", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "ApplyMatrixWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoList:", "ApplyMatrix", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdApplyMatrix = { 2, "CmdApplyMatrix", "geogebra.common.kernel.advanced", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdApplyMatrix;
}

@end

void GeogebraCommonKernelAdvancedCmdApplyMatrix_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdApplyMatrix *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdApplyMatrix *new_GeogebraCommonKernelAdvancedCmdApplyMatrix_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdApplyMatrix *self = [GeogebraCommonKernelAdvancedCmdApplyMatrix alloc];
  GeogebraCommonKernelAdvancedCmdApplyMatrix_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelAdvancedCmdApplyMatrix_ApplyMatrixWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedCmdApplyMatrix *self, NSString *label, GeogebraCommonKernelGeosGeoElement *Q, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelTransform *t = [new_GeogebraCommonKernelAdvancedTransformApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, matrix) autorelease];
  return [t transformWithGeogebraCommonKernelGeosGeoElement:Q withNSString:label];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdApplyMatrix)
