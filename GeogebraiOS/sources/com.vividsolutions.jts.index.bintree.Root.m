//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/index/bintree/Root.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/bintree/Interval.h"
#include "com/vividsolutions/jts/index/bintree/Node.h"
#include "com/vividsolutions/jts/index/bintree/NodeBase.h"
#include "com/vividsolutions/jts/index/bintree/Root.h"
#include "com/vividsolutions/jts/index/quadtree/IntervalSize.h"
#include "com/vividsolutions/jts/util/Assert.h"

#define ComVividsolutionsJtsIndexBintreeRoot_origin 0.0

@interface ComVividsolutionsJtsIndexBintreeRoot ()

- (void)insertContainedWithComVividsolutionsJtsIndexBintreeNode:(ComVividsolutionsJtsIndexBintreeNode *)tree
                   withComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)itemInterval
                                                         withId:(id)item;

@end

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsIndexBintreeRoot, origin, jdouble)

__attribute__((unused)) static void ComVividsolutionsJtsIndexBintreeRoot_insertContainedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_withId_(ComVividsolutionsJtsIndexBintreeRoot *self, ComVividsolutionsJtsIndexBintreeNode *tree, ComVividsolutionsJtsIndexBintreeInterval *itemInterval, id item);

@implementation ComVividsolutionsJtsIndexBintreeRoot

- (instancetype)init {
  ComVividsolutionsJtsIndexBintreeRoot_init(self);
  return self;
}

- (void)insertWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)itemInterval
                                                    withId:(id)item {
  jint index = ComVividsolutionsJtsIndexBintreeNodeBase_getSubnodeIndexWithComVividsolutionsJtsIndexBintreeInterval_withDouble_(itemInterval, ComVividsolutionsJtsIndexBintreeRoot_origin);
  if (index == -1) {
    [self addWithId:item];
    return;
  }
  ComVividsolutionsJtsIndexBintreeNode *node = IOSObjectArray_Get(nil_chk(subnode_), index);
  if (node == nil || ![((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk([node getInterval])) containsWithComVividsolutionsJtsIndexBintreeInterval:itemInterval]) {
    ComVividsolutionsJtsIndexBintreeNode *largerNode = ComVividsolutionsJtsIndexBintreeNode_createExpandedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_(node, itemInterval);
    IOSObjectArray_Set(subnode_, index, largerNode);
  }
  ComVividsolutionsJtsIndexBintreeRoot_insertContainedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_withId_(self, IOSObjectArray_Get(subnode_, index), itemInterval, item);
}

- (void)insertContainedWithComVividsolutionsJtsIndexBintreeNode:(ComVividsolutionsJtsIndexBintreeNode *)tree
                   withComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)itemInterval
                                                         withId:(id)item {
  ComVividsolutionsJtsIndexBintreeRoot_insertContainedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_withId_(self, tree, itemInterval, item);
}

- (jboolean)isSearchMatchWithComVividsolutionsJtsIndexBintreeInterval:(ComVividsolutionsJtsIndexBintreeInterval *)interval {
  return YES;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "Root", NULL, 0x1, NULL, NULL },
    { "insertWithComVividsolutionsJtsIndexBintreeInterval:withId:", "insert", "V", 0x1, NULL, NULL },
    { "insertContainedWithComVividsolutionsJtsIndexBintreeNode:withComVividsolutionsJtsIndexBintreeInterval:withId:", "insertContained", "V", 0x2, NULL, NULL },
    { "isSearchMatchWithComVividsolutionsJtsIndexBintreeInterval:", "isSearchMatch", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = ComVividsolutionsJtsIndexBintreeRoot_origin },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexBintreeRoot = { 2, "Root", "com.vividsolutions.jts.index.bintree", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexBintreeRoot;
}

@end

void ComVividsolutionsJtsIndexBintreeRoot_init(ComVividsolutionsJtsIndexBintreeRoot *self) {
  ComVividsolutionsJtsIndexBintreeNodeBase_init(self);
}

ComVividsolutionsJtsIndexBintreeRoot *new_ComVividsolutionsJtsIndexBintreeRoot_init() {
  ComVividsolutionsJtsIndexBintreeRoot *self = [ComVividsolutionsJtsIndexBintreeRoot alloc];
  ComVividsolutionsJtsIndexBintreeRoot_init(self);
  return self;
}

void ComVividsolutionsJtsIndexBintreeRoot_insertContainedWithComVividsolutionsJtsIndexBintreeNode_withComVividsolutionsJtsIndexBintreeInterval_withId_(ComVividsolutionsJtsIndexBintreeRoot *self, ComVividsolutionsJtsIndexBintreeNode *tree, ComVividsolutionsJtsIndexBintreeInterval *itemInterval, id item) {
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_([((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk([((ComVividsolutionsJtsIndexBintreeNode *) nil_chk(tree)) getInterval])) containsWithComVividsolutionsJtsIndexBintreeInterval:itemInterval]);
  jboolean isZeroArea = ComVividsolutionsJtsIndexQuadtreeIntervalSize_isZeroWidthWithDouble_withDouble_([((ComVividsolutionsJtsIndexBintreeInterval *) nil_chk(itemInterval)) getMin], [itemInterval getMax]);
  ComVividsolutionsJtsIndexBintreeNodeBase *node;
  if (isZeroArea) node = [tree findWithComVividsolutionsJtsIndexBintreeInterval:itemInterval];
  else node = [tree getNodeWithComVividsolutionsJtsIndexBintreeInterval:itemInterval];
  [((ComVividsolutionsJtsIndexBintreeNodeBase *) nil_chk(node)) addWithId:item];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexBintreeRoot)
