//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/Matrix/CoordSys.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"

@interface GeogebraCommonKernelMatrixCoordSys () {
 @public
  GeogebraCommonKernelMatrixCoordMatrix *matrix_;
  jint dimension_;
  jint madeCoordSys_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *matrixOrthonormal_, *drawingMatrix_;
  GeogebraCommonKernelMatrixCoords *equationVector_;
  GeogebraCommonKernelMatrixCoords *origin_;
  IOSObjectArray *vectors_;
  jint spaceDimension_;
  GeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_, *tmpCoords3_;
  GeogebraCommonKernelMatrixCoordMatrix *tempMatrix3x3_;
}

- (void)checkEquationVectorHasJustOneNegativeCoeff;

- (void)setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vx;

- (void)setDrawingMatrixFromMatrixOrthonormal;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, matrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, matrixOrthonormal_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, drawingMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, equationVector_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, origin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, vectors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, tmpCoords1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, tmpCoords2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, tmpCoords3_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelMatrixCoordSys, tempMatrix3x3_, GeogebraCommonKernelMatrixCoordMatrix *)

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordSys_checkEquationVectorHasJustOneNegativeCoeff(GeogebraCommonKernelMatrixCoordSys *self);

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordSys_setEquationVectorWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelMatrixCoordSys *self, jdouble a, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordSys *self, GeogebraCommonKernelMatrixCoords *vx);

__attribute__((unused)) static void GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(GeogebraCommonKernelMatrixCoordSys *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelMatrixCoordSys)

GeogebraCommonKernelMatrixCoordSys *GeogebraCommonKernelMatrixCoordSys_Identity3D_;

@implementation GeogebraCommonKernelMatrixCoordSys

- (instancetype)initWithInt:(jint)dimension {
  GeogebraCommonKernelMatrixCoordSys_initWithInt_(self, dimension);
  return self;
}

- (void)setWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs {
  [self setOriginWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) getOrigin]];
  for (jint i = 0; i < spaceDimension_; i++) {
    [self setVWithGeogebraCommonKernelMatrixCoords:[cs getVWithInt:i] withInt:i];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithGeogebraCommonKernelMatrixCoordMatrix:cs->matrix_];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setWithGeogebraCommonKernelMatrixCoordMatrix:cs->matrixOrthonormal_];
  if (drawingMatrix_ == nil) GeogebraCommonKernelMatrixCoordSys_setAndConsume_drawingMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) setWithGeogebraCommonKernelMatrixCoordMatrix:cs->drawingMatrix_];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(equationVector_)) setWithGeogebraCommonKernelMatrixCoords:cs->equationVector_];
  madeCoordSys_ = cs->madeCoordSys_;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return matrix_;
}

- (jint)getDimension {
  return dimension_;
}

- (void)setOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(origin_)) setWithGeogebraCommonKernelMatrixCoords:o];
}

- (void)setVxWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setVWithGeogebraCommonKernelMatrixCoords:v withInt:0];
}

- (void)setVyWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setVWithGeogebraCommonKernelMatrixCoords:v withInt:1];
}

- (void)setVzWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [self setVWithGeogebraCommonKernelMatrixCoords:v withInt:2];
}

- (void)setVWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                         withInt:(jint)i {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk(vectors_), i))) setWithGeogebraCommonKernelMatrixCoords:v];
}

- (GeogebraCommonKernelMatrixCoords *)getVWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(vectors_), i);
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin {
  return origin_;
}

- (GeogebraCommonKernelMatrixCoords *)getVx {
  return [self getVWithInt:0];
}

- (GeogebraCommonKernelMatrixCoords *)getVy {
  return [self getVWithInt:1];
}

- (GeogebraCommonKernelMatrixCoords *)getVz {
  return [self getVWithInt:2];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords2D {
  return [self getPointWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2D)) getX] withDouble:[coords2D getY]];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x
                                              withDouble:(jdouble)y {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin])) addWithGeogebraCommonKernelMatrixCoords:[self getVectorWithDouble:x withDouble:y]];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(z)) {
    return [self getVectorWithDouble:x withDouble:y];
  }
  return [self getPointWithDouble:x / z withDouble:y / z];
}

- (GeogebraCommonKernelMatrixCoords *)getPointForDrawingWithDouble:(jdouble)x
                                                        withDouble:(jdouble)y {
  return [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) mulWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x, y, 0, 1) autorelease]];
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)x {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getOrigin])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) mulWithDouble:x]];
}

- (GeogebraCommonKernelMatrixCoords *)getVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords2D {
  return [self getVectorWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2D)) getX] withDouble:[coords2D getY]];
}

- (GeogebraCommonKernelMatrixCoords *)getVectorWithDouble:(jdouble)x
                                               withDouble:(jdouble)y {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getVx])) mulWithDouble:x])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVy])) mulWithDouble:y]];
}

- (GeogebraCommonKernelMatrixCoords *)getNormal {
  return [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getVz];
}

- (IOSObjectArray *)getNormalProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (IOSObjectArray *)getNormalProjectionForDrawingWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:drawingMatrix_ withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (IOSObjectArray *)getProjectionWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:willingDirection withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (IOSObjectArray *)getProjectionThruVIfPossibleWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)willingDirection {
  IOSObjectArray *result = [IOSObjectArray arrayWithObjects:(id[]){ [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease], [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease] } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:willingDirection withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(result, 1)];
  return result;
}

- (void)setMadeCoordSysWithInt:(jint)i {
  madeCoordSys_ = i;
}

- (void)setMadeCoordSys {
  [self setMadeCoordSysWithInt:dimension_];
}

- (void)resetCoordSys {
  [self setMadeCoordSysWithInt:-1];
}

- (jint)getMadeCoordSys {
  return madeCoordSys_;
}

- (void)completeCoordSys2D {
  {
    GeogebraCommonKernelMatrixCoords *vx;
    switch ([self getMadeCoordSys]) {
      case 0:
      [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VX_()];
      [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VY_()];
      break;
      case 1:
      vx = [self getVx];
      if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vx)) getX])) [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, -[vx getZ], [vx getY], 0) autorelease]];
      else [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-[vx getY], [vx getX], 0, 0) autorelease]];
      break;
    }
  }
}

- (jboolean)isMadeCoordSys {
  return [self getMadeCoordSys] == dimension_;
}

- (void)addPointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  if ([self isMadeCoordSys]) return;
  if ([self getMadeCoordSys] == -1) {
    [self setOriginWithGeogebraCommonKernelMatrixCoords:p];
    [self setMadeCoordSysWithInt:0];
  }
  else {
    [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) subWithGeogebraCommonKernelMatrixCoords:[self getOrigin]]];
  }
}

- (void)addVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  if ([self isMadeCoordSys]) {
    return;
  }
  [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:v];
}

- (void)addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  {
    GeogebraCommonKernelMatrixCoords *vn;
    switch ([self getMadeCoordSys]) {
      case 0:
      if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) norm], 0, GeogebraCommonKernelKernel_STANDARD_PRECISION)) {
        [self setVxWithGeogebraCommonKernelMatrixCoords:v];
        [self setMadeCoordSysWithInt:1];
      }
      break;
      case 1:
      vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) crossProductWithGeogebraCommonKernelMatrixCoords:v];
      if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) norm], 0, GeogebraCommonKernelKernel_STANDARD_PRECISION)) {
        [self setVyWithGeogebraCommonKernelMatrixCoords:v];
        [self setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) crossProductWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
        [self setMadeCoordSysWithInt:2];
      }
      break;
    }
  }
}

- (void)makeEquationVector {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(equationVector_)) setWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) crossProductWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
  [equationVector_ setWithInt:4 withDouble:0];
  jdouble d = [equationVector_ dotproductWithGeogebraCommonKernelMatrixCoords:[self getOrigin]];
  [equationVector_ setWithInt:4 withDouble:-d];
  GeogebraCommonKernelMatrixCoordSys_checkEquationVectorHasJustOneNegativeCoeff(self);
}

- (void)checkEquationVectorHasJustOneNegativeCoeff {
  GeogebraCommonKernelMatrixCoordSys_checkEquationVectorHasJustOneNegativeCoeff(self);
}

- (void)setEquationVectorWithDouble:(jdouble)a
                         withDouble:(jdouble)b
                         withDouble:(jdouble)c
                         withDouble:(jdouble)d {
  GeogebraCommonKernelMatrixCoordSys_setEquationVectorWithDouble_withDouble_withDouble_withDouble_(self, a, b, c, d);
}

- (void)setEquationVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)n {
  GeogebraCommonKernelMatrixCoordSys_setEquationVectorWithDouble_withDouble_withDouble_withDouble_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(n)) getX], [n getY], [n getZ], -([n getX] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) getX] + [n getY] * [o getY] + [n getZ] * [o getZ]));
}

- (void)setEquationVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)cA
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)cB
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)cC {
  [self setEquationVectorWithGeogebraCommonKernelMatrixCoords:cA withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(cB)) subWithGeogebraCommonKernelMatrixCoords:cA])) crossProductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(cC)) subWithGeogebraCommonKernelMatrixCoords:cA]]];
}

- (GeogebraCommonKernelMatrixCoords *)getEquationVector {
  return equationVector_;
}

- (void)makeCoordSysWithDoubleArray:(IOSDoubleArray *)vals {
  [self resetCoordSys];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(equationVector_)) setWithDoubleArray:vals];
  GeogebraCommonKernelMatrixCoords *o = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  jboolean originSet = NO;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(vals))->size_ - 1; i++) {
    if (!originSet) if (IOSDoubleArray_Get(vals, i) != 0) {
      [o setWithInt:i + 1 withDouble:-IOSDoubleArray_Get(vals, vals->size_ - 1) / IOSDoubleArray_Get(vals, i)];
      originSet = YES;
    }
  }
  if (!originSet) return;
  [o setWithInt:vals->size_ withDouble:1];
  [self addPointWithGeogebraCommonKernelMatrixCoords:o];
  IOSObjectArray *v = [equationVector_ completeOrthonormal];
  [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), 1)];
  [self addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(v, 0)];
}

- (jboolean)makeOrthoMatrixWithBoolean:(jboolean)projectOrigin
                           withBoolean:(jboolean)firstVectorParallelToXOY {
  if (![self isMadeCoordSys]) {
    if (dimension_ == 1) {
      [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setWithDouble:0];
      if ([self getMadeCoordSys] == 0) [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:[self getOrigin]];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) setWithDouble:0];
    }
    return NO;
  }
  if (dimension_ == 1) {
    GeogebraCommonKernelMatrixCoords *vy = [([new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0, 1, 0 } count:4]) autorelease]) crossProductWithGeogebraCommonKernelMatrixCoords:[self getVx]];
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      [self setVyWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1, 0, 0, 0 } count:4]) autorelease]];
      [self setVzWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 1, 0, 0 } count:4]) autorelease]];
    }
    else {
      [self setVyWithGeogebraCommonKernelMatrixCoords:vy];
      [self setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) crossProductWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
    }
    if (projectOrigin) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_O_())) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
    }
    else {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) setWithGeogebraCommonKernelMatrixCoords:[self getOrigin]];
    }
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setWithGeogebraCommonKernelMatrixCoordsArray:[IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) normalized], [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) normalized], [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) normalized], tmpCoords1_ } count:4 type:GeogebraCommonKernelMatrixCoords_class_()]];
    return YES;
  }
  if (dimension_ == 2) {
    GeogebraCommonKernelMatrixCoords *vx, *vy, *vz;
    if (firstVectorParallelToXOY) {
      vz = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 1, 0) autorelease];
      vx = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) crossProductWithGeogebraCommonKernelMatrixCoords:vz];
      if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(vx)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        [vx normalize];
        vy = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) crossProductWithGeogebraCommonKernelMatrixCoords:vx];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) normalize];
        vz = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) normalized];
      }
      else {
        vx = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(1, 0, 0, 0) autorelease];
        vy = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 1, 0, 0) autorelease];
      }
    }
    else {
      vx = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) normalizedWithBoolean:YES];
      vz = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(vx)) crossProductWithGeogebraCommonKernelMatrixCoords:[self getVy]])) normalizedWithBoolean:YES];
      vy = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vz)) crossProductWithGeogebraCommonKernelMatrixCoords:vx];
    }
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setOriginWithGeogebraCommonKernelMatrixCoords:[self getOrigin]];
    [matrixOrthonormal_ setVxWithGeogebraCommonKernelMatrixCoords:vx];
    [matrixOrthonormal_ setVyWithGeogebraCommonKernelMatrixCoords:vy];
    [matrixOrthonormal_ setVzWithGeogebraCommonKernelMatrixCoords:vz];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_O_())) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords3_];
    if (projectOrigin) {
      [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:tmpCoords3_];
    }
    GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(tmpCoords3_, vz, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, tmpCoords1_, tmpCoords2_, drawingMatrix_);
    return YES;
  }
  return NO;
}

- (jboolean)isDefined {
  return [self isMadeCoordSys];
}

- (void)setUndefined {
  [self resetCoordSys];
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getMatrixOrthonormal {
  return matrixOrthonormal_;
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getDrawingMatrix {
  return drawingMatrix_;
}

- (void)setSimpleCoordSysWithOriginWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)m {
  [self setOriginWithGeogebraCommonKernelMatrixCoords:m];
  [self setVxWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VX_()];
  [self setVyWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VY_()];
  [self setVzWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_()];
  GeogebraCommonKernelMatrixCoordSys_set_matrixOrthonormal_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setOriginWithGeogebraCommonKernelMatrixCoords:m];
  GeogebraCommonKernelMatrixCoordSys_set_drawingMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:m];
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) addInsideWithGeogebraCommonKernelMatrixCoords:v];
  [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:o];
  if (dimension_ == 2) {
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:o];
  }
  [self setOriginWithGeogebraCommonKernelMatrixCoords:o];
  if (dimension_ == 2) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_O_())) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:matrixOrthonormal_ withGeogebraCommonKernelMatrixCoords:tmpCoords3_];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:tmpCoords3_];
  }
}

- (void)translateEquationVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [equationVector_ setWWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(equationVector_)) getW] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:equationVector_]];
}

- (IOSDoubleArray *)matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:(GeogebraCommonKernelMatrixCoordMatrix4x4 *)m {
  IOSDoubleArray *ret;
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(m)) mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin]];
  GeogebraCommonKernelMatrixCoords *vx = [m mulWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVx]];
  GeogebraCommonKernelMatrixCoords *vy = [m mulWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVy]];
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vx)) crossProduct4WithGeogebraCommonKernelMatrixCoords:vy];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero]) {
    if ([vx isZero]) {
      if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) isZero]) {
        ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0, 0 } count:3];
        GeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithGeogebraCommonKernelMatrixCoordMatrix4x4_(matrixOrthonormal_);
        [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:o];
      }
      else {
        [vy calcNorm];
        jdouble l = [vy getNorm];
        ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0, l } count:3];
        GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(o, [vy mulWithDouble:1 / l], GeogebraCommonKernelMatrixCoordMatrix4x4_VY, tmpCoords1_, tmpCoords2_, matrixOrthonormal_);
      }
    }
    else {
      [vx calcNorm];
      jdouble l = [vx getNorm];
      vx = [vx mulWithDouble:1 / l];
      jdouble a = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) dotproductWithGeogebraCommonKernelMatrixCoords:vx];
      ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ l, a, 0 } count:3];
      GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(o, vx, GeogebraCommonKernelMatrixCoordMatrix4x4_VX, tmpCoords1_, tmpCoords2_, matrixOrthonormal_);
    }
  }
  else {
    [vx calcNorm];
    jdouble l = [vx getNorm];
    vx = [vx mulWithDouble:1 / l];
    [vn normalize];
    GeogebraCommonKernelMatrixCoords *vyn = [vn crossProduct4WithGeogebraCommonKernelMatrixCoords:vx];
    jdouble a = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) dotproductWithGeogebraCommonKernelMatrixCoords:vx];
    jdouble b = [vy dotproductWithGeogebraCommonKernelMatrixCoords:vyn];
    ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ l, a, b } count:3];
    [matrixOrthonormal_ setVxWithGeogebraCommonKernelMatrixCoords:vx];
    [matrixOrthonormal_ setVyWithGeogebraCommonKernelMatrixCoords:vyn];
    [matrixOrthonormal_ setVzWithGeogebraCommonKernelMatrixCoords:vn];
    [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:o];
  }
  [self setOriginWithGeogebraCommonKernelMatrixCoords:o];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[m mulWithGeogebraCommonKernelMatrixCoords:[self getVx]]];
  if (dimension_ == 2) {
    [self setVyWithGeogebraCommonKernelMatrixCoords:[m mulWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[m mulWithGeogebraCommonKernelMatrixCoords:[self getVz]]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
  return ret;
}

- (void)setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vx {
  GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords_(self, vx);
}

- (void)setDrawingMatrixFromMatrixOrthonormal {
  GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
}

- (void)rotateWithDouble:(jdouble)phi
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center {
  if (tempMatrix3x3_ == nil) {
    GeogebraCommonKernelMatrixCoordSys_setAndConsume_tempMatrix3x3_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(3, 3));
  }
  GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithDouble_withGeogebraCommonKernelMatrixCoordMatrix_(phi, tempMatrix3x3_);
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  GeogebraCommonKernelMatrixCoordSys_set_matrixOrthonormal_(self, [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tempMatrix3x3_)) mul3x3WithGeogebraCommonKernelMatrixCoordMatrix:matrixOrthonormal_]);
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setOriginWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) subWithGeogebraCommonKernelMatrixCoords:center]])) addWithGeogebraCommonKernelMatrixCoords:center]];
  [matrixOrthonormal_ setWithInt:4 withInt:4 withDouble:1];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:o];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVx]]];
  if (dimension_ == 2) {
    [self setVyWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVz]]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)rotateWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)rot
                   withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  GeogebraCommonKernelMatrixCoords *newOrigin = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(rot)) mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) subWithGeogebraCommonKernelMatrixCoords:center]])) addWithGeogebraCommonKernelMatrixCoords:center];
  GeogebraCommonKernelMatrixCoords *vx = [matrixOrthonormal_ getVx];
  GeogebraCommonKernelMatrixCoords *vz = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [vz setValuesWithGeogebraCommonKernelMatrixCoords:[rot mulWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVz]] withInt:3];
  GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(newOrigin, vz, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, vx, tmpCoords1_, tmpCoords2_, matrixOrthonormal_);
  [self setOriginWithGeogebraCommonKernelMatrixCoords:newOrigin];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVx]];
  if (dimension_ == 2) {
    [self setVyWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVy]];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVz]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) getVx]);
  }
}

- (void)rotateWithDouble:(jdouble)phi
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction {
  if (tempMatrix3x3_ == nil) {
    GeogebraCommonKernelMatrixCoordSys_setAndConsume_tempMatrix3x3_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(3, 3));
  }
  GeogebraCommonKernelMatrixCoordMatrix_Rotation3x3WithGeogebraCommonKernelMatrixCoords_withDouble_withGeogebraCommonKernelMatrixCoordMatrix_(direction, phi, tempMatrix3x3_);
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  GeogebraCommonKernelMatrixCoordSys_set_matrixOrthonormal_(self, [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tempMatrix3x3_)) mul3x3WithGeogebraCommonKernelMatrixCoordMatrix:matrixOrthonormal_]);
  GeogebraCommonKernelMatrixCoords *newOrigin = [((GeogebraCommonKernelMatrixCoords *) nil_chk([tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) subWithGeogebraCommonKernelMatrixCoords:center]])) addWithGeogebraCommonKernelMatrixCoords:center];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) setOriginWithGeogebraCommonKernelMatrixCoords:newOrigin];
  [matrixOrthonormal_ setWithInt:4 withInt:4 withDouble:1];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:newOrigin];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVx]]];
  if (dimension_ == 2) {
    [self setVyWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVy]]];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[tempMatrix3x3_ mulWithGeogebraCommonKernelMatrixCoords:[self getVz]]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)dilateWithDouble:(jdouble)r
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  if (r < 0) {
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) mulInside3x3WithDouble:-1];
  }
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  GeogebraCommonKernelMatrixCoords *newOrigin = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) mulWithDouble:r])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:1 - r]];
  [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:newOrigin];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:newOrigin];
  if (r < 0) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) mulInsideWithDouble:-1];
  }
  if (dimension_ == 2) {
    if (r < 0) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) mulInsideWithDouble:-1];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) mulInsideWithDouble:-1];
    }
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)dilateEquationVectorWithDouble:(jdouble)r
  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  [self translateEquationVectorWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:1 - r]];
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) mulInsideWithDouble:-1];
  [matrixOrthonormal_ addToOriginWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:2]];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getOrigin]];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) mulInsideWithDouble:-1];
  if (dimension_ == 2) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) mulInsideWithDouble:-1];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) mulInsideWithDouble:-1];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)mirrorEquationVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point {
  [self translateEquationVectorWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) mulWithDouble:2]];
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
              withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin])) projectLineWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:direction withGeogebraCommonKernelMatrixCoords:tmpCoords1_ withDoubleArray:nil];
  jdouble x = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVx])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
  jdouble y = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVy])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
  jdouble z = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVz])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
  [matrixOrthonormal_ mulInsideWithDouble:-1];
  [matrixOrthonormal_ addToVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) mulWithDouble:x]];
  [matrixOrthonormal_ addToVyWithGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:y]];
  [matrixOrthonormal_ addToVzWithGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:z]];
  [matrixOrthonormal_ addToOriginWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) mulWithDouble:2]];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getOrigin]];
  jdouble p = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) mulWithDouble:-1])) addWithGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:p]]];
  if (dimension_ == 2) {
    p = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
    [self setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) mulWithDouble:-1])) addWithGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:p]]];
    p = 2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) dotproductWithGeogebraCommonKernelMatrixCoords:direction];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) mulWithDouble:-1])) addWithGeogebraCommonKernelMatrixCoords:[direction mulWithDouble:p]]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs {
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) getNormal];
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[cs getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  jdouble x = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVx])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
  jdouble y = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVy])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
  jdouble z = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVz])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
  [matrixOrthonormal_ addToVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:x]];
  [matrixOrthonormal_ addToVyWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:y]];
  [matrixOrthonormal_ addToVzWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:z]];
  [matrixOrthonormal_ setOriginWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setSubWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:tmpCoords1_ withDouble:2] withGeogebraCommonKernelMatrixCoords:o]];
  [self setOriginWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getOrigin]];
  jdouble p = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVx])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setAddWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords3_)) setMulWithGeogebraCommonKernelMatrixCoords:[self getVx] withDouble:-1] withGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:p]]];
  if (dimension_ == 2) {
    p = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVy])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
    [self setVyWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setAddWithGeogebraCommonKernelMatrixCoords:[tmpCoords3_ setMulWithGeogebraCommonKernelMatrixCoords:[self getVy] withDouble:-1] withGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:p]]];
    p = -2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getVz])) dotproductWithGeogebraCommonKernelMatrixCoords:vn];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setAddWithGeogebraCommonKernelMatrixCoords:[tmpCoords3_ setMulWithGeogebraCommonKernelMatrixCoords:[self getVz] withDouble:-1] withGeogebraCommonKernelMatrixCoords:[tmpCoords2_ setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:p]]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(self);
  }
}

- (void)updateContinuousWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)coordsys {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(matrixOrthonormal_)) getOrigin])) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys)) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  GeogebraCommonKernelMatrixCoords *vz = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([coordsys getMatrixOrthonormal])) getVz];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([matrixOrthonormal_ getVz])) dotproductWithGeogebraCommonKernelMatrixCoords:vz] < 0) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(vz)) mulInside3WithDouble:-1];
  }
  GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(tmpCoords1_, vz, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, [matrixOrthonormal_ getVx], tmpCoords2_, tmpCoords3_, matrixOrthonormal_);
  [self setOriginWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getOrigin]];
  [self setVxWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVx]];
  if (dimension_ == 2) {
    [self setVyWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVy]];
    [self setVzWithGeogebraCommonKernelMatrixCoords:[matrixOrthonormal_ getVz]];
    GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(drawingMatrix_)) getVx]);
  }
}

- (void)dealloc {
  RELEASE_(matrix_);
  RELEASE_(matrixOrthonormal_);
  RELEASE_(drawingMatrix_);
  RELEASE_(equationVector_);
  RELEASE_(origin_);
  RELEASE_(vectors_);
  RELEASE_(tmpCoords1_);
  RELEASE_(tmpCoords2_);
  RELEASE_(tmpCoords3_);
  RELEASE_(tempMatrix3x3_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelMatrixCoordSys class]) {
    {
      JreStrongAssignAndConsume(&GeogebraCommonKernelMatrixCoordSys_Identity3D_, nil, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
      [GeogebraCommonKernelMatrixCoordSys_Identity3D_ makeCoordSysWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0, 1, 0 } count:4]];
      [GeogebraCommonKernelMatrixCoordSys_Identity3D_ makeOrthoMatrixWithBoolean:YES withBoolean:YES];
    }
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelMatrixCoordSys)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "CoordSys", NULL, 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoordSys:", "set", "V", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "setOriginWithGeogebraCommonKernelMatrixCoords:", "setOrigin", "V", 0x1, NULL, NULL },
    { "setVxWithGeogebraCommonKernelMatrixCoords:", "setVx", "V", 0x1, NULL, NULL },
    { "setVyWithGeogebraCommonKernelMatrixCoords:", "setVy", "V", 0x1, NULL, NULL },
    { "setVzWithGeogebraCommonKernelMatrixCoords:", "setVz", "V", 0x1, NULL, NULL },
    { "setVWithGeogebraCommonKernelMatrixCoords:withInt:", "setV", "V", 0x1, NULL, NULL },
    { "getVWithInt:", "getV", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVx", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVy", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVz", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointWithGeogebraCommonKernelMatrixCoords:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointWithDouble:withDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointWithDouble:withDouble:withDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointForDrawingWithDouble:withDouble:", "getPointForDrawing", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointWithDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVectorWithGeogebraCommonKernelMatrixCoords:", "getVector", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getVectorWithDouble:withDouble:", "getVector", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormal", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormalProjectionWithGeogebraCommonKernelMatrixCoords:", "getNormalProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getNormalProjectionForDrawingWithGeogebraCommonKernelMatrixCoords:", "getNormalProjectionForDrawing", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getProjection", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getProjectionThruVIfPossibleWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getProjectionThruVIfPossible", "[Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setMadeCoordSysWithInt:", "setMadeCoordSys", "V", 0x1, NULL, NULL },
    { "setMadeCoordSys", NULL, "V", 0x1, NULL, NULL },
    { "resetCoordSys", NULL, "V", 0x1, NULL, NULL },
    { "getMadeCoordSys", NULL, "I", 0x1, NULL, NULL },
    { "completeCoordSys2D", NULL, "V", 0x1, NULL, NULL },
    { "isMadeCoordSys", NULL, "Z", 0x1, NULL, NULL },
    { "addPointWithGeogebraCommonKernelMatrixCoords:", "addPoint", "V", 0x1, NULL, NULL },
    { "addVectorWithGeogebraCommonKernelMatrixCoords:", "addVector", "V", 0x1, NULL, NULL },
    { "addVectorWithoutCheckMadeCoordSysWithGeogebraCommonKernelMatrixCoords:", "addVectorWithoutCheckMadeCoordSys", "V", 0x1, NULL, NULL },
    { "makeEquationVector", NULL, "V", 0x1, NULL, NULL },
    { "checkEquationVectorHasJustOneNegativeCoeff", NULL, "V", 0x12, NULL, NULL },
    { "setEquationVectorWithDouble:withDouble:withDouble:withDouble:", "setEquationVector", "V", 0x11, NULL, NULL },
    { "setEquationVectorWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setEquationVector", "V", 0x1, NULL, NULL },
    { "setEquationVectorWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setEquationVector", "V", 0x1, NULL, NULL },
    { "getEquationVector", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "makeCoordSysWithDoubleArray:", "makeCoordSys", "V", 0x1, NULL, NULL },
    { "makeOrthoMatrixWithBoolean:withBoolean:", "makeOrthoMatrix", "Z", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "getMatrixOrthonormal", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x1, NULL, NULL },
    { "getDrawingMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x1, NULL, NULL },
    { "setSimpleCoordSysWithOriginWithGeogebraCommonKernelMatrixCoords:", "setSimpleCoordSysWithOrigin", "V", 0x1, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "translateEquationVectorWithGeogebraCommonKernelMatrixCoords:", "translateEquationVector", "V", 0x1, NULL, NULL },
    { "matrixTransformWithGeogebraCommonKernelMatrixCoordMatrix4x4:", "matrixTransform", "[D", 0x1, NULL, NULL },
    { "setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords:", "setDrawingMatrixFromMatrixOrthonormal", "V", 0x2, NULL, NULL },
    { "setDrawingMatrixFromMatrixOrthonormal", NULL, "V", 0x2, NULL, NULL },
    { "rotateWithDouble:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelMatrixCoordMatrix:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x1, NULL, NULL },
    { "dilateWithDouble:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "dilateEquationVectorWithDouble:withGeogebraCommonKernelMatrixCoords:", "dilateEquationVector", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorEquationVectorWithGeogebraCommonKernelMatrixCoords:", "mirrorEquationVector", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoordSys:", "mirror", "V", 0x1, NULL, NULL },
    { "updateContinuousWithGeogebraCommonKernelMatrixCoordSys:", "updateContinuous", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "dimension_", NULL, 0x2, "I", NULL, NULL,  },
    { "madeCoordSys_", NULL, 0x2, "I", NULL, NULL,  },
    { "matrixOrthonormal_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "drawingMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "equationVector_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "origin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vectors_", NULL, 0x2, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "spaceDimension_", NULL, 0x2, "I", NULL, NULL,  },
    { "tmpCoords1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "Identity3D_", NULL, 0x19, "Lgeogebra.common.kernel.Matrix.CoordSys;", &GeogebraCommonKernelMatrixCoordSys_Identity3D_, NULL,  },
    { "tempMatrix3x3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMatrixCoordSys = { 2, "CoordSys", "geogebra.common.kernel.Matrix", NULL, 0x1, 63, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMatrixCoordSys;
}

@end

void GeogebraCommonKernelMatrixCoordSys_initWithInt_(GeogebraCommonKernelMatrixCoordSys *self, jint dimension) {
  NSObject_init(self);
  self->spaceDimension_ = 3;
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_tmpCoords1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_tmpCoords3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_matrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 4));
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_matrixOrthonormal_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_drawingMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  self->dimension_ = dimension;
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_origin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(self->spaceDimension_ + 1));
  [self->origin_ setWithInt:self->spaceDimension_ + 1 withDouble:1];
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_vectors_(self, [IOSObjectArray newArrayWithLength:self->spaceDimension_ type:GeogebraCommonKernelMatrixCoords_class_()]);
  for (jint i = 0; i < self->spaceDimension_; i++) {
    IOSObjectArray_SetAndConsume(self->vectors_, i, new_GeogebraCommonKernelMatrixCoords_initWithInt_(self->spaceDimension_ + 1));
  }
  GeogebraCommonKernelMatrixCoordSys_setAndConsume_equationVector_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(self->spaceDimension_ + 1));
  [self resetCoordSys];
}

GeogebraCommonKernelMatrixCoordSys *new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(jint dimension) {
  GeogebraCommonKernelMatrixCoordSys *self = [GeogebraCommonKernelMatrixCoordSys alloc];
  GeogebraCommonKernelMatrixCoordSys_initWithInt_(self, dimension);
  return self;
}

void GeogebraCommonKernelMatrixCoordSys_checkEquationVectorHasJustOneNegativeCoeff(GeogebraCommonKernelMatrixCoordSys *self) {
  jint zeros = 0;
  jboolean negative = NO;
  for (jint i = 1; i <= 3; i++) {
    jdouble coeff = [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->equationVector_)) getWithInt:i];
    if (GeogebraCommonKernelKernel_isZeroWithDouble_(coeff)) {
      zeros++;
    }
    else {
      negative = (coeff < 0);
    }
  }
  if (zeros == 2 && negative) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->equationVector_)) mulInsideWithDouble:-1];
  }
}

void GeogebraCommonKernelMatrixCoordSys_setEquationVectorWithDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelMatrixCoordSys *self, jdouble a, jdouble b, jdouble c, jdouble d) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->equationVector_)) setXWithDouble:a];
  [self->equationVector_ setYWithDouble:b];
  [self->equationVector_ setZWithDouble:c];
  [self->equationVector_ setWWithDouble:d];
  GeogebraCommonKernelMatrixCoordSys_checkEquationVectorHasJustOneNegativeCoeff(self);
}

void GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormalWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordSys *self, GeogebraCommonKernelMatrixCoords *vx) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_O_())) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:self->matrixOrthonormal_ withGeogebraCommonKernelMatrixCoords:self->tmpCoords3_];
  GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(self->tmpCoords3_, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->matrixOrthonormal_)) getVz], GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, vx, self->tmpCoords1_, self->tmpCoords2_, self->drawingMatrix_);
}

void GeogebraCommonKernelMatrixCoordSys_setDrawingMatrixFromMatrixOrthonormal(GeogebraCommonKernelMatrixCoordSys *self) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_O_())) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:self->matrixOrthonormal_ withGeogebraCommonKernelMatrixCoords:self->tmpCoords3_];
  GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(self->tmpCoords3_, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->matrixOrthonormal_)) getVz], GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, self->tmpCoords1_, self->tmpCoords2_, self->drawingMatrix_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMatrixCoordSys)
