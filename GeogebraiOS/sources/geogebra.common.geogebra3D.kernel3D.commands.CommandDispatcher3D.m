//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdAngularBisector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdArcSector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdArchimedeanSolid.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdArea3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdAxes3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdBottom.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCircleArcSector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCircumcircleArc3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCircumcircleSector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdClosestPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdClosestPointRegion.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCone.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdConeInfinite.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCorner3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdCylinderInfinite.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdDiameter3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdDilate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdDistance3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdEllipseHyperbola3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdEnds.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdFocus3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdFunction2Var.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdHeight.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdIntersect3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectConic.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdIntersectPath3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdLength3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdLineBisector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdLocus3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdMidpoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdMirror3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdOrthogonalVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdParabola3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPlaneBisector.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPointIn3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolar3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolyhedronNet.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPrism.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdQuadricSide.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdRay3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdRotate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdSegment3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdSemicircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdSphere3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdSurfaceCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdTangent3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdTop.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdTranslate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdUnitOrthogonalVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdVertex3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdVertexForce3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdVolume.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CommandDispatcher3D.h"
#include "geogebra/common/geogebra3D/kernel3D/scripting/CmdSetSpinSpeed.h"
#include "geogebra/common/geogebra3D/kernel3D/scripting/CmdSetViewDirection.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/commands/CommandDispatcher.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelCommandsCommandProcessor *)commandTableSwitchWithNSString:(NSString *)cmdName {
  @try {
    switch ([GeogebraCommonKernelCommandsCommandsEnum_valueOfWithNSString_(cmdName) ordinal]) {
      case GeogebraCommonKernelCommandsCommands_Segment:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdSegment3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Line:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdLine3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Ray:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdRay3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Vector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdVector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Polygon:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolygon3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Area:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArea3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_PolyLine:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Point:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Midpoint:
      case GeogebraCommonKernelCommandsCommands_Center:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdMidpoint3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Tangent:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdTangent3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Polar:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolar3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Diameter:
      case GeogebraCommonKernelCommandsCommands_ConjugateDiameter:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdDiameter3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Circle:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircle3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Ellipse:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdEllipseHyperbola3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE) autorelease];
      case GeogebraCommonKernelCommandsCommands_Hyperbola:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdEllipseHyperbola3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) autorelease];
      case GeogebraCommonKernelCommandsCommands_Conic:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdConic3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_CircumcircleSector:
      case GeogebraCommonKernelCommandsCommands_CircumcircularSector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircumcircleSector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_CircumcircleArc:
      case GeogebraCommonKernelCommandsCommands_CircumcircularArc:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircumcircleArc3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Arc:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
      case GeogebraCommonKernelCommandsCommands_Sector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
      case GeogebraCommonKernelCommandsCommands_CircleArc:
      case GeogebraCommonKernelCommandsCommands_CircularArc:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
      case GeogebraCommonKernelCommandsCommands_CircleSector:
      case GeogebraCommonKernelCommandsCommands_CircularSector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCircleArcSector3D_initWithGeogebraCommonKernelKernel_withInt_(kernel_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
      case GeogebraCommonKernelCommandsCommands_Semicircle:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdSemicircle3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Parabola:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdParabola3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Corner:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCorner3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_CornerThreeD:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdVertexForce3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Locus:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdLocus3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Vertex:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdVertex3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Focus:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdFocus3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_OrthogonalLine:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalLine3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_LineBisector:
      case GeogebraCommonKernelCommandsCommands_PerpendicularBisector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdLineBisector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_AngleBisector:
      case GeogebraCommonKernelCommandsCommands_AngularBisector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdAngularBisector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_OrthogonalVector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalVector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_UnitOrthogonalVector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitOrthogonalVector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_UnitVector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Curve:
      case GeogebraCommonKernelCommandsCommands_CurveCartesian:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCurveCartesian3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Plane:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPlane_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_PerpendicularPlane:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalPlane_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_OrthogonalPlane:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdOrthogonalPlane_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_PlaneBisector:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPlaneBisector_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Prism:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPrism_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Pyramid:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPyramid_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Tetrahedron:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandsEnum_(kernel_, GeogebraCommonKernelCommandsCommandsEnum_get_Tetrahedron()) autorelease];
      case GeogebraCommonKernelCommandsCommands_Cube:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandsEnum_(kernel_, GeogebraCommonKernelCommandsCommandsEnum_get_Cube()) autorelease];
      case GeogebraCommonKernelCommandsCommands_Octahedron:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandsEnum_(kernel_, GeogebraCommonKernelCommandsCommandsEnum_get_Octahedron()) autorelease];
      case GeogebraCommonKernelCommandsCommands_Dodecahedron:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandsEnum_(kernel_, GeogebraCommonKernelCommandsCommandsEnum_get_Dodecahedron()) autorelease];
      case GeogebraCommonKernelCommandsCommands_Icosahedron:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdArchimedeanSolid_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelCommandsCommandsEnum_(kernel_, GeogebraCommonKernelCommandsCommandsEnum_get_Icosahedron()) autorelease];
      case GeogebraCommonKernelCommandsCommands_Net:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyhedronNet_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_PointIn:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPointIn3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Distance:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdDistance3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_ClosestPoint:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdClosestPoint3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_ClosestPointRegion:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdClosestPointRegion_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Intersect:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersect3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_IntersectPath:
      case GeogebraCommonKernelCommandsCommands_IntersectionPaths:
      case GeogebraCommonKernelCommandsCommands_IntersectRegion:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectPath3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_IntersectCircle:
      case GeogebraCommonKernelCommandsCommands_IntersectConic:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdIntersectConic_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Sphere:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdSphere3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Cone:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCone_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_InfiniteCone:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdConeInfinite_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_ConeInfinite:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdConeInfinite_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Cylinder:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCylinder_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_InfiniteCylinder:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCylinderInfinite_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_CylinderInfinite:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdCylinderInfinite_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_QuadricSide:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdQuadricSide_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Bottom:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdBottom_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Top:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdTop_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Ends:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdEnds_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Function:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdFunction2Var_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Surface:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdSurfaceCartesian3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Angle:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Translate:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdTranslate3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Rotate:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdRotate3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Mirror:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdMirror3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Dilate:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdDilate3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Length:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdLength3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Volume:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdVolume_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Height:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdHeight_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_Axes:
      return [new_GeogebraCommonGeogebra3DKernel3DCommandsCmdAxes3D_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_SetViewDirection:
      return [new_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      case GeogebraCommonKernelCommandsCommands_SetSpinSpeed:
      return [new_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
      default:
      return [super commandTableSwitchWithNSString:cmdName];
    }
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"command not found / CAS command called");
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CommandDispatcher3D", NULL, 0x1, NULL, NULL },
    { "commandTableSwitchWithNSString:", "commandTableSwitch", "Lgeogebra.common.kernel.commands.CommandProcessor;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D = { 2, "CommandDispatcher3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandDispatcher_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCommandDispatcher3D)
