//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/MyPoint.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Double.h"

@implementation GeogebraCommonKernelMyPoint

- (instancetype)initWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                   withBoolean:(jboolean)lineTo {
  GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
  return self;
}

- (instancetype)init {
  GeogebraCommonKernelMyPoint_init(self);
  return self;
}

- (jdouble)distSqrWithDouble:(jdouble)px
                  withDouble:(jdouble)py {
  jdouble vx = px - x_;
  jdouble vy = py - y_;
  return vx * vx + vy * vy;
}

- (jboolean)isEqualWithDouble:(jdouble)px
                   withDouble:(jdouble)py {
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(x_, px, GeogebraCommonKernelKernel_MIN_PRECISION) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(y_, py, GeogebraCommonKernelKernel_MIN_PRECISION);
}

- (NSString *)description {
  return JreStrcat("CD$DC", '(', x_, @", ", y_, ')');
}

- (jdouble)distanceWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)p {
  return GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(((GeogebraCommonKernelMyPoint *) nil_chk(p))->x_ - x_, p->y_ - y_);
}

- (GeogebraCommonKernelGeosGeoPoint *)getGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(cons, nil, x_, y_, 1.0) autorelease];
}

- (jboolean)getLineTo {
  return lineTo_;
}

- (jdouble)getX {
  return x_;
}

- (jdouble)getY {
  return y_;
}

- (jdouble)getZ {
  return 0;
}

- (jdouble)distanceWithDouble:(jdouble)x1
                   withDouble:(jdouble)y1 {
  return GeogebraCommonAwtGPoint2D_distanceSqWithDouble_withDouble_withDouble_withDouble_([self getX], [self getY], x1, y1);
}

- (void)setXWithDouble:(jdouble)x {
  self->x_ = x;
}

- (void)setYWithDouble:(jdouble)y {
  self->y_ = y;
}

- (jdouble)distanceWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)q {
  return [self distanceWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withDouble:[q getY]];
}

- (jboolean)isEqualWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)point {
  return [self isEqualWithDouble:((GeogebraCommonKernelMyPoint *) nil_chk(point))->x_ withDouble:point->y_];
}

- (jboolean)isFinite {
  return GeogebraCommonKernelMyPoint_isFiniteWithDouble_(x_) && GeogebraCommonKernelMyPoint_isFiniteWithDouble_(y_);
}

+ (jboolean)isFiniteWithDouble:(jdouble)value {
  return GeogebraCommonKernelMyPoint_isFiniteWithDouble_(value);
}

- (GeogebraCommonKernelMyPoint *)barycenterWithDouble:(jdouble)t
                      withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)point2 {
  return [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_((1 - t) * x_ + t * ((GeogebraCommonKernelMyPoint *) nil_chk(point2))->x_, (1 - t) * y_ + t * point2->y_, NO) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withBoolean:", "MyPoint", NULL, 0x1, NULL, NULL },
    { "init", "MyPoint", NULL, 0x1, NULL, NULL },
    { "distSqrWithDouble:withDouble:", "distSqr", "D", 0x1, NULL, NULL },
    { "isEqualWithDouble:withDouble:", "isEqual", "Z", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonKernelMyPoint:", "distance", "D", 0x1, NULL, NULL },
    { "getGeoPointWithGeogebraCommonKernelConstruction:", "getGeoPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLineTo", NULL, "Z", 0x1, NULL, NULL },
    { "getX", NULL, "D", 0x1, NULL, NULL },
    { "getY", NULL, "D", 0x1, NULL, NULL },
    { "getZ", NULL, "D", 0x1, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x1, NULL, NULL },
    { "setXWithDouble:", "setX", "V", 0x1, NULL, NULL },
    { "setYWithDouble:", "setY", "V", 0x1, NULL, NULL },
    { "distanceWithGeogebraCommonAwtGPoint2D:", "distance", "D", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelMyPoint:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isFinite", NULL, "Z", 0x1, NULL, NULL },
    { "isFiniteWithDouble:", "isFinite", "Z", 0x1c, NULL, NULL },
    { "barycenterWithDouble:withGeogebraCommonKernelMyPoint:", "barycenter", "Lgeogebra.common.kernel.MyPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "D", NULL, NULL,  },
    { "y_", NULL, 0x1, "D", NULL, NULL,  },
    { "lineTo_", NULL, 0x1, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelMyPoint = { 2, "MyPoint", "geogebra.common.kernel", NULL, 0x1, 19, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelMyPoint;
}

@end

void GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(GeogebraCommonKernelMyPoint *self, jdouble x, jdouble y, jboolean lineTo) {
  GeogebraCommonAwtGPoint2D_init(self);
  self->x_ = x;
  self->y_ = y;
  self->lineTo_ = lineTo;
}

GeogebraCommonKernelMyPoint *new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(jdouble x, jdouble y, jboolean lineTo) {
  GeogebraCommonKernelMyPoint *self = [GeogebraCommonKernelMyPoint alloc];
  GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
  return self;
}

void GeogebraCommonKernelMyPoint_init(GeogebraCommonKernelMyPoint *self) {
  GeogebraCommonAwtGPoint2D_init(self);
}

GeogebraCommonKernelMyPoint *new_GeogebraCommonKernelMyPoint_init() {
  GeogebraCommonKernelMyPoint *self = [GeogebraCommonKernelMyPoint alloc];
  GeogebraCommonKernelMyPoint_init(self);
  return self;
}

jboolean GeogebraCommonKernelMyPoint_isFiniteWithDouble_(jdouble value) {
  GeogebraCommonKernelMyPoint_initialize();
  return !JavaLangDouble_isInfiniteWithDouble_(value) && !JavaLangDouble_isInfiniteWithDouble_(value);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelMyPoint)
