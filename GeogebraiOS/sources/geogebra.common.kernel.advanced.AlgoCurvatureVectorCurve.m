//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve () {
 @public
  GeogebraCommonKernelGeosGeoPoint *A_;
  GeogebraCommonKernelGeosGeoCurveCartesian *f_, *f1_, *f2_;
  GeogebraCommonKernelGeosGeoVector *v_;
  IOSDoubleArray *f1eval_;
  IOSDoubleArray *f2eval_;
  GeogebraCommonKernelGeosGeoConic *gc_;
}

- (void)cas;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, A_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, f_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, f1_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, f2_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, v_, GeogebraCommonKernelGeosGeoVector *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, f1eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, f2eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve, gc_, GeogebraCommonKernelGeosGeoConic *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self);

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self);

@implementation GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, A, f);
  return self;
}

- (void)cas {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(self);
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)a2
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)geoConic {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, a2, geoConic);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)geoConic {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(self, cons, A, geoConic);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CurvatureVector();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  if (gc_ != nil) {
    IOSObjectArray_Set(input_, 1, gc_);
  }
  else {
    IOSObjectArray_Set(input_, 1, f_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:v_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoVector *)getVector {
  return v_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A_)) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(f_)) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [A_ removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
  [f_ removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(f_);
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(v_);
  RELEASE_(f1eval_);
  RELEASE_(f2eval_);
  RELEASE_(algoCAS_);
  RELEASE_(algoCAS2_);
  RELEASE_(gc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoCurvatureVectorCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoCurvatureVectorCurve", NULL, 0x0, NULL, NULL },
    { "cas", NULL, "V", 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoConic:", "AlgoCurvatureVectorCurve", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoConic:", "AlgoCurvatureVectorCurve", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "f1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "f1eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "f2eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "algoCAS_", NULL, 0x0, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "algoCAS2_", NULL, 0x0, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "gc_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve = { 2, "AlgoCurvatureVectorCurve", "geogebra.common.kernel.advanced", NULL, 0x1, 10, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve;
}

@end

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, A, f);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:@"cv"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f1eval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f2eval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_v_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  @try {
    [self->v_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(self);
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_algoCAS_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f_, YES));
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_f1_(self, (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast([self->algoCAS_ getResult], [GeogebraCommonKernelGeosGeoCurveCartesian class]));
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_algoCAS2_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f1_, YES));
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS2_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_f2_(self, (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast([self->algoCAS2_ getResult], [GeogebraCommonKernelGeosGeoCurveCartesian class]));
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *a2, GeogebraCommonKernelGeosGeoConic *geoConic) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(self, cons, a2, geoConic);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:@"cv"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *a2, GeogebraCommonKernelGeosGeoConic *geoConic) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, a2, geoConic);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoConic *geoConic) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f1eval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f2eval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_set_gc_(self, geoConic);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->gc_)) toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:self->f_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_v_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  @try {
    [self->v_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(self);
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoConic *geoConic) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoConic_(self, cons, A, geoConic);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve *self) {
  @try {
    jdouble t2, t4, x, y, evals, tvalue;
    if (self->gc_ != nil) {
      GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(self->cons_));
      [self->gc_ toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:self->f_];
      GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve_cas(self);
    }
    tvalue = [self->f_ getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:self->A_ withDouble:[((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->f_)) getMinParameter]];
    [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->f1_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f1eval_];
    [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->f2_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f2eval_];
    t2 = IOSDoubleArray_Get(nil_chk(self->f1eval_), 0) * IOSDoubleArray_Get(self->f1eval_, 0) + IOSDoubleArray_Get(self->f1eval_, 1) * IOSDoubleArray_Get(self->f1eval_, 1);
    t4 = t2 * t2;
    evals = IOSDoubleArray_Get(self->f1eval_, 0) * IOSDoubleArray_Get(nil_chk(self->f2eval_), 1) - IOSDoubleArray_Get(self->f2eval_, 0) * IOSDoubleArray_Get(self->f1eval_, 1);
    x = ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_))->inhomX_ + ((evals / t4) * (-IOSDoubleArray_Get(self->f1eval_, 1)));
    y = self->A_->inhomY_ + ((evals / t4) * IOSDoubleArray_Get(self->f1eval_, 0));
    ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_))->x_ = x - self->A_->inhomX_;
    self->v_->y_ = y - self->A_->inhomY_;
    self->v_->z_ = 0.0;
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve)
