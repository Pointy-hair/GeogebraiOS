//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/scripting/CmdSetViewDirection.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/geogebra3D/kernel3D/scripting/CmdSetViewDirection.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  switch (n) {
    case 1:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 0)]) {
      id<GeogebraCommonKernelKernelNDGeoDirectionND> d = (id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND));
      id<GeogebraCommonEuclidian3DEuclidianView3DInterface> view3D = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView3D];
      GeogebraCommonKernelMatrixCoords *v = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(d)) getDirectionInD3];
      if (v != nil) {
        [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(view3D)) setClosestRotAnimationWithGeogebraCommonKernelMatrixCoords:v];
      }
      return;
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoPoint]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) isDefined]) {
        GeogebraCommonKernelMatrixCoords *v = [p getInhomCoordsInD3];
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) setWWithDouble:0];
        id<GeogebraCommonEuclidian3DEuclidianView3DInterface> view3D = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView3D];
        [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(view3D)) setClosestRotAnimationWithGeogebraCommonKernelMatrixCoords:v];
      }
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetViewDirection", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection = { 2, "CmdSetViewDirection", "geogebra.common.geogebra3D.kernel3D.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection;
}

@end

void GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection *new_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection *self = [GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection alloc];
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DScriptingCmdSetViewDirection)
