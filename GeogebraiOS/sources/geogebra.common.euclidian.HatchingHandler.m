//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/HatchingHandler.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAlphaComposite.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GEllipse2DFloat.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GFontRenderContext.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPaint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/MyImage.h"
#include "geogebra/common/awt/font/GTextLayout.h"
#include "geogebra/common/euclidian/HatchingHandler.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonEuclidianHatchingHandler () {
 @public
  id<GeogebraCommonAwtGBufferedImage> bufferedImage_;
  id<GeogebraCommonAwtGBufferedImage> subImage_;
}

- (id<GeogebraCommonAwtGGraphics2D>)createImageWithGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor
                                                                       withFloat:(jfloat)backgroundTransparency
                                                                         withInt:(jint)xInt
                                                                         withInt:(jint)yInt;

+ (void)drawBricksWithDouble:(jdouble)angle
                     withInt:(jint)xInt
                     withInt:(jint)yInt
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d;

+ (void)drawDottedWithDouble:(jdouble)dist
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d;

+ (jboolean)drawChessboardWithDouble:(jdouble)angle
                           withFloat:(jfloat)hatchDist
    withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d;

+ (void)drawHoneycombWithFloat:(jfloat)dist
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d;

+ (void)drawHatchingWithDouble:(jdouble)angle
                    withDouble:(jdouble)y
                       withInt:(jint)xInt
                       withInt:(jint)yInt
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianHatchingHandler, bufferedImage_, id<GeogebraCommonAwtGBufferedImage>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianHatchingHandler, subImage_, id<GeogebraCommonAwtGBufferedImage>)

__attribute__((unused)) static id<GeogebraCommonAwtGGraphics2D> GeogebraCommonEuclidianHatchingHandler_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(GeogebraCommonEuclidianHatchingHandler *self, id<GeogebraCommonAwtGBasicStroke> objStroke, GeogebraCommonAwtGColor *color, GeogebraCommonAwtGColor *bgColor, jfloat backgroundTransparency, jint xInt, jint yInt);

__attribute__((unused)) static void GeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jint xInt, jint yInt, id<GeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void GeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withGeogebraCommonAwtGGraphics2D_(jdouble dist, id<GeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jfloat hatchDist, id<GeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void GeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withGeogebraCommonAwtGGraphics2D_(jfloat dist, id<GeogebraCommonAwtGGraphics2D> g2d);

__attribute__((unused)) static void GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jdouble y, jint xInt, jint yInt, id<GeogebraCommonAwtGGraphics2D> g2d);

@implementation GeogebraCommonEuclidianHatchingHandler

- (id<GeogebraCommonAwtGPaint>)setHatchingWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g3
                                         withGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke
                                               withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                               withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor
                                                                 withFloat:(jfloat)backgroundTransparency
                                                                withDouble:(jdouble)hatchDist
                                                                withDouble:(jdouble)angleDegrees
                       withGeogebraCommonKernelGeosGeoElement_FillTypeEnum:(GeogebraCommonKernelGeosGeoElement_FillTypeEnum *)fillType
                                                              withNSString:(NSString *)symbol
                                                 withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  jdouble angle = JavaLangMath_roundWithDouble_(angleDegrees / 5) * JavaLangMath_PI / 36;
  if (angle < 0 || angle >= JavaLangMath_PI) angle = 0;
  jdouble dist = hatchDist;
  if (dist < 5) {
    dist = 5;
  }
  else if (dist > 50) {
    dist = 50;
  }
  jdouble x = dist / JavaLangMath_sinWithDouble_(angle);
  jdouble y = dist / JavaLangMath_cosWithDouble_(angle);
  jint xInt = (jint) JavaLangMath_absWithLong_(JavaLangMath_roundWithDouble_((x)));
  jint yInt = (jint) JavaLangMath_absWithLong_(JavaLangMath_roundWithDouble_((y)));
  if (angle == 0 || GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    xInt = J2ObjCFpToInt(dist);
    yInt = xInt;
  }
  id<GeogebraCommonAwtGGraphics2D> g2d = GeogebraCommonEuclidianHatchingHandler_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, xInt, yInt);
  jint startX = xInt;
  jint startY = yInt;
  jint height = yInt;
  jint width = xInt;
  {
    jdouble side;
    id<GeogebraCommonAwtFontGTextLayout> t;
    switch ([fillType ordinal]) {
      case GeogebraCommonKernelGeosGeoElement_FillType_HATCH:
      GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_CROSSHATCHED:
      GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
      GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(JavaLangMath_PI / 2 - angle, -y, xInt, yInt, g2d);
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_CHESSBOARD:
      GeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withGeogebraCommonAwtGGraphics2D_(angle, (jfloat) dist, g2d);
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
        dist = dist * JavaLangMath_sinWithDouble_(angle);
      }
      height = width = J2ObjCFpToInt((dist * 2));
      startX = startY = J2ObjCFpToInt((dist / 2));
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_HONEYCOMB:
      GeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withGeogebraCommonAwtGGraphics2D_((jfloat) dist, g2d);
      side = dist * JavaLangMath_sqrtWithDouble_(3) / 2;
      startY = 0;
      startX = 0;
      height = J2ObjCFpToInt((dist * 3));
      width = J2ObjCFpToInt((2 * side));
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_BRICK:
      if (angle == 0 || GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI, angle, 10E-8) || GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
        startY = startX = xInt / 2;
        height = width *= 2;
      }
      GeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(angle, xInt, yInt, g2d);
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_DOTTED:
      GeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withGeogebraCommonAwtGGraphics2D_(dist, g2d);
      break;
      case GeogebraCommonKernelGeosGeoElement_FillType_SYMBOLS:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonAwtGFont *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:symbol])) deriveFontWithInt:GeogebraCommonAwtGFont_PLAIN withInt:J2ObjCFpToInt((dist * 2.5))]];
      t = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newTextLayoutWithNSString:symbol withGeogebraCommonAwtGFont:[g2d getFont] withGeogebraCommonAwtGFontRenderContext:[g2d getFontRenderContext]];
      g2d = GeogebraCommonEuclidianHatchingHandler_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, (JavaLangMath_roundWithFloat_([((id<GeogebraCommonAwtFontGTextLayout>) nil_chk(t)) getAscent] + [t getDescent]) / 3), (JavaLangMath_roundWithFloat_([t getAscent] + [t getDescent]) / 3));
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonAwtGFont *) nil_chk([app getFontCanDisplayWithNSString:symbol])) deriveFontWithInt:GeogebraCommonAwtGFont_PLAIN withInt:24]];
      [g2d drawStringWithNSString:symbol withInt:0 withInt:JavaLangMath_roundWithFloat_([t getAscent])];
      startY = 0;
      startX = 0;
      width = J2ObjCFpToInt([t getAscent]) + J2ObjCFpToInt([t getDescent]) - 1;
      height = J2ObjCFpToInt([t getAscent]) + J2ObjCFpToInt([t getDescent]) - 1;
      break;
    }
  }
  id<GeogebraCommonAwtGRectangle> rect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:width withInt:height];
  id<GeogebraCommonAwtGPaint> ret = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithGeogebraCommonAwtGBufferedImage:GeogebraCommonEuclidianHatchingHandler_set_subImage_(self, [((id<GeogebraCommonAwtGBufferedImage>) nil_chk(bufferedImage_)) getSubimageWithInt:startX withInt:startY withInt:width withInt:height]) withGeogebraCommonAwtGRectangle:rect];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithGeogebraCommonAwtGPaint:ret];
  return ret;
}

- (id<GeogebraCommonAwtGGraphics2D>)createImageWithGeogebraCommonAwtGBasicStroke:(id<GeogebraCommonAwtGBasicStroke>)objStroke
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
                                                     withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor
                                                                       withFloat:(jfloat)backgroundTransparency
                                                                         withInt:(jint)xInt
                                                                         withInt:(jint)yInt {
  return GeogebraCommonEuclidianHatchingHandler_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(self, objStroke, color, bgColor, backgroundTransparency, xInt, yInt);
}

- (void)setTextureWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g3
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                         withFloat:(jfloat)alpha {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getFillImage] == nil || [((id<GeogebraCommonAwtMyImage>) nil_chk([geo getFillImage])) isSVG]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithGeogebraCommonAwtGPaint:[geo getFillColor]];
    return;
  }
  id<GeogebraCommonAwtMyImage> image = [geo getFillImage];
  id<GeogebraCommonAwtGRectangle> tr = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((id<GeogebraCommonAwtMyImage>) nil_chk(image)) getWidth] withInt:[image getHeight]];
  id<GeogebraCommonAwtGPaint> tp;
  if (alpha < 1.0f) {
    id<GeogebraCommonAwtGBufferedImage> copy_ = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBufferedImageWithInt:[image getWidth] withInt:[image getHeight] withInt:GeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB];
    id<GeogebraCommonAwtGGraphics2D> g2d = [((id<GeogebraCommonAwtGBufferedImage>) nil_chk(copy_)) createGraphics];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setAntialiasing];
    [g2d setTransparent];
    GeogebraCommonAwtGColor *bgColor = [geo getBackgroundColor];
    if (bgColor == nil) [g2d setColorWithGeogebraCommonAwtGColor:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:0 withInt:0 withInt:0 withInt:0]];
    else [g2d setColorWithGeogebraCommonAwtGColor:bgColor];
    [g2d fillRectWithInt:0 withInt:0 withInt:[image getWidth] withInt:[image getHeight]];
    if (alpha > 0.0f) {
      id<GeogebraCommonAwtGAlphaComposite> ac = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newAlphaCompositeWithInt:GeogebraCommonAwtGAlphaComposite_SRC_OVER withFloat:alpha];
      [g2d setCompositeWithGeogebraCommonAwtGComposite:ac];
      [g2d drawImageWithGeogebraCommonAwtMyImage:image withInt:0 withInt:0];
    }
    tp = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithGeogebraCommonAwtGBufferedImage:copy_ withGeogebraCommonAwtGRectangle:tr];
  }
  else {
    tp = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newTexturePaintWithGeogebraCommonAwtMyImage:image withGeogebraCommonAwtGRectangle:tr];
  }
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g3)) setPaintWithGeogebraCommonAwtGPaint:tp];
}

+ (void)drawBricksWithDouble:(jdouble)angle
                     withInt:(jint)xInt
                     withInt:(jint)yInt
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d {
  GeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(angle, xInt, yInt, g2d);
}

+ (void)drawDottedWithDouble:(jdouble)dist
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d {
  GeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withGeogebraCommonAwtGGraphics2D_(dist, g2d);
}

+ (jboolean)drawChessboardWithDouble:(jdouble)angle
                           withFloat:(jfloat)hatchDist
    withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d {
  return GeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withGeogebraCommonAwtGGraphics2D_(angle, hatchDist, g2d);
}

+ (void)drawHoneycombWithFloat:(jfloat)dist
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d {
  GeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withGeogebraCommonAwtGGraphics2D_(dist, g2d);
}

+ (void)drawHatchingWithDouble:(jdouble)angle
                    withDouble:(jdouble)y
                       withInt:(jint)xInt
                       withInt:(jint)yInt
withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2d {
  GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(angle, y, xInt, yInt, g2d);
}

- (id<GeogebraCommonAwtGBufferedImage>)getSubImage {
  return subImage_;
}

- (instancetype)init {
  GeogebraCommonEuclidianHatchingHandler_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(bufferedImage_);
  RELEASE_(subImage_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setHatchingWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGBasicStroke:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:withFloat:withDouble:withDouble:withGeogebraCommonKernelGeosGeoElement_FillTypeEnum:withNSString:withGeogebraCommonMainApp:", "setHatching", "Lgeogebra.common.awt.GPaint;", 0x14, NULL, NULL },
    { "createImageWithGeogebraCommonAwtGBasicStroke:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:withFloat:withInt:withInt:", "createImage", "Lgeogebra.common.awt.GGraphics2D;", 0x2, NULL, NULL },
    { "setTextureWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonKernelGeosGeoElement:withFloat:", "setTexture", "V", 0x4, NULL, NULL },
    { "drawBricksWithDouble:withInt:withInt:withGeogebraCommonAwtGGraphics2D:", "drawBricks", "V", 0xa, NULL, NULL },
    { "drawDottedWithDouble:withGeogebraCommonAwtGGraphics2D:", "drawDotted", "V", 0xa, NULL, NULL },
    { "drawChessboardWithDouble:withFloat:withGeogebraCommonAwtGGraphics2D:", "drawChessboard", "Z", 0xa, NULL, NULL },
    { "drawHoneycombWithFloat:withGeogebraCommonAwtGGraphics2D:", "drawHoneycomb", "V", 0xa, NULL, NULL },
    { "drawHatchingWithDouble:withDouble:withInt:withInt:withGeogebraCommonAwtGGraphics2D:", "drawHatching", "V", 0xa, NULL, NULL },
    { "getSubImage", NULL, "Lgeogebra.common.awt.GBufferedImage;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "bufferedImage_", NULL, 0x2, "Lgeogebra.common.awt.GBufferedImage;", NULL, NULL,  },
    { "subImage_", NULL, 0x2, "Lgeogebra.common.awt.GBufferedImage;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianHatchingHandler = { 2, "HatchingHandler", "geogebra.common.euclidian", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianHatchingHandler;
}

@end

id<GeogebraCommonAwtGGraphics2D> GeogebraCommonEuclidianHatchingHandler_createImageWithGeogebraCommonAwtGBasicStroke_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withFloat_withInt_withInt_(GeogebraCommonEuclidianHatchingHandler *self, id<GeogebraCommonAwtGBasicStroke> objStroke, GeogebraCommonAwtGColor *color, GeogebraCommonAwtGColor *bgColor, jfloat backgroundTransparency, jint xInt, jint yInt) {
  GeogebraCommonEuclidianHatchingHandler_set_bufferedImage_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBufferedImageWithInt:xInt * 3 withInt:yInt * 3 withInt:GeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB]);
  id<GeogebraCommonAwtGGraphics2D> g2d = [((id<GeogebraCommonAwtGBufferedImage>) nil_chk(self->bufferedImage_)) createGraphics];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) setAntialiasing];
  [g2d setTransparent];
  if (bgColor == nil) {
    [g2d setColorWithGeogebraCommonAwtGColor:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:255 withInt:255 withInt:255 withInt:J2ObjCFpToInt((backgroundTransparency * 255.0f))]];
  }
  else {
    [g2d setColorWithGeogebraCommonAwtGColor:bgColor];
  }
  [g2d fillRectWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
  [g2d setColorWithGeogebraCommonAwtGColor:color];
  [g2d setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke];
  return g2d;
}

void GeogebraCommonEuclidianHatchingHandler_drawBricksWithDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jint xInt, jint yInt, id<GeogebraCommonAwtGGraphics2D> g2d) {
  GeogebraCommonEuclidianHatchingHandler_initialize();
  if (angle == 0 || GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI, angle, 10E-8)) {
    id<GeogebraCommonAwtGRectangle> rect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:xInt / 2 withInt:yInt withInt:2 * xInt withInt:yInt];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithGeogebraCommonAwtGShape:rect];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt / 2 withInt:xInt + xInt / 2 withInt:yInt];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt * 2 withInt:xInt + xInt / 2 withInt:yInt * 2 + yInt / 2];
  }
  else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    id<GeogebraCommonAwtGRectangle> rect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:xInt withInt:yInt / 2 withInt:xInt withInt:2 * yInt];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithGeogebraCommonAwtGShape:rect];
    [g2d drawLineWithInt:xInt / 2 withInt:yInt + yInt / 2 withInt:xInt withInt:yInt + yInt / 2];
    [g2d drawLineWithInt:xInt * 2 withInt:yInt + yInt / 2 withInt:2 * xInt + xInt / 2 withInt:yInt + yInt / 2];
  }
  else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt * 3 withInt:0 withInt:0 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 3 withInt:yInt withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:0 withInt:yInt * 2];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt + yInt / 2 withInt:2 * xInt withInt:yInt * 2];
  }
  else {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
    [g2d drawLineWithInt:0 withInt:yInt withInt:xInt * 2 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt withInt:0 withInt:xInt * 3 withInt:yInt * 2];
    [g2d drawLineWithInt:xInt + xInt / 2 withInt:yInt + yInt / 2 withInt:xInt withInt:yInt * 2];
  }
}

void GeogebraCommonEuclidianHatchingHandler_drawDottedWithDouble_withGeogebraCommonAwtGGraphics2D_(jdouble dist, id<GeogebraCommonAwtGGraphics2D> g2d) {
  GeogebraCommonEuclidianHatchingHandler_initialize();
  jint distInt = J2ObjCFpToInt(dist);
  jint size = 2;
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillWithGeogebraCommonAwtGShape:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DFloatWithInt:distInt withInt:distInt withInt:size withInt:size]];
  [g2d fillWithGeogebraCommonAwtGShape:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:2 * distInt withInt:distInt withInt:size withInt:size]];
  [g2d fillWithGeogebraCommonAwtGShape:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:distInt withInt:2 * distInt withInt:size withInt:size]];
  [g2d fillWithGeogebraCommonAwtGShape:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DFloatWithInt:2 * distInt withInt:2 * distInt withInt:size withInt:size]];
}

jboolean GeogebraCommonEuclidianHatchingHandler_drawChessboardWithDouble_withFloat_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jfloat hatchDist, id<GeogebraCommonAwtGGraphics2D> g2d) {
  GeogebraCommonEuclidianHatchingHandler_initialize();
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 4, angle, 10E-8)) {
    id<GeogebraCommonAwtGGeneralPath> path = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
    jfloat dist = (jfloat) (hatchDist * JavaLangMath_sinWithDouble_(angle));
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(path)) moveToWithFloat:dist / 2 withFloat:dist / 2 - 1];
    [path lineToWithFloat:2 * dist + dist / 2 withFloat:dist / 2 - 1];
    [path lineToWithFloat:dist + dist / 2 withFloat:dist + dist / 2];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillWithGeogebraCommonAwtGShape:path];
    [path reset];
    [path moveToWithFloat:dist + dist / 2 withFloat:dist + dist / 2];
    [path lineToWithFloat:2 * dist + dist / 2 withFloat:2 * dist + dist / 2];
    [path lineToWithFloat:dist / 2 withFloat:dist * 2 + dist / 2];
    [g2d fillWithGeogebraCommonAwtGShape:path];
  }
  else {
    jint distInt = J2ObjCFpToInt(hatchDist);
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) fillRectWithInt:distInt / 2 withInt:distInt / 2 withInt:distInt withInt:distInt];
    [g2d fillRectWithInt:distInt + distInt / 2 withInt:distInt + distInt / 2 withInt:distInt withInt:distInt];
  }
  return YES;
}

void GeogebraCommonEuclidianHatchingHandler_drawHoneycombWithFloat_withGeogebraCommonAwtGGraphics2D_(jfloat dist, id<GeogebraCommonAwtGGraphics2D> g2d) {
  GeogebraCommonEuclidianHatchingHandler_initialize();
  id<GeogebraCommonAwtGGeneralPath> path = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath];
  jfloat centerX = (jfloat) (dist * JavaLangMath_sqrtWithDouble_(3) / 2);
  jfloat width = centerX + centerX;
  [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(path)) moveToWithFloat:centerX withFloat:dist];
  [path lineToWithFloat:centerX withFloat:2 * dist];
  [path lineToWithFloat:0 withFloat:2 * dist + dist / 2];
  [path lineToWithFloat:0 withFloat:3 * dist];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawWithGeogebraCommonAwtGShape:path];
  [path reset];
  [path moveToWithFloat:centerX withFloat:2 * dist];
  [path lineToWithFloat:width withFloat:2 * dist + dist / 2];
  [path lineToWithFloat:width withFloat:3 * dist];
  [g2d drawWithGeogebraCommonAwtGShape:path];
  [path reset];
  [path moveToWithFloat:0 withFloat:0];
  [path lineToWithFloat:0 withFloat:dist / 2];
  [path lineToWithFloat:centerX withFloat:dist];
  [path lineToWithFloat:width withFloat:dist / 2];
  [path lineToWithFloat:width withFloat:0];
  [g2d drawWithGeogebraCommonAwtGShape:path];
}

void GeogebraCommonEuclidianHatchingHandler_drawHatchingWithDouble_withDouble_withInt_withInt_withGeogebraCommonAwtGGraphics2D_(jdouble angle, jdouble y, jint xInt, jint yInt, id<GeogebraCommonAwtGGraphics2D> g2d) {
  GeogebraCommonEuclidianHatchingHandler_initialize();
  if (angle == 0) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:yInt withInt:xInt * 3 withInt:yInt];
    [g2d drawLineWithInt:0 withInt:yInt * 2 withInt:xInt * 3 withInt:yInt * 2];
  }
  else if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_PI / 2, angle, 10E-8)) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt withInt:0 withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:xInt * 2 withInt:yInt * 3];
  }
  else if (y > 0) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:xInt * 3 withInt:0 withInt:0 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 3 withInt:yInt withInt:xInt withInt:yInt * 3];
    [g2d drawLineWithInt:xInt * 2 withInt:0 withInt:0 withInt:yInt * 2];
  }
  else {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawLineWithInt:0 withInt:0 withInt:xInt * 3 withInt:yInt * 3];
    [g2d drawLineWithInt:0 withInt:yInt withInt:xInt * 2 withInt:yInt * 3];
    [g2d drawLineWithInt:xInt withInt:0 withInt:xInt * 3 withInt:yInt * 2];
  }
}

void GeogebraCommonEuclidianHatchingHandler_init(GeogebraCommonEuclidianHatchingHandler *self) {
  NSObject_init(self);
  GeogebraCommonEuclidianHatchingHandler_set_bufferedImage_(self, nil);
  GeogebraCommonEuclidianHatchingHandler_set_subImage_(self, nil);
}

GeogebraCommonEuclidianHatchingHandler *new_GeogebraCommonEuclidianHatchingHandler_init() {
  GeogebraCommonEuclidianHatchingHandler *self = [GeogebraCommonEuclidianHatchingHandler alloc];
  GeogebraCommonEuclidianHatchingHandler_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianHatchingHandler)
