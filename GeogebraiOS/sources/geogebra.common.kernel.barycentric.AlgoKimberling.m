//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/barycentric/AlgoKimberling.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/barycentric/AlgoKimberling.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/AlgoKimberlingWeightsInterface.h"
#include "geogebra/common/main/AlgoKimberlingWeightsParams.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelBarycentricAlgoKimberling () {
 @public
  GeogebraCommonKernelGeosGeoPoint *A_, *B_, *C_;
  GeogebraCommonKernelGeosGeoPoint *M_;
  id<GeogebraCommonKernelArithmeticNumberValue> n_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoKimberling, A_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoKimberling, B_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoKimberling, C_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoKimberling, M_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoKimberling, n_, id<GeogebraCommonKernelArithmeticNumberValue>)

__attribute__((unused)) static void GeogebraCommonKernelBarycentricAlgoKimberling_compute(GeogebraCommonKernelBarycentricAlgoKimberling *self);

@implementation GeogebraCommonKernelBarycentricAlgoKimberling

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)C
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)n {
  GeogebraCommonKernelBarycentricAlgoKimberling_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TriangleCenter();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, B_);
  IOSObjectArray_Set(input_, 2, C_);
  IOSObjectArray_Set(input_, 3, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(n_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:M_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPoint *)getResult {
  return M_;
}

- (void)compute {
  GeogebraCommonKernelBarycentricAlgoKimberling_compute(self);
}

- (jboolean)isLocusEquable {
  return NO;
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(C_);
  RELEASE_(M_);
  RELEASE_(n_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoKimberling", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "C_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelBarycentricAlgoKimberling = { 2, "AlgoKimberling", "geogebra.common.kernel.barycentric", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelBarycentricAlgoKimberling;
}

@end

void GeogebraCommonKernelBarycentricAlgoKimberling_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelBarycentricAlgoKimberling *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C, id<GeogebraCommonKernelArithmeticNumberValue> n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoKimberlingWeights];
  GeogebraCommonKernelBarycentricAlgoKimberling_set_A_(self, A);
  GeogebraCommonKernelBarycentricAlgoKimberling_set_B_(self, B);
  GeogebraCommonKernelBarycentricAlgoKimberling_set_C_(self, C);
  GeogebraCommonKernelBarycentricAlgoKimberling_set_n_(self, n);
  GeogebraCommonKernelBarycentricAlgoKimberling_setAndConsume_M_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelBarycentricAlgoKimberling_compute(self);
  [self->M_ setLabelWithNSString:label];
}

GeogebraCommonKernelBarycentricAlgoKimberling *new_GeogebraCommonKernelBarycentricAlgoKimberling_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoPoint *C, id<GeogebraCommonKernelArithmeticNumberValue> n) {
  GeogebraCommonKernelBarycentricAlgoKimberling *self = [GeogebraCommonKernelBarycentricAlgoKimberling alloc];
  GeogebraCommonKernelBarycentricAlgoKimberling_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, A, B, C, n);
  return self;
}

void GeogebraCommonKernelBarycentricAlgoKimberling_compute(GeogebraCommonKernelBarycentricAlgoKimberling *self) {
  jdouble c = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->B_];
  jdouble b = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->C_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->A_];
  jdouble a = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) distanceWithGeogebraCommonKernelGeosGeoPoint:self->C_];
  jdouble m = JavaLangMath_minWithDouble_withDouble_(JavaLangMath_minWithDouble_withDouble_(a, b), c);
  a = a / m;
  b = b / m;
  c = c / m;
  jint k = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->n_)) getDouble]);
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getAlgoKimberlingWeights] == nil) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setUndefined];
  }
  else {
    jdouble wA = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithGeogebraCommonMainAlgoKimberlingWeightsParams:[new_GeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, a, b, c) autorelease]];
    jdouble wB = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithGeogebraCommonMainAlgoKimberlingWeightsParams:[new_GeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, b, c, a) autorelease]];
    jdouble wC = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) kimberlingWeightWithGeogebraCommonMainAlgoKimberlingWeightsParams:[new_GeogebraCommonMainAlgoKimberlingWeightsParams_initWithInt_withDouble_withDouble_withDouble_(k, c, a, b) autorelease]];
    jdouble w = wA + wB + wC;
    if (JavaLangDouble_isNaNWithDouble_(w) || GeogebraCommonKernelKernel_isZeroWithDouble_(w)) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setUndefined];
    else [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->M_)) setCoordsWithDouble:(self->A_->x_ / self->A_->z_ * wA + self->B_->x_ / self->B_->z_ * wB + self->C_->x_ / self->C_->z_ * wC) / w withDouble:(self->A_->y_ / self->A_->z_ * wA + self->B_->y_ / self->B_->z_ * wB + self->C_->y_ / self->C_->z_ * wC) / w withDouble:1];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelBarycentricAlgoKimberling)
