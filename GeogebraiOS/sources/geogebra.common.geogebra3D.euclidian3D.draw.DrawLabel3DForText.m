//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/draw/DrawText.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3DForText.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText () {
 @public
  jint highLightIndex_;
}

@end

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view
                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) isLaTeX]) {
    return GeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGFont_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], tempGraphics_, geo_, tempGraphics_, font_, GeogebraCommonAwtGColor_get_BLACK_(), GeogebraCommonAwtGColor_get_WHITE_(), text_, 0, 0, NO);
  }
  return GeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithGeogebraCommonMainApp_withNSString_withInt_withInt_withGeogebraCommonAwtGGraphics2D_withBoolean_withGeogebraCommonAwtGFont_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, tempGraphics_, NO, [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) getFont]);
}

- (id<GeogebraCommonAwtGBufferedImage>)draw {
  id<GeogebraCommonAwtGBufferedImage> bimg = [self createBufferedImage];
  id<GeogebraCommonAwtGGraphics2D> g2d = [self createGraphics2DWithGeogebraCommonAwtGBufferedImage:bimg];
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) isLaTeX]) {
    GeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGFont_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], tempGraphics_, geo_, g2d, font_, GeogebraCommonAwtGColor_get_BLACK_(), GeogebraCommonAwtGColor_get_WHITE_(), text_, 0, 0, NO);
  }
  else {
    GeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithGeogebraCommonMainApp_withNSString_withInt_withInt_withGeogebraCommonAwtGGraphics2D_withBoolean_withGeogebraCommonAwtGFont_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, g2d, NO, [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) getFont]);
  }
  return bimg;
}

- (void)setGeoWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_set_geo_(self, geo);
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                          withInt:(jint)x
                                                          withInt:(jint)y
                                                          withInt:(jint)z {
  [super drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withInt:x withInt:y withInt:z];
  if ([((GeogebraCommonKernelGeosGeoText *) nil_chk(geo_)) doHighlighting]) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableTextures];
    [renderer disableMultisample];
    [renderer setLineWidthWithDouble:[geo_ getLineThickness] / 2];
    [renderer setColorWithGeogebraCommonAwtGColor:GeogebraCommonEuclidianDrawDrawText_get_HIGHLIGHT_COLOR_()];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:highLightIndex_];
    [renderer enableMultisample];
    [renderer enableTextures];
  }
}

- (void)updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  if (origin_ == nil) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) removeWithInt:highLightIndex_];
    highLightIndex_ = -1;
    return;
  }
  jint old = highLightIndex_;
  highLightIndex_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) rectangleBoundsWithInt:drawX_ withInt:drawY_ withInt:drawZ_ withInt:width_ withInt:height_ withInt:highLightIndex_];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
}

- (void)setWaitForReset {
  [super setWaitForReset];
  highLightIndex_ = -1;
}

- (void)dealloc {
  RELEASE_(geo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "DrawLabel3DForText", NULL, 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x14, NULL, NULL },
    { "draw", NULL, "Lgeogebra.common.awt.GBufferedImage;", 0x14, NULL, NULL },
    { "setGeoWithGeogebraCommonKernelGeosGeoText:", "setGeo", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withInt:withInt:withInt:", "draw", "V", 0x4, NULL, NULL },
    { "updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "updatePosition", "V", 0x1, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "highLightIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText = { 2, "DrawLabel3DForText", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  self->highLightIndex_ = -1;
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3DForText)
