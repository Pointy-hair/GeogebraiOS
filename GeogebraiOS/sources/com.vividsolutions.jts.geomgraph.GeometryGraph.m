//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geomgraph/GeometryGraph.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/BoundaryNodeRule.h"
#include "com/vividsolutions/jts/algorithm/CGAlgorithms.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/PointLocator.h"
#include "com/vividsolutions/jts/algorithm/locate/IndexedPointInAreaLocator.h"
#include "com/vividsolutions/jts/algorithm/locate/PointOnGeometryLocator.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateArrays.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryCollection.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/LinearRing.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/MultiPoint.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Point.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/Polygonal.h"
#include "com/vividsolutions/jts/geomgraph/Edge.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersection.h"
#include "com/vividsolutions/jts/geomgraph/EdgeIntersectionList.h"
#include "com/vividsolutions/jts/geomgraph/GeometryGraph.h"
#include "com/vividsolutions/jts/geomgraph/GraphComponent.h"
#include "com/vividsolutions/jts/geomgraph/Label.h"
#include "com/vividsolutions/jts/geomgraph/Node.h"
#include "com/vividsolutions/jts/geomgraph/NodeMap.h"
#include "com/vividsolutions/jts/geomgraph/PlanarGraph.h"
#include "com/vividsolutions/jts/geomgraph/Position.h"
#include "com/vividsolutions/jts/geomgraph/index/EdgeSetIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SegmentIntersector.h"
#include "com/vividsolutions/jts/geomgraph/index/SimpleMCSweepLineIntersector.h"
#include "com/vividsolutions/jts/util/Assert.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@interface ComVividsolutionsJtsGeomgraphGeometryGraph () {
 @public
  ComVividsolutionsJtsGeomGeometry *parentGeom_;
  id<JavaUtilMap> lineEdgeMap_;
  id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule_;
  jboolean useBoundaryDeterminationRule_;
  jint argIndex_;
  id<JavaUtilCollection> boundaryNodes_;
  jboolean hasTooFewPoints__;
  ComVividsolutionsJtsGeomCoordinate *invalidPoint_;
  id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator> areaPtLocator_;
  ComVividsolutionsJtsAlgorithmPointLocator *ptLocator_;
}

- (ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *)createEdgeSetIntersector;

- (void)addWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g;

- (void)addCollectionWithComVividsolutionsJtsGeomGeometryCollection:(ComVividsolutionsJtsGeomGeometryCollection *)gc;

- (void)addPointWithComVividsolutionsJtsGeomPoint:(ComVividsolutionsJtsGeomPoint *)p;

- (void)addPolygonRingWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)lr
                                                     withInt:(jint)cwLeft
                                                     withInt:(jint)cwRight;

- (void)addPolygonWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p;

- (void)addLineStringWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line;

- (void)insertPointWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                   withInt:(jint)onLocation;

- (void)insertBoundaryPointWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord;

- (void)addSelfIntersectionNodesWithInt:(jint)argIndex;

- (void)addSelfIntersectionNodeWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                               withInt:(jint)loc;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, parentGeom_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, lineEdgeMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, boundaryNodeRule_, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, boundaryNodes_, id<JavaUtilCollection>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, invalidPoint_, ComVividsolutionsJtsGeomCoordinate *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, areaPtLocator_, id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator>)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomgraphGeometryGraph, ptLocator_, ComVividsolutionsJtsAlgorithmPointLocator *)

__attribute__((unused)) static ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *ComVividsolutionsJtsGeomgraphGeometryGraph_createEdgeSetIntersector(ComVividsolutionsJtsGeomgraphGeometryGraph *self);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomGeometry *g);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomGeometryCollection *gc);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addPointWithComVividsolutionsJtsGeomPoint_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomPoint *p);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonRingWithComVividsolutionsJtsGeomLinearRing_withInt_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomLinearRing *lr, jint cwLeft, jint cwRight);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomPolygon *p);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addLineStringWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomLineString *line);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord, jint onLocation);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodesWithInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex);

__attribute__((unused)) static void ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodeWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord, jint loc);

@implementation ComVividsolutionsJtsGeomgraphGeometryGraph

+ (jint)determineBoundaryWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)boundaryNodeRule
                                                                   withInt:(jint)boundaryCount {
  return ComVividsolutionsJtsGeomgraphGeometryGraph_determineBoundaryWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_withInt_(boundaryNodeRule, boundaryCount);
}

- (ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *)createEdgeSetIntersector {
  return ComVividsolutionsJtsGeomgraphGeometryGraph_createEdgeSetIntersector(self);
}

- (instancetype)initWithInt:(jint)argIndex
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)parentGeom {
  ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(self, argIndex, parentGeom);
  return self;
}

- (instancetype)initWithInt:(jint)argIndex
withComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)parentGeom
withComVividsolutionsJtsAlgorithmBoundaryNodeRule:(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)boundaryNodeRule {
  ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, argIndex, parentGeom, boundaryNodeRule);
  return self;
}

- (jboolean)hasTooFewPoints {
  return hasTooFewPoints__;
}

- (ComVividsolutionsJtsGeomCoordinate *)getInvalidPoint {
  return invalidPoint_;
}

- (ComVividsolutionsJtsGeomGeometry *)getGeometry {
  return parentGeom_;
}

- (id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>)getBoundaryNodeRule {
  return boundaryNodeRule_;
}

- (id<JavaUtilCollection>)getBoundaryNodes {
  if (boundaryNodes_ == nil) ComVividsolutionsJtsGeomgraphGeometryGraph_set_boundaryNodes_(self, [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(nodes_)) getBoundaryNodesWithInt:argIndex_]);
  return boundaryNodes_;
}

- (IOSObjectArray *)getBoundaryPoints {
  id<JavaUtilCollection> coll = [self getBoundaryNodes];
  IOSObjectArray *pts = [IOSObjectArray arrayWithLength:[((id<JavaUtilCollection>) nil_chk(coll)) size] type:ComVividsolutionsJtsGeomCoordinate_class_()];
  jint i = 0;
  for (id<JavaUtilIterator> it = [coll iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphNode *node = (ComVividsolutionsJtsGeomgraphNode *) check_class_cast([it next], [ComVividsolutionsJtsGeomgraphNode class]);
    IOSObjectArray_Set(pts, i++, (ComVividsolutionsJtsGeomCoordinate *) check_class_cast([((ComVividsolutionsJtsGeomCoordinate *) nil_chk([((ComVividsolutionsJtsGeomgraphNode *) nil_chk(node)) getCoordinate])) clone], [ComVividsolutionsJtsGeomCoordinate class]));
  }
  return pts;
}

- (ComVividsolutionsJtsGeomgraphEdge *)findEdgeWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line {
  return (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([((id<JavaUtilMap>) nil_chk(lineEdgeMap_)) getWithId:line], [ComVividsolutionsJtsGeomgraphEdge class]);
}

- (void)computeSplitEdgesWithJavaUtilList:(id<JavaUtilList>)edgelist {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(edges_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e))->eiList_)) addSplitEdgesWithJavaUtilList:edgelist];
  }
}

- (void)addWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addWithComVividsolutionsJtsGeomGeometry_(self, g);
}

- (void)addCollectionWithComVividsolutionsJtsGeomGeometryCollection:(ComVividsolutionsJtsGeomGeometryCollection *)gc {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(self, gc);
}

- (void)addPointWithComVividsolutionsJtsGeomPoint:(ComVividsolutionsJtsGeomPoint *)p {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addPointWithComVividsolutionsJtsGeomPoint_(self, p);
}

- (void)addPolygonRingWithComVividsolutionsJtsGeomLinearRing:(ComVividsolutionsJtsGeomLinearRing *)lr
                                                     withInt:(jint)cwLeft
                                                     withInt:(jint)cwRight {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonRingWithComVividsolutionsJtsGeomLinearRing_withInt_withInt_(self, lr, cwLeft, cwRight);
}

- (void)addPolygonWithComVividsolutionsJtsGeomPolygon:(ComVividsolutionsJtsGeomPolygon *)p {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonWithComVividsolutionsJtsGeomPolygon_(self, p);
}

- (void)addLineStringWithComVividsolutionsJtsGeomLineString:(ComVividsolutionsJtsGeomLineString *)line {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addLineStringWithComVividsolutionsJtsGeomLineString_(self, line);
}

- (void)addEdgeWithComVividsolutionsJtsGeomgraphEdge:(ComVividsolutionsJtsGeomgraphEdge *)e {
  [self insertEdgeWithComVividsolutionsJtsGeomgraphEdge:e];
  IOSObjectArray *coord = [((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getCoordinates];
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex_, IOSObjectArray_Get(nil_chk(coord), 0), ComVividsolutionsJtsGeomLocation_BOUNDARY);
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex_, IOSObjectArray_Get(coord, coord->size_ - 1), ComVividsolutionsJtsGeomLocation_BOUNDARY);
}

- (void)addPointWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex_, pt, ComVividsolutionsJtsGeomLocation_INTERIOR);
}

- (ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                                                                                               withBoolean:(jboolean)computeRingSelfNodes {
  ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si = [new_ComVividsolutionsJtsGeomgraphIndexSegmentIntersector_initWithComVividsolutionsJtsAlgorithmLineIntersector_withBoolean_withBoolean_(li, YES, NO) autorelease];
  ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *esi = ComVividsolutionsJtsGeomgraphGeometryGraph_createEdgeSetIntersector(self);
  if (!computeRingSelfNodes && ([parentGeom_ isKindOfClass:[ComVividsolutionsJtsGeomLinearRing class]] || [parentGeom_ isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]] || [parentGeom_ isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]])) {
    [((ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *) nil_chk(esi)) computeIntersectionsWithJavaUtilList:edges_ withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:si withBoolean:NO];
  }
  else {
    [((ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *) nil_chk(esi)) computeIntersectionsWithJavaUtilList:edges_ withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:si withBoolean:YES];
  }
  ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodesWithInt_(self, argIndex_);
  return si;
}

- (ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *)computeEdgeIntersectionsWithComVividsolutionsJtsGeomgraphGeometryGraph:(ComVividsolutionsJtsGeomgraphGeometryGraph *)g
                                                                                withComVividsolutionsJtsAlgorithmLineIntersector:(ComVividsolutionsJtsAlgorithmLineIntersector *)li
                                                                                                                     withBoolean:(jboolean)includeProper {
  ComVividsolutionsJtsGeomgraphIndexSegmentIntersector *si = [new_ComVividsolutionsJtsGeomgraphIndexSegmentIntersector_initWithComVividsolutionsJtsAlgorithmLineIntersector_withBoolean_withBoolean_(li, includeProper, YES) autorelease];
  [si setBoundaryNodesWithJavaUtilCollection:[self getBoundaryNodes] withJavaUtilCollection:[((ComVividsolutionsJtsGeomgraphGeometryGraph *) nil_chk(g)) getBoundaryNodes]];
  ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *esi = ComVividsolutionsJtsGeomgraphGeometryGraph_createEdgeSetIntersector(self);
  [((ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *) nil_chk(esi)) computeIntersectionsWithJavaUtilList:edges_ withJavaUtilList:g->edges_ withComVividsolutionsJtsGeomgraphIndexSegmentIntersector:si];
  return si;
}

- (void)insertPointWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                   withInt:(jint)onLocation {
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex, coord, onLocation);
}

- (void)insertBoundaryPointWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord {
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(self, argIndex, coord);
}

- (void)addSelfIntersectionNodesWithInt:(jint)argIndex {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodesWithInt_(self, argIndex);
}

- (void)addSelfIntersectionNodeWithInt:(jint)argIndex
withComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)coord
                               withInt:(jint)loc {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodeWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex, coord, loc);
}

- (jint)locateWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  if ([ComVividsolutionsJtsGeomPolygonal_class_() isInstance:parentGeom_] && [((ComVividsolutionsJtsGeomGeometry *) nil_chk(parentGeom_)) getNumGeometries] > 50) {
    if (areaPtLocator_ == nil) {
      ComVividsolutionsJtsGeomgraphGeometryGraph_setAndConsume_areaPtLocator_(self, new_ComVividsolutionsJtsAlgorithmLocateIndexedPointInAreaLocator_initWithComVividsolutionsJtsGeomGeometry_(parentGeom_));
    }
    return [((id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator>) nil_chk(areaPtLocator_)) locateWithComVividsolutionsJtsGeomCoordinate:pt];
  }
  return [((ComVividsolutionsJtsAlgorithmPointLocator *) nil_chk(ptLocator_)) locateWithComVividsolutionsJtsGeomCoordinate:pt withComVividsolutionsJtsGeomGeometry:parentGeom_];
}

- (void)dealloc {
  RELEASE_(parentGeom_);
  RELEASE_(lineEdgeMap_);
  RELEASE_(boundaryNodeRule_);
  RELEASE_(boundaryNodes_);
  RELEASE_(invalidPoint_);
  RELEASE_(areaPtLocator_);
  RELEASE_(ptLocator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "determineBoundaryWithComVividsolutionsJtsAlgorithmBoundaryNodeRule:withInt:", "determineBoundary", "I", 0x9, NULL, NULL },
    { "createEdgeSetIntersector", NULL, "Lcom.vividsolutions.jts.geomgraph.index.EdgeSetIntersector;", 0x2, NULL, NULL },
    { "initWithInt:withComVividsolutionsJtsGeomGeometry:", "GeometryGraph", NULL, 0x1, NULL, NULL },
    { "initWithInt:withComVividsolutionsJtsGeomGeometry:withComVividsolutionsJtsAlgorithmBoundaryNodeRule:", "GeometryGraph", NULL, 0x1, NULL, NULL },
    { "hasTooFewPoints", NULL, "Z", 0x1, NULL, NULL },
    { "getInvalidPoint", NULL, "Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "getGeometry", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "getBoundaryNodeRule", NULL, "Lcom.vividsolutions.jts.algorithm.BoundaryNodeRule;", 0x1, NULL, NULL },
    { "getBoundaryNodes", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "getBoundaryPoints", NULL, "[Lcom.vividsolutions.jts.geom.Coordinate;", 0x1, NULL, NULL },
    { "findEdgeWithComVividsolutionsJtsGeomLineString:", "findEdge", "Lcom.vividsolutions.jts.geomgraph.Edge;", 0x1, NULL, NULL },
    { "computeSplitEdgesWithJavaUtilList:", "computeSplitEdges", "V", 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsGeomGeometry:", "add", "V", 0x2, NULL, NULL },
    { "addCollectionWithComVividsolutionsJtsGeomGeometryCollection:", "addCollection", "V", 0x2, NULL, NULL },
    { "addPointWithComVividsolutionsJtsGeomPoint:", "addPoint", "V", 0x2, NULL, NULL },
    { "addPolygonRingWithComVividsolutionsJtsGeomLinearRing:withInt:withInt:", "addPolygonRing", "V", 0x2, NULL, NULL },
    { "addPolygonWithComVividsolutionsJtsGeomPolygon:", "addPolygon", "V", 0x2, NULL, NULL },
    { "addLineStringWithComVividsolutionsJtsGeomLineString:", "addLineString", "V", 0x2, NULL, NULL },
    { "addEdgeWithComVividsolutionsJtsGeomgraphEdge:", "addEdge", "V", 0x1, NULL, NULL },
    { "addPointWithComVividsolutionsJtsGeomCoordinate:", "addPoint", "V", 0x1, NULL, NULL },
    { "computeSelfNodesWithComVividsolutionsJtsAlgorithmLineIntersector:withBoolean:", "computeSelfNodes", "Lcom.vividsolutions.jts.geomgraph.index.SegmentIntersector;", 0x1, NULL, NULL },
    { "computeEdgeIntersectionsWithComVividsolutionsJtsGeomgraphGeometryGraph:withComVividsolutionsJtsAlgorithmLineIntersector:withBoolean:", "computeEdgeIntersections", "Lcom.vividsolutions.jts.geomgraph.index.SegmentIntersector;", 0x1, NULL, NULL },
    { "insertPointWithInt:withComVividsolutionsJtsGeomCoordinate:withInt:", "insertPoint", "V", 0x2, NULL, NULL },
    { "insertBoundaryPointWithInt:withComVividsolutionsJtsGeomCoordinate:", "insertBoundaryPoint", "V", 0x2, NULL, NULL },
    { "addSelfIntersectionNodesWithInt:", "addSelfIntersectionNodes", "V", 0x2, NULL, NULL },
    { "addSelfIntersectionNodeWithInt:withComVividsolutionsJtsGeomCoordinate:withInt:", "addSelfIntersectionNode", "V", 0x2, NULL, NULL },
    { "locateWithComVividsolutionsJtsGeomCoordinate:", "locate", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parentGeom_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "lineEdgeMap_", NULL, 0x2, "Ljava.util.Map;", NULL, NULL,  },
    { "boundaryNodeRule_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.BoundaryNodeRule;", NULL, NULL,  },
    { "useBoundaryDeterminationRule_", NULL, 0x2, "Z", NULL, NULL,  },
    { "argIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "boundaryNodes_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
    { "hasTooFewPoints__", "hasTooFewPoints", 0x2, "Z", NULL, NULL,  },
    { "invalidPoint_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Coordinate;", NULL, NULL,  },
    { "areaPtLocator_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.locate.PointOnGeometryLocator;", NULL, NULL,  },
    { "ptLocator_", NULL, 0x12, "Lcom.vividsolutions.jts.algorithm.PointLocator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomgraphGeometryGraph = { 2, "GeometryGraph", "com.vividsolutions.jts.geomgraph", NULL, 0x1, 27, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomgraphGeometryGraph;
}

@end

jint ComVividsolutionsJtsGeomgraphGeometryGraph_determineBoundaryWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_withInt_(id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule, jint boundaryCount) {
  ComVividsolutionsJtsGeomgraphGeometryGraph_initialize();
  return [((id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule>) nil_chk(boundaryNodeRule)) isInBoundaryWithInt:boundaryCount] ? ComVividsolutionsJtsGeomLocation_BOUNDARY : ComVividsolutionsJtsGeomLocation_INTERIOR;
}

ComVividsolutionsJtsGeomgraphIndexEdgeSetIntersector *ComVividsolutionsJtsGeomgraphGeometryGraph_createEdgeSetIntersector(ComVividsolutionsJtsGeomgraphGeometryGraph *self) {
  return [new_ComVividsolutionsJtsGeomgraphIndexSimpleMCSweepLineIntersector_init() autorelease];
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomGeometry *parentGeom) {
  ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, argIndex, parentGeom, ComVividsolutionsJtsAlgorithmBoundaryNodeRule_get_OGC_SFS_BOUNDARY_RULE_());
}

ComVividsolutionsJtsGeomgraphGeometryGraph *new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(jint argIndex, ComVividsolutionsJtsGeomGeometry *parentGeom) {
  ComVividsolutionsJtsGeomgraphGeometryGraph *self = [ComVividsolutionsJtsGeomgraphGeometryGraph alloc];
  ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_(self, argIndex, parentGeom);
  return self;
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomGeometry *parentGeom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule) {
  ComVividsolutionsJtsGeomgraphPlanarGraph_init(self);
  ComVividsolutionsJtsGeomgraphGeometryGraph_setAndConsume_lineEdgeMap_(self, new_JavaUtilHashMap_init());
  ComVividsolutionsJtsGeomgraphGeometryGraph_set_boundaryNodeRule_(self, nil);
  self->useBoundaryDeterminationRule_ = YES;
  self->hasTooFewPoints__ = NO;
  ComVividsolutionsJtsGeomgraphGeometryGraph_set_invalidPoint_(self, nil);
  ComVividsolutionsJtsGeomgraphGeometryGraph_set_areaPtLocator_(self, nil);
  ComVividsolutionsJtsGeomgraphGeometryGraph_setAndConsume_ptLocator_(self, new_ComVividsolutionsJtsAlgorithmPointLocator_init());
  self->argIndex_ = argIndex;
  ComVividsolutionsJtsGeomgraphGeometryGraph_set_parentGeom_(self, parentGeom);
  ComVividsolutionsJtsGeomgraphGeometryGraph_set_boundaryNodeRule_(self, boundaryNodeRule);
  if (parentGeom != nil) {
    ComVividsolutionsJtsGeomgraphGeometryGraph_addWithComVividsolutionsJtsGeomGeometry_(self, parentGeom);
  }
}

ComVividsolutionsJtsGeomgraphGeometryGraph *new_ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(jint argIndex, ComVividsolutionsJtsGeomGeometry *parentGeom, id<ComVividsolutionsJtsAlgorithmBoundaryNodeRule> boundaryNodeRule) {
  ComVividsolutionsJtsGeomgraphGeometryGraph *self = [ComVividsolutionsJtsGeomgraphGeometryGraph alloc];
  ComVividsolutionsJtsGeomgraphGeometryGraph_initWithInt_withComVividsolutionsJtsGeomGeometry_withComVividsolutionsJtsAlgorithmBoundaryNodeRule_(self, argIndex, parentGeom, boundaryNodeRule);
  return self;
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomGeometry *g) {
  if ([((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) isEmpty]) return;
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]]) self->useBoundaryDeterminationRule_ = NO;
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonWithComVividsolutionsJtsGeomPolygon_(self, (ComVividsolutionsJtsGeomPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomPolygon class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomLineString class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addLineStringWithComVividsolutionsJtsGeomLineString_(self, (ComVividsolutionsJtsGeomLineString *) check_class_cast(g, [ComVividsolutionsJtsGeomLineString class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomPoint class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addPointWithComVividsolutionsJtsGeomPoint_(self, (ComVividsolutionsJtsGeomPoint *) check_class_cast(g, [ComVividsolutionsJtsGeomPoint class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPoint class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(self, (ComVividsolutionsJtsGeomMultiPoint *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiPoint class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiLineString class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(self, (ComVividsolutionsJtsGeomMultiLineString *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiLineString class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomMultiPolygon class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(self, (ComVividsolutionsJtsGeomMultiPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomMultiPolygon class]));
  else if ([g isKindOfClass:[ComVividsolutionsJtsGeomGeometryCollection class]]) ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(self, (ComVividsolutionsJtsGeomGeometryCollection *) check_class_cast(g, [ComVividsolutionsJtsGeomGeometryCollection class]));
  else @throw [new_JavaLangUnsupportedOperationException_initWithNSString_([[g getClass] getName]) autorelease];
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addCollectionWithComVividsolutionsJtsGeomGeometryCollection_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomGeometryCollection *gc) {
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomGeometryCollection *) nil_chk(gc)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomGeometry *g = [gc getGeometryNWithInt:i];
    ComVividsolutionsJtsGeomgraphGeometryGraph_addWithComVividsolutionsJtsGeomGeometry_(self, g);
  }
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addPointWithComVividsolutionsJtsGeomPoint_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomPoint *p) {
  ComVividsolutionsJtsGeomCoordinate *coord = [((ComVividsolutionsJtsGeomPoint *) nil_chk(p)) getCoordinate];
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, self->argIndex_, coord, ComVividsolutionsJtsGeomLocation_INTERIOR);
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonRingWithComVividsolutionsJtsGeomLinearRing_withInt_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomLinearRing *lr, jint cwLeft, jint cwRight) {
  IOSObjectArray *coord = ComVividsolutionsJtsGeomCoordinateArrays_removeRepeatedPointsWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLinearRing *) nil_chk(lr)) getCoordinates]);
  if (((IOSObjectArray *) nil_chk(coord))->size_ < 4) {
    self->hasTooFewPoints__ = YES;
    ComVividsolutionsJtsGeomgraphGeometryGraph_set_invalidPoint_(self, IOSObjectArray_Get(coord, 0));
    return;
  }
  jint left = cwLeft;
  jint right = cwRight;
  if (ComVividsolutionsJtsAlgorithmCGAlgorithms_isCCWWithComVividsolutionsJtsGeomCoordinateArray_(coord)) {
    left = cwRight;
    right = cwLeft;
  }
  ComVividsolutionsJtsGeomgraphEdge *e = [new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(coord, [new_ComVividsolutionsJtsGeomgraphLabel_initWithInt_withInt_withInt_withInt_(self->argIndex_, ComVividsolutionsJtsGeomLocation_BOUNDARY, left, right) autorelease]) autorelease];
  [((id<JavaUtilMap>) nil_chk(self->lineEdgeMap_)) putWithId:lr withId:e];
  [self insertEdgeWithComVividsolutionsJtsGeomgraphEdge:e];
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, self->argIndex_, IOSObjectArray_Get(coord, 0), ComVividsolutionsJtsGeomLocation_BOUNDARY);
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonWithComVividsolutionsJtsGeomPolygon_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomPolygon *p) {
  ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonRingWithComVividsolutionsJtsGeomLinearRing_withInt_withInt_(self, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([((ComVividsolutionsJtsGeomPolygon *) nil_chk(p)) getExteriorRing], [ComVividsolutionsJtsGeomLinearRing class]), ComVividsolutionsJtsGeomLocation_EXTERIOR, ComVividsolutionsJtsGeomLocation_INTERIOR);
  for (jint i = 0; i < [p getNumInteriorRing]; i++) {
    ComVividsolutionsJtsGeomgraphGeometryGraph_addPolygonRingWithComVividsolutionsJtsGeomLinearRing_withInt_withInt_(self, (ComVividsolutionsJtsGeomLinearRing *) check_class_cast([p getInteriorRingNWithInt:i], [ComVividsolutionsJtsGeomLinearRing class]), ComVividsolutionsJtsGeomLocation_INTERIOR, ComVividsolutionsJtsGeomLocation_EXTERIOR);
  }
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addLineStringWithComVividsolutionsJtsGeomLineString_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, ComVividsolutionsJtsGeomLineString *line) {
  IOSObjectArray *coord = ComVividsolutionsJtsGeomCoordinateArrays_removeRepeatedPointsWithComVividsolutionsJtsGeomCoordinateArray_([((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getCoordinates]);
  if (((IOSObjectArray *) nil_chk(coord))->size_ < 2) {
    self->hasTooFewPoints__ = YES;
    ComVividsolutionsJtsGeomgraphGeometryGraph_set_invalidPoint_(self, IOSObjectArray_Get(coord, 0));
    return;
  }
  ComVividsolutionsJtsGeomgraphEdge *e = [new_ComVividsolutionsJtsGeomgraphEdge_initWithComVividsolutionsJtsGeomCoordinateArray_withComVividsolutionsJtsGeomgraphLabel_(coord, [new_ComVividsolutionsJtsGeomgraphLabel_initWithInt_withInt_(self->argIndex_, ComVividsolutionsJtsGeomLocation_INTERIOR) autorelease]) autorelease];
  [((id<JavaUtilMap>) nil_chk(self->lineEdgeMap_)) putWithId:line withId:e];
  [self insertEdgeWithComVividsolutionsJtsGeomgraphEdge:e];
  ComVividsolutionsJtsUtilAssert_isTrueWithBoolean_withNSString_(coord->size_ >= 2, @"found LineString with single point");
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(self, self->argIndex_, IOSObjectArray_Get(coord, 0));
  ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(self, self->argIndex_, IOSObjectArray_Get(coord, coord->size_ - 1));
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord, jint onLocation) {
  ComVividsolutionsJtsGeomgraphNode *n = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(self->nodes_)) addNodeWithComVividsolutionsJtsGeomCoordinate:coord];
  ComVividsolutionsJtsGeomgraphLabel *lbl = [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(n)) getLabel];
  if (lbl == nil) {
    ComVividsolutionsJtsGeomgraphGraphComponent_setAndConsume_label_(n, new_ComVividsolutionsJtsGeomgraphLabel_initWithInt_withInt_(argIndex, onLocation));
  }
  else [lbl setLocationWithInt:argIndex withInt:onLocation];
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord) {
  ComVividsolutionsJtsGeomgraphNode *n = [((ComVividsolutionsJtsGeomgraphNodeMap *) nil_chk(self->nodes_)) addNodeWithComVividsolutionsJtsGeomCoordinate:coord];
  ComVividsolutionsJtsGeomgraphLabel *lbl = [((ComVividsolutionsJtsGeomgraphNode *) nil_chk(n)) getLabel];
  jint boundaryCount = 1;
  jint loc = ComVividsolutionsJtsGeomLocation_NONE;
  if (lbl != nil) loc = [lbl getLocationWithInt:argIndex withInt:ComVividsolutionsJtsGeomgraphPosition_ON];
  if (loc == ComVividsolutionsJtsGeomLocation_BOUNDARY) boundaryCount++;
  jint newLoc = ComVividsolutionsJtsGeomgraphGeometryGraph_determineBoundaryWithComVividsolutionsJtsAlgorithmBoundaryNodeRule_withInt_(self->boundaryNodeRule_, boundaryCount);
  [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk(lbl)) setLocationWithInt:argIndex withInt:newLoc];
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodesWithInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex) {
  for (id<JavaUtilIterator> i = [((id<JavaUtilList>) nil_chk(self->edges_)) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    ComVividsolutionsJtsGeomgraphEdge *e = (ComVividsolutionsJtsGeomgraphEdge *) check_class_cast([i next], [ComVividsolutionsJtsGeomgraphEdge class]);
    jint eLoc = [((ComVividsolutionsJtsGeomgraphLabel *) nil_chk([((ComVividsolutionsJtsGeomgraphEdge *) nil_chk(e)) getLabel])) getLocationWithInt:argIndex];
    for (id<JavaUtilIterator> eiIt = [((ComVividsolutionsJtsGeomgraphEdgeIntersectionList *) nil_chk(e->eiList_)) iterator]; [((id<JavaUtilIterator>) nil_chk(eiIt)) hasNext]; ) {
      ComVividsolutionsJtsGeomgraphEdgeIntersection *ei = (ComVividsolutionsJtsGeomgraphEdgeIntersection *) check_class_cast([eiIt next], [ComVividsolutionsJtsGeomgraphEdgeIntersection class]);
      ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodeWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex, ((ComVividsolutionsJtsGeomgraphEdgeIntersection *) nil_chk(ei))->coord_, eLoc);
    }
  }
}

void ComVividsolutionsJtsGeomgraphGeometryGraph_addSelfIntersectionNodeWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(ComVividsolutionsJtsGeomgraphGeometryGraph *self, jint argIndex, ComVividsolutionsJtsGeomCoordinate *coord, jint loc) {
  if ([self isBoundaryNodeWithInt:argIndex withComVividsolutionsJtsGeomCoordinate:coord]) return;
  if (loc == ComVividsolutionsJtsGeomLocation_BOUNDARY && self->useBoundaryDeterminationRule_) ComVividsolutionsJtsGeomgraphGeometryGraph_insertBoundaryPointWithInt_withComVividsolutionsJtsGeomCoordinate_(self, argIndex, coord);
  else ComVividsolutionsJtsGeomgraphGeometryGraph_insertPointWithInt_withComVividsolutionsJtsGeomCoordinate_withInt_(self, argIndex, coord, loc);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomgraphGeometryGraph)
