//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMatrixPlot.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMatrixPlot.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCanvasImage.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/util/GgbMat.h"

@interface GeogebraCommonKernelAlgosAlgoMatrixPlot () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoCanvasImage *outputImage_;
  jint size_;
  jint rowCount_;
  jint columnCount_;
  IOSObjectArray *data_;
}

- (void)drawPlot;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMatrixPlot, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMatrixPlot, outputImage_, GeogebraCommonKernelGeosGeoCanvasImage *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMatrixPlot, data_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMatrixPlot_compute(GeogebraCommonKernelAlgosAlgoMatrixPlot *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(GeogebraCommonKernelAlgosAlgoMatrixPlot *self);

@implementation GeogebraCommonKernelAlgosAlgoMatrixPlot

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_MatrixPlot();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputImage_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoCanvasImage *)getResult {
  return outputImage_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoMatrixPlot_compute(self);
}

- (void)drawPlot {
  GeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputImage_);
  RELEASE_(data_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoMatrixPlot", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoMatrixPlot", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoCanvasImage;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "drawPlot", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputImage_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCanvasImage;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "rowCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "columnCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "data_", NULL, 0x2, "[[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMatrixPlot = { 2, "AlgoMatrixPlot", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMatrixPlot;
}

@end

void GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMatrixPlot *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  [((GeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMatrixPlot *new_GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMatrixPlot *self = [GeogebraCommonKernelAlgosAlgoMatrixPlot alloc];
  GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMatrixPlot *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMatrixPlot_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoMatrixPlot_setAndConsume_outputImage_(self, new_GeogebraCommonKernelGeosGeoCanvasImage_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoMatrixPlot_compute(self);
}

GeogebraCommonKernelAlgosAlgoMatrixPlot *new_GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMatrixPlot *self = [GeogebraCommonKernelAlgosAlgoMatrixPlot alloc];
  GeogebraCommonKernelAlgosAlgoMatrixPlot_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMatrixPlot_compute(GeogebraCommonKernelAlgosAlgoMatrixPlot *self) {
  GeogebraCommonUtilGgbMat *matrix = [new_GeogebraCommonUtilGgbMat_initWithGeogebraCommonKernelGeosGeoList_(self->inputList_) autorelease];
  if ([matrix isUndefined]) {
    [((GeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) setUndefined];
    return;
  }
  GeogebraCommonKernelAlgosAlgoMatrixPlot_set_data_(self, [matrix getData]);
  GeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(self);
}

void GeogebraCommonKernelAlgosAlgoMatrixPlot_drawPlot(GeogebraCommonKernelAlgosAlgoMatrixPlot *self) {
  id<GeogebraCommonAwtGGraphics2D> g = [((GeogebraCommonKernelGeosGeoCanvasImage *) nil_chk(self->outputImage_)) getGraphics];
  jint width = [self->outputImage_ getWidth];
  jint height = [self->outputImage_ getHeight];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g)) setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonAwtGColor_get_white_()];
  [g fillRectWithInt:0 withInt:0 withInt:width withInt:height];
  jint rowStep = height / ((IOSObjectArray *) nil_chk(self->data_))->size_;
  jint columnStep = width / ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(self->data_, 0)))->size_;
  for (jint row = 0; row < self->data_->size_; row += 1) {
    for (jint col = 0; col < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(self->data_, 0)))->size_; col += 1) {
      jint c = J2ObjCFpToInt((IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->data_, row)), col) * 256)) % 256;
      [g setColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:c withInt:c withInt:c withInt:150]];
      [g fillRectWithInt:columnStep * (col) withInt:rowStep * (row) withInt:columnStep withInt:rowStep];
    }
  }
  [g setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonAwtGColor_get_black_()];
  for (jint row = 0; row <= height; row += rowStep) {
    [g drawLineWithInt:0 withInt:row withInt:width withInt:row];
  }
  for (jint col = 0; col <= width; col += columnStep) {
    [g drawLineWithInt:col withInt:0 withInt:col withInt:height];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMatrixPlot)
