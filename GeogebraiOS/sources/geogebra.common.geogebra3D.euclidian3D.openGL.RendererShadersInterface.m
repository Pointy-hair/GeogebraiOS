//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/openGL/RendererShadersInterface.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/GLBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/RendererShadersInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface : NSObject
@end

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "loadColorBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:withInt:", "loadColorBuffer", "V", 0x401, NULL, NULL },
    { "loadNormalBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:withInt:", "loadNormalBuffer", "V", 0x401, NULL, NULL },
    { "loadTextureBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:withInt:", "loadTextureBuffer", "V", 0x401, NULL, NULL },
    { "loadVertexBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:withInt:", "loadVertexBuffer", "V", 0x401, NULL, NULL },
    { "setCenterWithGeogebraCommonKernelMatrixCoords:", "setCenter", "V", 0x401, NULL, NULL },
    { "resetCenter", NULL, "V", 0x401, NULL, NULL },
    { "areTexturesEnabled", NULL, "Z", 0x401, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:withInt:", "draw", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface = { 2, "RendererShadersInterface", "geogebra.common.geogebra3D.euclidian3D.openGL", NULL, 0x609, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface)
