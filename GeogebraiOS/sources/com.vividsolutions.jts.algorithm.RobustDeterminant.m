//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/algorithm/RobustDeterminant.java
//


#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/RobustDeterminant.h"
#include "java/lang/Math.h"

@implementation ComVividsolutionsJtsAlgorithmRobustDeterminant

+ (jint)signOfDet2x2WithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2 {
  return ComVividsolutionsJtsAlgorithmRobustDeterminant_signOfDet2x2WithDouble_withDouble_withDouble_withDouble_(x1, y1, x2, y2);
}

- (instancetype)init {
  ComVividsolutionsJtsAlgorithmRobustDeterminant_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "signOfDet2x2WithDouble:withDouble:withDouble:withDouble:", "signOfDet2x2", "I", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsAlgorithmRobustDeterminant = { 2, "RobustDeterminant", "com.vividsolutions.jts.algorithm", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsAlgorithmRobustDeterminant;
}

@end

jint ComVividsolutionsJtsAlgorithmRobustDeterminant_signOfDet2x2WithDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  ComVividsolutionsJtsAlgorithmRobustDeterminant_initialize();
  jint sign;
  jdouble swap;
  jdouble k;
  jlong count = 0;
  sign = 1;
  if ((x1 == 0.0) || (y2 == 0.0)) {
    if ((y1 == 0.0) || (x2 == 0.0)) {
      return 0;
    }
    else if (y1 > 0) {
      if (x2 > 0) {
        return -sign;
      }
      else {
        return sign;
      }
    }
    else {
      if (x2 > 0) {
        return sign;
      }
      else {
        return -sign;
      }
    }
  }
  if ((y1 == 0.0) || (x2 == 0.0)) {
    if (y2 > 0) {
      if (x1 > 0) {
        return sign;
      }
      else {
        return -sign;
      }
    }
    else {
      if (x1 > 0) {
        return -sign;
      }
      else {
        return sign;
      }
    }
  }
  if (0.0 < y1) {
    if (0.0 < y2) {
      if (y1 <= y2) {
        ;
      }
      else {
        sign = -sign;
        swap = x1;
        x1 = x2;
        x2 = swap;
        swap = y1;
        y1 = y2;
        y2 = swap;
      }
    }
    else {
      if (y1 <= -y2) {
        sign = -sign;
        x2 = -x2;
        y2 = -y2;
      }
      else {
        swap = x1;
        x1 = -x2;
        x2 = swap;
        swap = y1;
        y1 = -y2;
        y2 = swap;
      }
    }
  }
  else {
    if (0.0 < y2) {
      if (-y1 <= y2) {
        sign = -sign;
        x1 = -x1;
        y1 = -y1;
      }
      else {
        swap = -x1;
        x1 = x2;
        x2 = swap;
        swap = -y1;
        y1 = y2;
        y2 = swap;
      }
    }
    else {
      if (y1 >= y2) {
        x1 = -x1;
        y1 = -y1;
        x2 = -x2;
        y2 = -y2;
        ;
      }
      else {
        sign = -sign;
        swap = -x1;
        x1 = -x2;
        x2 = swap;
        swap = -y1;
        y1 = -y2;
        y2 = swap;
      }
    }
  }
  if (0.0 < x1) {
    if (0.0 < x2) {
      if (x1 <= x2) {
        ;
      }
      else {
        return sign;
      }
    }
    else {
      return sign;
    }
  }
  else {
    if (0.0 < x2) {
      return -sign;
    }
    else {
      if (x1 >= x2) {
        sign = -sign;
        x1 = -x1;
        x2 = -x2;
        ;
      }
      else {
        return -sign;
      }
    }
  }
  while (YES) {
    count = count + 1;
    k = JavaLangMath_floorWithDouble_(x2 / x1);
    x2 = x2 - k * x1;
    y2 = y2 - k * y1;
    if (y2 < 0.0) {
      return -sign;
    }
    if (y2 > y1) {
      return sign;
    }
    if (x1 > x2 + x2) {
      if (y1 < y2 + y2) {
        return sign;
      }
    }
    else {
      if (y1 > y2 + y2) {
        return -sign;
      }
      else {
        x2 = x1 - x2;
        y2 = y1 - y2;
        sign = -sign;
      }
    }
    if (y2 == 0.0) {
      if (x2 == 0.0) {
        return 0;
      }
      else {
        return -sign;
      }
    }
    if (x2 == 0.0) {
      return sign;
    }
    k = JavaLangMath_floorWithDouble_(x1 / x2);
    x1 = x1 - k * x2;
    y1 = y1 - k * y2;
    if (y1 < 0.0) {
      return sign;
    }
    if (y1 > y2) {
      return -sign;
    }
    if (x2 > x1 + x1) {
      if (y2 < y1 + y1) {
        return -sign;
      }
    }
    else {
      if (y2 > y1 + y1) {
        return sign;
      }
      else {
        x1 = x2 - x1;
        y1 = y2 - y1;
        sign = -sign;
      }
    }
    if (y1 == 0.0) {
      if (x1 == 0.0) {
        return 0;
      }
      else {
        return sign;
      }
    }
    if (x1 == 0.0) {
      return -sign;
    }
  }
}

void ComVividsolutionsJtsAlgorithmRobustDeterminant_init(ComVividsolutionsJtsAlgorithmRobustDeterminant *self) {
  NSObject_init(self);
}

ComVividsolutionsJtsAlgorithmRobustDeterminant *new_ComVividsolutionsJtsAlgorithmRobustDeterminant_init() {
  ComVividsolutionsJtsAlgorithmRobustDeterminant *self = [ComVividsolutionsJtsAlgorithmRobustDeterminant alloc];
  ComVividsolutionsJtsAlgorithmRobustDeterminant_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsAlgorithmRobustDeterminant)
