//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/DataSource.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "geogebra/common/gui/view/data/DataItem.h"
#include "geogebra/common/gui/view/data/DataSource.h"
#include "geogebra/common/gui/view/data/DataVariable.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "geogebra/common/gui/view/spreadsheet/MyTable.h"
#include "geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "geogebra/common/kernel/View.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

#define GeogebraCommonGuiViewDataDataSource_serialVersionUID 1LL

@interface GeogebraCommonGuiViewDataDataSource () {
 @public
  GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *defaultGroupType_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonMainSelectionManager *selection_;
  JavaUtilArrayList *dataList_;
  jint selectedIndex_;
}

- (id<GeogebraCommonGuiViewSpreadsheetMyTable>)spreadsheetTable;

- (GeogebraCommonGuiViewDataDataItem *)createDataItemFromGeoSelection;

- (void)setDataListFromGeoListWithInt:(jint)mode;

- (void)setDataListFromSpreadsheetWithInt:(jint)mode
withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType;

+ (void)add1DCellRangesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                       withJavaUtilArrayList:(JavaUtilArrayList *)itemList;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataSource, defaultGroupType_, GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataSource, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataSource, selection_, GeogebraCommonMainSelectionManager *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataSource, dataList_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewDataDataSource, serialVersionUID, jlong)

__attribute__((unused)) static id<GeogebraCommonGuiViewSpreadsheetMyTable> GeogebraCommonGuiViewDataDataSource_spreadsheetTable(GeogebraCommonGuiViewDataDataSource *self);

__attribute__((unused)) static GeogebraCommonGuiViewDataDataItem *GeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(GeogebraCommonGuiViewDataDataSource *self);

__attribute__((unused)) static void GeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(GeogebraCommonGuiViewDataDataSource *self, jint mode);

__attribute__((unused)) static void GeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(GeogebraCommonGuiViewDataDataSource *self, jint mode, GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *groupType);

__attribute__((unused)) static void GeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *rangeList, JavaUtilArrayList *itemList);

@implementation GeogebraCommonGuiViewDataDataSource

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiViewDataDataSource_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(dataList_)) size] == 0;
}

- (void)clearData {
  [((JavaUtilArrayList *) nil_chk(dataList_)) clear];
}

- (jint)getSelectedIndex {
  return selectedIndex_;
}

- (void)setSelectedIndexWithInt:(jint)selectedIndex {
  self->selectedIndex_ = selectedIndex;
}

- (jboolean)enableHeader {
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) enableHeader];
}

- (void)setEnableHeaderWithBoolean:(jboolean)enableHeader {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setEnableHeaderWithBoolean:enableHeader];
}

- (jboolean)isNumericData {
  if ([self getSelectedDataVariable] == nil) {
    return NO;
  }
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass] == GeogebraCommonPluginGeoClassEnum_get_NUMERIC();
}

- (void)setNumericDataWithBoolean:(jboolean)isNumericData {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setGeoClassWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClass {
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass];
}

- (void)setGeoClassWithGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClass {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setGeoClassWithGeogebraCommonPluginGeoClassEnum:geoClass];
}

- (jboolean)isPointData {
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGeoClass] == GeogebraCommonPluginGeoClassEnum_get_POINT();
}

- (GeogebraCommonGuiViewDataDataVariable *)getDataVariableWithInt:(jint)index {
  return [((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:index];
}

- (GeogebraCommonGuiViewDataDataVariable *)getSelectedDataVariable {
  if (selectedIndex_ >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  return [dataList_ getWithInt:selectedIndex_];
}

- (GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)getGroupType {
  if ([self isEmpty]) {
    return GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA();
  }
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getGroupType];
}

- (GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)getGroupTypeWithInt:(jint)varIndex {
  if (varIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA();
  }
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:varIndex])) getGroupType];
}

- (void)setGroupTypeWithGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType
                                                                    withInt:(jint)varIndex {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:varIndex])) setGroupTypeWithGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:groupType];
}

- (jdouble)getClassStart {
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getClassStart];
}

- (void)setClassStartWithDouble:(jdouble)classStart {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setClassStartWithDouble:classStart];
}

- (jdouble)getClassWidth {
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getClassWidth];
}

- (void)setClassWidthWithDouble:(jdouble)classWidth {
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) setClassWidthWithDouble:classWidth];
}

- (GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)crProcessorWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  return [((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(GeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getCellRangeProcessor];
}

- (id<GeogebraCommonGuiViewSpreadsheetMyTable>)spreadsheetTable {
  return GeogebraCommonGuiViewDataDataSource_spreadsheetTable(self);
}

- (void)setDataItemToGeoSelectionWithInt:(jint)dataIndex
                                 withInt:(jint)itemIndex {
  if ([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:dataIndex] == nil) {
    return;
  }
  [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) setDataItemWithInt:itemIndex withGeogebraCommonGuiViewDataDataItem:GeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(self)];
}

- (GeogebraCommonGuiViewDataDataItem *)createDataItemFromGeoSelection {
  return GeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(self);
}

- (IOSObjectArray *)getTableData {
  return [self getTableDataWithInt:[self getSelectedIndex]];
}

- (IOSObjectArray *)getTableDataWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getStringData]];
  jint rowCount = 0;
  for (IOSObjectArray * __strong s in list) {
    rowCount = JavaLangMath_maxWithInt_withInt_(rowCount, ((IOSObjectArray *) nil_chk(s))->size_);
  }
  IOSObjectArray *data = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, [list size] } type:NSString_class_()];
  for (jint c = 0; c < [list size]; c++) {
    for (jint r = 0; r < ((IOSObjectArray *) nil_chk([list getWithInt:c]))->size_; r++) {
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(data, r)), c, IOSObjectArray_Get(nil_chk([list getWithInt:c]), r));
    }
  }
  return data;
}

- (IOSObjectArray *)getTitles {
  return [self getTitlesWithInt:[self getSelectedIndex]];
}

- (IOSObjectArray *)getTitlesWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  [list addAllWithJavaUtilCollection:[((GeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getTitlesWithGeogebraCommonMainApp:app_]];
  IOSObjectArray *s = [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[list size] type:NSString_class_()]];
  return s;
}

- (IOSObjectArray *)getDescriptions {
  JavaUtilArrayList *list = [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([self getSelectedDataVariable])) getColumnNames];
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(list)) size] type:NSString_class_()]];
}

- (IOSObjectArray *)getDescriptionsWithInt:(jint)dataIndex {
  if (dataIndex >= [((JavaUtilArrayList *) nil_chk(dataList_)) size]) {
    return nil;
  }
  JavaUtilArrayList *list = [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([dataList_ getWithInt:dataIndex])) getColumnNames];
  return [list toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(list)) size] type:NSString_class_()]];
}

- (JavaUtilArrayList *)toGeoListWithInt:(jint)mode
                            withBoolean:(jboolean)leftToRight
                            withBoolean:(jboolean)doCopy {
  return [self toGeoListWithInt:mode withBoolean:leftToRight withBoolean:doCopy withInt:[self getSelectedIndex]];
}

- (JavaUtilArrayList *)toGeoListWithInt:(jint)mode
                            withBoolean:(jboolean)leftToRight
                            withBoolean:(jboolean)doCopy
                                withInt:(jint)dataIndex {
  if (dataList_ == nil || [dataList_ size] == 0) {
    return nil;
  }
  return [((GeogebraCommonGuiViewDataDataVariable *) nil_chk([((JavaUtilArrayList *) nil_chk(dataList_)) getWithInt:dataIndex])) getGeoListDataWithGeogebraCommonMainApp:app_ withInt:mode withBoolean:leftToRight withBoolean:doCopy];
}

- (JavaUtilArrayList *)toGeoListAllWithInt:(jint)mode
                               withBoolean:(jboolean)leftToRight
                               withBoolean:(jboolean)doCopy {
  if (dataList_ == nil || [dataList_ size] == 0) {
    return nil;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonGuiViewDataDataVariable * __strong var in nil_chk(dataList_)) {
    [list addAllWithJavaUtilCollection:[((GeogebraCommonGuiViewDataDataVariable *) nil_chk(var)) getGeoListDataWithGeogebraCommonMainApp:app_ withInt:mode withBoolean:leftToRight withBoolean:doCopy]];
  }
  return list;
}

- (void)setDataListFromSelectionWithInt:(jint)mode {
  [((JavaUtilArrayList *) nil_chk(dataList_)) clear];
  if ([((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos] == nil || [((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) size] == 0) {
    return;
  }
  @try {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) getWithInt:0])) getSpreadsheetCoords] != nil) {
      GeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(self, mode, defaultGroupType_);
    }
    else {
      GeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(self, mode);
    }
    return;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return;
}

- (void)setDataListFromGeoListWithInt:(jint)mode {
  GeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(self, mode);
}

- (void)setDataListFromSpreadsheetWithInt:(jint)mode
withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:(GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *)groupType {
  GeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(self, mode, groupType);
}

+ (void)add1DCellRangesWithJavaUtilArrayList:(JavaUtilArrayList *)rangeList
                       withJavaUtilArrayList:(JavaUtilArrayList *)itemList {
  GeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(rangeList, itemList);
}

- (jboolean)isInDataSourceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  for (GeogebraCommonGuiViewDataDataVariable * __strong var in nil_chk(dataList_)) {
    if ([((GeogebraCommonGuiViewDataDataVariable *) nil_chk(var)) isInDataSourceWithGeogebraCommonKernelGeosGeoElement:geo]) {
      return YES;
    }
  }
  return NO;
}

- (void)dealloc {
  RELEASE_(defaultGroupType_);
  RELEASE_(app_);
  RELEASE_(selection_);
  RELEASE_(dataList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "DataSource", NULL, 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "clearData", NULL, "V", 0x1, NULL, NULL },
    { "getSelectedIndex", NULL, "I", 0x1, NULL, NULL },
    { "setSelectedIndexWithInt:", "setSelectedIndex", "V", 0x1, NULL, NULL },
    { "enableHeader", NULL, "Z", 0x1, NULL, NULL },
    { "setEnableHeaderWithBoolean:", "setEnableHeader", "V", 0x1, NULL, NULL },
    { "isNumericData", NULL, "Z", 0x1, NULL, NULL },
    { "setNumericDataWithBoolean:", "setNumericData", "V", 0x1, NULL, NULL },
    { "getGeoClass", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setGeoClassWithGeogebraCommonPluginGeoClassEnum:", "setGeoClass", "V", 0x1, NULL, NULL },
    { "isPointData", NULL, "Z", 0x1, NULL, NULL },
    { "getDataVariableWithInt:", "getDataVariable", "Lgeogebra.common.gui.view.data.DataVariable;", 0x1, NULL, NULL },
    { "getSelectedDataVariable", NULL, "Lgeogebra.common.gui.view.data.DataVariable;", 0x1, NULL, NULL },
    { "getGroupType", NULL, "Lgeogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "getGroupTypeWithInt:", "getGroupType", "Lgeogebra.common.gui.view.data.DataVariable$GroupType;", 0x1, NULL, NULL },
    { "setGroupTypeWithGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:withInt:", "setGroupType", "V", 0x1, NULL, NULL },
    { "getClassStart", NULL, "D", 0x1, NULL, NULL },
    { "setClassStartWithDouble:", "setClassStart", "V", 0x1, NULL, NULL },
    { "getClassWidth", NULL, "D", 0x1, NULL, NULL },
    { "setClassWidthWithDouble:", "setClassWidth", "V", 0x1, NULL, NULL },
    { "crProcessorWithGeogebraCommonMainApp:", "crProcessor", "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor;", 0x4, NULL, NULL },
    { "spreadsheetTable", NULL, "Lgeogebra.common.gui.view.spreadsheet.MyTable;", 0x2, NULL, NULL },
    { "setDataItemToGeoSelectionWithInt:withInt:", "setDataItemToGeoSelection", "V", 0x1, NULL, NULL },
    { "createDataItemFromGeoSelection", NULL, "Lgeogebra.common.gui.view.data.DataItem;", 0x2, NULL, NULL },
    { "getTableData", NULL, "[[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTableDataWithInt:", "getTableData", "[[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitles", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitlesWithInt:", "getTitles", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDescriptions", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDescriptionsWithInt:", "getDescriptions", "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "toGeoListWithInt:withBoolean:withBoolean:", "toGeoList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoListWithInt:withBoolean:withBoolean:withInt:", "toGeoList", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "toGeoListAllWithInt:withBoolean:withBoolean:", "toGeoListAll", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setDataListFromSelectionWithInt:", "setDataListFromSelection", "V", 0x1, NULL, NULL },
    { "setDataListFromGeoListWithInt:", "setDataListFromGeoList", "V", 0x2, NULL, NULL },
    { "setDataListFromSpreadsheetWithInt:withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum:", "setDataListFromSpreadsheet", "V", 0x2, NULL, NULL },
    { "add1DCellRangesWithJavaUtilArrayList:withJavaUtilArrayList:", "add1DCellRanges", "V", 0xa, NULL, NULL },
    { "isInDataSourceWithGeogebraCommonKernelGeosGeoElement:", "isInDataSource", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGuiViewDataDataSource_serialVersionUID },
    { "defaultGroupType_", NULL, 0x2, "Lgeogebra.common.gui.view.data.DataVariable$GroupType;", NULL, NULL,  },
    { "app_", NULL, 0x12, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x12, "Lgeogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "dataList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/gui/view/data/DataVariable;>;",  },
    { "selectedIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataDataSource = { 2, "DataSource", "geogebra.common.gui.view.data", NULL, 0x1, 39, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataDataSource;
}

@end

void GeogebraCommonGuiViewDataDataSource_initWithGeogebraCommonMainApp_(GeogebraCommonGuiViewDataDataSource *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  GeogebraCommonGuiViewDataDataSource_set_defaultGroupType_(self, GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_get_RAWDATA());
  GeogebraCommonGuiViewDataDataSource_set_app_(self, app);
  GeogebraCommonGuiViewDataDataSource_set_selection_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getSelectionManager]);
  GeogebraCommonGuiViewDataDataSource_setAndConsume_dataList_(self, new_JavaUtilArrayList_init());
  self->selectedIndex_ = 0;
}

GeogebraCommonGuiViewDataDataSource *new_GeogebraCommonGuiViewDataDataSource_initWithGeogebraCommonMainApp_(GeogebraCommonMainApp *app) {
  GeogebraCommonGuiViewDataDataSource *self = [GeogebraCommonGuiViewDataDataSource alloc];
  GeogebraCommonGuiViewDataDataSource_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

id<GeogebraCommonGuiViewSpreadsheetMyTable> GeogebraCommonGuiViewDataDataSource_spreadsheetTable(GeogebraCommonGuiViewDataDataSource *self) {
  id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> spvi = (id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) check_protocol_cast([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk(([((GeogebraCommonMainApp *) nil_chk(self->app_)) getGuiManager]))) getSpreadsheetView], @protocol(GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface));
  return (id<GeogebraCommonGuiViewSpreadsheetMyTable>) check_protocol_cast([((id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk(spvi)) getSpreadsheetTable], @protocol(GeogebraCommonGuiViewSpreadsheetMyTable));
}

GeogebraCommonGuiViewDataDataItem *GeogebraCommonGuiViewDataDataSource_createDataItemFromGeoSelection(GeogebraCommonGuiViewDataDataSource *self) {
  if ([((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) getSelectedGeos] == nil || [((JavaUtilArrayList *) nil_chk([self->selection_ getSelectedGeos])) size] == 0) {
    return nil;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk([self->selection_ getSelectedGeos])) getWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
    return [new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonKernelGeosGeoList_((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) autorelease];
  }
  else if ([geo getSpreadsheetCoords] != nil) {
    return [new_GeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(GeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getSelectedCellRanges])) autorelease];
  }
  return nil;
}

void GeogebraCommonGuiViewDataDataSource_setDataListFromGeoListWithInt_(GeogebraCommonGuiViewDataDataSource *self, jint mode) {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk(self->selection_)) getSelectedGeos])) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList] && ![((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) isMatrix]) {
      [list addWithId:(GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])];
    }
  }
  if ([list size] == 0) {
    return;
  }
  JavaUtilArrayList *itemList = [new_JavaUtilArrayList_init() autorelease];
  GeogebraCommonGuiViewDataDataVariable *var = [new_GeogebraCommonGuiViewDataDataVariable_initWithGeogebraCommonMainApp_(self->app_) autorelease];
  switch (mode) {
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
    [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
    [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
    if ([((GeogebraCommonKernelGeosGeoList *) nil_chk([list getWithInt:0])) getElementType] == GeogebraCommonPluginGeoClassEnum_get_POINT()) {
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
      [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_POINT() withJavaUtilArrayList:itemList];
    }
    else {
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonKernelGeosGeoList_([list getWithInt:0]) autorelease]];
      if ([list size] == 1) {
        [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_init() autorelease]];
      }
      [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    }
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
    for (GeogebraCommonKernelGeosGeoList * __strong geo in list) {
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonKernelGeosGeoList_(geo) autorelease]];
    }
    [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
    break;
  }
  [((JavaUtilArrayList *) nil_chk(self->dataList_)) addWithId:var];
}

void GeogebraCommonGuiViewDataDataSource_setDataListFromSpreadsheetWithInt_withGeogebraCommonGuiViewDataDataVariable_GroupTypeEnum_(GeogebraCommonGuiViewDataDataSource *self, jint mode, GeogebraCommonGuiViewDataDataVariable_GroupTypeEnum *groupType) {
  JavaUtilArrayList *rangeList = GeogebraCommonGuiViewSpreadsheetCellRangeProcessor_cloneWithJavaUtilArrayList_([((id<GeogebraCommonGuiViewSpreadsheetMyTable>) nil_chk(GeogebraCommonGuiViewDataDataSource_spreadsheetTable(self))) getSelectedCellRanges]);
  GeogebraCommonGuiViewDataDataVariable *var = [new_GeogebraCommonGuiViewDataDataVariable_initWithGeogebraCommonMainApp_(self->app_) autorelease];
  JavaUtilArrayList *itemList = [new_JavaUtilArrayList_init() autorelease];
  {
    jboolean hasPoint;
    JavaUtilArrayList *r;
    switch (mode) {
      case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(rangeList) autorelease]];
      [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      break;
      case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
      hasPoint = [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk([self crProcessorWithGeogebraCommonMainApp:self->app_])) containsGeoClassWithJavaUtilArrayList:rangeList withGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_POINT()];
      if (hasPoint) {
        [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithJavaUtilArrayList_(rangeList) autorelease]];
        [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_POINT() withJavaUtilArrayList:itemList];
      }
      else {
        GeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(rangeList, itemList);
        if ([itemList size] < 2) {
          [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_init() autorelease]];
        }
        [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      }
      break;
      case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
      for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr in nil_chk(rangeList)) {
        if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk(cr)) isRow] || [cr isPartialRow]) {
          r = [cr toPartialRowList];
          for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr2 in nil_chk(r)) {
            [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_(cr2) autorelease]];
          }
        }
        else {
          r = [cr toPartialColumnList];
          for (GeogebraCommonGuiViewSpreadsheetCellRange * __strong cr2 in nil_chk(r)) {
            [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_(cr2) autorelease]];
          }
        }
      }
      [var setDataVariableAsRawDataWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_NUMERIC() withJavaUtilArrayList:itemList];
      break;
    }
  }
  [((JavaUtilArrayList *) nil_chk(self->dataList_)) addWithId:var];
}

void GeogebraCommonGuiViewDataDataSource_add1DCellRangesWithJavaUtilArrayList_withJavaUtilArrayList_(JavaUtilArrayList *rangeList, JavaUtilArrayList *itemList) {
  GeogebraCommonGuiViewDataDataSource_initialize();
  JavaUtilArrayList *r = nil;
  jboolean scanByColumn = IOSIntArray_Get(nil_chk([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk(rangeList)) getWithInt:0])) getActualDimensions]), 1) <= 2;
  if ([rangeList size] == 1) {
    if (scanByColumn) {
      r = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialColumnList];
    }
    else {
      r = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialRowList];
    }
    if (r != nil) {
      if ([r size] > 0) [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([r getWithInt:0]) autorelease]];
      if ([r size] > 1) [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([r getWithInt:1]) autorelease]];
    }
  }
  else if ([rangeList size] == 2) {
    if (scanByColumn) {
      [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialColumnList])) getWithInt:0]) autorelease]];
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) toPartialColumnList])) getWithInt:0]) autorelease]];
    }
    else {
      [((JavaUtilArrayList *) nil_chk(itemList)) addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:0])) toPartialRowList])) getWithInt:0]) autorelease]];
      [itemList addWithId:[new_GeogebraCommonGuiViewDataDataItem_initWithGeogebraCommonGuiViewSpreadsheetCellRange_([((JavaUtilArrayList *) nil_chk([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([rangeList getWithInt:1])) toPartialRowList])) getWithInt:0]) autorelease]];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataDataSource)
