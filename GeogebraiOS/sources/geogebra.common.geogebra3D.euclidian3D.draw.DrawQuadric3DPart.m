//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3DPart.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3DPart.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterSurface.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view
                  withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)quadric {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self, view, quadric);
  return self;
}

- (IOSDoubleArray *)getMinMax {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class]);
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(quadric)) getMinParameterWithInt:1], [quadric getMaxParameterWithInt:1] } count:2];
}

- (void)setSurfaceVWithFloat:(jfloat)min
                   withFloat:(jfloat)max
withGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) setVWithFloat:min withFloat:max];
  [surface setNbVWithInt:3];
}

- (void)updateForView {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class]);
  switch ([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk(quadric)) getType]) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
      jint l = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager])) getLongitudeWithDouble:[quadric getHalfAxisWithInt:0] withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
      if (longitude_ != l) {
        [self updateForItSelf];
      }
    }
    break;
  }
}

- (jboolean)doHighlighting {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getMetasLength] > 0) {
    {
      IOSObjectArray *a__ = [((id<GeogebraCommonKernelGeosFromMeta>) nil_chk(((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelGeosFromMeta))))) getMetas];
      GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *meta = *b__++;
        if (meta != nil && [meta doHighlighting]) return YES;
      }
    }
  }
  return [super doHighlighting];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:", "DrawQuadric3DPart", NULL, 0x1, NULL, NULL },
    { "getMinMax", NULL, "[D", 0x4, NULL, NULL },
    { "setSurfaceVWithFloat:withFloat:withGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "setSurfaceV", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart = { 2, "DrawQuadric3DPart", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, view, quadric);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *quadric) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self, view, quadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart)
