//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoLine.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "geogebra/common/kernel/algos/TangentAlgo.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/MyMath.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelGeosGeoLine () {
 @public
  jboolean showUndefinedInAlgebraView__;
  NSString *parameter_;
  GeogebraCommonKernelPathParameter *tempPP_;
  JavaLangStringBuilder *sbToString_GeoLine_;
  JavaLangStringBuilder *sbBuildValueString_;
}

- (JavaLangStringBuilder *)getSbToString;

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (JavaLangStringBuilder *)getSbBuildValueString;

- (void)doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P;

- (GeogebraCommonKernelMatrixCoords *)getStartCoordsInDWithInt:(jint)dimension;

- (GeogebraCommonKernelMatrixCoords *)getDirectionInDWithInt:(jint)dimension;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine, parameter_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine, tempPP_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine, sbToString_GeoLine_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine, sbBuildValueString_, JavaLangStringBuilder *)

static jboolean GeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ = YES;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoLine, KEEP_LEADING_SIGN_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelGeosGeoLine, KEEP_LEADING_SIGN_, jboolean)

static IOSObjectArray *GeogebraCommonKernelGeosGeoLine_vars_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoLine, vars_, IOSObjectArray *)

static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_sbToStringLHS_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoLine, sbToStringLHS_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine, sbToStringLHS_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoLine *self, jdouble x, jdouble y, jdouble z);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelGeosGeoPoint_withDouble_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoPoint *P, jdouble eps);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelMatrixCoords *Pnd, jdouble eps);

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoLine_isParallelWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoLine *g);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoLine_distanceWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoLine *g);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(GeogebraCommonKernelGeosGeoLine *self, IOSDoubleArray *p);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_setStandardStartPoint(GeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelGeosGeoLine_getStartPoint(GeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelGeosGeoLine_getEndPoint(GeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_setModeWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint mode);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_getSbToString(GeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_getSbBuildValueString(GeogebraCommonKernelGeosGeoLine *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelGeosGeoLine *self, id<GeogebraCommonKernelKernelNDGeoPointND> P);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint dimension);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoords *GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint dimension);

@interface GeogebraCommonKernelGeosGeoLine_PathMoverLine : GeogebraCommonKernelPathMoverGeneric {
 @public
  GeogebraCommonKernelGeosGeoLine *this$0_;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)outer$;

- (void)init__WithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelGeosGeoLine_PathMoverLine)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoLine_PathMoverLine, this$0_, GeogebraCommonKernelGeosGeoLine *)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine_PathMoverLine *self, GeogebraCommonKernelGeosGeoLine *outer$);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoLine_PathMoverLine *new_GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoLine_PathMoverLine)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoLine)

@implementation GeogebraCommonKernelGeosGeoLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)mode {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withInt_(self, c, mode);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                                              withDouble:(jdouble)a
                                              withDouble:(jdouble)b
                                              withDouble:(jdouble)c {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, cons, label, a, b, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelGeosGeoLine_(self, line);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_LINE();
}

- (GeogebraCommonKernelGeosGeoLine *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelGeosGeoLine_(self) autorelease];
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x, y, z);
}

- (void)setLineThroughWithDouble:(jdouble)pointX
                      withDouble:(jdouble)pointY {
  GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x_, y_, -((x_ * pointX) + (y_ * pointY)));
}

- (void)setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_, v->y_, v->z_);
}

- (jboolean)isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p
                                                                 withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelGeosGeoPoint_withDouble_(self, p, eps);
}

- (jboolean)isOnFullLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                                                  withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelGeosGeoPoint_withDouble_(self, P, eps);
}

- (jboolean)isOnFullLineWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Pnd
                                                  withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelMatrixCoords_withDouble_(self, Pnd, eps);
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  GeogebraCommonKernelGeosGeoPoint *P = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(PI, [GeogebraCommonKernelGeosGeoPoint class]);
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) getPath] == self) {
    return YES;
  }
  if (!GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelGeosGeoPoint_withDouble_(self, P, eps)) {
    return NO;
  }
  GeogebraCommonPluginGeoClassEnum *classType = [self getGeoClassType];
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk(classType)) isEqual:GeogebraCommonPluginGeoClassEnum_get_LINE()]) {
    return YES;
  }
  jdouble px = P->x_, py = P->y_, pz = P->z_;
  GeogebraCommonKernelPathParameter *tempParam = [self getTempPathParameter];
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [((GeogebraCommonKernelPathParameter *) nil_chk(tempParam)) setWithGeogebraCommonKernelPathParameter:pp];
  GeogebraCommonKernelGeosGeoLine_doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND_(self, P);
  jboolean result;
  switch ([classType ordinal]) {
    case GeogebraCommonPluginGeoClass_SEGMENT:
    result = (((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= -eps && pp->t_ <= 1 + eps);
    break;
    case GeogebraCommonPluginGeoClass_RAY:
    result = (((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= -eps);
    break;
    default:
    result = YES;
  }
  P->x_ = px;
  P->y_ = py;
  P->z_ = pz;
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setWithGeogebraCommonKernelPathParameter:tempParam];
  return result;
}

- (jboolean)isOnPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Pnd
                                              withDouble:(jdouble)eps {
  GeogebraCommonKernelMatrixCoords *P2d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  return GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelMatrixCoords_withDouble_(self, P2d, eps);
}

- (jboolean)respectLimitedPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                        withDouble:(jdouble)eps {
  return YES;
}

- (jdouble)getPossibleParameterWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  GeogebraCommonKernelPathParameter *tempParam = [self getTempPathParameter];
  [self doPointChangedWithGeogebraCommonKernelMatrixCoords:coords withGeogebraCommonKernelPathParameter:tempParam];
  return ((GeogebraCommonKernelPathParameter *) nil_chk(tempParam))->t_;
}

- (GeogebraCommonKernelPathParameter *)getTempPathParameter {
  if (tempPP_ == nil) GeogebraCommonKernelGeosGeoLine_setAndConsume_tempPP_(self, new_GeogebraCommonKernelPathParameter_init());
  return tempPP_;
}

- (jboolean)isParallelWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  return GeogebraCommonKernelGeosGeoLine_isParallelWithGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (jboolean)isSameDirectionWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  return (((GeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * x_ >= 0) && (g->y_ * y_ >= 0) && GeogebraCommonKernelGeosGeoLine_isParallelWithGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (jboolean)isPerpendicularWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(((GeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * x_, -g->y_ * y_);
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return [self distanceWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_ withDouble:p->inhomY_];
}

- (jdouble)distanceWithDouble:(jdouble)x0
                   withDouble:(jdouble)y0 {
  return JavaLangMath_absWithDouble_((x_ * x0 + y_ * y0 + z_) / GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceHomWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  return JavaLangMath_absWithDouble_((x_ * ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->x_ / p->z_ + y_ * p->y_ / p->z_ + z_) / GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceHomWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  return JavaLangMath_absWithDouble_((x_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX] / [p getZ] + y_ * [p getY] / [p getZ] + z_) / GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(x_, y_));
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  return GeogebraCommonKernelGeosGeoLine_distanceWithGeogebraCommonKernelGeosGeoLine_(self, g);
}

- (void)getDirectionWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)outArg {
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(outArg)) setCoordsWithDouble:y_ withDouble:-x_ withDouble:0.0];
}

- (void)getDirectionWithDoubleArray:(IOSDoubleArray *)dir {
  *IOSDoubleArray_GetRef(nil_chk(dir), 0) = y_;
  *IOSDoubleArray_GetRef(dir, 1) = -x_;
}

- (void)getInhomPointOnLineWithDoubleArray:(IOSDoubleArray *)p {
  GeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(self, p);
}

- (void)getPointOnLineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  if (startPoint_ != nil && [startPoint_ isFinite]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:startPoint_];
  }
  else {
    if (JavaLangMath_absWithDouble_(x_) > JavaLangMath_absWithDouble_(y_)) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:-z_ / x_ withDouble:0.0 withDouble:1.0];
    }
    else {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setCoordsWithDouble:0.0 withDouble:-z_ / y_ withDouble:1.0];
    }
  }
}

- (void)setStandardStartPoint {
  GeogebraCommonKernelGeosGeoLine_setStandardStartPoint(self);
}

- (void)setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P {
  if (startPoint_ == P) return;
  GeogebraCommonKernelGeosGeoLine_set_startPoint_(self, P);
  if (P != nil) [P addIncidenceWithGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
}

- (void)setEndPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  if (endPoint_ == Q) return;
  GeogebraCommonKernelGeosGeoLine_set_endPoint_(self, Q);
  if (Q != nil) [Q addIncidenceWithGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
}

- (GeogebraCommonKernelGeosGeoPoint *)getStartPoint {
  return GeogebraCommonKernelGeosGeoLine_getStartPoint(self);
}

- (GeogebraCommonKernelGeosGeoPoint *)getEndPoint {
  return GeogebraCommonKernelGeosGeoLine_getEndPoint(self);
}

- (jboolean)isDefined {
  return (!(JavaLangDouble_isNaNWithDouble_(x_) || JavaLangDouble_isNaNWithDouble_(y_) || JavaLangDouble_isNaNWithDouble_(z_)) && !(GeogebraCommonKernelKernel_isZeroWithDouble_(x_) && GeogebraCommonKernelKernel_isZeroWithDouble_(y_)));
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jboolean)showInAlgebraView {
  return [self isLabelSet] && ([self isDefined] || showUndefinedInAlgebraView__);
}

- (void)showUndefinedInAlgebraViewWithBoolean:(jboolean)flag {
  showUndefinedInAlgebraView__ = flag;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
  GeogebraCommonKernelGeosGeoLine *l = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLine class]);
  GeogebraCommonKernelGeosGeoLine_set_parameter_(self, ((GeogebraCommonKernelGeosGeoLine *) nil_chk(l))->parameter_);
  toStringMode_ = l->toStringMode_;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] || ![self isDefined]) {
    return NO;
  }
  if ([geo isGeoFunction]) {
    GeogebraCommonKernelArithmeticPolyFunction *poly = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) getFunction])) expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])) getFunctionExpression] withBoolean:NO withBoolean:YES];
    if (poly == nil) {
      return NO;
    }
    jint degree = [((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(poly)) getDegree];
    if (degree > 1) {
      return NO;
    }
    IOSDoubleArray *coeffs = [poly getCoeffs];
    if (degree == 0) {
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x_, 0) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-z_ / y_, IOSDoubleArray_Get(nil_chk(coeffs), 0))) {
        return YES;
      }
    }
    else {
      if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-x_ / y_, IOSDoubleArray_Get(nil_chk(coeffs), 1)) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(-z_ / y_, IOSDoubleArray_Get(coeffs, 0))) {
        return YES;
      }
    }
    return NO;
  }
  if ([geo isGeoRay] || [geo isGeoSegment]) {
    return NO;
  }
  if ([geo isGeoLine]) {
    return [self linDepWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLine class])];
  }
  return NO;
}

- (jboolean)isDefinedTangentWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  jboolean isTangent = NO;
  id ob = [self getParentAlgorithm];
  if ([GeogebraCommonKernelAlgosTangentAlgo_class_() isInstance:ob]) {
    IOSObjectArray *input = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(((GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(ob, [GeogebraCommonKernelAlgosAlgoElement class])))) getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
      if (IOSObjectArray_Get(input, i) == c) {
        isTangent = YES;
        break;
      }
    }
  }
  return isTangent;
}

- (jboolean)isDefinedAsymptoteWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  jboolean isAsymptote = NO;
  GeogebraCommonKernelAlgosAlgoElement *ob = [self getParentAlgorithm];
  if (ob != nil && [((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([ob getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_Asymptote()]) {
    IOSObjectArray *input = [ob getInput];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input))->size_; i++) {
      if (IOSObjectArray_Get(input, i) == c) {
        isAsymptote = YES;
        break;
      }
    }
  }
  return isAsymptote;
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  z_ -= x_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] + y_ * [v getY];
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  jdouble temp = (r - 1);
  z_ = temp * (x_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) getX] + y_ * [S getY]) + r * z_;
  x_ *= r;
  y_ *= r;
  z_ *= r;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal {
  [self rotateXYWithGeogebraCommonKernelArithmeticNumberValue:phiVal];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *Q = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiVal)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble qx = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = [Q getY];
  jdouble x0 = x_ * cos - y_ * sin;
  jdouble y0 = x_ * sin + y_ * cos;
  z_ = z_ + (x_ * qx + y_ * qy) * (1.0 - cos) + (y_ * qx - x_ * qy) * sin;
  x_ = x0;
  y_ = y0;
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  jdouble qx = x_ * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = y_ * [Q getY];
  z_ = z_ + 2.0 * (qx + qy);
  x_ = -x_;
  y_ = -y_;
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g1 {
  GeogebraCommonKernelGeosGeoLine *g = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g1, [GeogebraCommonKernelGeosGeoLine class]);
  jdouble qx, qy;
  if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getX]) > JavaLangMath_absWithDouble_([g getY])) {
    qx = -[g getZ] / [g getX];
    qy = 0.0;
  }
  else {
    qx = 0.0;
    qy = -[g getZ] / [g getY];
  }
  jdouble phi = 2.0 * JavaLangMath_atan2WithDouble_withDouble_(-[g getX], [g getY]);
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x0 = x_ * cos + y_ * sin;
  jdouble y0 = x_ * sin - y_ * cos;
  jdouble xqx = x_ * qx;
  jdouble yqy = y_ * qy;
  z_ += (xqx + yqy) + (yqy - xqx) * cos - (x_ * qy + y_ * qx) * sin;
  x_ = x0;
  y_ = y0;
  x_ = -x_;
  y_ = -y_;
  z_ = -z_;
}

- (void)setToParametricWithNSString:(NSString *)parameter {
  GeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, GeogebraCommonKernelGeosGeoLine_PARAMETRIC);
  if (parameter != nil && ((jint) [parameter length]) > 0) GeogebraCommonKernelGeosGeoLine_set_parameter_(self, parameter);
}

- (void)setToExplicit {
  GeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT);
}

- (void)setToImplicit {
  GeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT);
}

- (void)setModeWithInt:(jint)mode {
  GeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, mode);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToStr = GeogebraCommonKernelGeosGeoLine_getSbToString(self);
  [((JavaLangStringBuilder *) nil_chk(sbToStr)) setLengthWithInt:0];
  [sbToStr appendWithNSString:label_];
  [sbToStr appendWithNSString:@": "];
  [sbToStr appendWithNSString:[((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoLine_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description]];
  return [sbToStr description];
}

- (JavaLangStringBuilder *)getSbToString {
  return GeogebraCommonKernelGeosGeoLine_getSbToString(self);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(GeogebraCommonKernelGeosGeoLine_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToStr = GeogebraCommonKernelGeosGeoLine_getSbToString(self);
  [((JavaLangStringBuilder *) nil_chk(sbToStr)) setLengthWithInt:0];
  [self getXMLtagsMinimalWithJavaLangStringBuilder:sbToStr withGeogebraCommonKernelStringTemplate:tpl];
  return [sbToStr description];
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoLine_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (JavaLangStringBuilder *)getSbBuildValueString {
  return GeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
}

- (void)toStringLHSWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
      withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  IOSDoubleArray *g = [IOSDoubleArray arrayWithLength:3];
  if ([self isDefined]) {
    *IOSDoubleArray_GetRef(g, 0) = x_;
    *IOSDoubleArray_GetRef(g, 1) = y_;
    *IOSDoubleArray_GetRef(g, 2) = z_;
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithJavaLangCharSequence:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) buildLHSWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withBoolean:GeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withGeogebraCommonKernelStringTemplate:tpl]];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithJavaLangCharSequence:GeogebraCommonKernelGeosGeoLine_sbToStringLHS_];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case GeogebraCommonKernelGeosGeoLine_PARAMETRIC:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"parametric\" parameter=\""];
    [sb appendWithNSString:parameter_];
    [sb appendWithNSString:@"\"/>\n"];
    break;
    case GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"explicit\"/>\n"];
    break;
    case GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<eqnStyle style=\"implicit\"/>\n"];
  }
}

- (jboolean)isClosedPath {
  return NO;
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelGeosGeoLine_doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelGeosGeoLine_doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND_(self, P);
}

- (void)doPointChangedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                     withGeogebraCommonKernelPathParameter:(GeogebraCommonKernelPathParameter *)pp {
  jdouble px = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] / [coords getZ];
  jdouble py = [coords getY] / [coords getZ];
  jdouble t = -(z_ + x_ * px + y_ * py) / (x_ * x_ + y_ * y_);
  px += t * x_;
  py += t * y_;
  [coords setXWithDouble:px];
  [coords setYWithDouble:py];
  [coords setZWithDouble:1];
  jdouble spx = 0;
  jdouble spy = 0;
  jdouble spz = 1;
  if (startPoint_ != nil) {
    spx = startPoint_->x_;
    spy = startPoint_->y_;
    spz = startPoint_->z_;
  }
  else {
    if (x_ != 0 && y_ != 0) {
      spx = -z_ * x_ / (x_ * x_ + y_ * y_);
      spy = -z_ * y_ / (x_ * x_ + y_ * y_);
    }
    else if (x_ != 0) {
      spx = -z_ / x_;
    }
    else if (y_ != 0) {
      spy = -z_ / y_;
    }
  }
  if (JavaLangMath_absWithDouble_(x_) <= JavaLangMath_absWithDouble_(y_)) {
    ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = (spz * px - spx) / (y_ * spz);
  }
  else {
    ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = (spy - spz * py) / (x_ * spz);
  }
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self pathChangedWithGeogebraCommonKernelMatrixCoords:coords withGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
}

- (void)pathChangedWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)P
                  withGeogebraCommonKernelPathParameter:(GeogebraCommonKernelPathParameter *)pp {
  if (startPoint_ != nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:startPoint_->inhomX_ + ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ * y_];
    [P setYWithDouble:startPoint_->inhomY_ - pp->t_ * x_];
    [P setZWithDouble:1.0];
  }
  else {
    jdouble inhomX = 0;
    jdouble inhomY = 0;
    if (x_ != 0 && y_ != 0) {
      inhomX = -z_ * x_ / (x_ * x_ + y_ * y_);
      inhomY = -z_ * y_ / (x_ * x_ + y_ * y_);
    }
    else if (x_ != 0) {
      inhomX = -z_ / x_;
    }
    else if (y_ != 0) {
      inhomY = -z_ / y_;
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) setXWithDouble:inhomX + ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ * y_];
    [P setYWithDouble:inhomY - pp->t_ * x_];
    [P setZWithDouble:1.0];
  }
}

- (jboolean)isPath {
  return YES;
}

- (jboolean)isGeoLine {
  return YES;
}

- (jdouble)getMinParameter {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

- (jdouble)getMaxParameter {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(self) autorelease];
}

- (void)setZero {
  GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, 0, 1, 0);
}

- (NSString *)getAssignmentOperator {
  return @": ";
}

- (void)matrixTransformWithDouble:(jdouble)p
                       withDouble:(jdouble)q
                       withDouble:(jdouble)r
                       withDouble:(jdouble)s {
  jdouble x1, y1;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(y_)) {
    x1 = s;
    y1 = -q;
    GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1 * x_, y1 * x_, -q * r * z_ + s * p * z_);
  }
  else {
    x1 = r * y_ - s * x_;
    y1 = q * x_ - p * y_;
    GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1 * y_, y1 * y_, q * z_ * x1 + s * z_ * y1);
  }
}

- (GeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  GeogebraCommonKernelGeosGeoFunction *ret;
  GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *xCoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *yCoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *zCoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self, GeogebraCommonPluginOperationEnum_get_ZCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, xCoord, GeogebraCommonPluginOperationEnum_get_DIVIDE(), yCoord) autorelease];
  temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, -1.0) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), temp) autorelease];
  temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, temp, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), fv) autorelease];
  temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, temp, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, zCoord, GeogebraCommonPluginOperationEnum_get_DIVIDE(), yCoord) autorelease]) autorelease];
  GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(temp, fv) autorelease];
  if ([self isLabelSet] || ![self isIndependent]) {
    jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    ret = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DependentFunctionWithNSString:nil withGeogebraCommonKernelArithmeticFunction:fun];
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  else {
    ret = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [ret setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
  }
  return ret;
}

- (jboolean)isGeoFunctionable {
  return YES;
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)toGeoConicWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)con {
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(con)) fromLineWithGeogebraCommonKernelGeosGeoLine:self];
}

- (jdouble)evaluateWithDouble:(jdouble)x_var {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(y_)) return JavaLangDouble_NaN;
  return (-x_ * x_var - z_) / y_;
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPointInDWithInt:3 withDouble:0.5])) getInhomCoordsInSameDimension];
}

- (GeogebraCommonKernelMatrixCoords *)getPointInDWithInt:(jint)dimension
                                              withDouble:(jdouble)lambda {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, dimension))) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, dimension))) mulWithDouble:lambda]];
}

- (GeogebraCommonKernelMatrixCoords *)getStartCoordsInDWithInt:(jint)dimension {
  return GeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, dimension);
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInDWithInt:(jint)dimension {
  return GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, dimension);
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, 3);
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionForEquation {
  return GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(self, 3);
}

- (GeogebraCommonKernelMatrixCoords *)getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  if (m == nil) {
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(x_, y_, z_) autorelease];
  }
  GeogebraCommonKernelMatrixCoords *o = [self getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEndInhomCoords])) subWithGeogebraCommonKernelMatrixCoords:o];
  return GeogebraCommonKernelMatrixCoordMatrixUtil_lineEquationVectorWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix_(o, d, m);
}

- (GeogebraCommonKernelMatrixCoords *)getStartInhomCoords {
  if (startPoint_ != nil && [startPoint_ isFinite]) {
    return [startPoint_ getInhomCoordsInD3];
  }
  return GeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(self, 3);
}

- (GeogebraCommonKernelMatrixCoords *)getEndInhomCoords {
  if (GeogebraCommonKernelGeosGeoLine_getEndPoint(self) != nil) {
    return [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(GeogebraCommonKernelGeosGeoLine_getEndPoint(self))) getInhomCoordsInD3];
  }
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  if (GeogebraCommonKernelGeosGeoLine_getEndPoint(self) == nil) {
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-y_, x_, 0, 0) autorelease];
  }
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getEndInhomCoords])) subWithGeogebraCommonKernelMatrixCoords:[self getStartInhomCoords]];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  IOSObjectArray *b = GeogebraCommonUtilMyMath_adjointWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(a00, a01, a02, a10, a11, a12, a20, a21, a22);
  jdouble x1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(b), 0)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 0)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 0)), 2) * z_;
  jdouble y1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 1)), 2) * z_;
  jdouble z1 = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 0) * x_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 1) * y_ + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(b, 2)), 2) * z_;
  GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(self, x1, y1, z1);
}

- (JavaUtilArrayList *)getPointsOnLine {
  return pointsOnLine_;
}

- (void)addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (pointsOnLine_ == nil) {
    GeogebraCommonKernelGeosGeoLine_setAndConsume_pointsOnLine_(self, new_JavaUtilArrayList_init());
  }
  if (![((JavaUtilArrayList *) nil_chk(pointsOnLine_)) containsWithId:p]) [pointsOnLine_ addWithId:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(p, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (void)removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (pointsOnLine_ != nil) [pointsOnLine_ removeWithId:p];
}

- (void)doRemove {
  if (GeogebraCommonKernelGeosGeoLine_getStartPoint(self) != nil) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(GeogebraCommonKernelGeosGeoLine_getStartPoint(self))) removeIncidenceWithGeogebraCommonKernelGeosGeoElement:self];
  if (GeogebraCommonKernelGeosGeoLine_getEndPoint(self) != nil) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(GeogebraCommonKernelGeosGeoLine_getEndPoint(self))) removeIncidenceWithGeogebraCommonKernelGeosGeoElement:self];
  if (pointsOnLine_ != nil) {
    for (jint i = 0; i < [pointsOnLine_ size]; ++i) {
      GeogebraCommonKernelGeosGeoPoint *p = [pointsOnLine_ getWithInt:i];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) removeIncidenceWithGeogebraCommonKernelGeosGeoElement:self];
    }
  }
  [super doRemove];
}

- (GeogebraCommonKernelArithmeticFunction *)getFunction {
  return [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([self getGeoFunction])) getFunction];
}

- (GeogebraCommonKernelGeosGeoFunction *)getGeoDerivativeWithInt:(jint)order {
  return [((GeogebraCommonKernelGeosGeoFunction *) nil_chk([self getGeoFunction])) getGeoDerivativeWithInt:order];
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  if (algoParent_ != nil && ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) autorelease];
  }
  return nil;
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (algoParent_ != nil && ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (algoParent_ != nil && ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (algoParent_ != nil && ([GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_])) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:self];
  }
  return nil;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (algoParent_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo_class_() isInstance:algoParent_]) {
    return [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(algoParent_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))) getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:self];
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  return GeogebraCommonKernelGeosGeoLine_distanceWithGeogebraCommonKernelGeosGeoLine_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class]));
}

- (jboolean)respectLimitedPathWithDouble:(jdouble)param {
  return YES;
}

- (IOSDoubleArray *)getnormalizedCoefficientsWithDoubleArray:(IOSDoubleArray *)ret {
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = x_;
  *IOSDoubleArray_GetRef(ret, 1) = y_;
  *IOSDoubleArray_GetRef(ret, 2) = z_;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(x_) && GeogebraCommonKernelKernel_isZeroWithDouble_(y_) && GeogebraCommonKernelKernel_isZeroWithDouble_(z_)) {
    return ret;
  }
  if (JavaLangDouble_isNaNWithDouble_(x_) || JavaLangDouble_isNaNWithDouble_(y_) || JavaLangDouble_isNaNWithDouble_(z_)) {
    return ret;
  }
  if (JavaLangDouble_isInfiniteWithDouble_(x_) || JavaLangDouble_isInfiniteWithDouble_(y_) || JavaLangDouble_isInfiniteWithDouble_(z_)) {
    return ret;
  }
  while (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 0)) < 0.5 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 1)) < 0.5 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 2)) < 0.5) {
    *IOSDoubleArray_GetRef(ret, 0) *= 2;
    *IOSDoubleArray_GetRef(ret, 1) *= 2;
    *IOSDoubleArray_GetRef(ret, 2) *= 2;
  }
  while (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 0)) > 1 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 1)) > 1 && JavaLangMath_absWithDouble_(IOSDoubleArray_Get(ret, 2)) > 1) {
    *IOSDoubleArray_GetRef(ret, 0) /= 2;
    *IOSDoubleArray_GetRef(ret, 1) /= 2;
    *IOSDoubleArray_GetRef(ret, 2) /= 2;
  }
  return ret;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementWithGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  return GeogebraCommonKernelLocusEquation_eqnLineWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelAlgosEquationScopeInterface_(self, scope);
}

- (jboolean)hasLineOpacity {
  return YES;
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(parameter_);
  RELEASE_(startPoint_);
  RELEASE_(endPoint_);
  RELEASE_(tempPP_);
  RELEASE_(sbToString_GeoLine_);
  RELEASE_(sbBuildValueString_);
  RELEASE_(pointsOnLine_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoLine class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoLine_vars_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ @"x", @"y" } count:2 type:NSString_class_()]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoLine_sbToStringLHS_, nil, new_JavaLangStringBuilder_initWithNSString_(@"\u221e"));
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoLine)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDouble:withDouble:withDouble:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoLine:", "GeoLine", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x11, NULL, NULL },
    { "setLineThroughWithDouble:withDouble:", "setLineThrough", "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x11, NULL, NULL },
    { "isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "isOnFullLineWithGeogebraCommonKernelGeosGeoPoint:withDouble:", "isOnFullLine", "Z", 0x11, NULL, NULL },
    { "isOnFullLineWithGeogebraCommonKernelMatrixCoords:withDouble:", "isOnFullLine", "Z", 0x11, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x11, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "getPossibleParameterWithGeogebraCommonKernelMatrixCoords:", "getPossibleParameter", "D", 0x1, NULL, NULL },
    { "getTempPathParameter", NULL, "Lgeogebra.common.kernel.PathParameter;", 0x4, NULL, NULL },
    { "isParallelWithGeogebraCommonKernelGeosGeoLine:", "isParallel", "Z", 0x11, NULL, NULL },
    { "isSameDirectionWithGeogebraCommonKernelGeosGeoLine:", "isSameDirection", "Z", 0x11, NULL, NULL },
    { "isPerpendicularWithGeogebraCommonKernelGeosGeoLine:", "isPerpendicular", "Z", 0x11, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x1, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x1, NULL, NULL },
    { "distanceHomWithGeogebraCommonKernelGeosGeoPoint:", "distanceHom", "D", 0x11, NULL, NULL },
    { "distanceHomWithGeogebraCommonKernelMatrixCoords:", "distanceHom", "D", 0x11, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoLine:", "distance", "D", 0x11, NULL, NULL },
    { "getDirectionWithGeogebraCommonKernelGeosGeoVec3D:", "getDirection", "V", 0x11, NULL, NULL },
    { "getDirectionWithDoubleArray:", "getDirection", "V", 0x11, NULL, NULL },
    { "getInhomPointOnLineWithDoubleArray:", "getInhomPointOnLine", "V", 0x11, NULL, NULL },
    { "getPointOnLineWithGeogebraCommonKernelGeosGeoPoint:", "getPointOnLine", "V", 0x11, NULL, NULL },
    { "setStandardStartPoint", NULL, "V", 0x11, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelGeosGeoPoint:", "setStartPoint", "V", 0x11, NULL, NULL },
    { "setEndPointWithGeogebraCommonKernelGeosGeoPoint:", "setEndPoint", "V", 0x11, NULL, NULL },
    { "getStartPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getEndPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showUndefinedInAlgebraViewWithBoolean:", "showUndefinedInAlgebraView", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isDefinedTangentWithGeogebraCommonKernelGeosGeoConic:", "isDefinedTangent", "Z", 0x11, NULL, NULL },
    { "isDefinedAsymptoteWithGeogebraCommonKernelGeosGeoConic:", "isDefinedAsymptote", "Z", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "setToParametricWithNSString:", "setToParametric", "V", 0x11, NULL, NULL },
    { "setToExplicit", NULL, "V", 0x11, NULL, NULL },
    { "setToImplicit", NULL, "V", 0x11, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getSbToString", NULL, "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "getSbBuildValueString", NULL, "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "toStringLHSWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "toStringLHS", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "doPointChanged", "V", 0x2, NULL, NULL },
    { "doPointChangedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelPathParameter:", "doPointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelPathParameter:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoLine", NULL, "Z", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "getAssignmentOperator", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getGeoFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isGeoFunctionable", NULL, "Z", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "toGeoConicWithGeogebraCommonKernelGeosGeoConic:", "toGeoConic", "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointInDWithInt:withDouble:", "getPointInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartCoordsInDWithInt:", "getStartCoordsInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "getDirectionInDWithInt:", "getDirectionInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x2, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getDirectionForEquation", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:", "getCartesianEquationVector", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEndInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "getPointsOnLine", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:", "addPointOnLine", "V", 0x11, NULL, NULL },
    { "removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:", "removePointOnLine", "V", 0x11, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getGeoDerivativeWithInt:", "getGeoDerivative", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoLineND:", "distance", "D", 0x1, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "getnormalizedCoefficientsWithDoubleArray:", "getnormalizedCoefficients", "[D", 0x1, NULL, NULL },
    { "buildEquationElementWithGeogebraCommonKernelLocusequEquationScope:", "buildEquationElement", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "hasLineOpacity", NULL, "Z", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "EQUATION_IMPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT },
    { "EQUATION_EXPLICIT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT },
    { "PARAMETRIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoLine_PARAMETRIC },
    { "EQUATION_IMPLICIT_NON_CANONICAL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL },
    { "showUndefinedInAlgebraView__", "showUndefinedInAlgebraView", 0x2, "Z", NULL, NULL,  },
    { "parameter_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "startPoint_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "endPoint_", NULL, 0x1, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "KEEP_LEADING_SIGN_", NULL, 0xa, "Z", &GeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_, NULL,  },
    { "vars_", NULL, 0x1a, "[Ljava.lang.String;", &GeogebraCommonKernelGeosGeoLine_vars_, NULL,  },
    { "tempPP_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "sbToString_GeoLine_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbToStringLHS_", NULL, 0xa, "Ljava.lang.StringBuilder;", &GeogebraCommonKernelGeosGeoLine_sbToStringLHS_, NULL,  },
    { "pointsOnLine_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPoint;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.geos.GeoLine$PathMoverLine;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoLine = { 2, "GeoLine", "geogebra.common.kernel.geos", NULL, 0x1, 112, methods, 15, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoLine;
}

@end

void GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->showUndefinedInAlgebraView__ = NO;
  GeogebraCommonKernelGeosGeoLine_set_parameter_(self, @"\u03bb");
  GeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoLine *new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoLine *self = [GeogebraCommonKernelGeosGeoLine alloc];
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelConstruction *c, jint mode) {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoLine_setModeWithInt_(self, mode);
}

GeogebraCommonKernelGeosGeoLine *new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *c, jint mode) {
  GeogebraCommonKernelGeosGeoLine *self = [GeogebraCommonKernelGeosGeoLine alloc];
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withInt_(self, c, mode);
  return self;
}

void GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, cons, a, b, c);
  self->showUndefinedInAlgebraView__ = NO;
  GeogebraCommonKernelGeosGeoLine_set_parameter_(self, @"\u03bb");
  GeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  [self setConstructionDefaults];
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoLine *new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *cons, NSString *label, jdouble a, jdouble b, jdouble c) {
  GeogebraCommonKernelGeosGeoLine *self = [GeogebraCommonKernelGeosGeoLine alloc];
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withDouble_withDouble_(self, cons, label, a, b, c);
  return self;
}

void GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoLine *line) {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoLine *) nil_chk(line))->cons_);
  [self setWithGeogebraCommonKernelGeosGeoElement:line];
}

GeogebraCommonKernelGeosGeoLine *new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *line) {
  GeogebraCommonKernelGeosGeoLine *self = [GeogebraCommonKernelGeosGeoLine alloc];
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelGeosGeoLine_(self, line);
  return self;
}

void GeogebraCommonKernelGeosGeoLine_setCoordsWithDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoLine *self, jdouble x, jdouble y, jdouble z) {
  self->x_ = x;
  self->y_ = y;
  self->z_ = z;
}

jboolean GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelGeosGeoPoint_withDouble_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoPoint *P, jdouble eps) {
  if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P)) isDefined]) return NO;
  jdouble simplelength = JavaLangMath_absWithDouble_(self->x_) + JavaLangMath_absWithDouble_(self->y_);
  if ([P isInfinite]) {
    return JavaLangMath_absWithDouble_(self->x_ * P->x_ + self->y_ * P->y_) < eps * simplelength;
  }
  return JavaLangMath_absWithDouble_(self->x_ * P->inhomX_ + self->y_ * P->inhomY_ + self->z_) < eps * simplelength;
}

jboolean GeogebraCommonKernelGeosGeoLine_isOnFullLineWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelMatrixCoords *Pnd, jdouble eps) {
  GeogebraCommonKernelMatrixCoords *P = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  jdouble simplelength = JavaLangMath_absWithDouble_(self->x_) + JavaLangMath_absWithDouble_(self->y_);
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(P)) getZ])) {
    return JavaLangMath_absWithDouble_(self->x_ * [P getX] + self->y_ * [P getY]) < eps * simplelength;
  }
  return JavaLangMath_absWithDouble_(self->x_ * [P getX] / [P getZ] + self->y_ * [P getY] / [P getZ] + self->z_) < eps * simplelength;
}

jboolean GeogebraCommonKernelGeosGeoLine_isParallelWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoLine *g) {
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(((GeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * self->y_, g->y_ * self->x_);
}

jdouble GeogebraCommonKernelGeosGeoLine_distanceWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelGeosGeoLine *g) {
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(((GeogebraCommonKernelGeosGeoLine *) nil_chk(g))->x_ * self->y_ - g->y_ * self->x_)) {
    jdouble px, py;
    if (JavaLangMath_absWithDouble_(g->x_) > JavaLangMath_absWithDouble_(g->y_)) {
      px = -g->z_ / g->x_;
      py = 0.0;
    }
    else {
      px = 0.0;
      py = -g->z_ / g->y_;
    }
    return JavaLangMath_absWithDouble_((self->x_ * px + self->y_ * py + self->z_) / GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->x_, self->y_));
  }
  return 0.0;
}

void GeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(GeogebraCommonKernelGeosGeoLine *self, IOSDoubleArray *p) {
  if (self->startPoint_ != nil && [self->startPoint_ isFinite]) {
    *IOSDoubleArray_GetRef(nil_chk(p), 0) = self->startPoint_->inhomX_;
    *IOSDoubleArray_GetRef(p, 1) = self->startPoint_->inhomY_;
  }
  else {
    if (JavaLangMath_absWithDouble_(self->x_) > JavaLangMath_absWithDouble_(self->y_)) {
      *IOSDoubleArray_GetRef(nil_chk(p), 0) = -self->z_ / self->x_;
      *IOSDoubleArray_GetRef(p, 1) = 0.0;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(p), 0) = 0.0;
      *IOSDoubleArray_GetRef(p, 1) = -self->z_ / self->y_;
    }
  }
}

void GeogebraCommonKernelGeosGeoLine_setStandardStartPoint(GeogebraCommonKernelGeosGeoLine *self) {
  if (self->startPoint_ == nil) {
    GeogebraCommonKernelGeosGeoLine_setAndConsume_startPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_));
    [self->startPoint_ addIncidenceWithGeogebraCommonKernelGeosGeoElement:self withBoolean:YES];
  }
  if (self->x_ != 0 || self->y_ != 0) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) setCoordsWithDouble:-self->z_ * self->x_ / (self->x_ * self->x_ + self->y_ * self->y_) withDouble:-self->z_ * self->y_ / (self->x_ * self->x_ + self->y_ * self->y_) withDouble:1.0];
  }
  else {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) setCoordsWithDouble:0.0 withDouble:0.0 withDouble:1.0];
  }
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelGeosGeoLine_getStartPoint(GeogebraCommonKernelGeosGeoLine *self) {
  return self->startPoint_;
}

GeogebraCommonKernelGeosGeoPoint *GeogebraCommonKernelGeosGeoLine_getEndPoint(GeogebraCommonKernelGeosGeoLine *self) {
  return self->endPoint_;
}

void GeogebraCommonKernelGeosGeoLine_setModeWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint mode) {
  switch (mode) {
    case GeogebraCommonKernelGeosGeoLine_PARAMETRIC:
    self->toStringMode_ = GeogebraCommonKernelGeosGeoLine_PARAMETRIC;
    break;
    case GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
    self->toStringMode_ = GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT;
    break;
    case GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
    self->toStringMode_ = GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL;
    break;
    default:
    self->toStringMode_ = GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT;
  }
}

JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_getSbToString(GeogebraCommonKernelGeosGeoLine *self) {
  if (self->sbToString_GeoLine_ == nil) GeogebraCommonKernelGeosGeoLine_setAndConsume_sbToString_GeoLine_(self, new_JavaLangStringBuilder_initWithInt_(50));
  return self->sbToString_GeoLine_;
}

JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoLine *self, GeogebraCommonKernelStringTemplate *tpl) {
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    JavaLangStringBuilder *sb = GeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
    [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
    [sb appendWithNSString:@"("];
    [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:self->x_ withGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@")*"];
    [sb appendWithNSString:[tpl printVariableNameWithNSString:@"x"]];
    [sb appendWithNSString:@"+("];
    [sb appendWithNSString:[self->kernel_ formatWithDouble:self->y_ withGeogebraCommonKernelStringTemplate:tpl]];
    [sb appendWithNSString:@")*"];
    [sb appendWithNSString:[tpl printVariableNameWithNSString:@"y"]];
    [sb appendWithChar:'='];
    [sb appendWithNSString:[self->kernel_ formatWithDouble:-self->z_ withGeogebraCommonKernelStringTemplate:tpl]];
    return sb;
  }
  IOSDoubleArray *P = [IOSDoubleArray arrayWithLength:2];
  IOSDoubleArray *g = [IOSDoubleArray arrayWithLength:3];
  jchar op = '=';
  if (![self isDefined]) {
    return [new_JavaLangStringBuilder_initWithNSString_((self->toStringMode_ == GeogebraCommonKernelGeosGeoLine_PARAMETRIC) ? @"X = (?, ?)" : @"y = ?") autorelease];
  }
  {
    JavaLangStringBuilder *sbBuildValueStr;
    switch (self->toStringMode_) {
      case GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withChar:op withGeogebraCommonKernelStringTemplate:tpl];
      case GeogebraCommonKernelGeosGeoLine_PARAMETRIC:
      GeogebraCommonKernelGeosGeoLine_getInhomPointOnLineWithDoubleArray_(self, P);
      sbBuildValueStr = GeogebraCommonKernelGeosGeoLine_getSbBuildValueString(self);
      [((JavaLangStringBuilder *) nil_chk(sbBuildValueStr)) setLengthWithInt:0];
      [sbBuildValueStr appendWithNSString:@"X = ("];
      [sbBuildValueStr appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:IOSDoubleArray_Get(P, 0) withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@", "];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:IOSDoubleArray_Get(P, 1) withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@") + "];
      [sbBuildValueStr appendWithNSString:self->parameter_];
      [sbBuildValueStr appendWithNSString:@" ("];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:self->y_ withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@", "];
      [sbBuildValueStr appendWithNSString:[self->kernel_ formatWithDouble:-self->x_ withGeogebraCommonKernelStringTemplate:tpl]];
      [sbBuildValueStr appendWithNSString:@")"];
      return sbBuildValueStr;
      case GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT_NON_CANONICAL:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      if (GeogebraCommonKernelKernel_isZeroWithDouble_(self->x_) || GeogebraCommonKernelKernel_isZeroWithDouble_(self->y_)) {
        return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withChar:op withGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildImplicitEquationWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withBoolean:GeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:NO withBoolean:NO withChar:op withGeogebraCommonKernelStringTemplate:tpl];
      default:
      *IOSDoubleArray_GetRef(g, 0) = self->x_;
      *IOSDoubleArray_GetRef(g, 1) = self->y_;
      *IOSDoubleArray_GetRef(g, 2) = self->z_;
      if (GeogebraCommonKernelKernel_isZeroWithDouble_(self->x_) || GeogebraCommonKernelKernel_isZeroWithDouble_(self->y_)) {
        return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildExplicitLineEquationWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withChar:op withGeogebraCommonKernelStringTemplate:tpl];
      }
      return [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) buildImplicitEquationWithDoubleArray:g withNSStringArray:GeogebraCommonKernelGeosGeoLine_vars_ withBoolean:GeogebraCommonKernelGeosGeoLine_KEEP_LEADING_SIGN_ withBoolean:YES withBoolean:NO withChar:op withGeogebraCommonKernelStringTemplate:tpl];
    }
  }
}

JavaLangStringBuilder *GeogebraCommonKernelGeosGeoLine_getSbBuildValueString(GeogebraCommonKernelGeosGeoLine *self) {
  if (self->sbBuildValueString_ == nil) GeogebraCommonKernelGeosGeoLine_setAndConsume_sbBuildValueString_(self, new_JavaLangStringBuilder_initWithInt_(50));
  return self->sbBuildValueString_;
}

void GeogebraCommonKernelGeosGeoLine_doPointChangedWithGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelGeosGeoLine *self, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getCoordsInD2];
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  [self doPointChangedWithGeogebraCommonKernelMatrixCoords:coords withGeogebraCommonKernelPathParameter:pp];
  [P setCoords2DWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX] withDouble:[coords getY] withDouble:[coords getZ]];
  [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonKernelGeosGeoLine_getStartCoordsInDWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint dimension) {
  GeogebraCommonKernelMatrixCoords *startCoords;
  if (self->startPoint_ != nil && [self->startPoint_ isFinite]) {
    startCoords = [self->startPoint_ getCoordsInDWithInt:dimension];
  }
  else {
    startCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(dimension + 1) autorelease];
    if (JavaLangMath_absWithDouble_(self->x_) > JavaLangMath_absWithDouble_(self->y_)) {
      [startCoords setXWithDouble:-self->z_ / self->x_];
    }
    else {
      [startCoords setYWithDouble:-self->z_ / self->y_];
    }
    [startCoords setWithInt:dimension + 1 withDouble:1];
  }
  return startCoords;
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonKernelGeosGeoLine_getDirectionInDWithInt_(GeogebraCommonKernelGeosGeoLine *self, jint dimension) {
  GeogebraCommonKernelMatrixCoords *direction = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(dimension + 1) autorelease];
  [direction setXWithDouble:self->y_];
  [direction setYWithDouble:-self->x_];
  return direction;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoLine)

@implementation GeogebraCommonKernelGeosGeoLine_PathMoverLine

- (instancetype)initWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)outer$ {
  GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(self, outer$);
  return self;
}

- (void)init__WithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (this$0_->startPoint_ == nil) {
    GeogebraCommonKernelGeosGeoLine_setStandardStartPoint(this$0_);
  }
  [super init__WithGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoLine:", "PathMoverLine", NULL, 0x1, NULL, NULL },
    { "init__WithGeogebraCommonKernelKernelNDGeoPointND:", "init", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoLine_PathMoverLine = { 2, "PathMoverLine", "geogebra.common.kernel.geos", "GeoLine", 0x2, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoLine_PathMoverLine;
}

@end

void GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine_PathMoverLine *self, GeogebraCommonKernelGeosGeoLine *outer$) {
  GeogebraCommonKernelGeosGeoLine_PathMoverLine_set_this$0_(self, outer$);
  GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self, outer$);
}

GeogebraCommonKernelGeosGeoLine_PathMoverLine *new_GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *outer$) {
  GeogebraCommonKernelGeosGeoLine_PathMoverLine *self = [GeogebraCommonKernelGeosGeoLine_PathMoverLine alloc];
  GeogebraCommonKernelGeosGeoLine_PathMoverLine_initWithGeogebraCommonKernelGeosGeoLine_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoLine_PathMoverLine)
