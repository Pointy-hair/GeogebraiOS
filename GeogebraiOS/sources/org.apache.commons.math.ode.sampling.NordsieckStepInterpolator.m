//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/ObjectInput.h"
#include "java/io/ObjectOutput.h"
#include "java/lang/ClassNotFoundException.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/linear/Array2DRowRealMatrix.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/sampling/AbstractStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/NordsieckStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepInterpolator.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_serialVersionUID -7179861704951334960LL

@interface OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator () {
 @public
  jdouble scalingH_;
  jdouble referenceTime_;
  IOSDoubleArray *scaled_;
  OrgApacheCommonsMathLinearArray2DRowRealMatrix *nordsieck_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator, scaled_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator, nordsieck_, OrgApacheCommonsMathLinearArray2DRowRealMatrix *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator, serialVersionUID, jlong)

@implementation OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator

- (instancetype)init {
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init(self);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator:(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *)interpolator {
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_(self, interpolator);
  return self;
}

- (id<OrgApacheCommonsMathOdeSamplingStepInterpolator>)doCopy {
  return [new_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_(self) autorelease];
}

- (void)reinitializeWithDoubleArray:(IOSDoubleArray *)y
                        withBoolean:(jboolean)forward {
  [super reinitializeWithDoubleArray:y withBoolean:forward];
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_setAndConsume_stateVariation_(self, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(y))->size_]);
}

- (void)reinitializeWithDouble:(jdouble)time
                    withDouble:(jdouble)stepSize
               withDoubleArray:(IOSDoubleArray *)scaledDerivative
withOrgApacheCommonsMathLinearArray2DRowRealMatrix:(OrgApacheCommonsMathLinearArray2DRowRealMatrix *)nordsieckVector {
  self->referenceTime_ = time;
  self->scalingH_ = stepSize;
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_scaled_(self, scaledDerivative);
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_nordsieck_(self, nordsieckVector);
  [self setInterpolatedTimeWithDouble:[self getInterpolatedTime]];
}

- (void)rescaleWithDouble:(jdouble)stepSize {
  jdouble ratio = stepSize / scalingH_;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(scaled_))->size_; ++i) {
    *IOSDoubleArray_GetRef(scaled_, i) *= ratio;
  }
  IOSObjectArray *nData = [((OrgApacheCommonsMathLinearArray2DRowRealMatrix *) nil_chk(nordsieck_)) getDataRef];
  jdouble power = ratio;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(nData))->size_; ++i) {
    power *= ratio;
    IOSDoubleArray *nDataI = IOSObjectArray_Get(nData, i);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(nDataI))->size_; ++j) {
      *IOSDoubleArray_GetRef(nDataI, j) *= power;
    }
  }
  scalingH_ = stepSize;
}

- (IOSDoubleArray *)getInterpolatedStateVariation {
  [self getInterpolatedState];
  return stateVariation_;
}

- (void)computeInterpolatedStateAndDerivativesWithDouble:(jdouble)theta
                                              withDouble:(jdouble)oneMinusThetaH {
  jdouble x = interpolatedTime_ - referenceTime_;
  jdouble normalizedAbscissa = x / scalingH_;
  JavaUtilArrays_fillWithDoubleArray_withDouble_(stateVariation_, 0.0);
  JavaUtilArrays_fillWithDoubleArray_withDouble_(interpolatedDerivatives_, 0.0);
  IOSObjectArray *nData = [((OrgApacheCommonsMathLinearArray2DRowRealMatrix *) nil_chk(nordsieck_)) getDataRef];
  for (jint i = ((IOSObjectArray *) nil_chk(nData))->size_ - 1; i >= 0; --i) {
    jint order = i + 2;
    IOSDoubleArray *nDataI = IOSObjectArray_Get(nData, i);
    jdouble power = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(normalizedAbscissa, order);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(nDataI))->size_; ++j) {
      jdouble d = IOSDoubleArray_Get(nDataI, j) * power;
      *IOSDoubleArray_GetRef(nil_chk(stateVariation_), j) += d;
      *IOSDoubleArray_GetRef(nil_chk(interpolatedDerivatives_), j) += order * d;
    }
  }
  for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(currentState_))->size_; ++j) {
    *IOSDoubleArray_GetRef(nil_chk(stateVariation_), j) += IOSDoubleArray_Get(nil_chk(scaled_), j) * normalizedAbscissa;
    *IOSDoubleArray_GetRef(nil_chk(interpolatedState_), j) = IOSDoubleArray_Get(currentState_, j) + IOSDoubleArray_Get(stateVariation_, j);
    *IOSDoubleArray_GetRef(nil_chk(interpolatedDerivatives_), j) = (IOSDoubleArray_Get(interpolatedDerivatives_, j) + IOSDoubleArray_Get(scaled_, j) * normalizedAbscissa) / x;
  }
}

- (void)writeExternalWithJavaIoObjectOutput:(id<JavaIoObjectOutput>)outArg {
  [self writeBaseExternalWithJavaIoObjectOutput:outArg];
  [((id<JavaIoObjectOutput>) nil_chk(outArg)) writeDoubleWithDouble:scalingH_];
  [outArg writeDoubleWithDouble:referenceTime_];
  jint n = (currentState_ == nil) ? -1 : currentState_->size_;
  if (scaled_ == nil) {
    [outArg writeBooleanWithBoolean:NO];
  }
  else {
    [outArg writeBooleanWithBoolean:YES];
    for (jint j = 0; j < n; ++j) {
      [outArg writeDoubleWithDouble:IOSDoubleArray_Get(scaled_, j)];
    }
  }
  if (nordsieck_ == nil) {
    [outArg writeBooleanWithBoolean:NO];
  }
  else {
    [outArg writeBooleanWithBoolean:YES];
    [outArg writeObjectWithId:nordsieck_];
  }
}

- (void)readExternalWithJavaIoObjectInput:(id<JavaIoObjectInput>)inArg {
  jdouble t = [self readBaseExternalWithJavaIoObjectInput:inArg];
  scalingH_ = [((id<JavaIoObjectInput>) nil_chk(inArg)) readDouble];
  referenceTime_ = [inArg readDouble];
  jint n = (currentState_ == nil) ? -1 : currentState_->size_;
  jboolean hasScaled = [inArg readBoolean];
  if (hasScaled) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_setAndConsume_scaled_(self, [IOSDoubleArray newArrayWithLength:n]);
    for (jint j = 0; j < n; ++j) {
      *IOSDoubleArray_GetRef(scaled_, j) = [inArg readDouble];
    }
  }
  else {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_scaled_(self, nil);
  }
  jboolean hasNordsieck = [inArg readBoolean];
  if (hasNordsieck) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_nordsieck_(self, (OrgApacheCommonsMathLinearArray2DRowRealMatrix *) check_class_cast([inArg readObject], [OrgApacheCommonsMathLinearArray2DRowRealMatrix class]));
  }
  else {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_nordsieck_(self, nil);
  }
  if (hasScaled && hasNordsieck) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_setAndConsume_stateVariation_(self, [IOSDoubleArray newArrayWithLength:n]);
    [self setInterpolatedTimeWithDouble:t];
  }
  else {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_stateVariation_(self, nil);
  }
}

- (void)dealloc {
  RELEASE_(stateVariation_);
  RELEASE_(scaled_);
  RELEASE_(nordsieck_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "NordsieckStepInterpolator", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator:", "NordsieckStepInterpolator", NULL, 0x1, NULL, NULL },
    { "doCopy", NULL, "Lorg.apache.commons.math.ode.sampling.StepInterpolator;", 0x4, NULL, NULL },
    { "reinitializeWithDoubleArray:withBoolean:", "reinitialize", "V", 0x1, NULL, NULL },
    { "reinitializeWithDouble:withDouble:withDoubleArray:withOrgApacheCommonsMathLinearArray2DRowRealMatrix:", "reinitialize", "V", 0x1, NULL, NULL },
    { "rescaleWithDouble:", "rescale", "V", 0x1, NULL, NULL },
    { "getInterpolatedStateVariation", NULL, "[D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "computeInterpolatedStateAndDerivativesWithDouble:withDouble:", "computeInterpolatedStateAndDerivatives", "V", 0x4, NULL, NULL },
    { "writeExternalWithJavaIoObjectOutput:", "writeExternal", "V", 0x1, "Ljava.io.IOException;", NULL },
    { "readExternalWithJavaIoObjectInput:", "readExternal", "V", 0x1, "Ljava.io.IOException;Ljava.lang.ClassNotFoundException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_serialVersionUID },
    { "stateVariation_", NULL, 0x4, "[D", NULL, NULL,  },
    { "scalingH_", NULL, 0x2, "D", NULL, NULL,  },
    { "referenceTime_", NULL, 0x2, "D", NULL, NULL,  },
    { "scaled_", NULL, 0x2, "[D", NULL, NULL,  },
    { "nordsieck_", NULL, 0x2, "Lorg.apache.commons.math.linear.Array2DRowRealMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator = { 2, "NordsieckStepInterpolator", "org.apache.commons.math.ode.sampling", NULL, 0x1, 10, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator;
}

@end

void OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *self) {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_init(self);
}

OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *new_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init() {
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *self = [OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator alloc];
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_init(self);
  return self;
}

void OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *self, OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *interpolator) {
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator_(self, interpolator);
  self->scalingH_ = ((OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *) nil_chk(interpolator))->scalingH_;
  self->referenceTime_ = interpolator->referenceTime_;
  if (interpolator->scaled_ != nil) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_scaled_(self, [interpolator->scaled_ clone]);
  }
  if (interpolator->nordsieck_ != nil) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_setAndConsume_nordsieck_(self, new_OrgApacheCommonsMathLinearArray2DRowRealMatrix_initWithDoubleArray2_withBoolean_([interpolator->nordsieck_ getDataRef], YES));
  }
  if (interpolator->stateVariation_ != nil) {
    OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_set_stateVariation_(self, [interpolator->stateVariation_ clone]);
  }
}

OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *new_OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *interpolator) {
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator *self = [OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator alloc];
  OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_initWithOrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator_(self, interpolator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeSamplingNordsieckStepInterpolator)
