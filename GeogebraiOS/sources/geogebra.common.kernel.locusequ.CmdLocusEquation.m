//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/CmdLocusEquation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoLocus.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/locusequ/AlgoLocusEquation.h"
#include "geogebra/common/kernel/locusequ/CmdLocusEquation.h"
#include "geogebra/common/main/MyError.h"

__attribute__((unused)) static GeogebraCommonKernelImplicitGeoImplicitPoly *GeogebraCommonKernelLocusequCmdLocusEquation_LocusEquationWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequCmdLocusEquation *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint);

@implementation GeogebraCommonKernelLocusequCmdLocusEquation

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelLocusequCmdLocusEquation_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  GeogebraCommonKernelGeosGeoPoint *locusPoint, *movingPoint;
  switch (n) {
    case 1:
    if ([IOSObjectArray_Get(nil_chk(arg), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoLocus class]] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm] != nil && [[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoLocus class]]) {
      GeogebraCommonKernelGeosGeoLocus *locus = (GeogebraCommonKernelGeosGeoLocus *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoLocus class]);
      GeogebraCommonKernelAlgosAlgoLocus *algo = (GeogebraCommonKernelAlgosAlgoLocus *) check_class_cast([((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoLocus class]);
      locusPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelAlgosAlgoLocus *) nil_chk(algo)) getLocusPoint], [GeogebraCommonKernelGeosGeoPoint class]);
      movingPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([algo getMovingPoint], [GeogebraCommonKernelGeosGeoPoint class]);
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
    break;
    case 2:
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint]))) {
      locusPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPoint class]);
      movingPoint = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoPoint class]);
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    }
    break;
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelLocusequCmdLocusEquation_LocusEquationWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, [c getLabel], locusPoint, movingPoint) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)LocusEquationWithNSString:(NSString *)label
                                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)locusPoint
                                      withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint {
  return GeogebraCommonKernelLocusequCmdLocusEquation_LocusEquationWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, label, locusPoint, movingPoint);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdLocusEquation", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "LocusEquationWithNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "LocusEquation", "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x11, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequCmdLocusEquation = { 2, "CmdLocusEquation", "geogebra.common.kernel.locusequ", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequCmdLocusEquation;
}

@end

void GeogebraCommonKernelLocusequCmdLocusEquation_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelLocusequCmdLocusEquation *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelLocusequCmdLocusEquation *new_GeogebraCommonKernelLocusequCmdLocusEquation_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelLocusequCmdLocusEquation *self = [GeogebraCommonKernelLocusequCmdLocusEquation alloc];
  GeogebraCommonKernelLocusequCmdLocusEquation_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelImplicitGeoImplicitPoly *GeogebraCommonKernelLocusequCmdLocusEquation_LocusEquationWithNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequCmdLocusEquation *self, NSString *label, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(movingPoint)) getPath] == nil || [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(locusPoint)) getPath] != nil || ![movingPoint isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:locusPoint]) return nil;
  GeogebraCommonKernelLocusequAlgoLocusEquation *algo = [new_GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self->cons_, locusPoint, movingPoint) autorelease];
  GeogebraCommonKernelImplicitGeoImplicitPoly *poly = [algo getPoly];
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(poly)) setLabelWithNSString:label];
  return poly;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequCmdLocusEquation)
