//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawPointDecorations.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawCoordSys1D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPointDecorations.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations () {
 @public
  GeogebraCommonKernelMatrixCoordMatrix4x4 *planeMatrix_;
  GeogebraCommonKernelMatrixCoords *p1_, *p2_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations, planeMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations, p1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations, p2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations, point_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)aView3d {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, aView3d);
  return self;
}

- (jboolean)isVisible {
  return YES;
}

- (void)setPointWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point0 {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_set_point_(self, point0);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_set_p1_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point_)) getCoords]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_setAndConsume_p2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [p2_ setWithGeogebraCommonKernelMatrixCoords:p1_];
  [p2_ setWithInt:3 withDouble:0];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(planeMatrix_)) setOriginWithGeogebraCommonKernelMatrixCoords:p2_];
  [self setWaitForUpdate];
}

- (void)drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG];
  [self drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setColorWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1) autorelease]];
  [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (jboolean)updateForItSelf {
  [self updateForItSelfWithGeogebraCommonKernelMatrixCoords:p1_ withGeogebraCommonKernelMatrixCoords:p2_];
  return YES;
}

- (void)updateLabel {
}

- (void)updateLabelPosition {
}

- (jint)getLineThickness {
  if (point_ == nil) {
    return 1;
  }
  return JavaLangMath_maxWithInt_withInt_(1, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point_)) getPointSize] / 2);
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) [self updateForItSelf];
}

- (jint)getPickOrder {
  return 0;
}

- (jboolean)isTransparent {
  return NO;
}

- (jdouble)getColorShift {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_NONE;
}

- (void)updateColors {
}

- (void)dealloc {
  RELEASE_(planeMatrix_);
  RELEASE_(p1_);
  RELEASE_(p2_);
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "DrawPointDecorations", NULL, 0x1, NULL, NULL },
    { "isVisible", NULL, "Z", 0x4, NULL, NULL },
    { "setPointWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "setPoint", "V", 0x1, NULL, NULL },
    { "drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHidden", "V", 0x1, NULL, NULL },
    { "drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateLabel", NULL, "V", 0x4, NULL, NULL },
    { "updateLabelPosition", NULL, "V", 0x4, NULL, NULL },
    { "getLineThickness", NULL, "I", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "isTransparent", NULL, "Z", 0x1, NULL, NULL },
    { "getColorShift", NULL, "D", 0x4, NULL, NULL },
    { "updateColors", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "planeMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "p1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "p2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations = { 2, "DrawPointDecorations", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 14, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *aView3d) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawCoordSys1D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, aView3d);
  [self setDrawMinMaxWithDouble:0 withDouble:1];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_setAndConsume_p1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [self->p1_ setWWithDouble:1];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_set_p2_(self, [self->p1_ copyVector]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_set_planeMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->planeMatrix_)) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VX_())) mulWithDouble:0.2]];
  [self->planeMatrix_ setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VY_())) mulWithDouble:0.2]];
  [self setWaitForUpdate];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *aView3d) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, aView3d);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations)
