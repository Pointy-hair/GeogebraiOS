//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoFactors.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/cas/AlgoFactors.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoFactors () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoList *g_;
  JavaLangStringBuilder *sb_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoFactors, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoFactors, g_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoFactors, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoFactors, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoFactors_compute(GeogebraCommonKernelCasAlgoFactors *self);

@implementation GeogebraCommonKernelCasAlgoFactors

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelCasAlgoFactors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Factors();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelCasAlgoFactors_compute(self);
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(g_);
  RELEASE_(sb_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:", "AlgoFactors", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoFactors = { 2, "AlgoFactors", "geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoFactors;
}

@end

void GeogebraCommonKernelCasAlgoFactors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoFactors *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoFactors_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelCasAlgoFactors_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelCasAlgoFactors_set_f_(self, f);
  GeogebraCommonKernelCasAlgoFactors_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelCasAlgoFactors_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoFactors *new_GeogebraCommonKernelCasAlgoFactors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelCasAlgoFactors *self = [GeogebraCommonKernelCasAlgoFactors alloc];
  GeogebraCommonKernelCasAlgoFactors_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelCasAlgoFactors_compute(GeogebraCommonKernelCasAlgoFactors *self) {
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
    return;
  }
  @try {
    IOSObjectArray *funVarStr = [self->f_ getTempVarCASStringWithBoolean:NO];
    [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
    [self->sb_ appendWithNSString:@"Numeric(Factors("];
    [self->sb_ appendWithNSString:IOSObjectArray_Get(nil_chk(funVarStr), 0)];
    [self->sb_ appendWithNSString:@"))"];
    NSString *listOut = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) evaluateCachedGeoGebraCASWithNSString:[self->sb_ description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:self->arbconst_];
    if (listOut == nil || ((jint) [listOut length]) == 0) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
    }
    else {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([self->kernel_ getAlgebraProcessor])) evaluateToListWithNSString:listOut]];
      for (jint i = 0; i < [self->g_ size] && [[self->g_ getWithInt:i] isKindOfClass:[GeogebraCommonKernelGeosGeoList class]]; i++) {
        GeogebraCommonKernelGeosGeoList *factor = (GeogebraCommonKernelGeosGeoList *) check_class_cast([self->g_ getWithInt:i], [GeogebraCommonKernelGeosGeoList class]);
        if ([[((GeogebraCommonKernelGeosGeoList *) nil_chk(factor)) getWithInt:0] isKindOfClass:[GeogebraCommonKernelGeosGeoNumeric class]]) {
          GeogebraCommonKernelGeosGeoElement *constant = [factor getWithInt:0];
          GeogebraCommonKernelGeosGeoElement *exponent = [factor getWithInt:1];
          [factor removeWithInt:1];
          [factor removeWithInt:0];
          GeogebraCommonKernelGeosGeoFunction *fn = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
          [fn setWithGeogebraCommonKernelGeosGeoElement:constant];
          [factor addWithGeogebraCommonKernelGeosGeoElement:fn];
          [factor addWithGeogebraCommonKernelGeosGeoElement:exponent];
        }
      }
    }
  }
  @catch (JavaLangThrowable *th) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->g_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoFactors)
