//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/StringUtil.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/TreeSet.h"

static IOSCharArray *GeogebraCommonUtilStringUtil_hexChar_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonUtilStringUtil, hexChar_, IOSCharArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonUtilStringUtil, hexChar_, IOSCharArray *)

static JavaLangStringBuilder *GeogebraCommonUtilStringUtil_sb_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonUtilStringUtil, sb_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonUtilStringUtil, sb_, JavaLangStringBuilder *)

static JavaLangStringBuilder *GeogebraCommonUtilStringUtil_sbReplaceExp_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonUtilStringUtil, sbReplaceExp_, JavaLangStringBuilder *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonUtilStringUtil, sbReplaceExp_, JavaLangStringBuilder *)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonUtilStringUtil)

GeogebraCommonUtilStringUtil *GeogebraCommonUtilStringUtil_prototype_;

@implementation GeogebraCommonUtilStringUtil

+ (NSString *)convertToHexWithByteArray:(IOSByteArray *)data {
  return GeogebraCommonUtilStringUtil_convertToHexWithByteArray_(data);
}

+ (NSString *)toHexStringWithChar:(jchar)c {
  return GeogebraCommonUtilStringUtil_toHexStringWithChar_(c);
}

+ (NSString *)toHexStringWithInt:(jint)i {
  return GeogebraCommonUtilStringUtil_toHexStringWithInt_(i);
}

+ (NSString *)toHexStringWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)col {
  return GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(col);
}

+ (NSString *)toHexStringWithNSString:(NSString *)s {
  return GeogebraCommonUtilStringUtil_toHexStringWithNSString_(s);
}

+ (NSString *)toHTMLStringWithNSString:(NSString *)title {
  return GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_(title);
}

+ (NSString *)toHTMLStringWithNSString:(NSString *)str
                           withBoolean:(jboolean)encodeLTGT {
  return GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_withBoolean_(str, encodeLTGT);
}

+ (NSString *)encodeXMLWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_encodeXMLWithNSString_(str);
}

+ (void)encodeXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withNSString:(NSString *)str {
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, str);
}

- (jboolean)isRightToLeftCharWithChar:(jchar)c {
  return NO;
}

+ (NSString *)toLaTeXStringWithNSString:(NSString *)str
                            withBoolean:(jboolean)convertGreekLetters {
  return GeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(str, convertGreekLetters);
}

+ (NSString *)stringWithNSString:(NSString *)s
                         withInt:(jint)n {
  return GeogebraCommonUtilStringUtil_stringWithNSString_withInt_(s, n);
}

+ (NSString *)removeSpacesWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_removeSpacesWithNSString_(str);
}

+ (NSString *)trimSpacesWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_trimSpacesWithNSString_(str);
}

+ (JavaLangStringBuilder *)resetStringBuilderWithJavaLangStringBuilder:(JavaLangStringBuilder *)high {
  return GeogebraCommonUtilStringUtil_resetStringBuilderWithJavaLangStringBuilder_(high);
}

+ (jboolean)isNumberWithNSString:(NSString *)text {
  return GeogebraCommonUtilStringUtil_isNumberWithNSString_(text);
}

- (NSString *)toLowerWithNSString:(NSString *)s {
  return [((NSString *) nil_chk(s)) lowercaseString];
}

- (NSString *)toUpperWithNSString:(NSString *)s {
  return [((NSString *) nil_chk(s)) uppercaseString];
}

+ (NSString *)toLowerCaseWithNSString:(NSString *)s {
  return GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(s);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)s {
  return GeogebraCommonUtilStringUtil_toUpperCaseWithNSString_(s);
}

+ (jdouble)parseDoubleWithNSString:(NSString *)s {
  return GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(s);
}

+ (NSString *)repeatWithChar:(jchar)c
                     withInt:(jint)count {
  return GeogebraCommonUtilStringUtil_repeatWithChar_withInt_(c, count);
}

+ (jboolean)isLetterOrDigitWithChar:(jchar)c {
  return GeogebraCommonUtilStringUtil_isLetterOrDigitWithChar_(c);
}

+ (jboolean)isLetterOrDigitOrUnderscoreWithChar:(jchar)character {
  return GeogebraCommonUtilStringUtil_isLetterOrDigitOrUnderscoreWithChar_(character);
}

+ (jboolean)isDigitWithChar:(jchar)ch {
  return GeogebraCommonUtilStringUtil_isDigitWithChar_(ch);
}

+ (jboolean)isLetterWithChar:(jchar)c {
  return GeogebraCommonUtilStringUtil_isLetterWithChar_(c);
}

+ (jboolean)isNotEqualWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_isNotEqualWithNSString_(str);
}

+ (jboolean)isInequalityWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_isInequalityWithNSString_(str);
}

+ (NSString *)ignoreIndicesWithNSString:(NSString *)text {
  return GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(text);
}

+ (jint)checkBracketsBackwardWithNSString:(NSString *)parseString {
  return GeogebraCommonUtilStringUtil_checkBracketsBackwardWithNSString_(parseString);
}

+ (NSString *)fixVerticalBarsWithNSString:(NSString *)parseString {
  return GeogebraCommonUtilStringUtil_fixVerticalBarsWithNSString_(parseString);
}

+ (jboolean)representsMultipleExpressionsWithNSString:(NSString *)evalText {
  return GeogebraCommonUtilStringUtil_representsMultipleExpressionsWithNSString_(evalText);
}

+ (jdouble)estimateLengthHTMLWithNSString:(NSString *)label
               withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font {
  return GeogebraCommonUtilStringUtil_estimateLengthHTMLWithNSString_withGeogebraCommonAwtGFont_(label, font);
}

+ (jdouble)estimateLengthWithNSString:(NSString *)label
           withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font {
  return GeogebraCommonUtilStringUtil_estimateLengthWithNSString_withGeogebraCommonAwtGFont_(label, font);
}

+ (jdouble)estimateHeightWithNSString:(NSString *)string
           withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font {
  return GeogebraCommonUtilStringUtil_estimateHeightWithNSString_withGeogebraCommonAwtGFont_(string, font);
}

+ (id)formatWithNSString:(NSString *)sub
              withDouble:(jdouble)x0
              withDouble:(jdouble)x1
              withDouble:(jdouble)x2
              withDouble:(jdouble)x3 {
  return GeogebraCommonUtilStringUtil_formatWithNSString_withDouble_withDouble_withDouble_withDouble_(sub, x0, x1, x2, x3);
}

+ (NSString *)wrapInExactWithNSString:(NSString *)s {
  return GeogebraCommonUtilStringUtil_wrapInExactWithNSString_(s);
}

+ (NSString *)removeLeadingSlashWithNSString:(NSString *)filename {
  return GeogebraCommonUtilStringUtil_removeLeadingSlashWithNSString_(filename);
}

+ (NSString *)toHtmlColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  return GeogebraCommonUtilStringUtil_toHtmlColorWithGeogebraCommonAwtGColor_(color);
}

+ (JavaUtilArrayList *)wholeWordTokenizeWithNSString:(NSString *)input {
  return GeogebraCommonUtilStringUtil_wholeWordTokenizeWithNSString_(input);
}

+ (NSString *)joinTokensWithJavaLangIterable:(id<JavaLangIterable>)tokens
                                withNSString:(NSString *)delimiter {
  return GeogebraCommonUtilStringUtil_joinTokensWithJavaLangIterable_withNSString_(tokens, delimiter);
}

+ (NSString *)cannonicNumberWithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_cannonicNumberWithNSString_(str);
}

+ (NSString *)cannonicNumber2WithNSString:(NSString *)str {
  return GeogebraCommonUtilStringUtil_cannonicNumber2WithNSString_(str);
}

+ (jboolean)isWhitespaceWithChar:(jchar)c {
  return GeogebraCommonUtilStringUtil_isWhitespaceWithChar_(c);
}

+ (jchar)processQuotesWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                   withNSString:(NSString *)content
                                       withChar:(jchar)ret {
  return GeogebraCommonUtilStringUtil_processQuotesWithJavaLangStringBuilder_withNSString_withChar_(sb, content, ret);
}

- (instancetype)init {
  GeogebraCommonUtilStringUtil_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonUtilStringUtil class]) {
    JreStrongAssignAndConsume(&GeogebraCommonUtilStringUtil_hexChar_, nil, [IOSCharArray newArrayWithChars:(jchar[]){ '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' } count:16]);
    JreStrongAssignAndConsume(&GeogebraCommonUtilStringUtil_sbReplaceExp_, nil, new_JavaLangStringBuilder_initWithInt_(200));
    J2OBJC_SET_INITIALIZED(GeogebraCommonUtilStringUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "convertToHexWithByteArray:", "convertToHex", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toHexStringWithChar:", "toHexString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "toHexStringWithInt:", "toHexString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "toHexStringWithGeogebraCommonAwtGColor:", "toHexString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "toHexStringWithNSString:", "toHexString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "toHTMLStringWithNSString:", "toHTMLString", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toHTMLStringWithNSString:withBoolean:", "toHTMLString", "Ljava.lang.String;", 0x19, NULL, NULL },
    { "encodeXMLWithNSString:", "encodeXML", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "encodeXMLWithJavaLangStringBuilder:withNSString:", "encodeXML", "V", 0x9, NULL, NULL },
    { "isRightToLeftCharWithChar:", "isRightToLeftChar", "Z", 0x4, NULL, NULL },
    { "toLaTeXStringWithNSString:withBoolean:", "toLaTeXString", "Ljava.lang.String;", 0x29, NULL, NULL },
    { "stringWithNSString:withInt:", "string", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "removeSpacesWithNSString:", "removeSpaces", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "trimSpacesWithNSString:", "trimSpaces", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "resetStringBuilderWithJavaLangStringBuilder:", "resetStringBuilder", "Ljava.lang.StringBuilder;", 0x9, NULL, NULL },
    { "isNumberWithNSString:", "isNumber", "Z", 0x9, NULL, NULL },
    { "toLowerWithNSString:", "toLower", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "toUpperWithNSString:", "toUpper", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "toLowerCaseWithNSString:", "toLowerCase", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toUpperCaseWithNSString:", "toUpperCase", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "parseDoubleWithNSString:", "parseDouble", "D", 0x9, NULL, NULL },
    { "repeatWithChar:withInt:", "repeat", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isLetterOrDigitWithChar:", "isLetterOrDigit", "Z", 0x9, NULL, NULL },
    { "isLetterOrDigitOrUnderscoreWithChar:", "isLetterOrDigitOrUnderscore", "Z", 0x9, NULL, NULL },
    { "isDigitWithChar:", "isDigit", "Z", 0x9, NULL, NULL },
    { "isLetterWithChar:", "isLetter", "Z", 0x9, NULL, NULL },
    { "isNotEqualWithNSString:", "isNotEqual", "Z", 0x9, NULL, NULL },
    { "isInequalityWithNSString:", "isInequality", "Z", 0x9, NULL, NULL },
    { "ignoreIndicesWithNSString:", "ignoreIndices", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "checkBracketsBackwardWithNSString:", "checkBracketsBackward", "I", 0x9, NULL, NULL },
    { "fixVerticalBarsWithNSString:", "fixVerticalBars", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "representsMultipleExpressionsWithNSString:", "representsMultipleExpressions", "Z", 0x9, NULL, NULL },
    { "estimateLengthHTMLWithNSString:withGeogebraCommonAwtGFont:", "estimateLengthHTML", "D", 0x9, NULL, NULL },
    { "estimateLengthWithNSString:withGeogebraCommonAwtGFont:", "estimateLength", "D", 0x9, NULL, NULL },
    { "estimateHeightWithNSString:withGeogebraCommonAwtGFont:", "estimateHeight", "D", 0x9, NULL, NULL },
    { "formatWithNSString:withDouble:withDouble:withDouble:withDouble:", "format", "Ljava.lang.Object;", 0x9, NULL, NULL },
    { "wrapInExactWithNSString:", "wrapInExact", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "removeLeadingSlashWithNSString:", "removeLeadingSlash", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "toHtmlColorWithGeogebraCommonAwtGColor:", "toHtmlColor", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "wholeWordTokenizeWithNSString:", "wholeWordTokenize", "Ljava.util.ArrayList;", 0x9, NULL, NULL },
    { "joinTokensWithJavaLangIterable:withNSString:", "joinTokens", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "cannonicNumberWithNSString:", "cannonicNumber", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "cannonicNumber2WithNSString:", "cannonicNumber2", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isWhitespaceWithChar:", "isWhitespace", "Z", 0x9, NULL, NULL },
    { "processQuotesWithJavaLangStringBuilder:withNSString:withChar:", "processQuotes", "C", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "hexChar_", NULL, 0xa, "[C", &GeogebraCommonUtilStringUtil_hexChar_, NULL,  },
    { "prototype_", NULL, 0x9, "Lgeogebra.common.util.StringUtil;", &GeogebraCommonUtilStringUtil_prototype_, NULL,  },
    { "sb_", NULL, 0xa, "Ljava.lang.StringBuilder;", &GeogebraCommonUtilStringUtil_sb_, NULL,  },
    { "sbReplaceExp_", NULL, 0xa, "Ljava.lang.StringBuilder;", &GeogebraCommonUtilStringUtil_sbReplaceExp_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilStringUtil = { 2, "StringUtil", "geogebra.common.util", NULL, 0x1, 46, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilStringUtil;
}

@end

NSString *GeogebraCommonUtilStringUtil_convertToHexWithByteArray_(IOSByteArray *data) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaLangStringBuilder *buf = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < ((IOSByteArray *) nil_chk(data))->size_; i++) {
    [buf appendWithChar:JavaLangCharacter_forDigitWithInt_withInt_((RShift32(IOSByteArray_Get(data, i), 4)) & (jint) 0xF, 16)];
    [buf appendWithChar:JavaLangCharacter_forDigitWithInt_withInt_((IOSByteArray_Get(data, i) & (jint) 0xF), 16)];
  }
  return [buf description];
}

NSString *GeogebraCommonUtilStringUtil_toHexStringWithChar_(jchar c) {
  GeogebraCommonUtilStringUtil_initialize();
  jint i = c + 0;
  JavaLangStringBuilder *hexSB = [new_JavaLangStringBuilder_initWithInt_(8) autorelease];
  [hexSB appendWithNSString:@"\\u"];
  [hexSB appendWithChar:IOSCharArray_Get(nil_chk(GeogebraCommonUtilStringUtil_hexChar_), URShift32((i & (jint) 0xf000), 12))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, RShift32((i & (jint) 0x0f00), 8))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf0), 4))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, i & (jint) 0x0f)];
  return [hexSB description];
}

NSString *GeogebraCommonUtilStringUtil_toHexStringWithInt_(jint i) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaLangStringBuilder *hexSB = [new_JavaLangStringBuilder_initWithInt_(16) autorelease];
  [hexSB appendWithChar:IOSCharArray_Get(nil_chk(GeogebraCommonUtilStringUtil_hexChar_), URShift32((i & (jint) 0xf0000000), 28))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf000000), 24))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf00000), 20))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf0000), 16))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf000), 12))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, RShift32((i & (jint) 0x0f00), 8))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((i & (jint) 0xf0), 4))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, i & (jint) 0x0f)];
  return [hexSB description];
}

NSString *GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(GeogebraCommonAwtGColor *col) {
  GeogebraCommonUtilStringUtil_initialize();
  jbyte r = (jbyte) [((GeogebraCommonAwtGColor *) nil_chk(col)) getRed];
  jbyte g = (jbyte) [col getGreen];
  jbyte b = (jbyte) [col getBlue];
  JavaLangStringBuilder *hexSB = [new_JavaLangStringBuilder_initWithInt_(8) autorelease];
  [hexSB appendWithChar:IOSCharArray_Get(nil_chk(GeogebraCommonUtilStringUtil_hexChar_), URShift32((r & (jint) 0xf0), 4))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, r & (jint) 0x0f)];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((g & (jint) 0xf0), 4))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, g & (jint) 0x0f)];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, URShift32((b & (jint) 0xf0), 4))];
  [hexSB appendWithChar:IOSCharArray_Get(GeogebraCommonUtilStringUtil_hexChar_, b & (jint) 0x0f)];
  return [hexSB description];
}

NSString *GeogebraCommonUtilStringUtil_toHexStringWithNSString_(NSString *s) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(s)) length]) * 6) autorelease];
  for (jint i = 0; i < ((jint) [s length]); i++) {
    [sb appendWithNSString:GeogebraCommonUtilStringUtil_toHexStringWithChar_([s charAtWithInt:i])];
  }
  return [sb description];
}

NSString *GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_(NSString *title) {
  GeogebraCommonUtilStringUtil_initialize();
  return GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_withBoolean_(title, YES);
}

NSString *GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_withBoolean_(NSString *str, jboolean encodeLTGT) {
  GeogebraCommonUtilStringUtil_initialize();
  if (str == nil) return nil;
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  jint len = ((jint) [((NSString *) nil_chk(str)) length]);
  for (jint i = 0; i < len; i++) {
    jchar c = [str charAtWithInt:i];
    jint code = c;
    if ((code >= 32 && code <= 126)) {
      if (!encodeLTGT) {
        [sb appendWithChar:c];
      }
      else {
        switch (code) {
          case 60:
          [sb appendWithNSString:@"&lt;"];
          break;
          case 62:
          [sb appendWithNSString:@"&gt;"];
          break;
          default:
          [sb appendWithChar:c];
        }
      }
    }
    else {
      switch (code) {
        case 10:
        case 13:
        [sb appendWithNSString:@"<br/>\n"];
        break;
        case 9:
        [sb appendWithNSString:@"&nbsp;"];
        break;
        default:
        [sb appendWithNSString:@"&#"];
        [sb appendWithInt:code];
        [sb appendWithChar:';'];
      }
    }
  }
  return [sb description];
}

NSString *GeogebraCommonUtilStringUtil_encodeXMLWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(str)) length])) autorelease];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, str);
  return [sb description];
}

void GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(JavaLangStringBuilder *sb, NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  if (str == nil) return;
  jint len = ((jint) [((NSString *) nil_chk(str)) length]);
  for (jint i = 0; i < len; i++) {
    jchar c = [str charAtWithInt:i];
    if (c <= 0x001f) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&#"];
      [sb appendWithNSString:JreStrcat("I", ((jint) c))];
      [sb appendWithChar:';'];
      if (c != 0x000a && c != 13) {
        GeogebraCommonUtilDebugLog_warnWithNSString_(JreStrcat("$I", @"Control character being written to XML: ", ((jint) c)));
      }
    }
    else {
      switch (c) {
        case '>':
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&gt;"];
        break;
        case '<':
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&lt;"];
        break;
        case '"':
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&quot;"];
        break;
        case '\'':
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&apos;"];
        break;
        case '&':
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&amp;"];
        break;
        default:
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
      }
    }
  }
}

NSString *GeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(NSString *str, jboolean convertGreekLetters) {
  GeogebraCommonUtilStringUtil_initialize();
  @synchronized(GeogebraCommonUtilStringUtil_class_()) {
    jint length = ((jint) [((NSString *) nil_chk(str)) length]);
    [((JavaLangStringBuilder *) nil_chk(GeogebraCommonUtilStringUtil_sbReplaceExp_)) setLengthWithInt:0];
    jchar c = 0;
    jchar previousChar;
    for (jint i = 0; i < length; i++) {
      previousChar = c;
      c = [str charAtWithInt:i];
      if ([((GeogebraCommonUtilStringUtil *) nil_chk(GeogebraCommonUtilStringUtil_prototype_)) isRightToLeftCharWithChar:c]) {
        jint j = i;
        while (j < length && ([GeogebraCommonUtilStringUtil_prototype_ isRightToLeftCharWithChar:[str charAtWithInt:j]] || [str charAtWithInt:j] == 0x00a0)) j++;
        for (jint k = j - 1; k >= i; k--) [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithChar:[str charAtWithInt:k]];
        [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithChar:' '];
        i = j - 1;
        continue;
      }
      switch (c) {
        case '%':
        if (!(previousChar == '\\')) {
          [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\"];
        }
        [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"%"];
        break;
        default:
        if (!convertGreekLetters) {
          [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithChar:c];
        }
        else {
          switch (c) {
            case GeogebraCommonUtilUnicode_alpha:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\alpha"];
            break;
            case GeogebraCommonUtilUnicode_beta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\beta"];
            break;
            case GeogebraCommonUtilUnicode_gamma:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\gamma"];
            break;
            case GeogebraCommonUtilUnicode_delta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\delta"];
            break;
            case GeogebraCommonUtilUnicode_epsilon:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\varepsilon"];
            break;
            case GeogebraCommonUtilUnicode_zeta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\zeta"];
            break;
            case GeogebraCommonUtilUnicode_eta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\eta"];
            break;
            case GeogebraCommonUtilUnicode_theta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\theta"];
            break;
            case GeogebraCommonUtilUnicode_iota:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\iota"];
            break;
            case GeogebraCommonUtilUnicode_kappa:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\kappa"];
            break;
            case GeogebraCommonUtilUnicode_lambda:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\lambda"];
            break;
            case GeogebraCommonUtilUnicode_mu:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\mu"];
            break;
            case GeogebraCommonUtilUnicode_nu:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\nu"];
            break;
            case GeogebraCommonUtilUnicode_xi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\xi"];
            break;
            case GeogebraCommonUtilUnicode_omicron:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\omicron"];
            break;
            case GeogebraCommonUtilUnicode_pi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\pi"];
            break;
            case GeogebraCommonUtilUnicode_rho:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\rho"];
            break;
            case GeogebraCommonUtilUnicode_sigma:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\sigma"];
            break;
            case GeogebraCommonUtilUnicode_tau:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\tau"];
            break;
            case GeogebraCommonUtilUnicode_upsilon:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\upsilon"];
            break;
            case GeogebraCommonUtilUnicode_phi_symbol:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\phi"];
            break;
            case GeogebraCommonUtilUnicode_phi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\varphi"];
            break;
            case GeogebraCommonUtilUnicode_chi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\chi"];
            break;
            case GeogebraCommonUtilUnicode_psi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\psi"];
            break;
            case GeogebraCommonUtilUnicode_omega:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\omega"];
            break;
            case GeogebraCommonUtilUnicode_Alpha:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Alpha"];
            break;
            case GeogebraCommonUtilUnicode_Beta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Beta"];
            break;
            case GeogebraCommonUtilUnicode_Gamma:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Gamma"];
            break;
            case GeogebraCommonUtilUnicode_Delta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Delta"];
            break;
            case GeogebraCommonUtilUnicode_Epsilon:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Epsilon"];
            break;
            case GeogebraCommonUtilUnicode_Zeta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Zeta"];
            break;
            case GeogebraCommonUtilUnicode_Eta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Eta"];
            break;
            case GeogebraCommonUtilUnicode_Theta:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Theta"];
            break;
            case GeogebraCommonUtilUnicode_Iota:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Iota"];
            break;
            case GeogebraCommonUtilUnicode_Kappa:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Kappa"];
            break;
            case GeogebraCommonUtilUnicode_Lambda:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Lambda"];
            break;
            case GeogebraCommonUtilUnicode_Mu:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Mu"];
            break;
            case GeogebraCommonUtilUnicode_Nu:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Nu"];
            break;
            case GeogebraCommonUtilUnicode_Xi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Xi"];
            break;
            case GeogebraCommonUtilUnicode_Omicron:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Omicron"];
            break;
            case GeogebraCommonUtilUnicode_Pi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Pi"];
            break;
            case GeogebraCommonUtilUnicode_Rho:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Rho"];
            break;
            case GeogebraCommonUtilUnicode_Sigma:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Sigma"];
            break;
            case GeogebraCommonUtilUnicode_Tau:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Tau"];
            break;
            case GeogebraCommonUtilUnicode_Upsilon:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Upsilon"];
            break;
            case GeogebraCommonUtilUnicode_Phi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Phi"];
            break;
            case GeogebraCommonUtilUnicode_Chi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Chi"];
            break;
            case GeogebraCommonUtilUnicode_Psi:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Psi"];
            break;
            case GeogebraCommonUtilUnicode_Omega:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithNSString:@"\\Omega"];
            break;
            default:
            [GeogebraCommonUtilStringUtil_sbReplaceExp_ appendWithChar:c];
          }
        }
      }
    }
    return [GeogebraCommonUtilStringUtil_sbReplaceExp_ description];
  }
}

NSString *GeogebraCommonUtilStringUtil_stringWithNSString_withInt_(NSString *s, jint n) {
  GeogebraCommonUtilStringUtil_initialize();
  if (n == 1) return s;
  if (n < 1) return @"";
  if (GeogebraCommonUtilStringUtil_sb_ == nil) JreStrongAssignAndConsume(&GeogebraCommonUtilStringUtil_sb_, nil, new_JavaLangStringBuilder_init());
  [((JavaLangStringBuilder *) nil_chk(GeogebraCommonUtilStringUtil_sb_)) setLengthWithInt:0];
  for (jint i = 0; i < n; i++) {
    [GeogebraCommonUtilStringUtil_sb_ appendWithNSString:s];
  }
  return [GeogebraCommonUtilStringUtil_sb_ description];
}

NSString *GeogebraCommonUtilStringUtil_removeSpacesWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  if (str == nil || ((jint) [str length]) == 0) return @"";
  if (GeogebraCommonUtilStringUtil_sb_ == nil) JreStrongAssignAndConsume(&GeogebraCommonUtilStringUtil_sb_, nil, new_JavaLangStringBuilder_init());
  [((JavaLangStringBuilder *) nil_chk(GeogebraCommonUtilStringUtil_sb_)) setLengthWithInt:0];
  jchar c;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    c = [str charAtWithInt:i];
    if (c != ' ') [GeogebraCommonUtilStringUtil_sb_ appendWithChar:c];
  }
  return [GeogebraCommonUtilStringUtil_sb_ description];
}

NSString *GeogebraCommonUtilStringUtil_trimSpacesWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  jint len = ((jint) [((NSString *) nil_chk(str)) length]);
  if (len == 0) return @"";
  jint start = 0;
  while ([str charAtWithInt:start] == ' ' && start < len - 1) start++;
  jint end = len;
  while ([str charAtWithInt:end - 1] == ' ' && end > start) end--;
  if (start == end) return @"";
  return [str substring:start endIndex:end];
}

JavaLangStringBuilder *GeogebraCommonUtilStringUtil_resetStringBuilderWithJavaLangStringBuilder_(JavaLangStringBuilder *high) {
  GeogebraCommonUtilStringUtil_initialize();
  if (high == nil) return [new_JavaLangStringBuilder_init() autorelease];
  [((JavaLangStringBuilder *) nil_chk(high)) setLengthWithInt:0];
  return high;
}

jboolean GeogebraCommonUtilStringUtil_isNumberWithNSString_(NSString *text) {
  GeogebraCommonUtilStringUtil_initialize();
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]); i++) {
    jchar c = [text charAtWithInt:i];
    if (!GeogebraCommonUtilStringUtil_isDigitWithChar_(c) && c != '.' && c != GeogebraCommonUtilUnicode_ArabicComma && c != '-') return NO;
  }
  return YES;
}

NSString *GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(NSString *s) {
  GeogebraCommonUtilStringUtil_initialize();
  return [((GeogebraCommonUtilStringUtil *) nil_chk(GeogebraCommonUtilStringUtil_prototype_)) toLowerWithNSString:s];
}

NSString *GeogebraCommonUtilStringUtil_toUpperCaseWithNSString_(NSString *s) {
  GeogebraCommonUtilStringUtil_initialize();
  return [((GeogebraCommonUtilStringUtil *) nil_chk(GeogebraCommonUtilStringUtil_prototype_)) toUpperWithNSString:s];
}

jdouble GeogebraCommonUtilStringUtil_parseDoubleWithNSString_(NSString *s) {
  GeogebraCommonUtilStringUtil_initialize();
  if ([@"NaN" isEqual:s] || [@"undefined" isEqual:s] || [@"null" isEqual:s]) return JavaLangDouble_NaN;
  else if ([@"Infinity" isEqual:s]) return JavaLangDouble_POSITIVE_INFINITY;
  else if ([@"-Infinity" isEqual:s]) return JavaLangDouble_NEGATIVE_INFINITY;
  return JavaLangDouble_parseDoubleWithNSString_(s);
}

NSString *GeogebraCommonUtilStringUtil_repeatWithChar_withInt_(jchar c, jint count) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaLangStringBuilder *ret = [new_JavaLangStringBuilder_init() autorelease];
  for (jint i = 0; i < count; i++) [ret appendWithChar:c];
  return [ret description];
}

jboolean GeogebraCommonUtilStringUtil_isLetterOrDigitWithChar_(jchar c) {
  GeogebraCommonUtilStringUtil_initialize();
  if (GeogebraCommonUtilStringUtil_isDigitWithChar_(c)) {
    return YES;
  }
  return GeogebraCommonUtilStringUtil_isLetterWithChar_(c);
}

jboolean GeogebraCommonUtilStringUtil_isLetterOrDigitOrUnderscoreWithChar_(jchar character) {
  GeogebraCommonUtilStringUtil_initialize();
  switch (character) {
    case '_':
    return YES;
    default:
    return GeogebraCommonUtilStringUtil_isLetterOrDigitWithChar_(character);
  }
}

jboolean GeogebraCommonUtilStringUtil_isDigitWithChar_(jchar ch) {
  GeogebraCommonUtilStringUtil_initialize();
  if ((ch >= '0' && ch <= '9') || (ch >= 0x0660 && ch <= 0x0669) || (ch >= 0x06f0 && ch <= 0x06f9) || (ch >= 0x0966 && ch <= 0x096f) || (ch >= 0x09e6 && ch <= 0x09ef) || (ch >= 0x0a66 && ch <= 0x0a6f) || (ch >= 0x0ae6 && ch <= 0x0aef) || (ch >= 0x0b66 && ch <= 0x0b6f) || (ch >= 0x0be6 && ch <= 0x0bef) || (ch >= 0x0c66 && ch <= 0x0c6f) || (ch >= 0x0ce6 && ch <= 0x0cef) || (ch >= 0x0d66 && ch <= 0x0d6f) || (ch >= 0x0e50 && ch <= 0x0e59) || (ch >= 0x0ed0 && ch <= 0x0ed9) || (ch >= 0x0f20 && ch <= 0x0f29) || (ch >= 0x1040 && ch <= 0x1049) || (ch >= 0x17e0 && ch <= 0x17e9) || (ch >= 0x1810 && ch <= 0x1819) || (ch >= 0x1b50 && ch <= 0x1b59) || (ch >= 0x1bb0 && ch <= 0x1bb9) || (ch >= 0x1c40 && ch <= 0x1c49) || (ch >= 0x1c50 && ch <= 0x1c59) || (ch >= 0xa8d0 && ch <= 0xa8d9)) {
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonUtilStringUtil_isLetterWithChar_(jchar c) {
  GeogebraCommonUtilStringUtil_initialize();
  if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == 0x00b7) || (c >= 0x00c0 && c <= 0x00d6) || (c >= 0x00d8 && c <= 0x00f6) || (c >= 0x00f8 && c <= 0x01bf) || (c >= 0x01c4 && c <= 0x02a8) || (c >= 0x0391 && c <= 0x03f3) || (c >= 0x0401 && c <= 0x0481) || (c >= 0x0490 && c <= 0x04f9) || (c >= 0x0531 && c <= 0x1ffc) || (c >= 0x3041 && c <= 0x3357) || (c >= 0x4e00 && c <= 0xd7a3) || (c >= 0xf71d && c <= 0xfa2d) || (c >= 0xfb13 && c <= 0xfdfb) || (c >= 0xfe80 && c <= 0xfefc) || (c >= 0xff66 && c <= 0xff9d) || (c >= 0xffa1 && c <= 0xffdc)) {
    return YES;
  }
  return NO;
}

jboolean GeogebraCommonUtilStringUtil_isNotEqualWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  return [@"!=" isEqual:str] || [@"<>" isEqual:str] || [((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_NOTEQUAL_())) isEqual:str];
}

jboolean GeogebraCommonUtilStringUtil_isInequalityWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  return [@"<" isEqual:str] || [@">" isEqual:str] || GeogebraCommonUtilStringUtil_isNotEqualWithNSString_(str);
}

NSString *GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(NSString *text) {
  GeogebraCommonUtilStringUtil_initialize();
  if (text == nil) {
    return nil;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(80) autorelease];
  jboolean ignore = NO;
  jboolean underscore = NO;
  jboolean comment = NO;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]); i++) {
    jchar ch = [text charAtWithInt:i];
    if (comment && ch != '"') {
      [sb appendWithChar:ch];
      continue;
    }
    if (ch == '"' && !underscore) {
      [sb appendWithChar:ch];
      comment = !comment;
      continue;
    }
    if (ignore && ch == '}') {
      ignore = NO;
    }
    if (!ignore) {
      [sb appendWithChar:ch];
    }
    else {
      [sb appendWithChar:'X'];
    }
    if (underscore && ch == '{') {
      ignore = YES;
    }
    else if (!ignore) {
      underscore = (ch == '_');
    }
  }
  return [sb description];
}

jint GeogebraCommonUtilStringUtil_checkBracketsBackwardWithNSString_(NSString *parseString) {
  GeogebraCommonUtilStringUtil_initialize();
  jint curly = 0;
  jint square = 0;
  jint round = 0;
  JavaUtilStack *closingBrackets = [new_JavaUtilStack_init() autorelease];
  jboolean comment = NO;
  for (jint i = ((jint) [((NSString *) nil_chk(parseString)) length]) - 1; i >= 0; i--) {
    jchar ch = [parseString charAtWithInt:i];
    if (comment && ch != '"') {
      continue;
    }
    switch (ch) {
      case '"':
      comment = !comment;
      break;
      case '}':
      [closingBrackets addWithId:JavaLangInteger_valueOfWithInt_(i)];
      curly++;
      break;
      case '{':
      curly--;
      if (curly < 0) {
        return i;
      }
      [closingBrackets pop];
      break;
      case ']':
      square++;
      [closingBrackets addWithId:JavaLangInteger_valueOfWithInt_(i)];
      break;
      case '[':
      square--;
      if (square < 0) {
        return i;
      }
      [closingBrackets pop];
      break;
      case ')':
      round++;
      [closingBrackets addWithId:JavaLangInteger_valueOfWithInt_(i)];
      break;
      case '(':
      round--;
      if (round < 0) {
        return i;
      }
      [closingBrackets pop];
      break;
    }
  }
  if (![closingBrackets isEmpty]) {
    return [((JavaLangInteger *) nil_chk([closingBrackets pop])) intValue];
  }
  return -1;
}

NSString *GeogebraCommonUtilStringUtil_fixVerticalBarsWithNSString_(NSString *parseString) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *ignoredIndices = GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(parseString);
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<JavaUtilSet> splitters = [new_JavaUtilTreeSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_SQUARE_ROOT), JavaLangCharacter_valueOfWithChar_('+'), JavaLangCharacter_valueOfWithChar_('-'), JavaLangCharacter_valueOfWithChar_('*'), JavaLangCharacter_valueOfWithChar_('/'), JavaLangCharacter_valueOfWithChar_('^'), JavaLangCharacter_valueOfWithChar_('=') } count:7 type:JavaLangCharacter_class_()])) autorelease];
  for (jint dir = 0; dir < 2; dir++) {
    jboolean comment = NO;
    jint bars = 0;
    JavaLangCharacter *lastNonWhitespace = JavaLangCharacter_valueOfWithChar_(' ');
    if (dir == 1) {
      parseString = [((JavaLangStringBuilder *) nil_chk([sb reverse])) description];
      ignoredIndices = GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(parseString);
      sb = [new_JavaLangStringBuilder_init() autorelease];
      splitters = [new_JavaUtilTreeSet_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharacter_valueOfWithChar_('*'), JavaLangCharacter_valueOfWithChar_('/'), JavaLangCharacter_valueOfWithChar_('^'), JavaLangCharacter_valueOfWithChar_('='), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_0), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_1), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_2), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_3), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_4), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_5), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_6), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_7), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_8), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_9), JavaLangCharacter_valueOfWithChar_(GeogebraCommonUtilUnicode_Superscript_Minus) } count:15 type:JavaLangCharacter_class_()])) autorelease];
    }
    jint len = ((jint) [((NSString *) nil_chk(ignoredIndices)) length]);
    for (jint i = 0; i < len; i++) {
      JavaLangCharacter *ch = JavaLangCharacter_valueOfWithChar_([ignoredIndices charAtWithInt:i]);
      [sb appendWithChar:[((NSString *) nil_chk(parseString)) charAtWithInt:i]];
      if (GeogebraCommonUtilStringUtil_isWhitespaceWithChar_([ch charValue]) || (comment && ![ch isEqual:JavaLangCharacter_valueOfWithChar_('"')])) {
        continue;
      }
      if ([ch isEqual:JavaLangCharacter_valueOfWithChar_('"')]) {
        comment = !comment;
      }
      if ([ch isEqual:JavaLangCharacter_valueOfWithChar_('|')]) {
        if (i == 0 || (bars % 2 == 1 && i < len - 2 && [ignoredIndices charAtWithInt:i + 1] == '|' && [ignoredIndices charAtWithInt:i + 2] == '|') || (i < len - 1 && [ignoredIndices charAtWithInt:i + 1] == '|' && [splitters containsWithId:lastNonWhitespace])) {
          [sb appendWithChar:' '];
        }
        bars++;
      }
      lastNonWhitespace = ch;
    }
  }
  return [((JavaLangStringBuilder *) nil_chk([sb reverse])) description];
}

jboolean GeogebraCommonUtilStringUtil_representsMultipleExpressionsWithNSString_(NSString *evalText) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *text = GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(evalText);
  jint brackets = 0;
  jboolean comment = NO;
  for (jint i = ((jint) [((NSString *) nil_chk(text)) length]) - 1; i >= 0; i--) {
    jchar ch = [text charAtWithInt:i];
    if (comment && ch != '"') continue;
    switch (ch) {
      case '}':
      case ')':
      case ']':
      brackets--;
      break;
      case '{':
      case '(':
      case '[':
      brackets++;
      break;
      case ',':
      if (brackets == 0) return YES;
    }
  }
  return NO;
}

jdouble GeogebraCommonUtilStringUtil_estimateLengthHTMLWithNSString_withGeogebraCommonAwtGFont_(NSString *label, GeogebraCommonAwtGFont *font) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *str = label;
  jboolean bold = NO;
  if ([((NSString *) nil_chk(str)) hasPrefix:@"<i>"] && [str hasSuffix:@"</i>"]) {
    str = [str substring:3 endIndex:((jint) [((NSString *) nil_chk(label)) length]) - 4];
  }
  if ([((NSString *) nil_chk(str)) hasPrefix:@"<b>"] && [str hasSuffix:@"</b>"]) {
    str = [str substring:3 endIndex:((jint) [str length]) - 4];
    bold = YES;
  }
  if ([((NSString *) nil_chk(str)) hasPrefix:@"<i>"] && [str hasSuffix:@"</i>"]) {
    str = [str substring:3 endIndex:((jint) [str length]) - 4];
  }
  return GeogebraCommonUtilStringUtil_estimateLengthWithNSString_withGeogebraCommonAwtGFont_(label, bold ? [((GeogebraCommonAwtGFont *) nil_chk(font)) deriveFontWithInt:GeogebraCommonAwtGFont_BOLD] : font);
}

jdouble GeogebraCommonUtilStringUtil_estimateLengthWithNSString_withGeogebraCommonAwtGFont_(NSString *label, GeogebraCommonAwtGFont *font) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *str = label;
  jboolean bold = [((GeogebraCommonAwtGFont *) nil_chk(font)) isBold];
  jdouble visibleChars = 0;
  jboolean index = NO;
  jdouble indexSize = 0.7;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    if ([str charAtWithInt:i] == '_') {
      if (i < ((jint) [str length]) - 1 && [str charAtWithInt:i + 1] == '{') {
        i++;
        index = YES;
      }
      else {
        visibleChars -= (1 - indexSize);
      }
    }
    else if ([str charAtWithInt:i] == '}') {
      index = NO;
    }
    else {
      visibleChars += index ? indexSize : 1;
    }
  }
  return bold ? visibleChars * 0.6 * [font getSize] : visibleChars * 0.5 * [font getSize];
}

jdouble GeogebraCommonUtilStringUtil_estimateHeightWithNSString_withGeogebraCommonAwtGFont_(NSString *string, GeogebraCommonAwtGFont *font) {
  GeogebraCommonUtilStringUtil_initialize();
  if (font == nil) {
    return 0;
  }
  return [((NSString *) nil_chk(string)) indexOf:'_'] > -1 ? [((GeogebraCommonAwtGFont *) nil_chk(font)) getSize] * 1.8 : [((GeogebraCommonAwtGFont *) nil_chk(font)) getSize] * 1.4;
}

id GeogebraCommonUtilStringUtil_formatWithNSString_withDouble_withDouble_withDouble_withDouble_(NSString *sub, jdouble x0, jdouble x1, jdouble x2, jdouble x3) {
  GeogebraCommonUtilStringUtil_initialize();
  return [((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk([((NSString *) nil_chk(sub)) replaceAll:@"%0" withReplacement:JreStrcat("D", x0)])) replaceAll:@"%1" withReplacement:JreStrcat("D", x1)])) replaceAll:@"%2" withReplacement:JreStrcat("D", x2)])) replace:@"%3" withSequence:JreStrcat("D", x3)];
}

NSString *GeogebraCommonUtilStringUtil_wrapInExactWithNSString_(NSString *s) {
  GeogebraCommonUtilStringUtil_initialize();
  if ([((NSString *) nil_chk(s)) hasPrefix:@"exact("]) {
    return s;
  }
  if ([s indexOfString:@"E"] > -1) {
    s = [s replace:@"E" withSequence:@"e"];
  }
  if ([@"?" isEqual:s] || [@"undef" isEqual:s]) {
    return @"undef";
  }
  if ([@"inf" isEqual:s]) {
    return s;
  }
  if ([@"-inf" isEqual:s]) {
    return s;
  }
  JavaLangStringBuilder *sb1 = [new_JavaLangStringBuilder_init() autorelease];
  [sb1 appendWithNSString:@"exact("];
  [sb1 appendWithNSString:s];
  [sb1 appendWithChar:')'];
  return [sb1 description];
}

NSString *GeogebraCommonUtilStringUtil_removeLeadingSlashWithNSString_(NSString *filename) {
  GeogebraCommonUtilStringUtil_initialize();
  if (filename != nil && ((jint) [filename length]) != 0 && [filename charAtWithInt:0] == '/') return [filename substring:1];
  return filename;
}

NSString *GeogebraCommonUtilStringUtil_toHtmlColorWithGeogebraCommonAwtGColor_(GeogebraCommonAwtGColor *color) {
  GeogebraCommonUtilStringUtil_initialize();
  return JreStrcat("C$", '#', GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(color));
}

JavaUtilArrayList *GeogebraCommonUtilStringUtil_wholeWordTokenizeWithNSString_(NSString *input) {
  GeogebraCommonUtilStringUtil_initialize();
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  JavaLangCharacter *actChar;
  NSString *actWord = @"";
  jboolean odd = NO;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(input)) length]); i++) {
    actChar = JavaLangCharacter_valueOfWithChar_([input charAtWithInt:i]);
    if (GeogebraCommonUtilStringUtil_isLetterOrDigitOrUnderscoreWithChar_([actChar charValue])) {
      if (odd) {
        actWord = JreStrcat("$@", actWord, actChar);
      }
      else {
        [ret addWithId:actWord];
        actWord = JreStrcat("@", actChar);
        odd = YES;
      }
    }
    else {
      if (odd) {
        [ret addWithId:actWord];
        actWord = JreStrcat("@", actChar);
        odd = NO;
      }
      else {
        actWord = JreStrcat("$@", actWord, actChar);
      }
    }
  }
  [ret addWithId:actWord];
  if (odd) {
    [ret addWithId:@""];
  }
  return ret;
}

NSString *GeogebraCommonUtilStringUtil_joinTokensWithJavaLangIterable_withNSString_(id<JavaLangIterable> tokens, NSString *delimiter) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *ret = @"";
  id<JavaUtilIterator> it = [((id<JavaLangIterable>) nil_chk(tokens)) iterator];
  if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    ret = JreStrcat("$$", ret, [it next]);
  }
  while ([it hasNext]) {
    if (delimiter != nil) {
      ret = JreStrcat("$$", ret, delimiter);
    }
    ret = JreStrcat("$$", ret, [it next]);
  }
  return ret;
}

NSString *GeogebraCommonUtilStringUtil_cannonicNumberWithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  jboolean zerosNeedRemoving = YES;
  jint index = [((NSString *) nil_chk(str)) indexOfString:@"."];
  if (index >= 0) {
    for (jint k = index + 1; k < ((jint) [str length]); k++) {
      if ([str charAtWithInt:k] != '0') {
        zerosNeedRemoving = NO;
        break;
      }
    }
  }
  else {
    zerosNeedRemoving = NO;
  }
  if (zerosNeedRemoving) {
    return index == 0 ? @"0" : [str substring:0 endIndex:index];
  }
  return index == 0 ? JreStrcat("C$", '0', str) : str;
}

NSString *GeogebraCommonUtilStringUtil_cannonicNumber2WithNSString_(NSString *str) {
  GeogebraCommonUtilStringUtil_initialize();
  NSString *num = str;
  NSString *exponent = @"";
  if ([((NSString *) nil_chk(str)) indexOf:'E'] > 0) {
    IOSObjectArray *split = [((NSString *) nil_chk(num)) split:@"E"];
    exponent = JreStrcat("C$", 'E', IOSObjectArray_Get(nil_chk(split), 1));
    num = IOSObjectArray_Get(split, 0);
  }
  if ([((NSString *) nil_chk(num)) hasPrefix:@"."]) {
    num = JreStrcat("C$", '0', num);
  }
  if ([num indexOfString:@"."] > 0) {
    while ([num hasSuffix:@"0"]) {
      num = [num substring:0 endIndex:((jint) [num length]) - 1];
    }
  }
  return JreStrcat("$$", num, exponent);
}

jboolean GeogebraCommonUtilStringUtil_isWhitespaceWithChar_(jchar c) {
  GeogebraCommonUtilStringUtil_initialize();
  return c == ' ' || c == 0x0009 || c == 0x000a || c == 0x000b || c == 0x000c || c == 0x000d || c == 0x001c || c == 0x001d || c == 0x001e || c == 0x001f || c == 0x1680 || c == 0x180e || c == 0x2000 || c == 0x2001 || c == 0x2002 || c == 0x2003 || c == 0x2004 || c == 0x2005 || c == 0x2006 || c == 0x2008 || c == 0x2009 || c == 0x200a || c == 0x2028 || c == 0x2029 || c == 0x205f || c == 0x3000;
}

jchar GeogebraCommonUtilStringUtil_processQuotesWithJavaLangStringBuilder_withNSString_withChar_(JavaLangStringBuilder *sb, NSString *content, jchar ret) {
  GeogebraCommonUtilStringUtil_initialize();
  jchar currentQuote = ret;
  if ([((NSString *) nil_chk(content)) indexOfString:@"\""] == -1) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:content];
    return currentQuote;
  }
  for (jint i = 0; i < ((jint) [content length]); i++) {
    jchar c = [content charAtWithInt:i];
    if (c == '"') {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:currentQuote];
      if (currentQuote == GeogebraCommonUtilUnicode_OPEN_DOUBLE_QUOTE) {
        currentQuote = GeogebraCommonUtilUnicode_CLOSE_DOUBLE_QUOTE;
      }
      else {
        currentQuote = GeogebraCommonUtilUnicode_OPEN_DOUBLE_QUOTE;
      }
    }
    else {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:c];
    }
  }
  return currentQuote;
}

void GeogebraCommonUtilStringUtil_init(GeogebraCommonUtilStringUtil *self) {
  NSObject_init(self);
}

GeogebraCommonUtilStringUtil *new_GeogebraCommonUtilStringUtil_init() {
  GeogebraCommonUtilStringUtil *self = [GeogebraCommonUtilStringUtil alloc];
  GeogebraCommonUtilStringUtil_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilStringUtil)
