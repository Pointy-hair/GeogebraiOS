//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadric.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlaneQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric () {
 @public
  GeogebraCommonKernelMatrixCoordMatrix *cm_;
  GeogebraCommonKernelMatrixCoordMatrix *tmpMatrix_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric, cm_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric, tmpMatrix_, GeogebraCommonKernelMatrixCoordMatrix *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)quadric {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  return self;
}

- (void)end {
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ plane_, quadric_ } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ conic_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)newConicWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_withBoolean_(cons, YES) autorelease];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)getConic {
  return conic_;
}

- (void)compute {
  if (![((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric_)) isDefined] || ![((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane_)) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(conic_)) setUndefined];
    return;
  }
  [self intersectPlaneQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:plane_ withGeogebraCommonKernelKernelNDGeoQuadricND:quadric_ withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:conic_];
}

- (void)intersectPlaneQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)inputPlane
                                   withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)inputQuad
                             withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)outputConic {
  GeogebraCommonKernelMatrixCoordMatrix *qm = [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(inputQuad)) getSymetricMatrix];
  GeogebraCommonKernelMatrixCoordMatrix *pm = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(inputPlane)) getParametricMatrix];
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(cm_)) setMulWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(tmpMatrix_)) setMulT1WithGeogebraCommonKernelMatrixCoordMatrix:pm withGeogebraCommonKernelMatrixCoordMatrix:qm] withGeogebraCommonKernelMatrixCoordMatrix:pm];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(outputConic)) setCoordSysWithGeogebraCommonKernelMatrixCoordSys:[inputPlane getCoordSys]];
  [outputConic setMatrixWithGeogebraCommonKernelMatrixCoordMatrix:cm_];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionCurveOfAB" withNSString:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(quadric_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]]];
  return [sb description];
}

- (void)dealloc {
  RELEASE_(plane_);
  RELEASE_(quadric_);
  RELEASE_(conic_);
  RELEASE_(cm_);
  RELEASE_(tmpMatrix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectPlaneQuadric", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoIntersectPlaneQuadric", NULL, 0x0, NULL, NULL },
    { "end", NULL, "V", 0x4, NULL, NULL },
    { "newConicWithGeogebraCommonKernelConstruction:", "newConic", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x4, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "intersectPlaneQuadricWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelKernelNDGeoQuadricND:withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:", "intersectPlaneQuadric", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
    { "quadric_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
    { "conic_", NULL, 0x4, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "cm_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "tmpMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric = { 2, "AlgoIntersectPlaneQuadric", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->conic_)) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, plane, quadric);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_setAndConsume_cm_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(3, 3));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_setAndConsume_tmpMatrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(3, 4));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_set_plane_(self, plane);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_set_quadric_(self, quadric);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_set_conic_(self, [self newConicWithGeogebraCommonKernelConstruction:cons]);
  [self end];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelKernelNDGeoQuadricND *quadric) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, plane, quadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlaneQuadric)
