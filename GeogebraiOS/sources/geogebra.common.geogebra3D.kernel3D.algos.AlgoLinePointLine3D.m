//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointLine3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePoint.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePointLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Line();
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getInputParallel])) getMainDirection];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoLinePointLine3D", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D = { 2, "AlgoLinePointLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, point, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoLineND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, point, line);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePointLine3D)
