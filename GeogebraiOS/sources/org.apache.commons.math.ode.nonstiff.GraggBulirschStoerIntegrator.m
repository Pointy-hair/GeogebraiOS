//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/System.h"
#include "java/util/Collection.h"
#include "org/apache/commons/math/ode/AbstractIntegrator.h"
#include "org/apache/commons/math/ode/DerivativeException.h"
#include "org/apache/commons/math/ode/FirstOrderDifferentialEquations.h"
#include "org/apache/commons/math/ode/IntegratorException.h"
#include "org/apache/commons/math/ode/events/EventHandler.h"
#include "org/apache/commons/math/ode/nonstiff/AdaptiveStepsizeIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/GraggBulirschStoerIntegrator.h"
#include "org/apache/commons/math/ode/nonstiff/GraggBulirschStoerStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/AbstractStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/DummyStepInterpolator.h"
#include "org/apache/commons/math/ode/sampling/StepHandler.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator () {
 @public
  jint maxOrder_;
  IOSIntArray *sequence_;
  IOSIntArray *costPerStep_;
  IOSDoubleArray *costPerTimeUnit_;
  IOSDoubleArray *optimalStep_;
  IOSObjectArray *coeff_;
  jboolean performTest_;
  jint maxChecks_;
  jint maxIter_;
  jdouble stabilityReduction_;
  jdouble stepControl1_;
  jdouble stepControl2_;
  jdouble stepControl3_;
  jdouble stepControl4_;
  jdouble orderControl1_;
  jdouble orderControl2_;
  jboolean useInterpolationError_;
  jint mudif_;
}

- (void)initializeArrays OBJC_METHOD_FAMILY_NONE;

- (void)rescaleWithDoubleArray:(IOSDoubleArray *)y1
               withDoubleArray:(IOSDoubleArray *)y2
               withDoubleArray:(IOSDoubleArray *)scale_;

- (jboolean)tryStepWithDouble:(jdouble)t0
              withDoubleArray:(IOSDoubleArray *)y0
                   withDouble:(jdouble)step
                      withInt:(jint)k
              withDoubleArray:(IOSDoubleArray *)scale_
             withDoubleArray2:(IOSObjectArray *)f
              withDoubleArray:(IOSDoubleArray *)yMiddle
              withDoubleArray:(IOSDoubleArray *)yEnd
              withDoubleArray:(IOSDoubleArray *)yTmp;

- (void)extrapolateWithInt:(jint)offset
                   withInt:(jint)k
          withDoubleArray2:(IOSObjectArray *)diag
           withDoubleArray:(IOSDoubleArray *)last;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, sequence_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, costPerStep_, IOSIntArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, costPerTimeUnit_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, optimalStep_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, coeff_, IOSObjectArray *)

static NSString *OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_METHOD_NAME_ = @"Gragg-Bulirsch-Stoer";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator, METHOD_NAME_, NSString *)

__attribute__((unused)) static void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self);

__attribute__((unused)) static void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_rescaleWithDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, IOSDoubleArray *y1, IOSDoubleArray *y2, IOSDoubleArray *scale_);

__attribute__((unused)) static jboolean OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_tryStepWithDouble_withDoubleArray_withDouble_withInt_withDoubleArray_withDoubleArray2_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jdouble t0, IOSDoubleArray *y0, jdouble step, jint k, IOSDoubleArray *scale_, IOSObjectArray *f, IOSDoubleArray *yMiddle, IOSDoubleArray *yEnd, IOSDoubleArray *yTmp);

__attribute__((unused)) static void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jint offset, jint k, IOSObjectArray *diag, IOSDoubleArray *last);

@implementation OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator

- (instancetype)initWithDouble:(jdouble)minStep
                    withDouble:(jdouble)maxStep
                    withDouble:(jdouble)scalAbsoluteTolerance
                    withDouble:(jdouble)scalRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDouble_withDouble_(self, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

- (instancetype)initWithDouble:(jdouble)minStep
                    withDouble:(jdouble)maxStep
               withDoubleArray:(IOSDoubleArray *)vecAbsoluteTolerance
               withDoubleArray:(IOSDoubleArray *)vecRelativeTolerance {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDoubleArray_withDoubleArray_(self, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

- (void)setStabilityCheckWithBoolean:(jboolean)performStabilityCheck
                             withInt:(jint)maxNumIter
                             withInt:(jint)maxNumChecks
                          withDouble:(jdouble)stepsizeReductionFactor {
  self->performTest_ = performStabilityCheck;
  self->maxIter_ = (maxNumIter <= 0) ? 2 : maxNumIter;
  self->maxChecks_ = (maxNumChecks <= 0) ? 1 : maxNumChecks;
  if ((stepsizeReductionFactor < 0.0001) || (stepsizeReductionFactor > 0.9999)) {
    self->stabilityReduction_ = 0.5;
  }
  else {
    self->stabilityReduction_ = stepsizeReductionFactor;
  }
}

- (void)setStepsizeControlWithDouble:(jdouble)control1
                          withDouble:(jdouble)control2
                          withDouble:(jdouble)control3
                          withDouble:(jdouble)control4 {
  if ((control1 < 0.0001) || (control1 > 0.9999)) {
    self->stepControl1_ = 0.65;
  }
  else {
    self->stepControl1_ = control1;
  }
  if ((control2 < 0.0001) || (control2 > 0.9999)) {
    self->stepControl2_ = 0.94;
  }
  else {
    self->stepControl2_ = control2;
  }
  if ((control3 < 0.0001) || (control3 > 0.9999)) {
    self->stepControl3_ = 0.02;
  }
  else {
    self->stepControl3_ = control3;
  }
  if ((control4 < 1.0001) || (control4 > 999.9)) {
    self->stepControl4_ = 4.0;
  }
  else {
    self->stepControl4_ = control4;
  }
}

- (void)setOrderControlWithInt:(jint)maximalOrder
                    withDouble:(jdouble)control1
                    withDouble:(jdouble)control2 {
  if ((maximalOrder <= 6) || (maximalOrder % 2 != 0)) {
    self->maxOrder_ = 18;
  }
  if ((control1 < 0.0001) || (control1 > 0.9999)) {
    self->orderControl1_ = 0.8;
  }
  else {
    self->orderControl1_ = control1;
  }
  if ((control2 < 0.0001) || (control2 > 0.9999)) {
    self->orderControl2_ = 0.9;
  }
  else {
    self->orderControl2_ = control2;
  }
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(self);
}

- (void)addStepHandlerWithOrgApacheCommonsMathOdeSamplingStepHandler:(id<OrgApacheCommonsMathOdeSamplingStepHandler>)handler {
  [super addStepHandlerWithOrgApacheCommonsMathOdeSamplingStepHandler:handler];
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(self);
}

- (void)addEventHandlerWithOrgApacheCommonsMathOdeEventsEventHandler:(id<OrgApacheCommonsMathOdeEventsEventHandler>)function
                                                          withDouble:(jdouble)maxCheckInterval
                                                          withDouble:(jdouble)convergence
                                                             withInt:(jint)maxIterationCount {
  [super addEventHandlerWithOrgApacheCommonsMathOdeEventsEventHandler:function withDouble:maxCheckInterval withDouble:convergence withInt:maxIterationCount];
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(self);
}

- (void)initializeArrays {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(self);
}

- (void)setInterpolationControlWithBoolean:(jboolean)useInterpolationErrorForControl
                                   withInt:(jint)mudifControlParameter {
  self->useInterpolationError_ = useInterpolationErrorForControl;
  if ((mudifControlParameter <= 0) || (mudifControlParameter >= 7)) {
    self->mudif_ = 4;
  }
  else {
    self->mudif_ = mudifControlParameter;
  }
}

- (void)rescaleWithDoubleArray:(IOSDoubleArray *)y1
               withDoubleArray:(IOSDoubleArray *)y2
               withDoubleArray:(IOSDoubleArray *)scale_ {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_rescaleWithDoubleArray_withDoubleArray_withDoubleArray_(self, y1, y2, scale_);
}

- (jboolean)tryStepWithDouble:(jdouble)t0
              withDoubleArray:(IOSDoubleArray *)y0
                   withDouble:(jdouble)step
                      withInt:(jint)k
              withDoubleArray:(IOSDoubleArray *)scale_
             withDoubleArray2:(IOSObjectArray *)f
              withDoubleArray:(IOSDoubleArray *)yMiddle
              withDoubleArray:(IOSDoubleArray *)yEnd
              withDoubleArray:(IOSDoubleArray *)yTmp {
  return OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_tryStepWithDouble_withDoubleArray_withDouble_withInt_withDoubleArray_withDoubleArray2_withDoubleArray_withDoubleArray_withDoubleArray_(self, t0, y0, step, k, scale_, f, yMiddle, yEnd, yTmp);
}

- (void)extrapolateWithInt:(jint)offset
                   withInt:(jint)k
          withDoubleArray2:(IOSObjectArray *)diag
           withDoubleArray:(IOSDoubleArray *)last {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(self, offset, k, diag, last);
}

- (jdouble)integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:(id<OrgApacheCommonsMathOdeFirstOrderDifferentialEquations>)equations
                                                                    withDouble:(jdouble)t0
                                                               withDoubleArray:(IOSDoubleArray *)y0
                                                                    withDouble:(jdouble)t
                                                               withDoubleArray:(IOSDoubleArray *)y {
  [self sanityChecksWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withDouble:t0 withDoubleArray:y0 withDouble:t withDoubleArray:y];
  [self setEquationsWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations];
  [self resetEvaluations];
  jboolean forward = t > t0;
  IOSDoubleArray *yDot0 = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(y0))->size_];
  IOSDoubleArray *y1 = [IOSDoubleArray arrayWithLength:y0->size_];
  IOSDoubleArray *yTmp = [IOSDoubleArray arrayWithLength:y0->size_];
  IOSDoubleArray *yTmpDot = [IOSDoubleArray arrayWithLength:y0->size_];
  IOSObjectArray *diagonal = [IOSObjectArray arrayWithLength:((IOSIntArray *) nil_chk(sequence_))->size_ - 1 type:IOSClass_doubleArray(1)];
  IOSObjectArray *y1Diag = [IOSObjectArray arrayWithLength:sequence_->size_ - 1 type:IOSClass_doubleArray(1)];
  for (jint k = 0; k < sequence_->size_ - 1; ++k) {
    IOSObjectArray_SetAndConsume(diagonal, k, [IOSDoubleArray newArrayWithLength:y0->size_]);
    IOSObjectArray_SetAndConsume(y1Diag, k, [IOSDoubleArray newArrayWithLength:y0->size_]);
  }
  IOSObjectArray *fk = [IOSObjectArray arrayWithLength:sequence_->size_ type:IOSClass_doubleArray(2)];
  for (jint k = 0; k < sequence_->size_; ++k) {
    IOSObjectArray_SetAndConsume(fk, k, [IOSObjectArray newArrayWithLength:IOSIntArray_Get(sequence_, k) + 1 type:IOSClass_doubleArray(1)]);
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(fk, k)), 0, yDot0);
    for (jint l = 0; l < IOSIntArray_Get(sequence_, k); ++l) {
      IOSObjectArray_SetAndConsume(nil_chk(IOSObjectArray_Get(fk, k)), l + 1, [IOSDoubleArray newArrayWithLength:y0->size_]);
    }
  }
  if (y != y0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y0, 0, y, 0, y0->size_);
  }
  IOSDoubleArray *yDot1 = [IOSDoubleArray arrayWithLength:y0->size_];
  IOSObjectArray *yMidDots = nil;
  jboolean denseOutput = [self requiresDenseOutput];
  if (denseOutput) {
    yMidDots = [IOSObjectArray arrayWithLength:1 + 2 * sequence_->size_ type:IOSClass_doubleArray(1)];
    for (jint j = 0; j < yMidDots->size_; ++j) {
      IOSObjectArray_SetAndConsume(yMidDots, j, [IOSDoubleArray newArrayWithLength:y0->size_]);
    }
  }
  else {
    yMidDots = [IOSObjectArray arrayWithLength:1 type:IOSClass_doubleArray(1)];
    IOSObjectArray_SetAndConsume(yMidDots, 0, [IOSDoubleArray newArrayWithLength:y0->size_]);
  }
  IOSDoubleArray *scale_ = [IOSDoubleArray arrayWithLength:mainSetDimension_];
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_rescaleWithDoubleArray_withDoubleArray_withDoubleArray_(self, y, y, scale_);
  jdouble tol = (vecRelativeTolerance_ == nil) ? scalRelativeTolerance_ : IOSDoubleArray_Get(vecRelativeTolerance_, 0);
  jdouble log10R = OrgApacheCommonsMathUtilFastMath_log10WithDouble_(OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(1.0e-10, tol));
  jint targetIter = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(1, OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(sequence_->size_ - 2, J2ObjCFpToInt(OrgApacheCommonsMathUtilFastMath_floorWithDouble_(0.5 - 0.6 * log10R))));
  OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *interpolator = nil;
  if (denseOutput) {
    interpolator = [new_OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerStepInterpolator_initWithDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray2_withBoolean_(y, yDot0, y1, yDot1, yMidDots, forward) autorelease];
  }
  else {
    interpolator = [new_OrgApacheCommonsMathOdeSamplingDummyStepInterpolator_initWithDoubleArray_withDoubleArray_withBoolean_(y, yDot1, forward) autorelease];
  }
  [((OrgApacheCommonsMathOdeSamplingAbstractStepInterpolator *) nil_chk(interpolator)) storeTimeWithDouble:t0];
  stepStart_ = t0;
  jdouble hNew = 0;
  jdouble maxError = JavaLangDouble_MAX_VALUE;
  jboolean previousRejected = NO;
  jboolean firstTime = YES;
  jboolean newStep = YES;
  jboolean firstStepAlreadyComputed = NO;
  for (id<OrgApacheCommonsMathOdeSamplingStepHandler> __strong handler in nil_chk(stepHandlers_)) {
    [((id<OrgApacheCommonsMathOdeSamplingStepHandler>) nil_chk(handler)) reset];
  }
  [self setStateInitializedWithBoolean:NO];
  *IOSDoubleArray_GetRef(nil_chk(costPerTimeUnit_), 0) = 0;
  isLastStep_ = NO;
  do {
    jdouble error;
    jboolean reject = NO;
    if (newStep) {
      [interpolator shift];
      if (!firstStepAlreadyComputed) {
        [self computeDerivativesWithDouble:stepStart_ withDoubleArray:y withDoubleArray:yDot0];
      }
      if (firstTime) {
        hNew = [self initializeStepWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:equations withBoolean:forward withInt:2 * targetIter + 1 withDoubleArray:scale_ withDouble:stepStart_ withDoubleArray:y withDoubleArray:yDot0 withDoubleArray:yTmp withDoubleArray:yTmpDot];
      }
      newStep = NO;
    }
    stepSize_ = hNew;
    if ((forward && (stepStart_ + stepSize_ > t)) || ((!forward) && (stepStart_ + stepSize_ < t))) {
      stepSize_ = t - stepStart_;
    }
    jdouble nextT = stepStart_ + stepSize_;
    isLastStep_ = forward ? (nextT >= t) : (nextT <= t);
    jint k = -1;
    for (jboolean loop = YES; loop; ) {
      ++k;
      if (!OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_tryStepWithDouble_withDoubleArray_withDouble_withInt_withDoubleArray_withDoubleArray2_withDoubleArray_withDoubleArray_withDoubleArray_(self, stepStart_, y, stepSize_, k, scale_, IOSObjectArray_Get(fk, k), (k == 0) ? IOSObjectArray_Get(nil_chk(yMidDots), 0) : IOSObjectArray_Get(diagonal, k - 1), (k == 0) ? y1 : IOSObjectArray_Get(y1Diag, k - 1), yTmp)) {
        hNew = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self filterStepWithDouble:stepSize_ * stabilityReduction_ withBoolean:forward withBoolean:NO]);
        reject = YES;
        loop = NO;
      }
      else {
        if (k > 0) {
          OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(self, 0, k, y1Diag, y1);
          OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_rescaleWithDoubleArray_withDoubleArray_withDoubleArray_(self, y, y1, scale_);
          error = 0;
          for (jint j = 0; j < mainSetDimension_; ++j) {
            jdouble e = OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(y1, j) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y1Diag, 0)), j)) / IOSDoubleArray_Get(scale_, j);
            error += e * e;
          }
          error = OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(error / mainSetDimension_);
          if ((error > 1.0e15) || ((k > 1) && (error > maxError))) {
            hNew = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self filterStepWithDouble:stepSize_ * stabilityReduction_ withBoolean:forward withBoolean:NO]);
            reject = YES;
            loop = NO;
          }
          else {
            maxError = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(4 * error, 1.0);
            jdouble exp = 1.0 / (2 * k + 1);
            jdouble fac = stepControl2_ / OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(error / stepControl1_, exp);
            jdouble pow = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(stepControl3_, exp);
            fac = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(pow / stepControl4_, OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(1 / pow, fac));
            *IOSDoubleArray_GetRef(nil_chk(optimalStep_), k) = OrgApacheCommonsMathUtilFastMath_absWithDouble_([self filterStepWithDouble:stepSize_ * fac withBoolean:forward withBoolean:YES]);
            *IOSDoubleArray_GetRef(costPerTimeUnit_, k) = IOSIntArray_Get(nil_chk(costPerStep_), k) / IOSDoubleArray_Get(optimalStep_, k);
            switch (k - targetIter) {
              case -1:
              if ((targetIter > 1) && !previousRejected) {
                if (error <= 1.0) {
                  loop = NO;
                }
                else {
                  jdouble ratio = ((jdouble) IOSIntArray_Get(sequence_, targetIter) * IOSIntArray_Get(sequence_, targetIter + 1)) / (IOSIntArray_Get(sequence_, 0) * IOSIntArray_Get(sequence_, 0));
                  if (error > ratio * ratio) {
                    reject = YES;
                    loop = NO;
                    targetIter = k;
                    if ((targetIter > 1) && (IOSDoubleArray_Get(costPerTimeUnit_, targetIter - 1) < orderControl1_ * IOSDoubleArray_Get(costPerTimeUnit_, targetIter))) {
                      --targetIter;
                    }
                    hNew = IOSDoubleArray_Get(optimalStep_, targetIter);
                  }
                }
              }
              break;
              case 0:
              if (error <= 1.0) {
                loop = NO;
              }
              else {
                jdouble ratio = ((jdouble) IOSIntArray_Get(sequence_, k + 1)) / IOSIntArray_Get(sequence_, 0);
                if (error > ratio * ratio) {
                  reject = YES;
                  loop = NO;
                  if ((targetIter > 1) && (IOSDoubleArray_Get(costPerTimeUnit_, targetIter - 1) < orderControl1_ * IOSDoubleArray_Get(costPerTimeUnit_, targetIter))) {
                    --targetIter;
                  }
                  hNew = IOSDoubleArray_Get(optimalStep_, targetIter);
                }
              }
              break;
              case 1:
              if (error > 1.0) {
                reject = YES;
                if ((targetIter > 1) && (IOSDoubleArray_Get(costPerTimeUnit_, targetIter - 1) < orderControl1_ * IOSDoubleArray_Get(costPerTimeUnit_, targetIter))) {
                  --targetIter;
                }
                hNew = IOSDoubleArray_Get(optimalStep_, targetIter);
              }
              loop = NO;
              break;
              default:
              if ((firstTime || isLastStep_) && (error <= 1.0)) {
                loop = NO;
              }
              break;
            }
          }
        }
      }
    }
    if (!reject) {
      [self computeDerivativesWithDouble:stepStart_ + stepSize_ withDoubleArray:y1 withDoubleArray:yDot1];
    }
    jdouble hInt = [self getMaxStep];
    if (denseOutput && !reject) {
      for (jint j = 1; j <= k; ++j) {
        OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(self, 0, j, diagonal, IOSObjectArray_Get(nil_chk(yMidDots), 0));
      }
      jint mu = 2 * k - mudif_ + 3;
      for (jint l = 0; l < mu; ++l) {
        jint l2 = l / 2;
        jdouble factor = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(0.5 * IOSIntArray_Get(sequence_, l2), l);
        jint middleIndex = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(fk, l2)))->size_ / 2;
        for (jint i = 0; i < y0->size_; ++i) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(yMidDots), l + 1)), i) = factor * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fk, l2)), middleIndex + l)), i);
        }
        for (jint j = 1; j <= k - l2; ++j) {
          factor = OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(0.5 * IOSIntArray_Get(sequence_, j + l2), l);
          middleIndex = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(fk, l2 + j)))->size_ / 2;
          for (jint i = 0; i < y0->size_; ++i) {
            *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(diagonal, j - 1)), i) = factor * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fk, l2 + j)), middleIndex + l)), i);
          }
          OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(self, l2, j, diagonal, IOSObjectArray_Get(nil_chk(yMidDots), l + 1));
        }
        for (jint i = 0; i < y0->size_; ++i) {
          *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(yMidDots), l + 1)), i) *= stepSize_;
        }
        for (jint j = (l + 1) / 2; j <= k; ++j) {
          for (jint m = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(fk, j)))->size_ - 1; m >= 2 * (l + 1); --m) {
            for (jint i = 0; i < y0->size_; ++i) {
              *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fk, j)), m)), i) -= IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fk, j)), m - 2)), i);
            }
          }
        }
      }
      if (mu >= 0) {
        OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerStepInterpolator *gbsInterpolator = (OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerStepInterpolator *) check_class_cast(interpolator, [OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerStepInterpolator class]);
        [gbsInterpolator computeCoefficientsWithInt:mu withDouble:stepSize_];
        if (useInterpolationError_) {
          jdouble interpError = [gbsInterpolator estimateErrorWithDoubleArray:scale_];
          hInt = OrgApacheCommonsMathUtilFastMath_absWithDouble_(stepSize_ / OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_powWithDouble_withDouble_(interpError, 1.0 / (mu + 4)), 0.01));
          if (interpError > 10.0) {
            hNew = hInt;
            reject = YES;
          }
        }
      }
    }
    if (!reject) {
      [interpolator storeTimeWithDouble:stepStart_ + stepSize_];
      stepStart_ = [self acceptStepWithOrgApacheCommonsMathOdeSamplingAbstractStepInterpolator:interpolator withDoubleArray:y1 withDoubleArray:yDot1 withDouble:t];
      [interpolator storeTimeWithDouble:stepStart_];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(y1, 0, y, 0, y0->size_);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yDot1, 0, yDot0, 0, y0->size_);
      firstStepAlreadyComputed = YES;
      jint optimalIter;
      if (k == 1) {
        optimalIter = 2;
        if (previousRejected) {
          optimalIter = 1;
        }
      }
      else if (k <= targetIter) {
        optimalIter = k;
        if (IOSDoubleArray_Get(costPerTimeUnit_, k - 1) < orderControl1_ * IOSDoubleArray_Get(costPerTimeUnit_, k)) {
          optimalIter = k - 1;
        }
        else if (IOSDoubleArray_Get(costPerTimeUnit_, k) < orderControl2_ * IOSDoubleArray_Get(costPerTimeUnit_, k - 1)) {
          optimalIter = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(k + 1, sequence_->size_ - 2);
        }
      }
      else {
        optimalIter = k - 1;
        if ((k > 2) && (IOSDoubleArray_Get(costPerTimeUnit_, k - 2) < orderControl1_ * IOSDoubleArray_Get(costPerTimeUnit_, k - 1))) {
          optimalIter = k - 2;
        }
        if (IOSDoubleArray_Get(costPerTimeUnit_, k) < orderControl2_ * IOSDoubleArray_Get(costPerTimeUnit_, optimalIter)) {
          optimalIter = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(k, sequence_->size_ - 2);
        }
      }
      if (previousRejected) {
        targetIter = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(optimalIter, k);
        hNew = OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(stepSize_), IOSDoubleArray_Get(nil_chk(optimalStep_), targetIter));
      }
      else {
        if (optimalIter <= k) {
          hNew = IOSDoubleArray_Get(nil_chk(optimalStep_), optimalIter);
        }
        else {
          if ((k < targetIter) && (IOSDoubleArray_Get(costPerTimeUnit_, k) < orderControl2_ * IOSDoubleArray_Get(costPerTimeUnit_, k - 1))) {
            hNew = [self filterStepWithDouble:IOSDoubleArray_Get(nil_chk(optimalStep_), k) * IOSIntArray_Get(nil_chk(costPerStep_), optimalIter + 1) / IOSIntArray_Get(costPerStep_, k) withBoolean:forward withBoolean:NO];
          }
          else {
            hNew = [self filterStepWithDouble:IOSDoubleArray_Get(nil_chk(optimalStep_), k) * IOSIntArray_Get(nil_chk(costPerStep_), optimalIter) / IOSIntArray_Get(costPerStep_, k) withBoolean:forward withBoolean:NO];
          }
        }
        targetIter = optimalIter;
      }
      newStep = YES;
    }
    hNew = OrgApacheCommonsMathUtilFastMath_minWithDouble_withDouble_(hNew, hInt);
    if (!forward) {
      hNew = -hNew;
    }
    firstTime = NO;
    if (reject) {
      isLastStep_ = NO;
      previousRejected = YES;
    }
    else {
      previousRejected = NO;
    }
  }
  while (!isLastStep_);
  jdouble stopTime = stepStart_;
  [self resetInternalState];
  return stopTime;
}

- (void)dealloc {
  RELEASE_(sequence_);
  RELEASE_(costPerStep_);
  RELEASE_(costPerTimeUnit_);
  RELEASE_(optimalStep_);
  RELEASE_(coeff_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:withDouble:withDouble:withDouble:", "GraggBulirschStoerIntegrator", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:withDoubleArray:withDoubleArray:", "GraggBulirschStoerIntegrator", NULL, 0x1, NULL, NULL },
    { "setStabilityCheckWithBoolean:withInt:withInt:withDouble:", "setStabilityCheck", "V", 0x1, NULL, NULL },
    { "setStepsizeControlWithDouble:withDouble:withDouble:withDouble:", "setStepsizeControl", "V", 0x1, NULL, NULL },
    { "setOrderControlWithInt:withDouble:withDouble:", "setOrderControl", "V", 0x1, NULL, NULL },
    { "addStepHandlerWithOrgApacheCommonsMathOdeSamplingStepHandler:", "addStepHandler", "V", 0x1, NULL, NULL },
    { "addEventHandlerWithOrgApacheCommonsMathOdeEventsEventHandler:withDouble:withDouble:withInt:", "addEventHandler", "V", 0x1, NULL, NULL },
    { "initializeArrays", NULL, "V", 0x2, NULL, NULL },
    { "setInterpolationControlWithBoolean:withInt:", "setInterpolationControl", "V", 0x1, NULL, NULL },
    { "rescaleWithDoubleArray:withDoubleArray:withDoubleArray:", "rescale", "V", 0x2, NULL, NULL },
    { "tryStepWithDouble:withDoubleArray:withDouble:withInt:withDoubleArray:withDoubleArray2:withDoubleArray:withDoubleArray:withDoubleArray:", "tryStep", "Z", 0x2, "Lorg.apache.commons.math.ode.DerivativeException;", NULL },
    { "extrapolateWithInt:withInt:withDoubleArray2:withDoubleArray:", "extrapolate", "V", 0x2, NULL, NULL },
    { "integrateWithOrgApacheCommonsMathOdeFirstOrderDifferentialEquations:withDouble:withDoubleArray:withDouble:withDoubleArray:", "integrate", "D", 0x1, "Lorg.apache.commons.math.ode.DerivativeException;Lorg.apache.commons.math.ode.IntegratorException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "METHOD_NAME_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_METHOD_NAME_, NULL,  },
    { "maxOrder_", NULL, 0x2, "I", NULL, NULL,  },
    { "sequence_", NULL, 0x2, "[I", NULL, NULL,  },
    { "costPerStep_", NULL, 0x2, "[I", NULL, NULL,  },
    { "costPerTimeUnit_", NULL, 0x2, "[D", NULL, NULL,  },
    { "optimalStep_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coeff_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "performTest_", NULL, 0x2, "Z", NULL, NULL,  },
    { "maxChecks_", NULL, 0x2, "I", NULL, NULL,  },
    { "maxIter_", NULL, 0x2, "I", NULL, NULL,  },
    { "stabilityReduction_", NULL, 0x2, "D", NULL, NULL,  },
    { "stepControl1_", NULL, 0x2, "D", NULL, NULL,  },
    { "stepControl2_", NULL, 0x2, "D", NULL, NULL,  },
    { "stepControl3_", NULL, 0x2, "D", NULL, NULL,  },
    { "stepControl4_", NULL, 0x2, "D", NULL, NULL,  },
    { "orderControl1_", NULL, 0x2, "D", NULL, NULL,  },
    { "orderControl2_", NULL, 0x2, "D", NULL, NULL,  },
    { "useInterpolationError_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mudif_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator = { 2, "GraggBulirschStoerIntegrator", "org.apache.commons.math.ode.nonstiff", NULL, 0x1, 13, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator;
}

@end

void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDouble_withDouble_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDouble_withDouble_(self, OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_METHOD_NAME_, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  [self setStabilityCheckWithBoolean:YES withInt:-1 withInt:-1 withDouble:-1];
  [self setStepsizeControlWithDouble:-1 withDouble:-1 withDouble:-1 withDouble:-1];
  [self setOrderControlWithInt:-1 withDouble:-1 withDouble:-1];
  [self setInterpolationControlWithBoolean:YES withInt:-1];
}

OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *new_OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDouble_withDouble_(jdouble minStep, jdouble maxStep, jdouble scalAbsoluteTolerance, jdouble scalRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self = [OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDouble_withDouble_(self, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
  return self;
}

void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffAdaptiveStepsizeIntegrator_initWithNSString_withDouble_withDouble_withDoubleArray_withDoubleArray_(self, OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_METHOD_NAME_, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  [self setStabilityCheckWithBoolean:YES withInt:-1 withInt:-1 withDouble:-1];
  [self setStepsizeControlWithDouble:-1 withDouble:-1 withDouble:-1 withDouble:-1];
  [self setOrderControlWithInt:-1 withDouble:-1 withDouble:-1];
  [self setInterpolationControlWithBoolean:YES withInt:-1];
}

OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *new_OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDoubleArray_withDoubleArray_(jdouble minStep, jdouble maxStep, IOSDoubleArray *vecAbsoluteTolerance, IOSDoubleArray *vecRelativeTolerance) {
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self = [OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator alloc];
  OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initWithDouble_withDouble_withDoubleArray_withDoubleArray_(self, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
  return self;
}

void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_initializeArrays(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self) {
  jint size = self->maxOrder_ / 2;
  if ((self->sequence_ == nil) || (self->sequence_->size_ != size)) {
    OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_setAndConsume_sequence_(self, [IOSIntArray newArrayWithLength:size]);
    OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_setAndConsume_costPerStep_(self, [IOSIntArray newArrayWithLength:size]);
    OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_setAndConsume_coeff_(self, [IOSObjectArray newArrayWithLength:size type:IOSClass_doubleArray(1)]);
    OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_setAndConsume_costPerTimeUnit_(self, [IOSDoubleArray newArrayWithLength:size]);
    OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_setAndConsume_optimalStep_(self, [IOSDoubleArray newArrayWithLength:size]);
  }
  if ([self requiresDenseOutput]) {
    for (jint k = 0; k < size; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->sequence_), k) = 4 * k + 2;
    }
  }
  else {
    for (jint k = 0; k < size; ++k) {
      *IOSIntArray_GetRef(nil_chk(self->sequence_), k) = 2 * (k + 1);
    }
  }
  *IOSIntArray_GetRef(nil_chk(self->costPerStep_), 0) = IOSIntArray_Get(nil_chk(self->sequence_), 0) + 1;
  for (jint k = 1; k < size; ++k) {
    *IOSIntArray_GetRef(self->costPerStep_, k) = IOSIntArray_Get(self->costPerStep_, k - 1) + IOSIntArray_Get(self->sequence_, k);
  }
  for (jint k = 0; k < size; ++k) {
    IOSObjectArray_Set(nil_chk(self->coeff_), k, (k > 0) ? [IOSDoubleArray arrayWithLength:k] : nil);
    for (jint l = 0; l < k; ++l) {
      jdouble ratio = ((jdouble) IOSIntArray_Get(self->sequence_, k)) / IOSIntArray_Get(self->sequence_, k - l - 1);
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->coeff_, k)), l) = 1.0 / (ratio * ratio - 1.0);
    }
  }
}

void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_rescaleWithDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, IOSDoubleArray *y1, IOSDoubleArray *y2, IOSDoubleArray *scale_) {
  if (self->vecAbsoluteTolerance_ == nil) {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(scale_))->size_; ++i) {
      jdouble yi = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y1), i)), OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y2), i)));
      *IOSDoubleArray_GetRef(scale_, i) = self->scalAbsoluteTolerance_ + self->scalRelativeTolerance_ * yi;
    }
  }
  else {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(scale_))->size_; ++i) {
      jdouble yi = OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y1), i)), OrgApacheCommonsMathUtilFastMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(y2), i)));
      *IOSDoubleArray_GetRef(scale_, i) = IOSDoubleArray_Get(self->vecAbsoluteTolerance_, i) + IOSDoubleArray_Get(nil_chk(self->vecRelativeTolerance_), i) * yi;
    }
  }
}

jboolean OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_tryStepWithDouble_withDoubleArray_withDouble_withInt_withDoubleArray_withDoubleArray2_withDoubleArray_withDoubleArray_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jdouble t0, IOSDoubleArray *y0, jdouble step, jint k, IOSDoubleArray *scale_, IOSObjectArray *f, IOSDoubleArray *yMiddle, IOSDoubleArray *yEnd, IOSDoubleArray *yTmp) {
  jint n = IOSIntArray_Get(nil_chk(self->sequence_), k);
  jdouble subStep = step / n;
  jdouble subStep2 = 2 * subStep;
  jdouble t = t0 + subStep;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(y0))->size_; ++i) {
    *IOSDoubleArray_GetRef(nil_chk(yTmp), i) = IOSDoubleArray_Get(y0, i);
    *IOSDoubleArray_GetRef(nil_chk(yEnd), i) = IOSDoubleArray_Get(y0, i) + subStep * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(f), 0)), i);
  }
  [self computeDerivativesWithDouble:t withDoubleArray:yEnd withDoubleArray:IOSObjectArray_Get(nil_chk(f), 1)];
  for (jint j = 1; j < n; ++j) {
    if (2 * j == n) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(yEnd, 0, yMiddle, 0, y0->size_);
    }
    t += subStep;
    for (jint i = 0; i < y0->size_; ++i) {
      jdouble middle = IOSDoubleArray_Get(nil_chk(yEnd), i);
      *IOSDoubleArray_GetRef(yEnd, i) = IOSDoubleArray_Get(nil_chk(yTmp), i) + subStep2 * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(f, j)), i);
      *IOSDoubleArray_GetRef(yTmp, i) = middle;
    }
    [self computeDerivativesWithDouble:t withDoubleArray:yEnd withDoubleArray:IOSObjectArray_Get(f, j + 1)];
    if (self->performTest_ && (j <= self->maxChecks_) && (k < self->maxIter_)) {
      jdouble initialNorm = 0.0;
      for (jint l = 0; l < ((IOSDoubleArray *) nil_chk(scale_))->size_; ++l) {
        jdouble ratio = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(f, 0)), l) / IOSDoubleArray_Get(scale_, l);
        initialNorm += ratio * ratio;
      }
      jdouble deltaNorm = 0.0;
      for (jint l = 0; l < scale_->size_; ++l) {
        jdouble ratio = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(f, j + 1)), l) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(f, 0)), l)) / IOSDoubleArray_Get(scale_, l);
        deltaNorm += ratio * ratio;
      }
      if (deltaNorm > 4 * OrgApacheCommonsMathUtilFastMath_maxWithDouble_withDouble_(1.0e-15, initialNorm)) {
        return NO;
      }
    }
  }
  for (jint i = 0; i < y0->size_; ++i) {
    *IOSDoubleArray_GetRef(nil_chk(yEnd), i) = 0.5 * (IOSDoubleArray_Get(nil_chk(yTmp), i) + IOSDoubleArray_Get(yEnd, i) + subStep * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(f, n)), i));
  }
  return YES;
}

void OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator_extrapolateWithInt_withInt_withDoubleArray2_withDoubleArray_(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator *self, jint offset, jint k, IOSObjectArray *diag, IOSDoubleArray *last) {
  for (jint j = 1; j < k; ++j) {
    for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(last))->size_; ++i) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(diag), k - j - 1)), i) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(diag, k - j)), i) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coeff_), k + offset)), j - 1) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(diag, k - j)), i) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(diag, k - j - 1)), i));
    }
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(last))->size_; ++i) {
    *IOSDoubleArray_GetRef(last, i) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(diag), 0)), i) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->coeff_), k + offset)), k - 1) * (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(diag, 0)), i) - IOSDoubleArray_Get(last, i));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathOdeNonstiffGraggBulirschStoerIntegrator)
