//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Comparable.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

@class GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings;

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DEBUG NO
#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_EPSILON_Z 1.0E-4f
#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_ALPHA_MIN_HIGHLIGHTING 0.25
#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_LIGHT_COLOR 1.5

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D () {
 @public
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *m_view3D_;
  jboolean waitForUpdate__;
  jboolean labelWaitForUpdate_;
  jint geomIndex_;
  jint surfaceIndex_;
  GeogebraCommonKernelGeosGeoElement *geo_;
  jdouble zPickFar_;
  jdouble zPickNear_;
  jboolean waitForUpdateVisualStyle_;
  jfloat alpha_;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *lastPickingType_;
  JavaUtilTreeMap *trace_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *traceSettingsCurrent_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *lastTraceIndex_;
  JavaUtilArrayList *lastTraceIndices_;
}

- (jboolean)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                               withBoolean:(jboolean)forPicking;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, m_view3D_, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, lastPickingType_, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, trace_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, traceSettingsCurrent_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, lastTraceIndex_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, lastTraceIndices_, JavaUtilArrayList *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, DEBUG, jboolean)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, EPSILON_Z, jfloat)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, ALPHA_MIN_HIGHLIGHTING, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D, LIGHT_COLOR, jdouble)

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getGeometryIndex(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getSurfaceIndex(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self);

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getLayer(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, jboolean forPicking);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getPickingType(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_recordTrace(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setZPickWithDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, jdouble zNear, jdouble zFar);

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings : NSObject < JavaLangComparable > {
 @public
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *this$0_;
  GeogebraCommonKernelMatrixCoords *c_;
  jdouble a_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)outer$
                                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)c
                                                               withDouble:(jdouble)a;

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *)clone;

- (GeogebraCommonKernelMatrixCoords *)getColor;

- (jdouble)getAlpha;

- (void)setAlphaWithDouble:(jdouble)a;

- (jint)getIntWithDouble:(jdouble)value;

- (jint)compareToWithId:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *)settings;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings, this$0_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings, c_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, GeogebraCommonKernelMatrixCoords *c, jdouble a);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, GeogebraCommonKernelMatrixCoords *c, jdouble a) NS_RETURNS_RETAINED;

__attribute__((unused)) static jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *self, jdouble value);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *)newDrawLabel3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(view3D, self) autorelease];
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a_geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, a_geo);
  return self;
}

- (void)update {
  [self clearTraceForViewChanged];
  jboolean isVisible = [self isVisible];
  if ((waitForUpdateVisualStyle_ || waitForUpdate__) && isVisible) {
    [self updateColors];
    [self setLabelWaitForUpdate];
    waitForUpdateVisualStyle_ = NO;
  }
  if (isVisible) {
    [self updateForView];
  }
  if (waitForUpdate__ && isVisible) {
    if ([self updateForItSelf]) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_recordTrace(self);
      waitForUpdate__ = NO;
    }
    else {
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) waitForNewRepaint];
    }
    [self setLabelWaitForUpdate];
  }
  if ([self isLabelVisible]) {
    if (labelWaitForUpdate_) {
      [self updateLabel];
      [self updateLabelPosition];
      labelWaitForUpdate_ = NO;
    }
    else if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChanged]) {
      [self updateLabelPosition];
    }
  }
  waitForReset_ = NO;
}

- (jboolean)hasTrace {
  if ([self createdByDrawList]) return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([self getDrawListCreator], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])))) hasTrace];
  if (geo_ == nil) {
    return NO;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isTraceable]) {
    return NO;
  }
  return [((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo_, @protocol(GeogebraCommonKernelGeosTraceable))) getTrace];
}

- (void)updateLabel {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updateWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLabelDescription] withGeogebraCommonAwtGFont:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFontPoint] withGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor] withGeogebraCommonKernelMatrixCoords:[self getLabelPosition] withFloat:[self getLabelOffsetX] withFloat:-[self getLabelOffsetY]];
}

- (void)updateLabelPosition {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer]];
}

- (jfloat)getLabelOffsetX {
  return ((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement]))->labelOffsetX_;
}

- (jfloat)getLabelOffsetY {
  return ((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement]))->labelOffsetY_;
}

- (void)updateForView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)updateForItSelf {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)updateForHitting {
  [self updateForItSelf];
}

- (void)setWaitForUpdate {
  waitForUpdate__ = YES;
}

- (jboolean)waitForUpdate {
  return waitForUpdate__;
}

- (void)setLabelWaitForUpdate {
  labelWaitForUpdate_ = YES;
}

- (void)setWaitForReset {
  geomIndex_ = -1;
  surfaceIndex_ = -1;
  waitForReset_ = YES;
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) setWaitForReset];
  [self setLabelWaitForUpdate];
  [self setWaitForUpdate];
}

- (void)setWaitForUpdateVisualStyle {
  waitForUpdateVisualStyle_ = YES;
}

- (void)removeGeometryIndexWithInt:(jint)index {
  if (!waitForReset_) {
    if (![self hasTrace]) {
      [self doRemoveGeometryIndexWithInt:index];
    }
  }
}

- (void)doRemoveGeometryIndexWithInt:(jint)index {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager])) removeWithInt:index];
}

- (void)setGeometryIndexWithInt:(jint)index {
  [self removeGeometryIndexWithInt:geomIndex_];
  geomIndex_ = index;
}

- (jint)getGeometryIndex {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getGeometryIndex(self);
}

- (jint)getReusableGeometryIndex {
  if ([self hasTrace]) {
    return -1;
  }
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getGeometryIndex(self);
}

- (void)setSurfaceIndexWithInt:(jint)index {
  [self removeGeometryIndexWithInt:surfaceIndex_];
  surfaceIndex_ = index;
}

- (jint)getSurfaceIndex {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getSurfaceIndex(self);
}

- (jint)getReusableSurfaceIndex {
  if ([self hasTrace]) {
    return -1;
  }
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getSurfaceIndex(self);
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLabelPosition])) copyVector];
}

- (GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)getView3D {
  return m_view3D_;
}

- (void)setView3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_m_view3D_(self, a_view3D);
}

- (jboolean)isVisible {
  jboolean visible;
  if ([self createdByDrawList]) {
    visible = ([self isCreatedByDrawListVisible] && [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([self getDrawListCreator], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])))) isVisible]);
  }
  else {
    visible = YES;
  }
  return visible && ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) hasDrawable3D] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isEuclidianVisible] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isDefined]);
}

- (jint)getLayer {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getLayer(self);
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineTypeHidden] != GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_HIDDEN_NONE) {
    [self setHighlightingColor];
    [self setLineTextureHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    [self drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
}

- (void)drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
}

- (void)setLineTextureHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineTypeHidden] == GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_HIDDEN_AS_NOT_HIDDEN) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeHiddenWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
  }
}

- (void)drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                                                                               withBoolean:(jboolean)intersection
                                                     withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  if (![self isVisible]) return nil;
  if (intersection) {
    [self drawGeometryForPickingIntersectionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isPickable]) return nil;
    [self drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:type];
  }
  return [self getDrawablePicked];
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)getDrawablePicked {
  return [self getDrawablePickedWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:self];
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)getDrawablePickedWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawableSource {
  if ([self createdByDrawList]) {
    return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([self getDrawListCreator], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])))) getDrawablePickedWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:drawableSource];
  }
  return self;
}

- (void)drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
              withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryForPickingIntersectionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

- (void)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withBoolean_(self, renderer, NO);
}

- (jboolean)drawLabelForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withBoolean_(self, renderer, YES);
}

- (jboolean)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                               withBoolean:(jboolean)forPicking {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withBoolean_(self, renderer, forPicking);
}

- (jboolean)isLabelVisible {
  return [self getGeoElement] != nil && [self isVisible] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isLabelVisible];
}

- (jint)getPickOrder {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isTransparent {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)comparePickingToWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d
                                                                  withBoolean:(jboolean)checkPickOrder {
  if ((![self isTransparent]) && ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) isTransparent])) {
    if (checkPickOrder && [self getPickOrder] < [d getPickOrder]) {
      return -1;
    }
  }
  else if (([self isTransparent]) && (![((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) isTransparent])) {
    if (checkPickOrder && [self getPickOrder] > [d getPickOrder]) {
      return 1;
    }
  }
  if ([self getPickOrder] == [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) getPickOrder]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isSelected] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:[self getView3D]] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([d getGeoElement])) isSelected]) {
      return -1;
    }
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isSelected] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([d getGeoElement])) isSelected] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([d getGeoElement])) isMoveableWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:[self getView3D]]) {
      return 1;
    }
  }
  if (self->zPickFar_ <= d->zPickNear_ && d->zPickFar_ <= self->zPickNear_) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [self getGeoElement];
    GeogebraCommonKernelGeosGeoElement *geo2 = [d getGeoElement];
    if (geo1 == geo2) {
      return 0;
    }
    if (checkPickOrder) {
      if ([self getPickOrder] < [d getPickOrder]) return -1;
      if ([self getPickOrder] > [d getPickOrder]) return 1;
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoPoint]) {
      if (([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) hasPath]) && (![((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) hasPath])) return -1;
      if ((![((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) hasPath]) && ([((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) hasPath])) return 1;
      if ([geo1 isMoveable] && [geo1 isChildOfWithGeogebraCommonKernelGeosGeoElement:geo2]) return -1;
      if ([geo2 isMoveable] && [geo2 isChildOfWithGeogebraCommonKernelGeosGeoElement:geo1]) return 1;
    }
    else {
      if (![geo1 isGeoPlane] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoPlane]) {
        return -1;
      }
      if ([geo1 isGeoPlane] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoPlane]) {
        return 1;
      }
    }
  }
  if (self->zPickNear_ > d->zPickNear_) {
    return -1;
  }
  if (self->zPickNear_ < d->zPickNear_) {
    return 1;
  }
  return 0;
}

- (jboolean)doHighlighting {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) doHighlighting]) return YES;
  if ([self createdByDrawList]) return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([self getDrawListCreator], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])))) doHighlighting];
  return NO;
}

- (void)setHighlightingColor {
  if ([self doHighlighting]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *manager = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager];
    [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(manager)) getHigthlightingWithGeogebraCommonKernelMatrixCoords:color_ withGeogebraCommonKernelMatrixCoords:colorHighlighted_]];
  }
  else [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:color_];
}

- (void)setDrawingColorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)color {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) setColorWithGeogebraCommonKernelMatrixCoords:color];
}

- (void)setSurfaceHighlightingColor {
  if ([self doHighlighting]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *manager = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer])) getGeometryManager];
    [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk(manager)) getHigthlightingWithGeogebraCommonKernelMatrixCoords:surfaceColor_ withGeogebraCommonKernelMatrixCoords:surfaceColorHighlighted_]];
  }
  else {
    [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:surfaceColor_];
  }
}

- (void)updateColors {
  [self setColorsWithDouble:alpha_ withGeogebraCommonKernelMatrixCoords:color_ withGeogebraCommonKernelMatrixCoords:colorHighlighted_];
}

- (void)setColorsOutlined {
  [self setColorsWithDouble:1 withGeogebraCommonKernelMatrixCoords:color_ withGeogebraCommonKernelMatrixCoords:colorHighlighted_];
  [self setColorsWithDouble:alpha_ withGeogebraCommonKernelMatrixCoords:surfaceColor_ withGeogebraCommonKernelMatrixCoords:surfaceColorHighlighted_];
}

- (void)setColorsWithDouble:(jdouble)alpha
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)color
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)colorHighlighted {
  GeogebraCommonAwtGColor *c = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getObjectColor];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(color)) setWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((jdouble) [((GeogebraCommonAwtGColor *) nil_chk(c)) getRed] / 255, (jdouble) [c getGreen] / 255, (jdouble) [c getBlue] / 255, alpha) autorelease]];
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) isGrayScaled]) [color convertToGrayScale];
  jdouble r = [color getX];
  jdouble g = [color getY];
  jdouble b = [color getZ];
  jdouble d = r + g + b;
  GeogebraCommonKernelMatrixCoords *color2;
  jdouble distance;
  if (d > GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_LIGHT_COLOR) {
    distance = JavaLangMath_sqrtWithDouble_(r * r + g * g + b * b);
    color2 = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, [color getW]) autorelease];
  }
  else {
    r = 1 - r;
    g = 1 - g;
    b = 1 - b;
    distance = JavaLangMath_sqrtWithDouble_(r * r + g * g + b * b);
    color2 = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(1, 1, 1, [color getW]) autorelease];
  }
  jdouble s = [self getColorShift] / distance;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(colorHighlighted)) setWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([color mulWithDouble:1 - s])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(color2)) mulWithDouble:s]]];
  if ([colorHighlighted getW] < GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_ALPHA_MIN_HIGHLIGHTING) [colorHighlighted setWWithDouble:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_ALPHA_MIN_HIGHLIGHTING];
}

- (void)setAlphaWithFloat:(jfloat)alpha {
  self->alpha_ = alpha;
}

- (jfloat)getAlpha {
  return alpha_;
}

- (void)updateAlpha {
  [self setAlphaWithFloat:(jfloat) (1 - JavaLangMath_powWithDouble_withDouble_(1 - [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getAlphaValue], 1. / 3.))];
}

- (jboolean)hasTransparentAlpha {
  return [self getAlpha] > 0 && [self getAlpha] < 1;
}

- (jdouble)getColorShift {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a_geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_geo_(self, a_geo);
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists
                                                                               withInt:(jint)type {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *) nil_chk(lists)) getListWithInt:type])) addWithId:self];
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists
                                                                                    withInt:(jint)type {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *) nil_chk(lists)) getListWithInt:type])) removeWithId:self];
}

- (void)disposePreview {
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:self];
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
}

- (void)setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_lastPickingType_(self, type);
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)getPickingType {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getPickingType(self);
}

- (void)recordTrace {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_recordTrace(self);
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)newTraceIndex {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_(self, geomIndex_, surfaceIndex_) autorelease];
}

- (void)drawTracesOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                                   withBoolean:(jboolean)hidden {
  if (trace_ == nil) {
    return;
  }
  if (hidden) {
    [self setLineTextureHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
  }
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings * __strong settings in nil_chk([((JavaUtilTreeMap *) nil_chk(trace_)) keySet])) {
    JavaUtilArrayList *indices = [trace_ getWithId:settings];
    [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings)) getColor]];
    for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex * __strong index in nil_chk(indices)) {
      [self drawGeomWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:index];
    }
  }
}

- (void)drawGeomWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)index {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *) nil_chk(index))->geom_];
}

- (void)drawSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
        withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *)index {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *) nil_chk(index))->surface_];
}

- (void)drawTracesTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if (trace_ == nil) {
    return;
  }
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings * __strong settings in nil_chk([((JavaUtilTreeMap *) nil_chk(trace_)) keySet])) {
    JavaUtilArrayList *indices = [trace_ getWithId:settings];
    jdouble a = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings)) getAlpha];
    if (a > 0 && a < 1) {
      GeogebraCommonKernelMatrixCoords *c = [((GeogebraCommonKernelMatrixCoords *) nil_chk([settings getColor])) copyVector];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(c)) setWithInt:4 withDouble:a];
      [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:c];
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex * __strong index in nil_chk(indices)) {
        [self drawSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:index];
      }
    }
  }
}

- (void)drawTracesHidingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if (trace_ == nil) {
    return;
  }
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings * __strong settings in nil_chk([((JavaUtilTreeMap *) nil_chk(trace_)) keySet])) {
    JavaUtilArrayList *indices = [trace_ getWithId:settings];
    jdouble a = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings)) getAlpha];
    if (a > 0 && a < 1) {
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex * __strong index in nil_chk(indices)) {
        [self drawSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:index];
      }
    }
  }
}

- (void)drawTracesNotTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if (trace_ == nil) {
    return;
  }
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings * __strong settings in nil_chk([((JavaUtilTreeMap *) nil_chk(trace_)) keySet])) {
    JavaUtilArrayList *indices = [trace_ getWithId:settings];
    jdouble a = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings)) getAlpha];
    if (a >= 1) {
      [self setDrawingColorWithGeogebraCommonKernelMatrixCoords:[settings getColor]];
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex * __strong index in nil_chk(indices)) {
        [self drawSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:index];
      }
    }
  }
}

- (void)clearTraceForViewChanged {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
    if (trace_ != nil) {
      for (JavaUtilArrayList * __strong indices in nil_chk([trace_ values])) {
        for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex * __strong index in nil_chk(indices)) {
          [self doRemoveGeometryIndexWithInt:((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *) nil_chk(index))->geom_];
          [self doRemoveGeometryIndexWithInt:index->surface_];
        }
      }
      [trace_ clear];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_lastTraceIndices_(self, nil);
    }
  }
}

- (void)setZPickWithDouble:(jdouble)zNear
                withDouble:(jdouble)zFar {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setZPickWithDouble_withDouble_(self, zNear, zFar);
}

- (jdouble)getZPickNear {
  return zPickNear_;
}

- (jdouble)getZPickFar {
  return zPickFar_;
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  return NO;
}

- (jboolean)hitForListWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  return [self hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:hitting];
}

- (void)hitIfVisibleAndPickableWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                                withGeogebraCommonGeogebra3DEuclidian3DHits3D:(GeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  if ([self isVisible] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isPickable]) {
    if ([self hitLabelWithGeogebraCommonGeogebra3DEuclidian3DHitting:hitting withGeogebraCommonGeogebra3DEuclidian3DHits3D:hits]) {
      return;
    }
    if ([self hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:hitting]) {
      [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits)) addDrawable3DWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:self withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getPickingType(self)];
    }
  }
}

- (jboolean)hitLabelWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                     withGeogebraCommonGeogebra3DEuclidian3DHits3D:(GeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  if ([self isLabelVisible] && [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(label_)) hitWithGeogebraCommonAwtGPoint:((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting))->pos_]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setZPickWithDouble_withDouble_(self, [label_ getDrawZ], [label_ getDrawZ]);
    [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits)) addDrawable3DWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:self withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_LABEL()];
    return YES;
  }
  return NO;
}

- (jboolean)hasPickableLable {
  return YES;
}

- (void)resetHatch {
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
}

+ (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)boundsMin
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)boundsMax {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin, boundsMax);
}

+ (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, coords);
}

+ (void)enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v1
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v2
                                                         withDouble:(jdouble)r1
                                                         withDouble:(jdouble)r2 {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(min, max, center, v1, v2, r1, r2);
}

- (jboolean)isTracing {
  return NO;
}

- (void)dealloc {
  RELEASE_(m_view3D_);
  RELEASE_(geo_);
  RELEASE_(label_);
  RELEASE_(color_);
  RELEASE_(colorHighlighted_);
  RELEASE_(surfaceColor_);
  RELEASE_(surfaceColorHighlighted_);
  RELEASE_(lastPickingType_);
  RELEASE_(trace_);
  RELEASE_(traceSettingsCurrent_);
  RELEASE_(lastTraceIndex_);
  RELEASE_(lastTraceIndices_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Drawable3D", NULL, 0x1, NULL, NULL },
    { "newDrawLabel3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "newDrawLabel3D", "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawLabel3D;", 0x4, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelGeosGeoElement:", "Drawable3D", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "hasTrace", NULL, "Z", 0x4, NULL, NULL },
    { "updateLabel", NULL, "V", 0x4, NULL, NULL },
    { "updateLabelPosition", NULL, "V", 0x4, NULL, NULL },
    { "getLabelOffsetX", NULL, "F", 0x4, NULL, NULL },
    { "getLabelOffsetY", NULL, "F", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x404, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x404, NULL, NULL },
    { "updateForHitting", NULL, "V", 0x1, NULL, NULL },
    { "setWaitForUpdate", NULL, "V", 0x1, NULL, NULL },
    { "waitForUpdate", NULL, "Z", 0x1, NULL, NULL },
    { "setLabelWaitForUpdate", NULL, "V", 0x1, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "setWaitForUpdateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "removeGeometryIndexWithInt:", "removeGeometryIndex", "V", 0x4, NULL, NULL },
    { "doRemoveGeometryIndexWithInt:", "doRemoveGeometryIndex", "V", 0x4, NULL, NULL },
    { "setGeometryIndexWithInt:", "setGeometryIndex", "V", 0x4, NULL, NULL },
    { "getGeometryIndex", NULL, "I", 0x14, NULL, NULL },
    { "getReusableGeometryIndex", NULL, "I", 0x14, NULL, NULL },
    { "setSurfaceIndexWithInt:", "setSurfaceIndex", "V", 0x14, NULL, NULL },
    { "getSurfaceIndex", NULL, "I", 0x14, NULL, NULL },
    { "getReusableSurfaceIndex", NULL, "I", 0x14, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getView3D", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", 0x4, NULL, NULL },
    { "setView3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "setView3D", "V", 0x4, NULL, NULL },
    { "isVisible", NULL, "Z", 0x4, NULL, NULL },
    { "getLayer", NULL, "I", 0x14, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x401, NULL, NULL },
    { "drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x401, NULL, NULL },
    { "drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x401, NULL, NULL },
    { "drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotTransparentSurface", "V", 0x401, NULL, NULL },
    { "drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHidden", "V", 0x1, NULL, NULL },
    { "drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawInObjFormat", "V", 0x1, NULL, NULL },
    { "setLineTextureHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "setLineTextureHidden", "V", 0x4, NULL, NULL },
    { "drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x401, NULL, NULL },
    { "drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiding", "V", 0x401, NULL, NULL },
    { "drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withBoolean:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawForPicking", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0x1, NULL, NULL },
    { "getDrawablePicked", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0x4, NULL, NULL },
    { "getDrawablePickedWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "getDrawablePicked", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0x4, NULL, NULL },
    { "drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawGeometryForPicking", "V", 0x4, NULL, NULL },
    { "drawGeometryForPickingIntersectionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryForPickingIntersection", "V", 0x4, NULL, NULL },
    { "drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "drawLabelForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabelForPicking", "Z", 0x1, NULL, NULL },
    { "drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withBoolean:", "drawLabel", "Z", 0x2, NULL, NULL },
    { "isLabelVisible", NULL, "Z", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x401, NULL, NULL },
    { "isTransparent", NULL, "Z", 0x401, NULL, NULL },
    { "comparePickingToWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withBoolean:", "comparePickingTo", "I", 0x1, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x1, NULL, NULL },
    { "setHighlightingColor", NULL, "V", 0x4, NULL, NULL },
    { "setDrawingColorWithGeogebraCommonKernelMatrixCoords:", "setDrawingColor", "V", 0x4, NULL, NULL },
    { "setSurfaceHighlightingColor", NULL, "V", 0x4, NULL, NULL },
    { "updateColors", NULL, "V", 0x4, NULL, NULL },
    { "setColorsOutlined", NULL, "V", 0x4, NULL, NULL },
    { "setColorsWithDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setColors", "V", 0x4, NULL, NULL },
    { "setAlphaWithFloat:", "setAlpha", "V", 0x4, NULL, NULL },
    { "getAlpha", NULL, "F", 0x4, NULL, NULL },
    { "updateAlpha", NULL, "V", 0x4, NULL, NULL },
    { "hasTransparentAlpha", NULL, "Z", 0x4, NULL, NULL },
    { "getColorShift", NULL, "D", 0x404, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x401, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:withInt:", "addToDrawable3DLists", "V", 0x4, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x401, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:withInt:", "removeFromDrawable3DLists", "V", 0x4, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x1, NULL, NULL },
    { "setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "setPickingType", "V", 0x11, NULL, NULL },
    { "getPickingType", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", 0x11, NULL, NULL },
    { "recordTrace", NULL, "V", 0x14, NULL, NULL },
    { "newTraceIndex", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceIndex;", 0x4, NULL, NULL },
    { "drawTracesOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withBoolean:", "drawTracesOutline", "V", 0x14, NULL, NULL },
    { "drawGeomWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:", "drawGeom", "V", 0x4, NULL, NULL },
    { "drawSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex:", "drawSurface", "V", 0x4, NULL, NULL },
    { "drawTracesTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTracesTranspSurface", "V", 0x14, NULL, NULL },
    { "drawTracesHidingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTracesHidingSurface", "V", 0x14, NULL, NULL },
    { "drawTracesNotTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTracesNotTranspSurface", "V", 0x14, NULL, NULL },
    { "clearTraceForViewChanged", NULL, "V", 0x4, NULL, NULL },
    { "setZPickWithDouble:withDouble:", "setZPick", "V", 0x11, NULL, NULL },
    { "getZPickNear", NULL, "D", 0x11, NULL, NULL },
    { "getZPickFar", NULL, "D", 0x11, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "hitForListWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hitForList", "Z", 0x1, NULL, NULL },
    { "hitIfVisibleAndPickableWithGeogebraCommonGeogebra3DEuclidian3DHitting:withGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hitIfVisibleAndPickable", "V", 0x11, NULL, NULL },
    { "hitLabelWithGeogebraCommonGeogebra3DEuclidian3DHitting:withGeogebraCommonGeogebra3DEuclidian3DHits3D:", "hitLabel", "Z", 0x4, NULL, NULL },
    { "hasPickableLable", NULL, "Z", 0x1, NULL, NULL },
    { "resetHatch", NULL, "V", 0x1, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0xc, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0xc, NULL, NULL },
    { "enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "enlargeBoundsToDiagonal", "V", 0xc, NULL, NULL },
    { "isTracing", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG__", "DEBUG", 0x1a, "Z", NULL, NULL, .constantValue.asBOOL = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DEBUG },
    { "PICKED_DILATATION_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_PICKED_DILATATION },
    { "POINT_ON_PATH_DILATATION_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_POINT_ON_PATH_DILATATION },
    { "GRID3D_THICKNESS_", NULL, 0x1c, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_GRID3D_THICKNESS },
    { "m_view3D_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "waitForUpdate__", "waitForUpdate", 0x2, "Z", NULL, NULL,  },
    { "labelWaitForUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "waitForReset_", NULL, 0x4, "Z", NULL, NULL,  },
    { "geomIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "surfaceIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "label_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawLabel3D;", NULL, NULL,  },
    { "zPickFar_", NULL, 0x2, "D", NULL, NULL,  },
    { "zPickNear_", NULL, 0x2, "D", NULL, NULL,  },
    { "color_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "colorHighlighted_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "surfaceColor_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "surfaceColorHighlighted_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "EPSILON_Z_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_EPSILON_Z },
    { "DRAW_PICK_ORDER_MAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_MAX },
    { "DRAW_PICK_ORDER_POINT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_POINT },
    { "DRAW_PICK_ORDER_TEXT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_TEXT },
    { "DRAW_PICK_ORDER_PATH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH },
    { "DRAW_PICK_ORDER_SURFACE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE },
    { "DRAW_TYPE_DEFAULT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_DEFAULT },
    { "DRAW_TYPE_POINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_POINTS },
    { "DRAW_TYPE_CURVES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES },
    { "DRAW_TYPE_CLIPPED_CURVES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_CURVES },
    { "DRAW_TYPE_SURFACES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES },
    { "DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED },
    { "DRAW_TYPE_CLOSED_SURFACES_CURVED_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_CURVED },
    { "DRAW_TYPE_CLIPPED_SURFACES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLIPPED_SURFACES },
    { "DRAW_TYPE_TEXTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_TEXTS },
    { "DRAW_TYPE_LISTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_LISTS },
    { "DRAW_TYPE_MAX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_MAX },
    { "waitForUpdateVisualStyle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ALPHA_MIN_HIGHLIGHTING_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_ALPHA_MIN_HIGHLIGHTING },
    { "LIGHT_COLOR_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_LIGHT_COLOR },
    { "alpha_", NULL, 0x2, "F", NULL, NULL,  },
    { "COLOR_SHIFT_SURFACE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_SURFACE },
    { "COLOR_SHIFT_CURVES_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_CURVES },
    { "COLOR_SHIFT_POINTS_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_POINTS },
    { "COLOR_SHIFT_NONE_", NULL, 0x1c, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_COLOR_SHIFT_NONE },
    { "lastPickingType_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer$PickingType;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D$TraceSettings;Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D$TraceIndex;>;>;",  },
    { "traceSettingsCurrent_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceSettings;", NULL, NULL,  },
    { "lastTraceIndex_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceIndex;", NULL, NULL,  },
    { "lastTraceIndices_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D$TraceIndex;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$drawableComparator;", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$setComparator;", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceIndex;", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceSettings;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D = { 2, "Drawable3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x401, 96, methods, 48, fields, 0, NULL, 4, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  GeogebraCommonEuclidianDrawableND_init(self);
  self->geomIndex_ = -1;
  self->surfaceIndex_ = -1;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_color_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_colorHighlighted_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_surfaceColor_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_surfaceColorHighlighted_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->waitForUpdateVisualStyle_ = YES;
  self->alpha_ = 1.0f;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_lastPickingType_(self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE());
  [self setView3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:view3D];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_label_(self, [self newDrawLabel3DWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:view3D]);
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonKernelGeosGeoElement *a_geo) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  [self setGeoElementWithGeogebraCommonKernelGeosGeoElement:a_geo];
  self->waitForUpdate__ = YES;
}

jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getGeometryIndex(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self) {
  return self->geomIndex_;
}

jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getSurfaceIndex(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self) {
  return self->surfaceIndex_;
}

jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getLayer(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self) {
  if ([self createdByDrawList]) {
    return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getLayer(nil_chk(((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast([self getDrawListCreator], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class]))));
  }
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLayer];
}

jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, jboolean forPicking) {
  if (forPicking) if (!([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) isPickable])) return NO;
  if (![self isLabelVisible]) return NO;
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *) nil_chk(self->label_)) drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:forPicking];
  return YES;
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_getPickingType(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self) {
  return self->lastPickingType_;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_recordTrace(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self) {
  if (![self hasTrace]) {
    return;
  }
  if (self->trace_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_trace_(self, new_JavaUtilTreeMap_init());
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setAndConsume_traceSettingsCurrent_(self, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(self, self->color_, self->alpha_));
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(self->traceSettingsCurrent_)) setAlphaWithDouble:self->alpha_];
  JavaUtilArrayList *indices = [((JavaUtilTreeMap *) nil_chk(self->trace_)) getWithId:self->traceSettingsCurrent_];
  if (indices == nil) {
    indices = [new_JavaUtilArrayList_init() autorelease];
    [self->trace_ putWithId:[self->traceSettingsCurrent_ clone] withId:indices];
  }
  if (self->lastTraceIndices_ != nil) {
    [self->lastTraceIndices_ addWithId:self->lastTraceIndex_];
  }
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_lastTraceIndices_(self, indices);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_set_lastTraceIndex_(self, [self newTraceIndex]);
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setZPickWithDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *self, jdouble zNear, jdouble zFar) {
  self->zPickNear_ = zNear;
  self->zPickFar_ = zFar;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoords *min, GeogebraCommonKernelMatrixCoords *max, GeogebraCommonKernelMatrixCoords *boundsMin, GeogebraCommonKernelMatrixCoords *boundsMax) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initialize();
  for (jint i = 0; i < 3; i++) {
    if (IOSDoubleArray_Get(nil_chk(((GeogebraCommonKernelMatrixCoords *) nil_chk(min))->val_), i) > IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin))->val_, i)) {
      *IOSDoubleArray_GetRef(min->val_, i) = IOSDoubleArray_Get(boundsMin->val_, i);
    }
    if (IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(max))->val_, i) < IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax))->val_, i)) {
      *IOSDoubleArray_GetRef(max->val_, i) = IOSDoubleArray_Get(boundsMax->val_, i);
    }
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoords *min, GeogebraCommonKernelMatrixCoords *max, GeogebraCommonKernelMatrixCoords *coords) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initialize();
  for (jint i = 0; i < 3; i++) {
    if (IOSDoubleArray_Get(nil_chk(((GeogebraCommonKernelMatrixCoords *) nil_chk(min))->val_), i) > IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(coords))->val_, i)) {
      *IOSDoubleArray_GetRef(min->val_, i) = IOSDoubleArray_Get(coords->val_, i);
    }
    if (IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(max))->val_, i) < IOSDoubleArray_Get(coords->val_, i)) {
      *IOSDoubleArray_GetRef(max->val_, i) = IOSDoubleArray_Get(coords->val_, i);
    }
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(GeogebraCommonKernelMatrixCoords *min, GeogebraCommonKernelMatrixCoords *max, GeogebraCommonKernelMatrixCoords *center, GeogebraCommonKernelMatrixCoords *v1, GeogebraCommonKernelMatrixCoords *v2, jdouble r1, jdouble r2) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_initialize();
  for (jint i = 0; i < 3; i++) {
    jdouble add = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(((GeogebraCommonKernelMatrixCoords *) nil_chk(v1))->val_), i) * r1 + IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(v2))->val_, i) * r2);
    jdouble sub = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(v1->val_, i) * r1 - IOSDoubleArray_Get(v2->val_, i) * r2);
    jdouble v = JavaLangMath_maxWithDouble_withDouble_(add, sub);
    jdouble cMin = IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(center))->val_, i) - v;
    jdouble cMax = IOSDoubleArray_Get(center->val_, i) + v;
    if (IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(min))->val_, i) > cMin) {
      *IOSDoubleArray_GetRef(min->val_, i) = cMin;
    }
    if (IOSDoubleArray_Get(((GeogebraCommonKernelMatrixCoords *) nil_chk(max))->val_, i) < cMax) {
      *IOSDoubleArray_GetRef(max->val_, i) = cMax;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator

- (jint)compareWithId:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d1
               withId:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d2 {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d1)) comparePickingToWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d2 withBoolean:NO];
}

- (instancetype)init {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator = { 2, "drawableComparator", "geogebra.common.geogebra3D.euclidian3D.draw", "Drawable3D", 0x19, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator_init(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator_init() {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_drawableComparator)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator

- (jint)compareWithId:(JavaUtilTreeSet *)set1
               withId:(JavaUtilTreeSet *)set2 {
  if ([((JavaUtilTreeSet *) nil_chk(set1)) isEmpty]) return 1;
  if ([((JavaUtilTreeSet *) nil_chk(set2)) isEmpty]) return -1;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d1 = [set1 first];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d2 = [set2 first];
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d1)) comparePickingToWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d2 withBoolean:YES];
}

- (instancetype)init {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator = { 2, "setComparator", "geogebra.common.geogebra3D.euclidian3D.draw", "Drawable3D", 0x19, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/util/Comparator<Ljava/util/TreeSet<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator_init(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator *self) {
  NSObject_init(self);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator_init() {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_setComparator)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)outer$
                                                                  withInt:(jint)geom
                                                                  withInt:(jint)surface {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_(self, outer$, geom, surface);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)outer$
                                                                  withInt:(jint)geom
                                                                  withInt:(jint)surface
                                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_withGeogebraCommonKernelMatrixCoords_(self, outer$, geom, surface, center);
  return self;
}

- (void)dealloc {
  RELEASE_(center_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withInt:withInt:", "TraceIndex", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withInt:withInt:withGeogebraCommonKernelMatrixCoords:", "TraceIndex", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geom_", NULL, 0x1, "I", NULL, NULL,  },
    { "surface_", NULL, 0x1, "I", NULL, NULL,  },
    { "center_", NULL, 0x1, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex = { 2, "TraceIndex", "geogebra.common.geogebra3D.euclidian3D.draw", "Drawable3D", 0x4, 2, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, jint geom, jint surface) {
  NSObject_init(self);
  self->geom_ = geom;
  self->surface_ = surface;
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, jint geom, jint surface) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_(self, outer$, geom, surface);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, jint geom, jint surface, GeogebraCommonKernelMatrixCoords *center) {
  NSObject_init(self);
  self->geom_ = geom;
  self->surface_ = surface;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_set_center_(self, center);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, jint geom, jint surface, GeogebraCommonKernelMatrixCoords *center) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withInt_withGeogebraCommonKernelMatrixCoords_(self, outer$, geom, surface, center);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceIndex)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)outer$
                                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)c
                                                               withDouble:(jdouble)a {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(self, outer$, c, a);
  return self;
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *)clone {
  GeogebraCommonKernelMatrixCoords *c1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->c_)) copyVector];
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(this$0_, c1, a_) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getColor {
  return c_;
}

- (jdouble)getAlpha {
  return a_;
}

- (void)setAlphaWithDouble:(jdouble)a {
  self->a_ = a;
}

- (jint)getIntWithDouble:(jdouble)value {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(self, value);
}

- (jint)compareToWithId:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *)settings {
  check_class_cast(settings, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings class]);
  for (jint i = 1; i <= 3; i++) {
    jint v1 = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->c_)) getWithInt:i]);
    jint v2 = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(self, [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings))->c_ getWithInt:i]);
    if (v1 < v2) {
      return -1;
    }
    if (v1 > v2) {
      return 1;
    }
  }
  jint v1 = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(self, self->a_);
  jint v2 = GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(self, ((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *) nil_chk(settings))->a_);
  if (v1 < v2) {
    return -1;
  }
  if (v1 > v2) {
    return 1;
  }
  return 0;
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:withGeogebraCommonKernelMatrixCoords:withDouble:", "TraceSettings", NULL, 0x1, NULL, NULL },
    { "clone", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D$TraceSettings;", 0x1, NULL, NULL },
    { "getColor", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getAlpha", NULL, "D", 0x1, NULL, NULL },
    { "setAlphaWithDouble:", "setAlpha", "V", 0x1, NULL, NULL },
    { "getIntWithDouble:", "getInt", "I", 0x2, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "c_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "a_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings = { 2, "TraceSettings", "geogebra.common.geogebra3D.euclidian3D.draw", "Drawable3D", 0x2, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, "Ljava/lang/Object;Ljava/lang/Comparable<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D$TraceSettings;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, GeogebraCommonKernelMatrixCoords *c, jdouble a) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_set_this$0_(self, outer$);
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_set_c_(self, c);
  self->a_ = a;
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *outer$, GeogebraCommonKernelMatrixCoords *c, jdouble a) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withGeogebraCommonKernelMatrixCoords_withDouble_(self, outer$, c, a);
  return self;
}

jint GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings_getIntWithDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings *self, jdouble value) {
  return J2ObjCFpToInt((256 * value));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_TraceSettings)
