//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCoordSys.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs1
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, cs1, cs2);
  return self;
}

- (void)setCoordSysWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs1
                   withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cs2 {
  if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:cs1]) [super setCoordSysWithGeogebraCommonKernelGeosGeoElement:cs1 withGeogebraCommonKernelGeosGeoElement:cs2];
  else [super setCoordSysWithGeogebraCommonKernelGeosGeoElement:cs2 withGeogebraCommonKernelGeosGeoElement:cs1];
}

- (void)compute {
  id<GeogebraCommonKernelKernelNDGeoLineND> line = (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast([self getCS1], @protocol(GeogebraCommonKernelKernelNDGeoLineND));
  id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs2D = (id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) check_protocol_cast([self getCS2], @protocol(GeogebraCommonKernelKernelNDGeoCoordSys2D));
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o];
  GeogebraCommonKernelMatrixCoords *globalCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  GeogebraCommonKernelMatrixCoords *inPlaneCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs2D)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:d withGeogebraCommonKernelMatrixCoords:globalCoords withGeogebraCommonKernelMatrixCoords:inPlaneCoords];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([self getIntersection], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
  if (-[inPlaneCoords getWithInt:3] > [line getMinParameter] - GeogebraCommonKernelKernel_MAX_PRECISION && -[inPlaneCoords getWithInt:3] < [line getMaxParameter] + GeogebraCommonKernelKernel_MAX_PRECISION && [cs2D isInRegionWithDouble:[inPlaneCoords getWithInt:1] withDouble:[inPlaneCoords getWithInt:2]]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setCoordsWithGeogebraCommonKernelMatrixCoords:globalCoords];
  }
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(p)) setUndefined];
}

+ (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *)getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line
                                                                                                withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(line, plane);
}

+ (GeogebraCommonKernelMatrixCoords *)getIntersectLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line
                                                       withGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)cs2D
                                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)globalCoords
                                                                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)inPlaneCoords {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getIntersectLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(line, cs2D, globalCoords, inPlaneCoords);
}

- (NSString *)getIntersectionTypeString {
  return @"IntersectionPointOfAB";
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "AlgoIntersectCS1D2D", NULL, 0x1, NULL, NULL },
    { "setCoordSysWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setCoordSys", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoCoordSys2D:", "getConfigLinePlane", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;", 0x9, NULL, NULL },
    { "getIntersectLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoCoordSys2D:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getIntersectLinePlane", "Lgeogebra.common.kernel.Matrix.Coords;", 0x9, NULL, NULL },
    { "getIntersectionTypeString", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D = { 2, "AlgoIntersectCS1D2D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *cs1, GeogebraCommonKernelGeosGeoElement *cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCoordSys_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, cs1, cs2);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *cs1, GeogebraCommonKernelGeosGeoElement *cs2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, cs1, cs2);
  return self;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(id<GeogebraCommonKernelKernelNDGeoLineND> line, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> plane) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initialize();
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) dotproductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getDirectionInD3]])) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([plane getCoordSys])) getOrigin]])) dotproductWithGeogebraCommonKernelMatrixCoords:[plane getDirectionInD3]])) {
      return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_CONTAINED();
    }
    return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_PARALLEL();
  }
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_get_GENERAL();
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getIntersectLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(id<GeogebraCommonKernelKernelNDGeoLineND> line, id<GeogebraCommonKernelKernelNDGeoCoordSys2D> cs2D, GeogebraCommonKernelMatrixCoords *globalCoords, GeogebraCommonKernelMatrixCoords *inPlaneCoords) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_initialize();
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([line getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(cs2D)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:d withGeogebraCommonKernelMatrixCoords:globalCoords withGeogebraCommonKernelMatrixCoords:inPlaneCoords];
  if ([line respectLimitedPathWithDouble:-[((GeogebraCommonKernelMatrixCoords *) nil_chk(inPlaneCoords)) getWithInt:3]] && [cs2D isInRegionWithDouble:[inPlaneCoords getWithInt:1] withDouble:[inPlaneCoords getWithInt:2]]) {
    return globalCoords;
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum)

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_values_[3];

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_values() {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_values_ count:3 type:GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_values();
}

+ (GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_valueOfWithNSString_(name);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *e = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum class]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_GENERAL = new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(@"GENERAL", 0);
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_PARALLEL = new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(@"PARALLEL", 1);
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_CONTAINED = new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(@"CONTAINED", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "GENERAL", "GENERAL", 0x4019, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_GENERAL, NULL,  },
    { "PARALLEL", "PARALLEL", 0x4019, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_PARALLEL, NULL,  },
    { "CONTAINED", "CONTAINED", 0x4019, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;", &GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_CONTAINED, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectCS1D2D$ConfigLinePlane;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum = { 2, "ConfigLinePlane", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectCS1D2D", 0x4019, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D$ConfigLinePlane;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlaneEnum)
