//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdContinuedFraction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoContinuedFraction.h"
#include "geogebra/common/kernel/advanced/CmdContinuedFraction.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelAdvancedCmdContinuedFraction ()

- (GeogebraCommonKernelGeosGeoText *)ContinuedFractionWithNSString:(NSString *)label
                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num
                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)level
                            withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)shortHand;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelAdvancedCmdContinuedFraction *self, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> num, id<GeogebraCommonKernelGeosGeoNumberValue> level, GeogebraCommonKernelGeosGeoBoolean *shortHand);

@implementation GeogebraCommonKernelAdvancedCmdContinuedFraction

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdContinuedFraction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:3];
  switch (n) {
    case 1:
    if ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), nil, nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    case 2:
    if ((*IOSBooleanArray_GetRef(ok, 0) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoBoolean])) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), nil, (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoBoolean class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    if ((*IOSBooleanArray_GetRef(ok, 0) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 0)]) && (*IOSBooleanArray_GetRef(ok, 1) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    case 3:
    if ((*IOSBooleanArray_GetRef(ok, 0) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) && (*IOSBooleanArray_GetRef(ok, 1) = [GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]) && (*IOSBooleanArray_GetRef(ok, 2) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean])) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoBoolean class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (GeogebraCommonKernelGeosGeoText *)ContinuedFractionWithNSString:(NSString *)label
                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)num
                        withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)level
                            withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)shortHand {
  return GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, label, num, level, shortHand);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdContinuedFraction", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "ContinuedFractionWithNSString:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoBoolean:", "ContinuedFraction", "Lgeogebra.common.kernel.geos.GeoText;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdContinuedFraction = { 2, "CmdContinuedFraction", "geogebra.common.kernel.advanced", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdContinuedFraction;
}

@end

void GeogebraCommonKernelAdvancedCmdContinuedFraction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdContinuedFraction *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdContinuedFraction *new_GeogebraCommonKernelAdvancedCmdContinuedFraction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdContinuedFraction *self = [GeogebraCommonKernelAdvancedCmdContinuedFraction alloc];
  GeogebraCommonKernelAdvancedCmdContinuedFraction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelAdvancedCmdContinuedFraction_ContinuedFractionWithNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelAdvancedCmdContinuedFraction *self, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> num, id<GeogebraCommonKernelGeosGeoNumberValue> level, GeogebraCommonKernelGeosGeoBoolean *shortHand) {
  GeogebraCommonKernelAdvancedAlgoContinuedFraction *algo = [new_GeogebraCommonKernelAdvancedAlgoContinuedFraction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, label, num, level, shortHand) autorelease];
  GeogebraCommonKernelGeosGeoText *text = [algo getResult];
  return text;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdContinuedFraction)
