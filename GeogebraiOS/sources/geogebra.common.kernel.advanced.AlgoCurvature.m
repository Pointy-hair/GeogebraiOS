//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCurvature.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoCurvature.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelAdvancedAlgoCurvature () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> A_;
  GeogebraCommonKernelGeosGeoFunction *f_;
  GeogebraCommonKernelGeosGeoNumeric *K_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvature, A_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvature, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvature, K_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvature_compute(GeogebraCommonKernelAdvancedAlgoCurvature *self);

@implementation GeogebraCommonKernelAdvancedAlgoCurvature

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Curvature();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, f_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:K_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return K_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCurvature_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(f_);
  RELEASE_(K_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "AlgoCurvature", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoFunction:", "AlgoCurvature", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "K_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCurvature = { 2, "AlgoCurvature", "geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCurvature;
}

@end

void GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoCurvature *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:@"k"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvature *new_GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvature *self = [GeogebraCommonKernelAdvancedAlgoCurvature alloc];
  GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoCurvature *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvature_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCurvature_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvature_setAndConsume_K_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvature_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvature *new_GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvature *self = [GeogebraCommonKernelAdvancedAlgoCurvature alloc];
  GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvature_compute(GeogebraCommonKernelAdvancedAlgoCurvature *self) {
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) isDefined] && GeogebraCommonKernelKernel_isZeroWithDouble_([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->A_)) getInhomZ])) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setValueWithDouble:[self->f_ evaluateCurvatureWithDouble:[self->A_ getInhomX]]];
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setUndefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCurvature)
