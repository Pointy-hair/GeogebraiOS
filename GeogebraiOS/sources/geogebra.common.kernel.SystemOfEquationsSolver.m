//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/SystemOfEquationsSolver.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/EquationSolverInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/SystemOfEquationsSolver.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"

@interface GeogebraCommonKernelSystemOfEquationsSolver () {
 @public
  jdouble epsilon_;
  id<GeogebraCommonKernelEquationSolverInterface> eqnSolver_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelSystemOfEquationsSolver, eqnSolver_, id<GeogebraCommonKernelEquationSolverInterface>)

@implementation GeogebraCommonKernelSystemOfEquationsSolver

- (instancetype)initWithGeogebraCommonKernelEquationSolverInterface:(id<GeogebraCommonKernelEquationSolverInterface>)eqnSolver {
  GeogebraCommonKernelSystemOfEquationsSolver_initWithGeogebraCommonKernelEquationSolverInterface_(self, eqnSolver);
  return self;
}

- (void)setEpsilonWithDouble:(jdouble)eps {
  epsilon_ = eps;
}

- (jint)solveSystemOfQuadraticEquationsWithDoubleArray:(IOSDoubleArray *)eqn1
                                       withDoubleArray:(IOSDoubleArray *)eqn2
                                      withDoubleArray2:(IOSObjectArray *)res
                                            withDouble:(jdouble)eps {
  JavaUtilArrayList *xs = [new_JavaUtilArrayList_init() autorelease];
  JavaUtilArrayList *ys = [new_JavaUtilArrayList_init() autorelease];
  if (IOSDoubleArray_Get(nil_chk(eqn1), 0) == 0 || IOSDoubleArray_Get(nil_chk(eqn2), 0) == 0 || IOSDoubleArray_Get(eqn1, 2) == 0 || IOSDoubleArray_Get(eqn2, 2) == 0) return -1;
  jdouble a20 = 1;
  jdouble a11 = IOSDoubleArray_Get(eqn1, 1) / IOSDoubleArray_Get(eqn1, 0);
  jdouble a02 = IOSDoubleArray_Get(eqn1, 2) / IOSDoubleArray_Get(eqn1, 0);
  jdouble a10 = IOSDoubleArray_Get(eqn1, 3) / IOSDoubleArray_Get(eqn1, 0);
  jdouble a01 = IOSDoubleArray_Get(eqn1, 4) / IOSDoubleArray_Get(eqn1, 0);
  jdouble a00 = IOSDoubleArray_Get(eqn1, 5) / IOSDoubleArray_Get(eqn1, 0);
  jdouble b20 = 1;
  jdouble b11 = IOSDoubleArray_Get(nil_chk(eqn2), 1) / IOSDoubleArray_Get(eqn2, 0);
  jdouble b02 = IOSDoubleArray_Get(eqn2, 2) / IOSDoubleArray_Get(eqn2, 0);
  jdouble b10 = IOSDoubleArray_Get(eqn2, 3) / IOSDoubleArray_Get(eqn2, 0);
  jdouble b01 = IOSDoubleArray_Get(eqn2, 4) / IOSDoubleArray_Get(eqn2, 0);
  jdouble b00 = IOSDoubleArray_Get(eqn2, 5) / IOSDoubleArray_Get(eqn2, 0);
  if (a11 == b11 && a02 == b02 && a10 == b10 && a01 == b01 && a00 == b00) return -1;
  jdouble d00 = a20 * b10 - b20 * a10;
  jdouble d01 = a20 * b11 - b20 * a11;
  jdouble d10 = a10 * b00 - b10 * a00;
  jdouble d11 = a11 * b00 + a10 * b01 - b11 * a00 - b10 * a01;
  jdouble d12 = a11 * b01 + a10 * b02 - b11 * a01 - b10 * a02;
  jdouble d13 = a11 * b02 - b11 * a02;
  jdouble d20 = a20 * b00 - b20 * a00;
  jdouble d21 = a20 * b01 - b20 * a01;
  jdouble d22 = a20 * b02 - b20 * a02;
  IOSDoubleArray *quarticParams = [IOSDoubleArray arrayWithLength:5];
  *IOSDoubleArray_GetRef(quarticParams, 0) = d00 * d10 - d20 * d20;
  *IOSDoubleArray_GetRef(quarticParams, 1) = d01 * d10 + d00 * d11 - 2 * d20 * d21;
  *IOSDoubleArray_GetRef(quarticParams, 2) = d01 * d11 + d00 * d12 - d21 * d21 - 2 * d20 * d22;
  *IOSDoubleArray_GetRef(quarticParams, 3) = d01 * d12 + d00 * d13 - 2 * d21 * d22;
  *IOSDoubleArray_GetRef(quarticParams, 4) = d01 * d13 - d22 * d22;
  IOSDoubleArray *quarticRoots = [IOSDoubleArray arrayWithLength:4];
  jint solnr = [((id<GeogebraCommonKernelEquationSolverInterface>) nil_chk(eqnSolver_)) solveQuarticWithDoubleArray:quarticParams withDoubleArray:quarticRoots withDouble:eps];
  JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(quarticRoots, 0, solnr);
  for (jint i = 0; i < solnr; i++) {
    IOSDoubleArray *quadraticParams = [IOSDoubleArray arrayWithLength:3];
    *IOSDoubleArray_GetRef(quadraticParams, 2) = a20;
    *IOSDoubleArray_GetRef(quadraticParams, 1) = a11 * IOSDoubleArray_Get(quarticRoots, i) + a10;
    *IOSDoubleArray_GetRef(quadraticParams, 0) = a02 * IOSDoubleArray_Get(quarticRoots, i) * IOSDoubleArray_Get(quarticRoots, i) + a01 * IOSDoubleArray_Get(quarticRoots, i) + a00;
    IOSDoubleArray *quadraticRoots = [IOSDoubleArray arrayWithLength:3];
    jint solnr2 = [eqnSolver_ solveQuadraticWithDoubleArray:quadraticParams withDoubleArray:quadraticRoots withDouble:eps];
    JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(quadraticRoots, 0, solnr2);
    for (jint j = 0; j < solnr2; j++) {
      jdouble x = IOSDoubleArray_Get(quadraticRoots, j);
      jdouble y = IOSDoubleArray_Get(quarticRoots, i);
      jdouble result = b02 * y * y + b11 * x * y + b20 * x * x + b01 * y + b10 * x + b00;
      if (JavaLangMath_absWithDouble_(result) < epsilon_) {
        [xs addWithId:JavaLangDouble_valueOfWithDouble_(x)];
        [ys addWithId:JavaLangDouble_valueOfWithDouble_(y)];
      }
    }
  }
  for (jint i = 0; i < [xs size]; i++) for (jint j = i + 1; j < [xs size]; j++) if (JavaLangMath_absWithDouble_([((JavaLangDouble *) nil_chk([xs getWithInt:i])) doubleValue] - [((JavaLangDouble *) nil_chk([xs getWithInt:j])) doubleValue]) < epsilon_ && JavaLangMath_absWithDouble_([((JavaLangDouble *) nil_chk([ys getWithInt:i])) doubleValue] - [((JavaLangDouble *) nil_chk([ys getWithInt:j])) doubleValue]) < epsilon_) {
    [xs removeWithInt:j];
    [ys removeWithInt:j];
    j--;
  }
  for (jint i = 0; i < [xs size]; i++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(res), i)), 0) = [((JavaLangDouble *) nil_chk([xs getWithInt:i])) doubleValue];
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(res, i)), 1) = [((JavaLangDouble *) nil_chk([ys getWithInt:i])) doubleValue];
  }
  return [xs size];
}

- (void)dealloc {
  RELEASE_(eqnSolver_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelEquationSolverInterface:", "SystemOfEquationsSolver", NULL, 0x1, NULL, NULL },
    { "setEpsilonWithDouble:", "setEpsilon", "V", 0x0, NULL, NULL },
    { "solveSystemOfQuadraticEquationsWithDoubleArray:withDoubleArray:withDoubleArray2:withDouble:", "solveSystemOfQuadraticEquations", "I", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "epsilon_", NULL, 0x2, "D", NULL, NULL,  },
    { "eqnSolver_", NULL, 0x2, "Lgeogebra.common.kernel.EquationSolverInterface;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelSystemOfEquationsSolver = { 2, "SystemOfEquationsSolver", "geogebra.common.kernel", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelSystemOfEquationsSolver;
}

@end

void GeogebraCommonKernelSystemOfEquationsSolver_initWithGeogebraCommonKernelEquationSolverInterface_(GeogebraCommonKernelSystemOfEquationsSolver *self, id<GeogebraCommonKernelEquationSolverInterface> eqnSolver) {
  NSObject_init(self);
  self->epsilon_ = GeogebraCommonKernelKernel_STANDARD_PRECISION;
  GeogebraCommonKernelSystemOfEquationsSolver_set_eqnSolver_(self, eqnSolver);
}

GeogebraCommonKernelSystemOfEquationsSolver *new_GeogebraCommonKernelSystemOfEquationsSolver_initWithGeogebraCommonKernelEquationSolverInterface_(id<GeogebraCommonKernelEquationSolverInterface> eqnSolver) {
  GeogebraCommonKernelSystemOfEquationsSolver *self = [GeogebraCommonKernelSystemOfEquationsSolver alloc];
  GeogebraCommonKernelSystemOfEquationsSolver_initWithGeogebraCommonKernelEquationSolverInterface_(self, eqnSolver);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelSystemOfEquationsSolver)
