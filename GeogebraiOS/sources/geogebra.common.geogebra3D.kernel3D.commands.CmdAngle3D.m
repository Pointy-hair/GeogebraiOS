//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdAngle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdAngle.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                                             withInt:(jint)n
                                                    withBooleanArray:(IOSBooleanArray *)ok {
  if (n == 4) {
    IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 3) = ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 3)]))) {
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoElement3D] && IOSObjectArray_Get(arg, 3) == [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
        return [self angleWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
      }
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
  }
  return [super processWithGeogebraCommonKernelArithmeticCommand:c withInt:n withBooleanArray:ok];
}

- (IOSObjectArray *)process2WithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                     withBooleanArray:(IOSBooleanArray *)ok {
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPlane])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPlane]))) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]) withGeogebraCommonKernelKernelNDGeoPlaneND:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoPolygon])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && IOSObjectArray_Get(arg, 1) == [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [super angleWithNSStringArray:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class])];
    }
    IOSObjectArray *ret = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angles3DWithNSStringArray:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels] withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoPolygon class]) withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))];
    return ret;
  }
  return [super process2WithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
}

- (IOSObjectArray *)process3WithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg
                                                     withBooleanArray:(IOSBooleanArray *)ok {
  if ((*IOSBooleanArray_GetRef(nil_chk(ok), 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoLine])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && IOSObjectArray_Get(arg, 2) == [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [super angleWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND))];
    }
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoVector])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoVector])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoElement3D] && IOSObjectArray_Get(arg, 2) == [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getXOYPlane]) {
      return [self angleWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoVectorND)) withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoVectorND))];
    }
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel] withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoVectorND)) withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoVectorND)) withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super process3WithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElementArray:arg withBooleanArray:ok];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p3)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)w {
  if ([((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(w)) isGeoElement3D]) {
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angle3DWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v withGeogebraCommonKernelKernelNDGeoVectorND:w] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v withGeogebraCommonKernelKernelNDGeoVectorND:w];
}

- (IOSObjectArray *)anglePointOrVectorWithNSString:(NSString *)label
            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)v {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(v)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *algo;
    if ([v isGeoVector]) {
      algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(v, [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])) autorelease];
    }
    else {
      algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(v, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) autorelease];
    }
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *) nil_chk(algo)) getAngle] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super anglePointOrVectorWithNSString:label withGeogebraCommonKernelGeosGeoElement:v];
}

- (IOSObjectArray *)angleWithNSString:(NSString *)label
withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleElement3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleConic3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_(cons_, label, (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(c, [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getAngle] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super angleWithNSString:label withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)angleWithNSStringArray:(IOSObjectArray *)labels
    withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Angles3DWithNSStringArray:labels withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(p, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])];
  }
  return [super angleWithNSStringArray:labels withGeogebraCommonKernelGeosGeoPolygon:p];
}

- (IOSObjectArray *)angleWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)a {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> direction = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getApplication])) getActiveEuclidianView])) getDirection];
  if (direction == [kernelA_ getSpace]) {
    return [IOSObjectArray arrayWithObjects:(id[]){  } count:0 type:GeogebraCommonKernelGeosGeoElement_class_()];
  }
  if (direction == [kernelA_ getXOYPlane]) {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([kernelA_ getManager3D])) AngleWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a withGeogebraCommonKernelKernelNDGeoDirectionND:[kernelA_ getXOYPlane] withBoolean:YES];
    }
    return [super angleWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a];
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([kernelA_ getManager3D])) AngleWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a withGeogebraCommonKernelKernelNDGeoDirectionND:direction withBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdAngle3D", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:withInt:withBooleanArray:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
    { "process2WithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "process3WithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElementArray:withBooleanArray:", "process3", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "anglePointOrVectorWithNSString:withGeogebraCommonKernelGeosGeoElement:", "anglePointOrVector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSStringArray:withGeogebraCommonKernelGeosGeoPolygon:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angleWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:", "angle", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D = { 2, "CmdAngle3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdAngle_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdAngle3D)
