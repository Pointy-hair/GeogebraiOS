//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D () {
 @public
  jboolean isIntersection__;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  jboolean trace_;
  GeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D, tmpCoords1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D, tmpCoords2_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)O
                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)V {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, c, O, V);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)I {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, I);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)I
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, c, O, I, isIntersection);
  return self;
}

- (jboolean)isDefined {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) isDefined];
}

- (void)setUndefined {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) setUndefined];
}

- (void)setCoordFromPointsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)a_O
                          withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)a_I {
  [self setCoordWithGeogebraCommonKernelMatrixCoords:a_O withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(a_I)) subWithGeogebraCommonKernelMatrixCoords:a_O]];
}

- (void)setCoordWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) resetCoordSys];
  [coordsys_ addPointWithGeogebraCommonKernelMatrixCoords:o];
  [coordsys_ addVectorWithGeogebraCommonKernelMatrixCoords:v];
  [coordsys_ makeOrthoMatrixWithBoolean:NO withBoolean:NO];
}

- (void)setLineThroughWithDouble:(jdouble)pointX
                      withDouble:(jdouble)pointY {
  [self setCoordWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(pointX, pointY, 0, 1) autorelease] withGeogebraCommonKernelMatrixCoords:[self getDirectionInD3]];
}

- (void)setCoordWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O
                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)I {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_startPoint_(self, O);
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_endPoint_(self, I);
  if ((O == nil) || (I == nil)) return;
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(I)) isInfinite]) if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(O)) isInfinite]) [self setUndefined];
  else [self setCoordWithGeogebraCommonKernelMatrixCoords:[O getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[I getCoordsInD3]];
  else if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(O)) isInfinite]) [self setCoordWithGeogebraCommonKernelMatrixCoords:[I getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[O getCoordsInD3]];
  else [self setCoordWithGeogebraCommonKernelMatrixCoords:[O getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([I getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[O getInhomCoordsInD3]]];
}

- (void)setCoordWithGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)geo {
  [self setCoordWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *) nil_chk(geo)) getCoordSys])) getOrigin] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([geo getCoordSys])) getVx]];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D class]]) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) [self setUndefined];
    else [self setCoordWithGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D class])];
  }
  else if ([GeogebraCommonKernelKernelNDGeoLineND_class_() isInstance:geo]) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) [self setUndefined];
    else {
      [self setCoordWithGeogebraCommonKernelKernelNDGeoPointND:[((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) getStartPoint] withGeogebraCommonKernelKernelNDGeoPointND:[((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) getEndPoint]];
    }
  }
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)createWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)copy__ {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *geo = [self createWithGeogebraCommonKernelConstruction:cons_];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *) nil_chk(geo)) setCoordWithGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D:self];
  return geo;
}

- (GeogebraCommonKernelMatrixCoords *)getPointWithDouble:(jdouble)lambda {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getPointWithDouble:lambda];
}

- (GeogebraCommonKernelMatrixCoords *)getPointInDWithInt:(jint)dimension
                                              withDouble:(jdouble)lambda {
  GeogebraCommonKernelMatrixCoords *v = [self getPointWithDouble:lambda];
  switch (dimension) {
    case 3:
    return v;
    case 2:
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX], [v getY], [v getW]) autorelease];
    default:
    return nil;
  }
}

- (jdouble)getUnit {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx])) norm];
}

- (GeogebraCommonKernelMatrixCoords *)getMainDirection {
  return [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getMatrixOrthonormal])) getVx];
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionForEquation {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
}

- (jboolean)isPath {
  return YES;
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  jdouble t = [self getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:P];
  if (t < [self getMinParameter]) t = [self getMinParameter];
  else if (t > [self getMaxParameter]) t = [self getMaxParameter];
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) setTWithDouble:t];
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:[self getPointWithDouble:t] withBoolean:NO];
}

- (jdouble)getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  jboolean done = NO;
  jdouble t = 0;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) hasWillingCoords]) {
      if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) hasWillingDirection]) {
        if (tmpCoords1_ == nil) {
          GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
        }
        t = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) getWillingCoords])) projectedParameterOnLineWithDirectionWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getOrigin] withGeogebraCommonKernelMatrixCoords:[coordsys_ getVx] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) getWillingDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        done = YES;
      }
      else {
        GeogebraCommonKernelMatrixCoords *preDirection = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) getWillingCoords])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getOrigin]])) crossProductWithGeogebraCommonKernelMatrixCoords:[coordsys_ getVx]];
        if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(preDirection)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) preDirection = [coordsys_ getVy];
        if (tmpCoords1_ == nil) {
          GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
        }
        t = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(P, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) getWillingCoords])) projectedParameterOnLineWithDirectionWithGeogebraCommonKernelMatrixCoords:[coordsys_ getOrigin] withGeogebraCommonKernelMatrixCoords:[coordsys_ getVx] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(preDirection)) crossProduct4WithGeogebraCommonKernelMatrixCoords:[coordsys_ getVx]] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        done = YES;
      }
    }
  }
  if (!done) {
    GeogebraCommonKernelMatrixCoords *preDirection = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getOrigin]])) crossProductWithGeogebraCommonKernelMatrixCoords:[coordsys_ getVx]];
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(preDirection)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) preDirection = [coordsys_ getVy];
    if (tmpCoords1_ == nil) {
      GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
    }
    t = [((GeogebraCommonKernelMatrixCoords *) nil_chk([P getInhomCoordsInD3])) projectedParameterOnLineWithDirectionWithGeogebraCommonKernelMatrixCoords:[coordsys_ getOrigin] withGeogebraCommonKernelMatrixCoords:[coordsys_ getVx] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(preDirection)) crossProduct4WithGeogebraCommonKernelMatrixCoords:[coordsys_ getVx]] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  }
  return t;
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:[self getPointWithDouble:[((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT]] withBoolean:NO];
}

- (jboolean)isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)PI
                                                    withDouble:(jdouble)eps {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(PI)) getPath] == self) return YES;
  return [self isOnPathWithGeogebraCommonKernelMatrixCoords:[PI getCoordsInD3] withDouble:eps];
}

- (jboolean)isOnPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                              withDouble:(jdouble)eps {
  return [self isOnFullLineWithGeogebraCommonKernelMatrixCoords:coords withDouble:eps];
}

- (jboolean)isOnFullLineWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p
                                                  withDouble:(jdouble)eps {
  GeogebraCommonKernelMatrixCoords *cross;
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getW])) {
    cross = [p crossProductWithGeogebraCommonKernelMatrixCoords:[self getDirectionInD3]];
    return [((GeogebraCommonKernelMatrixCoords *) nil_chk(cross)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
  }
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getDirectionInD3])) normalized];
  GeogebraCommonKernelMatrixCoords *v = [p subWithGeogebraCommonKernelMatrixCoords:[self getStartInhomCoords]];
  GeogebraCommonKernelMatrixCoords *n = [v subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) mulWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:d]]];
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(n)) dotproductWithGeogebraCommonKernelMatrixCoords:n] < eps * eps;
}

- (jboolean)respectLimitedPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
                                                        withDouble:(jdouble)eps {
  return YES;
}

- (jboolean)isValidCoordWithDouble:(jdouble)x {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
}

- (GeogebraCommonKernelMatrixCoordSys *)getCoordSys {
  return coordsys_;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getPointWithDouble:0.5];
}

- (GeogebraCommonKernelMatrixCoords *)getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)m {
  if (m == nil) {
    return GeogebraCommonKernelMatrixCoordMatrixUtil_lineEquationVectorWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin], [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx]);
  }
  return GeogebraCommonKernelMatrixCoordMatrixUtil_lineEquationVectorWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix_([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin], [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx], m);
}

- (GeogebraCommonKernelMatrixCoords *)getStartInhomCoords {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin])) getInhomCoordsInSameDimension];
}

- (GeogebraCommonKernelMatrixCoords *)getEndInhomCoords {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getPointWithDouble:1])) getInhomCoordsInSameDimension];
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getEndPoint {
  return endPoint_;
}

- (jboolean)isIntersection {
  return isIntersection__;
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) addInsideWithGeogebraCommonKernelMatrixCoords:v];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx]];
}

- (JavaUtilArrayList *)getPointsOnLine {
  return pointsOnLine_;
}

- (void)setPointsOnLineWithJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_pointsOnLine_(self, points);
}

- (void)addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (pointsOnLine_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_setAndConsume_pointsOnLine_(self, new_JavaUtilArrayList_init());
  if (![((JavaUtilArrayList *) nil_chk(pointsOnLine_)) containsWithId:p]) [pointsOnLine_ addWithId:p];
}

- (jdouble)distanceWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  jdouble dist;
  GeogebraCommonKernelMatrixCoords *cVector = [((GeogebraCommonKernelMatrixCoords *) nil_chk([self getDirectionInD3])) crossProductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) getDirectionInD3]];
  GeogebraCommonKernelMatrixCoords *diffPoints = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([self getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([g getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension]];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(cVector)) isZero]) {
    GeogebraCommonKernelMatrixCoords *n = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(diffPoints)) crossProductWithGeogebraCommonKernelMatrixCoords:[self getDirectionInD3]])) crossProductWithGeogebraCommonKernelMatrixCoords:[self getDirectionInD3]];
    dist = JavaLangMath_absWithDouble_([diffPoints dotproductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(n)) normalize]]);
  }
  else {
    dist = JavaLangMath_absWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(diffPoints)) dotproductWithGeogebraCommonKernelMatrixCoords:[cVector normalize]]);
  }
  return dist;
}

- (void)setToImplicit {
}

- (void)setToExplicit {
}

- (void)setToParametricWithNSString:(NSString *)parameter {
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin]] withGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx]]];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  if (tmpMatrix4x4_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpMatrix4x4_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  }
  else {
    [tmpMatrix4x4_ setWithInt:1 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:2 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:3 withInt:4 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:1 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:2 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:3 withDouble:0];
    [tmpMatrix4x4_ setWithInt:4 withInt:4 withDouble:1];
  }
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) setWithInt:1 withInt:1 withDouble:a00];
  [tmpMatrix4x4_ setWithInt:1 withInt:2 withDouble:a01];
  [tmpMatrix4x4_ setWithInt:1 withInt:3 withDouble:a02];
  [tmpMatrix4x4_ setWithInt:2 withInt:1 withDouble:a10];
  [tmpMatrix4x4_ setWithInt:2 withInt:2 withDouble:a11];
  [tmpMatrix4x4_ setWithInt:2 withInt:3 withDouble:a12];
  [tmpMatrix4x4_ setWithInt:3 withInt:1 withDouble:a20];
  [tmpMatrix4x4_ setWithInt:3 withInt:2 withDouble:a21];
  [tmpMatrix4x4_ setWithInt:3 withInt:3 withDouble:a22];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin]] withGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx]]];
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  jdouble z = [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) getZ];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
  jdouble vz = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getZ];
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [o getX];
  jdouble y = [o getY];
  jdouble w = [o getW];
  GeogebraCommonKernelMatrixCoords *oRot = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x * cos - y * sin, x * sin + y * cos, z, w) autorelease];
  jdouble vx = [v getX];
  jdouble vy = [v getY];
  jdouble vw = [v getW];
  GeogebraCommonKernelMatrixCoords *vRot = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(vx * cos - vy * sin, vx * sin + vy * cos, vz, vw) autorelease];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:oRot withGeogebraCommonKernelMatrixCoords:vRot];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  jdouble z = [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) getZ];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
  jdouble vz = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getZ];
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [o getX];
  jdouble y = [o getY];
  jdouble w = [o getW];
  GeogebraCommonKernelMatrixCoords *Q = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  jdouble qx = w * [((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) getX];
  jdouble qy = w * [Q getY];
  GeogebraCommonKernelMatrixCoords *oRot = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((x - qx) * cos + (qy - y) * sin + qx, (x - qx) * sin + (y - qy) * cos + qy, z, w) autorelease];
  jdouble vx = [v getX];
  jdouble vy = [v getY];
  jdouble vw = [v getW];
  GeogebraCommonKernelMatrixCoords *vRot = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(vx * cos - vy * sin, vx * sin + vy * cos, vz, vw) autorelease];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:oRot withGeogebraCommonKernelMatrixCoords:vRot];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *vn = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin])) mulWithDouble:-1];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(Q)) mulWithDouble:2]];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx])) mulWithDouble:-1]];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn withGeogebraCommonKernelMatrixCoords:tmpCoords1_ withDoubleArray:nil];
  point = [point mulWithDouble:-1];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) mulWithDouble:2]];
  jdouble l = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) getNorm];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([vn mulWithDouble:2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:vn] / (l * l)])) addWithGeogebraCommonKernelMatrixCoords:[v mulWithDouble:-1]]];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  if (tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectPlaneWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
  [point mulInsideWithDouble:-1];
  [point addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) mulInsideWithDouble:2]];
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([plane getDirectionInD3])) normalized];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
  if (tmpCoords2_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  }
  [self setCoordWithGeogebraCommonKernelMatrixCoords:point withGeogebraCommonKernelMatrixCoords:[tmpCoords1_ setAddWithGeogebraCommonKernelMatrixCoords:v withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords2_)) setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:-2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:vn]]]];
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  jdouble r = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble];
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin])) mulWithDouble:r];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) addInsideWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(S)) mulWithDouble:1 - r]];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx])) mulWithDouble:r]];
}

- (void)dealloc {
  RELEASE_(coordsys_);
  RELEASE_(startPoint_);
  RELEASE_(endPoint_);
  RELEASE_(pointsOnLine_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpCoords1_);
  RELEASE_(tmpCoords2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoCoordSys1D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoCoordSys1D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "GeoCoordSys1D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "GeoCoordSys1D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "GeoCoordSys1D", NULL, 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setCoordFromPointsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setCoordFromPoints", "V", 0x1, NULL, NULL },
    { "setCoordWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setCoord", "V", 0x1, NULL, NULL },
    { "setLineThroughWithDouble:withDouble:", "setLineThrough", "V", 0x11, NULL, NULL },
    { "setCoordWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setCoord", "V", 0x1, NULL, NULL },
    { "setCoordWithGeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D:", "setCoord", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "createWithGeogebraCommonKernelConstruction:", "create", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x404, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x11, NULL, NULL },
    { "getPointWithDouble:", "getPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPointInDWithInt:withDouble:", "getPointInD", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getUnit", NULL, "D", 0x1, NULL, NULL },
    { "getMainDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getDirectionForEquation", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:", "getParamOnLine", "D", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "isOnFullLineWithGeogebraCommonKernelMatrixCoords:withDouble:", "isOnFullLine", "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "isValidCoordWithDouble:", "isValidCoord", "Z", 0x401, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getCoordSys", NULL, "Lgeogebra.common.kernel.Matrix.CoordSys;", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:", "getCartesianEquationVector", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEndInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getEndPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "isIntersection", NULL, "Z", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x11, NULL, NULL },
    { "getPointsOnLine", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "setPointsOnLineWithJavaUtilArrayList:", "setPointsOnLine", "V", 0x11, NULL, NULL },
    { "addPointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:", "addPointOnLine", "V", 0x11, NULL, NULL },
    { "distanceWithGeogebraCommonKernelKernelNDGeoLineND:", "distance", "D", 0x11, NULL, NULL },
    { "setToImplicit", NULL, "V", 0x1, NULL, NULL },
    { "setToExplicit", NULL, "V", 0x1, NULL, NULL },
    { "setToParametricWithNSString:", "setToParametric", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x12, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coordsys_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
    { "startPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "endPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "isIntersection__", "isIntersection", 0x2, "Z", NULL, NULL,  },
    { "pointsOnLine_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "tmpCoords1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D = { 2, "GeoCoordSys1D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x401, 63, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, GeogebraCommonKernelConstruction *c, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isIntersection__ = isIntersection;
  [self setConstructionDefaults];
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_setAndConsume_coordsys_(self, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(1));
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelMatrixCoords *O, GeogebraCommonKernelMatrixCoords *V) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setCoordWithGeogebraCommonKernelMatrixCoords:O withGeogebraCommonKernelMatrixCoords:V];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> I) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, c, O, I, NO);
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> I, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  [self setCoordWithGeogebraCommonKernelKernelNDGeoPointND:O withGeogebraCommonKernelKernelNDGeoPointND:I];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn) {
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero]) {
    [self setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *vn2 = [vn normalized];
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getOrigin];
  if (self->tmpCoords1_ == nil) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_tmpCoords1_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:vn withGeogebraCommonKernelMatrixCoords:self->tmpCoords1_ withDoubleArray:nil];
  GeogebraCommonKernelMatrixCoords *v1 = [point subWithGeogebraCommonKernelMatrixCoords:self->tmpCoords1_];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self getCoordSys])) getVx];
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  GeogebraCommonKernelMatrixCoords *v2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn2)) crossProduct4WithGeogebraCommonKernelMatrixCoords:v1];
  GeogebraCommonKernelMatrixCoords *oRot = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->tmpCoords1_)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) mulWithDouble:cos]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v2)) mulWithDouble:sin]];
  v2 = [vn2 crossProduct4WithGeogebraCommonKernelMatrixCoords:v];
  v1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v2)) crossProduct4WithGeogebraCommonKernelMatrixCoords:vn2];
  GeogebraCommonKernelMatrixCoords *vRot = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) mulWithDouble:cos])) addWithGeogebraCommonKernelMatrixCoords:[v2 mulWithDouble:sin]])) addWithGeogebraCommonKernelMatrixCoords:[vn2 mulWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:vn2]]];
  [self setCoordWithGeogebraCommonKernelMatrixCoords:oRot withGeogebraCommonKernelMatrixCoords:vRot];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D)
