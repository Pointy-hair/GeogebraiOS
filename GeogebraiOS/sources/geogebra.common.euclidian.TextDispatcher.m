//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/TextDispatcher.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/TextDispatcher.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoArcLength.h"
#include "geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonEuclidianTextDispatcher () {
 @public
  GeogebraCommonEuclidianEuclidianView *view_;
}

- (NSString *)descriptionPointsWithNSString:(NSString *)type
     withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly;

- (GeogebraCommonKernelGeosGeoText *)createDynamicTextWithNSString:(NSString *)type
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)object
                      withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)value;

+ (void)makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)geo;

- (id<GeogebraCommonKernelKernelNDGeoPointND>)MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q;

- (id<GeogebraCommonKernelKernelNDGeoPointND>)ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                                        withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)g;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianTextDispatcher, view_, GeogebraCommonEuclidianEuclidianView *)

__attribute__((unused)) static NSString *GeogebraCommonEuclidianTextDispatcher_descriptionPointsWithNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonEuclidianTextDispatcher *self, NSString *type, GeogebraCommonKernelGeosGeoPolygon *poly);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonEuclidianTextDispatcher_createDynamicTextWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonEuclidianTextDispatcher *self, NSString *type, GeogebraCommonKernelGeosGeoElement *object, id<GeogebraCommonKernelKernelNDGeoElementND> value);

__attribute__((unused)) static void GeogebraCommonEuclidianTextDispatcher_makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND_(id<GeogebraCommonKernelKernelNDGeoElementND> geo);

__attribute__((unused)) static id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianTextDispatcher_MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianTextDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q);

__attribute__((unused)) static id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianTextDispatcher_ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(GeogebraCommonEuclidianTextDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelPath> g);

@implementation GeogebraCommonEuclidianTextDispatcher

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
          withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonEuclidianTextDispatcher_initWithGeogebraCommonKernelKernel_withGeogebraCommonEuclidianEuclidianView_(self, kernel, view);
  return self;
}

+ (NSString *)removeUnderscoresWithNSString:(NSString *)label {
  return GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(label);
}

- (void)setNoPointLocWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text
                             withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setAbsoluteScreenLocActiveWithBoolean:YES];
  [text setAbsoluteScreenLocWithInt:((GeogebraCommonAwtGPoint *) nil_chk(loc))->x_ withInt:loc->y_];
}

- (IOSObjectArray *)getAreaTextWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)conic
                           withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)area
                                          withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  GeogebraCommonKernelGeosGeoText *text = [self createDynamicTextForMouseLocWithNSString:@"AreaOfA" withGeogebraCommonKernelGeosGeoElement:conic withGeogebraCommonKernelKernelNDGeoElementND:area withGeogebraCommonAwtGPoint:loc];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(conic)) isLabelSet]) {
    if (![((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(area)) isLabelSet]) {
      [area setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getCommandWithNSString:@"Area"]), [conic getLabelSimple]))];
    }
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Text"], [conic getLabelSimple]))];
  }
  return [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (NSString *)descriptionPointsWithNSString:(NSString *)type
     withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  return GeogebraCommonEuclidianTextDispatcher_descriptionPointsWithNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, type, poly);
}

- (GeogebraCommonKernelGeosGeoText *)createDynamicTextWithNSString:(NSString *)type
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)object
                      withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)value {
  return GeogebraCommonEuclidianTextDispatcher_createDynamicTextWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoElementND_(self, type, object, value);
}

- (GeogebraCommonKernelGeosGeoText *)createDynamicTextForMouseLocWithNSString:(NSString *)type
                                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)object
                                 withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)value
                                                  withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  GeogebraCommonKernelGeosGeoText *text = GeogebraCommonEuclidianTextDispatcher_createDynamicTextWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoElementND_(self, type, object, value);
  if (text != nil) {
    id<GeogebraCommonKernelKernelNDGeoPointND> P = nil;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(object)) isRegion]) {
      P = [self getPointForDynamicTextWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>) check_protocol_cast(object, @protocol(GeogebraCommonKernelRegion)) withGeogebraCommonAwtGPoint:loc];
    }
    else if ([object isPath]) {
      P = [self getPointForDynamicTextWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>) check_protocol_cast(object, @protocol(GeogebraCommonKernelPath)) withGeogebraCommonAwtGPoint:loc];
    }
    else {
      P = [self getPointForDynamicTextWithGeogebraCommonAwtGPoint:loc];
    }
    if (P != nil) {
      [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class])) setAuxiliaryObjectWithBoolean:YES];
      [P setEuclidianVisibleWithBoolean:NO];
      [P updateRepaint];
      @try {
        [text setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:P];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        return nil;
      }
    }
    else {
      [self setNoPointLocWithGeogebraCommonKernelGeosGeoText:text withGeogebraCommonAwtGPoint:loc];
    }
    [text setBackgroundColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_WHITE_()];
    [text updateRepaint];
  }
  return text;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPointForDynamicTextWithGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)object
                                                                       withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  jdouble rwx = 0, rwy = 0;
  if (loc != nil) {
    rwx = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:loc->x_];
    rwy = [view_ toRealWorldCoordYWithDouble:loc->y_];
  }
  else if ([object isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) {
    IOSObjectArray *pts = [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(object, [GeogebraCommonKernelGeosGeoPolygon class])))) getPointsND];
    {
      IOSObjectArray *a__ = pts;
      id<GeogebraCommonKernelKernelNDGeoPointND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      id<GeogebraCommonKernelKernelNDGeoPointND> const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id<GeogebraCommonKernelKernelNDGeoPointND> pt = *b__++;
        rwx += [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pt)) getCoordsInD2])) getX];
        rwy += [((GeogebraCommonKernelMatrixCoords *) nil_chk([pt getCoordsInD2])) getY];
      }
    }
    rwx = rwx / ((IOSObjectArray *) nil_chk(pts))->size_;
    rwy = rwy / pts->size_;
  }
  else if ([object isKindOfClass:[GeogebraCommonKernelKernelNDGeoConicND class]]) {
    rwx = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(object, [GeogebraCommonKernelKernelNDGeoConicND class])))) getTranslationVector])) getX];
    rwy = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(object, [GeogebraCommonKernelKernelNDGeoConicND class])))) getTranslationVector])) getY];
  }
  return [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) createNewPointWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Point"], [((id<GeogebraCommonKernelRegion>) nil_chk(object)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) withBoolean:NO withGeogebraCommonKernelRegion:object withDouble:rwx withDouble:rwy withDouble:0 withBoolean:NO withBoolean:NO];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPointForDynamicTextWithGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)object
                                                                     withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  return [((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getEuclidianController])) getCompanion])) createNewPointWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Point"], [((id<GeogebraCommonKernelPath>) nil_chk(object)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) withBoolean:NO withGeogebraCommonKernelPath:object withDouble:[view_ toRealWorldCoordXWithDouble:((GeogebraCommonAwtGPoint *) nil_chk(loc))->x_] withDouble:[view_ toRealWorldCoordYWithDouble:loc->y_] withDouble:0 withBoolean:NO withBoolean:NO];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPointForDynamicTextWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  return nil;
}

- (GeogebraCommonKernelGeosGeoText *)createDistanceTextWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)geoA
                                                       withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)geoB
                                                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)textCorner
                                                             withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)length {
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  @try {
    NSString *strText = @"";
    jboolean useLabels = [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geoA)) isLabelSet] && [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geoB)) isLabelSet];
    if (useLabels) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(length)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$$", GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getCommandWithNSString:@"Distance"]), [geoA getLabelWithGeogebraCommonKernelStringTemplate:tpl], [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geoB)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]))];
      strText = JreStrcat("$$$$$$", @"Name[", [geoA getLabelWithGeogebraCommonKernelStringTemplate:tpl], @"] + Name[", [geoB getLabelWithGeogebraCommonKernelStringTemplate:tpl], @"] + \" = \" + ", [length getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
      GeogebraCommonEuclidianTextDispatcher_makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND_(geoA);
      GeogebraCommonEuclidianTextDispatcher_makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND_(geoB);
      [geoA updateRepaint];
      [geoB updateRepaint];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(length)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getCommandWithNSString:@"Distance"]))];
      strText = JreStrcat("$$", @"\"\"", [length getLabelWithGeogebraCommonKernelStringTemplate:tpl]);
    }
    GeogebraCommonKernelGeosGeoText *text = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) evaluateToTextWithNSString:strText withBoolean:YES withBoolean:YES];
    if (useLabels) {
      [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$$", [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Text"], [geoA getLabelWithGeogebraCommonKernelStringTemplate:tpl], [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geoB)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]))];
    }
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:textCorner];
    [text setBackgroundColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_WHITE_()];
    [text updateRepaint];
    return text;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

+ (void)makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)geo {
  GeogebraCommonEuclidianTextDispatcher_makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND_(geo);
}

- (IOSObjectArray *)createCircumferenceTextWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                                                          withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)loc {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) isGeoConicPart]) {
    GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
    GeogebraCommonKernelAlgosAlgoArcLength *algo = [new_GeogebraCommonKernelAlgosAlgoArcLength_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicPartND_(cons, nil, (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(conic, [GeogebraCommonKernelGeosGeoConicPart class])) autorelease];
    GeogebraCommonKernelGeosGeoNumeric *arcLength = [algo getArcLength];
    GeogebraCommonKernelGeosGeoText *text = [self createDynamicTextForMouseLocWithNSString:@"ArcLengthOfA" withGeogebraCommonKernelGeosGeoElement:conic withGeogebraCommonKernelKernelNDGeoElementND:arcLength withGeogebraCommonAwtGPoint:loc];
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"Text"], [conic getLabelSimple]))];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  GeogebraCommonKernelGeosGeoNumeric *circumFerence = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) CircumferenceWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:conic];
  GeogebraCommonKernelGeosGeoText *text = [self createDynamicTextForMouseLocWithNSString:@"CircumferenceOfA" withGeogebraCommonKernelGeosGeoElement:conic withGeogebraCommonKernelKernelNDGeoElementND:circumFerence withGeogebraCommonAwtGPoint:loc];
  if ([conic isLabelSet]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(circumFerence)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getCommandWithNSString:@"Circumference"]), [conic getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]))];
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [l10n_ getPlainWithNSString:@"Text"], [conic getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]))];
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)createPerimeterTextWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly
                                                  withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc {
  GeogebraCommonKernelGeosGeoNumeric *perimeter = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) PerimeterWithNSString:nil withGeogebraCommonKernelGeosGeoPolygon:poly];
  GeogebraCommonKernelGeosGeoText *text = [self createDynamicTextForMouseLocWithNSString:@"PerimeterOfA" withGeogebraCommonKernelGeosGeoElement:poly withGeogebraCommonKernelKernelNDGeoElementND:perimeter withGeogebraCommonAwtGPoint:mouseLoc];
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) isLabelSet]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(perimeter)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getCommandWithNSString:@"Perimeter"]), [poly getLabelSimple]))];
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLabelWithNSString:GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(JreStrcat("$$", [l10n_ getPlainWithNSString:@"Text"], [poly getLabelSimple]))];
  }
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)createSlopeTextWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line
                                           withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouseLoc {
  GeogebraCommonKernelGeosGeoNumeric *slope;
  NSString *label = [((GeogebraCommonMainLocalization *) nil_chk(l10n_)) getPlainWithNSString:@"ExplicitLineGradient"];
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:label] != nil) {
    jint i = 1;
    while ([kernel_ lookupLabelWithNSString:i > 9 ? JreStrcat("$$IC", label, @"_{", i, '}') : JreStrcat("$CI", label, '_', i)] != nil) {
      i++;
    }
    label = i > 9 ? JreStrcat("$$IC", label, @"_{", i, '}') : JreStrcat("$CI", label, '_', i);
  }
  slope = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([kernel_ getAlgoDispatcher])) SlopeWithNSString:label withGeogebraCommonKernelGeosGeoLine:line];
  if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope)) isLabelVisible]) {
    [slope setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  }
  else {
    [slope setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_VALUE];
  }
  [slope setLabelVisibleWithBoolean:YES];
  [slope updateRepaint];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ slope } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement *)createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point1
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point2 {
  GeogebraCommonKernelGeosGeoNumeric *length = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DistanceWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:point1 withGeogebraCommonKernelKernelNDGeoPointND:point2];
  id<GeogebraCommonKernelKernelNDGeoPointND> midPoint = GeogebraCommonEuclidianTextDispatcher_MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, point1, point2);
  return [self createDistanceTextWithGeogebraCommonKernelKernelNDGeoElementND:point1 withGeogebraCommonKernelKernelNDGeoElementND:point2 withGeogebraCommonKernelKernelNDGeoPointND:midPoint withGeogebraCommonKernelGeosGeoNumeric:length];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  return GeogebraCommonEuclidianTextDispatcher_MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, P, Q);
}

- (GeogebraCommonKernelGeosGeoElement *)createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                                           withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelGeosGeoNumeric *length = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) DistanceWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class])];
  id<GeogebraCommonKernelKernelNDGeoPointND> midPoint = GeogebraCommonEuclidianTextDispatcher_MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, point, GeogebraCommonEuclidianTextDispatcher_ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(self, point, (id<GeogebraCommonKernelPath>) check_protocol_cast(line, @protocol(GeogebraCommonKernelPath))));
  return [self createDistanceTextWithGeogebraCommonKernelKernelNDGeoElementND:point withGeogebraCommonKernelKernelNDGeoElementND:line withGeogebraCommonKernelKernelNDGeoPointND:midPoint withGeogebraCommonKernelGeosGeoNumeric:length];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                                        withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)g {
  return GeogebraCommonEuclidianTextDispatcher_ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(self, P, g);
}

- (void)dealloc {
  RELEASE_(l10n_);
  RELEASE_(kernel_);
  RELEASE_(view_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonEuclidianEuclidianView:", "TextDispatcher", NULL, 0x1, NULL, NULL },
    { "removeUnderscoresWithNSString:", "removeUnderscores", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "setNoPointLocWithGeogebraCommonKernelGeosGeoText:withGeogebraCommonAwtGPoint:", "setNoPointLoc", "V", 0x4, NULL, NULL },
    { "getAreaTextWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonAwtGPoint:", "getAreaText", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "descriptionPointsWithNSString:withGeogebraCommonKernelGeosGeoPolygon:", "descriptionPoints", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "createDynamicTextWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoElementND:", "createDynamicText", "Lgeogebra.common.kernel.geos.GeoText;", 0x2, NULL, NULL },
    { "createDynamicTextForMouseLocWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoElementND:withGeogebraCommonAwtGPoint:", "createDynamicTextForMouseLoc", "Lgeogebra.common.kernel.geos.GeoText;", 0x4, NULL, NULL },
    { "getPointForDynamicTextWithGeogebraCommonKernelRegion:withGeogebraCommonAwtGPoint:", "getPointForDynamicText", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getPointForDynamicTextWithGeogebraCommonKernelPath:withGeogebraCommonAwtGPoint:", "getPointForDynamicText", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getPointForDynamicTextWithGeogebraCommonAwtGPoint:", "getPointForDynamicText", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "createDistanceTextWithGeogebraCommonKernelKernelNDGeoElementND:withGeogebraCommonKernelKernelNDGeoElementND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumeric:", "createDistanceText", "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND:", "makeLabelNameVisible", "V", 0xa, NULL, NULL },
    { "createCircumferenceTextWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonAwtGPoint:", "createCircumferenceText", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createPerimeterTextWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonAwtGPoint:", "createPerimeterText", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createSlopeTextWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonAwtGPoint:", "createSlopeText", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createDistanceText", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "MidpointForDistance", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x12, NULL, NULL },
    { "createDistanceTextWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "createDistanceText", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelPath:", "ClosestPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x12, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "l10n_", NULL, 0x4, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "view_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianTextDispatcher = { 2, "TextDispatcher", "geogebra.common.euclidian", NULL, 0x1, 19, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianTextDispatcher;
}

@end

void GeogebraCommonEuclidianTextDispatcher_initWithGeogebraCommonKernelKernel_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianTextDispatcher *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonEuclidianEuclidianView *view) {
  NSObject_init(self);
  GeogebraCommonEuclidianTextDispatcher_set_kernel_(self, kernel);
  GeogebraCommonEuclidianTextDispatcher_set_view_(self, view);
  GeogebraCommonEuclidianTextDispatcher_set_l10n_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getLocalization]);
}

GeogebraCommonEuclidianTextDispatcher *new_GeogebraCommonEuclidianTextDispatcher_initWithGeogebraCommonKernelKernel_withGeogebraCommonEuclidianEuclidianView_(GeogebraCommonKernelKernel *kernel, GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonEuclidianTextDispatcher *self = [GeogebraCommonEuclidianTextDispatcher alloc];
  GeogebraCommonEuclidianTextDispatcher_initWithGeogebraCommonKernelKernel_withGeogebraCommonEuclidianEuclidianView_(self, kernel, view);
  return self;
}

NSString *GeogebraCommonEuclidianTextDispatcher_removeUnderscoresWithNSString_(NSString *label) {
  GeogebraCommonEuclidianTextDispatcher_initialize();
  return [((NSString *) nil_chk(label)) replaceAll:@"_" withReplacement:@""];
}

NSString *GeogebraCommonEuclidianTextDispatcher_descriptionPointsWithNSString_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonEuclidianTextDispatcher *self, NSString *type, GeogebraCommonKernelGeosGeoPolygon *poly) {
  JavaLangStringBuilder *descText = [new_JavaLangStringBuilder_init() autorelease];
  IOSObjectArray *points = nil;
  if ([[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygon class]]) {
    points = [((GeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast([poly getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolygon class])))) getPoints];
  }
  if (points != nil) {
    [descText appendWithNSString:@" \""];
    jboolean allLabelsSet = YES;
    for (jint i = 0; i < points->size_; i++) {
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) isLabelSet]) {
        [descText appendWithNSString:JreStrcat("$$C", @" + Name[", [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], ']')];
      }
      else {
        allLabelsSet = NO;
        i = points->size_;
      }
    }
    if (allLabelsSet) {
      [descText appendWithNSString:@" + \""];
      for (jint i = 0; i < points->size_; i++) {
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) setLabelVisibleWithBoolean:YES];
        [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(points, i))) updateRepaint];
      }
    }
    else {
      return [((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getPlainWithNSString:type withNSString:JreStrcat("$$$", @"\" + Name[", [poly getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @"] + \"")];
    }
  }
  else {
    return [((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getPlainWithNSString:type withNSString:JreStrcat("$$$", @"\" + Name[", [poly getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @"] + \"")];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getPlainWithNSString:type withNSString:[descText description]];
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonEuclidianTextDispatcher_createDynamicTextWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoElementND_(GeogebraCommonEuclidianTextDispatcher *self, NSString *type, GeogebraCommonKernelGeosGeoElement *object, id<GeogebraCommonKernelKernelNDGeoElementND> value) {
  @try {
    NSString *descText;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(object)) isGeoPolygon]) {
      descText = GeogebraCommonEuclidianTextDispatcher_descriptionPointsWithNSString_withGeogebraCommonKernelGeosGeoPolygon_(self, type, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(object, [GeogebraCommonKernelGeosGeoPolygon class]));
    }
    else {
      descText = [((GeogebraCommonMainLocalization *) nil_chk(self->l10n_)) getPlainWithNSString:type withNSString:JreStrcat("$$$", @"\" + Name[", [object getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @"] + \"")];
    }
    NSString *dynText = JreStrcat("C$$$", '"', descText, @" = \" + ", [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(value)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    GeogebraCommonKernelGeosGeoText *text = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getAlgebraProcessor])) evaluateToTextWithNSString:dynText withBoolean:YES withBoolean:YES];
    return text;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

void GeogebraCommonEuclidianTextDispatcher_makeLabelNameVisibleWithGeogebraCommonKernelKernelNDGeoElementND_(id<GeogebraCommonKernelKernelNDGeoElementND> geo) {
  GeogebraCommonEuclidianTextDispatcher_initialize();
  if (![((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(geo)) isLabelVisible]) {
    if ([geo getLabelMode] != GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE) [geo setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME];
    [geo setLabelVisibleWithBoolean:YES];
  }
  else {
    if ([geo getLabelMode] == GeogebraCommonKernelGeosGeoElement_LABEL_VALUE) [geo setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  }
}

id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianTextDispatcher_MidpointForDistanceWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianTextDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  return (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonEuclidianEuclidianControllerCompanion *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getEuclidianController])) getCompanion])) midpointWithGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoPointND:Q], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
}

id<GeogebraCommonKernelKernelNDGeoPointND> GeogebraCommonEuclidianTextDispatcher_ClosestPointWithGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelPath_(GeogebraCommonEuclidianTextDispatcher *self, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelPath> g) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelAlgosAlgoClosestPoint *cp = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([self->kernel_ getAlgoDispatcher])) getNewAlgoClosestPointWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelPath:g withGeogebraCommonKernelKernelNDGeoPointND:P];
  [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  return [((GeogebraCommonKernelAlgosAlgoClosestPoint *) nil_chk(cp)) getP];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianTextDispatcher)
