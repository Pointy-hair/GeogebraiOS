//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/data/DataAnalysisController.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/data/DataAnalysisController.h"
#include "geogebra/common/gui/view/data/DataAnalysisModel.h"
#include "geogebra/common/gui/view/data/DataSource.h"
#include "geogebra/common/gui/view/data/StatGeo.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/App.h"
#include "java/io/PrintStream.h"
#include "java/lang/Double.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGuiViewDataDataAnalysisController () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonKernelConstruction *cons_;
  GeogebraCommonGuiViewDataStatGeo *statGeo_;
  GeogebraCommonGuiViewDataDataSource *dataSource_;
  JavaUtilArrayList *dataArray_;
  GeogebraCommonKernelGeosGeoList *dataSelected_;
  jboolean leftToRight_;
  jboolean isValidData__;
  GeogebraCommonKernelGeosGeoElement *geoRegression_;
  GeogebraCommonGuiViewDataDataAnalysisModel *model_;
}

- (jboolean)isValidListWithJavaUtilArrayList:(JavaUtilArrayList *)list;

- (void)loadDataPanelArray;

- (void)debugDataSelected;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, statGeo_, GeogebraCommonGuiViewDataStatGeo *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, dataSource_, GeogebraCommonGuiViewDataDataSource *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, dataArray_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, dataSelected_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, geoRegression_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewDataDataAnalysisController, model_, GeogebraCommonGuiViewDataDataAnalysisModel *)

__attribute__((unused)) static jboolean GeogebraCommonGuiViewDataDataAnalysisController_isValidListWithJavaUtilArrayList_(GeogebraCommonGuiViewDataDataAnalysisController *self, JavaUtilArrayList *list);

__attribute__((unused)) static void GeogebraCommonGuiViewDataDataAnalysisController_loadDataPanelArray(GeogebraCommonGuiViewDataDataAnalysisController *self);

@implementation GeogebraCommonGuiViewDataDataAnalysisController

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiViewDataDataAnalysisController_initWithGeogebraCommonMainApp_(self, app);
  return self;
}

- (jint)getMode {
  return [((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) getMode];
}

- (JavaUtilArrayList *)getDataArray {
  return dataArray_;
}

- (GeogebraCommonKernelGeosGeoList *)getDataSelected {
  return dataSelected_;
}

- (jboolean)isValidData {
  return isValidData__;
}

- (void)setValidDataWithBoolean:(jboolean)isValidData {
  if (isValidData == NO) {
  }
  self->isValidData__ = isValidData;
}

- (void)setLeftToRightWithBoolean:(jboolean)leftToRight {
  self->leftToRight_ = leftToRight;
}

- (jboolean)isLeftToRight {
  return leftToRight_;
}

- (GeogebraCommonKernelGeosGeoElement *)getRegressionModel {
  return geoRegression_;
}

- (void)setRegressionModelWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)regressionModel {
  GeogebraCommonGuiViewDataDataAnalysisController_set_geoRegression_(self, regressionModel);
}

- (GeogebraCommonGuiViewDataDataSource *)getDataSource {
  return dataSource_;
}

- (void)setDataSourceWithGeogebraCommonGuiViewDataDataSource:(GeogebraCommonGuiViewDataDataSource *)dataSource {
  GeogebraCommonGuiViewDataDataAnalysisController_set_dataSource_(self, dataSource);
}

- (jboolean)isInDataSourceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (dataSource_ == nil) {
    return NO;
  }
  return [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) isInDataSourceWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)loadDataListsWithBoolean:(jboolean)doCopy {
  if (dataSelected_ != nil) [dataSelected_ remove];
  if (dataSource_ == nil) {
    [self setValidDataWithBoolean:NO];
    return;
  }
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  switch ([self getMode]) {
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_ONEVAR:
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_REGRESSION:
    list = [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) toGeoListWithInt:[self getMode] withBoolean:leftToRight_ withBoolean:doCopy withInt:0];
    break;
    case GeogebraCommonGuiViewDataDataAnalysisModel_MODE_MULTIVAR:
    list = [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) toGeoListAllWithInt:[self getMode] withBoolean:leftToRight_ withBoolean:doCopy];
    break;
  }
  if (!GeogebraCommonGuiViewDataDataAnalysisController_isValidListWithJavaUtilArrayList_(self, list)) {
    [self setValidDataWithBoolean:NO];
    return;
  }
  [self setValidDataWithBoolean:YES];
  if ([((JavaUtilArrayList *) nil_chk(list)) size] == 1) {
    GeogebraCommonGuiViewDataDataAnalysisController_set_dataSelected_(self, [list getWithInt:0]);
  }
  else {
    GeogebraCommonGuiViewDataDataAnalysisController_setAndConsume_dataSelected_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_));
    for (GeogebraCommonKernelGeosGeoList * __strong geoList in list) {
      [dataSelected_ addWithGeogebraCommonKernelGeosGeoElement:geoList];
    }
  }
  GeogebraCommonGuiViewDataDataAnalysisController_loadDataPanelArray(self);
}

- (jboolean)isValidListWithJavaUtilArrayList:(JavaUtilArrayList *)list {
  return GeogebraCommonGuiViewDataDataAnalysisController_isValidListWithJavaUtilArrayList_(self, list);
}

- (void)loadDataPanelArray {
  GeogebraCommonGuiViewDataDataAnalysisController_loadDataPanelArray(self);
}

- (void)updateSelectedDataListWithInt:(jint)index
                          withBoolean:(jboolean)doAdd {
  GeogebraCommonKernelGeosGeoElement *geo = [((JavaUtilArrayList *) nil_chk(dataArray_)) getWithInt:index];
  if (doAdd) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataSelected_)) addWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataSelected_)) removeWithGeogebraCommonKernelGeosGeoElement:geo];
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataSelected_)) updateRepaint];
  [self updateAllPanelsWithBoolean:NO];
  [self updateRegressionPanel];
}

- (void)updateRegressionPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)debugDataSelected {
  if (dataSelected_ == nil) {
    return;
  }
  [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:@"=========================="];
  [JavaLangSystem_get_out_() printlnWithNSString:@"dataSelected: "];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataSelected_)) size]; i++) {
    [JavaLangSystem_get_out_() printlnWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([dataSelected_ getWithInt:i])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  [JavaLangSystem_get_out_() printlnWithNSString:@"=========================="];
}

- (IOSObjectArray *)getDataTitles {
  return [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) getTitles];
}

- (void)swapXY {
  leftToRight_ = !leftToRight_;
  [self updateDataAnalysisView];
  [self clearPredictionPanel];
}

- (void)clearPredictionPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)updateDataAnalysisView {
  [self updateDataLists];
  if (isValidData__) {
    if ([((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) isRegressionMode]) {
      [self setRegressionGeo];
    }
    [self updateAllPanelsWithBoolean:YES];
  }
  else {
  }
  [((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) updateGUI];
}

- (void)updateDataLists {
  [self removeStatGeos];
  [self loadDataListsWithBoolean:YES];
}

- (void)updateAllPanelsWithBoolean:(jboolean)doRedefine {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)handleRemovedDataGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([self isInDataSourceWithGeogebraCommonKernelGeosGeoElement:geo]) {
    [((GeogebraCommonGuiViewDataDataSource *) nil_chk(dataSource_)) clearData];
    [self setValidDataWithBoolean:NO];
    [self updateDataAnalysisView];
  }
}

- (void)setRegressionGeo {
  [self removeRegressionGeo];
  GeogebraCommonGuiViewDataDataAnalysisController_set_geoRegression_(self, [((GeogebraCommonGuiViewDataStatGeo *) nil_chk(statGeo_)) createRegressionPlotWithGeogebraCommonKernelGeosGeoList:dataSelected_ withGeogebraCommonGuiViewDataDataAnalysisModel_RegressionEnum:[((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) getRegressionMode] withInt:[((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) getRegressionOrder] withBoolean:NO]);
  [self updateRegressionPanel];
}

- (void)removeRegressionGeo {
  if (geoRegression_ != nil) {
    [geoRegression_ remove];
    [geoRegression_ doRemove];
    GeogebraCommonGuiViewDataDataAnalysisController_set_geoRegression_(self, nil);
  }
}

- (void)disposeDataListSelected {
  GeogebraCommonGuiViewDataDataAnalysisController_set_dataSelected_(self, nil);
}

- (void)removeStatGeos {
  if (dataSelected_ != nil) {
    [dataSelected_ remove];
    GeogebraCommonGuiViewDataDataAnalysisController_set_dataSelected_(self, nil);
  }
  [self removeRegressionGeo];
  [self removeGeos];
}

- (void)removeGeos {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (IOSDoubleArray *)getValueArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(dataList)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [dataList getWithInt:i];
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      [list addWithId:JavaLangDouble_valueOfWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble])];
    }
  }
  IOSDoubleArray *val = [IOSDoubleArray arrayWithLength:[list size]];
  for (jint i = 0; i < [list size]; i++) *IOSDoubleArray_GetRef(val, i) = [((JavaLangDouble *) nil_chk([list getWithInt:i])) doubleValue];
  return val;
}

- (GeogebraCommonGuiViewDataDataAnalysisModel *)getModel {
  return model_;
}

- (void)setModelWithGeogebraCommonGuiViewDataDataAnalysisModel:(GeogebraCommonGuiViewDataDataAnalysisModel *)model {
  GeogebraCommonGuiViewDataDataAnalysisController_set_model_(self, model);
  GeogebraCommonGuiViewDataDataAnalysisController_set_statGeo_(self, [((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk(model)) getStatGeo]);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(cons_);
  RELEASE_(statGeo_);
  RELEASE_(dataSource_);
  RELEASE_(dataArray_);
  RELEASE_(dataSelected_);
  RELEASE_(geoRegression_);
  RELEASE_(model_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:", "DataAnalysisController", NULL, 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x4, NULL, NULL },
    { "getDataArray", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getDataSelected", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "isValidData", NULL, "Z", 0x1, NULL, NULL },
    { "setValidDataWithBoolean:", "setValidData", "V", 0x1, NULL, NULL },
    { "setLeftToRightWithBoolean:", "setLeftToRight", "V", 0x1, NULL, NULL },
    { "isLeftToRight", NULL, "Z", 0x1, NULL, NULL },
    { "getRegressionModel", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setRegressionModelWithGeogebraCommonKernelGeosGeoFunction:", "setRegressionModel", "V", 0x1, NULL, NULL },
    { "getDataSource", NULL, "Lgeogebra.common.gui.view.data.DataSource;", 0x1, NULL, NULL },
    { "setDataSourceWithGeogebraCommonGuiViewDataDataSource:", "setDataSource", "V", 0x4, NULL, NULL },
    { "isInDataSourceWithGeogebraCommonKernelGeosGeoElement:", "isInDataSource", "Z", 0x4, NULL, NULL },
    { "loadDataListsWithBoolean:", "loadDataLists", "V", 0x1, NULL, NULL },
    { "isValidListWithJavaUtilArrayList:", "isValidList", "Z", 0x2, NULL, NULL },
    { "loadDataPanelArray", NULL, "V", 0x2, NULL, NULL },
    { "updateSelectedDataListWithInt:withBoolean:", "updateSelectedDataList", "V", 0x1, NULL, NULL },
    { "updateRegressionPanel", NULL, "V", 0x404, NULL, NULL },
    { "debugDataSelected", NULL, "V", 0x2, NULL, NULL },
    { "getDataTitles", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "swapXY", NULL, "V", 0x1, NULL, NULL },
    { "clearPredictionPanel", NULL, "V", 0x404, NULL, NULL },
    { "updateDataAnalysisView", NULL, "V", 0x1, NULL, NULL },
    { "updateDataLists", NULL, "V", 0x1, NULL, NULL },
    { "updateAllPanelsWithBoolean:", "updateAllPanels", "V", 0x401, NULL, NULL },
    { "handleRemovedDataGeoWithGeogebraCommonKernelGeosGeoElement:", "handleRemovedDataGeo", "V", 0x4, NULL, NULL },
    { "setRegressionGeo", NULL, "V", 0x1, NULL, NULL },
    { "removeRegressionGeo", NULL, "V", 0x1, NULL, NULL },
    { "disposeDataListSelected", NULL, "V", 0x1, NULL, NULL },
    { "removeStatGeos", NULL, "V", 0x1, NULL, NULL },
    { "removeGeos", NULL, "V", 0x404, NULL, NULL },
    { "getValueArrayWithGeogebraCommonKernelGeosGeoList:", "getValueArray", "[D", 0x1, NULL, NULL },
    { "getModel", NULL, "Lgeogebra.common.gui.view.data.DataAnalysisModel;", 0x1, NULL, NULL },
    { "setModelWithGeogebraCommonGuiViewDataDataAnalysisModel:", "setModel", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "statGeo_", NULL, 0x2, "Lgeogebra.common.gui.view.data.StatGeo;", NULL, NULL,  },
    { "dataSource_", NULL, 0x2, "Lgeogebra.common.gui.view.data.DataSource;", NULL, NULL,  },
    { "dataArray_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "dataSelected_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "leftToRight_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isValidData__", "isValidData", 0x2, "Z", NULL, NULL,  },
    { "geoRegression_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "model_", NULL, 0x2, "Lgeogebra.common.gui.view.data.DataAnalysisModel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewDataDataAnalysisController = { 2, "DataAnalysisController", "geogebra.common.gui.view.data", NULL, 0x401, 34, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewDataDataAnalysisController;
}

@end

void GeogebraCommonGuiViewDataDataAnalysisController_initWithGeogebraCommonMainApp_(GeogebraCommonGuiViewDataDataAnalysisController *self, GeogebraCommonMainApp *app) {
  NSObject_init(self);
  self->leftToRight_ = YES;
  self->isValidData__ = YES;
  GeogebraCommonGuiViewDataDataAnalysisController_set_app_(self, app);
  GeogebraCommonGuiViewDataDataAnalysisController_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  GeogebraCommonGuiViewDataDataAnalysisController_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
}

jboolean GeogebraCommonGuiViewDataDataAnalysisController_isValidListWithJavaUtilArrayList_(GeogebraCommonGuiViewDataDataAnalysisController *self, JavaUtilArrayList *list) {
  if (list == nil || [list size] == 0) {
    return NO;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(list)) size]; i++) {
    [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_out_())) printlnWithNSString:JreStrcat("$I$I", @"data list ", i, @"  size: ", [((GeogebraCommonKernelGeosGeoList *) nil_chk([list getWithInt:i])) size])];
    if ([((GeogebraCommonKernelGeosGeoList *) nil_chk([list getWithInt:i])) size] < 1) {
      [JavaLangSystem_get_out_() printlnWithNSString:@"invalid data list"];
      return NO;
    }
  }
  return YES;
}

void GeogebraCommonGuiViewDataDataAnalysisController_loadDataPanelArray(GeogebraCommonGuiViewDataDataAnalysisController *self) {
  if (self->dataSelected_ != nil) {
    if (self->dataArray_ == nil) GeogebraCommonGuiViewDataDataAnalysisController_setAndConsume_dataArray_(self, new_JavaUtilArrayList_init());
    [((JavaUtilArrayList *) nil_chk(self->dataArray_)) clear];
    for (jint i = 0; i < [self->dataSelected_ size]; i++) {
      [self->dataArray_ addWithInt:i withId:[self->dataSelected_ getWithInt:i]];
    }
    if (![((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) isMultiVar]) {
      [((id<GeogebraCommonGuiViewDataDataAnalysisModel_IDataAnalysisListener>) nil_chk([((GeogebraCommonGuiViewDataDataAnalysisModel *) nil_chk([self getModel])) getListener])) loadDataTableWithJavaUtilArrayList:self->dataArray_];
    }
  }
  else {
    GeogebraCommonMainApp_errorWithNSString_(JreStrcat("$I", @"null dataSelected, mode = ", [self getMode]));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewDataDataAnalysisController)
