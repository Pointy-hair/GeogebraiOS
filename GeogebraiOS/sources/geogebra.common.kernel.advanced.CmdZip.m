//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdZip.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoZip.h"
#include "geogebra/common/kernel/advanced/CmdZip.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelAdvancedCmdZip

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdZip_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  if (n < 3) @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  GeogebraCommonKernelGeosGeoElement *arg = nil;
  IOSObjectArray *vars = [IOSObjectArray arrayWithLength:n / 2 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray *over = [IOSObjectArray arrayWithLength:(n - 1) / 2 type:GeogebraCommonKernelGeosGeoList_class_()];
  jboolean oldval = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  @try {
    [cons_ setSuppressLabelCreationWithBoolean:YES];
    arg = [self resArgsForZipWithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElementArray:vars withGeogebraCommonKernelGeosGeoListArray:over];
  }
  @finally {
    {
      IOSObjectArray *a__ = vars;
      GeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *localVar = *b__++;
        if (localVar != nil) [cons_ removeLocalVariableWithNSString:[localVar getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
    }
    [cons_ setSuppressLabelCreationWithBoolean:oldval];
  }
  GeogebraCommonKernelAdvancedAlgoZip *algo = [new_GeogebraCommonKernelAdvancedAlgoZip_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElementArray_withGeogebraCommonKernelGeosGeoListArray_(cons_, [c getLabel], arg, vars, over) autorelease];
  return [algo getOutput];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdZip", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdZip = { 2, "CmdZip", "geogebra.common.kernel.advanced", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdZip;
}

@end

void GeogebraCommonKernelAdvancedCmdZip_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdZip *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdZip *new_GeogebraCommonKernelAdvancedCmdZip_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdZip *self = [GeogebraCommonKernelAdvancedCmdZip alloc];
  GeogebraCommonKernelAdvancedCmdZip_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdZip)
