//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCurvatureVector.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoCurvatureVector.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedAlgoCurvatureVector () {
 @public
  GeogebraCommonKernelGeosGeoPoint *A_;
  GeogebraCommonKernelGeosGeoFunction *f_, *f1_, *f2_;
  GeogebraCommonKernelGeosGeoVector *v_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVector, A_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVector, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVector, f1_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVector, f2_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVector, v_, GeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureVector_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVector *self);

@implementation GeogebraCommonKernelAdvancedAlgoCurvatureVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CurvatureVector();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, A_);
  IOSObjectArray_Set(input_, 1, f_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:v_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoVector *)getVector {
  return v_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A_)) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [A_ removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
  [f_ removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(f_);
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(v_);
  RELEASE_(algoCAS_);
  RELEASE_(algoCAS2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoFunction:", "AlgoCurvatureVector", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoFunction:", "AlgoCurvatureVector", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "algoCAS_", NULL, 0x0, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "algoCAS2_", NULL, 0x0, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCurvatureVector = { 2, "AlgoCurvatureVector", "geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCurvatureVector;
}

@end

void GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoCurvatureVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setLabelWithNSString:@"c"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureVector *new_GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVector alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoCurvatureVector *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_setAndConsume_v_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  @try {
    [self->v_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_setAndConsume_algoCAS_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_(cons, f));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_set_f1_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self->algoCAS_ getResult], [GeogebraCommonKernelGeosGeoFunction class]));
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_setAndConsume_algoCAS2_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_(cons, self->f1_));
  [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS2_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_set_f2_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast([self->algoCAS2_ getResult], [GeogebraCommonKernelGeosGeoFunction class]));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureVector *new_GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVector *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVector alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self, cons, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVector_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVector *self) {
  @try {
    jdouble f1eval = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f1_)) evaluateWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->A_))->inhomX_];
    jdouble f2eval = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f2_)) evaluateWithDouble:self->A_->inhomX_];
    jdouble t = JavaLangMath_sqrtWithDouble_(1 + f1eval * f1eval);
    jdouble t4 = t * t * t * t;
    jdouble x = self->A_->inhomX_ - (f1eval * f2eval) / t4;
    jdouble y = self->A_->inhomY_ + f2eval / t4;
    ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_))->x_ = x - self->A_->inhomX_;
    self->v_->y_ = y - self->A_->inhomY_;
    self->v_->z_ = 0.0;
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCurvatureVector)
