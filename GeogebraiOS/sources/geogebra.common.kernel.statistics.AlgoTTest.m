//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoTTest.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoTTest.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/stat/descriptive/StatisticalSummaryValues.h"
#include "org/apache/commons/math/stat/inference/TTestImpl.h"

@interface GeogebraCommonKernelStatisticsAlgoTTest () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoNumeric *hypMean_, *mean_, *sd_, *n_;
  GeogebraCommonKernelGeosGeoText *tail_;
  GeogebraCommonKernelGeosGeoList *result_;
  OrgApacheCommonsMathStatInferenceTTestImpl *tTestImpl_;
  IOSDoubleArray *val_;
  jdouble p_, testStat_, se_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, hypMean_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, mean_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, sd_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, tail_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, result_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, tTestImpl_, OrgApacheCommonsMathStatInferenceTTestImpl *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTTest, val_, IOSDoubleArray *)

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoTTest *self, jdouble p, jdouble testStatistic);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoTTest_compute(GeogebraCommonKernelStatisticsAlgoTTest *self);

@implementation GeogebraCommonKernelStatisticsAlgoTTest

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, hypMean, tail);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)mean
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)sd
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)hypMean
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)tail {
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TTest();
}

- (void)setInputOutput {
  if (geoList_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
    IOSObjectArray_Set(input_, 1, hypMean_);
    IOSObjectArray_Set(input_, 2, tail_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:5 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, mean_);
    IOSObjectArray_Set(input_, 1, sd_);
    IOSObjectArray_Set(input_, 2, n_);
    IOSObjectArray_Set(input_, 3, hypMean_);
    IOSObjectArray_Set(input_, 4, tail_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)adjustedPValueWithDouble:(jdouble)p
                         withDouble:(jdouble)testStatistic {
  return GeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, p, testStatistic);
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoTTest_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(hypMean_);
  RELEASE_(mean_);
  RELEASE_(sd_);
  RELEASE_(n_);
  RELEASE_(tail_);
  RELEASE_(result_);
  RELEASE_(tTestImpl_);
  RELEASE_(val_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoText:", "AlgoTTest", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "adjustedPValueWithDouble:withDouble:", "adjustedPValue", "D", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "hypMean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mean_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "tail_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "tTestImpl_", NULL, 0x2, "Lorg.apache.commons.math.stat.inference.TTestImpl;", NULL, NULL,  },
    { "val_", NULL, 0x2, "[D", NULL, NULL,  },
    { "p_", NULL, 0x2, "D", NULL, NULL,  },
    { "testStat_", NULL, 0x2, "D", NULL, NULL,  },
    { "se_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoTTest = { 2, "AlgoTTest", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoTTest;
}

@end

void GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoTTest *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTTest_set_geoList_(self, geoList);
  GeogebraCommonKernelStatisticsAlgoTTest_set_hypMean_(self, hypMean);
  GeogebraCommonKernelStatisticsAlgoTTest_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoTTest_set_mean_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTTest_set_sd_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTTest_set_n_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTTest_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTTest_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTTest *new_GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoTTest *self = [GeogebraCommonKernelStatisticsAlgoTTest alloc];
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, hypMean, tail);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoTTest *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTTest *new_GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoTTest *self = [GeogebraCommonKernelStatisticsAlgoTTest alloc];
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, label, mean, sd, n, hypMean, tail);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoTTest *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTTest_set_geoList_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTTest_set_hypMean_(self, hypMean);
  GeogebraCommonKernelStatisticsAlgoTTest_set_tail_(self, tail);
  GeogebraCommonKernelStatisticsAlgoTTest_set_mean_(self, mean);
  GeogebraCommonKernelStatisticsAlgoTTest_set_sd_(self, sd);
  GeogebraCommonKernelStatisticsAlgoTTest_set_n_(self, n);
  GeogebraCommonKernelStatisticsAlgoTTest_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTTest_compute(self);
}

GeogebraCommonKernelStatisticsAlgoTTest *new_GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *mean, GeogebraCommonKernelGeosGeoNumeric *sd, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *hypMean, GeogebraCommonKernelGeosGeoText *tail) {
  GeogebraCommonKernelStatisticsAlgoTTest *self = [GeogebraCommonKernelStatisticsAlgoTTest alloc];
  GeogebraCommonKernelStatisticsAlgoTTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoText_(self, cons, mean, sd, n, hypMean, tail);
  return self;
}

jdouble GeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoTTest *self, jdouble p, jdouble testStatistic) {
  if (GeogebraCommonUtilStringUtil_isNotEqualWithNSString_([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString])) {
    return p;
  }
  else if (([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@">"] && testStatistic > 0) || ([((NSString *) nil_chk([self->tail_ getTextString])) isEqual:@"<"] && testStatistic < 0)) {
    return p / 2;
  }
  else {
    return 1 - p / 2;
  }
}

void GeogebraCommonKernelStatisticsAlgoTTest_compute(GeogebraCommonKernelStatisticsAlgoTTest *self) {
  if (!(GeogebraCommonUtilStringUtil_isInequalityWithNSString_([((GeogebraCommonKernelGeosGeoText *) nil_chk(self->tail_)) getTextString]))) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 3) {
    jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
    if (![self->geoList_ isDefined] || size < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    GeogebraCommonKernelStatisticsAlgoTTest_setAndConsume_val_(self, [IOSDoubleArray newArrayWithLength:size]);
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
        id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(self->val_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
    }
    @try {
      if (self->tTestImpl_ == nil) GeogebraCommonKernelStatisticsAlgoTTest_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
      self->testStat_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypMean_)) getDouble] withDoubleArray:self->val_];
      self->p_ = [self->tTestImpl_ tTestWithDouble:[self->hypMean_ getDouble] withDoubleArray:self->val_];
      self->p_ = GeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, self->p_, self->testStat_);
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_) autorelease]];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_) autorelease]];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
    }
  }
  else {
    if ([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->sd_)) getDouble] < 0 || [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble] < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    @try {
      OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues *sumStats = [new_OrgApacheCommonsMathStatDescriptiveStatisticalSummaryValues_initWithDouble_withDouble_withLong_withDouble_withDouble_withDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->mean_)) getDouble], [self->sd_ getDouble] * [self->sd_ getDouble], J2ObjCFpToLong([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble]), -1, -1, -1) autorelease];
      if (self->tTestImpl_ == nil) GeogebraCommonKernelStatisticsAlgoTTest_setAndConsume_tTestImpl_(self, new_OrgApacheCommonsMathStatInferenceTTestImpl_init());
      self->testStat_ = [((OrgApacheCommonsMathStatInferenceTTestImpl *) nil_chk(self->tTestImpl_)) tWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->hypMean_)) getDouble] withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats];
      self->p_ = [self->tTestImpl_ tTestWithDouble:[self->hypMean_ getDouble] withOrgApacheCommonsMathStatDescriptiveStatisticalSummary:sumStats];
      self->p_ = GeogebraCommonKernelStatisticsAlgoTTest_adjustedPValueWithDouble_withDouble_(self, self->p_, self->testStat_);
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->p_) autorelease]];
      [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->testStat_) autorelease]];
    }
    @catch (JavaLangIllegalArgumentException *e) {
      [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    @catch (OrgApacheCommonsMathMathException *e) {
      [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoTTest)
