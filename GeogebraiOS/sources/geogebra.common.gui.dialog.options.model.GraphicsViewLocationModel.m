//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/GraphicsViewLocationModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/gui/dialog/options/model/GraphicsViewLocationModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener_;
  GeogebraCommonMainApp *app_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel, listener_, id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel, app_, GeogebraCommonMainApp *)

@interface GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener:(id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>)listener {
  GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  jboolean isInEV = NO;
  jboolean isInEV2 = NO;
  jboolean isInEV3D = NO;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN]) isInEV = YES;
    if ([geo isVisibleInViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2]) isInEV2 = YES;
    if ([geo isVisibleInView3D]) isInEV3D = YES;
  }
  [((id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>) nil_chk(listener_)) selectViewWithInt:0 withBoolean:isInEV];
  [listener_ selectViewWithInt:1 withBoolean:isInEV2];
  [listener_ selectViewWithInt:2 withBoolean:isInEV3D];
}

- (void)applyToEuclidianView1WithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (value) {
      [((GeogebraCommonMainApp *) nil_chk(app_)) addToEuclidianViewWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((GeogebraCommonMainApp *) nil_chk(app_)) removeFromEuclidianViewWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)applyToEuclidianView2WithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    GeogebraCommonEuclidianEuclidianView *ev2 = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView2WithInt:1];
    if (value) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev2)) addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev2)) removeWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)applyToEuclidianView3DWithBoolean:(jboolean)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    id<GeogebraCommonEuclidian3DEuclidianView3DInterface> ev3D = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView3D];
    if (value) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
      [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev3D)) addWithGeogebraCommonKernelGeosGeoElement:geo];
    }
    else {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
      [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(ev3D)) removeWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (jboolean)checkGeos {
  [((id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener>) nil_chk(listener_)) setCheckBox3DVisibleWithBoolean:YES];
  jboolean go = YES;
  for (jint i = 0; go && i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
      [listener_ setCheckBox3DVisibleWithBoolean:NO];
      go = NO;
    }
  }
  return YES;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(app_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener:", "GraphicsViewLocationModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "applyToEuclidianView1WithBoolean:", "applyToEuclidianView1", "V", 0x1, NULL, NULL },
    { "applyToEuclidianView2WithBoolean:", "applyToEuclidianView2", "V", 0x1, NULL, NULL },
    { "applyToEuclidianView3DWithBoolean:", "applyToEuclidianView3D", "V", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.GraphicsViewLocationModel$IGraphicsViewLocationListener;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.GraphicsViewLocationModel$IGraphicsViewLocationListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel = { 2, "GraphicsViewLocationModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_set_app_(self, app);
  GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_set_listener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *new_GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener> listener) {
  GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel *self = [GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel alloc];
  GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel)

@implementation GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "selectViewWithInt:withBoolean:", "selectView", "V", 0x401, NULL, NULL },
    { "setCheckBox3DVisibleWithBoolean:", "setCheckBox3DVisible", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener = { 2, "IGraphicsViewLocationListener", "geogebra.common.gui.dialog.options.model", "GraphicsViewLocationModel", 0x609, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelGraphicsViewLocationModel_IGraphicsViewLocationListener)
