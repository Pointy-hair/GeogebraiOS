//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoZProportionEstimate.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoZProportionEstimate.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/distribution/NormalDistributionImpl.h"

@interface GeogebraCommonKernelStatisticsAlgoZProportionEstimate () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *proportion_, *n_, *level_;
  GeogebraCommonKernelGeosGeoList *result_;
  jdouble se_;
  jdouble me_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZProportionEstimate, proportion_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZProportionEstimate, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZProportionEstimate, level_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoZProportionEstimate, result_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoZProportionEstimate_compute(GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self);

@implementation GeogebraCommonKernelStatisticsAlgoZProportionEstimate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)proportion
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)level {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, proportion, n, level);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)proportion
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)level {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, proportion, n, level);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ZProportionEstimate();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, proportion_);
  IOSObjectArray_Set(input_, 1, n_);
  IOSObjectArray_Set(input_, 2, level_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

- (jdouble)getME {
  return me_;
}

- (jdouble)getSE {
  return se_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_compute(self);
}

- (void)dealloc {
  RELEASE_(proportion_);
  RELEASE_(n_);
  RELEASE_(level_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoZProportionEstimate", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoZProportionEstimate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getME", NULL, "D", 0x1, NULL, NULL },
    { "getSE", NULL, "D", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "proportion_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "level_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "se_", NULL, 0x2, "D", NULL, NULL,  },
    { "me_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoZProportionEstimate = { 2, "AlgoZProportionEstimate", "geogebra.common.kernel.statistics", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoZProportionEstimate;
}

@end

void GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *proportion, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *level) {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, proportion, n, level);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoZProportionEstimate *new_GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *proportion, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *level) {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self = [GeogebraCommonKernelStatisticsAlgoZProportionEstimate alloc];
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, proportion, n, level);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *proportion, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *level) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_set_proportion_(self, proportion);
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_set_n_(self, n);
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_set_level_(self, level);
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_compute(self);
}

GeogebraCommonKernelStatisticsAlgoZProportionEstimate *new_GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *proportion, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *level) {
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self = [GeogebraCommonKernelStatisticsAlgoZProportionEstimate alloc];
  GeogebraCommonKernelStatisticsAlgoZProportionEstimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, proportion, n, level);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoZProportionEstimate_compute(GeogebraCommonKernelStatisticsAlgoZProportionEstimate *self) {
  jdouble n1 = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->n_)) getDouble];
  jdouble phat = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->proportion_)) getDouble];
  jdouble cLevel = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->level_)) getDouble];
  OrgApacheCommonsMathDistributionNormalDistributionImpl *normalDist = [new_OrgApacheCommonsMathDistributionNormalDistributionImpl_initWithDouble_withDouble_(0, 1) autorelease];
  jdouble critZ = 0;
  @try {
    critZ = [normalDist inverseCumulativeProbabilityWithDouble:(1 - cLevel) / 2];
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
    return;
  }
  self->se_ = JavaLangMath_sqrtWithDouble_(phat * (1 - phat) / n1);
  jdouble z = JavaLangMath_absWithDouble_(critZ);
  self->me_ = z * self->se_;
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, phat - self->me_) autorelease]];
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, phat + self->me_) autorelease]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoZProportionEstimate)
