//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/discrete/AlgoTravelingSalesman.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/discrete/AlgoHull.h"
#include "geogebra/common/kernel/discrete/AlgoTravelingSalesman.h"
#include "geogebra/common/kernel/discrete/tsp/method/tsp/BranchBound.h"
#include "geogebra/common/kernel/discrete/tsp/method/tsp/Opt3.h"
#include "geogebra/common/kernel/discrete/tsp/model/Node.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonKernelDiscreteAlgoTravelingSalesman

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelDiscreteAlgoTravelingSalesman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TravelingSalesman();
}

- (void)compute {
  size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size];
  if (![inputList_ isDefined] || size_ < 3) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setUndefined];
    return;
  }
  IOSDoubleArray *inhom = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelDiscreteTspMethodTspOpt3 *opt3 = [new_GeogebraCommonKernelDiscreteTspMethodTspOpt3_init() autorelease];
  GeogebraCommonKernelDiscreteTspMethodTspBranchBound *construction = [new_GeogebraCommonKernelDiscreteTspMethodTspBranchBound_initWithInt_withGeogebraCommonKernelDiscreteTspMethodTspTspImprovement_(500, opt3) autorelease];
  IOSObjectArray *nodes = [IOSObjectArray arrayWithLength:size_ type:GeogebraCommonKernelDiscreteTspModelNode_class_()];
  for (jint i = 0; i < size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [inputList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined] && [geo isGeoPoint]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      [p getInhomCoordsWithDoubleArray:inhom];
      IOSObjectArray_SetAndConsume(nodes, i, new_GeogebraCommonKernelDiscreteTspModelNode_initWithDouble_withDouble_(IOSDoubleArray_Get(inhom, 0), IOSDoubleArray_Get(inhom, 1)));
    }
  }
  IOSIntArray *route = [construction methodWithGeogebraCommonKernelDiscreteTspModelNodeArray:nodes];
  if (al_ == nil) GeogebraCommonKernelDiscreteAlgoHull_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [al_ clear];
  for (jint i = 0; i < size_; i++) {
    GeogebraCommonKernelDiscreteTspModelNode *n = IOSObjectArray_Get(nodes, IOSIntArray_Get(nil_chk(route), i));
    [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((GeogebraCommonKernelDiscreteTspModelNode *) nil_chk(n)) getX], [n getY], i != 0) autorelease]];
  }
  GeogebraCommonKernelDiscreteTspModelNode *n = IOSObjectArray_Get(nodes, IOSIntArray_Get(nil_chk(route), 0));
  [((JavaUtilArrayList *) nil_chk(al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_([((GeogebraCommonKernelDiscreteTspModelNode *) nil_chk(n)) getX], [n getY], YES) autorelease]];
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(locus_)) setPointsWithJavaUtilArrayList:al_];
  [locus_ setDefinedWithBoolean:YES];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoTravelingSalesman", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelDiscreteAlgoTravelingSalesman = { 2, "AlgoTravelingSalesman", "geogebra.common.kernel.discrete", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelDiscreteAlgoTravelingSalesman;
}

@end

void GeogebraCommonKernelDiscreteAlgoTravelingSalesman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelDiscreteAlgoTravelingSalesman *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelDiscreteAlgoHull_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, nil);
}

GeogebraCommonKernelDiscreteAlgoTravelingSalesman *new_GeogebraCommonKernelDiscreteAlgoTravelingSalesman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelDiscreteAlgoTravelingSalesman *self = [GeogebraCommonKernelDiscreteAlgoTravelingSalesman alloc];
  GeogebraCommonKernelDiscreteAlgoTravelingSalesman_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelDiscreteAlgoTravelingSalesman)
