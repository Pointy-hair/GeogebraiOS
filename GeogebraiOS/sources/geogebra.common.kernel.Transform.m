//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/Transform.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/LimitedPath.h"
#include "geogebra/common/kernel/kernelND/AlgoTransformable.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelTransform ()

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
          withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>)oldPoly
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)transformedPoints;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelTransform_transformPolyWithNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelTransform *self, NSString *label, id<GeogebraCommonKernelGeosGeoPoly> oldPoly, IOSObjectArray *transformedPoints);

@implementation GeogebraCommonKernelTransform

+ (NSString *)transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_(geo);
}

- (GeogebraCommonKernelGeosGeoElement *)doTransformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelAlgosAlgoTransformation *) nil_chk([self getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:geo])) getResult];
}

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
       withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  return GeogebraCommonKernelTransform_transformPolyWithNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, poly, [self transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:[((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) getPoints]]);
}

- (IOSObjectArray *)transformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                       withNSString:(NSString *)transformedLabel {
  NSString *label = transformedLabel;
  GeogebraCommonKernelAlgosAlgoElement *algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm];
  if ((algo != nil) && ([GeogebraCommonKernelKernelNDAlgoTransformable_class_() isInstance:algo])) {
    return [((id<GeogebraCommonKernelKernelNDAlgoTransformable>) check_protocol_cast(algo, @protocol(GeogebraCommonKernelKernelNDAlgoTransformable))) getTransformedOutputWithGeogebraCommonKernelTransform:self];
  }
  if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo] && [self isAffine]) {
    id<GeogebraCommonKernelGeosGeoPoly> poly = (id<GeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosGeoPoly));
    if ([poly isVertexCountFixed] && [poly isAllVertexLabelsSet]) return GeogebraCommonKernelTransform_transformPolyWithNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, poly, [self transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:[poly getPointsND]]);
  }
  if (label == nil) label = GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_(geo);
  if ([geo isLimitedPath] && [((id<GeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosLimitedPath))) isAllEndpointsLabelsSet]) {
    IOSObjectArray *geos = [((id<GeogebraCommonKernelGeosLimitedPath>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosLimitedPath))) createTransformedObjectWithGeogebraCommonKernelTransform:self withNSString:label];
    return geos;
  }
  GeogebraCommonKernelGeosGeoElement *ret = [self doTransformWithGeogebraCommonKernelGeosGeoElement:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setLabelWithNSString:label];
  [ret setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:geo];
  IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ ret } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return geos;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)transformPolyWithNSString:(NSString *)label
          withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>)oldPoly
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)transformedPoints {
  return GeogebraCommonKernelTransform_transformPolyWithNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, label, oldPoly, transformedPoints);
}

- (IOSObjectArray *)transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  IOSObjectArray *newPoints = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points))->size_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < points->size_; i++) {
    NSString *pointLabel = GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class]));
    IOSObjectArray_Set(newPoints, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self transformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class]) withNSString:pointLabel]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(newPoints, i), [GeogebraCommonKernelGeosGeoElement class])))) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, i), [GeogebraCommonKernelGeosGeoElement class])];
  }
  return newPoints;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonKernelKernelNDGeoConicND *ret = (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self doTransformWithGeogebraCommonKernelGeosGeoElement:conic], [GeogebraCommonKernelKernelNDGeoConicND class]);
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(ret)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:conic];
  return ret;
}

- (GeogebraCommonKernelGeosGeoElement *)getTransformedLineWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelGeosGeoElement *ret = [self doTransformWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class])];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class])];
  return ret;
}

- (jboolean)isAffine {
  return YES;
}

- (jboolean)isSimilar {
  return YES;
}

- (jboolean)changesOrientation {
  return NO;
}

+ (void)setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)input
                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)transformed {
  GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(input, transformed);
}

- (instancetype)init {
  GeogebraCommonKernelTransform_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(cons_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement:", "transformedGeoLabel", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "doTransformWithGeogebraCommonKernelGeosGeoElement:", "doTransform", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "transformPolyWithNSString:withGeogebraCommonKernelGeosGeoPolygon:", "transformPoly", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "transformWithGeogebraCommonKernelGeosGeoElement:withNSString:", "transform", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x404, NULL, NULL },
    { "transformPolyWithNSString:withGeogebraCommonKernelGeosGeoPoly:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "transformPoly", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x2, NULL, NULL },
    { "transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:", "transformPoints", "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getTransformedConicWithGeogebraCommonKernelKernelNDGeoConicND:", "getTransformedConic", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getTransformedLineWithGeogebraCommonKernelKernelNDGeoLineND:", "getTransformedLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isAffine", NULL, "Z", 0x1, NULL, NULL },
    { "isSimilar", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
    { "setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setVisualStyleForTransformations", "V", 0x19, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelTransform = { 2, "Transform", "geogebra.common.kernel", NULL, 0x401, 14, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelTransform;
}

@end

NSString *GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonKernelTransform_initialize();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoFunction]) {
    if ([geo isLabelSet] && ![geo hasIndexLabel]) return [geo getFreeLabelWithNSString:[geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplateLocal_()]];
    return nil;
  }
  if ([geo isLabelSet] && ![geo hasIndexLabel] && ![((NSString *) nil_chk([geo getLabelSimple])) hasSuffix:@"'''"]) {
    return [geo getFreeLabelWithNSString:JreStrcat("$C", [geo getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplateLocal_()], '\'')];
  }
  return nil;
}

IOSObjectArray *GeogebraCommonKernelTransform_transformPolyWithNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelTransform *self, NSString *label, id<GeogebraCommonKernelGeosGeoPoly> oldPoly, IOSObjectArray *transformedPoints) {
  IOSObjectArray *polyLabel = nil;
  if (label == nil) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [GeogebraCommonKernelGeosGeoElement class])))) isLabelSet]) {
      polyLabel = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
      IOSObjectArray_Set(polyLabel, 0, GeogebraCommonKernelTransform_transformedGeoLabelWithGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [GeogebraCommonKernelGeosGeoElement class])));
    }
  }
  else {
    polyLabel = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
    IOSObjectArray_Set(polyLabel, 0, label);
  }
  IOSObjectArray *oldPoints = [((id<GeogebraCommonKernelGeosGeoPoly>) nil_chk(oldPoly)) getPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(oldPoints))->size_; i++) {
    GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(oldPoints, i), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(nil_chk(transformedPoints), i), [GeogebraCommonKernelGeosGeoElement class]));
    [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(transformedPoints, i), [GeogebraCommonKernelGeosGeoElement class])];
  }
  IOSObjectArray *ret;
  if ([oldPoly isKindOfClass:[GeogebraCommonKernelGeosGeoPolygon class]]) ret = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) PolygonNDWithNSStringArray:polyLabel withGeogebraCommonKernelKernelNDGeoPointNDArray:transformedPoints];
  else ret = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) PolyLineNDWithNSStringArray:polyLabel withGeogebraCommonKernelKernelNDGeoPointNDArray:transformedPoints];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ret))->size_; i++) {
    GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_((GeogebraCommonKernelGeosGeoElement *) check_class_cast(oldPoly, [GeogebraCommonKernelGeosGeoElement class]), IOSObjectArray_Get(ret, i));
  }
  return ret;
}

void GeogebraCommonKernelTransform_setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *input, GeogebraCommonKernelGeosGeoElement *transformed) {
  GeogebraCommonKernelTransform_initialize();
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(transformed)) setEuclidianVisibleWithBoolean:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(input)) isSetEuclidianVisible]];
  [transformed setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:input];
}

void GeogebraCommonKernelTransform_init(GeogebraCommonKernelTransform *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelTransform)
