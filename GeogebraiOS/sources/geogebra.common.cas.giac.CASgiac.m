//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/cas/giac/CASgiac.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/cas/CASparser.h"
#include "geogebra/common/cas/CasParserTools.h"
#include "geogebra/common/cas/GeoGebraCAS.h"
#include "geogebra/common/cas/giac/CASgiac.h"
#include "geogebra/common/kernel/AsynchronousCommand.h"
#include "geogebra/common/kernel/CASException.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/CASSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonCasGiacCASgiac () {
 @public
  JavaLangStringBuilder *expSB_;
}

- (NSString *)getPlainResultWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)casInput
                                               withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ve
                                                             withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
                                                                                    withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonCasGiacCASgiac, expSB_, JavaLangStringBuilder *)

static ComGoogleGwtRegexpSharedRegExp *GeogebraCommonCasGiacCASgiac_inequality_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonCasGiacCASgiac, inequality_, ComGoogleGwtRegexpSharedRegExp *)

static ComGoogleGwtRegexpSharedRegExp *GeogebraCommonCasGiacCASgiac_inequalitySimple_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonCasGiacCASgiac, inequalitySimple_, ComGoogleGwtRegexpSharedRegExp *)

static ComGoogleGwtRegexpSharedRegExp *GeogebraCommonCasGiacCASgiac_inequalitySimpleInList_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonCasGiacCASgiac, inequalitySimpleInList_, ComGoogleGwtRegexpSharedRegExp *)

static NSString *GeogebraCommonCasGiacCASgiac_EVALFA_ = @"evalfa(";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonCasGiacCASgiac, EVALFA_, NSString *)

__attribute__((unused)) static NSString *GeogebraCommonCasGiacCASgiac_evaluateRawWithNSString_(GeogebraCommonCasGiacCASgiac *self, NSString *input);

__attribute__((unused)) static NSString *GeogebraCommonCasGiacCASgiac_getPlainResultWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelKernel_(GeogebraCommonCasGiacCASgiac *self, GeogebraCommonKernelArithmeticValidExpression *casInput, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static NSString *GeogebraCommonCasGiacCASgiac_toGeoGebraStringWithNSString_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(GeogebraCommonCasGiacCASgiac *self, NSString *giacString, GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, GeogebraCommonKernelStringTemplate *tpl, GeogebraCommonKernelKernel *kernel);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonCasGiacCASgiac_replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelKernel_(id<GeogebraCommonKernelArithmeticExpressionValue> ve, GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, GeogebraCommonKernelKernel *kernel);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonCasGiacCASgiac)

NSString *GeogebraCommonCasGiacCASgiac_initString_ = @"caseval(\"init geogebra\")";
NSString *GeogebraCommonCasGiacCASgiac_closeString_ = @"caseval(\"close geogebra\")";
NSString *GeogebraCommonCasGiacCASgiac_specialFunctions_ = @"restart;ggbsort(x):=when(length(x)==0,{},when(type(x[0])==DOM_LIST,x,sort(x)));atan2(y,x):=arg(x+i*y);sech(x):=1/cosh(x);csch(x):=1/sinh(x);coth(x):=1/tanh(x);fractionalPart(x):=sign(x)*(abs(x)-floor(abs(x)));is3dpoint(x):=when(size(x[1])==3 && subtype(x[1])==20,true,false);xcoord(x):=when(type(x)==DOM_IDENT,xcoordsymb(x),when(x[0]=='pnt',when(is3dpoint(x),x[1][0],real(x[1])),when(x[0]=='=',?,x[0])));ycoord(x):=when(type(x)==DOM_IDENT,ycoordsymb(x),when(x[0]=='pnt',when(is3dpoint(x),x[1][1],im(x[1])),when(x[1]=='=',?,x[1])));zcoord(x):=when(type(x)==DOM_IDENT,zcoordsymb(x),when(x[0]=='pnt',when(is3dpoint(x),x[1][2],0),when(length(x)<3,0,when(x[2]=='=',?,x[2]))));degasin(x):=normal(asin(x)/pi*180)*unicode0176u;degacos(x):=normal(acos(x)/pi*180)*unicode0176u;degatan(x):=normal(atan(x)/pi*180)*unicode0176u;degatan2(y,x):=normal(arg(x+i*y)/pi*180)*unicode0176u;ggbabs(x):=when(x[0]=='pnt' || (type(x)==DOM_LIST && subtype(x)==27),l2norm(x),abs(x));ggb_is_zero(x):=when(x==0,true,when(x[0]=='=',lhs(x)==0&&rhs(x)==0,when(type(x)=='DOM_LIST',max(x)==min(x)&&min(x)==0,false)));";
NSString *GeogebraCommonCasGiacCASgiac_myeliminate_ = @"[containsvars(poly,varlist):={local ii; for (ii:=0; ii<size(varlist); ii++) { if (degree(poly,varlist[ii])>0) { return true } } return false}],[myeliminate(polylist,varlist):={local ii,jj,kk; kk:=[]; jj:=gbasis(polylist,append(varlist,y,x),revlex); for (ii:=0; ii<size(jj); ii++) { if (!containsvars(jj[ii],varlist)) { kk:=append(kk,jj[ii]) } } return kk }]";

@implementation GeogebraCommonCasGiacCASgiac

- (instancetype)initWithGeogebraCommonCasCASparser:(GeogebraCommonCasCASparser *)casParser {
  GeogebraCommonCasGiacCASgiac_initWithGeogebraCommonCasCASparser_(self, casParser);
  return self;
}

- (NSString *)evaluateCASWithNSString:(NSString *)exp {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)evaluateRawWithNSString:(NSString *)input {
  return GeogebraCommonCasGiacCASgiac_evaluateRawWithNSString_(self, input);
}

- (NSString *)evaluateWithNSString:(NSString *)exp
                          withLong:(jlong)timeoutMilliseconds {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)evaluateGeoGebraCASWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)inputExpression
                             withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
                                            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                    withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  @synchronized(self) {
    GeogebraCommonKernelArithmeticValidExpression *casInput = inputExpression;
    GeogebraCommonKernelArithmeticCommand *cmd = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(casInput)) getTopLevelCommand];
    jboolean keepInput = [casInput isKeepInputUsed] || (cmd != nil && [@"KeepInput" isEqual:[cmd getName]]);
    NSString *plainResult = GeogebraCommonCasGiacCASgiac_getPlainResultWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelKernel_(self, casInput, kernel);
    if (keepInput) {
      if (cmd != nil && [((NSString *) nil_chk([cmd getName])) isEqual:@"KeepInput"]) {
        if ([cmd getArgumentNumber] > 0) {
          casInput = [cmd getArgumentWithInt:0];
        }
      }
    }
    if ([casInput isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
      if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(casInput)) getAssignmentType] == GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED()) {
        return [casInput toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericNoLocal_()];
      }
    }
    NSString *result = plainResult;
    if (keepInput) {
      return [((GeogebraCommonCasCASparser *) nil_chk(casParser_)) toGeoGebraStringWithGeogebraCommonKernelArithmeticExpressionValue:casInput withGeogebraCommonKernelStringTemplate:tpl];
    }
    if ([((NSString *) nil_chk(result)) isEmpty]) {
      return nil;
    }
    return GeogebraCommonCasGiacCASgiac_toGeoGebraStringWithNSString_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(self, result, arbconst, tpl, kernel);
  }
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)inputExpression
                                                                     withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
                                                                                            withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  @synchronized(self) {
    NSString *result = GeogebraCommonCasGiacCASgiac_getPlainResultWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelKernel_(self, inputExpression, kernel);
    if ([@"" isEqual:result]) {
      return nil;
    }
    return GeogebraCommonCasGiacCASgiac_replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelKernel_([((GeogebraCommonCasCASparser *) nil_chk(casParser_)) parseGiacWithNSString:result], arbconst, kernel);
  }
}

- (NSString *)getPlainResultWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)casInput
                                               withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonCasGiacCASgiac_getPlainResultWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelKernel_(self, casInput, kernel);
}

- (NSString *)toGeoGebraStringWithNSString:(NSString *)giacString
withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
    withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
            withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonCasGiacCASgiac_toGeoGebraStringWithNSString_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(self, giacString, arbconst, tpl, kernel);
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ve
                                                             withGeogebraCommonKernelArithmeticMyArbitraryConstant:(GeogebraCommonKernelArithmeticMyArbitraryConstant *)arbconst
                                                                                    withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonCasGiacCASgiac_replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelKernel_(ve, arbconst, kernel);
}

- (void)reset {
  @synchronized(self) {
  }
}

- (jlong)getTimeoutMilliseconds {
  return timeoutMillis_;
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  GeogebraCommonMainSettingsCASSettings *s = (GeogebraCommonMainSettingsCASSettings *) check_class_cast(settings, [GeogebraCommonMainSettingsCASSettings class]);
  timeoutMillis_ = [((GeogebraCommonMainSettingsCASSettings *) nil_chk(s)) getTimeoutMilliseconds];
  @try {
    GeogebraCommonCasGiacCASgiac_evaluateRawWithNSString_(self, JreStrcat("$J$", @"caseval(\"timeout ", (timeoutMillis_ / 1000), @"\")"));
  }
  @catch (JavaLangThrowable *e) {
    [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
  }
}

- (NSString *)translateAssignmentWithNSString:(NSString *)label
                                 withNSString:(NSString *)body {
  return JreStrcat("$$$", label, @" := ", body);
}

- (void)CASAsyncFinishedWithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)exp
                                                             withNSString:(NSString *)result2
                                                    withJavaLangThrowable:(JavaLangThrowable *)exception
                              withGeogebraCommonKernelAsynchronousCommand:(id<GeogebraCommonKernelAsynchronousCommand>)c
                                                             withNSString:(NSString *)input {
  NSString *result = result2;
  if (exception != nil) {
    [((id<GeogebraCommonKernelAsynchronousCommand>) nil_chk(c)) handleExceptionWithJavaLangThrowable:exception withInt:((jint) [((NSString *) nil_chk(input)) hash])];
    return;
  }
  if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(exp)) isKeepInputUsed] && ([@"?" isEqual:result])) {
    [((id<GeogebraCommonKernelAsynchronousCommand>) nil_chk(c)) handleCASoutputWithNSString:[exp toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()] withInt:((jint) [((NSString *) nil_chk(input)) hash])];
  }
  if (result2 != nil) {
    [((id<GeogebraCommonKernelAsynchronousCommand>) nil_chk(c)) getKernel];
    result = GeogebraCommonKernelKernel_removeCASVariablePrefixWithNSString_withNSString_(result, @" ");
  }
  [((id<GeogebraCommonKernelAsynchronousCommand>) nil_chk(c)) handleCASoutputWithNSString:result withInt:((jint) [((NSString *) nil_chk(input)) hash])];
  if ([c useCacheing]) [((GeogebraCommonKernelKernel *) nil_chk([c getKernel])) putToCasCacheWithNSString:input withNSString:result];
}

- (void)appendListStartWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbCASCommand {
  [((JavaLangStringBuilder *) nil_chk(sbCASCommand)) appendWithNSString:@"["];
}

- (void)appendListEndWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbCASCommand {
  [((JavaLangStringBuilder *) nil_chk(sbCASCommand)) appendWithNSString:@"]"];
}

- (NSString *)createLocusEquationScriptWithNSString:(NSString *)constructRestrictions
                                       withNSString:(NSString *)vars
                                       withNSString:(NSString *)varsToEliminate {
  JavaLangStringBuilder *script = [new_JavaLangStringBuilder_init() autorelease];
  NSString *eliminateCommand = JreStrcat("$$$$$", @"eliminate([", constructRestrictions, @"],[", varsToEliminate, @"])");
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([script appendWithNSString:@"["])) appendWithNSString:JreStrcat("$$", GeogebraCommonCasGiacCASgiac_myeliminate_, @",[aa:=my")])) appendWithNSString:eliminateCommand])) appendWithNSString:@"],"])) appendWithNSString:JreStrcat("$$$", @"[if (size(aa)==0) {aa:=", eliminateCommand, @"}],")])) appendWithNSString:@"[bb:=coeffs(aa[0],x)], [sx:=size(bb)], [sy:=size(coeffs(aa[0],y))],"])) appendWithNSString:@"[cc:=[sx,sy]], [for ii from sx-1 to 0 by -1 do dd:=coeff(bb[ii],y);"])) appendWithNSString:@"sd:=size(dd); for jj from sd-1 to 0 by -1 do ee:=dd[jj];"])) appendWithNSString:@"cc:=append(cc,ee); od; for kk from sd to sy-1 do ee:=0;"])) appendWithNSString:@"cc:=append(cc,ee); od; od],cc][9]"])) description];
}

- (NSString *)createEliminateFactorizedScriptWithNSString:(NSString *)polys
                                             withNSString:(NSString *)elimVars {
  JavaLangStringBuilder *script = [new_JavaLangStringBuilder_init() autorelease];
  NSString *eliminateCommand = JreStrcat("$$$$$", @"eliminate([", polys, @"],[", elimVars, @"])");
  return [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([script appendWithNSString:JreStrcat("C$$", '[', GeogebraCommonCasGiacCASgiac_myeliminate_, @",[ff:=\"\"],[aa:=my")])) appendWithNSString:eliminateCommand])) appendWithNSString:JreStrcat("$$$", @"],[if (size(aa)==0) {aa:=", eliminateCommand, @"}],")])) appendWithNSString:@"[bb:=size(aa)],[for ii from 0 to bb-1 do ff+=(\"[\"+(ii+1)+\"]: [1]: "])) appendWithNSString:@" _[1]=1\");cc:=factors(aa[ii]);dd:=size(cc);"])) appendWithNSString:@"for jj from 0 to dd-1 by 2 do ff+=(\"  _[\"+(jj/2+2)+\"]=\"+cc[jj]); od; ff+=(\" [2]: "])) appendWithNSString:@"\"+cc[1]);for kk from 1 to dd-1 by 2 do ff+=(\",\"+cc[kk]);od;od],[if(ff==\"\"){ff:=[0]}],ff][8]"])) description];
}

- (NSString *)createGroebnerSolvableScriptWithJavaUtilHashMap:(JavaUtilHashMap *)substitutions
                                                 withNSString:(NSString *)polys
                                                 withNSString:(NSString *)freeVars
                                                 withNSString:(NSString *)dependantVars
                                                  withBoolean:(jboolean)transcext {
  NSString *idealVar = @"ii";
  NSString *ret = JreStrcat("$$$", @"[[", idealVar, @":=gbasis(");
  if (substitutions != nil) {
    ret = JreStrcat("$$", ret, @"subst(");
  }
  ret = JreStrcat("$$", ret, JreStrcat("C$C", '[', polys, ']'));
  if (substitutions != nil) {
    NSString *substParams = GeogebraCommonCasGiacCASgiac_substitutionsStringWithJavaUtilHashMap_(substitutions);
    ret = JreStrcat("$$", ret, JreStrcat("$$$", @",[", substParams, @"])"));
  }
  NSString *vars = JreStrcat("$$", freeVars, GeogebraCommonKernelProverPolynomialPolynomial_addLeadingCommaWithNSString_(dependantVars));
  ret = JreStrcat("$$", ret, JreStrcat("$$$$$$$", @",[", vars, @"],revlex)],(", idealVar, @"[0]!=1)&&(", idealVar, @"[0]!=-1)][1]"));
  return ret;
}

+ (NSString *)substitutionsStringWithJavaUtilHashMap:(JavaUtilHashMap *)subst {
  return GeogebraCommonCasGiacCASgiac_substitutionsStringWithJavaUtilHashMap_(subst);
}

- (IOSObjectArray *)getBivarPolyCoefficientsWithNSString:(NSString *)rawResult
                        withGeogebraCommonCasGeoGebraCAS:(GeogebraCommonCasGeoGebraCAS *)cas {
  NSString *numbers = [rawResult substring:1 endIndex:((jint) [((NSString *) nil_chk(rawResult)) length]) - 1];
  IOSObjectArray *flatData = [((NSString *) nil_chk(numbers)) split:@","];
  jint xLength = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(flatData), 0));
  jint yLength = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(flatData, 1));
  IOSObjectArray *result = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ xLength, yLength }];
  jint counter = 2;
  for (jint x = 0; x < xLength; x++) {
    for (jint y = 0; y < yLength; y++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(result, x)), y) = JavaLangDouble_parseDoubleWithNSString_(IOSObjectArray_Get(flatData, counter));
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$ICI$D", @"[LocusEqu] result[", x, ',', y, @"]=", IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(result, x)), y)));
      ++counter;
    }
  }
  return result;
}

- (NSString *)checkInequalityIntervalWithNSString:(NSString *)exp {
  NSString *ret = exp;
  ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonCasGiacCASgiac_inequalitySimple_)) execWithNSString:ret];
  if (matcher != nil && [((NSString *) nil_chk(exp)) hasPrefix:[matcher getGroupWithInt:1]]) {
    ret = JreStrcat("$C$$", [matcher getGroupWithInt:3], '<', [matcher getGroupWithInt:2], [matcher getGroupWithInt:1]);
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"giac output (with simple inequality converted): ", ret));
    return ret;
  }
  while ((matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonCasGiacCASgiac_inequality_)) execWithNSString:ret]) != nil && [((NSString *) nil_chk([((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:2])) isEqual:[matcher getGroupWithInt:7]]) {
    ret = JreStrcat("$$C$$C$$$", [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:1], [matcher getGroupWithInt:4], '<', [matcher getGroupWithInt:3], [matcher getGroupWithInt:2], '<', [matcher getGroupWithInt:6], [matcher getGroupWithInt:5], [matcher getGroupWithInt:8]);
  }
  while ((matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonCasGiacCASgiac_inequalitySimpleInList_)) execWithNSString:ret]) != nil) {
    NSString *g3 = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:3];
    NSString *g5 = [matcher getGroupWithInt:5];
    if ([(g3) isEqual:@"undefined"]) {
      g3 = @"";
    }
    if ([(g5) isEqual:@"undefined"]) {
      g5 = @"";
    }
    NSString *g345 = JreStrcat("$$$", g3, [matcher getGroupWithInt:4], g5);
    NSString *g7 = [matcher getGroupWithInt:7];
    ret = JreStrcat("$$$C$$$$", [matcher getGroupWithInt:1], [matcher getGroupWithInt:2], g7, '<', [matcher getGroupWithInt:6], g345, [matcher getGroupWithInt:8], [matcher getGroupWithInt:9]);
  }
  if (![((NSString *) nil_chk(exp)) isEqual:ret]) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"giac output (with inequality converted): ", ret));
  }
  return ret;
}

- (NSString *)postProcessWithNSString:(NSString *)s {
  if ([((NSString *) nil_chk(s)) indexOfString:@"GIAC_ERROR:"] > -1) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error from Giac: ", s));
    return @"?";
  }
  NSString *ret = [s trim];
  jint primeOpen = [((NSString *) nil_chk(ret)) indexOf:'\''];
  while (primeOpen >= 0) {
    jint primeClose = [ret indexOf:'\'' fromIndex:primeOpen + 1];
    if (primeClose < 0) {
      break;
    }
    if (primeClose == primeOpen + 2 && [ret charAtWithInt:primeOpen + 1] == ')') {
      jint bracketOpen = [ret lastIndexOf:'(' fromIndex:primeOpen];
      if (bracketOpen >= 0) {
        JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(ret) autorelease];
        sb = [sb replaceWithInt:primeOpen + 1 withInt:primeOpen + 2 withNSString:@""];
        sb = [((JavaLangStringBuilder *) nil_chk(sb)) replaceWithInt:bracketOpen withInt:bracketOpen + 1 withNSString:@""];
        ret = [((JavaLangStringBuilder *) nil_chk(sb)) description];
      }
    }
    else {
      jint check = GeogebraCommonUtilStringUtil_checkBracketsBackwardWithNSString_([ret substring:primeOpen endIndex:primeClose]);
      if (check < 0) {
        JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithNSString_(ret) autorelease];
        sb = [sb replaceWithInt:primeOpen withInt:primeOpen + 1 withNSString:@""];
        sb = [((JavaLangStringBuilder *) nil_chk(sb)) replaceWithInt:primeClose - 1 withInt:primeClose withNSString:@""];
        ret = [((JavaLangStringBuilder *) nil_chk(sb)) description];
        GeogebraCommonMainApp_debugWithNSString_(ret);
        primeOpen = [((NSString *) nil_chk(ret)) indexOf:'\'' fromIndex:primeClose];
      }
      else {
        primeOpen = primeClose;
      }
    }
  }
  if ([((NSString *) nil_chk(ret)) indexOfString:@"integrate("] > -1) {
    return @"?";
  }
  if ([ret indexOfString:@"c_"] > -1) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"replacing arbitrary constants in ", ret));
    ret = [ret replaceAll:@"c_([0-9]*)" withReplacement:@"arbconst($1)"];
  }
  if ([((NSString *) nil_chk(ret)) indexOfString:@"n_"] > -1) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"replacing arbitrary integers in ", ret));
    ret = [ret replaceAll:@"n_([0-9]*)" withReplacement:@"arbint($1)"];
  }
  ret = [((GeogebraCommonCasCASparser *) nil_chk(casParser_)) insertSpecialCharsWithNSString:ret];
  if (((jint) [((NSString *) nil_chk(ret)) length]) < 200) {
    ret = [self checkInequalityIntervalWithNSString:ret];
  }
  return ret;
}

- (NSString *)wrapInevalfaWithNSString:(NSString *)s {
  [((JavaLangStringBuilder *) nil_chk(expSB_)) setLengthWithInt:((jint) [((NSString *) nil_chk(GeogebraCommonCasGiacCASgiac_EVALFA_)) length])];
  [expSB_ appendWithNSString:s];
  [expSB_ appendWithNSString:@")"];
  return [expSB_ description];
}

- (void)dealloc {
  RELEASE_(parserTools_);
  RELEASE_(casParser_);
  RELEASE_(expSB_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonCasGiacCASgiac class]) {
    JreStrongAssign(&GeogebraCommonCasGiacCASgiac_inequality_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"(.*)\\(([A-Za-z]+)>(=*)(.+)\\) && \\((.+)>(=*)([A-Za-z]+)\\)(.*)"));
    JreStrongAssign(&GeogebraCommonCasGiacCASgiac_inequalitySimple_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"^([-0-9.E/\\(\\)]+)>(=*)([A-Za-z]+)$"));
    JreStrongAssign(&GeogebraCommonCasGiacCASgiac_inequalitySimpleInList_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"(.*)([,{])(\\(*)?([-0-9.E]+)(\\)*)?>(=*)([A-Za-z]+)([,}\\)])(.*)"));
    J2OBJC_SET_INITIALIZED(GeogebraCommonCasGiacCASgiac)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonCasCASparser:", "CASgiac", NULL, 0x1, NULL, NULL },
    { "evaluateCASWithNSString:", "evaluateCAS", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "evaluateRawWithNSString:", "evaluateRaw", "Ljava.lang.String;", 0x11, "Ljava.lang.Throwable;", NULL },
    { "evaluateWithNSString:withLong:", "evaluate", "Ljava.lang.String;", 0x404, "Ljava.lang.Throwable;", NULL },
    { "evaluateGeoGebraCASWithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelArithmeticMyArbitraryConstant:withGeogebraCommonKernelStringTemplate:withGeogebraCommonKernelKernel:", "evaluateGeoGebraCAS", "Ljava.lang.String;", 0x31, "Lgeogebra.common.kernel.CASException;", NULL },
    { "evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelArithmeticMyArbitraryConstant:withGeogebraCommonKernelKernel:", "evaluateToExpression", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x31, "Lgeogebra.common.kernel.CASException;", NULL },
    { "getPlainResultWithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelKernel:", "getPlainResult", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "toGeoGebraStringWithNSString:withGeogebraCommonKernelArithmeticMyArbitraryConstant:withGeogebraCommonKernelStringTemplate:withGeogebraCommonKernelKernel:", "toGeoGebraString", "Ljava.lang.String;", 0x31, "Lgeogebra.common.kernel.CASException;", NULL },
    { "replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticMyArbitraryConstant:withGeogebraCommonKernelKernel:", "replaceRoots", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0xa, NULL, NULL },
    { "reset", NULL, "V", 0x21, NULL, NULL },
    { "getTimeoutMilliseconds", NULL, "J", 0x4, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "translateAssignmentWithNSString:withNSString:", "translateAssignment", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "CASAsyncFinishedWithGeogebraCommonKernelArithmeticValidExpression:withNSString:withJavaLangThrowable:withGeogebraCommonKernelAsynchronousCommand:withNSString:", "CASAsyncFinished", "V", 0x1, NULL, NULL },
    { "appendListStartWithJavaLangStringBuilder:", "appendListStart", "V", 0x1, NULL, NULL },
    { "appendListEndWithJavaLangStringBuilder:", "appendListEnd", "V", 0x1, NULL, NULL },
    { "createLocusEquationScriptWithNSString:withNSString:withNSString:", "createLocusEquationScript", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createEliminateFactorizedScriptWithNSString:withNSString:", "createEliminateFactorizedScript", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createGroebnerSolvableScriptWithJavaUtilHashMap:withNSString:withNSString:withNSString:withBoolean:", "createGroebnerSolvableScript", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "substitutionsStringWithJavaUtilHashMap:", "substitutionsString", "Ljava.lang.String;", 0x8, NULL, NULL },
    { "getBivarPolyCoefficientsWithNSString:withGeogebraCommonCasGeoGebraCAS:", "getBivarPolyCoefficients", "[[D", 0x1, NULL, NULL },
    { "checkInequalityIntervalWithNSString:", "checkInequalityInterval", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "postProcessWithNSString:", "postProcess", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "wrapInevalfaWithNSString:", "wrapInevalfa", "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parserTools_", NULL, 0x4, "Lgeogebra.common.cas.CasParserTools;", NULL, NULL,  },
    { "initString_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonCasGiacCASgiac_initString_, NULL,  },
    { "closeString_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonCasGiacCASgiac_closeString_, NULL,  },
    { "specialFunctions_", NULL, 0x1c, "Ljava.lang.String;", &GeogebraCommonCasGiacCASgiac_specialFunctions_, NULL,  },
    { "myeliminate_", NULL, 0x1c, "Ljava.lang.String;", &GeogebraCommonCasGiacCASgiac_myeliminate_, NULL,  },
    { "giacSetToGeoGebraMode_", NULL, 0x4, "Z", NULL, NULL,  },
    { "casParser_", NULL, 0x1, "Lgeogebra.common.cas.CASparser;", NULL, NULL,  },
    { "timeoutMillis_", NULL, 0x4, "J", NULL, NULL,  },
    { "inequality_", NULL, 0x1a, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonCasGiacCASgiac_inequality_, NULL,  },
    { "inequalitySimple_", NULL, 0x1a, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonCasGiacCASgiac_inequalitySimple_, NULL,  },
    { "inequalitySimpleInList_", NULL, 0x1a, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonCasGiacCASgiac_inequalitySimpleInList_, NULL,  },
    { "EVALFA_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonCasGiacCASgiac_EVALFA_, NULL,  },
    { "expSB_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonCasGiacCASgiac = { 2, "CASgiac", "geogebra.common.cas.giac", NULL, 0x401, 24, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonCasGiacCASgiac;
}

@end

void GeogebraCommonCasGiacCASgiac_initWithGeogebraCommonCasCASparser_(GeogebraCommonCasGiacCASgiac *self, GeogebraCommonCasCASparser *casParser) {
  NSObject_init(self);
  self->timeoutMillis_ = 5000;
  GeogebraCommonCasGiacCASgiac_setAndConsume_expSB_(self, new_JavaLangStringBuilder_initWithNSString_(GeogebraCommonCasGiacCASgiac_EVALFA_));
  GeogebraCommonCasGiacCASgiac_set_casParser_(self, casParser);
}

NSString *GeogebraCommonCasGiacCASgiac_evaluateRawWithNSString_(GeogebraCommonCasGiacCASgiac *self, NSString *input) {
  NSString *exp = input;
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"giac eval: ", exp));
  NSString *result = [self evaluateWithNSString:exp withLong:[self getTimeoutMilliseconds]];
  NSString *rtrimmed = [((NSString *) nil_chk(result)) trim];
  if ([((NSString *) nil_chk(rtrimmed)) hasPrefix:@"\""]) {
    if (![rtrimmed hasPrefix:@"\"["] && ![@"\"\"" isEqual:rtrimmed]) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"message from giac (assuming error) ", result));
      result = @"?";
    }
    else {
      result = [result substring:1 endIndex:((jint) [result length]) - 1];
    }
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"CASgiac.evaluateRaw: result: ", result));
  return result;
}

NSString *GeogebraCommonCasGiacCASgiac_getPlainResultWithGeogebraCommonKernelArithmeticValidExpression_withGeogebraCommonKernelKernel_(GeogebraCommonCasGiacCASgiac *self, GeogebraCommonKernelArithmeticValidExpression *casInput, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticCommand *cmd = [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(casInput)) getTopLevelCommand];
  if (cmd != nil && [@"Delete" isEqual:[cmd getName]]) {
    NSString *label = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([cmd getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) lookupLabelWithNSString:label];
    if (geo == nil) geo = [kernel lookupCasCellLabelWithNSString:label];
    if (geo != nil) {
      [geo remove];
    }
    return @"true";
  }
  NSString *giacInput = [((GeogebraCommonCasCASparser *) nil_chk(self->casParser_)) translateToCASWithGeogebraCommonKernelArithmeticValidExpression:casInput withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_giacTemplate_() withGeogebraCommonKernelCASGenericInterface:self];
  NSString *plainResult = [self evaluateCASWithNSString:giacInput];
  return plainResult;
}

NSString *GeogebraCommonCasGiacCASgiac_toGeoGebraStringWithNSString_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelStringTemplate_withGeogebraCommonKernelKernel_(GeogebraCommonCasGiacCASgiac *self, NSString *giacString, GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, GeogebraCommonKernelStringTemplate *tpl, GeogebraCommonKernelKernel *kernel) {
  @synchronized(self) {
    jboolean ggbvect = [((NSString *) nil_chk(giacString)) hasPrefix:@"ggbvect"];
    id<GeogebraCommonKernelArithmeticExpressionValue> ve = GeogebraCommonCasGiacCASgiac_replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelKernel_([((GeogebraCommonCasCASparser *) nil_chk(self->casParser_)) parseGiacWithNSString:giacString], arbconst, kernel);
    NSString *geogebraString = [self->casParser_ toGeoGebraStringWithGeogebraCommonKernelArithmeticExpressionValue:ve withGeogebraCommonKernelStringTemplate:tpl];
    if (ggbvect) {
      geogebraString = JreStrcat("$$C", @"ggbvect(", geogebraString, ')');
    }
    return geogebraString;
  }
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonCasGiacCASgiac_replaceRootsWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticMyArbitraryConstant_withGeogebraCommonKernelKernel_(id<GeogebraCommonKernelArithmeticExpressionValue> ve, GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonCasGiacCASgiac_initialize();
  if (ve != nil) {
    jboolean toRoot = [((GeogebraCommonMainSettingsCASSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication])) getSettings])) getCasSettings])) getShowExpAsRoots];
    ve = [ve traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_DiffReplacer_get_INSTANCE_()];
    [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ve)) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_PowerRootReplacer_getReplacerWithBoolean_(toRoot)];
    if (arbconst != nil) {
      [arbconst reset];
      [ve traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_ArbconstReplacer_getReplacerWithGeogebraCommonKernelArithmeticMyArbitraryConstant_(arbconst)];
    }
    GeogebraCommonKernelArithmeticTraversing_PrefixRemover *pr = GeogebraCommonKernelArithmeticTraversing_PrefixRemover_getCollector();
    [ve traverseWithGeogebraCommonKernelArithmeticTraversing:pr];
  }
  return ve;
}

NSString *GeogebraCommonCasGiacCASgiac_substitutionsStringWithJavaUtilHashMap_(JavaUtilHashMap *subst) {
  GeogebraCommonCasGiacCASgiac_initialize();
  NSString *ret = @"";
  id<JavaUtilIterator> it = [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(subst)) keySet])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelProverPolynomialVariable *v = [it next];
    ret = JreStrcat("$$", ret, JreStrcat("C$C@", ',', [((GeogebraCommonKernelProverPolynomialVariable *) nil_chk(v)) description], '=', [subst getWithId:v]));
  }
  if (((jint) [ret length]) > 0) return [ret substring:1];
  return @"";
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonCasGiacCASgiac)
