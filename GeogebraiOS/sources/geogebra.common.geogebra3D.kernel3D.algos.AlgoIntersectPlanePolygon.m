//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectPlanePolygon.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/HasSegments.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon, plane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)plane
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, plane, p);
  return self;
}

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_set_plane_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]));
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return plane_;
}

- (void)setIntersectionLine {
  IOSObjectArray *intersection = GeogebraCommonKernelMatrixCoordMatrixUtil_intersectPlanesWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoordMatrix_([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(plane_)) getCoordSys])) getMatrixOrthonormal], [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(((GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(p_, [GeogebraCommonKernelGeosGeoPolygon class])))) getCoordSys])) getMatrixOrthonormal]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_o1_(self, IOSObjectArray_Get(nil_chk(intersection), 0));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_d1_(self, IOSObjectArray_Get(intersection, 1));
}

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  [self intersectionsCoordsContainedWithGeogebraCommonKernelKernelNDHasSegments:p withJavaUtilTreeMap:newCoords];
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)dealloc {
  RELEASE_(plane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoIntersectPlanePolygon", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon = { 2, "AlgoIntersectPlanePolygon", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, plane, p);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, plane, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectPlanePolygon)
