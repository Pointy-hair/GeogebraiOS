//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/inputfield/ColorProvider.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "com/google/gwt/regexp/shared/SplitResult.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/gui/inputfield/ColorProvider.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoGebraColorConstants.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"
#include "java/util/Set.h"

#define GeogebraCommonGuiInputfieldColorProvider_TEXT_LENGHT_LIMIT 1000

@interface GeogebraCommonGuiInputfieldColorProvider () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  id<JavaUtilSet> labels_;
  id<JavaUtilSet> locals_;
  GeogebraCommonKernelParserCashandlersParserFunctions *pf_;
  id<JavaUtilList> definedObjectsIntervals_;
  id<JavaUtilList> undefinedObjectsIntervals_;
  id<JavaUtilList> ignoreIntervals_;
  id<JavaUtilList> localVariableIntervals_;
  NSString *text_;
  jboolean isCasInput_;
  ComGoogleGwtRegexpSharedRegExp *commandReg_;
  ComGoogleGwtRegexpSharedRegExp *commandParamReg_;
  ComGoogleGwtRegexpSharedRegExp *splitter_;
  ComGoogleGwtRegexpSharedRegExp *assignmentReg_;
}

+ (ComGoogleGwtRegexpSharedRegExp *)createAssignmentRegExpWithBoolean:(jboolean)isCasInput;

- (void)getIntervals;

- (void)getIntervalsRecursivelyWithNSString:(NSString *)text1
                                    withInt:(jint)startIndex;

- (ComGoogleGwtRegexpSharedSplitResult *)getVariablesWithNSString:(NSString *)vars;

+ (NSString *)trimVarWithNSString:(NSString *)var;

+ (void)addToWithJavaUtilList:(id<JavaUtilList>)list
                      withInt:(jint)s
                      withInt:(jint)e;

- (void)addToIntervalWithNSString:(NSString *)label
                          withInt:(jint)s
                          withInt:(jint)len;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, labels_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, locals_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, pf_, GeogebraCommonKernelParserCashandlersParserFunctions *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, definedObjectsIntervals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, undefinedObjectsIntervals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, ignoreIntervals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, localVariableIntervals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, text_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, commandReg_, ComGoogleGwtRegexpSharedRegExp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, commandParamReg_, ComGoogleGwtRegexpSharedRegExp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, splitter_, ComGoogleGwtRegexpSharedRegExp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider, assignmentReg_, ComGoogleGwtRegexpSharedRegExp *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, TEXT_LENGHT_LIMIT, jint)

static NSString *GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_ = @"((\\p{L}\\p{M}*)(\\p{L}\\p{M}*|\\p{Nd})*(\\_\\{+(\\P{M}\\p{M}*)+\\}|\\_(\\P{M}\\p{M})?)?(\\p{L}\\p{M}|\\p{Nd})*)";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, LABEL_REGEX_STRING_, NSString *)

static NSString *GeogebraCommonGuiInputfieldColorProvider_LABEL_PARAM_ = @"((\\p{L}\\p{M}*)(\\p{L}\\p{M}*|\\p{Nd})*(\\_\\{+(\\P{M}\\p{M}*)+\\}|\\_(\\P{M}\\p{M})?)?(\\p{L}\\p{M}|\\p{Nd})*)(\\(|\\[)?";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, LABEL_PARAM_, NSString *)

static NSString *GeogebraCommonGuiInputfieldColorProvider_STRING_ = @"((\\P{M}\\p{M}*)*)";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, STRING_, NSString *)

static NSString *GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_ = @"\\p{Z}*";
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, WHITESPACE_, NSString *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFINED_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, COLOR_DEFINED_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiInputfieldColorProvider_COLOR_UNDEFINED_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, COLOR_UNDEFINED_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiInputfieldColorProvider_COLOR_LOCAL_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, COLOR_LOCAL_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiInputfieldColorProvider, COLOR_DEFAULT_, GeogebraCommonAwtGColor *)

__attribute__((unused)) static ComGoogleGwtRegexpSharedRegExp *GeogebraCommonGuiInputfieldColorProvider_createAssignmentRegExpWithBoolean_(jboolean isCasInput);

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_getIntervals(GeogebraCommonGuiInputfieldColorProvider *self);

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_getIntervalsRecursivelyWithNSString_withInt_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *text1, jint startIndex);

__attribute__((unused)) static ComGoogleGwtRegexpSharedSplitResult *GeogebraCommonGuiInputfieldColorProvider_getVariablesWithNSString_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *vars);

__attribute__((unused)) static NSString *GeogebraCommonGuiInputfieldColorProvider_trimVarWithNSString_(NSString *var);

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(id<JavaUtilList> list, jint s, jint e);

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_addToIntervalWithNSString_withInt_withInt_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *label, jint s, jint len);

@interface GeogebraCommonGuiInputfieldColorProvider_MyMatchResult : NSObject {
 @public
  jint index_;
  NSString *input_;
  id<JavaUtilList> groups_;
  jboolean isCommand__;
}

- (instancetype)initWithGeogebraCommonGuiInputfieldColorProvider:(GeogebraCommonGuiInputfieldColorProvider *)outer$
                                                         withInt:(jint)index
                                                    withNSString:(NSString *)input
                                                withJavaUtilList:(id<JavaUtilList>)groups
                                                     withBoolean:(jboolean)isCommand;

- (jboolean)isCommand;

- (void)setCommandWithBoolean:(jboolean)isCommand;

- (jint)getIndex;

- (NSString *)getGroupWithInt:(jint)i;

- (NSString *)getInput;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult)

J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult, input_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult, groups_, id<JavaUtilList>)

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *self, GeogebraCommonGuiInputfieldColorProvider *outer$, jint index, NSString *input, id<JavaUtilList> groups, jboolean isCommand);

__attribute__((unused)) static GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *new_GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(GeogebraCommonGuiInputfieldColorProvider *outer$, jint index, NSString *input, id<JavaUtilList> groups, jboolean isCommand) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult)

@interface GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp : NSObject {
 @public
  GeogebraCommonGuiInputfieldColorProvider *this$0_;
  ComGoogleGwtRegexpSharedRegExp *regExp_;
  NSString *input_;
  NSString *text_;
  jint index_;
}

- (instancetype)initWithGeogebraCommonGuiInputfieldColorProvider:(GeogebraCommonGuiInputfieldColorProvider *)outer$
                                                    withNSString:(NSString *)text;

- (GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *)exec;

- (void)setTextWithNSString:(NSString *)text;

- (jchar)getClosingBracketWithNSString:(NSString *)openingBracket;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp)

J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp, this$0_, GeogebraCommonGuiInputfieldColorProvider *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp, regExp_, ComGoogleGwtRegexpSharedRegExp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp, input_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp, text_, NSString *)

__attribute__((unused)) static void GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *self, GeogebraCommonGuiInputfieldColorProvider *outer$, NSString *text);

__attribute__((unused)) static GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *new_GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(GeogebraCommonGuiInputfieldColorProvider *outer$, NSString *text) NS_RETURNS_RETAINED;

__attribute__((unused)) static jchar GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_getClosingBracketWithNSString_(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *self, NSString *openingBracket);

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiInputfieldColorProvider)

@implementation GeogebraCommonGuiInputfieldColorProvider

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                  withBoolean:(jboolean)isCasInput1 {
  GeogebraCommonGuiInputfieldColorProvider_initWithGeogebraCommonMainApp_withBoolean_(self, app, isCasInput1);
  return self;
}

- (void)setTextWithNSString:(NSString *)text1 {
  GeogebraCommonGuiInputfieldColorProvider_set_text_(self, text1);
  if (((jint) [((NSString *) nil_chk(text1)) length]) > GeogebraCommonGuiInputfieldColorProvider_TEXT_LENGHT_LIMIT) {
    return;
  }
  GeogebraCommonGuiInputfieldColorProvider_getIntervals(self);
}

- (GeogebraCommonAwtGColor *)getColorWithInt:(jint)i {
  for (IOSObjectArray * __strong in in nil_chk(definedObjectsIntervals_)) {
    if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(in), 0))) intValue] <= i && [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(in, 1))) intValue] > i) {
      return GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFINED_;
    }
  }
  for (IOSObjectArray * __strong in in nil_chk(localVariableIntervals_)) {
    if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(in), 0))) intValue] <= i && [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(in, 1))) intValue] > i) {
      return GeogebraCommonGuiInputfieldColorProvider_COLOR_LOCAL_;
    }
  }
  if (isCasInput_) {
    return GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_;
  }
  for (IOSObjectArray * __strong in in nil_chk(ignoreIntervals_)) {
    if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(in), 0))) intValue] <= i && [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(in, 1))) intValue] > i) {
      return GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_;
    }
  }
  for (IOSObjectArray * __strong in in nil_chk(undefinedObjectsIntervals_)) {
    if ([((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(in), 0))) intValue] <= i && [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(in, 1))) intValue] > i) {
      return GeogebraCommonGuiInputfieldColorProvider_COLOR_UNDEFINED_;
    }
  }
  return GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_;
}

- (void)setIsCasInputWithBoolean:(jboolean)isCasInput1 {
  if (isCasInput_ != isCasInput1) {
    isCasInput_ = isCasInput1;
    GeogebraCommonGuiInputfieldColorProvider_set_assignmentReg_(self, GeogebraCommonGuiInputfieldColorProvider_createAssignmentRegExpWithBoolean_(isCasInput_));
  }
}

+ (ComGoogleGwtRegexpSharedRegExp *)createAssignmentRegExpWithBoolean:(jboolean)isCasInput {
  return GeogebraCommonGuiInputfieldColorProvider_createAssignmentRegExpWithBoolean_(isCasInput);
}

- (void)getIntervals {
  GeogebraCommonGuiInputfieldColorProvider_getIntervals(self);
}

- (void)getIntervalsRecursivelyWithNSString:(NSString *)text1
                                    withInt:(jint)startIndex {
  GeogebraCommonGuiInputfieldColorProvider_getIntervalsRecursivelyWithNSString_withInt_(self, text1, startIndex);
}

- (ComGoogleGwtRegexpSharedSplitResult *)getVariablesWithNSString:(NSString *)vars {
  return GeogebraCommonGuiInputfieldColorProvider_getVariablesWithNSString_(self, vars);
}

+ (NSString *)trimVarWithNSString:(NSString *)var {
  return GeogebraCommonGuiInputfieldColorProvider_trimVarWithNSString_(var);
}

+ (void)addToWithJavaUtilList:(id<JavaUtilList>)list
                      withInt:(jint)s
                      withInt:(jint)e {
  GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(list, s, e);
}

- (void)addToIntervalWithNSString:(NSString *)label
                          withInt:(jint)s
                          withInt:(jint)len {
  GeogebraCommonGuiInputfieldColorProvider_addToIntervalWithNSString_withInt_withInt_(self, label, s, len);
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(labels_);
  RELEASE_(locals_);
  RELEASE_(pf_);
  RELEASE_(definedObjectsIntervals_);
  RELEASE_(undefinedObjectsIntervals_);
  RELEASE_(ignoreIntervals_);
  RELEASE_(localVariableIntervals_);
  RELEASE_(text_);
  RELEASE_(commandReg_);
  RELEASE_(commandParamReg_);
  RELEASE_(splitter_);
  RELEASE_(assignmentReg_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiInputfieldColorProvider class]) {
    JreStrongAssign(&GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFINED_, nil, GeogebraCommonMainGeoGebraColorConstants_get_DEFINED_OBJECT_COLOR_());
    JreStrongAssign(&GeogebraCommonGuiInputfieldColorProvider_COLOR_UNDEFINED_, nil, GeogebraCommonMainGeoGebraColorConstants_get_UNDEFINED_OBJECT_COLOR_());
    JreStrongAssign(&GeogebraCommonGuiInputfieldColorProvider_COLOR_LOCAL_, nil, GeogebraCommonMainGeoGebraColorConstants_get_LOCAL_OBJECT_COLOR_());
    JreStrongAssign(&GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_, nil, GeogebraCommonMainGeoGebraColorConstants_get_BLACK_());
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiInputfieldColorProvider)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withBoolean:", "ColorProvider", NULL, 0x1, NULL, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL, NULL },
    { "getColorWithInt:", "getColor", "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "setIsCasInputWithBoolean:", "setIsCasInput", "V", 0x1, NULL, NULL },
    { "createAssignmentRegExpWithBoolean:", "createAssignmentRegExp", "Lcom.google.gwt.regexp.shared.RegExp;", 0xa, NULL, NULL },
    { "getIntervals", NULL, "V", 0x2, NULL, NULL },
    { "getIntervalsRecursivelyWithNSString:withInt:", "getIntervalsRecursively", "V", 0x2, NULL, NULL },
    { "getVariablesWithNSString:", "getVariables", "Lcom.google.gwt.regexp.shared.SplitResult;", 0x2, NULL, NULL },
    { "trimVarWithNSString:", "trimVar", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "addToWithJavaUtilList:withInt:withInt:", "addTo", "V", 0xa, NULL, NULL },
    { "addToIntervalWithNSString:withInt:withInt:", "addToInterval", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "TEXT_LENGHT_LIMIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiInputfieldColorProvider_TEXT_LENGHT_LIMIT },
    { "LABEL_REGEX_STRING_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_, NULL,  },
    { "LABEL_PARAM_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiInputfieldColorProvider_LABEL_PARAM_, NULL,  },
    { "STRING_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiInputfieldColorProvider_STRING_, NULL,  },
    { "WHITESPACE_", NULL, 0x1a, "Ljava.lang.String;", &GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, NULL,  },
    { "COLOR_DEFINED_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFINED_, NULL,  },
    { "COLOR_UNDEFINED_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiInputfieldColorProvider_COLOR_UNDEFINED_, NULL,  },
    { "COLOR_LOCAL_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiInputfieldColorProvider_COLOR_LOCAL_, NULL,  },
    { "COLOR_DEFAULT_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonGuiInputfieldColorProvider_COLOR_DEFAULT_, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "labels_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "locals_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Ljava/lang/String;>;",  },
    { "pf_", NULL, 0x2, "Lgeogebra.common.kernel.parser.cashandlers.ParserFunctions;", NULL, NULL,  },
    { "definedObjectsIntervals_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[Ljava/lang/Integer;;>;",  },
    { "undefinedObjectsIntervals_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[Ljava/lang/Integer;;>;",  },
    { "ignoreIntervals_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[Ljava/lang/Integer;;>;",  },
    { "localVariableIntervals_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[Ljava/lang/Integer;;>;",  },
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "isCasInput_", NULL, 0x2, "Z", NULL, NULL,  },
    { "commandReg_", NULL, 0x2, "Lcom.google.gwt.regexp.shared.RegExp;", NULL, NULL,  },
    { "commandParamReg_", NULL, 0x2, "Lcom.google.gwt.regexp.shared.RegExp;", NULL, NULL,  },
    { "splitter_", NULL, 0x2, "Lcom.google.gwt.regexp.shared.RegExp;", NULL, NULL,  },
    { "assignmentReg_", NULL, 0x2, "Lcom.google.gwt.regexp.shared.RegExp;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.inputfield.ColorProvider$MyMatchResult;", "Lgeogebra.common.gui.inputfield.ColorProvider$MyLabelParamRegExp;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiInputfieldColorProvider = { 2, "ColorProvider", "geogebra.common.gui.inputfield", NULL, 0x1, 11, methods, 23, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiInputfieldColorProvider;
}

@end

void GeogebraCommonGuiInputfieldColorProvider_initWithGeogebraCommonMainApp_withBoolean_(GeogebraCommonGuiInputfieldColorProvider *self, GeogebraCommonMainApp *app, jboolean isCasInput1) {
  NSObject_init(self);
  GeogebraCommonGuiInputfieldColorProvider_set_commandReg_(self, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(JreStrcat("$$$$", GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_, @"\\[(", GeogebraCommonGuiInputfieldColorProvider_STRING_, @"|,)\\]"), @"g"));
  GeogebraCommonGuiInputfieldColorProvider_set_commandParamReg_(self, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_withNSString_(@"<(\\p{L}\\p{M}*| |\\-)*>", @"g"));
  GeogebraCommonGuiInputfieldColorProvider_set_splitter_(self, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@","));
  GeogebraCommonGuiInputfieldColorProvider_set_assignmentReg_(self, GeogebraCommonGuiInputfieldColorProvider_createAssignmentRegExpWithBoolean_(self->isCasInput_));
  GeogebraCommonGuiInputfieldColorProvider_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
  [self setIsCasInputWithBoolean:isCasInput1];
  GeogebraCommonGuiInputfieldColorProvider_set_labels_(self, nil);
  GeogebraCommonGuiInputfieldColorProvider_set_locals_(self, nil);
  GeogebraCommonGuiInputfieldColorProvider_setAndConsume_definedObjectsIntervals_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiInputfieldColorProvider_setAndConsume_undefinedObjectsIntervals_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiInputfieldColorProvider_setAndConsume_ignoreIntervals_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiInputfieldColorProvider_setAndConsume_localVariableIntervals_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiInputfieldColorProvider_set_pf_(self, [app getParserFunctions]);
  GeogebraCommonGuiInputfieldColorProvider_set_text_(self, @"");
}

GeogebraCommonGuiInputfieldColorProvider *new_GeogebraCommonGuiInputfieldColorProvider_initWithGeogebraCommonMainApp_withBoolean_(GeogebraCommonMainApp *app, jboolean isCasInput1) {
  GeogebraCommonGuiInputfieldColorProvider *self = [GeogebraCommonGuiInputfieldColorProvider alloc];
  GeogebraCommonGuiInputfieldColorProvider_initWithGeogebraCommonMainApp_withBoolean_(self, app, isCasInput1);
  return self;
}

ComGoogleGwtRegexpSharedRegExp *GeogebraCommonGuiInputfieldColorProvider_createAssignmentRegExpWithBoolean_(jboolean isCasInput) {
  GeogebraCommonGuiInputfieldColorProvider_initialize();
  return ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(JreStrcat("C$$$$$$$C$$$$$$$", '^', GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_, @"(\\(", GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, @"((", GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_, GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, ',', GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, @")*)", GeogebraCommonGuiInputfieldColorProvider_LABEL_REGEX_STRING_, GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, @"\\))", GeogebraCommonGuiInputfieldColorProvider_WHITESPACE_, (!isCasInput ? @"(\\:\\=|\\=)" : @"(\\:\\=)")));
}

void GeogebraCommonGuiInputfieldColorProvider_getIntervals(GeogebraCommonGuiInputfieldColorProvider *self) {
  if (self->isCasInput_) {
    GeogebraCommonGuiInputfieldColorProvider_set_labels_(self, [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) getAllLabels]);
  }
  else {
    GeogebraCommonGuiInputfieldColorProvider_set_labels_(self, [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) getAllGeoLabels]);
  }
  GeogebraCommonGuiInputfieldColorProvider_setAndConsume_locals_(self, new_JavaUtilHashSet_init());
  [((id<JavaUtilList>) nil_chk(self->definedObjectsIntervals_)) clear];
  [((id<JavaUtilList>) nil_chk(self->undefinedObjectsIntervals_)) clear];
  [((id<JavaUtilList>) nil_chk(self->ignoreIntervals_)) clear];
  [((id<JavaUtilList>) nil_chk(self->localVariableIntervals_)) clear];
  ComGoogleGwtRegexpSharedMatchResult *res;
  if (!self->isCasInput_) {
    while ((res = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(self->commandReg_)) execWithNSString:self->text_]) != nil) {
      jint i = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(res)) getIndex];
      [self->ignoreIntervals_ addWithId:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i), JavaLangInteger_valueOfWithInt_(i + ((jint) [((NSString *) nil_chk([res getGroupWithInt:1])) length])) } count:2 type:JavaLangInteger_class_()]];
    }
    while ((res = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(self->commandParamReg_)) execWithNSString:self->text_]) != nil) {
      jint i = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(res)) getIndex];
      [self->ignoreIntervals_ addWithId:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i), JavaLangInteger_valueOfWithInt_(i + ((jint) [((NSString *) nil_chk([res getGroupWithInt:0])) length])) } count:2 type:JavaLangInteger_class_()]];
    }
  }
  res = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(self->assignmentReg_)) execWithNSString:self->text_];
  if (res != nil) {
    NSString *label = [res getGroupWithInt:1];
    if ([((id<JavaUtilSet>) nil_chk(self->labels_)) containsWithId:label]) {
      GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(self->definedObjectsIntervals_, 0, ((jint) [((NSString *) nil_chk(label)) length]));
    }
    ComGoogleGwtRegexpSharedSplitResult *split = GeogebraCommonGuiInputfieldColorProvider_getVariablesWithNSString_(self, [res getGroupWithInt:8]);
    for (jint i = 0; i < [((ComGoogleGwtRegexpSharedSplitResult *) nil_chk(split)) length]; i++) {
      NSString *var = [split getWithInt:i];
      NSString *trimmedVar = GeogebraCommonGuiInputfieldColorProvider_trimVarWithNSString_(var);
      [self->locals_ addWithId:trimmedVar];
    }
  }
  GeogebraCommonGuiInputfieldColorProvider_getIntervalsRecursivelyWithNSString_withInt_(self, self->text_, 0);
}

void GeogebraCommonGuiInputfieldColorProvider_getIntervalsRecursivelyWithNSString_withInt_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *text1, jint startIndex) {
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *labelParam = [new_GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(self, text1) autorelease];
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *res = nil;
  while ((res = [labelParam exec]) != nil) {
    NSString *label = [((GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *) nil_chk(res)) getGroupWithInt:0];
    NSString *params = [res getGroupWithInt:1];
    if (![res isCommand]) {
      GeogebraCommonGuiInputfieldColorProvider_addToIntervalWithNSString_withInt_withInt_(self, label, startIndex + [res getIndex], ((jint) [((NSString *) nil_chk(label)) length]));
    }
    ComGoogleGwtRegexpSharedSplitResult *split = GeogebraCommonGuiInputfieldColorProvider_getVariablesWithNSString_(self, params);
    jint j = startIndex + [res getIndex] + ((jint) [((NSString *) nil_chk(label)) length]);
    if (split != nil) {
      for (jint i = 0; i < [split length]; i++) {
        NSString *sub = [split getWithInt:i];
        GeogebraCommonGuiInputfieldColorProvider_getIntervalsRecursivelyWithNSString_withInt_(self, sub, j);
        j += ((jint) [((NSString *) nil_chk(sub)) length]) + 1;
      }
    }
  }
}

ComGoogleGwtRegexpSharedSplitResult *GeogebraCommonGuiInputfieldColorProvider_getVariablesWithNSString_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *vars) {
  return vars == nil ? nil : [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(self->splitter_)) splitWithNSString:vars];
}

NSString *GeogebraCommonGuiInputfieldColorProvider_trimVarWithNSString_(NSString *var) {
  GeogebraCommonGuiInputfieldColorProvider_initialize();
  NSString *ret = var;
  if ([((NSString *) nil_chk(ret)) charAtWithInt:0] == '(') ret = [ret substring:1];
  if ([ret charAtWithInt:((jint) [((NSString *) nil_chk(ret)) length]) - 1] == ')') ret = [ret substring:0 endIndex:((jint) [ret length]) - 1];
  return [((NSString *) nil_chk(ret)) trim];
}

void GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(id<JavaUtilList> list, jint s, jint e) {
  GeogebraCommonGuiInputfieldColorProvider_initialize();
  [((id<JavaUtilList>) nil_chk(list)) addWithId:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(s), JavaLangInteger_valueOfWithInt_(e) } count:2 type:JavaLangInteger_class_()]];
}

void GeogebraCommonGuiInputfieldColorProvider_addToIntervalWithNSString_withInt_withInt_(GeogebraCommonGuiInputfieldColorProvider *self, NSString *label, jint s, jint len) {
  if ([((id<JavaUtilSet>) nil_chk(self->locals_)) containsWithId:label]) {
    GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(self->localVariableIntervals_, s, s + len);
  }
  else if ([((id<JavaUtilSet>) nil_chk(self->labels_)) containsWithId:label]) {
    GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(self->definedObjectsIntervals_, s, s + len);
  }
  else if (!self->isCasInput_ && ![((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk(self->pf_)) isReservedWithNSString:label]) {
    GeogebraCommonGuiInputfieldColorProvider_addToWithJavaUtilList_withInt_withInt_(self->undefinedObjectsIntervals_, s, s + len);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiInputfieldColorProvider)

@implementation GeogebraCommonGuiInputfieldColorProvider_MyMatchResult

- (instancetype)initWithGeogebraCommonGuiInputfieldColorProvider:(GeogebraCommonGuiInputfieldColorProvider *)outer$
                                                         withInt:(jint)index
                                                    withNSString:(NSString *)input
                                                withJavaUtilList:(id<JavaUtilList>)groups
                                                     withBoolean:(jboolean)isCommand {
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(self, outer$, index, input, groups, isCommand);
  return self;
}

- (jboolean)isCommand {
  return isCommand__;
}

- (void)setCommandWithBoolean:(jboolean)isCommand {
  self->isCommand__ = isCommand;
}

- (jint)getIndex {
  return index_;
}

- (NSString *)getGroupWithInt:(jint)i {
  return [((id<JavaUtilList>) nil_chk(groups_)) getWithInt:i];
}

- (NSString *)getInput {
  return input_;
}

- (void)dealloc {
  RELEASE_(input_);
  RELEASE_(groups_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiInputfieldColorProvider:withInt:withNSString:withJavaUtilList:withBoolean:", "MyMatchResult", NULL, 0x1, NULL, NULL },
    { "isCommand", NULL, "Z", 0x1, NULL, NULL },
    { "setCommandWithBoolean:", "setCommand", "V", 0x1, NULL, NULL },
    { "getIndex", NULL, "I", 0x1, NULL, NULL },
    { "getGroupWithInt:", "getGroup", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getInput", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
    { "input_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "groups_", NULL, 0x0, "Ljava.util.List;", NULL, "Ljava/util/List<Ljava/lang/String;>;",  },
    { "isCommand__", "isCommand", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiInputfieldColorProvider_MyMatchResult = { 2, "MyMatchResult", "geogebra.common.gui.inputfield", "ColorProvider", 0x2, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiInputfieldColorProvider_MyMatchResult;
}

@end

void GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *self, GeogebraCommonGuiInputfieldColorProvider *outer$, jint index, NSString *input, id<JavaUtilList> groups, jboolean isCommand) {
  NSObject_init(self);
  self->index_ = index;
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_set_input_(self, input);
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_set_groups_(self, groups);
  [self setCommandWithBoolean:isCommand];
}

GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *new_GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(GeogebraCommonGuiInputfieldColorProvider *outer$, jint index, NSString *input, id<JavaUtilList> groups, jboolean isCommand) {
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *self = [GeogebraCommonGuiInputfieldColorProvider_MyMatchResult alloc];
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(self, outer$, index, input, groups, isCommand);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiInputfieldColorProvider_MyMatchResult)

@implementation GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp

- (instancetype)initWithGeogebraCommonGuiInputfieldColorProvider:(GeogebraCommonGuiInputfieldColorProvider *)outer$
                                                    withNSString:(NSString *)text {
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(self, outer$, text);
  return self;
}

- (GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *)exec {
  ComGoogleGwtRegexpSharedMatchResult *res = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(regExp_)) execWithNSString:text_];
  if (res == nil) {
    return nil;
  }
  NSString *label = [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(res)) getGroupWithInt:1];
  NSString *openingBracket = [res getGroupWithInt:8];
  id<JavaUtilList> groups = [new_JavaUtilArrayList_initWithInt_(2) autorelease];
  [groups addWithId:label];
  GeogebraCommonGuiInputfieldColorProvider_MyMatchResult *ret;
  jint step = 0;
  NSString *params = nil;
  if (openingBracket == nil) {
    step = [res getIndex] + ((jint) [((NSString *) nil_chk(label)) length]);
  }
  else {
    jint paramsStart = [res getIndex] + ((jint) [((NSString *) nil_chk(label)) length]);
    jint i = paramsStart + 1;
    jint nrOfBrackets = 1;
    jchar closingBracket = GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_getClosingBracketWithNSString_(self, openingBracket);
    for (; i < ((jint) [((NSString *) nil_chk(text_)) length]) && nrOfBrackets != 0; i++) {
      if ([text_ charAtWithInt:i] == [openingBracket charAtWithInt:0]) nrOfBrackets++;
      else if ([text_ charAtWithInt:i] == closingBracket) nrOfBrackets--;
    }
    params = [text_ substring:paramsStart endIndex:i];
    step = paramsStart + ((jint) [((NSString *) nil_chk(params)) length]);
  }
  [groups addWithId:params];
  ret = [new_GeogebraCommonGuiInputfieldColorProvider_MyMatchResult_initWithGeogebraCommonGuiInputfieldColorProvider_withInt_withNSString_withJavaUtilList_withBoolean_(this$0_, index_ + [res getIndex], input_, groups, [@"[" isEqual:openingBracket]) autorelease];
  index_ += step;
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_set_text_(self, [((NSString *) nil_chk(text_)) substring:step]);
  return ret;
}

- (void)setTextWithNSString:(NSString *)text {
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_set_text_(self, text);
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_set_input_(self, text);
  index_ = 0;
}

- (jchar)getClosingBracketWithNSString:(NSString *)openingBracket {
  return GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_getClosingBracketWithNSString_(self, openingBracket);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(regExp_);
  RELEASE_(input_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiInputfieldColorProvider:withNSString:", "MyLabelParamRegExp", NULL, 0x1, NULL, NULL },
    { "exec", NULL, "Lgeogebra.common.gui.inputfield.ColorProvider$MyMatchResult;", 0x1, NULL, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL, NULL },
    { "getClosingBracketWithNSString:", "getClosingBracket", "C", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.gui.inputfield.ColorProvider;", NULL, NULL,  },
    { "regExp_", NULL, 0x0, "Lcom.google.gwt.regexp.shared.RegExp;", NULL, NULL,  },
    { "input_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "text_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "index_", NULL, 0x0, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp = { 2, "MyLabelParamRegExp", "geogebra.common.gui.inputfield", "ColorProvider", 0x2, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp;
}

@end

void GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *self, GeogebraCommonGuiInputfieldColorProvider *outer$, NSString *text) {
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_set_this$0_(self, outer$);
  NSObject_init(self);
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_set_regExp_(self, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(GeogebraCommonGuiInputfieldColorProvider_get_LABEL_PARAM_()));
  [self setTextWithNSString:text];
}

GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *new_GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(GeogebraCommonGuiInputfieldColorProvider *outer$, NSString *text) {
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *self = [GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp alloc];
  GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_initWithGeogebraCommonGuiInputfieldColorProvider_withNSString_(self, outer$, text);
  return self;
}

jchar GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp_getClosingBracketWithNSString_(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp *self, NSString *openingBracket) {
  if ([@"[" isEqual:openingBracket]) {
    return ']';
  }
  return ')';
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiInputfieldColorProvider_MyLabelParamRegExp)
