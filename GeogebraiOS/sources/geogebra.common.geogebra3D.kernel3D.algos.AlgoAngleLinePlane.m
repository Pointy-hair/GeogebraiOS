//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLinePlane.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLinePlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> g_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p_;
  GeogebraCommonKernelGeosGeoAngle *angle_;
  GeogebraCommonKernelMatrixCoords *vn_, *o_, *v1_, *v2_;
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
           withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, g_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, p_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, angle_, GeogebraCommonKernelGeosGeoAngle *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, vn_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, o_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, v1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane, v2_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_newGeoAngleWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, GeogebraCommonKernelConstruction *cons);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, g, p);
  return self;
}

- (GeogebraCommonKernelGeosGeoAngle *)newGeoAngleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_newGeoAngleWithGeogebraCommonKernelConstruction_(self, cons);
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
           withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, g, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, label, g, p);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) copy__], [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(p_)) copy__]) autorelease];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, p_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(p_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)initCoords {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_setAndConsume_o_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_compute(self);
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  if (drawable == nil) {
    return NO;
  }
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(o_)) isDefined]) {
    return NO;
  }
  GeogebraCommonKernelMatrixCoords *ov = [((GeogebraCommonEuclidianDrawDrawAngle *) nil_chk(drawable)) getCoordsInViewWithGeogebraCommonKernelMatrixCoords:o_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:ov]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(m), 0) = IOSDoubleArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(ov)) get]), 0);
  *IOSDoubleArray_GetRef(m, 1) = IOSDoubleArray_Get(nil_chk([ov get]), 1);
  GeogebraCommonKernelMatrixCoords *v1v = [drawable getCoordsInViewWithGeogebraCommonKernelMatrixCoords:v2_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:v1v]) {
    return NO;
  }
  GeogebraCommonKernelMatrixCoords *v2v = [drawable getCoordsInViewWithGeogebraCommonKernelMatrixCoords:v1_];
  if (![drawable inViewWithGeogebraCommonKernelMatrixCoords:v2v]) {
    return NO;
  }
  *IOSDoubleArray_GetRef(nil_chk(firstVec), 0) = IOSDoubleArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(v1v)) get]), 0);
  *IOSDoubleArray_GetRef(firstVec, 1) = IOSDoubleArray_Get(nil_chk([v1v get]), 1);
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getVn {
  return vn_;
}

- (jboolean)getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(o_)) isDefined]) {
    return NO;
  }
  IOSObjectArray_Set(nil_chk(drawCoords), 0, o_);
  IOSObjectArray_Set(drawCoords, 1, v2_);
  IOSObjectArray_Set(drawCoords, 2, v1_);
  return YES;
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(p_);
  RELEASE_(angle_);
  RELEASE_(vn_);
  RELEASE_(o_);
  RELEASE_(v1_);
  RELEASE_(v2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAngleLinePlane", NULL, 0x0, NULL, NULL },
    { "newGeoAngleWithGeogebraCommonKernelConstruction:", "newGeoAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x14, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAngleLinePlane", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAngleLinePlane", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoAngleLinePlane;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getVn", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "p_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "vn_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "o_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "v1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "v2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane = { 2, "AlgoAngleLinePlane", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 13, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_g_(self, g);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_p_(self, p);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_angle_(self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_newGeoAngleWithGeogebraCommonKernelConstruction_(self, cons));
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_compute(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, g, p);
  return self;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_newGeoAngleWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelGeosGeoAngle *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [ret setDrawableWithBoolean:YES];
  return ret;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_withBoolean_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class])))) getConstruction], NO);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_g_(self, g);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_p_(self, p);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, g, p);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, g, p);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, label, g, p);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane *self) {
  GeogebraCommonKernelMatrixCoords *o2 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(self->g_)) getStartInhomCoords];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_v2_(self, [self->g_ getDirectionInD3]);
  GeogebraCommonKernelMatrixCoordMatrix4x4 *pMat = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->p_)) getCoordSys])) getMatrixOrthonormal];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(o2)) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:pMat withGeogebraCommonKernelMatrixCoords:self->v2_ withGeogebraCommonKernelMatrixCoords:self->o_];
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(self->o_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:0];
    return;
  }
  GeogebraCommonKernelMatrixCoords *vx = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(pMat)) getVx];
  GeogebraCommonKernelMatrixCoords *vy = [pMat getVy];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_v1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(vx)) mulWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(self->v2_)) dotproductWithGeogebraCommonKernelMatrixCoords:vx]])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(vy)) mulWithDouble:[self->v2_ dotproductWithGeogebraCommonKernelMatrixCoords:vy]]]);
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->v1_)) isZero]) {
    [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:JavaLangMath_PI / 2];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_v1_(self, vx);
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_vn_(self, [vy mulWithDouble:-1]);
    return;
  }
  [self->v1_ calcNorm];
  jdouble l1 = [self->v1_ getNorm];
  [self->v2_ calcNorm];
  jdouble l2 = [self->v2_ getNorm];
  jdouble c = [self->v1_ dotproductWithGeogebraCommonKernelMatrixCoords:self->v2_] / (l1 * l2);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_acosWithDouble_(c)];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane_set_vn_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([self->v2_ crossProduct4WithGeogebraCommonKernelMatrixCoords:self->v1_])) normalize]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLinePlane)
