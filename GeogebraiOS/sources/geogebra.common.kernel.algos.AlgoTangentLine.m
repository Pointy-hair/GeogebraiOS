//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTangentLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoTangentLine.h"
#include "geogebra/common/kernel/algos/AlgoTangentLineND.h"
#include "geogebra/common/kernel/algos/AlgoTangentPoint.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelAlgosAlgoTangentLine () {
 @public
  GeogebraCommonKernelGeosGeoVector *direction_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTangentLine, direction_, GeogebraCommonKernelGeosGeoVector *)

@implementation GeogebraCommonKernelAlgosAlgoTangentLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

- (void)initDiameterAndDirection {
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_diameter_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  GeogebraCommonKernelAlgosAlgoTangentLine_setAndConsume_direction_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])))) getDirectionWithGeogebraCommonKernelGeosGeoVec3D:direction_];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) diameterLineWithGeogebraCommonKernelGeosGeoVector:direction_ withGeogebraCommonKernelGeosGeoLine:diameter_];
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_algoIntersect_(self, new_GeogebraCommonKernelAlgosAlgoIntersectLineConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoConic_(cons_, diameter_, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class])));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  GeogebraCommonKernelAlgosAlgoTangentLineND_set_tangentPoints_(self, [algoIntersect_ getIntersectionPoints]);
}

- (void)setTangents {
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints_), 0), [GeogebraCommonKernelGeosGeoPoint class])];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(tangentPoints_, 1), [GeogebraCommonKernelGeosGeoPoint class])];
}

- (void)initForNearToRelationship {
  GeogebraCommonKernelAlgosAlgoTangentPoint_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
}

- (void)updateDiameterLine {
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class])))) getDirectionWithGeogebraCommonKernelGeosGeoVec3D:direction_];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) diameterLineWithGeogebraCommonKernelGeosGeoVector:direction_ withGeogebraCommonKernelGeosGeoLine:diameter_];
}

- (void)updateTangentWithInt:(jint)index {
  GeogebraCommonKernelGeosGeoLine *tangent = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), index), [GeogebraCommonKernelGeosGeoLine class]);
  GeogebraCommonKernelGeosGeoLine *line = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]);
  GeogebraCommonKernelGeosGeoPoint *point = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(tangentPoints_), index), [GeogebraCommonKernelGeosGeoPoint class]);
  ((GeogebraCommonKernelGeosGeoLine *) nil_chk(tangent))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(line))->x_;
  tangent->y_ = line->y_;
  tangent->z_ = -(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point))->inhomX_ * line->x_ + point->inhomY_ * line->y_);
}

- (void)dealloc {
  RELEASE_(direction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLine", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLine", NULL, 0x1, NULL, NULL },
    { "initDiameterAndDirection", NULL, "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "updateDiameterLine", NULL, "V", 0x4, NULL, NULL },
    { "updateTangentWithInt:", "updateTangent", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTangentLine = { 2, "AlgoTangentLine", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTangentLine;
}

@end

void GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
}

GeogebraCommonKernelAlgosAlgoTangentLine *new_GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLine *self = [GeogebraCommonKernelAlgosAlgoTangentLine alloc];
  GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, g, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAlgosAlgoTangentLine *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
}

GeogebraCommonKernelAlgosAlgoTangentLine *new_GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLine *self = [GeogebraCommonKernelAlgosAlgoTangentLine alloc];
  GeogebraCommonKernelAlgosAlgoTangentLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTangentLine)
