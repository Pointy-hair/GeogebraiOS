//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/AnimationStepModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/AnimationStepModel.h"
#include "geogebra/common/gui/dialog/options/model/ITextFieldListener.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGuiDialogOptionsModelAnimationStepModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener_;
  GeogebraCommonKernelKernel *kernel_;
  jboolean partOfSlider_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelAnimationStepModel, listener_, id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelAnimationStepModel, kernel_, GeogebraCommonKernelKernel *)

@implementation GeogebraCommonGuiDialogOptionsModelAnimationStepModel

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener:(id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>)listener
                                                    withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener_withGeogebraCommonMainApp_(self, listener, app);
  return self;
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  jboolean equalStep = YES;
  jboolean onlyAngles = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationStep], [((GeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getAnimationStep])) equalStep = NO;
    if (!([temp isGeoAngle])) onlyAngles = NO;
  }
  GeogebraCommonKernelStringTemplate *highPrecision = GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), GeogebraCommonGuiDialogOptionsModelAnimationStepModel_TEXT_FIELD_FRACTION_DIGITS, NO);
  if (equalStep) {
    GeogebraCommonKernelGeosGeoElement *stepGeo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationStepObject];
    if (onlyAngles && (stepGeo == nil || (![stepGeo isLabelSet] && [stepGeo isIndependent]))) {
      [((id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:[((JavaLangStringBuilder *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:[geo0 getAnimationStep] withGeogebraCommonKernelStringTemplate:highPrecision withBoolean:[((GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo0, [GeogebraCommonKernelGeosGeoAngle class])) getAngleStyle] == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()])) description]];
    }
    else {
      [((id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(stepGeo)) getLabelWithGeogebraCommonKernelStringTemplate:highPrecision]];
    }
  }
  else {
    [((id<GeogebraCommonGuiDialogOptionsModelITextFieldListener>) nil_chk(listener_)) setTextWithNSString:@""];
  }
}

- (jboolean)isValidAtWithInt:(jint)index {
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isChangeable] || [geo isGeoText] || [geo isGeoImage] || [geo isGeoList] || [geo isGeoBoolean] || [geo isGeoButton] || (![self isPartOfSlider] && [geo isGeoNumeric] && [geo isIndependent])) {
    return NO;
  }
  return YES;
}

- (void)applyChangesWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)value {
  if (value != nil && !JavaLangDouble_isNaNWithDouble_([value getDouble])) {
    for (jint i = 0; i < [self getGeosLength]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:value];
      [geo updateRepaint];
    }
  }
}

- (jboolean)isPartOfSlider {
  return partOfSlider_;
}

- (void)setPartOfSliderWithBoolean:(jboolean)partOfSlider {
  self->partOfSlider_ = partOfSlider;
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener:withGeogebraCommonMainApp:", "AnimationStepModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
    { "applyChangesWithGeogebraCommonKernelArithmeticNumberValue:", "applyChanges", "V", 0x1, NULL, NULL },
    { "isPartOfSlider", NULL, "Z", 0x1, NULL, NULL },
    { "setPartOfSliderWithBoolean:", "setPartOfSlider", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.ITextFieldListener;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "partOfSlider_", NULL, 0x2, "Z", NULL, NULL,  },
    { "TEXT_FIELD_FRACTION_DIGITS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiDialogOptionsModelAnimationStepModel_TEXT_FIELD_FRACTION_DIGITS },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelAnimationStepModel = { 2, "AnimationStepModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelAnimationStepModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener_withGeogebraCommonMainApp_(GeogebraCommonGuiDialogOptionsModelAnimationStepModel *self, id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener, GeogebraCommonMainApp *app) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelAnimationStepModel_set_listener_(self, listener);
  GeogebraCommonGuiDialogOptionsModelAnimationStepModel_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

GeogebraCommonGuiDialogOptionsModelAnimationStepModel *new_GeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener_withGeogebraCommonMainApp_(id<GeogebraCommonGuiDialogOptionsModelITextFieldListener> listener, GeogebraCommonMainApp *app) {
  GeogebraCommonGuiDialogOptionsModelAnimationStepModel *self = [GeogebraCommonGuiDialogOptionsModelAnimationStepModel alloc];
  GeogebraCommonGuiDialogOptionsModelAnimationStepModel_initWithGeogebraCommonGuiDialogOptionsModelITextFieldListener_withGeogebraCommonMainApp_(self, listener, app);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelAnimationStepModel)
