//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFrequency.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoUnique.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "geogebra/common/kernel/statistics/FrequencyGgb.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Boolean.h"
#include "java/lang/Comparable.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "org/apache/commons/math/stat/Frequency.h"

@interface GeogebraCommonKernelStatisticsAlgoFrequency () {
 @public
  GeogebraCommonKernelGeosGeoList *dataList_;
  GeogebraCommonKernelGeosGeoList *classList_;
  GeogebraCommonKernelGeosGeoBoolean *isCumulative_;
  GeogebraCommonKernelGeosGeoBoolean *useDensity_;
  GeogebraCommonKernelGeosGeoNumeric *density_;
  GeogebraCommonKernelGeosGeoList *frequency_;
  GeogebraCommonKernelGeosGeoList *value_;
  IOSObjectArray *contingencyRowValues_, *contingencyColumnValues_;
  JavaLangBoolean *isContingencyTable_;
  jdouble scaleFactor_;
  GeogebraCommonKernelGeosGeoNumeric *scale__;
}

- (void)addValueWithDouble:(jdouble)v;

- (void)computeContingencyTable;

- (IOSObjectArray *)getUniqueValuesWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, dataList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, classList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, isCumulative_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, useDensity_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, density_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, frequency_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, value_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, contingencyRowValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, contingencyColumnValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, isContingencyTable_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFrequency, scale__, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequency_compute(GeogebraCommonKernelStatisticsAlgoFrequency *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(GeogebraCommonKernelStatisticsAlgoFrequency *self, jdouble v);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFrequency_computeContingencyTable(GeogebraCommonKernelStatisticsAlgoFrequency *self);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelStatisticsAlgoFrequency_getUniqueValuesWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelGeosGeoList *list);

@implementation GeogebraCommonKernelStatisticsAlgoFrequency

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, isCumulative, classList, dataList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)isCumulative
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)classList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)dataList
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)useDensity
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)density
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)scale_ {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
                                             withBoolean:(jboolean)isContingencyTable {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, label, list1, list2, isContingencyTable);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
                                             withBoolean:(jboolean)isContingencyTable {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, list1, list2, isContingencyTable);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Frequency();
}

- (void)setInputOutput {
  JavaUtilArrayList *tempList = [new_JavaUtilArrayList_init() autorelease];
  if (isCumulative_ != nil) [tempList addWithId:isCumulative_];
  if (classList_ != nil) [tempList addWithId:classList_];
  [tempList addWithId:dataList_];
  if (useDensity_ != nil) [tempList addWithId:useDensity_];
  if (density_ != nil) [tempList addWithId:density_];
  if (scale__ != nil) [tempList addWithId:scale__];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[tempList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [tempList toArrayWithNSObjectArray:input_]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:frequency_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return frequency_;
}

- (GeogebraCommonKernelGeosGeoList *)getValue {
  return value_;
}

- (IOSObjectArray *)getContingencyRowValues {
  return contingencyRowValues_;
}

- (IOSObjectArray *)getContingencyColumnValues {
  return contingencyColumnValues_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFrequency_compute(self);
}

- (void)addValueWithDouble:(jdouble)v {
  GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, v);
}

- (void)computeContingencyTable {
  GeogebraCommonKernelStatisticsAlgoFrequency_computeContingencyTable(self);
}

- (IOSObjectArray *)getUniqueValuesWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  return GeogebraCommonKernelStatisticsAlgoFrequency_getUniqueValuesWithGeogebraCommonKernelGeosGeoList_(self, list);
}

- (void)dealloc {
  RELEASE_(dataList_);
  RELEASE_(classList_);
  RELEASE_(isCumulative_);
  RELEASE_(useDensity_);
  RELEASE_(density_);
  RELEASE_(frequency_);
  RELEASE_(value_);
  RELEASE_(contingencyRowValues_);
  RELEASE_(contingencyColumnValues_);
  RELEASE_(isContingencyTable_);
  RELEASE_(scale__);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoFrequency", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withBoolean:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withBoolean:", "AlgoFrequency", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getValue", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getContingencyRowValues", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getContingencyColumnValues", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "addValueWithDouble:", "addValue", "V", 0x2, NULL, NULL },
    { "computeContingencyTable", NULL, "V", 0x2, NULL, NULL },
    { "getUniqueValuesWithGeogebraCommonKernelGeosGeoList:", "getUniqueValues", "[Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "dataList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "classList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "isCumulative_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "useDensity_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "density_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "frequency_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "value_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "contingencyRowValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "contingencyColumnValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "isContingencyTable_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "scaleFactor_", NULL, 0x2, "D", NULL, NULL,  },
    { "scale__", "scale", 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFrequency = { 2, "AlgoFrequency", "geogebra.common.kernel.statistics", NULL, 0x1, 17, methods, 12, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFrequency;
}

@end

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, nil, nil);
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, isCumulative, classList, dataList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, nil, nil, nil);
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, isCumulative, classList, dataList);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, nil, nil, scale_);
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, scale_);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, nil);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, isCumulative, classList, dataList, useDensity, density);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFrequency_setAndConsume_value_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_isContingencyTable_(self, JavaLangBoolean_valueOfWithBoolean_(NO));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_classList_(self, classList);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_dataList_(self, dataList);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_isCumulative_(self, isCumulative);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_useDensity_(self, useDensity);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_density_(self, density);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_scale__(self, scale_);
  GeogebraCommonKernelStatisticsAlgoFrequency_setAndConsume_frequency_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFrequency_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoBoolean *isCumulative, GeogebraCommonKernelGeosGeoList *classList, GeogebraCommonKernelGeosGeoList *dataList, GeogebraCommonKernelGeosGeoBoolean *useDensity, GeogebraCommonKernelGeosGeoNumeric *density, GeogebraCommonKernelGeosGeoNumeric *scale_) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, isCumulative, classList, dataList, useDensity, density, scale_);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, jboolean isContingencyTable) {
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, list1, list2, isContingencyTable);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, jboolean isContingencyTable) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, label, list1, list2, isContingencyTable);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, jboolean isContingencyTable) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFrequency_setAndConsume_value_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_isContingencyTable_(self, JavaLangBoolean_valueOfWithBoolean_(NO));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_isContingencyTable_(self, JavaLangBoolean_valueOfWithBoolean_(YES));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_classList_(self, list1);
  GeogebraCommonKernelStatisticsAlgoFrequency_set_dataList_(self, list2);
  GeogebraCommonKernelStatisticsAlgoFrequency_setAndConsume_frequency_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFrequency_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFrequency *new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, jboolean isContingencyTable) {
  GeogebraCommonKernelStatisticsAlgoFrequency *self = [GeogebraCommonKernelStatisticsAlgoFrequency alloc];
  GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(self, cons, list1, list2, isContingencyTable);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFrequency_compute(GeogebraCommonKernelStatisticsAlgoFrequency *self) {
  if ([((JavaLangBoolean *) nil_chk(self->isContingencyTable_)) booleanValue]) {
    GeogebraCommonKernelStatisticsAlgoFrequency_computeContingencyTable(self);
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) isDefined] || [self->dataList_ size] == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
    return;
  }
  if (!([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()] || [((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
    return;
  }
  if (self->classList_ != nil) {
    if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->classList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] || [self->classList_ size] < 2) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
      return;
    }
  }
  if (self->density_ != nil) {
    if ([self->density_ getDouble] <= 0) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
      return;
    }
  }
  if (self->scale__ != nil) {
    if (![self->scale__ isDefined]) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
      return;
    }
    self->scaleFactor_ = [self->scale__ getValue];
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setDefinedWithBoolean:YES];
  [self->frequency_ clear];
  if (self->value_ != nil) [self->value_ clear];
  jdouble numMax = 0, numMin = 0;
  jboolean doCumulative = self->isCumulative_ != nil && [self->isCumulative_ getBoolean];
  OrgApacheCommonsMathStatFrequency *f = [new_GeogebraCommonKernelStatisticsFrequencyGgb_init() autorelease];
  for (jint i = 0; i < [self->dataList_ size]; i++) {
    if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()]) [f addValueWithJavaLangComparable:[((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
    if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) [f addValueWithJavaLangComparable:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->dataList_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble])];
  }
  if ([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()]) {
    id<JavaUtilIterator> itr = [f valuesIterator];
    NSString *strMax = (NSString *) check_class_cast([((id<JavaUtilIterator>) nil_chk(itr)) next], [NSString class]);
    NSString *strMin = strMax;
    itr = [f valuesIterator];
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      NSString *s = (NSString *) check_class_cast([itr next], [NSString class]);
      if ([((NSString *) nil_chk(s)) compareToWithId:strMax] > 0) strMax = s;
      if ([s compareToWithId:strMin] < 0) strMin = s;
      GeogebraCommonKernelGeosGeoText *text = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
      [text setTextStringWithNSString:s];
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->value_)) addWithGeogebraCommonKernelGeosGeoElement:text];
      if (self->classList_ == nil) {
        if (doCumulative) {
          GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, [f getCumFreqWithJavaLangComparable:s]);
        }
        else {
          GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, [f getCountWithJavaLangComparable:s]);
        }
      }
    }
  }
  else {
    id<JavaUtilIterator> itr = [f valuesIterator];
    numMax = [((JavaLangDouble *) nil_chk((JavaLangDouble *) check_class_cast([((id<JavaUtilIterator>) nil_chk(itr)) next], [JavaLangDouble class]))) doubleValue];
    numMin = numMax;
    itr = [f valuesIterator];
    while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
      JavaLangDouble *n = (JavaLangDouble *) check_class_cast([itr next], [JavaLangDouble class]);
      if ([((JavaLangDouble *) nil_chk(n)) doubleValue] > numMax) numMax = [n doubleValue];
      if ([n doubleValue] < numMin) numMin = [n doubleValue];
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->value_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, [n doubleValue]) autorelease]];
      if (self->classList_ == nil) if (doCumulative) GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, [f getCumFreqWithJavaLangComparable:n]);
      else GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, [f getCountWithJavaLangComparable:n]);
    }
  }
  if (self->classList_ != nil) {
    jdouble lowerClassBound = 0;
    jdouble upperClassBound = 0;
    jdouble classFreq = 0;
    jboolean hasDensity = NO;
    if (self->useDensity_ != nil) hasDensity = [self->useDensity_ getBoolean];
    jdouble densityValue = 1;
    if (self->density_ != nil) {
      densityValue = [self->density_ getDouble];
    }
    jdouble cumulativeClassFreq = 0;
    jdouble swap;
    jint length = [self->classList_ size];
    for (jint i = 1; i < length; i++) {
      lowerClassBound = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->classList_ getWithInt:i - 1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      upperClassBound = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->classList_ getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      lowerClassBound = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(lowerClassBound);
      upperClassBound = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(upperClassBound);
      jboolean increasing = YES;
      if (lowerClassBound > upperClassBound) {
        swap = upperClassBound;
        upperClassBound = lowerClassBound;
        lowerClassBound = swap;
        increasing = NO;
      }
      classFreq = [f getCumFreqWithJavaLangComparable:JavaLangDouble_valueOfWithDouble_(upperClassBound)] - [f getCumFreqWithJavaLangComparable:JavaLangDouble_valueOfWithDouble_(lowerClassBound)] + [f getCountWithJavaLangComparable:JavaLangDouble_valueOfWithDouble_(lowerClassBound)];
      if ((i != length - 1 && increasing) || (i != 1 && !increasing)) classFreq -= [f getCountWithJavaLangComparable:JavaLangDouble_valueOfWithDouble_(upperClassBound)];
      if (doCumulative) cumulativeClassFreq += classFreq;
      jdouble v = doCumulative ? cumulativeClassFreq : classFreq;
      if (hasDensity) {
        v = densityValue * v / (upperClassBound - lowerClassBound);
      }
      GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(self, v);
    }
  }
}

void GeogebraCommonKernelStatisticsAlgoFrequency_addValueWithDouble_(GeogebraCommonKernelStatisticsAlgoFrequency *self, jdouble v) {
  if (self->scale__ != nil) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, v * self->scaleFactor_) autorelease]];
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, v) autorelease]];
  }
}

void GeogebraCommonKernelStatisticsAlgoFrequency_computeContingencyTable(GeogebraCommonKernelStatisticsAlgoFrequency *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->dataList_)) isDefined] || [self->dataList_ size] == 0 || ![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) isDefined] || [self->classList_ size] == 0) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
    return;
  }
  if (!([((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->dataList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()] && [((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_TEXT()])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
    return;
  }
  if ([self->dataList_ size] != [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->classList_)) size]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->frequency_)) setDefinedWithBoolean:YES];
  [self->frequency_ clear];
  GeogebraCommonKernelStatisticsAlgoFrequency_set_contingencyRowValues_(self, GeogebraCommonKernelStatisticsAlgoFrequency_getUniqueValuesWithGeogebraCommonKernelGeosGeoList_(self, self->classList_));
  GeogebraCommonKernelStatisticsAlgoFrequency_set_contingencyColumnValues_(self, GeogebraCommonKernelStatisticsAlgoFrequency_getUniqueValuesWithGeogebraCommonKernelGeosGeoList_(self, self->dataList_));
  id<JavaUtilList> rowList = JavaUtilArrays_asListWithNSObjectArray_(self->contingencyRowValues_);
  id<JavaUtilList> colList = JavaUtilArrays_asListWithNSObjectArray_(self->contingencyColumnValues_);
  jint n1 = ((IOSObjectArray *) nil_chk(self->contingencyRowValues_))->size_;
  jint n2 = ((IOSObjectArray *) nil_chk(self->contingencyColumnValues_))->size_;
  IOSObjectArray *freqTable = [IOSIntArray arrayWithDimensions:2 lengths:(jint[]){ n1, n2 }];
  for (jint i = 0; i < n1; i++) for (jint j = 0; j < n2; j++) *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(freqTable, i)), j) = 0;
  for (jint index = 0; index < [self->classList_ size]; index++) {
    NSString *s1 = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->classList_ getWithInt:index], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    NSString *s2 = [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self->dataList_ getWithInt:index], [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    (*IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(freqTable, [((id<JavaUtilList>) nil_chk(rowList)) indexOfWithId:s1])), [((id<JavaUtilList>) nil_chk(colList)) indexOfWithId:s2]))++;
  }
  for (jint row = 0; row < n1; row++) {
    GeogebraCommonKernelGeosGeoList *l = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    for (jint col = 0; col < n2; col++) {
      [l addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, IOSIntArray_Get(nil_chk(IOSObjectArray_Get(freqTable, row)), col)) autorelease]];
    }
    [self->frequency_ addWithGeogebraCommonKernelGeosGeoElement:l];
  }
}

IOSObjectArray *GeogebraCommonKernelStatisticsAlgoFrequency_getUniqueValuesWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFrequency *self, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAdvancedAlgoUnique *al = [new_GeogebraCommonKernelAdvancedAlgoUnique_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self->cons_, list) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:al];
  GeogebraCommonKernelGeosGeoList *geo = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk([al getGeoElements]), 0), [GeogebraCommonKernelGeosGeoList class]);
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:[((GeogebraCommonKernelGeosGeoList *) nil_chk(geo)) size] type:NSString_class_()];
  for (jint i = 0; i < [geo size]; i++) {
    NSString *a = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geo getWithInt:i])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    IOSObjectArray_Set(s, i, a);
  }
  return s;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFrequency)
