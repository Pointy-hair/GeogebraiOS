//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoParabolaPointLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoParabolaPointLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoParabolaPointLineND.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)F
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, F, l);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)F
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, F, l);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)newGeoConicWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [ret setCoordSysWithGeogebraCommonKernelMatrixCoordSys:[new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2) autorelease]];
  return ret;
}

- (void)compute {
  GeogebraCommonKernelMatrixCoords *Fc = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(F_)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *lo = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(l_)) getStartInhomCoords])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *ld = [l_ getDirectionInD3];
  GeogebraCommonKernelMatrixCoordSys *cs = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(parabola_)) getCoordSys];
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) resetCoordSys];
  [cs addPointWithGeogebraCommonKernelMatrixCoords:Fc];
  [cs addVectorWithGeogebraCommonKernelMatrixCoords:ld];
  [cs addPointWithGeogebraCommonKernelMatrixCoords:lo];
  if (![cs makeOrthoMatrixWithBoolean:NO withBoolean:NO]) {
    [parabola_ setUndefined];
    return;
  }
  jdouble y0 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(nil_chk([cs getNormalProjectionWithGeogebraCommonKernelMatrixCoords:lo]), 1))) getY];
  [parabola_ setParabolaWithDouble:y0];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnParabolaPointLineWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoParabolaPointLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoParabolaPointLine3D", NULL, 0x1, NULL, NULL },
    { "newGeoConicWithGeogebraCommonKernelConstruction:", "newGeoConic", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D = { 2, "AlgoParabolaPointLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> F, id<GeogebraCommonKernelKernelNDGeoLineND> l) {
  GeogebraCommonKernelAlgosAlgoParabolaPointLineND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, F, l);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> F, id<GeogebraCommonKernelKernelNDGeoLineND> l) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, F, l);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> F, id<GeogebraCommonKernelKernelNDGeoLineND> l) {
  GeogebraCommonKernelAlgosAlgoParabolaPointLineND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, F, l);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> F, id<GeogebraCommonKernelKernelNDGeoLineND> l) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, F, l);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoParabolaPointLine3D)
