//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawSlope.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawSlope.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSlope.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonEuclidianDrawDrawSlope () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *slope_;
  GeogebraCommonKernelGeosGeoLine *g_;
  jboolean isVisible_, labelVisible_;
  jint xLabelHor_, yLabelHor_;
  NSString *horLabel_;
  IOSDoubleArray *coords_;
  GeogebraCommonEuclidianGeneralPathClipped *gp_;
  GeogebraCommonKernelKernel *kernel_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, slope_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, horLabel_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, gp_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawSlope, kernel_, GeogebraCommonKernelKernel *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSlope_init__(GeogebraCommonEuclidianDrawDrawSlope *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawSlope_update(GeogebraCommonEuclidianDrawDrawSlope *self);

@implementation GeogebraCommonEuclidianDrawDrawSlope

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                      withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)slope {
  GeogebraCommonEuclidianDrawDrawSlope_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(self, view, slope);
  return self;
}

- (void)init__ {
  GeogebraCommonEuclidianDrawDrawSlope_init__(self);
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawSlope_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:gp_ withBoolean:NO];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:gp_];
    }
    if (geo_->lineThickness_ > 0) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope_)) getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:gp_];
    }
    if (labelVisible_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope_)) getLabelColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
      [g2 drawStringWithNSString:horLabel_ withInt:xLabelHor_ withInt:yLabelHor_];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return gp_ != nil && ([gp_ containsWithInt:x withInt:y] || [gp_ intersectsWithInt:x withInt:y withInt:hitThreshold]);
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return gp_ != nil && ([gp_ intersectsWithGeogebraCommonAwtGRectangle2D:rect]);
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) getBounds];
}

- (void)dealloc {
  RELEASE_(slope_);
  RELEASE_(g_);
  RELEASE_(horLabel_);
  RELEASE_(coords_);
  RELEASE_(gp_);
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoNumeric:", "DrawSlope", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "slope_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "xLabelHor_", NULL, 0x2, "I", NULL, NULL,  },
    { "yLabelHor_", NULL, 0x2, "I", NULL, NULL,  },
    { "horLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawSlope = { 2, "DrawSlope", "geogebra.common.euclidian.draw", NULL, 0x1, 10, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawSlope;
}

@end

void GeogebraCommonEuclidianDrawDrawSlope_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonEuclidianDrawDrawSlope *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *slope) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawSlope_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawSlope_set_kernel_(self, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel]);
  GeogebraCommonEuclidianDrawDrawSlope_set_slope_(self, slope);
  GeogebraCommonEuclidianDrawable_set_geo_(self, slope);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slope)) setDrawableWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawSlope_init__(self);
  GeogebraCommonEuclidianDrawDrawSlope_update(self);
}

GeogebraCommonEuclidianDrawDrawSlope *new_GeogebraCommonEuclidianDrawDrawSlope_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoNumeric *slope) {
  GeogebraCommonEuclidianDrawDrawSlope *self = [GeogebraCommonEuclidianDrawDrawSlope alloc];
  GeogebraCommonEuclidianDrawDrawSlope_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoNumeric_(self, view, slope);
  return self;
}

void GeogebraCommonEuclidianDrawDrawSlope_init__(GeogebraCommonEuclidianDrawDrawSlope *self) {
  GeogebraCommonEuclidianDrawDrawSlope_set_g_(self, [((GeogebraCommonKernelAlgosAlgoSlope *) nil_chk(((GeogebraCommonKernelAlgosAlgoSlope *) check_class_cast([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) getDrawAlgorithm], [GeogebraCommonKernelAlgosAlgoSlope class])))) getg]);
}

void GeogebraCommonEuclidianDrawDrawSlope_update(GeogebraCommonEuclidianDrawDrawSlope *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isVisible_) {
    if (![((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([self->geo_ getDrawAlgorithm])) isEqual:[self->geo_ getParentAlgorithm]]) GeogebraCommonEuclidianDrawDrawSlope_init__(self);
    jint slopeTriangleSize = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) getSlopeTriangleSize];
    jdouble rwHeight = [self->slope_ getValue] * slopeTriangleSize;
    jdouble height = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getYscale] * rwHeight;
    if (JavaLangMath_absWithDouble_(height) > JavaLangFloat_MAX_VALUE) {
      self->isVisible_ = NO;
      return;
    }
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) getInhomPointOnLineWithDoubleArray:self->coords_];
    if ([self->g_ getStartPoint] == nil) {
      *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = 0.0;
      *IOSDoubleArray_GetRef(self->coords_, 1) = -self->g_->z_ / self->g_->y_;
    }
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    jdouble x = IOSDoubleArray_Get(nil_chk(self->coords_), 0);
    jdouble y = IOSDoubleArray_Get(self->coords_, 1);
    jdouble xright = x + [self->view_ getXscale] * slopeTriangleSize;
    if (self->gp_ == nil) GeogebraCommonEuclidianDrawDrawSlope_setAndConsume_gp_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(self->gp_)) reset];
    [self->gp_ moveToWithDouble:x withDouble:y];
    [self->gp_ lineToWithDouble:xright withDouble:y];
    [self->gp_ lineToWithDouble:xright withDouble:y - height];
    [self->gp_ closePath];
    GeogebraCommonUtilDebugLog_debugWithId_(JavaLangDouble_valueOfWithDouble_(([self->view_ getXscale] * slopeTriangleSize) / (0.0 + height)));
    if (![self->gp_ intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
      self->isVisible_ = NO;
    }
    self->labelVisible_ = [self->geo_ isLabelVisible];
    GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
    if (self->labelVisible_) {
      if (slopeTriangleSize > 1) {
        JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
        switch ([self->slope_ getLabelMode]) {
          case GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE:
          [sb appendWithInt:slopeTriangleSize];
          [sb appendWithChar:' '];
          [sb appendWithNSString:[self->geo_ getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
          [sb appendWithNSString:@" = "];
          [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:rwHeight withGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case GeogebraCommonKernelGeosGeoElement_LABEL_VALUE:
          [sb appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:rwHeight withGeogebraCommonKernelStringTemplate:tpl]];
          break;
          default:
          [sb appendWithInt:slopeTriangleSize];
          [sb appendWithChar:' '];
          [sb appendWithNSString:[self->geo_ getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
          break;
        }
        GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [sb description]);
      }
      else {
        GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
      }
      self->yLabel_ = J2ObjCFpToInt((y - height / 2.0f + 6));
      self->xLabel_ = J2ObjCFpToInt((xright)) + 5;
      [self addLabelOffset];
      self->xLabelHor_ = J2ObjCFpToInt(((x + xright) / 2.0));
      self->yLabelHor_ = J2ObjCFpToInt((y + [self->view_ getFontSize] + 2));
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithInt:slopeTriangleSize];
      GeogebraCommonEuclidianDrawDrawSlope_set_horLabel_(self, [sb description]);
    }
    [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->slope_];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawSlope)
