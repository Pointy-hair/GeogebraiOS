//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCurvatureCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoCurvatureCurve.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonKernelAdvancedAlgoCurvatureCurve () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> A_;
  GeogebraCommonKernelKernelNDGeoCurveCartesianND *f_;
  GeogebraCommonKernelGeosGeoNumeric *K_;
  GeogebraCommonKernelKernelNDGeoConicND *gc_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureCurve, A_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureCurve, f_, GeogebraCommonKernelKernelNDGeoCurveCartesianND *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureCurve, K_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureCurve, gc_, GeogebraCommonKernelKernelNDGeoConicND *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_compute(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self);

@implementation GeogebraCommonKernelAdvancedAlgoCurvatureCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
     withGeogebraCommonKernelKernelNDGeoCurveCartesianND:(GeogebraCommonKernelKernelNDGeoCurveCartesianND *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(self, cons, label, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
     withGeogebraCommonKernelKernelNDGeoCurveCartesianND:(GeogebraCommonKernelKernelNDGeoCurveCartesianND *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(self, cons, A, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)gc {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, A, gc);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Curvature();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) toGeoElement]);
  if (gc_ != nil) {
    GeogebraCommonKernelAdvancedAlgoCurvatureCurve_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons_));
    [gc_ toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(f_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
    IOSObjectArray_Set(input_, 1, gc_);
  }
  else IOSObjectArray_Set(input_, 1, f_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:K_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return K_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_compute(self);
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(f_);
  RELEASE_(K_);
  RELEASE_(gc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCurveCartesianND:", "AlgoCurvatureCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCurvatureCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoCurveCartesianND:", "AlgoCurvatureCurve", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoCurvatureCurve", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", NULL, NULL,  },
    { "K_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "gc_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCurvatureCurve = { 2, "AlgoCurvatureCurve", "geogebra.common.kernel.advanced", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCurvatureCurve;
}

@end

void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoCurveCartesianND *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(self, cons, A, f);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:@"k"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoCurveCartesianND *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(self, cons, label, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoConicND *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, A, f);
  if (label != nil) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setLabelWithNSString:@"k"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoConicND *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, label, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoCurveCartesianND *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_gc_(self, nil);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_setAndConsume_K_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoCurveCartesianND *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoCurveCartesianND_(self, cons, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoConicND *gc) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_gc_(self, nil);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_gc_(self, gc);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_setAndConsume_K_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureCurve *new_GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonKernelKernelNDGeoConicND *gc) {
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self = [GeogebraCommonKernelAdvancedAlgoCurvatureCurve alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, A, gc);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureCurve_compute(GeogebraCommonKernelAdvancedAlgoCurvatureCurve *self) {
  if (self->gc_ != nil) {
    GeogebraCommonKernelAdvancedAlgoCurvatureCurve_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(self->cons_));
    [self->gc_ toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(self->f_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  if ([((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(self->f_)) isDefined]) {
    @try {
      jdouble t = [self->f_ getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:self->A_ withDouble:[self->f_ getMinParameter]];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setValueWithDouble:[self->f_ evaluateCurvatureWithDouble:t]];
    }
    @catch (JavaLangException *ex) {
      [((JavaLangException *) nil_chk(ex)) printStackTrace];
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setUndefined];
    }
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->K_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCurvatureCurve)
