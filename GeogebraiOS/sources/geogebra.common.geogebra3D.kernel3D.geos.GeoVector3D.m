//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVec.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVec4D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocateableList.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  GeogebraCommonKernelMatrixCoordMatrix *matrix_;
  GeogebraCommonKernelMatrixCoords *labelPosition_;
  JavaLangStringBuilder *sbToString_GeoVector3D_;
  JavaLangStringBuilder *sbBuildValueString_GeoVector3D_;
  JavaLangStringBuilder *sb_;
  jboolean trace_;
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)setCoordSepWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, startPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, matrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, labelPosition_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sbToString_GeoVector3D_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sbBuildValueString_GeoVector3D_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self);

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                              withDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

- (void)setCoordsWithDoubleArray:(IOSDoubleArray *)vals {
  [super setCoordsWithDoubleArray:vals];
  if (matrix_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithGeogebraCommonKernelMatrixCoords:[self getCoords] withInt:1];
}

- (void)updateStartPointPosition {
  if (startPoint_ != nil) [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithGeogebraCommonKernelMatrixCoords:[startPoint_ getInhomCoordsInD3] withInt:2];
  else {
    for (jint i = 1; i < 4; i++) [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithInt:i withInt:2 withDouble:0.0];
    [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) setWithInt:4 withInt:2 withDouble:1.0];
  }
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_labelPosition_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix_)) getOrigin])) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([matrix_ getVx])) mulWithDouble:0.5]]);
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return labelPosition_;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease];
  [ret setWithGeogebraCommonKernelGeosGeoElement:self];
  return ret;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_VECTOR3D();
}

- (jboolean)isDefined {
  return (!(JavaLangDouble_isNaNWithDouble_([self getX]) || JavaLangDouble_isNaNWithDouble_([self getY]) || JavaLangDouble_isNaNWithDouble_([self getZ]) || JavaLangDouble_isNaNWithDouble_([self getW])));
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector]) return NO;
  id<GeogebraCommonKernelKernelNDGeoVectorND> v = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
  if (!(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(self) && [v isFinite])) return NO;
  GeogebraCommonKernelMatrixCoords *c1 = [self getCoords];
  GeogebraCommonKernelMatrixCoords *c2 = [v getCoordsInD3];
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(c1)) getX], [((GeogebraCommonKernelMatrixCoords *) nil_chk(c2)) getX]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getY], [c2 getY]) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_([c1 getZ], [c2 getZ]);
}

- (jboolean)isInfinite {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

- (jboolean)isFinite {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(self);
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoVector]) {
    id<GeogebraCommonKernelKernelNDGeoVectorND> vec = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
    [self setCoordsWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk([vec getCoordsInD3])) get]];
    if (geo->cons_ != cons_ && [self isAlgoMacroOutput]) return;
    @try {
      id<GeogebraCommonKernelKernelNDGeoPointND> sp = [vec getStartPoint];
      if (sp != nil) {
        if ([vec hasAbsoluteLocation]) {
          [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:[sp copy__]];
        }
        else {
          [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:sp];
        }
      }
    }
    @catch (GeogebraCommonKernelCircularDefinitionException *e) {
      GeogebraCommonMainApp_debugWithNSString_(@"set GeoVector3D: CircularDefinitionException");
    }
  }
}

- (void)setUndefined {
  [self setCoordsWithDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined] && !GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

- (jboolean)evaluatesTo3DVector {
  return YES;
}

- (jboolean)isPath {
  return YES;
}

- (jboolean)isGeoVector {
  return YES;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoVector3D_)) setLengthWithInt:0];
  [sbToString_GeoVector3D_ appendWithNSString:label_];
  switch ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getCoordStyle]]) {
    case GeogebraCommonKernelKernel_COORD_STYLE_FRENCH:
    [sbToString_GeoVector3D_ appendWithNSString:@": "];
    case GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    break;
    default:
    [sbToString_GeoVector3D_ appendWithNSString:@" = "];
  }
  [sbToString_GeoVector3D_ appendWithJavaLangCharSequence:GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString_GeoVector3D_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (jboolean)evaluatesToVectorNotPoint {
  return YES;
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)setCoordSepWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  if ([self getMode] == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D) {
    GeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_, self, symbolic);
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  if ([self getMode] == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_);
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([self getZ])) {
    if ([self getMode] == GeogebraCommonKernelKernel_COORD_POLAR) {
      GeogebraCommonKernelGeosGeoPoint_buildValueStringCoordSphericalWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_);
    }
    else {
      GeogebraCommonKernelGeosGeoVector_buildLatexValueStringCoordCartesian3DWithGeogebraCommonKernelKernel_withGeogebraCommonKernelStringTemplate_withDouble_withDouble_withDouble_withJavaLangStringBuilder_withGeogebraCommonKernelKernelNDGeoVectorND_withBoolean_(kernel_, tpl, [self getX], [self getY], [self getZ], sb_, self, symbolic);
    }
    return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
  }
  return GeogebraCommonKernelGeosGeoVector_buildLatexStringWithGeogebraCommonKernelKernel_withJavaLangStringBuilder_withBoolean_withGeogebraCommonKernelStringTemplate_withInt_withDouble_withDouble_withGeogebraCommonKernelKernelNDGeoVectorND_(kernel_, sb_, symbolic, tpl, toStringMode_, [self getX], [self getY], self);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  switch (toStringMode_) {
    case GeogebraCommonKernelKernel_COORD_POLAR:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"polar\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_COMPLEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"complex\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_CARTESIAN:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"cartesian\"/>\n"];
    break;
    case GeogebraCommonKernelKernel_COORD_SPHERICAL:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coordStyle style=\"spherical\"/>\n"];
    break;
    default:
    ;
  }
  [self getLineStyleXMLWithJavaLangStringBuilder:sb];
  if (startPoint_ != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[startPoint_ getStartPointXML]];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (void)setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) return;
  if ([self isAlgoMacroOutput]) return;
  if ([self isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:p]) @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
  if (startPoint_ != nil) [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithGeogebraCommonKernelLocateable:self];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_startPoint_(self, p);
  if (startPoint_ != nil) [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) registerLocateableWithGeogebraCommonKernelLocateable:self];
}

- (IOSObjectArray *)getStartPoints {
  if (startPoint_ == nil) return nil;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(ret, 0, startPoint_);
  return ret;
}

- (jboolean)hasAbsoluteLocation {
  return startPoint_ == nil || [startPoint_ isAbsoluteStartPoint];
}

- (void)initStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                         withInt:(jint)number {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_set_startPoint_(self, p);
}

- (jboolean)isAlwaysFixed {
  return NO;
}

- (void)removeStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) {
    @try {
      [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                        withInt:(jint)number {
  [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)setWaitForStartPoint {
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *)getVector {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_withDouble_withDouble_withDouble_(kernel_, [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX], [v_ getY], [v_ getZ]) autorelease];
}

- (IOSDoubleArray *)getPointAsDouble {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX], [v_ getY], [v_ getZ] } count:3];
  return ret;
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD2 {
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  [ret setValuesWithGeogebraCommonKernelMatrixCoords:v_ withInt:3];
  return ret;
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInD3 {
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  [ret setValuesWithGeogebraCommonKernelMatrixCoords:v_ withInt:4];
  return ret;
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [self getCoordsInD3];
}

- (jboolean)isLaTeXDrawableGeo {
  return YES;
}

- (void)getInhomCoordsWithDoubleArray:(IOSDoubleArray *)coords {
  *IOSDoubleArray_GetRef(nil_chk(coords), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX];
  *IOSDoubleArray_GetRef(coords, 1) = [v_ getY];
  *IOSDoubleArray_GetRef(coords, 2) = [v_ getZ];
}

- (IOSDoubleArray *)getInhomCoords {
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:3];
  [self getInhomCoordsWithDoubleArray:coords];
  return coords;
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getXBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getYBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
  [spreadsheetColumnHeadings_ addWithId:[self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getZBracket], GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [self getNameGeo], GeogebraCommonPluginOperationEnum_get_PLUS(), [self getCloseBracket]) autorelease]) autorelease]]];
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_SEVERAL_VALUES_OR_COPY();
}

- (NSString *)getTraceDialogAsValues {
  NSString *name = [self getLabelTextOrHTMLWithBoolean:NO];
  JavaLangStringBuilder *sb1 = [new_JavaLangStringBuilder_init() autorelease];
  [sb1 appendWithNSString:@"x("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), y("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@"), z("];
  [sb1 appendWithNSString:name];
  [sb1 appendWithNSString:@")"];
  return [sb1 description];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  GeogebraCommonKernelGeosGeoNumeric *xx = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) getX]) autorelease];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:xx];
  GeogebraCommonKernelGeosGeoNumeric *yy = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [v_ getY]) autorelease];
  [spreadsheetTraceList addWithId:yy];
  GeogebraCommonKernelGeosGeoNumeric *zz = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [v_ getZ]) autorelease];
  [spreadsheetTraceList addWithId:zz];
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (void)updateLocation {
  [self updateGeo];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_(self, phiValue);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_(self, phiValue);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(S)) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *vn = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation)) getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiValue
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *o1 = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getStartInhomCoords];
  GeogebraCommonKernelMatrixCoords *vn = [line getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, phiValue, o1, vn);
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) mulWithDouble:-1]];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) getDirectionInD3])) normalized];
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) dotproductWithGeogebraCommonKernelMatrixCoords:vn]])) addWithGeogebraCommonKernelMatrixCoords:[v_ mulWithDouble:-1]]];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoCoordSys2D>) nil_chk(plane)) getDirectionInD3])) normalized];
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[v_ addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:-2 * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) dotproductWithGeogebraCommonKernelMatrixCoords:vn]]]];
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v_)) mulWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble]]];
}

- (jboolean)isMatrixTransformable {
  return YES;
}

- (void)matrixTransformWithDouble:(jdouble)a
                       withDouble:(jdouble)b
                       withDouble:(jdouble)c
                       withDouble:(jdouble)d {
  jdouble x = [self getX];
  jdouble y = [self getY];
  JavaLangDouble *x1 = JavaLangDouble_valueOfWithDouble_(a * x + b * y);
  JavaLangDouble *y1 = JavaLangDouble_valueOfWithDouble_(c * x + d * y);
  [self setCoordsWithDouble:[x1 doubleValue] withDouble:[y1 doubleValue] withDouble:[self getZ] withDouble:[self getW]];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  jdouble x1 = a00 * x + a01 * y + a02 * z;
  jdouble y1 = a10 * x + a11 * y + a12 * z;
  jdouble z1 = a20 * x + a21 * y + a22 * z;
  [self setCoordsWithDouble:x1 withDouble:y1 withDouble:z1 withDouble:[self getW]];
}

- (void)setCartesian {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
}

- (void)setCartesian3D {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN_3D];
}

- (void)setSpherical {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_SPHERICAL];
}

- (void)setPolar {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_POLAR];
}

- (void)setComplex {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (jboolean)moveVectorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)rwTransVec
                      withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)endPosition {
  jboolean movedGeo = NO;
  if (endPosition != nil) {
  }
  else {
    GeogebraCommonKernelMatrixCoords *coords;
    GeogebraCommonKernelMatrixCoords *current = [self getCoords];
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(current)) getLength] < [((GeogebraCommonKernelMatrixCoords *) nil_chk(rwTransVec)) getLength]) {
      coords = [current addWithGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    else {
      coords = [current addSmallerWithGeogebraCommonKernelMatrixCoords:rwTransVec];
    }
    [self setCoordsWithGeogebraCommonKernelMatrixCoords:coords];
    movedGeo = YES;
  }
  return movedGeo;
}

- (void)dealloc {
  RELEASE_(startPoint_);
  RELEASE_(matrix_);
  RELEASE_(labelPosition_);
  RELEASE_(sbToString_GeoVector3D_);
  RELEASE_(sbBuildValueString_GeoVector3D_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoVector3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withDouble:withDouble:withDouble:", "GeoVector3D", NULL, 0x1, NULL, NULL },
    { "setCoordsWithDoubleArray:", "setCoords", "V", 0x1, NULL, NULL },
    { "updateStartPointPosition", NULL, "V", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isInfinite", NULL, "Z", 0x11, NULL, NULL },
    { "isFinite", NULL, "Z", 0x11, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x1, NULL, NULL },
    { "isPath", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoVector", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "setCoordSepWithGeogebraCommonKernelStringTemplate:", "setCoordSep", "V", 0x2, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "getStartPoints", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x1, NULL, NULL },
    { "initStartPointWithGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "removeStartPointWithGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.Geo3DVec;", 0x1, NULL, NULL },
    { "getPointAsDouble", NULL, "[D", 0x1, NULL, NULL },
    { "getCoordsInD2", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "getInhomCoordsWithDoubleArray:", "getInhomCoords", "V", 0x1, NULL, NULL },
    { "getInhomCoords", NULL, "[D", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "getTraceDialogAsValues", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "rotate", "V", 0x2, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "isMatrixTransformable", NULL, "Z", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x1, NULL, NULL },
    { "setCartesian", NULL, "V", 0x1, NULL, NULL },
    { "setCartesian3D", NULL, "V", 0x1, NULL, NULL },
    { "setSpherical", NULL, "V", 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x1, NULL, NULL },
    { "setComplex", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "moveVectorWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "moveVector", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "matrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "labelPosition_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "sbToString_GeoVector3D_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sbBuildValueString_GeoVector3D_", "sbBuildValueString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D = { 2, "GeoVector3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 70, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_labelPosition_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbToString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbBuildValueString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [self setCartesian3D];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVec4D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_withDouble_(self, c, x, y, z, 0);
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_labelPosition_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 0));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbToString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_sbBuildValueString_GeoVector3D_(self, new_JavaLangStringBuilder_initWithInt_(50));
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setAndConsume_matrix_(self, new_GeogebraCommonKernelMatrixCoordMatrix_initWithInt_withInt_(4, 2));
  [self setCartesian3D];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(GeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self) {
  GeogebraCommonKernelMatrixCoords *v = [self getCoords];
  return JavaLangDouble_isInfiniteWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX]) || JavaLangDouble_isInfiniteWithDouble_([v getY]) || JavaLangDouble_isInfiniteWithDouble_([v getZ]);
}

jboolean GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isFinite(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self) {
  return !GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_isInfinite(self);
}

JavaLangStringBuilder *GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) setLengthWithInt:0];
  switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"ggbvect["];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[self getX] withGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithChar:','];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getY] withGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithChar:','];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getZ] withGeogebraCommonKernelStringTemplate:tpl]];
    [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"]"];
    return self->sbBuildValueString_GeoVector3D_;
    default:
    ;
  }
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@"("];
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[self getX] withGeogebraCommonKernelStringTemplate:tpl]];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithGeogebraCommonKernelStringTemplate_(self, tpl);
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getY] withGeogebraCommonKernelStringTemplate:tpl]];
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithGeogebraCommonKernelStringTemplate_(self, tpl);
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:[self->kernel_ formatWithDouble:[self getZ] withGeogebraCommonKernelStringTemplate:tpl]];
  [self->sbBuildValueString_GeoVector3D_ appendWithNSString:@")"];
  return self->sbBuildValueString_GeoVector3D_;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_setCoordSepWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, GeogebraCommonKernelStringTemplate *tpl) {
  switch ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getCoordStyleWithInt:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getCoordStyle]]) {
    case GeogebraCommonKernelKernel_COORD_STYLE_AUSTRIAN:
    [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) appendWithNSString:@" | "];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(self->sbBuildValueString_GeoVector3D_)) appendWithNSString:@", "];
  }
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue) {
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x = [self getX];
  jdouble y = [self getY];
  jdouble z = [self getZ];
  [self setCoordsWithDouble:x * cos - y * sin withDouble:x * sin + y * cos withDouble:z withDouble:[self getW]];
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_rotateWithGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *self, id<GeogebraCommonKernelArithmeticNumberValue> phiValue, GeogebraCommonKernelMatrixCoords *o1, GeogebraCommonKernelMatrixCoords *vn) {
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero]) {
    [self setUndefined];
    return;
  }
  jdouble phi = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phiValue)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  GeogebraCommonKernelMatrixCoords *vn2 = [vn normalized];
  GeogebraCommonKernelMatrixCoords *v2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn2)) crossProduct4WithGeogebraCommonKernelMatrixCoords:self->v_];
  GeogebraCommonKernelMatrixCoords *v1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v2)) crossProduct4WithGeogebraCommonKernelMatrixCoords:vn2];
  [self setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(v1)) mulWithDouble:cos])) addWithGeogebraCommonKernelMatrixCoords:[v2 mulWithDouble:sin]])) addWithGeogebraCommonKernelMatrixCoords:[vn2 mulWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(self->v_)) dotproductWithGeogebraCommonKernelMatrixCoords:vn2]]]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D)
