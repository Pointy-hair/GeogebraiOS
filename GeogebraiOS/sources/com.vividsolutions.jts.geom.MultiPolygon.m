//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geom/MultiPolygon.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryCollection.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/MultiPolygon.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "java/util/ArrayList.h"

#define ComVividsolutionsJtsGeomMultiPolygon_serialVersionUID -551033529766975875LL

J2OBJC_STATIC_FIELD_GETTER(ComVividsolutionsJtsGeomMultiPolygon, serialVersionUID, jlong)

@implementation ComVividsolutionsJtsGeomMultiPolygon

- (instancetype)initWithComVividsolutionsJtsGeomPolygonArray:(IOSObjectArray *)polygons
                  withComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)precisionModel
                                                     withInt:(jint)SRID {
  ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, polygons, precisionModel, SRID);
  return self;
}

- (instancetype)initWithComVividsolutionsJtsGeomPolygonArray:(IOSObjectArray *)polygons
                 withComVividsolutionsJtsGeomGeometryFactory:(ComVividsolutionsJtsGeomGeometryFactory *)factory {
  ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomGeometryFactory_(self, polygons, factory);
  return self;
}

- (jint)getDimension {
  return 2;
}

- (jint)getBoundaryDimension {
  return 1;
}

- (NSString *)getGeometryType {
  return @"MultiPolygon";
}

- (jboolean)isSimple {
  return YES;
}

- (ComVividsolutionsJtsGeomGeometry *)getBoundary {
  if ([self isEmpty]) {
    return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:nil];
  }
  JavaUtilArrayList *allRings = [new_JavaUtilArrayList_init() autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geometries_))->size_; i++) {
    ComVividsolutionsJtsGeomPolygon *polygon = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(IOSObjectArray_Get(geometries_, i), [ComVividsolutionsJtsGeomPolygon class]);
    ComVividsolutionsJtsGeomGeometry *rings = [((ComVividsolutionsJtsGeomPolygon *) nil_chk(polygon)) getBoundary];
    for (jint j = 0; j < [((ComVividsolutionsJtsGeomGeometry *) nil_chk(rings)) getNumGeometries]; j++) {
      [allRings addWithId:[rings getGeometryNWithInt:j]];
    }
  }
  IOSObjectArray *allRingsArray = [IOSObjectArray arrayWithLength:[allRings size] type:ComVividsolutionsJtsGeomLineString_class_()];
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:(IOSObjectArray *) check_class_cast([allRings toArrayWithNSObjectArray:allRingsArray], [IOSObjectArray class])];
}

- (jboolean)equalsExactWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)other
                                                 withDouble:(jdouble)tolerance {
  if (![self isEquivalentClassWithComVividsolutionsJtsGeomGeometry:other]) {
    return NO;
  }
  return [super equalsExactWithComVividsolutionsJtsGeomGeometry:other withDouble:tolerance];
}

- (ComVividsolutionsJtsGeomGeometry *)reverse {
  jint n = ((IOSObjectArray *) nil_chk(geometries_))->size_;
  IOSObjectArray *revGeoms = [IOSObjectArray arrayWithLength:n type:ComVividsolutionsJtsGeomPolygon_class_()];
  for (jint i = 0; i < geometries_->size_; i++) {
    IOSObjectArray_Set(revGeoms, i, (ComVividsolutionsJtsGeomPolygon *) check_class_cast([((ComVividsolutionsJtsGeomGeometry *) nil_chk(IOSObjectArray_Get(geometries_, i))) reverse], [ComVividsolutionsJtsGeomPolygon class]));
  }
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([self getFactory])) createMultiPolygonWithComVividsolutionsJtsGeomPolygonArray:revGeoms];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomPolygonArray:withComVividsolutionsJtsGeomPrecisionModel:withInt:", "MultiPolygon", NULL, 0x1, NULL, NULL },
    { "initWithComVividsolutionsJtsGeomPolygonArray:withComVividsolutionsJtsGeomGeometryFactory:", "MultiPolygon", NULL, 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getBoundaryDimension", NULL, "I", 0x1, NULL, NULL },
    { "getGeometryType", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isSimple", NULL, "Z", 0x1, NULL, NULL },
    { "getBoundary", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
    { "equalsExactWithComVividsolutionsJtsGeomGeometry:withDouble:", "equalsExact", "Z", 0x1, NULL, NULL },
    { "reverse", NULL, "Lcom.vividsolutions.jts.geom.Geometry;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = ComVividsolutionsJtsGeomMultiPolygon_serialVersionUID },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomMultiPolygon = { 2, "MultiPolygon", "com.vividsolutions.jts.geom", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomMultiPolygon;
}

@end

void ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(ComVividsolutionsJtsGeomMultiPolygon *self, IOSObjectArray *polygons, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomGeometryFactory_(self, polygons, [new_ComVividsolutionsJtsGeomGeometryFactory_initWithComVividsolutionsJtsGeomPrecisionModel_withInt_(precisionModel, SRID) autorelease]);
}

ComVividsolutionsJtsGeomMultiPolygon *new_ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(IOSObjectArray *polygons, ComVividsolutionsJtsGeomPrecisionModel *precisionModel, jint SRID) {
  ComVividsolutionsJtsGeomMultiPolygon *self = [ComVividsolutionsJtsGeomMultiPolygon alloc];
  ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomPrecisionModel_withInt_(self, polygons, precisionModel, SRID);
  return self;
}

void ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomGeometryFactory_(ComVividsolutionsJtsGeomMultiPolygon *self, IOSObjectArray *polygons, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsGeomGeometryCollection_initWithComVividsolutionsJtsGeomGeometryArray_withComVividsolutionsJtsGeomGeometryFactory_(self, polygons, factory);
}

ComVividsolutionsJtsGeomMultiPolygon *new_ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomGeometryFactory_(IOSObjectArray *polygons, ComVividsolutionsJtsGeomGeometryFactory *factory) {
  ComVividsolutionsJtsGeomMultiPolygon *self = [ComVividsolutionsJtsGeomMultiPolygon alloc];
  ComVividsolutionsJtsGeomMultiPolygon_initWithComVividsolutionsJtsGeomPolygonArray_withComVividsolutionsJtsGeomGeometryFactory_(self, polygons, factory);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomMultiPolygon)
