//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdGetTime.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CmdGetTime.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Date.h"

@interface GeogebraCommonKernelCommandsCmdGetTime ()

+ (void)decodeWithJavaUtilDate:(JavaUtilDate *)cal
                      withChar:(jchar)c
     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc;

@end

static IOSIntArray *GeogebraCommonKernelCommandsCmdGetTime_month_days_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelCommandsCmdGetTime, month_days_, IOSIntArray *)

__attribute__((unused)) static void GeogebraCommonKernelCommandsCmdGetTime_decodeWithJavaUtilDate_withChar_withJavaLangStringBuilder_withGeogebraCommonMainLocalization_(JavaUtilDate *cal, jchar c, JavaLangStringBuilder *sb, GeogebraCommonMainLocalization *loc);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelCommandsCmdGetTime)

@implementation GeogebraCommonKernelCommandsCmdGetTime

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdGetTime_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    GeogebraCommonKernelGeosGeoText *monthStr1;
    GeogebraCommonKernelGeosGeoText *dayStr1;
    JavaUtilDate *cal;
    GeogebraCommonKernelGeosGeoNumeric *mins1;
    jint d;
    GeogebraCommonKernelGeosGeoNumeric *day;
    jint m;
    GeogebraCommonKernelGeosGeoNumeric *month1;
    GeogebraCommonKernelGeosGeoNumeric *year1;
    GeogebraCommonKernelGeosGeoNumeric *secs1;
    GeogebraCommonKernelGeosGeoNumeric *hours1;
    GeogebraCommonKernelGeosGeoNumeric *date1;
    GeogebraCommonKernelGeosGeoNumeric *ms1;
    GeogebraCommonKernelGeosGeoList *list;
    IOSObjectArray *ret;
    NSString *date;
    GeogebraCommonKernelGeosGeoText *rettext;
    IOSObjectArray *ret1;
    switch (n) {
      case 0:
      monthStr1 = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      dayStr1 = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      cal = [new_JavaUtilDate_init() autorelease];
      mins1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getMinutes]) autorelease];
      d = [cal getDay] + 1;
      day = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, d) autorelease];
      m = [cal getMonth] + 1;
      month1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, m) autorelease];
      year1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getYear] + 1900) autorelease];
      secs1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getSeconds]) autorelease];
      hours1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getHours]) autorelease];
      date1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getDate]) autorelease];
      ms1 = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [cal getTime] % 1000) autorelease];
      [monthStr1 setTextStringWithNSString:[((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:JreStrcat("$I", @"Month.", m)]];
      [dayStr1 setTextStringWithNSString:[app_ getPlainWithNSString:JreStrcat("$I", @"Day.", d)]];
      list = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [list setLabelWithNSString:[c getLabel]];
      [list addWithGeogebraCommonKernelGeosGeoElement:ms1];
      [list addWithGeogebraCommonKernelGeosGeoElement:secs1];
      [list addWithGeogebraCommonKernelGeosGeoElement:mins1];
      [list addWithGeogebraCommonKernelGeosGeoElement:hours1];
      [list addWithGeogebraCommonKernelGeosGeoElement:date1];
      [list addWithGeogebraCommonKernelGeosGeoElement:month1];
      [list addWithGeogebraCommonKernelGeosGeoElement:year1];
      [list addWithGeogebraCommonKernelGeosGeoElement:monthStr1];
      [list addWithGeogebraCommonKernelGeosGeoElement:dayStr1];
      [list addWithGeogebraCommonKernelGeosGeoElement:day];
      [list update];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ list } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 1:
      date = GeogebraCommonKernelCommandsCmdGetTime_buildLocalizedDateWithNSString_withJavaUtilDate_withGeogebraCommonMainLocalization_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:0])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [new_JavaUtilDate_init() autorelease], loc_);
      rettext = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(cons_, [c getLabel], date) autorelease];
      ret1 = [IOSObjectArray arrayWithObjects:(id[]){ rettext } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret1;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (NSString *)buildLocalizedDateWithNSString:(NSString *)format
                            withJavaUtilDate:(JavaUtilDate *)cal
          withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return GeogebraCommonKernelCommandsCmdGetTime_buildLocalizedDateWithNSString_withJavaUtilDate_withGeogebraCommonMainLocalization_(format, cal, loc);
}

+ (void)decodeWithJavaUtilDate:(JavaUtilDate *)cal
                      withChar:(jchar)c
     withJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  GeogebraCommonKernelCommandsCmdGetTime_decodeWithJavaUtilDate_withChar_withJavaLangStringBuilder_withGeogebraCommonMainLocalization_(cal, c, sb, loc);
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelCommandsCmdGetTime class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelCommandsCmdGetTime_month_days_, nil, [IOSIntArray newArrayWithInts:(jint[]){ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 } count:12]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelCommandsCmdGetTime)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdGetTime", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "buildLocalizedDateWithNSString:withJavaUtilDate:withGeogebraCommonMainLocalization:", "buildLocalizedDate", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "decodeWithJavaUtilDate:withChar:withJavaLangStringBuilder:withGeogebraCommonMainLocalization:", "decode", "V", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "month_days_", NULL, 0x1a, "[I", &GeogebraCommonKernelCommandsCmdGetTime_month_days_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdGetTime = { 2, "CmdGetTime", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdGetTime;
}

@end

void GeogebraCommonKernelCommandsCmdGetTime_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdGetTime *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdGetTime *new_GeogebraCommonKernelCommandsCmdGetTime_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdGetTime *self = [GeogebraCommonKernelCommandsCmdGetTime alloc];
  GeogebraCommonKernelCommandsCmdGetTime_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

NSString *GeogebraCommonKernelCommandsCmdGetTime_buildLocalizedDateWithNSString_withJavaUtilDate_withGeogebraCommonMainLocalization_(NSString *format, JavaUtilDate *cal, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelCommandsCmdGetTime_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(20) autorelease];
  IOSCharArray *cArray = [((NSString *) nil_chk(format)) toCharArray];
  for (jint i = 0; i < ((IOSCharArray *) nil_chk(cArray))->size_; i++) {
    if (IOSCharArray_Get(cArray, i) == '\\' && i < cArray->size_ - 1) {
      GeogebraCommonKernelCommandsCmdGetTime_decodeWithJavaUtilDate_withChar_withJavaLangStringBuilder_withGeogebraCommonMainLocalization_(cal, IOSCharArray_Get(cArray, i + 1), sb, loc);
      i++;
    }
    else {
      [sb appendWithChar:IOSCharArray_Get(cArray, i)];
    }
  }
  return [sb description];
}

void GeogebraCommonKernelCommandsCmdGetTime_decodeWithJavaUtilDate_withChar_withJavaLangStringBuilder_withGeogebraCommonMainLocalization_(JavaUtilDate *cal, jchar c, JavaLangStringBuilder *sb, GeogebraCommonMainLocalization *loc) {
  GeogebraCommonKernelCommandsCmdGetTime_initialize();
  jint d = [((JavaUtilDate *) nil_chk(cal)) getDay] + 1;
  jint m = [cal getMonth] + 1;
  jint date = [cal getDate];
  jint month = [cal getMonth];
  jint year = [cal getYear] + 1900;
  jint hours = [cal getHours];
  jint mins = [cal getMinutes];
  jint secs = [cal getSeconds];
  jint yearday = 0;
  NSString *dayStr = [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:JreStrcat("$I", @"Day.", d)];
  NSString *monthStr = [loc getPlainWithNSString:JreStrcat("$I", @"Month.", m)];
  {
    NSString *ordinal;
    JavaUtilDate *temp;
    jint d1;
    switch (c) {
      case 'd':
      if (date < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:date];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:date];
      }
      break;
      case 'D':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((NSString *) nil_chk(dayStr)) substring:0 endIndex:3]];
      break;
      case 'j':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:date];
      break;
      case 'l':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:dayStr];
      break;
      case 'N':
      if (d == 1) {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:7];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:d - 1];
      }
      break;
      case 'S':
      ordinal = [NSString stringWithString:[loc getOrdinalNumberWithInt:date]];
      ordinal = [ordinal replaceFirst:NSString_valueOfInt_(date) withReplacement:@""];
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:ordinal];
      break;
      case 'w':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:d - 1];
      break;
      case 'z':
      yearday = 0;
      if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) *IOSIntArray_GetRef(nil_chk(GeogebraCommonKernelCommandsCmdGetTime_month_days_), 1) = 29;
      for (jint j = 0; j < month; j++) {
        yearday += IOSIntArray_Get(nil_chk(GeogebraCommonKernelCommandsCmdGetTime_month_days_), j);
      }
      yearday += (date - 1);
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:yearday];
      break;
      case 'W':
      yearday = 0;
      if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) *IOSIntArray_GetRef(nil_chk(GeogebraCommonKernelCommandsCmdGetTime_month_days_), 1) = 29;
      for (jint j = 0; j < month; j++) {
        yearday += IOSIntArray_Get(nil_chk(GeogebraCommonKernelCommandsCmdGetTime_month_days_), j);
      }
      yearday += (date - 1);
      temp = [new_JavaUtilDate_initWithInt_withInt_withInt_([cal getYear], 0, 1) autorelease];
      d1 = [temp getDay] + 1;
      yearday -= ((9 - d1) % 7);
      if (yearday < 0) yearday = -7;
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:(yearday / 7) + 1];
      break;
      case 'F':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:monthStr];
      break;
      case 'm':
      if (m < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:m];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:m];
      }
      break;
      case 'M':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((NSString *) nil_chk(monthStr)) substring:0 endIndex:3]];
      break;
      case 'n':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:m];
      break;
      case 't':
      switch (m) {
        case 1:
        case 3:
        case 5:
        case 7:
        case 8:
        case 10:
        case 12:
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:31];
        break;
        case 2:
        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
          [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:29];
        }
        else {
          [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:28];
        }
        break;
        default:
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:30];
        break;
      }
      break;
      case 'L':
      if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:1];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0];
      }
      break;
      case 'Y':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:year];
      break;
      case 'y':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:year % 100];
      break;
      case 'a':
      if (hours >= 12) {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"pm"];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"am"];
      }
      break;
      case 'A':
      if (hours >= 12) {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"PM"];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"AM"];
      }
      break;
      case 'g':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:(hours % 12) + 1];
      break;
      case 'G':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:hours];
      break;
      case 'h':
      if (((hours % 12) + 1) < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:(hours % 12) + 1];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:(hours % 12) + 1];
      }
      break;
      case 'H':
      if (hours < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:hours];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:hours];
      }
      break;
      case 'i':
      if (mins < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:mins];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:mins];
      }
      break;
      case 's':
      if (secs < 10) {
        [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:0])) appendWithInt:secs];
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:secs];
      }
      break;
      case 'U':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithLong:[cal getTime] / 1000];
      break;
      case '\\':
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'\\'];
      break;
      default:
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"?"];
      break;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdGetTime)
