//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPerimeterLocus.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPerimeterLocus.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAlgosAlgoPerimeterLocus () {
 @public
  GeogebraCommonKernelGeosGeoLocus *locus_;
  GeogebraCommonKernelGeosGeoNumeric *circum_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPerimeterLocus, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPerimeterLocus, circum_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPerimeterLocus_compute(GeogebraCommonKernelAlgosAlgoPerimeterLocus *self);

@implementation GeogebraCommonKernelAlgosAlgoPerimeterLocus

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoLocus:(GeogebraCommonKernelGeosGeoLocus *)locus {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_(self, cons, label, locus);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoLocus:(GeogebraCommonKernelGeosGeoLocus *)locus {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLocus_(self, cons, locus);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Perimeter();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, locus_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:circum_];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_compute(self);
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return circum_;
}

- (void)dealloc {
  RELEASE_(locus_);
  RELEASE_(circum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoLocus:", "AlgoPerimeterLocus", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoLocus:", "AlgoPerimeterLocus", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "circum_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPerimeterLocus = { 2, "AlgoPerimeterLocus", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPerimeterLocus;
}

@end

void GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_(GeogebraCommonKernelAlgosAlgoPerimeterLocus *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLocus *locus) {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLocus_(self, cons, locus);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoPerimeterLocus *new_GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLocus *locus) {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus *self = [GeogebraCommonKernelAlgosAlgoPerimeterLocus alloc];
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLocus_(self, cons, label, locus);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLocus_(GeogebraCommonKernelAlgosAlgoPerimeterLocus *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLocus *locus) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_set_locus_(self, locus);
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_setAndConsume_circum_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_compute(self);
}

GeogebraCommonKernelAlgosAlgoPerimeterLocus *new_GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLocus_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLocus *locus) {
  GeogebraCommonKernelAlgosAlgoPerimeterLocus *self = [GeogebraCommonKernelAlgosAlgoPerimeterLocus alloc];
  GeogebraCommonKernelAlgosAlgoPerimeterLocus_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLocus_(self, cons, locus);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPerimeterLocus_compute(GeogebraCommonKernelAlgosAlgoPerimeterLocus *self) {
  if (![((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    return;
  }
  JavaUtilArrayList *points = [self->locus_ getPoints];
  if ([((JavaUtilArrayList *) nil_chk(points)) size] < 2) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setUndefined];
    return;
  }
  GeogebraCommonKernelMyPoint *lastPoint = [points getWithInt:0];
  jdouble length = 0;
  for (jint i = 1; i < [points size]; i++) {
    GeogebraCommonKernelMyPoint *pt = [points getWithInt:i];
    length = length + [((GeogebraCommonKernelMyPoint *) nil_chk(pt)) distanceWithGeogebraCommonKernelMyPoint:lastPoint];
    lastPoint = pt;
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->circum_)) setValueWithDouble:length];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPerimeterLocus)
