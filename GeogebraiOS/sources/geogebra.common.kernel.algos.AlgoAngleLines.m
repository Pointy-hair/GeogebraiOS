//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAngleLines.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoAngleLines.h"
#include "geogebra/common/kernel/algos/AlgoAngleLinesND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAlgosAlgoAngleLines ()

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                    withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h;

@end

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelAlgosAlgoAngleLines *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoAngleLines *new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelAlgosAlgoAngleLines

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, g, h, orientation);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                    withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, g, h);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, g, h);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, orientation);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoAngleLines *)copy__ {
  return [new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) copy__], [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h_)) copy__]) autorelease];
}

- (void)compute {
  jdouble det = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->x_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(h_, [GeogebraCommonKernelGeosGeoLine class]))))->y_ - ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->y_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(h_, [GeogebraCommonKernelGeosGeoLine class]))))->x_;
  jdouble prod = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->x_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(h_, [GeogebraCommonKernelGeosGeoLine class]))))->x_ + ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoLine class]))))->y_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(h_, [GeogebraCommonKernelGeosGeoLine class]))))->y_;
  jdouble value = JavaLangMath_atan2WithDouble_withDouble_(det, prod);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(angle_)) setValueWithDouble:value];
}

- (jint)getInputLengthForXML {
  return [self getInputLengthForXMLMayNeedXOYPlane];
}

- (jint)getInputLengthForCommandDescription {
  return [self getInputLengthForCommandDescriptionMayNeedXOYPlane];
}

- (GeogebraCommonKernelGeosGeoElement *)getInputWithInt:(jint)i {
  return [self getInputMaybeXOYPlaneWithInt:i];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAngleLines", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoAngleLines", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoAngleLines", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAngleLines", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.algos.AlgoAngleLines;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getInputLengthForXML", NULL, "I", 0x4, NULL, NULL },
    { "getInputLengthForCommandDescription", NULL, "I", 0x4, NULL, NULL },
    { "getInputWithInt:", "getInput", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAngleLines = { 2, "AlgoAngleLines", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAngleLines;
}

@end

void GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAngleLines *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngleLinesND_initWithGeogebraCommonKernelConstruction_(self, cons);
  [self setInputWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  GeogebraCommonKernelAlgosAlgoAngleLinesND_set_angle_(self, [self newGeoAngleWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  [self compute];
}

GeogebraCommonKernelAlgosAlgoAngleLines *new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngleLines *self = [GeogebraCommonKernelAlgosAlgoAngleLines alloc];
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, g, h, orientation);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelAlgosAlgoAngleLines *self, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonKernelAlgosAlgoAngleLinesND_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, g, h);
}

GeogebraCommonKernelAlgosAlgoAngleLines *new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonKernelAlgosAlgoAngleLines *self = [GeogebraCommonKernelAlgosAlgoAngleLines alloc];
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, g, h);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelAlgosAlgoAngleLines *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, nil);
}

GeogebraCommonKernelAlgosAlgoAngleLines *new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h) {
  GeogebraCommonKernelAlgosAlgoAngleLines *self = [GeogebraCommonKernelAlgosAlgoAngleLines alloc];
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, g, h);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoAngleLines *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, g, h, orientation);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoAngleLines *new_GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonKernelAlgosAlgoAngleLines *self = [GeogebraCommonKernelAlgosAlgoAngleLines alloc];
  GeogebraCommonKernelAlgosAlgoAngleLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, orientation);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAngleLines)
