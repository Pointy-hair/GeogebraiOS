//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoRotateText.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoRotateText.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAdvancedAlgoRotateText () {
 @public
  GeogebraCommonKernelGeosGeoText *text_;
  GeogebraCommonKernelGeosGeoText *args_;
  GeogebraCommonKernelGeosGeoNumeric *angle_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoRotateText, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoRotateText, args_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoRotateText, angle_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoRotateText, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoRotateText_compute(GeogebraCommonKernelAdvancedAlgoRotateText *self);

@implementation GeogebraCommonKernelAdvancedAlgoRotateText

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)angle {
  GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, args, angle);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)angle {
  GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, args, angle);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RotateText();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, args_);
  IOSObjectArray_Set(input_, 1, angle_);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(args_)) addTextDescendantWithGeogebraCommonKernelGeosGeoText:text_];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoRotateText_compute(self);
}

+ (void)appendRotatedTextWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbuilder
               withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text
                                        withDouble:(jdouble)degrees {
  GeogebraCommonKernelAdvancedAlgoRotateText_appendRotatedTextWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoText_withDouble_(sbuilder, text, degrees);
}

- (jboolean)isLaTeXTextCommand {
  return YES;
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(args_);
  RELEASE_(angle_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoRotateText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoRotateText", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "appendRotatedTextWithJavaLangStringBuilder:withGeogebraCommonKernelGeosGeoText:withDouble:", "appendRotatedText", "V", 0x9, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "args_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoRotateText = { 2, "AlgoRotateText", "geogebra.common.kernel.advanced", NULL, 0x1, 8, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoRotateText;
}

@end

void GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAdvancedAlgoRotateText *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *args, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, args, angle);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoRotateText *new_GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *args, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAdvancedAlgoRotateText *self = [GeogebraCommonKernelAdvancedAlgoRotateText alloc];
  GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, args, angle);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAdvancedAlgoRotateText *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoText *args, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoRotateText_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonKernelAdvancedAlgoRotateText_set_args_(self, args);
  GeogebraCommonKernelAdvancedAlgoRotateText_set_angle_(self, angle);
  GeogebraCommonKernelAdvancedAlgoRotateText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoRotateText_compute(self);
}

GeogebraCommonKernelAdvancedAlgoRotateText *new_GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoText *args, GeogebraCommonKernelGeosGeoNumeric *angle) {
  GeogebraCommonKernelAdvancedAlgoRotateText *self = [GeogebraCommonKernelAdvancedAlgoRotateText alloc];
  GeogebraCommonKernelAdvancedAlgoRotateText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, args, angle);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoRotateText_compute(GeogebraCommonKernelAdvancedAlgoRotateText *self) {
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(self->args_)) isDefined] || ![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->angle_)) isDefined] || [self->angle_ isInfinite]) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(self->sb_)) setLengthWithInt:0];
  GeogebraCommonKernelAdvancedAlgoRotateText_appendRotatedTextWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoText_withDouble_(self->sb_, self->args_, [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->angle_)) getValue] * 180 / JavaLangMath_PI);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:[self->sb_ description]];
  [self->text_ setLaTeXWithBoolean:YES withBoolean:NO];
  [self->text_ setSerifFontWithBoolean:[self->args_ isSerifFont]];
}

void GeogebraCommonKernelAdvancedAlgoRotateText_appendRotatedTextWithJavaLangStringBuilder_withGeogebraCommonKernelGeosGeoText_withDouble_(JavaLangStringBuilder *sbuilder, GeogebraCommonKernelGeosGeoText *text, jdouble degrees) {
  GeogebraCommonKernelAdvancedAlgoRotateText_initialize();
  jboolean latex = [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLaTeX];
  [((JavaLangStringBuilder *) nil_chk(sbuilder)) appendWithNSString:@"\\rotatebox{"];
  [sbuilder appendWithDouble:degrees];
  [sbuilder appendWithNSString:@"}{ "];
  if (!latex) [sbuilder appendWithNSString:@"\\text{ "];
  [sbuilder appendWithNSString:[text getTextString]];
  if (!latex) [sbuilder appendWithNSString:@" } "];
  [sbuilder appendWithNSString:@" }"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoRotateText)
