//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdRoot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoRootInterval.h"
#include "geogebra/common/kernel/algos/AlgoRootNewton.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomialInterval.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CmdRoot.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelCommandsCmdRoot ()

- (IOSObjectArray *)RootWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f;

@end

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelCommandsCmdRoot_RootWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCommandsCmdRoot *self, GeogebraCommonKernelArithmeticCommand *c, GeogebraCommonKernelGeosGeoFunction *f);

@implementation GeogebraCommonKernelCommandsCmdRoot

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdRoot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 1:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable])) {
      GeogebraCommonKernelGeosGeoFunction *gf = [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction];
      return GeogebraCommonKernelCommandsCmdRoot_RootWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoFunction_(self, c, gf);
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable]) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      GeogebraCommonKernelAlgosAlgoRootNewton *algo = [new_GeogebraCommonKernelAlgosAlgoRootNewton_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getRootPoint] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      GeogebraCommonKernelAlgosAlgoRootInterval *algo = [new_GeogebraCommonKernelAlgosAlgoRootInterval_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction], (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getRootPoint] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (IOSObjectArray *)RootWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                          withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  return GeogebraCommonKernelCommandsCmdRoot_RootWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoFunction_(self, c, f);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdRoot", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "RootWithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoFunction:", "Root", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdRoot = { 2, "CmdRoot", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdRoot;
}

@end

void GeogebraCommonKernelCommandsCmdRoot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdRoot *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdRoot *new_GeogebraCommonKernelCommandsCmdRoot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdRoot *self = [GeogebraCommonKernelCommandsCmdRoot alloc];
  GeogebraCommonKernelCommandsCmdRoot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

IOSObjectArray *GeogebraCommonKernelCommandsCmdRoot_RootWithGeogebraCommonKernelArithmeticCommand_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCommandsCmdRoot *self, GeogebraCommonKernelArithmeticCommand *c, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelArithmeticExpressionNode *exp = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getFunctionExpression];
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(exp)) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_IF()]) {
    GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval *algo = [new_GeogebraCommonKernelAlgosAlgoRootsPolynomialInterval_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(self->cons_, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels], f) autorelease];
    IOSObjectArray *g = [algo getRootPoints];
    return g;
  }
  if (![((GeogebraCommonKernelConstruction *) nil_chk([f getConstruction])) isFileLoading] && ![f isPolynomialFunctionWithBoolean:YES] && [f isDefined]) @throw [self argErrWithGeogebraCommonMainApp:self->app_ withNSString:[((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getName] withGeogebraCommonKernelArithmeticExpressionValue:f];
  GeogebraCommonKernelAlgosAlgoRootsPolynomial *algo = [new_GeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunction_(self->cons_, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabels], f) autorelease];
  IOSObjectArray *g = [algo getRootPoints];
  return g;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdRoot)
