//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersection.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "geogebra/common/kernel/algos/AlgoIntersection.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"

@interface GeogebraCommonKernelAlgosAlgoIntersection () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *inputList2_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_, size2_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersection, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersection, inputList2_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersection, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersection_compute(GeogebraCommonKernelAlgosAlgoIntersection *self);

@implementation GeogebraCommonKernelAlgosAlgoIntersection

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList2 {
  GeogebraCommonKernelAlgosAlgoIntersection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList, inputList2);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersection();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, inputList2_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoIntersection_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(inputList2_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoIntersection", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "inputList2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
    { "size2_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersection = { 2, "AlgoIntersection", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersection;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoIntersection *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *inputList2) {
  GeogebraCommonKernelAlgosAlgoIntersectAbstract_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoIntersection_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoIntersection_set_inputList2_(self, inputList2);
  GeogebraCommonKernelAlgosAlgoIntersection_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoIntersection_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoIntersection *new_GeogebraCommonKernelAlgosAlgoIntersection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *inputList2) {
  GeogebraCommonKernelAlgosAlgoIntersection *self = [GeogebraCommonKernelAlgosAlgoIntersection alloc];
  GeogebraCommonKernelAlgosAlgoIntersection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList, inputList2);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersection_compute(GeogebraCommonKernelAlgosAlgoIntersection *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  self->size2_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList2_)) size];
  if (![self->inputList_ isDefined] || ![self->inputList2_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  for (jint i = 0; i < self->size2_; i++) {
    for (jint j = 0; j < self->size_; j++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->inputList2_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:j])) isEqualWithGeogebraCommonKernelGeosGeoElement:geo]) {
        jboolean alreadyInOutputList = NO;
        for (jint k = 0; k < [self->outputList_ size]; k++) if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEqualWithGeogebraCommonKernelGeosGeoElement:[self->outputList_ getWithInt:k]]) {
          alreadyInOutputList = YES;
          break;
        }
        if (!alreadyInOutputList) [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) copy__]];
        break;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersection)
