//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/BlockFieldMatrix.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/Field.h"
#include "org/apache/commons/math/FieldElement.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractFieldMatrix.h"
#include "org/apache/commons/math/linear/ArrayFieldVector.h"
#include "org/apache/commons/math/linear/BlockFieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrix.h"
#include "org/apache/commons/math/linear/FieldMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/FieldMatrixPreservingVisitor.h"
#include "org/apache/commons/math/linear/FieldVector.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathLinearBlockFieldMatrix_serialVersionUID -4602336630143123183LL

@interface OrgApacheCommonsMathLinearBlockFieldMatrix () {
 @public
  IOSObjectArray *blocks_;
  jint rows_;
  jint columns_;
  jint blockRows_;
  jint blockColumns_;
}

- (void)copyBlockPartWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)srcBlock
                                                       withInt:(jint)srcWidth
                                                       withInt:(jint)srcStartRow
                                                       withInt:(jint)srcEndRow
                                                       withInt:(jint)srcStartColumn
                                                       withInt:(jint)srcEndColumn
                     withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)dstBlock
                                                       withInt:(jint)dstWidth
                                                       withInt:(jint)dstStartRow
                                                       withInt:(jint)dstStartColumn OBJC_METHOD_FAMILY_NONE;

- (jint)blockHeightWithInt:(jint)blockRow;

- (jint)blockWidthWithInt:(jint)blockColumn;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearBlockFieldMatrix, blocks_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBlockFieldMatrix, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, IOSObjectArray *srcBlock, jint srcWidth, jint srcStartRow, jint srcEndRow, jint srcStartColumn, jint srcEndColumn, IOSObjectArray *dstBlock, jint dstWidth, jint dstStartRow, jint dstStartColumn);

__attribute__((unused)) static jint OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, jint blockRow);

__attribute__((unused)) static jint OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, jint blockColumn);

@implementation OrgApacheCommonsMathLinearBlockFieldMatrix

- (instancetype)initWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                          withInt:(jint)rows
                                          withInt:(jint)columns {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rows, columns);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)rawData {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(self, rawData);
  return self;
}

- (instancetype)initWithInt:(jint)rows
                    withInt:(jint)columns
withOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)blockData
                withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithInt_withInt_withOrgApacheCommonsMathFieldElementArray2_withBoolean_(self, rows, columns, blockData, copyArray);
  return self;
}

+ (IOSObjectArray *)toBlocksLayoutWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)rawData {
  return OrgApacheCommonsMathLinearBlockFieldMatrix_toBlocksLayoutWithOrgApacheCommonsMathFieldElementArray2_(rawData);
}

+ (IOSObjectArray *)createBlocksLayoutWithOrgApacheCommonsMathField:(id<OrgApacheCommonsMathField>)field
                                                            withInt:(jint)rows
                                                            withInt:(jint)columns {
  return OrgApacheCommonsMathLinearBlockFieldMatrix_createBlocksLayoutWithOrgApacheCommonsMathField_withInt_withInt_(field, rows, columns);
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)createMatrixWithInt:(jint)rowDimension
                                                         withInt:(jint)columnDimension {
  return [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rowDimension, columnDimension) autorelease];
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)copy__ {
  OrgApacheCommonsMathLinearBlockFieldMatrix *copied = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(blocks_))->size_; ++i) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(blocks_, i), 0, IOSObjectArray_Get(copied->blocks_, i), 0, ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(blocks_, i)))->size_);
  }
  return copied;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)addWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
    OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
        jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          for (jint q = qStart; q < qEnd; ++q) {
            IOSObjectArray_Set(nil_chk(outBlock), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) addWithId:[((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getEntryWithInt:p withInt:q]]);
            ++k;
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockFieldMatrix *)addWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *)m {
  [self checkAdditionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSObjectArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    IOSObjectArray *mBlock = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBlockFieldMatrix *) nil_chk(m))->blocks_, blockIndex);
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(outBlock))->size_; ++k) {
      IOSObjectArray_Set(outBlock, k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) addWithId:IOSObjectArray_Get(nil_chk(mBlock), k)]);
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)subtractWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
    OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
        jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          for (jint q = qStart; q < qEnd; ++q) {
            IOSObjectArray_Set(nil_chk(outBlock), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) subtractWithId:[((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getEntryWithInt:p withInt:q]]);
            ++k;
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockFieldMatrix *)subtractWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *)m {
  [self checkSubtractionCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSObjectArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    IOSObjectArray *mBlock = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBlockFieldMatrix *) nil_chk(m))->blocks_, blockIndex);
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(outBlock))->size_; ++k) {
      IOSObjectArray_Set(outBlock, k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) subtractWithId:IOSObjectArray_Get(nil_chk(mBlock), k)]);
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)scalarAddWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSObjectArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(outBlock))->size_; ++k) {
      IOSObjectArray_Set(outBlock, k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) addWithId:d]);
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)scalarMultiplyWithOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)d {
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, columns_) autorelease];
  for (jint blockIndex = 0; blockIndex < ((IOSObjectArray *) nil_chk(out->blocks_))->size_; ++blockIndex) {
    IOSObjectArray *outBlock = IOSObjectArray_Get(out->blocks_, blockIndex);
    IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, blockIndex);
    for (jint k = 0; k < ((IOSObjectArray *) nil_chk(outBlock))->size_; ++k) {
      IOSObjectArray_Set(outBlock, k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), k))) multiplyWithId:d]);
    }
  }
  return out;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)multiplyWithOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *) check_class_cast(m, [OrgApacheCommonsMathLinearBlockFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [self checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
    OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, [((id<OrgApacheCommonsMathLinearFieldMatrix>) nil_chk(m)) getColumnDimension]) autorelease];
    id<OrgApacheCommonsMathFieldElement> zero = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
    jint blockIndex = 0;
    for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
      for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, [m getColumnDimension]);
        IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
        for (jint kBlock = 0; kBlock < blockColumns_; ++kBlock) {
          jint kWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, kBlock);
          IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + kBlock);
          jint rStart = kBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
          jint k = 0;
          for (jint p = pStart; p < pEnd; ++p) {
            jint lStart = (p - pStart) * kWidth;
            jint lEnd = lStart + kWidth;
            for (jint q = qStart; q < qEnd; ++q) {
              id<OrgApacheCommonsMathFieldElement> sum = zero;
              jint r = rStart;
              for (jint l = lStart; l < lEnd; ++l) {
                sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), l))) multiplyWithId:[m getEntryWithInt:r withInt:q]]];
                ++r;
              }
              IOSObjectArray_Set(nil_chk(outBlock), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(outBlock, k))) addWithId:sum]);
              ++k;
            }
          }
        }
        ++blockIndex;
      }
    }
    return out;
  }
}

- (OrgApacheCommonsMathLinearBlockFieldMatrix *)multiplyWithOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *)m {
  [self checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearFieldMatrix:m];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, ((OrgApacheCommonsMathLinearBlockFieldMatrix *) nil_chk(m))->columns_) autorelease];
  id<OrgApacheCommonsMathFieldElement> zero = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(out, jBlock);
      jint jWidth2 = jWidth + jWidth;
      jint jWidth3 = jWidth2 + jWidth;
      jint jWidth4 = jWidth3 + jWidth;
      IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
      for (jint kBlock = 0; kBlock < blockColumns_; ++kBlock) {
        jint kWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, kBlock);
        IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + kBlock);
        IOSObjectArray *mBlock = IOSObjectArray_Get(m->blocks_, kBlock * m->blockColumns_ + jBlock);
        jint k = 0;
        for (jint p = pStart; p < pEnd; ++p) {
          jint lStart = (p - pStart) * kWidth;
          jint lEnd = lStart + kWidth;
          for (jint nStart = 0; nStart < jWidth; ++nStart) {
            id<OrgApacheCommonsMathFieldElement> sum = zero;
            jint l = lStart;
            jint n = nStart;
            while (l < lEnd - 3) {
              sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), l))) multiplyWithId:IOSObjectArray_Get(nil_chk(mBlock), n)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(tBlock, l + 1))) multiplyWithId:IOSObjectArray_Get(mBlock, n + jWidth)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(tBlock, l + 2))) multiplyWithId:IOSObjectArray_Get(mBlock, n + jWidth2)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(tBlock, l + 3))) multiplyWithId:IOSObjectArray_Get(mBlock, n + jWidth3)]];
              l += 4;
              n += jWidth4;
            }
            while (l < lEnd) {
              sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(tBlock), l++))) multiplyWithId:IOSObjectArray_Get(nil_chk(mBlock), n)]];
              n += jWidth;
            }
            IOSObjectArray_Set(nil_chk(outBlock), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(outBlock, k))) addWithId:sum]);
            ++k;
          }
        }
      }
      ++blockIndex;
    }
  }
  return out;
}

- (IOSObjectArray *)getData {
  IOSObjectArray *data = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], [self getRowDimension], [self getColumnDimension]);
  jint lastColumns = columns_ - (blockColumns_ - 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    jint regularPos = 0;
    jint lastPos = 0;
    for (jint p = pStart; p < pEnd; ++p) {
      IOSObjectArray *dataP = IOSObjectArray_Get(nil_chk(data), p);
      jint blockIndex = iBlock * blockColumns_;
      jint dataPos = 0;
      for (jint jBlock = 0; jBlock < blockColumns_ - 1; ++jBlock) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(blocks_), blockIndex++), regularPos, dataP, dataPos, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE);
        dataPos += OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(blocks_), blockIndex), lastPos, dataP, dataPos, lastColumns);
      regularPos += OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      lastPos += lastColumns;
    }
  }
  return data;
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getSubMatrixWithInt:(jint)startRow
                                                         withInt:(jint)endRow
                                                         withInt:(jint)startColumn
                                                         withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], endRow - startRow + 1, endColumn - startColumn + 1) autorelease];
  jint blockStartRow = startRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint rowsShift = startRow % OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockStartColumn = startColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint columnsShift = startColumn % OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint pBlock = blockStartRow;
  for (jint iBlock = 0; iBlock < out->blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(out, iBlock);
    jint qBlock = blockStartColumn;
    for (jint jBlock = 0; jBlock < out->blockColumns_; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(out, jBlock);
      jint outIndex = iBlock * out->blockColumns_ + jBlock;
      IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outIndex);
      jint index = pBlock * blockColumns_ + qBlock;
      jint width = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, qBlock);
      jint heightExcess = iHeight + rowsShift - OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint widthExcess = jWidth + columnsShift - OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      if (heightExcess > 0) {
        if (widthExcess > 0) {
          jint width2 = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, qBlock + 1);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columnsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + 1), width2, rowsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_), width, 0, heightExcess, columnsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, outBlock, jWidth, iHeight - heightExcess, 0);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_ + 1), width2, 0, heightExcess, 0, widthExcess, outBlock, jWidth, iHeight - heightExcess, jWidth - widthExcess);
        }
        else {
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + blockColumns_), width, 0, heightExcess, columnsShift, jWidth + columnsShift, outBlock, jWidth, iHeight - heightExcess, 0);
        }
      }
      else {
        if (widthExcess > 0) {
          jint width2 = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, qBlock + 1);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, iHeight + rowsShift, columnsShift, OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, outBlock, jWidth, 0, 0);
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index + 1), width2, rowsShift, iHeight + rowsShift, 0, widthExcess, outBlock, jWidth, 0, jWidth - widthExcess);
        }
        else {
          OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, IOSObjectArray_Get(blocks_, index), width, rowsShift, iHeight + rowsShift, columnsShift, jWidth + columnsShift, outBlock, jWidth, 0, 0);
        }
      }
      ++qBlock;
    }
    ++pBlock;
  }
  return out;
}

- (void)copyBlockPartWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)srcBlock
                                                       withInt:(jint)srcWidth
                                                       withInt:(jint)srcStartRow
                                                       withInt:(jint)srcEndRow
                                                       withInt:(jint)srcStartColumn
                                                       withInt:(jint)srcEndColumn
                     withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)dstBlock
                                                       withInt:(jint)dstWidth
                                                       withInt:(jint)dstStartRow
                                                       withInt:(jint)dstStartColumn {
  OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(self, srcBlock, srcWidth, srcStartRow, srcEndRow, srcStartColumn, srcEndColumn, dstBlock, dstWidth, dstStartRow, dstStartColumn);
}

- (void)setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:(IOSObjectArray *)subMatrix
                                                       withInt:(jint)row
                                                       withInt:(jint)column {
  jint refLength = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(subMatrix), 0)))->size_;
  if (refLength < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint endRow = row + subMatrix->size_ - 1;
  jint endColumn = column + refLength - 1;
  [self checkSubMatrixIndexWithInt:row withInt:endRow withInt:column withInt:endColumn];
  {
    IOSObjectArray *a__ = subMatrix;
    IOSObjectArray * const *b__ = a__->buffer_;
    IOSObjectArray * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSObjectArray *subRow = *b__++;
      if (((IOSObjectArray *) nil_chk(subRow))->size_ != refLength) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(refLength), JavaLangInteger_valueOfWithInt_(subRow->size_) } count:2 type:NSObject_class_()]);
      }
    }
  }
  jint blockStartRow = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockEndRow = (endRow + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockStartColumn = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockEndColumn = (endColumn + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  for (jint iBlock = blockStartRow; iBlock < blockEndRow; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    jint firstRow = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint iStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(row, firstRow);
    jint iEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(endRow + 1, firstRow + iHeight);
    for (jint jBlock = blockStartColumn; jBlock < blockEndColumn; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
      jint firstColumn = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint jStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(column, firstColumn);
      jint jEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(endColumn + 1, firstColumn + jWidth);
      jint jLength = jEnd - jStart;
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint i = iStart; i < iEnd; ++i) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(subMatrix, i - row), jStart - column, block, (i - firstRow) * jWidth + (jStart - firstColumn), jLength);
      }
    }
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getRowMatrixWithInt:(jint)row {
  [self checkRowIndexWithInt:row];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], 1, columns_) autorelease];
  jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint outBlockIndex = 0;
  jint outIndex = 0;
  IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outBlockIndex);
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    IOSObjectArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    jint available = ((IOSObjectArray *) nil_chk(outBlock))->size_ - outIndex;
    if (jWidth > available) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, outIndex, available);
      outBlock = IOSObjectArray_Get(out->blocks_, ++outBlockIndex);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, 0, jWidth - available);
      outIndex = jWidth - available;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outBlock, outIndex, jWidth);
      outIndex += jWidth;
    }
  }
  return out;
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)matrix {
  @try {
    [self setRowMatrixWithInt:row withOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *) check_class_cast(matrix, [OrgApacheCommonsMathLinearBlockFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setRowMatrixWithInt:row withOrgApacheCommonsMathLinearFieldMatrix:matrix];
  }
}

- (void)setRowMatrixWithInt:(jint)row
withOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *)matrix {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  if (([((OrgApacheCommonsMathLinearBlockFieldMatrix *) nil_chk(matrix)) getRowDimension] != 1) || ([matrix getColumnDimension] != nCols)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint mBlockIndex = 0;
  jint mIndex = 0;
  IOSObjectArray *mBlock = IOSObjectArray_Get(nil_chk(matrix->blocks_), mBlockIndex);
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    IOSObjectArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    jint available = ((IOSObjectArray *) nil_chk(mBlock))->size_ - mIndex;
    if (jWidth > available) {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, mIndex, block, iRow * jWidth, available);
      mBlock = IOSObjectArray_Get(matrix->blocks_, ++mBlockIndex);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, 0, block, iRow * jWidth, jWidth - available);
      mIndex = jWidth - available;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mBlock, mIndex, block, iRow * jWidth, jWidth);
      mIndex += jWidth;
    }
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)getColumnMatrixWithInt:(jint)column {
  [self checkColumnIndexWithInt:column];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], rows_, 1) autorelease];
  jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
  jint outBlockIndex = 0;
  jint outIndex = 0;
  IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), outBlockIndex);
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    IOSObjectArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      if (outIndex >= ((IOSObjectArray *) nil_chk(outBlock))->size_) {
        outBlock = IOSObjectArray_Get(out->blocks_, ++outBlockIndex);
        outIndex = 0;
      }
      IOSObjectArray_Set(nil_chk(outBlock), outIndex++, IOSObjectArray_Get(nil_chk(block), i * jWidth + jColumn));
    }
  }
  return out;
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearFieldMatrix:(id<OrgApacheCommonsMathLinearFieldMatrix>)matrix {
  @try {
    [self setColumnMatrixWithInt:column withOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *) check_class_cast(matrix, [OrgApacheCommonsMathLinearBlockFieldMatrix class])];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setColumnMatrixWithInt:column withOrgApacheCommonsMathLinearFieldMatrix:matrix];
  }
}

- (void)setColumnMatrixWithInt:(jint)column
withOrgApacheCommonsMathLinearBlockFieldMatrix:(OrgApacheCommonsMathLinearBlockFieldMatrix *)matrix {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  if (([((OrgApacheCommonsMathLinearBlockFieldMatrix *) nil_chk(matrix)) getRowDimension] != nRows) || ([matrix getColumnDimension] != 1)) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([matrix getRowDimension]), JavaLangInteger_valueOfWithInt_([matrix getColumnDimension]), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
  jint mBlockIndex = 0;
  jint mIndex = 0;
  IOSObjectArray *mBlock = IOSObjectArray_Get(nil_chk(matrix->blocks_), mBlockIndex);
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    IOSObjectArray *block = IOSObjectArray_Get(blocks_, iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      if (mIndex >= ((IOSObjectArray *) nil_chk(mBlock))->size_) {
        mBlock = IOSObjectArray_Get(matrix->blocks_, ++mBlockIndex);
        mIndex = 0;
      }
      IOSObjectArray_Set(nil_chk(block), i * jWidth + jColumn, IOSObjectArray_Get(nil_chk(mBlock), mIndex++));
    }
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getRowVectorWithInt:(jint)row {
  [self checkRowIndexWithInt:row];
  IOSObjectArray *outData = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], columns_);
  jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, outData, outIndex, jWidth);
    outIndex += jWidth;
  }
  return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(outData, NO) autorelease];
}

- (void)setRowVectorWithInt:(jint)row
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)vector {
  @try {
    [self setRowWithInt:row withOrgApacheCommonsMathFieldElementArray:[((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(((OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(vector, [OrgApacheCommonsMathLinearArrayFieldVector class])))) getDataRef]];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setRowVectorWithInt:row withOrgApacheCommonsMathLinearFieldVector:vector];
  }
}

- (id<OrgApacheCommonsMathLinearFieldVector>)getColumnVectorWithInt:(jint)column {
  [self checkColumnIndexWithInt:column];
  IOSObjectArray *outData = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], rows_);
  jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      IOSObjectArray_Set(nil_chk(outData), outIndex++, IOSObjectArray_Get(nil_chk(block), i * jWidth + jColumn));
    }
  }
  return [new_OrgApacheCommonsMathLinearArrayFieldVector_initWithOrgApacheCommonsMathFieldElementArray_withBoolean_(outData, NO) autorelease];
}

- (void)setColumnVectorWithInt:(jint)column
withOrgApacheCommonsMathLinearFieldVector:(id<OrgApacheCommonsMathLinearFieldVector>)vector {
  @try {
    [self setColumnWithInt:column withOrgApacheCommonsMathFieldElementArray:[((OrgApacheCommonsMathLinearArrayFieldVector *) nil_chk(((OrgApacheCommonsMathLinearArrayFieldVector *) check_class_cast(vector, [OrgApacheCommonsMathLinearArrayFieldVector class])))) getDataRef]];
  }
  @catch (JavaLangClassCastException *cce) {
    [super setColumnVectorWithInt:column withOrgApacheCommonsMathLinearFieldVector:vector];
  }
}

- (IOSObjectArray *)getRowWithInt:(jint)row {
  [self checkRowIndexWithInt:row];
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], columns_);
  jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(block, iRow * jWidth, out, outIndex, jWidth);
    outIndex += jWidth;
  }
  return out;
}

- (void)setRowWithInt:(jint)row
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)array {
  [self checkRowIndexWithInt:row];
  jint nCols = [self getColumnDimension];
  if (((IOSObjectArray *) nil_chk(array))->size_ != nCols) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nCols) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint iRow = row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint outIndex = 0;
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, outIndex, block, iRow * jWidth, jWidth);
    outIndex += jWidth;
  }
}

- (IOSObjectArray *)getColumnWithInt:(jint)column {
  [self checkColumnIndexWithInt:column];
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], rows_);
  jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      IOSObjectArray_Set(nil_chk(out), outIndex++, IOSObjectArray_Get(nil_chk(block), i * jWidth + jColumn));
    }
  }
  return out;
}

- (void)setColumnWithInt:(jint)column
withOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)array {
  [self checkColumnIndexWithInt:column];
  jint nRows = [self getRowDimension];
  if (((IOSObjectArray *) nil_chk(array))->size_ != nRows) {
    @throw [new_OrgApacheCommonsMathLinearInvalidMatrixException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(array->size_), JavaLangInteger_valueOfWithInt_(1), JavaLangInteger_valueOfWithInt_(nRows), JavaLangInteger_valueOfWithInt_(1) } count:4 type:NSObject_class_()]) autorelease];
  }
  jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jColumn = column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
  jint outIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    for (jint i = 0; i < iHeight; ++i) {
      IOSObjectArray_Set(nil_chk(block), i * jWidth + jColumn, IOSObjectArray_Get(array, outIndex++));
    }
  }
}

- (id)getEntryWithInt:(jint)row
              withInt:(jint)column {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE);
    return IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)value {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE);
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock)), k, value);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)increment {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE);
    IOSObjectArray *blockIJ = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    IOSObjectArray_Set(nil_chk(blockIJ), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(blockIJ, k))) addWithId:increment]);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
withOrgApacheCommonsMathFieldElement:(id<OrgApacheCommonsMathFieldElement>)factor {
  @try {
    jint iBlock = row / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint jBlock = column / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint k = (row - iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE) * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock) + (column - jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE);
    IOSObjectArray *blockIJ = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
    IOSObjectArray_Set(nil_chk(blockIJ), k, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(blockIJ, k))) multiplyWithId:factor]);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (id<OrgApacheCommonsMathLinearFieldMatrix>)transpose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  OrgApacheCommonsMathLinearBlockFieldMatrix *out = [new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_([self getField], nCols, nRows) autorelease];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockColumns_; ++iBlock) {
    for (jint jBlock = 0; jBlock < blockRows_; ++jBlock) {
      IOSObjectArray *outBlock = IOSObjectArray_Get(nil_chk(out->blocks_), blockIndex);
      IOSObjectArray *tBlock = IOSObjectArray_Get(blocks_, jBlock * blockColumns_ + iBlock);
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        jint lInc = pEnd - pStart;
        jint l = p - pStart;
        for (jint q = qStart; q < qEnd; ++q) {
          IOSObjectArray_Set(nil_chk(outBlock), k, IOSObjectArray_Get(nil_chk(tBlock), l));
          ++k;
          l += lInc;
        }
      }
      ++blockIndex;
    }
  }
  return out;
}

- (jint)getRowDimension {
  return rows_;
}

- (jint)getColumnDimension {
  return columns_;
}

- (IOSObjectArray *)operateWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  if (((IOSObjectArray *) nil_chk(v))->size_ != columns_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(columns_) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], rows_);
  id<OrgApacheCommonsMathFieldElement> zero = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        id<OrgApacheCommonsMathFieldElement> sum = zero;
        jint q = qStart;
        while (q < qEnd - 3) {
          sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(block), k))) multiplyWithId:IOSObjectArray_Get(v, q)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + 1))) multiplyWithId:IOSObjectArray_Get(v, q + 1)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + 2))) multiplyWithId:IOSObjectArray_Get(v, q + 2)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + 3))) multiplyWithId:IOSObjectArray_Get(v, q + 3)]];
          k += 4;
          q += 4;
        }
        while (q < qEnd) {
          sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(block), k++))) multiplyWithId:IOSObjectArray_Get(v, q++)]];
        }
        IOSObjectArray_Set(nil_chk(out), p, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(out, p))) addWithId:sum]);
      }
    }
  }
  return out;
}

- (IOSObjectArray *)preMultiplyWithOrgApacheCommonsMathFieldElementArray:(IOSObjectArray *)v {
  if (((IOSObjectArray *) nil_chk(v))->size_ != rows_) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(rows_) } count:2 type:NSObject_class_()]);
  }
  IOSObjectArray *out = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_([self getField], columns_);
  id<OrgApacheCommonsMathFieldElement> zero = [((id<OrgApacheCommonsMathField>) nil_chk([self getField])) getZero];
  for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
    jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
    jint jWidth2 = jWidth + jWidth;
    jint jWidth3 = jWidth2 + jWidth;
    jint jWidth4 = jWidth3 + jWidth;
    jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
    for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
      for (jint q = qStart; q < qEnd; ++q) {
        jint k = q - qStart;
        id<OrgApacheCommonsMathFieldElement> sum = zero;
        jint p = pStart;
        while (p < pEnd - 3) {
          sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk([((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(block), k))) multiplyWithId:IOSObjectArray_Get(v, p)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + jWidth))) multiplyWithId:IOSObjectArray_Get(v, p + 1)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + jWidth2))) multiplyWithId:IOSObjectArray_Get(v, p + 2)]])) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(block, k + jWidth3))) multiplyWithId:IOSObjectArray_Get(v, p + 3)]];
          k += jWidth4;
          p += 4;
        }
        while (p < pEnd) {
          sum = [((id<OrgApacheCommonsMathFieldElement>) nil_chk(sum)) addWithId:[((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(nil_chk(block), k))) multiplyWithId:IOSObjectArray_Get(v, p++)]];
          k += jWidth;
        }
        IOSObjectArray_Set(nil_chk(out), q, [((id<OrgApacheCommonsMathFieldElement>) nil_chk(IOSObjectArray_Get(out, q))) addWithId:sum]);
      }
    }
  }
  return out;
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
        IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - pStart) * jWidth;
        for (jint q = qStart; q < qEnd; ++q) {
          IOSObjectArray_Set(nil_chk(block), k, [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(block, k)]);
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
        jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
        IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - pStart) * jWidth;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                     withInt:(jint)startRow
                                                                     withInt:(jint)endRow
                                                                     withInt:(jint)startColumn
                                                                     withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
        jint q0 = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endColumn);
        IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          IOSObjectArray_Set(nil_chk(block), k, [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(block, k)]);
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (id)walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                       withInt:(jint)startRow
                                                                       withInt:(jint)endRow
                                                                       withInt:(jint)startColumn
                                                                       withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint p = pStart; p < pEnd; ++p) {
      for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++jBlock) {
        jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
        jint q0 = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
        jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
        jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endColumn);
        IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), blockIndex);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        for (jint q = qStart; q < qEnd; ++q) {
          IOSObjectArray_Set(nil_chk(block), k, [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(block, k)]);
          ++k;
        }
      }
      ++blockIndex;
    }
  }
  return [visitor end];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor {
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:0 withInt:rows_ - 1 withInt:0 withInt:columns_ - 1];
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows_; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows_);
    for (jint jBlock = 0; jBlock < blockColumns_; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns_);
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), blockIndex);
      jint k = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
      ++blockIndex;
    }
  }
  return [visitor end];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>)visitor
                                                                           withInt:(jint)startRow
                                                                           withInt:(jint)endRow
                                                                           withInt:(jint)startColumn
                                                                           withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
      jint q0 = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endColumn);
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint p = pStart; p < pEnd; ++p) {
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          IOSObjectArray_Set(nil_chk(block), k, [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(block, k)]);
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (id)walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>)visitor
                                                                             withInt:(jint)startRow
                                                                             withInt:(jint)endRow
                                                                             withInt:(jint)startColumn
                                                                             withInt:(jint)endColumn {
  [self checkSubMatrixIndexWithInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  [((id<OrgApacheCommonsMathLinearFieldMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows_ withInt:columns_ withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint iBlock = startRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; iBlock < 1 + endRow / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++iBlock) {
    jint p0 = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startRow, p0);
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((iBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endRow);
    for (jint jBlock = startColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; jBlock < 1 + endColumn / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE; ++jBlock) {
      jint jWidth = OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock);
      jint q0 = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qStart = OrgApacheCommonsMathUtilFastMath_maxWithInt_withInt_(startColumn, q0);
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_((jBlock + 1) * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, 1 + endColumn);
      IOSObjectArray *block = IOSObjectArray_Get(nil_chk(blocks_), iBlock * blockColumns_ + jBlock);
      for (jint p = pStart; p < pEnd; ++p) {
        jint k = (p - p0) * jWidth + qStart - q0;
        for (jint q = qStart; q < qEnd; ++q) {
          [visitor visitWithInt:p withInt:q withOrgApacheCommonsMathFieldElement:IOSObjectArray_Get(nil_chk(block), k)];
          ++k;
        }
      }
    }
  }
  return [visitor end];
}

- (jint)blockHeightWithInt:(jint)blockRow {
  return OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, blockRow);
}

- (jint)blockWidthWithInt:(jint)blockColumn {
  return OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, blockColumn);
}

- (void)dealloc {
  RELEASE_(blocks_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathField:withInt:withInt:", "BlockFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithOrgApacheCommonsMathFieldElementArray2:", "BlockFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithInt:withInt:withOrgApacheCommonsMathFieldElementArray2:withBoolean:", "BlockFieldMatrix", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "toBlocksLayoutWithOrgApacheCommonsMathFieldElementArray2:", "toBlocksLayout", "[[Lorg.apache.commons.math.FieldElement;", 0x9, "Ljava.lang.IllegalArgumentException;", "<T::Lorg/apache/commons/math/FieldElement<TT;>;>([[TT;)[[TT;" },
    { "createBlocksLayoutWithOrgApacheCommonsMathField:withInt:withInt:", "createBlocksLayout", "[[Lorg.apache.commons.math.FieldElement;", 0x9, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>(Lorg/apache/commons/math/Field<TT;>;II)[[TT;" },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearFieldMatrix:", "add", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearBlockFieldMatrix:", "add", "Lorg.apache.commons.math.linear.BlockFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearFieldMatrix:", "subtract", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearBlockFieldMatrix:", "subtract", "Lorg.apache.commons.math.linear.BlockFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarAddWithOrgApacheCommonsMathFieldElement:", "scalarAdd", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", "(TT;)Lorg/apache/commons/math/linear/FieldMatrix<TT;>;" },
    { "scalarMultiplyWithOrgApacheCommonsMathFieldElement:", "scalarMultiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", "(TT;)Lorg/apache/commons/math/linear/FieldMatrix<TT;>;" },
    { "multiplyWithOrgApacheCommonsMathLinearFieldMatrix:", "multiply", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearBlockFieldMatrix:", "multiply", "Lorg.apache.commons.math.linear.BlockFieldMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[Lorg.apache.commons.math.FieldElement;", 0x1, NULL, NULL },
    { "getSubMatrixWithInt:withInt:withInt:withInt:", "getSubMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "copyBlockPartWithOrgApacheCommonsMathFieldElementArray:withInt:withInt:withInt:withInt:withInt:withOrgApacheCommonsMathFieldElementArray:withInt:withInt:withInt:", "copyBlockPart", "V", 0x2, NULL, NULL },
    { "setSubMatrixWithOrgApacheCommonsMathFieldElementArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowMatrixWithInt:", "getRowMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearFieldMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "setRowMatrixWithInt:withOrgApacheCommonsMathLinearBlockFieldMatrix:", "setRowMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnMatrixWithInt:", "getColumnMatrix", "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearFieldMatrix:", "setColumnMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "setColumnMatrixWithInt:withOrgApacheCommonsMathLinearBlockFieldMatrix:", "setColumnMatrix", "V", 0x0, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowVectorWithInt:", "getRowVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setRowVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnVectorWithInt:", "getColumnVector", "Lorg.apache.commons.math.linear.FieldVector;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnVectorWithInt:withOrgApacheCommonsMathLinearFieldVector:", "setColumnVector", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getRowWithInt:", "getRow", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setRowWithInt:withOrgApacheCommonsMathFieldElementArray:", "setRow", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getColumnWithInt:", "getColumn", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setColumnWithInt:withOrgApacheCommonsMathFieldElementArray:", "setColumn", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(II)TT;" },
    { "setEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "addToEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "multiplyEntryWithInt:withInt:withOrgApacheCommonsMathFieldElement:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", "(IITT;)V" },
    { "transpose", NULL, "Lorg.apache.commons.math.linear.FieldMatrix;", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "operateWithOrgApacheCommonsMathFieldElementArray:", "operate", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathFieldElementArray:", "preMultiply", "[Lorg.apache.commons.math.FieldElement;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixChangingVisitor<TT;>;IIII)TT;" },
    { "walkInOptimizedOrderWithOrgApacheCommonsMathLinearFieldMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInOptimizedOrder", "TT;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", "(Lorg/apache/commons/math/linear/FieldMatrixPreservingVisitor<TT;>;IIII)TT;" },
    { "blockHeightWithInt:", "blockHeight", "I", 0x2, NULL, NULL },
    { "blockWidthWithInt:", "blockWidth", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "BLOCK_SIZE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearBlockFieldMatrix_serialVersionUID },
    { "blocks_", NULL, 0x12, "[[Lorg.apache.commons.math.FieldElement;", NULL, "[[TT;",  },
    { "rows_", NULL, 0x12, "I", NULL, NULL,  },
    { "columns_", NULL, 0x12, "I", NULL, NULL,  },
    { "blockRows_", NULL, 0x12, "I", NULL, NULL,  },
    { "blockColumns_", NULL, 0x12, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"TT;"};
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearBlockFieldMatrix = { 2, "BlockFieldMatrix", "org.apache.commons.math.linear", NULL, 0x1, 52, methods, 7, fields, 1, superclass_type_args, 0, NULL, NULL, "<T::Lorg/apache/commons/math/FieldElement<TT;>;>Lorg/apache/commons/math/linear/AbstractFieldMatrix<TT;>;Ljava/io/Serializable;" };
  return &_OrgApacheCommonsMathLinearBlockFieldMatrix;
}

@end

void OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, id<OrgApacheCommonsMathField> field, jint rows, jint columns) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rows, columns);
  self->rows_ = rows;
  self->columns_ = columns;
  self->blockRows_ = (rows + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  self->blockColumns_ = (columns + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  OrgApacheCommonsMathLinearBlockFieldMatrix_set_blocks_(self, OrgApacheCommonsMathLinearBlockFieldMatrix_createBlocksLayoutWithOrgApacheCommonsMathField_withInt_withInt_(field, rows, columns));
}

OrgApacheCommonsMathLinearBlockFieldMatrix *new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint rows, jint columns) {
  OrgApacheCommonsMathLinearBlockFieldMatrix *self = [OrgApacheCommonsMathLinearBlockFieldMatrix alloc];
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, field, rows, columns);
  return self;
}

void OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithInt_withInt_withOrgApacheCommonsMathFieldElementArray2_withBoolean_(self, ((IOSObjectArray *) nil_chk(rawData))->size_, ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(rawData, 0)))->size_, OrgApacheCommonsMathLinearBlockFieldMatrix_toBlocksLayoutWithOrgApacheCommonsMathFieldElementArray2_(rawData), NO);
}

OrgApacheCommonsMathLinearBlockFieldMatrix *new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockFieldMatrix *self = [OrgApacheCommonsMathLinearBlockFieldMatrix alloc];
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithOrgApacheCommonsMathFieldElementArray2_(self, rawData);
  return self;
}

void OrgApacheCommonsMathLinearBlockFieldMatrix_initWithInt_withInt_withOrgApacheCommonsMathFieldElementArray2_withBoolean_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, jint rows, jint columns, IOSObjectArray *blockData, jboolean copyArray) {
  OrgApacheCommonsMathLinearAbstractFieldMatrix_initWithOrgApacheCommonsMathField_withInt_withInt_(self, OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(blockData), rows, columns);
  self->rows_ = rows;
  self->columns_ = columns;
  self->blockRows_ = (rows + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  self->blockColumns_ = (columns + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  if (copyArray) {
    OrgApacheCommonsMathLinearBlockFieldMatrix_set_blocks_(self, OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_([self getField], self->blockRows_ * self->blockColumns_, -1));
  }
  else {
    OrgApacheCommonsMathLinearBlockFieldMatrix_set_blocks_(self, blockData);
  }
  jint index = 0;
  for (jint iBlock = 0; iBlock < self->blockRows_; ++iBlock) {
    jint iHeight = OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(self, iBlock);
    for (jint jBlock = 0; jBlock < self->blockColumns_; ++jBlock, ++index) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(blockData), index)))->size_ != iHeight * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock)) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_WRONG_BLOCK_LENGTH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(blockData, index)))->size_), JavaLangInteger_valueOfWithInt_(iHeight * OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(self, jBlock)) } count:2 type:NSObject_class_()]);
      }
      if (copyArray) {
        IOSObjectArray_Set(nil_chk(self->blocks_), index, [((IOSObjectArray *) nil_chk(IOSObjectArray_Get(blockData, index))) clone]);
      }
    }
  }
}

OrgApacheCommonsMathLinearBlockFieldMatrix *new_OrgApacheCommonsMathLinearBlockFieldMatrix_initWithInt_withInt_withOrgApacheCommonsMathFieldElementArray2_withBoolean_(jint rows, jint columns, IOSObjectArray *blockData, jboolean copyArray) {
  OrgApacheCommonsMathLinearBlockFieldMatrix *self = [OrgApacheCommonsMathLinearBlockFieldMatrix alloc];
  OrgApacheCommonsMathLinearBlockFieldMatrix_initWithInt_withInt_withOrgApacheCommonsMathFieldElementArray2_withBoolean_(self, rows, columns, blockData, copyArray);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearBlockFieldMatrix_toBlocksLayoutWithOrgApacheCommonsMathFieldElementArray2_(IOSObjectArray *rawData) {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initialize();
  jint rows = ((IOSObjectArray *) nil_chk(rawData))->size_;
  jint columns = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(rawData, 0)))->size_;
  jint blockRows = (rows + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockColumns = (columns + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  for (jint i = 0; i < rawData->size_; ++i) {
    jint length = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(rawData, i)))->size_;
    if (length != columns) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columns), JavaLangInteger_valueOfWithInt_(length) } count:2 type:NSObject_class_()]);
    }
  }
  id<OrgApacheCommonsMathField> field = OrgApacheCommonsMathLinearAbstractFieldMatrix_extractFieldWithOrgApacheCommonsMathFieldElementArray2_(rawData);
  IOSObjectArray *blocks = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(field, blockRows * blockColumns, -1);
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows);
    jint iHeight = pEnd - pStart;
    for (jint jBlock = 0; jBlock < blockColumns; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns);
      jint jWidth = qEnd - qStart;
      IOSObjectArray *block = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field, iHeight * jWidth);
      IOSObjectArray_Set(nil_chk(blocks), blockIndex, block);
      jint index = 0;
      for (jint p = pStart; p < pEnd; ++p) {
        JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(rawData, p), qStart, block, index, jWidth);
        index += jWidth;
      }
      ++blockIndex;
    }
  }
  return blocks;
}

IOSObjectArray *OrgApacheCommonsMathLinearBlockFieldMatrix_createBlocksLayoutWithOrgApacheCommonsMathField_withInt_withInt_(id<OrgApacheCommonsMathField> field, jint rows, jint columns) {
  OrgApacheCommonsMathLinearBlockFieldMatrix_initialize();
  jint blockRows = (rows + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  jint blockColumns = (columns + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE - 1) / OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
  IOSObjectArray *blocks = OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_withInt_(field, blockRows * blockColumns, -1);
  jint blockIndex = 0;
  for (jint iBlock = 0; iBlock < blockRows; ++iBlock) {
    jint pStart = iBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
    jint pEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(pStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, rows);
    jint iHeight = pEnd - pStart;
    for (jint jBlock = 0; jBlock < blockColumns; ++jBlock) {
      jint qStart = jBlock * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
      jint qEnd = OrgApacheCommonsMathUtilFastMath_minWithInt_withInt_(qStart + OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE, columns);
      jint jWidth = qEnd - qStart;
      IOSObjectArray_Set(nil_chk(blocks), blockIndex, OrgApacheCommonsMathLinearAbstractFieldMatrix_buildArrayWithOrgApacheCommonsMathField_withInt_(field, iHeight * jWidth));
      ++blockIndex;
    }
  }
  return blocks;
}

void OrgApacheCommonsMathLinearBlockFieldMatrix_copyBlockPartWithOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_withInt_withInt_withOrgApacheCommonsMathFieldElementArray_withInt_withInt_withInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, IOSObjectArray *srcBlock, jint srcWidth, jint srcStartRow, jint srcEndRow, jint srcStartColumn, jint srcEndColumn, IOSObjectArray *dstBlock, jint dstWidth, jint dstStartRow, jint dstStartColumn) {
  jint length = srcEndColumn - srcStartColumn;
  jint srcPos = srcStartRow * srcWidth + srcStartColumn;
  jint dstPos = dstStartRow * dstWidth + dstStartColumn;
  for (jint srcRow = srcStartRow; srcRow < srcEndRow; ++srcRow) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(srcBlock, srcPos, dstBlock, dstPos, length);
    srcPos += srcWidth;
    dstPos += dstWidth;
  }
}

jint OrgApacheCommonsMathLinearBlockFieldMatrix_blockHeightWithInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, jint blockRow) {
  return (blockRow == self->blockRows_ - 1) ? self->rows_ - blockRow * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE : OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
}

jint OrgApacheCommonsMathLinearBlockFieldMatrix_blockWidthWithInt_(OrgApacheCommonsMathLinearBlockFieldMatrix *self, jint blockColumn) {
  return (blockColumn == self->blockColumns_ - 1) ? self->columns_ - blockColumn * OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE : OrgApacheCommonsMathLinearBlockFieldMatrix_BLOCK_SIZE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearBlockFieldMatrix)
