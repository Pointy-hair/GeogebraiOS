//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoDependentCasCell.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/cas/AlgoDependentCasCell.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelCasAlgoDependentCasCell () {
 @public
  GeogebraCommonKernelGeosGeoCasCell *casCell_;
}

- (void)initInput OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoDependentCasCell, casCell_, GeogebraCommonKernelGeosGeoCasCell *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoDependentCasCell_initInput(GeogebraCommonKernelCasAlgoDependentCasCell *self);

@implementation GeogebraCommonKernelCasAlgoDependentCasCell

- (instancetype)initWithGeogebraCommonKernelGeosGeoCasCell:(GeogebraCommonKernelGeosGeoCasCell *)casCell {
  GeogebraCommonKernelCasAlgoDependentCasCell_initWithGeogebraCommonKernelGeosGeoCasCell_(self, casCell);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)initInput {
  GeogebraCommonKernelCasAlgoDependentCasCell_initInput(self);
}

- (void)setInputOutput {
  GeogebraCommonKernelGeosGeoElement *twinGeo = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getTwinGeo];
  [self setOutputLengthWithInt:twinGeo == nil ? 1 : 2];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:casCell_];
  if (twinGeo != nil) [self setOutputWithInt:1 withGeogebraCommonKernelGeosGeoElement:twinGeo];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoCasCell *)getCasCell {
  return casCell_;
}

- (void)compute {
  jboolean inputDefined = YES;
  {
    IOSObjectArray *a__ = input_;
    GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelGeosGeoElement *geo = *b__++;
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
        inputDefined = NO;
        break;
      }
    }
  }
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isScreenshotGenerator]) {
    return;
  }
  if (inputDefined) {
    [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) computeOutput];
  }
  else {
    [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) setUndefined];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)getExpXMLWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) getXML];
}

- (NSString *)getCommandDescriptionWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (input_ == nil) return nil;
  if ([self getCasCell] != nil && [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE] != nil) {
    if ([[((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE])) unwrap] isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]]) {
      GeogebraCommonKernelArithmeticCommand *cmd = (GeogebraCommonKernelArithmeticCommand *) check_class_cast([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) nil_chk([self getCasCell])) getInputVE])) unwrap], [GeogebraCommonKernelArithmeticCommand class]);
      return [((GeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
    }
  }
  return [super getCommandDescriptionWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)update {
  if (stopUpdateCascade_) {
    return;
  }
  [self updateUnlabeledRandomGeos];
  jboolean hadTwinGeo = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell_)) hasTwinGeo];
  [self compute];
  if (!hadTwinGeo && [casCell_ hasTwinGeo]) {
    [self setInputOutput];
    [casCell_ setLabelOfTwinGeo];
  }
  [self updateDependentGeos];
}

- (void)dealloc {
  RELEASE_(casCell_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoCasCell:", "AlgoDependentCasCell", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "initInput", NULL, "V", 0x2, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCasCell", NULL, "Lgeogebra.common.kernel.geos.GeoCasCell;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getExpXMLWithGeogebraCommonKernelStringTemplate:", "getExpXML", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "getCommandDescriptionWithGeogebraCommonKernelStringTemplate:", "getCommandDescription", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "casCell_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCasCell;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoDependentCasCell = { 2, "AlgoDependentCasCell", "geogebra.common.kernel.cas", NULL, 0x1, 10, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoDependentCasCell;
}

@end

void GeogebraCommonKernelCasAlgoDependentCasCell_initWithGeogebraCommonKernelGeosGeoCasCell_(GeogebraCommonKernelCasAlgoDependentCasCell *self, GeogebraCommonKernelGeosGeoCasCell *casCell) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(casCell)) getConstruction]);
  GeogebraCommonKernelCasAlgoDependentCasCell_set_casCell_(self, casCell);
  self->protectedInput_ = YES;
  GeogebraCommonKernelCasAlgoDependentCasCell_initInput(self);
  if ([casCell isOutputEmpty]) {
    [self compute];
  }
  else {
    [casCell updateTwinGeoWithBoolean:NO];
  }
  [self setInputOutput];
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) updateCasCellRows];
  [casCell setLabelOfTwinGeo];
  if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([casCell getInputVE])) isTopLevelCommand]) {
    if ([@"SlopeField" isEqual:[((GeogebraCommonKernelArithmeticCommand *) nil_chk([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([casCell getInputVE])) getTopLevelCommand])) getName]]) {
      [self->cons_ registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
    }
  }
}

GeogebraCommonKernelCasAlgoDependentCasCell *new_GeogebraCommonKernelCasAlgoDependentCasCell_initWithGeogebraCommonKernelGeosGeoCasCell_(GeogebraCommonKernelGeosGeoCasCell *casCell) {
  GeogebraCommonKernelCasAlgoDependentCasCell *self = [GeogebraCommonKernelCasAlgoDependentCasCell alloc];
  GeogebraCommonKernelCasAlgoDependentCasCell_initWithGeogebraCommonKernelGeosGeoCasCell_(self, casCell);
  return self;
}

void GeogebraCommonKernelCasAlgoDependentCasCell_initInput(GeogebraCommonKernelCasAlgoDependentCasCell *self) {
  JavaUtilTreeSet *geoVars = [((GeogebraCommonKernelGeosGeoCasCell *) nil_chk(self->casCell_)) getGeoElementVariables];
  if (geoVars == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  else {
    IOSObjectArray *geos = [IOSObjectArray arrayWithLength:[geoVars size] type:GeogebraCommonKernelGeosGeoElement_class_()];
    GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [geoVars toArrayWithNSObjectArray:geos]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoDependentCasCell)
