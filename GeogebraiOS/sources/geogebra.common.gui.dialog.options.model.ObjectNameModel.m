//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ObjectNameModel.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/handler/RedefineInputHandler.h"
#include "geogebra/common/gui/dialog/handler/RenameInputHandler.h"
#include "geogebra/common/gui/dialog/options/model/ObjectNameModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/TextValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SelectionManager.h"

@interface GeogebraCommonGuiDialogOptionsModelObjectNameModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener> listener_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonGuiDialogHandlerRenameInputHandler *nameInputHandler_;
  GeogebraCommonGuiDialogHandlerRedefineInputHandler *defInputHandler_;
  GeogebraCommonKernelGeosGeoElement *currentGeo_;
  jboolean redefinitionFailed_;
  GeogebraCommonKernelGeosGeoElement *currentGeoForFocusLost_;
  jboolean busy_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, listener_, id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, nameInputHandler_, GeogebraCommonGuiDialogHandlerRenameInputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, defInputHandler_, GeogebraCommonGuiDialogHandlerRedefineInputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, currentGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelObjectNameModel, currentGeoForFocusLost_, GeogebraCommonKernelGeosGeoElement *)

@interface GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelObjectNameModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener:(id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>)listener {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener_(self, app, listener);
  return self;
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *geo0 = [self getGeoAtWithInt:0];
  [((id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>) nil_chk(listener_)) updateNameWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_editTemplate_()]];
  [self setCurrentGeoWithGeogebraCommonKernelGeosGeoElement:geo0];
  [((GeogebraCommonGuiDialogHandlerRenameInputHandler *) nil_chk(nameInputHandler_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo0];
  [((GeogebraCommonGuiDialogHandlerRedefineInputHandler *) nil_chk(defInputHandler_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo0];
  jboolean showDefinition = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCurrentGeo])) isGeoText] ? [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast([self getCurrentGeo], [GeogebraCommonKernelGeosGeoText class])))) isTextCommand] : !((([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCurrentGeo])) isGeoImage] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCurrentGeo])) isGeoButton]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getCurrentGeo])) isIndependent]));
  if (showDefinition) {
    [listener_ updateDefLabel];
  }
  jboolean showCaption = !([GeogebraCommonKernelArithmeticTextValue_class_() isInstance:[self getCurrentGeo]]);
  if (showCaption) {
    [listener_ updateCaption];
  }
  [listener_ updateGUIWithBoolean:showDefinition withBoolean:showCaption];
}

- (jboolean)checkGeos {
  return [self getGeosLength] == 1;
}

- (void)applyNameChangeWithNSString:(NSString *)name {
  [((GeogebraCommonGuiDialogHandlerRenameInputHandler *) nil_chk(nameInputHandler_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:currentGeo_];
  [nameInputHandler_ processInputWithNSString:name];
  NSString *strName = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(currentGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if (![((NSString *) nil_chk(strName)) isEqual:name]) {
    [((id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>) nil_chk(listener_)) setNameTextWithNSString:strName];
  }
  [currentGeo_ updateRepaint];
}

- (void)applyDefinitionChangeWithNSString:(NSString *)definition {
  if (![((NSString *) nil_chk(definition)) isEqual:GeogebraCommonGuiDialogOptionsModelObjectNameModel_getDefTextWithGeogebraCommonKernelGeosGeoElement_(currentGeo_)]) {
    if ([((GeogebraCommonGuiDialogHandlerRedefineInputHandler *) nil_chk(defInputHandler_)) processInputWithNSString:definition]) {
      GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_currentGeo_(self, [defInputHandler_ getGeoElement]);
      [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:currentGeo_];
    }
    else {
      [self setRedefinitionFailedWithBoolean:YES];
    }
  }
}

+ (NSString *)getDefTextWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return GeogebraCommonGuiDialogOptionsModelObjectNameModel_getDefTextWithGeogebraCommonKernelGeosGeoElement_(geo);
}

- (void)applyCaptionChangeWithNSString:(NSString *)caption {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(currentGeo_)) setCaptionWithNSString:caption];
  NSString *strCaption = [currentGeo_ getRawCaption];
  if (![((NSString *) nil_chk(strCaption)) isEqual:[((NSString *) nil_chk(caption)) trim]]) {
    [((id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>) nil_chk(listener_)) setCaptionTextWithNSString:strCaption];
  }
  [currentGeo_ updateVisualStyleRepaint];
}

- (void)redefineCurrentGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                    withNSString:(NSString *)text
                                                    withNSString:(NSString *)redefinitionText {
  [self setBusyWithBoolean:YES];
  if ([self isRedefinitionFailed]) {
    [self setRedefinitionFailedWithBoolean:NO];
    return;
  }
  if (currentGeo_ == geo) {
    if (![((NSString *) nil_chk(text)) isEqual:GeogebraCommonGuiDialogOptionsModelObjectNameModel_getDefTextWithGeogebraCommonKernelGeosGeoElement_(currentGeo_)]) {
      [((id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener>) nil_chk(listener_)) setDefinitionTextWithNSString:text];
      [((GeogebraCommonGuiDialogHandlerRedefineInputHandler *) nil_chk(defInputHandler_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
      if ([defInputHandler_ processInputWithNSString:text]) [self setCurrentGeoWithGeogebraCommonKernelGeosGeoElement:[defInputHandler_ getGeoElement]];
    }
  }
  else {
    NSString *strDefinition = redefinitionText;
    if (![((NSString *) nil_chk(strDefinition)) isEqual:GeogebraCommonGuiDialogOptionsModelObjectNameModel_getDefTextWithGeogebraCommonKernelGeosGeoElement_(geo)]) {
      [((GeogebraCommonGuiDialogHandlerRedefineInputHandler *) nil_chk(defInputHandler_)) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
      [defInputHandler_ processInputWithNSString:strDefinition];
      [defInputHandler_ setGeoElementWithGeogebraCommonKernelGeosGeoElement:currentGeo_];
    }
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getCurrentGeo {
  return currentGeo_;
}

- (void)setCurrentGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)currentGeo {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_currentGeo_(self, currentGeo);
}

- (GeogebraCommonGuiDialogHandlerRenameInputHandler *)getNameInputHandler {
  return nameInputHandler_;
}

- (void)setNameInputHandlerWithGeogebraCommonGuiDialogHandlerRenameInputHandler:(GeogebraCommonGuiDialogHandlerRenameInputHandler *)nameInputHandler {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_nameInputHandler_(self, nameInputHandler);
}

- (GeogebraCommonGuiDialogHandlerRedefineInputHandler *)getDefInputHandler {
  return defInputHandler_;
}

- (void)setDefInputHandlerWithGeogebraCommonGuiDialogHandlerRedefineInputHandler:(GeogebraCommonGuiDialogHandlerRedefineInputHandler *)defInputHandler {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_defInputHandler_(self, defInputHandler);
}

- (jboolean)isBusy {
  return busy_;
}

- (void)setBusyWithBoolean:(jboolean)busy {
  self->busy_ = busy;
}

- (jboolean)isRedefinitionFailed {
  return redefinitionFailed_;
}

- (void)setRedefinitionFailedWithBoolean:(jboolean)redefinitionFailed {
  self->redefinitionFailed_ = redefinitionFailed;
}

- (jboolean)isValidAtWithInt:(jint)index {
  return NO;
}

- (void)dealloc {
  RELEASE_(listener_);
  RELEASE_(app_);
  RELEASE_(nameInputHandler_);
  RELEASE_(defInputHandler_);
  RELEASE_(currentGeo_);
  RELEASE_(currentGeoForFocusLost_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener:", "ObjectNameModel", NULL, 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "checkGeos", NULL, "Z", 0x1, NULL, NULL },
    { "applyNameChangeWithNSString:", "applyNameChange", "V", 0x1, NULL, NULL },
    { "applyDefinitionChangeWithNSString:", "applyDefinitionChange", "V", 0x1, NULL, NULL },
    { "getDefTextWithGeogebraCommonKernelGeosGeoElement:", "getDefText", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "applyCaptionChangeWithNSString:", "applyCaptionChange", "V", 0x1, NULL, NULL },
    { "redefineCurrentGeoWithGeogebraCommonKernelGeosGeoElement:withNSString:withNSString:", "redefineCurrentGeo", "V", 0x1, NULL, NULL },
    { "getCurrentGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setCurrentGeoWithGeogebraCommonKernelGeosGeoElement:", "setCurrentGeo", "V", 0x1, NULL, NULL },
    { "getNameInputHandler", NULL, "Lgeogebra.common.gui.dialog.handler.RenameInputHandler;", 0x1, NULL, NULL },
    { "setNameInputHandlerWithGeogebraCommonGuiDialogHandlerRenameInputHandler:", "setNameInputHandler", "V", 0x1, NULL, NULL },
    { "getDefInputHandler", NULL, "Lgeogebra.common.gui.dialog.handler.RedefineInputHandler;", 0x1, NULL, NULL },
    { "setDefInputHandlerWithGeogebraCommonGuiDialogHandlerRedefineInputHandler:", "setDefInputHandler", "V", 0x1, NULL, NULL },
    { "isBusy", NULL, "Z", 0x1, NULL, NULL },
    { "setBusyWithBoolean:", "setBusy", "V", 0x1, NULL, NULL },
    { "isRedefinitionFailed", NULL, "Z", 0x4, NULL, NULL },
    { "setRedefinitionFailedWithBoolean:", "setRedefinitionFailed", "V", 0x4, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.ObjectNameModel$IObjectNameListener;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "nameInputHandler_", NULL, 0x2, "Lgeogebra.common.gui.dialog.handler.RenameInputHandler;", NULL, NULL,  },
    { "defInputHandler_", NULL, 0x2, "Lgeogebra.common.gui.dialog.handler.RedefineInputHandler;", NULL, NULL,  },
    { "currentGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "redefinitionFailed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "currentGeoForFocusLost_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "busy_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.ObjectNameModel$IObjectNameListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelObjectNameModel = { 2, "ObjectNameModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 19, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelObjectNameModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelObjectNameModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener_(GeogebraCommonGuiDialogOptionsModelObjectNameModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_app_(self, app);
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_set_listener_(self, listener);
  self->busy_ = NO;
  self->redefinitionFailed_ = NO;
  [self setNameInputHandlerWithGeogebraCommonGuiDialogHandlerRenameInputHandler:[new_GeogebraCommonGuiDialogHandlerRenameInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withBoolean_(app, nil, NO) autorelease]];
  [self setDefInputHandlerWithGeogebraCommonGuiDialogHandlerRedefineInputHandler:[new_GeogebraCommonGuiDialogHandlerRedefineInputHandler_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoElement_withNSString_(app, nil, nil) autorelease]];
}

GeogebraCommonGuiDialogOptionsModelObjectNameModel *new_GeogebraCommonGuiDialogOptionsModelObjectNameModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener> listener) {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel *self = [GeogebraCommonGuiDialogOptionsModelObjectNameModel alloc];
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener_(self, app, listener);
  return self;
}

NSString *GeogebraCommonGuiDialogOptionsModelObjectNameModel_getDefTextWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonGuiDialogOptionsModelObjectNameModel_initialize();
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getRedefineStringWithBoolean:NO withBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelObjectNameModel)

@implementation GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setNameTextWithNSString:", "setNameText", "V", 0x401, NULL, NULL },
    { "setDefinitionTextWithNSString:", "setDefinitionText", "V", 0x401, NULL, NULL },
    { "setCaptionTextWithNSString:", "setCaptionText", "V", 0x401, NULL, NULL },
    { "updateGUIWithBoolean:withBoolean:", "updateGUI", "V", 0x401, NULL, NULL },
    { "updateDefLabel", NULL, "V", 0x401, NULL, NULL },
    { "updateCaption", NULL, "V", 0x401, NULL, NULL },
    { "updateNameWithNSString:", "updateName", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener = { 2, "IObjectNameListener", "geogebra.common.gui.dialog.options.model", "ObjectNameModel", 0x609, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelObjectNameModel_IObjectNameListener)
