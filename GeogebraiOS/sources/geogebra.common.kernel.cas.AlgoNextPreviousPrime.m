//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoNextPreviousPrime.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoNextPreviousPrime.h"
#include "geogebra/common/kernel/cas/AlgoPrimeFactorization.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelCasAlgoNextPreviousPrime () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> init__;
  GeogebraCommonKernelGeosGeoNumeric *result_;
  jboolean next_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoNextPreviousPrime, init__, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoNextPreviousPrime, result_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoNextPreviousPrime, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

@implementation GeogebraCommonKernelCasAlgoNextPreviousPrime

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)init_
                                             withBoolean:(jboolean)next {
  GeogebraCommonKernelCasAlgoNextPreviousPrime_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, label, init_, next);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(init__)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(init__)) isDefined] || [init__ getDouble] > GeogebraCommonKernelCasAlgoPrimeFactorization_get_LARGEST_INTEGER_()) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    return;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(30) autorelease];
  [sb appendWithNSString:next_ ? @"NextPrime(" : @"PreviousPrime("];
  [sb appendWithNSString:[init__ toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_maxPrecision_()]];
  [sb appendWithNSString:@")"];
  @try {
    NSString *functionOut = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) evaluateCachedGeoGebraCASWithNSString:[sb description] withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst_];
    if (functionOut == nil || ((jint) [functionOut length]) == 0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setValueWithDouble:JavaLangDouble_parseDoubleWithNSString_(functionOut)];
    }
  }
  @catch (JavaLangThrowable *e) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return next_ ? GeogebraCommonKernelCommandsCommandsEnum_get_NextPrime() : GeogebraCommonKernelCommandsCommandsEnum_get_PreviousPrime();
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)dealloc {
  RELEASE_(init__);
  RELEASE_(result_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "AlgoNextPreviousPrime", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "init__", "init", 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "next_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoNextPreviousPrime = { 2, "AlgoNextPreviousPrime", "geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoNextPreviousPrime;
}

@end

void GeogebraCommonKernelCasAlgoNextPreviousPrime_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(GeogebraCommonKernelCasAlgoNextPreviousPrime *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> init_, jboolean next) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoNextPreviousPrime_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  GeogebraCommonKernelCasAlgoNextPreviousPrime_set_init__(self, init_);
  self->next_ = next;
  GeogebraCommonKernelCasAlgoNextPreviousPrime_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoNextPreviousPrime *new_GeogebraCommonKernelCasAlgoNextPreviousPrime_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> init_, jboolean next) {
  GeogebraCommonKernelCasAlgoNextPreviousPrime *self = [GeogebraCommonKernelCasAlgoNextPreviousPrime alloc];
  GeogebraCommonKernelCasAlgoNextPreviousPrime_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, cons, label, init_, next);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoNextPreviousPrime)
