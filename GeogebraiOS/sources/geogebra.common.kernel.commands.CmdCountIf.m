//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdCountIf.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoCountIf.h"
#include "geogebra/common/kernel/algos/AlgoCountIf3.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/CmdCountIf.h"
#include "geogebra/common/kernel/commands/CmdKeepIf.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@implementation GeogebraCommonKernelCommandsCmdCountIf

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdCountIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)getResult2WithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)c
                                        withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)booleanFun
                                    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  GeogebraCommonKernelAlgosAlgoCountIf *algo = [new_GeogebraCommonKernelAlgosAlgoCountIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(cons_, [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], booleanFun, ((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk(args), 1), [GeogebraCommonKernelGeosGeoList class]))) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)getResult3WithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)c
                                         withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)arg
                                    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)vars
                                       withGeogebraCommonKernelGeosGeoListArray:(IOSObjectArray *)over {
  GeogebraCommonKernelAlgosAlgoCountIf3 *algo = [new_GeogebraCommonKernelAlgosAlgoCountIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(cons_, [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], arg, IOSObjectArray_Get(nil_chk(vars), 0), IOSObjectArray_Get(nil_chk(over), 0)) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdCountIf", NULL, 0x1, NULL, NULL },
    { "getResult2WithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoElementArray:", "getResult2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getResult3WithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoListArray:", "getResult3", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdCountIf = { 2, "CmdCountIf", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdCountIf;
}

@end

void GeogebraCommonKernelCommandsCmdCountIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdCountIf *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdKeepIf_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdCountIf *new_GeogebraCommonKernelCommandsCmdCountIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdCountIf *self = [GeogebraCommonKernelCommandsCmdCountIf alloc];
  GeogebraCommonKernelCommandsCmdCountIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdCountIf)
