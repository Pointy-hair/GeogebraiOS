//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircumcircle3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DThreePoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoConicPartCircumcircle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicPart3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoConicPartCircumcircleND.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D () {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints *algo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D, algo_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                 withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, label, A, B, C, type);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoCircleThreePoints *)getAlgo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_setAndConsume_algo_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, A_, B_, C_));
  return algo_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)createConicPartWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                                    withInt:(jint)type {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D_initWithGeogebraCommonKernelConstruction_withInt_(cons, type) autorelease];
}

- (void)computeSinglePoint {
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_setSinglePointWithGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_withGeogebraCommonKernelMatrixCoords_((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(conicPart_, [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class]), [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getInhomCoordsInDWithInt:3]);
  [super computeSinglePoint];
}

- (GeogebraCommonKernelGeosGeoPoint *)getA {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints *) nil_chk(algo_)) getPoint2DWithInt:0];
}

- (GeogebraCommonKernelGeosGeoPoint *)getB {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints *) nil_chk(algo_)) getPoint2DWithInt:1];
}

- (GeogebraCommonKernelGeosGeoPoint *)getC {
  return [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DThreePoints *) nil_chk(algo_)) getPoint2DWithInt:2];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *)getConicPart {
  return (GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D *) check_class_cast([super getConicPart], [GeogebraCommonGeogebra3DKernel3DGeosGeoConicPart3D class]);
}

- (void)dealloc {
  RELEASE_(algo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "AlgoConicPartCircumcircle3D", NULL, 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoCircleThreePoints;", 0x4, NULL, NULL },
    { "createConicPartWithGeogebraCommonKernelConstruction:withInt:", "createConicPart", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x4, NULL, NULL },
    { "computeSinglePoint", NULL, "V", 0x4, NULL, NULL },
    { "getA", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getC", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x11, NULL, NULL },
    { "getConicPart", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConicPart3D;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoCircle3DThreePoints;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D = { 2, "AlgoConicPartCircumcircle3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 8, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonKernelAlgosAlgoConicPartCircumcircleND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, label, A, B, C, type);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(self, cons, label, A, B, C, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoConicPartCircumcircle3D)
