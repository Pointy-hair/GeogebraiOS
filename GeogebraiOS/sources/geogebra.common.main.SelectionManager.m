//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/SelectionManager.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/main/GeoElementSelectionListener.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/main/UpdateSelection.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonMainSelectionManager () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  id<GeogebraCommonMainUpdateSelection> listener_;
  JavaUtilArrayList *selectionListeners_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainSelectionManager, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSelectionManager, listener_, id<GeogebraCommonMainUpdateSelection>)
J2OBJC_FIELD_SETTER(GeogebraCommonMainSelectionManager, selectionListeners_, JavaUtilArrayList *)

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(GeogebraCommonMainSelectionManager *self, JavaUtilArrayList *geos, jboolean updateSelection);

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection);

__attribute__((unused)) static JavaUtilArrayList *GeogebraCommonMainSelectionManager_getSelectedGeos(GeogebraCommonMainSelectionManager *self);

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection);

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonMainSelectionManager_toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint);

@implementation GeogebraCommonMainSelectionManager

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
             withGeogebraCommonMainUpdateSelection:(id<GeogebraCommonMainUpdateSelection>)app {
  GeogebraCommonMainSelectionManager_initWithGeogebraCommonKernelKernel_withGeogebraCommonMainUpdateSelection_(self, kernel, app);
  return self;
}

- (void)setSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  GeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(self, geos, YES);
}

- (void)setSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                 withBoolean:(jboolean)updateSelection {
  GeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(self, geos, updateSelection);
}

- (void)clearSelectedGeos {
  [self clearSelectedGeosWithBoolean:YES];
}

- (void)clearSelectedGeosWithBoolean:(jboolean)repaint {
  [self clearSelectedGeosWithBoolean:repaint withBoolean:repaint];
}

- (void)clearSelectedGeosWithBoolean:(jboolean)repaint
                         withBoolean:(jboolean)updateSelection {
  jint size = [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size];
  if (size > 0) {
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
    }
    [selectedGeos_ clear];
    if (repaint) [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
    if (updateSelection) [self updateSelection];
  }
}

- (void)removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                    withBoolean:(jboolean)repaint
                                                    withBoolean:(jboolean)updateSelection {
  GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, repaint, updateSelection);
}

- (JavaUtilArrayList *)getSelectedGeos {
  return GeogebraCommonMainSelectionManager_getSelectedGeos(self);
}

- (void)addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                 withBoolean:(jboolean)repaint
                                                 withBoolean:(jboolean)updateSelection {
  GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, repaint, updateSelection);
}

- (jint)getSelectedLayer {
  IOSObjectArray *geos = [((JavaUtilArrayList *) nil_chk(GeogebraCommonMainSelectionManager_getSelectedGeos(self))) toArray];
  if (((IOSObjectArray *) nil_chk(geos))->size_ == 0) return -1;
  jint layer = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, 0), [GeogebraCommonKernelGeosGeoElement class])))) getLayer];
  for (jint i = 1; i < geos->size_; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, i), [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] != layer) return -2;
  }
  return layer;
}

- (void)selectAllWithInt:(jint)layer {
  [self clearSelectedGeosWithBoolean:NO];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ((layer == -1) || ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer] == layer)) {
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [kernel_ notifyRepaint];
  [self updateSelection];
}

- (void)invertSelection {
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsWithId:geo]) {
      GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
    else {
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [kernel_ notifyRepaint];
  [self updateSelection];
}

- (void)selectAllPredecessors {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
      }
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)hasPredecessors {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)selectAllDescendants {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllChildren];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
      }
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)hasDescendants {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    JavaUtilTreeSet *tree = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllChildren];
    id<JavaUtilIterator> it2 = [((JavaUtilTreeSet *) nil_chk(tree)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
      geo = [it2 next];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
        return YES;
      }
    }
  }
  return NO;
}

- (void)showHideSelection {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon] && ![geo isGeoPolyhedron] && ![geo isGeoPolyLine] && [geo getGeoClassType] != GeogebraCommonPluginGeoClassEnum_get_QUADRIC_LIMITED() && [geo getGeoClassType] != GeogebraCommonPluginGeoClassEnum_get_NET()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  for (jint i = 0; i < [selectedGeos_ size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolygon] || [geo isGeoPolyLine] || [geo getGeoClassType] == GeogebraCommonPluginGeoClassEnum_get_QUADRIC_LIMITED()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  for (jint i = 0; i < [selectedGeos_ size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPolyhedron] || [geo getGeoClassType] == GeogebraCommonPluginGeoClassEnum_get_NET()) {
      [geo setEuclidianVisibleWithBoolean:![geo isEuclidianVisible]];
      [geo updateVisualStyle];
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (void)showHideSelectionLabels {
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [selectedGeos_ getWithInt:i];
    [geo setLabelVisibleWithBoolean:![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelVisible]];
    [geo updateVisualStyle];
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  [self updateSelection];
}

- (jboolean)containsSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsWithId:geo];
}

- (jboolean)containsSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) containsAllWithJavaUtilCollection:geos];
}

- (void)removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (jint)selectedGeosSize {
  return [((JavaUtilArrayList *) nil_chk(selectedGeos_)) size];
}

- (GeogebraCommonKernelGeosGeoElement *)setFirstGeoSelectedForPropertiesView {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getFirstGeo];
  if (geo == nil) return nil;
  [self clearSelectedGeosWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addWithId:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  [kernel_ notifyRepaint];
  [((id<GeogebraCommonMainUpdateSelection>) nil_chk(listener_)) updateSelectionWithBoolean:NO];
  return geo;
}

- (void)addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addSelectedGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                 withBoolean:(jboolean)repaint {
  [((JavaUtilArrayList *) nil_chk(selectedGeos_)) addAllWithJavaUtilCollection:geos];
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([geos getWithInt:i])) setSelectedWithBoolean:YES];
  }
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
  [self updateSelection];
}

- (void)toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                    withBoolean:(jboolean)repaint {
  GeogebraCommonMainSelectionManager_toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, repaint);
}

- (void)toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonMainSelectionManager_toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_(self, geo, YES);
}

- (void)selectNextGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)ev {
  JavaUtilTreeSet *tree = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder];
  tree = [new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree) autorelease];
  JavaUtilTreeSet *copy_ = [new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree) autorelease];
  id<JavaUtilIterator> it = [copy_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed] || ![geo isEuclidianVisible] || ![geo isVisibleInViewWithInt:[((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getViewID]]) {
      [tree removeWithId:geo];
    }
  }
  it = [tree iterator];
  if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) size] == 0) {
    if ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, [it next]);
    }
    return;
  }
  if ([selectedGeos_ size] != 1) {
    return;
  }
  GeogebraCommonKernelGeosGeoElement *selGeo = [selectedGeos_ getWithInt:0];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (selGeo == geo) {
      GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, selGeo);
      if (![it hasNext]) {
        it = [tree iterator];
      }
      GeogebraCommonKernelGeosGeoElement *next = [((id<JavaUtilIterator>) nil_chk(it)) next];
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, next);
      if (!([next isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]])) {
        [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) requestFocus];
      }
      break;
    }
  }
}

- (void)selectLastGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:(id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>)ev {
  if ([((JavaUtilArrayList *) nil_chk(selectedGeos_)) size] != 1) {
    return;
  }
  GeogebraCommonKernelGeosGeoElement *selGeo = [selectedGeos_ getWithInt:0];
  GeogebraCommonKernelGeosGeoElement *lastGeo = nil;
  JavaUtilTreeSet *tree = [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) getGeoSetLabelOrder];
  tree = [new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree) autorelease];
  JavaUtilTreeSet *copy_ = [new_JavaUtilTreeSet_initWithJavaUtilSortedSet_(tree) autorelease];
  id<JavaUtilIterator> it = [copy_ iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isSelectionAllowed] || ![geo isEuclidianVisible] || ![geo isVisibleInViewWithInt:[((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) getViewID]]) {
      [tree removeWithId:geo];
    }
  }
  it = [tree iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    lastGeo = [it next];
  }
  it = [tree iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (selGeo == geo) {
      GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, selGeo);
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(self, lastGeo);
      if (!([lastGeo isKindOfClass:[GeogebraCommonKernelGeosGeoTextField class]])) {
        [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) requestFocus];
      }
      break;
    }
    lastGeo = geo;
  }
}

- (void)updateSelection {
  [self updateSelectionWithBoolean:YES];
}

- (void)updateSelectionWithBoolean:(jboolean)updatePropertiesView {
  [((id<GeogebraCommonMainUpdateSelection>) nil_chk(listener_)) updateSelectionWithBoolean:updatePropertiesView];
}

- (void)addSelectionListenerWithGeogebraCommonMainGeoElementSelectionListener:(id<GeogebraCommonMainGeoElementSelectionListener>)sl {
  [((JavaUtilArrayList *) nil_chk(selectionListeners_)) addWithId:sl];
}

- (void)removeSelectionListenerWithGeogebraCommonMainGeoElementSelectionListener:(id<GeogebraCommonMainGeoElementSelectionListener>)sl {
  [((JavaUtilArrayList *) nil_chk(selectionListeners_)) removeWithId:sl];
}

- (JavaUtilArrayList *)getSelectionListeners {
  return selectionListeners_;
}

- (void)dealloc {
  RELEASE_(selectedGeos_);
  RELEASE_(kernel_);
  RELEASE_(listener_);
  RELEASE_(selectionListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonMainUpdateSelection:", "SelectionManager", NULL, 0x1, NULL, NULL },
    { "setSelectedGeosWithJavaUtilArrayList:", "setSelectedGeos", "V", 0x11, NULL, NULL },
    { "setSelectedGeosWithJavaUtilArrayList:withBoolean:", "setSelectedGeos", "V", 0x11, NULL, NULL },
    { "clearSelectedGeos", NULL, "V", 0x11, NULL, NULL },
    { "clearSelectedGeosWithBoolean:", "clearSelectedGeos", "V", 0x1, NULL, NULL },
    { "clearSelectedGeosWithBoolean:withBoolean:", "clearSelectedGeos", "V", 0x1, NULL, NULL },
    { "removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "removeSelectedGeo", "V", 0x11, NULL, NULL },
    { "getSelectedGeos", NULL, "Ljava.util.ArrayList;", 0x11, NULL, NULL },
    { "addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "addSelectedGeo", "V", 0x11, NULL, NULL },
    { "getSelectedLayer", NULL, "I", 0x1, NULL, NULL },
    { "selectAllWithInt:", "selectAll", "V", 0x11, NULL, NULL },
    { "invertSelection", NULL, "V", 0x11, NULL, NULL },
    { "selectAllPredecessors", NULL, "V", 0x11, NULL, NULL },
    { "hasPredecessors", NULL, "Z", 0x11, NULL, NULL },
    { "selectAllDescendants", NULL, "V", 0x11, NULL, NULL },
    { "hasDescendants", NULL, "Z", 0x11, NULL, NULL },
    { "showHideSelection", NULL, "V", 0x11, NULL, NULL },
    { "showHideSelectionLabels", NULL, "V", 0x11, NULL, NULL },
    { "containsSelectedGeoWithGeogebraCommonKernelGeosGeoElement:", "containsSelectedGeo", "Z", 0x11, NULL, NULL },
    { "containsSelectedGeosWithJavaUtilArrayList:", "containsSelectedGeos", "Z", 0x11, NULL, NULL },
    { "removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement:", "removeSelectedGeo", "V", 0x11, NULL, NULL },
    { "selectedGeosSize", NULL, "I", 0x11, NULL, NULL },
    { "setFirstGeoSelectedForPropertiesView", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:", "addSelectedGeo", "V", 0x11, NULL, NULL },
    { "addSelectedGeosWithJavaUtilArrayList:withBoolean:", "addSelectedGeos", "V", 0x11, NULL, NULL },
    { "toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "toggleSelectedGeo", "V", 0x11, NULL, NULL },
    { "toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement:", "toggleSelectedGeo", "V", 0x11, NULL, NULL },
    { "selectNextGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "selectNextGeo", "V", 0x11, NULL, NULL },
    { "selectLastGeoWithGeogebraCommonEuclidianEuclidianViewInterfaceCommon:", "selectLastGeo", "V", 0x11, NULL, NULL },
    { "updateSelection", NULL, "V", 0x1, NULL, NULL },
    { "updateSelectionWithBoolean:", "updateSelection", "V", 0x1, NULL, NULL },
    { "addSelectionListenerWithGeogebraCommonMainGeoElementSelectionListener:", "addSelectionListener", "V", 0x1, NULL, NULL },
    { "removeSelectionListenerWithGeogebraCommonMainGeoElementSelectionListener:", "removeSelectionListener", "V", 0x1, NULL, NULL },
    { "getSelectionListeners", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "selectedGeos_", NULL, 0x14, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "kernel_", NULL, 0x12, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "listener_", NULL, 0x12, "Lgeogebra.common.main.UpdateSelection;", NULL, NULL,  },
    { "selectionListeners_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/main/GeoElementSelectionListener;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainSelectionManager = { 2, "SelectionManager", "geogebra.common.main", NULL, 0x1, 34, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainSelectionManager;
}

@end

void GeogebraCommonMainSelectionManager_initWithGeogebraCommonKernelKernel_withGeogebraCommonMainUpdateSelection_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelKernel *kernel, id<GeogebraCommonMainUpdateSelection> app) {
  NSObject_init(self);
  GeogebraCommonMainSelectionManager_setAndConsume_selectedGeos_(self, new_JavaUtilArrayList_init());
  GeogebraCommonMainSelectionManager_set_kernel_(self, kernel);
  GeogebraCommonMainSelectionManager_set_listener_(self, app);
  GeogebraCommonMainSelectionManager_setAndConsume_selectionListeners_(self, new_JavaUtilArrayList_init());
}

GeogebraCommonMainSelectionManager *new_GeogebraCommonMainSelectionManager_initWithGeogebraCommonKernelKernel_withGeogebraCommonMainUpdateSelection_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonMainUpdateSelection> app) {
  GeogebraCommonMainSelectionManager *self = [GeogebraCommonMainSelectionManager alloc];
  GeogebraCommonMainSelectionManager_initWithGeogebraCommonKernelKernel_withGeogebraCommonMainUpdateSelection_(self, kernel, app);
  return self;
}

void GeogebraCommonMainSelectionManager_setSelectedGeosWithJavaUtilArrayList_withBoolean_(GeogebraCommonMainSelectionManager *self, JavaUtilArrayList *geos, jboolean updateSelection) {
  [self clearSelectedGeosWithBoolean:NO];
  if (geos != nil) {
    for (jint i = 0; i < [geos size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [geos getWithInt:i];
      GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, NO, NO);
    }
  }
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  if (updateSelection) [self updateSelection];
}

void GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection) {
  if (geo == nil) {
    return;
  }
  if ([((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) removeWithId:geo]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
    if (updateSelection) [self updateSelection];
    if (repaint) {
      [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
    }
  }
}

JavaUtilArrayList *GeogebraCommonMainSelectionManager_getSelectedGeos(GeogebraCommonMainSelectionManager *self) {
  return self->selectedGeos_;
}

void GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint, jboolean updateSelection) {
  if ((geo == nil) || [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) containsWithId:geo]) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) addWithId:geo];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
  if (updateSelection) [self updateSelection];
  for (id<GeogebraCommonMainGeoElementSelectionListener> __strong sl in nil_chk([self getSelectionListeners])) {
    [((id<GeogebraCommonMainGeoElementSelectionListener>) nil_chk(sl)) geoElementSelectedWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:YES];
  }
}

void GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonMainSelectionManager_removeSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, YES, YES);
}

void GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo) {
  GeogebraCommonMainSelectionManager_addSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, YES, YES);
}

void GeogebraCommonMainSelectionManager_toggleSelectedGeoWithGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonMainSelectionManager *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean repaint) {
  if (geo == nil) {
    return;
  }
  jboolean contains = [((JavaUtilArrayList *) nil_chk(self->selectedGeos_)) containsWithId:geo];
  if (contains) {
    [self->selectedGeos_ removeWithId:geo];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:NO];
  }
  else {
    [self->selectedGeos_ addWithId:geo];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setSelectedWithBoolean:YES];
  }
  if (repaint) {
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyRepaint];
  }
  [self updateSelection];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainSelectionManager)
