//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCircle3DPointDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *circle_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection, circle_, GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)secondInput
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)forAxis {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, point, secondInput, forAxis);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)secondInput
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)forAxis {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, secondInput, forAxis);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)getCircle {
  return circle_;
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(self);
}

- (jboolean)setCoordSys {
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) resetCoordSys];
  [coordsys_ addPointWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3]];
  IOSObjectArray *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(forAxis_, @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3])) completeOrthonormal];
  [coordsys_ addVectorWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), 0)];
  [coordsys_ addVectorWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(v, 1)];
  [coordsys_ makeOrthoMatrixWithBoolean:NO withBoolean:NO];
  return YES;
}

- (jdouble)getRadius {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getCenter {
  return point_;
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  return [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(forAxis_, @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3];
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return secondInput_;
}

- (GeogebraCommonKernelGeosGeoElement *)getForAxis {
  return forAxis_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Circle();
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:[self getCommandString] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(secondInput_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk((forAxis_))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (NSString *)getCommandString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(point_);
  RELEASE_(secondInput_);
  RELEASE_(forAxis_);
  RELEASE_(circle_);
  RELEASE_(coordsys_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "AlgoCircle3DPointDirection", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoCircle3DPointDirection", NULL, 0x1, NULL, NULL },
    { "getCircle", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCoordSys", NULL, "Z", 0x4, NULL, NULL },
    { "getRadius", NULL, "D", 0x404, NULL, NULL },
    { "getCenter", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getForAxis", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getCommandString", NULL, "Ljava.lang.String;", 0x404, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "secondInput_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "forAxis_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "coordsys_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordSys;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection = { 2, "AlgoCircle3DPointDirection", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 13, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point, GeogebraCommonKernelGeosGeoElement *secondInput, GeogebraCommonKernelGeosGeoElement *forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_set_point_(self, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_set_forAxis_(self, forAxis);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_set_secondInput_(self, secondInput);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_setAndConsume_circle_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_setAndConsume_coordsys_(self, new_GeogebraCommonKernelMatrixCoordSys_initWithInt_(2));
  [self->circle_ setCoordSysWithGeogebraCommonKernelMatrixCoordSys:self->coordsys_];
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), secondInput, forAxis } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ self->circle_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(self);
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, GeogebraCommonKernelGeosGeoElement *secondInput, id<GeogebraCommonKernelKernelNDGeoDirectionND> forAxis) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, cons, point, secondInput, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(forAxis, [GeogebraCommonKernelGeosGeoElement class]));
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setLabelWithNSString:label];
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection *self) {
  if ([self setCoordSys]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setDefined];
    [self->circle_ setSphereNDWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_(0, 0) autorelease] withDouble:[self getRadius]];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(self->circle_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCircle3DPointDirection)
