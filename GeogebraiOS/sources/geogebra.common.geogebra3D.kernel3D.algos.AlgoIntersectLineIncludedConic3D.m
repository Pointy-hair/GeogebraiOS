//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineIncludedConic3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineIncludedConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
  return self;
}

- (void)compute {
  [self intersectLineIncludedWithGeogebraCommonKernelKernelNDGeoConicND:c_ withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3DArray:P_ withGeogebraCommonKernelMatrixCoordSys:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys] withGeogebraCommonKernelGeosGeoLine:[self getLine]];
}

- (GeogebraCommonKernelGeosGeoLine *)getLine {
  return (GeogebraCommonKernelGeosGeoLine *) check_class_cast([self getFirtGeo], [GeogebraCommonKernelGeosGeoLine class]);
}

- (GeogebraCommonKernelMatrixCoords *)getFirstGeoStartInhomCoords {
  return [((GeogebraCommonKernelGeosGeoLine *) nil_chk([self getLine])) getStartInhomCoords];
}

- (GeogebraCommonKernelMatrixCoords *)getFirstGeoDirectionInD3 {
  return [((GeogebraCommonKernelGeosGeoLine *) nil_chk([self getLine])) getDirectionInD3];
}

- (jboolean)getFirstGeoRespectLimitedPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  return YES;
}

- (void)checkIsOnFirstGeoWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)p {
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoIntersectLineIncludedConic3D", NULL, 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x0, NULL, NULL },
    { "getFirstGeoStartInhomCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getFirstGeoDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getFirstGeoRespectLimitedPathWithGeogebraCommonKernelMatrixCoords:", "getFirstGeoRespectLimitedPath", "Z", 0x4, NULL, NULL },
    { "checkIsOnFirstGeoWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "checkIsOnFirstGeo", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D = { 2, "AlgoIntersectLineIncludedConic3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 8, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, g, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D)
