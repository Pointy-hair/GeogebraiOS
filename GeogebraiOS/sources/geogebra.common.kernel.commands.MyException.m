//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/MyException.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/commands/MyException.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"

#define GeogebraCommonKernelCommandsMyException_serialVersionUID 1LL

@interface GeogebraCommonKernelCommandsMyException () {
 @public
  jint errorType_;
}

@end

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelCommandsMyException, serialVersionUID, jlong)

@implementation GeogebraCommonKernelCommandsMyException

- (instancetype)initWithNSString:(NSString *)string
                         withInt:(jint)errorType {
  GeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(self, string, errorType);
  return self;
}

- (instancetype)initWithGeogebraCommonMainMyError:(GeogebraCommonMainMyError *)e
                                          withInt:(jint)errorType {
  GeogebraCommonKernelCommandsMyException_initWithGeogebraCommonMainMyError_withInt_(self, e, errorType);
  return self;
}

- (jint)getErrorType {
  return errorType_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withInt:", "MyException", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonMainMyError:withInt:", "MyException", NULL, 0x1, NULL, NULL },
    { "getErrorType", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelCommandsMyException_serialVersionUID },
    { "INVALID_INPUT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelCommandsMyException_INVALID_INPUT },
    { "IMBALANCED_BRACKETS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelCommandsMyException_IMBALANCED_BRACKETS },
    { "errorType_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsMyException = { 2, "MyException", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsMyException;
}

@end

void GeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(GeogebraCommonKernelCommandsMyException *self, NSString *string, jint errorType) {
  JavaLangException_initWithNSString_(self, string);
  self->errorType_ = GeogebraCommonKernelCommandsMyException_INVALID_INPUT;
  self->errorType_ = errorType;
}

GeogebraCommonKernelCommandsMyException *new_GeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(NSString *string, jint errorType) {
  GeogebraCommonKernelCommandsMyException *self = [GeogebraCommonKernelCommandsMyException alloc];
  GeogebraCommonKernelCommandsMyException_initWithNSString_withInt_(self, string, errorType);
  return self;
}

void GeogebraCommonKernelCommandsMyException_initWithGeogebraCommonMainMyError_withInt_(GeogebraCommonKernelCommandsMyException *self, GeogebraCommonMainMyError *e, jint errorType) {
  JavaLangException_initWithJavaLangThrowable_(self, e);
  self->errorType_ = GeogebraCommonKernelCommandsMyException_INVALID_INPUT;
  self->errorType_ = errorType;
}

GeogebraCommonKernelCommandsMyException *new_GeogebraCommonKernelCommandsMyException_initWithGeogebraCommonMainMyError_withInt_(GeogebraCommonMainMyError *e, jint errorType) {
  GeogebraCommonKernelCommandsMyException *self = [GeogebraCommonKernelCommandsMyException alloc];
  GeogebraCommonKernelCommandsMyException_initWithGeogebraCommonMainMyError_withInt_(self, e, errorType);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsMyException)
