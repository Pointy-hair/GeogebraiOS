//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTake.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTake.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"

@interface GeogebraCommonKernelAlgosAlgoTake () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoNumeric *m_, *n_;
  GeogebraCommonKernelGeosGeoList *outputList_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTake, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTake, m_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTake, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTake, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTake_compute(GeogebraCommonKernelAlgosAlgoTake *self);

@implementation GeogebraCommonKernelAlgosAlgoTake

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)m
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, m, n);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)m
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n {
  GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, inputList, m, n);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Take();
}

- (void)setInputOutput {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(outputList_)) setTypeStringForXMLWithNSString:[((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) getTypeStringForXML]];
  if (n_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 2, n_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  IOSObjectArray_Set(nil_chk(input_), 0, inputList_);
  IOSObjectArray_Set(input_, 1, m_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoTake_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(m_);
  RELEASE_(n_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoTake", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoTake", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "m_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTake = { 2, "AlgoTake", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTake;
}

@end

void GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoTake *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, inputList, m, n);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoTake *new_GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoTake *self = [GeogebraCommonKernelAlgosAlgoTake alloc];
  GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, inputList, m, n);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAlgosAlgoTake *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTake_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoTake_set_m_(self, m);
  GeogebraCommonKernelAlgosAlgoTake_set_n_(self, n);
  GeogebraCommonKernelAlgosAlgoTake_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoTake_compute(self);
}

GeogebraCommonKernelAlgosAlgoTake *new_GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoNumeric *m, GeogebraCommonKernelGeosGeoNumeric *n) {
  GeogebraCommonKernelAlgosAlgoTake *self = [GeogebraCommonKernelAlgosAlgoTake alloc];
  GeogebraCommonKernelAlgosAlgoTake_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, inputList, m, n);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTake_compute(GeogebraCommonKernelAlgosAlgoTake *self) {
  if (![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->m_)) isDefined] || (self->n_ != nil && ![self->n_ isDefined])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
    [self->outputList_ clear];
    return;
  }
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  jint start = J2ObjCFpToInt([self->m_ getDouble]);
  jdouble nVal = self->n_ == nil ? self->size_ : [self->n_ getDouble];
  jint end = J2ObjCFpToInt(nVal);
  if (nVal == 0 && [self->inputList_ isDefined] && start > 0 && start <= self->size_) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
    [self->outputList_ clear];
    return;
  }
  if (![self->inputList_ isDefined] || self->size_ == 0 || start <= 0 || end > self->size_ || start > end) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setDefinedWithBoolean:YES];
  [self->outputList_ clear];
  for (jint i = start; i <= end; i++) {
    [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:i - 1])) copyInternalWithGeogebraCommonKernelConstruction:self->cons_]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTake)
