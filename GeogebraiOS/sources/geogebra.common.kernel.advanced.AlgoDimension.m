//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoDimension.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoDimension.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"

@interface GeogebraCommonKernelAdvancedAlgoDimension () {
 @public
  GeogebraCommonKernelGeosGeoList *matrixDimension_;
  GeogebraCommonKernelGeosGeoNumeric *firstDimension_, *secondDimension_;
  jboolean matrix_;
  GeogebraCommonKernelGeosGeoList *list_;
  GeogebraCommonKernelGeosGeoElement *point_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDimension, matrixDimension_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDimension, firstDimension_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDimension, secondDimension_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDimension, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDimension, point_, GeogebraCommonKernelGeosGeoElement *)

@implementation GeogebraCommonKernelAdvancedAlgoDimension

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geoList {
  GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geoList);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, point_ == nil ? list_ : [point_ toGeoElement]);
  if (matrix_) {
    [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:matrixDimension_];
  }
  else {
    [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:firstDimension_];
  }
  [self setDependencies];
}

- (void)compute {
  if (point_ != nil) {
    if (![point_ isDefined]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setUndefined];
      return;
    }
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setValueWithDouble:[point_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] || [point_ isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]] ? 2 : 3];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setUndefined];
    return;
  }
  jint size = [list_ size];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(firstDimension_)) setValueWithDouble:size];
  if (matrix_) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(matrixDimension_)) setDefinedWithBoolean:YES];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([list_ getWithInt:0])) isGeoList]) {
      [matrixDimension_ setUndefined];
      return;
    }
    jint n = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([list_ getWithInt:0], [GeogebraCommonKernelGeosGeoList class])))) size];
    for (jint i = 0; i < size; i++) {
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([list_ getWithInt:i])) isGeoList] || [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([list_ getWithInt:i], [GeogebraCommonKernelGeosGeoList class])))) size] != n) {
        [matrixDimension_ setUndefined];
        return;
      }
    }
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(secondDimension_)) setValueWithDouble:n];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return matrix_ ? matrixDimension_ : firstDimension_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Dimension();
}

- (void)dealloc {
  RELEASE_(matrixDimension_);
  RELEASE_(firstDimension_);
  RELEASE_(secondDimension_);
  RELEASE_(list_);
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoDimension", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoDimension", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrixDimension_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "firstDimension_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "secondDimension_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "matrix_", NULL, 0x2, "Z", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoDimension = { 2, "AlgoDimension", "geogebra.common.kernel.advanced", NULL, 0x1, 6, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoDimension;
}

@end

void GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoDimension *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoDimension_set_list_(self, geoList);
  GeogebraCommonKernelAdvancedAlgoDimension_setAndConsume_firstDimension_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  self->matrix_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) isMatrix];
  if (self->matrix_) {
    GeogebraCommonKernelAdvancedAlgoDimension_setAndConsume_matrixDimension_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
    GeogebraCommonKernelAdvancedAlgoDimension_setAndConsume_secondDimension_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
    [self->matrixDimension_ addWithGeogebraCommonKernelGeosGeoElement:self->firstDimension_];
    [self->matrixDimension_ addWithGeogebraCommonKernelGeosGeoElement:self->secondDimension_];
  }
  [self setInputOutput];
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoDimension *new_GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAdvancedAlgoDimension *self = [GeogebraCommonKernelAdvancedAlgoDimension alloc];
  GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geoList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAdvancedAlgoDimension *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geoList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoDimension_set_point_(self, geoList);
  GeogebraCommonKernelAdvancedAlgoDimension_setAndConsume_firstDimension_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  self->matrix_ = NO;
  [self setInputOutput];
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getResult])) setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoDimension *new_GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *geoList) {
  GeogebraCommonKernelAdvancedAlgoDimension *self = [GeogebraCommonKernelAdvancedAlgoDimension alloc];
  GeogebraCommonKernelAdvancedAlgoDimension_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, geoList);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoDimension)
