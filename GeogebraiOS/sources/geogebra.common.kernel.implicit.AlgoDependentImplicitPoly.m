//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/AlgoDependentImplicitPoly.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/implicit/AlgoDependentImplicitPoly.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/main/App.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelImplicitAlgoDependentImplicitPoly () {
 @public
  GeogebraCommonKernelArithmeticEquation *equation_;
  IOSObjectArray *coeff_;
  GeogebraCommonKernelGeosGeoElement *geoElement_;
  id<JavaUtilSet> dependentFromFunctions_;
}

- (void)computeWithBoolean:(jboolean)first;

- (void)setLine;

- (void)setConic;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly, equation_, GeogebraCommonKernelArithmeticEquation *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly, coeff_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly, geoElement_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly, dependentFromFunctions_, id<JavaUtilSet>)

__attribute__((unused)) static void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_computeWithBoolean_(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self, jboolean first);

__attribute__((unused)) static void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setLine(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self);

__attribute__((unused)) static void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setConic(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self);

@implementation GeogebraCommonKernelImplicitAlgoDependentImplicitPoly

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticEquation:(GeogebraCommonKernelArithmeticEquation *)equ
                                             withBoolean:(jboolean)simplify {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_withBoolean_(self, c, label, equ, simplify);
  return self;
}

- (void)compute {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_computeWithBoolean_(self, NO);
}

- (void)replaceGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)newElem {
  NSString *label = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement_)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  [geoElement_ doRemove];
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_geoElement_(self, newElem);
  [self setInputOutput];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement_)) setLabelWithNSString:label];
}

- (GeogebraCommonKernelArithmeticEquation *)getEquation {
  return equation_;
}

- (void)computeWithBoolean:(jboolean)first {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_computeWithBoolean_(self, first);
}

- (void)setLine {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setLine(self);
}

- (void)setConic {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setConic(self);
}

- (void)addAllFunctionalDescendentsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo
                                                            withJavaUtilSet:(id<JavaUtilSet>)set
                                                            withJavaUtilSet:(id<JavaUtilSet>)algos {
  IOSObjectArray *in = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(in))->size_; i++) {
    GeogebraCommonKernelAlgosAlgoElement *p = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(in, i))) getParentAlgorithm];
    if (p != nil && ![((id<JavaUtilSet>) nil_chk(algos)) containsWithId:p]) {
      [algos addWithId:p];
      [self addAllFunctionalDescendentsWithGeogebraCommonKernelAlgosAlgoElement:p withJavaUtilSet:set withJavaUtilSet:algos];
    }
    if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(in, i)]) {
      [((id<JavaUtilSet>) nil_chk(set)) addWithId:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(in, i), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction]];
    }
  }
}

- (void)setInputOutput {
  if (input_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation_)) getGeoElementVariables]);
    GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_dependentFromFunctions_(self, new_JavaUtilHashSet_init());
    [self addAllFunctionalDescendentsWithGeogebraCommonKernelAlgosAlgoElement:self withJavaUtilSet:dependentFromFunctions_ withJavaUtilSet:[new_JavaUtilTreeSet_init() autorelease]];
  }
  if ([self getOutputLength] == 0) [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:geoElement_];
  [self setDependencies];
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (GeogebraCommonKernelGeosGeoElement *)getGeo {
  return geoElement_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (NSString *)toExpStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return JreStrcat("$$$", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geoElement_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl], @": ", [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equation_)) toStringWithGeogebraCommonKernelStringTemplate:tpl]);
}

- (void)dealloc {
  RELEASE_(equation_);
  RELEASE_(coeff_);
  RELEASE_(geoElement_);
  RELEASE_(dependentFromFunctions_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticEquation:withBoolean:", "AlgoDependentImplicitPoly", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "replaceGeoElementWithGeogebraCommonKernelGeosGeoElement:", "replaceGeoElement", "V", 0x4, NULL, NULL },
    { "getEquation", NULL, "Lgeogebra.common.kernel.arithmetic.Equation;", 0x1, NULL, NULL },
    { "computeWithBoolean:", "compute", "V", 0x2, NULL, NULL },
    { "setLine", NULL, "V", 0x2, NULL, NULL },
    { "setConic", NULL, "V", 0x2, NULL, NULL },
    { "addAllFunctionalDescendentsWithGeogebraCommonKernelAlgosAlgoElement:withJavaUtilSet:withJavaUtilSet:", "addAllFunctionalDescendents", "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "getGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toExpStringWithGeogebraCommonKernelStringTemplate:", "toExpString", "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "equation_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Equation;", NULL, NULL,  },
    { "coeff_", NULL, 0x2, "[[Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "geoElement_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "dependentFromFunctions_", NULL, 0x2, "Ljava.util.Set;", NULL, "Ljava/util/Set<Lgeogebra/common/kernel/arithmetic/FunctionNVar;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoDependentImplicitPoly = { 2, "AlgoDependentImplicitPoly", "geogebra.common.kernel.implicit", NULL, 0x1, 13, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelImplicitAlgoDependentImplicitPoly;
}

@end

void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_withBoolean_(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticEquation *equ, jboolean simplify) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_equation_(self, equ);
  GeogebraCommonKernelArithmeticPolynomial *lhs = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(equ)) getNormalForm];
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_coeff_(self, [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(lhs)) getCoeff]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->coeff_))->size_; i++) {
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, i)))->size_; j++) {
      if (IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, i)), j) != nil) {
        if (simplify && ![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, i)), j))) inspectWithGeogebraCommonKernelArithmeticInspecting:GeogebraCommonKernelArithmeticInspecting_get_dynamicGeosFinder_()]) {
          IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(self->coeff_, i)), j, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, i)), j))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
        }
        id<GeogebraCommonKernelArithmeticExpressionValue> eval = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, i)), j))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
        [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(eval, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      }
    }
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(c)) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self withBoolean:NO];
  if ([equ isForcedLine]) {
    GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(c));
  }
  else if ([equ isForcedConic]) {
    GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(c));
  }
  else if ([equ isForcedImplicitPoly]) {
    GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(c));
  }
  else {
    switch ([equ degree]) {
      case 1:
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(c));
      break;
      case 2:
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(c));
      break;
      default:
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setAndConsume_geoElement_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(c));
    }
  }
  [self setInputOutput];
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_computeWithBoolean_(self, YES);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoElement_)) setLabelWithNSString:label];
}

GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *new_GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_withBoolean_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelArithmeticEquation *equ, jboolean simplify) {
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self = [GeogebraCommonKernelImplicitAlgoDependentImplicitPoly alloc];
  GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticEquation_withBoolean_(self, c, label, equ, simplify);
  return self;
}

void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_computeWithBoolean_(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self, jboolean first) {
  if (!first) {
    if ([((GeogebraCommonKernelArithmeticEquation *) nil_chk(self->equation_)) isFunctionDependent]) {
      id<JavaUtilSet> functions = [new_JavaUtilHashSet_init() autorelease];
      [self addAllFunctionalDescendentsWithGeogebraCommonKernelAlgosAlgoElement:self withJavaUtilSet:functions withJavaUtilSet:[new_JavaUtilTreeSet_init() autorelease]];
      if (![functions isEqual:self->dependentFromFunctions_]) {
        [self->equation_ initEquation];
        GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_coeff_(self, [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk([self->equation_ getNormalForm])) getCoeff]);
        GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_dependentFromFunctions_(self, functions);
      }
    }
    else if ([self->equation_ hasVariableDegree]) {
      GeogebraCommonMainApp_printStacktraceWithId_(@"");
      [self->equation_ initEquation];
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_set_coeff_(self, [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk([self->equation_ getNormalForm])) getCoeff]);
    }
    if (![self->equation_ isPolynomial]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoElement_)) setUndefined];
      return;
    }
  }
  jint degree = [((GeogebraCommonKernelArithmeticEquation *) nil_chk(self->equation_)) isForcedImplicitPoly] ? 3 : ([self->equation_ isForcedConic] ? 2 : [self->equation_ degree]);
  switch (degree) {
    case 1:
    if ([self->geoElement_ isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setLine(self);
    }
    else {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoElement_)) hasChildren]) [self->geoElement_ setUndefined];
      else {
        [self replaceGeoElementWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease]];
        GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setLine(self);
      }
    }
    break;
    case 2:
    if ([self->geoElement_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]]) {
      GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setConic(self);
    }
    else {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoElement_)) hasChildren]) [self->geoElement_ setUndefined];
      else {
        [self replaceGeoElementWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease]];
        GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setConic(self);
      }
    }
    break;
    default:
    if ([self->geoElement_ isKindOfClass:[GeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geoElement_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])))) setDefined];
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geoElement_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])))) setCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2:self->coeff_];
    }
    else {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geoElement_)) hasChildren]) [self->geoElement_ setUndefined];
      else {
        [self replaceGeoElementWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_([self getConstruction]) autorelease]];
        [((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geoElement_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) setDefined];
        [((GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(self->geoElement_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])) setCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2:self->coeff_];
      }
    }
  }
}

void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setLine(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self) {
  IOSObjectArray *expr = [IOSObjectArray arrayWithLength:3 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
  IOSObjectArray_Set(expr, 2, IOSObjectArray_Set(expr, 1, IOSObjectArray_Set(expr, 0, nil)));
  if (((IOSObjectArray *) nil_chk(self->coeff_))->size_ > 0) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 0)))->size_ > 0) {
      IOSObjectArray_Set(expr, 2, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 0)), 0));
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 0)))->size_ > 1) {
        IOSObjectArray_Set(expr, 1, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 0)), 1));
      }
    }
    if (self->coeff_->size_ > 1) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 1)))->size_ > 0) {
        IOSObjectArray_Set(expr, 0, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 1)), 0));
      }
    }
  }
  IOSDoubleArray *dCoeff = [IOSDoubleArray arrayWithLength:expr->size_];
  for (jint i = 0; i < expr->size_; i++) {
    if (IOSObjectArray_Get(expr, i) != nil) {
      *IOSDoubleArray_GetRef(dCoeff, i) = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(expr, i))) evaluateDouble];
    }
    else {
      *IOSDoubleArray_GetRef(dCoeff, i) = 0;
    }
  }
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(self->geoElement_, [GeogebraCommonKernelGeosGeoLine class])))) setCoordsWithDouble:IOSDoubleArray_Get(dCoeff, 0) withDouble:IOSDoubleArray_Get(dCoeff, 1) withDouble:IOSDoubleArray_Get(dCoeff, 2)];
}

void GeogebraCommonKernelImplicitAlgoDependentImplicitPoly_setConic(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly *self) {
  IOSObjectArray *expr = [IOSObjectArray arrayWithLength:6 type:GeogebraCommonKernelArithmeticExpressionValue_class_()];
  for (jint i = 0; i < 6; i++) {
    IOSObjectArray_Set(expr, i, nil);
  }
  if (((IOSObjectArray *) nil_chk(self->coeff_))->size_ > 0) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 0)))->size_ > 0) {
      IOSObjectArray_Set(expr, 5, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 0)), 0));
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 0)))->size_ > 1) {
        IOSObjectArray_Set(expr, 4, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 0)), 1));
        if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 0)))->size_ > 2) {
          IOSObjectArray_Set(expr, 2, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 0)), 2));
        }
      }
    }
    if (self->coeff_->size_ > 1) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 1)))->size_ > 0) {
        IOSObjectArray_Set(expr, 3, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 1)), 0));
        if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 1)))->size_ > 1) {
          IOSObjectArray_Set(expr, 1, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 1)), 1));
        }
      }
      if (self->coeff_->size_ > 2) {
        if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->coeff_, 2)))->size_ > 0) {
          IOSObjectArray_Set(expr, 0, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(self->coeff_, 2)), 0));
        }
      }
    }
  }
  IOSDoubleArray *dCoeff = [IOSDoubleArray arrayWithLength:expr->size_];
  for (jint i = 0; i < expr->size_; i++) {
    if (IOSObjectArray_Get(expr, i) != nil) {
      *IOSDoubleArray_GetRef(dCoeff, i) = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(expr, i))) evaluateDouble];
    }
    else {
      *IOSDoubleArray_GetRef(dCoeff, i) = 0;
    }
  }
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(self->geoElement_, [GeogebraCommonKernelGeosGeoConic class])))) setDefined];
  [((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(self->geoElement_, [GeogebraCommonKernelGeosGeoConic class])))) setCoeffsWithDoubleArray:dCoeff];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoDependentImplicitPoly)
