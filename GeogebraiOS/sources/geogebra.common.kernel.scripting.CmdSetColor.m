//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetColor.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdSetColor.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoGebraColorConstants.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"

@implementation GeogebraCommonKernelScriptingCmdSetColor

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetColor_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  jboolean oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
  [cons_ setSuppressLabelCreationWithBoolean:YES];
  if (n == 2) {
    IOSObjectArray *args = [c getArguments];
    GeogebraCommonKernelCommandsCmdScripting_setAndConsume_arg_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(args))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 0))) resolveVariables];
    IOSObjectArray_Set(arg_, 0, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(args, 0)]), 0));
    @try {
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 1))) resolveVariables];
      IOSObjectArray_Set(arg_, 1, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(args, 1)]), 0));
    }
    @catch (JavaLangError *e) {
      IOSObjectArray_SetAndConsume(arg_, 1, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(cons_, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(args, 1))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]));
    }
    [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
  }
  else {
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
  }
  {
    IOSBooleanArray *ok;
    switch (n) {
      case 2:
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 1))) isGeoText]) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      @try {
        NSString *color = GeogebraCommonUtilStringUtil_removeSpacesWithNSString_([((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoText class])))) getTextString]);
        GeogebraCommonAwtGColor *col = GeogebraCommonMainGeoGebraColorConstants_getGeogebraColorWithGeogebraCommonMainApp_withNSString_(app_, color);
        if (col == nil) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
        if (background_) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setBackgroundColorWithGeogebraCommonAwtGColor:col];
        else [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setObjColorWithGeogebraCommonAwtGColor:col];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) updateRepaint];
        return;
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
      }
      case 4:
      ok = [IOSBooleanArray arrayWithLength:n];
      GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
      if ((*IOSBooleanArray_GetRef(ok, 1) = [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 1)]) && (*IOSBooleanArray_GetRef(ok, 2) = [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg_, 2)]) && (*IOSBooleanArray_GetRef(ok, 3) = [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg_, 3)])) {
        jint red = J2ObjCFpToInt(([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] * 255));
        if (red < 0) red = 0;
        else if (red > 255) red = 255;
        jint green = J2ObjCFpToInt(([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 2), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] * 255));
        if (green < 0) green = 0;
        else if (green > 255) green = 255;
        jint blue = J2ObjCFpToInt(([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 3), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] * 255));
        if (blue < 0) blue = 0;
        else if (blue > 255) blue = 255;
        if (background_) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setBackgroundColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue]];
        else [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue]];
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) updateRepaint];
        return;
      }
      else if (!IOSBooleanArray_Get(ok, 1)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      else if (!IOSBooleanArray_Get(ok, 2)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 2)];
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 3)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetColor", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x4, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "background_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetColor = { 2, "CmdSetColor", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetColor;
}

@end

void GeogebraCommonKernelScriptingCmdSetColor_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetColor *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
  self->background_ = NO;
}

GeogebraCommonKernelScriptingCmdSetColor *new_GeogebraCommonKernelScriptingCmdSetColor_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetColor *self = [GeogebraCommonKernelScriptingCmdSetColor alloc];
  GeogebraCommonKernelScriptingCmdSetColor_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetColor)
