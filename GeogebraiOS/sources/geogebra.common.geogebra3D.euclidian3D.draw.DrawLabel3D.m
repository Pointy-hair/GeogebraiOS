//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GKey.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GRenderingHints.h"
#include "geogebra/common/euclidian/DrawEquation.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLabel3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D () {
 @public
  GeogebraCommonKernelMatrixCoords *backgroundColor_, *color_;
  jfloat xOffset_, yOffset_;
  jfloat xOffset2_, yOffset2_;
  jboolean anchor_;
  jboolean isVisible_;
  jint height2_, width2_;
  jint textureIndex_;
  jboolean waitForReset__;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable_;
  jint pickingX_, pickingY_, pickingW_, pickingH_;
  jint textIndex_;
  jint pickingIndex_;
}

+ (jboolean)isLatexWithNSString:(NSString *)text;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, backgroundColor_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, color_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D, drawable_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(NSString *text);

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view
                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

- (void)updateWithNSString:(NSString *)text
withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font
withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                 withFloat:(jfloat)xOffset
                 withFloat:(jfloat)yOffset {
  [self updateWithNSString:text withGeogebraCommonAwtGFont:font withGeogebraCommonAwtGColor:nil withGeogebraCommonAwtGColor:color withGeogebraCommonKernelMatrixCoords:v withFloat:xOffset withFloat:yOffset];
}

- (void)updateWithNSString:(NSString *)text
withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font
withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)backgroundColor
withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                 withFloat:(jfloat)xOffset
                 withFloat:(jfloat)yOffset {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_origin_(self, v);
  if (((jint) [((NSString *) nil_chk(text)) length]) == 0) return;
  if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text)) {
    [self setIsVisibleWithBoolean:NO];
    return;
  }
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_setAndConsume_color_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((jdouble) [((GeogebraCommonAwtGColor *) nil_chk(color)) getRed] / 255, (jdouble) [color getGreen] / 255, (jdouble) [color getBlue] / 255, 1));
  if (backgroundColor != nil) GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_setAndConsume_backgroundColor_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_((jdouble) [backgroundColor getRed] / 255, (jdouble) [backgroundColor getGreen] / 255, (jdouble) [backgroundColor getBlue] / 255, 1));
  else GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_backgroundColor_(self, nil);
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) isGrayScaled]) [self->color_ convertToGrayScale];
  [self setIsVisibleWithBoolean:YES];
  if (waitForReset__ || ![text isEqual:self->text_] || ![((GeogebraCommonAwtGFont *) nil_chk(font)) isEqual:self->font_]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_text_(self, text);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_font_(self, font);
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) setFontWithGeogebraCommonAwtGFont:font];
    id<GeogebraCommonAwtGRectangle> rectangle = [self getBounds];
    jint xMin = J2ObjCFpToInt([((id<GeogebraCommonAwtGRectangle>) nil_chk(rectangle)) getMinX]) - 1;
    jint xMax = J2ObjCFpToInt([rectangle getMaxX]) + 1;
    jint yMin = J2ObjCFpToInt([rectangle getMinY]) - 1;
    jint yMax = J2ObjCFpToInt([rectangle getMaxY]) + 1;
    width_ = xMax - xMin;
    height_ = yMax - yMin;
    xOffset2_ = xMin;
    yOffset2_ = -yMax;
    id<GeogebraCommonAwtGBufferedImage> bimg = [self draw];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([view_ getRenderer])) createAlphaTextureWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:self withGeogebraCommonAwtGBufferedImage:bimg];
    waitForReset__ = NO;
  }
  self->xOffset_ = xOffset;
  self->yOffset_ = yOffset;
  [self updateDrawPosition];
}

- (id<GeogebraCommonAwtGGraphics2D>)createGraphics2DWithGeogebraCommonAwtGBufferedImage:(id<GeogebraCommonAwtGBufferedImage>)bimg {
  id<GeogebraCommonAwtGGraphics2D> g2d = [((id<GeogebraCommonAwtGBufferedImage>) nil_chk(bimg)) createGraphics];
  id<GeogebraCommonAwtGAffineTransform> gt = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform];
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(gt)) scale__WithDouble:1 withDouble:-1.0];
  [gt translateWithDouble:-xOffset2_ withDouble:yOffset2_];
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) transformWithGeogebraCommonAwtGAffineTransform:gt];
  [g2d setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_BLACK_()];
  [g2d setFontWithGeogebraCommonAwtGFont:font_];
  [g2d setRenderingHintWithGeogebraCommonAwtGKey:GeogebraCommonAwtGRenderingHints_get_KEY_ANTIALIASING_() withId:GeogebraCommonAwtGRenderingHints_get_VALUE_ANTIALIAS_ON_()];
  return g2d;
}

- (id<GeogebraCommonAwtGBufferedImage>)createBufferedImage {
  return [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getRenderer])) createBufferedImageWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D:self];
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  id<GeogebraCommonAwtGRectangle> rectangle = GeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithGeogebraCommonMainApp_withNSString_withInt_withInt_withGeogebraCommonAwtGGraphics2D_withBoolean_withGeogebraCommonAwtGFont_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], text_, 0, 0, tempGraphics_, NO, [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(tempGraphics_)) getFont]);
  if ([((NSString *) nil_chk(text_)) contains:@"_"]) {
    hasIndex_ = YES;
    GeogebraCommonAwtGPoint *p = GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([view_ getApplication], tempGraphics_, text_, 0, 0, NO, NO);
    [rectangle setRectWithDouble:[((id<GeogebraCommonAwtGRectangle>) nil_chk(rectangle)) getMinX] withDouble:[rectangle getMinY] withDouble:[rectangle getWidth] withDouble:[rectangle getHeight] + ((GeogebraCommonAwtGPoint *) nil_chk(p))->y_];
  }
  else {
    hasIndex_ = NO;
  }
  return rectangle;
}

+ (jboolean)isLatexWithNSString:(NSString *)text {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text);
}

- (id<GeogebraCommonAwtGBufferedImage>)draw {
  id<GeogebraCommonAwtGBufferedImage> bimg;
  id<GeogebraCommonAwtGGraphics2D> g2d;
  if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(text_) && ((jint) [((NSString *) nil_chk(text_)) length]) > 1) {
    jboolean serif = YES;
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable_)) getGeoElement];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) serif = [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) isSerifFont];
    jint offsetY = 10 + [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getFontSize];
    height_ += offsetY;
    bimg = [self createBufferedImage];
    g2d = [self createGraphics2DWithGeogebraCommonAwtGBufferedImage:bimg];
    GeogebraCommonMainApp *app = [view_ getApplication];
    [((GeogebraCommonEuclidianDrawEquation *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getDrawEquation])) drawEquationWithGeogebraCommonMainApp:[((GeogebraCommonKernelKernel *) nil_chk([geo getKernel])) getApplication] withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonAwtGGraphics2D:g2d withInt:0 withInt:-offsetY withNSString:[text_ substring:1 endIndex:((jint) [text_ length]) - 1] withGeogebraCommonAwtGFont:[((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) getFont] withBoolean:serif withGeogebraCommonAwtGColor:[g2d getColor] withGeogebraCommonAwtGColor:[g2d getBackground] withBoolean:YES withBoolean:NO];
    return bimg;
  }
  bimg = [self createBufferedImage];
  g2d = [self createGraphics2DWithGeogebraCommonAwtGBufferedImage:bimg];
  if (hasIndex_) {
    GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getApplication], g2d, text_, 0, 0, NO, NO);
  }
  else {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2d)) drawStringWithNSString:text_ withInt:0 withInt:0];
  }
  return bimg;
}

- (void)setWaitForReset {
  waitForReset__ = YES;
  textIndex_ = -1;
  pickingIndex_ = -1;
  backgroundIndex_ = -1;
}

- (jboolean)waitForReset {
  return waitForReset__;
}

- (void)setAnchorWithBoolean:(jboolean)flag {
  anchor_ = flag;
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:NO];
}

- (jint)getDrawZ {
  return drawZ_;
}

- (void)updateDrawPosition {
  if (origin_ == nil) {
    return;
  }
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view_)) getToScreenMatrix])) mulWithGeogebraCommonKernelMatrixCoords:origin_];
  drawX_ = J2ObjCFpToInt(([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] + xOffset_));
  if (anchor_ && xOffset_ < 0) {
    drawX_ -= width_;
  }
  else {
    drawX_ += xOffset2_;
  }
  drawY_ = J2ObjCFpToInt(([v getY] + yOffset_));
  if (anchor_ && yOffset_ < 0) {
    drawY_ -= height_;
  }
  else {
    drawY_ += yOffset2_;
  }
  drawZ_ = J2ObjCFpToInt([v getZ]);
}

- (jboolean)hitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)pos {
  if (backgroundColor_ != nil) {
    return drawX_ <= ((GeogebraCommonAwtGPoint *) nil_chk(pos))->x_ && drawX_ + width_ >= pos->x_ && drawY_ <= pos->y_ && drawY_ + height_ >= pos->y_;
  }
  return drawX_ + pickingX_ <= ((GeogebraCommonAwtGPoint *) nil_chk(pos))->x_ && drawX_ + pickingX_ + pickingW_ >= pos->x_ && drawY_ + pickingY_ <= pos->y_ && drawY_ + pickingY_ + pickingH_ >= pos->y_;
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                      withBoolean:(jboolean)forPicking {
  if (!isVisible_) return;
  if (textureIndex_ == -1) return;
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLabelOriginWithGeogebraCommonKernelMatrixCoords:origin_];
  if (forPicking) {
    if (backgroundColor_ != nil) {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:backgroundIndex_];
    }
    else {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:pickingIndex_];
    }
  }
  else {
    if (backgroundColor_ != nil) {
      [renderer setColorWithGeogebraCommonKernelMatrixCoords:backgroundColor_];
      [renderer disableTextures];
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:backgroundIndex_];
    }
    [self drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withInt:drawX_ withInt:drawY_ withInt:drawZ_];
  }
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                                          withInt:(jint)x
                                                          withInt:(jint)y
                                                          withInt:(jint)z {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setColorWithGeogebraCommonKernelMatrixCoords:color_];
  [renderer enableTextures];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([renderer getTextures])) setTextureLinearWithInt:textureIndex_];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawLabelWithInt:textIndex_];
}

- (void)setTextureIndexWithInt:(jint)i {
  textureIndex_ = i;
}

- (jint)getTextureIndex {
  return textureIndex_;
}

- (void)setIsVisibleWithBoolean:(jboolean)flag {
  isVisible_ = flag;
}

- (jint)getWidth {
  return width_;
}

- (jint)getHeight {
  return height_;
}

- (jint)getWidthPowerOfTwo {
  return width2_;
}

- (jint)getHeightPowerOfTwo {
  return height2_;
}

- (void)setPickingDimensionWithInt:(jint)x
                           withInt:(jint)y
                           withInt:(jint)w
                           withInt:(jint)h {
  pickingX_ = x;
  pickingY_ = y;
  pickingW_ = w;
  pickingH_ = h;
}

- (void)setDimensionPowerOfTwoWithInt:(jint)w
                              withInt:(jint)h {
  width2_ = w;
  height2_ = h;
}

- (jboolean)isPickable {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable_)) hasPickableLable];
}

- (void)updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self updateDrawPosition];
  if (origin_ == nil) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) removeWithInt:textIndex_];
    textIndex_ = -1;
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:pickingIndex_];
    pickingIndex_ = -1;
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:backgroundIndex_];
    backgroundIndex_ = -1;
    return;
  }
  jint old = textIndex_;
  textIndex_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) rectangleWithInt:drawX_ withInt:drawY_ withInt:drawZ_ withInt:width2_ withInt:height2_ withInt:textIndex_];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
  old = pickingIndex_;
  pickingIndex_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) rectangleWithInt:drawX_ + pickingX_ withInt:drawY_ + pickingY_ withInt:drawZ_ withInt:pickingW_ withInt:pickingH_ withInt:pickingIndex_];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
  old = backgroundIndex_;
  backgroundIndex_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) rectangleWithInt:drawX_ withInt:drawY_ withInt:drawZ_ withInt:width_ withInt:height_ withInt:backgroundIndex_];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) removeWithInt:old];
}

- (void)dealloc {
  RELEASE_(text_);
  RELEASE_(font_);
  RELEASE_(backgroundColor_);
  RELEASE_(color_);
  RELEASE_(origin_);
  RELEASE_(view_);
  RELEASE_(tempGraphics_);
  RELEASE_(drawable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "DrawLabel3D", NULL, 0x1, NULL, NULL },
    { "updateWithNSString:withGeogebraCommonAwtGFont:withGeogebraCommonAwtGColor:withGeogebraCommonKernelMatrixCoords:withFloat:withFloat:", "update", "V", 0x1, NULL, NULL },
    { "updateWithNSString:withGeogebraCommonAwtGFont:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:withGeogebraCommonKernelMatrixCoords:withFloat:withFloat:", "update", "V", 0x1, NULL, NULL },
    { "createGraphics2DWithGeogebraCommonAwtGBufferedImage:", "createGraphics2D", "Lgeogebra.common.awt.GGraphics2D;", 0x4, NULL, NULL },
    { "createBufferedImage", NULL, "Lgeogebra.common.awt.GBufferedImage;", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x4, NULL, NULL },
    { "isLatexWithNSString:", "isLatex", "Z", 0xa, NULL, NULL },
    { "draw", NULL, "Lgeogebra.common.awt.GBufferedImage;", 0x4, NULL, NULL },
    { "setWaitForReset", NULL, "V", 0x1, NULL, NULL },
    { "waitForReset", NULL, "Z", 0x1, NULL, NULL },
    { "setAnchorWithBoolean:", "setAnchor", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "getDrawZ", NULL, "I", 0x1, NULL, NULL },
    { "updateDrawPosition", NULL, "V", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonAwtGPoint:", "hit", "Z", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withBoolean:", "draw", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withInt:withInt:withInt:", "draw", "V", 0x4, NULL, NULL },
    { "setTextureIndexWithInt:", "setTextureIndex", "V", 0x1, NULL, NULL },
    { "getTextureIndex", NULL, "I", 0x1, NULL, NULL },
    { "setIsVisibleWithBoolean:", "setIsVisible", "V", 0x1, NULL, NULL },
    { "getWidth", NULL, "I", 0x1, NULL, NULL },
    { "getHeight", NULL, "I", 0x1, NULL, NULL },
    { "getWidthPowerOfTwo", NULL, "I", 0x1, NULL, NULL },
    { "getHeightPowerOfTwo", NULL, "I", 0x1, NULL, NULL },
    { "setPickingDimensionWithInt:withInt:withInt:withInt:", "setPickingDimension", "V", 0x1, NULL, NULL },
    { "setDimensionPowerOfTwoWithInt:withInt:", "setDimensionPowerOfTwo", "V", 0x1, NULL, NULL },
    { "isPickable", NULL, "Z", 0x1, NULL, NULL },
    { "updatePositionWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "updatePosition", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "text_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "font_", NULL, 0x4, "Lgeogebra.common.awt.GFont;", NULL, NULL,  },
    { "backgroundColor_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "color_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "origin_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "xOffset_", NULL, 0x2, "F", NULL, NULL,  },
    { "yOffset_", NULL, 0x2, "F", NULL, NULL,  },
    { "xOffset2_", NULL, 0x2, "F", NULL, NULL,  },
    { "yOffset2_", NULL, 0x2, "F", NULL, NULL,  },
    { "anchor_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "height_", NULL, 0x4, "I", NULL, NULL,  },
    { "width_", NULL, 0x4, "I", NULL, NULL,  },
    { "height2_", NULL, 0x2, "I", NULL, NULL,  },
    { "width2_", NULL, 0x2, "I", NULL, NULL,  },
    { "textureIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "waitForReset__", "waitForReset", 0x2, "Z", NULL, NULL,  },
    { "tempGraphics_", NULL, 0x4, "Lgeogebra.common.awt.GGraphics2D;", NULL, NULL,  },
    { "drawable_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", NULL, NULL,  },
    { "hasIndex_", NULL, 0x4, "Z", NULL, NULL,  },
    { "drawX_", NULL, 0x4, "I", NULL, NULL,  },
    { "drawY_", NULL, 0x4, "I", NULL, NULL,  },
    { "drawZ_", NULL, 0x4, "I", NULL, NULL,  },
    { "pickingX_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingY_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingW_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingH_", NULL, 0x2, "I", NULL, NULL,  },
    { "textIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "pickingIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "backgroundIndex_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D = { 2, "DrawLabel3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 28, methods, 31, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  NSObject_init(self);
  self->textureIndex_ = -1;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_tempGraphics_(self, [((id<GeogebraCommonAwtGBufferedImage>) nil_chk([((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBufferedImageWithInt:1 withInt:1 withInt:GeogebraCommonAwtGBufferedImage_TYPE_INT_ARGB])) createGraphics]);
  self->hasIndex_ = NO;
  self->textIndex_ = -1;
  self->pickingIndex_ = -1;
  self->backgroundIndex_ = -1;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_view_(self, view);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_set_drawable_(self, drawable);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *drawable) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_(self, view, drawable);
  return self;
}

jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_isLatexWithNSString_(NSString *text) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D_initialize();
  return ([((NSString *) nil_chk(text)) charAtWithInt:0] == '$') && [text hasSuffix:@"$"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawLabel3D)
