//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAngularBisectorLines.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngularBisectorLines.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/MyMath.h"

@interface GeogebraCommonKernelAlgosAlgoAngularBisectorLines () {
 @public
  GeogebraCommonKernelGeosGeoLine *g_, *h_;
  IOSObjectArray *bisector_;
  jdouble gx_, gy_, hx_, hy_, wx_, wy_, bx_, by_, lenH_, lenG_, length_, ip_;
  IOSObjectArray *wv_;
  GeogebraCommonKernelGeosGeoPoint *B_;
  jboolean infiniteB_;
  jint index_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorLines, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorLines, h_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorLines, bisector_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorLines, wv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAngularBisectorLines, B_, GeogebraCommonKernelGeosGeoPoint *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoAngularBisectorLines_compute(GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self);

@implementation GeogebraCommonKernelAlgosAlgoAngularBisectorLines

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g, h);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, labels, g, h);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_AngularBisector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ANGULAR_BISECTOR;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)h {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, g, h);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, g_);
  IOSObjectArray_Set(input_, 1, h_);
  [super setOutputWithGeogebraCommonKernelGeosGeoElementArray:bisector_];
  [self setDependencies];
}

- (IOSObjectArray *)getLines {
  return bisector_;
}

- (GeogebraCommonKernelGeosGeoLine *)getg {
  return g_;
}

- (GeogebraCommonKernelGeosGeoLine *)geth {
  return h_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getB {
  return B_;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBisectorOfAB" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(h_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnAngularBisectorLinesWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(h_);
  RELEASE_(bisector_);
  RELEASE_(wv_);
  RELEASE_(B_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "AlgoAngularBisectorLines", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "AlgoAngularBisectorLines", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelGeosGeoLine:", "AlgoAngularBisectorLines", NULL, 0x0, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getLines", NULL, "[Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "geth", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getB", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "bisector_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "gx_", NULL, 0x2, "D", NULL, NULL,  },
    { "gy_", NULL, 0x2, "D", NULL, NULL,  },
    { "hx_", NULL, 0x2, "D", NULL, NULL,  },
    { "hy_", NULL, 0x2, "D", NULL, NULL,  },
    { "wx_", NULL, 0x2, "D", NULL, NULL,  },
    { "wy_", NULL, 0x2, "D", NULL, NULL,  },
    { "bx_", NULL, 0x2, "D", NULL, NULL,  },
    { "by_", NULL, 0x2, "D", NULL, NULL,  },
    { "lenH_", NULL, 0x2, "D", NULL, NULL,  },
    { "lenG_", NULL, 0x2, "D", NULL, NULL,  },
    { "length_", NULL, 0x2, "D", NULL, NULL,  },
    { "ip_", NULL, 0x2, "D", NULL, NULL,  },
    { "wv_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
    { "B_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "infiniteB_", NULL, 0x2, "Z", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAngularBisectorLines = { 2, "AlgoAngularBisectorLines", "geogebra.common.kernel.algos", NULL, 0x1, 15, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAngularBisectorLines;
}

@end

void GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, g, h);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSString_withGeogebraCommonKernelGeosGeoElementArray_(label, self->bisector_);
}

GeogebraCommonKernelAlgosAlgoAngularBisectorLines *new_GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self = [GeogebraCommonKernelAlgosAlgoAngularBisectorLines alloc];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g, h);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, g, h);
  GeogebraCommonKernelGeosGeoElement_setLabelsWithNSStringArray_withGeogebraCommonKernelGeosGeoElementArray_(labels, self->bisector_);
}

GeogebraCommonKernelAlgosAlgoAngularBisectorLines *new_GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self = [GeogebraCommonKernelAlgosAlgoAngularBisectorLines alloc];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, labels, g, h);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_set_h_(self, h);
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_setAndConsume_bisector_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(self->bisector_, 0, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  IOSObjectArray_SetAndConsume(self->bisector_, 1, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_setAndConsume_wv_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoVector_class_()]);
  IOSObjectArray_SetAndConsume(self->wv_, 0, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0))) setCoordsWithDouble:0 withDouble:0 withDouble:0];
  IOSObjectArray_SetAndConsume(self->wv_, 1, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1))) setCoordsWithDouble:0 withDouble:0 withDouble:0];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_setAndConsume_B_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:self->B_];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:self->B_];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_compute(self);
}

GeogebraCommonKernelAlgosAlgoAngularBisectorLines *new_GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoLine *g, GeogebraCommonKernelGeosGeoLine *h) {
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self = [GeogebraCommonKernelAlgosAlgoAngularBisectorLines alloc];
  GeogebraCommonKernelAlgosAlgoAngularBisectorLines_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_(self, cons, g, h);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAngularBisectorLines_compute(GeogebraCommonKernelAlgosAlgoAngularBisectorLines *self) {
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(self->g_, self->h_, self->B_);
  self->infiniteB_ = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->B_)) isInfinite];
  self->gx_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->y_;
  self->gy_ = -self->g_->x_;
  self->lenG_ = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->gx_, self->gy_);
  self->gx_ /= self->lenG_;
  self->gy_ /= self->lenG_;
  self->hx_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->h_))->y_;
  self->hy_ = -self->h_->x_;
  self->lenH_ = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->hx_, self->hy_);
  self->hx_ /= self->lenH_;
  self->hy_ /= self->lenH_;
  if (self->infiniteB_) {
    if (self->gx_ * self->hx_ + self->gy_ * self->hy_ > 0) {
      self->index_ = 0;
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), self->index_)))->z_ = (self->g_->z_ / self->lenG_ + self->h_->z_ / self->lenH_) / 2.0;
    }
    else {
      self->index_ = 1;
      ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), self->index_)))->z_ = (self->g_->z_ / self->lenG_ - self->h_->z_ / self->lenH_) / 2.0;
    }
    self->wx_ = self->gx_;
    self->wy_ = self->gy_;
    if ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0))) isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 0)))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->y_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ = -((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->x_;
      }
      if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 1)))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->y_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ = -((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->x_;
      }
      if (((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), self->index_)))->x_ * self->wx_ + ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->y_ * self->wy_ >= 0) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->x_ = self->wx_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->y_ = self->wy_;
      }
      else {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->x_ = -self->wx_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->y_ = -self->wy_;
        ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, self->index_)))->z_ = -((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, self->index_)))->z_;
      }
    }
    else {
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), self->index_)))->x_ = self->wx_;
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->y_ = self->wy_;
    }
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), self->index_)))->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), self->index_)))->y_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, self->index_)))->y_ = ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, self->index_)))->x_;
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1 - self->index_))) setUndefined];
  }
  else {
    self->ip_ = self->gx_ * self->hx_ + self->gy_ * self->hy_;
    if (self->ip_ >= 0.0) {
      self->wx_ = self->gx_ + self->hx_;
      self->wy_ = self->gy_ + self->hy_;
    }
    else {
      self->wx_ = self->hy_ - self->gy_;
      self->wy_ = self->gx_ - self->hx_;
      if (self->gx_ * self->hy_ < self->gy_ * self->hx_) {
        self->wx_ = -self->wx_;
        self->wy_ = -self->wy_;
      }
    }
    self->length_ = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_(self->wx_, self->wy_);
    self->wx_ /= self->length_;
    self->wy_ /= self->length_;
    if ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isContinuous]) {
      if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0))) isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 0)))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->y_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ = -((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->x_;
      }
      if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1))) isDefined]) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 1)))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->y_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ = -((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->x_;
      }
      if (((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 0)))->x_ * self->wx_ + ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ * self->wy_ >= 0) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->x_ = self->wx_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ = self->wy_;
      }
      else {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->x_ = -self->wx_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ = -self->wy_;
      }
      if (((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ * self->wx_ - ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->x_ * self->wy_ >= 0) {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->x_ = -self->wy_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ = self->wx_;
      }
      else {
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->x_ = self->wy_;
        ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ = -self->wx_;
      }
    }
    else {
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 0)))->x_ = self->wx_;
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->y_ = self->wy_;
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->x_ = -self->wy_;
      ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_ = self->wx_;
    }
    self->bx_ = self->B_->inhomX_;
    self->by_ = self->B_->inhomY_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->bisector_), 0)))->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(nil_chk(self->wv_), 0)))->y_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->y_ = ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 0)))->x_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->z_ = -(self->bx_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->x_ + self->by_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 0)))->y_);
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->x_ = -((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->y_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->y_ = ((GeogebraCommonKernelGeosGeoVector *) nil_chk(IOSObjectArray_Get(self->wv_, 1)))->x_;
    ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->z_ = -(self->bx_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->x_ + self->by_ * ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->bisector_, 1)))->y_);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAngularBisectorLines)
