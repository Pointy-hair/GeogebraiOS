//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPolynomialConic.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/AlgoSimpleRootsPolynomial.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic () {
 @public
  GeogebraCommonKernelGeosGeoFunction *h_;
  GeogebraCommonKernelGeosGeoConic *c_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic, h_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic, c_, GeogebraCommonKernelGeosGeoConic *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_addIncidence(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self);

@implementation GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)h
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(self, cons, h, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                                             withBoolean:(jboolean)setLabel
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)h
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(self, cons, labels, setLabel, h, c);
  return self;
}

- (void)addIncidence {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_addIncidence(self);
}

- (void)compute {
  IOSDoubleArray *A = [((GeogebraCommonKernelGeosGeoConic *) nil_chk(c_)) getFlatMatrix];
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(h_)) isPolynomialFunctionWithBoolean:NO]) {
    GeogebraCommonKernelArithmeticPolyFunction *pf = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([h_ getFunction])) getNumericPolynomialDerivativeWithInt:0 withBoolean:NO];
    OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *y = [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(pf)) getCoeffs]) autorelease];
    OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *r = [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(A), 2), 2 * IOSDoubleArray_Get(A, 4), IOSDoubleArray_Get(A, 0) } count:3]) autorelease];
    r = [r addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[y multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ 2 * IOSDoubleArray_Get(A, 5), 2 * IOSDoubleArray_Get(A, 3) } count:2]) autorelease]]];
    r = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(r)) addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[y multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[y multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(A, 1) } count:1]) autorelease]]]];
    [self setRootsPolynomialWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:r];
  }
  else {
    GeogebraCommonKernelKernel *ker = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel];
    [((GeogebraCommonKernelKernel *) nil_chk(ker)) setSilentModeWithBoolean:YES];
    GeogebraCommonKernelImplicitGeoImplicitPoly *iPoly = [new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [c_ toGeoImplicitPolyWithGeogebraCommonKernelImplicitGeoImplicitPoly:iPoly];
    GeogebraCommonKernelGeosGeoFunction *paramEquation = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(cons_, iPoly, nil, h_) autorelease];
    jdouble nroots = 0;
    IOSDoubleArray *res = [IOSDoubleArray arrayWithLength:2];
    if ([c_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE || [c_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE) {
      nroots = [((GeogebraCommonKernelEquationSolver *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getEquationSolver])) solveQuadraticWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ -IOSDoubleArray_Get(nil_chk(A), 5) * IOSDoubleArray_Get(A, 5) + IOSDoubleArray_Get(A, 1) * IOSDoubleArray_Get(A, 2), 2 * (IOSDoubleArray_Get(A, 1) * IOSDoubleArray_Get(A, 4) - IOSDoubleArray_Get(A, 3) * IOSDoubleArray_Get(A, 5)), IOSDoubleArray_Get(A, 0) * IOSDoubleArray_Get(A, 1) - IOSDoubleArray_Get(A, 3) * IOSDoubleArray_Get(A, 3) } count:3] withDoubleArray:res withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION];
    }
    GeogebraCommonKernelAlgosAlgoRoots *algo = nil;
    if (nroots == 2) {
      if (IOSDoubleArray_Get(res, 1) > IOSDoubleArray_Get(res, 0)) {
        jdouble temp = IOSDoubleArray_Get(res, 0);
        *IOSDoubleArray_GetRef(res, 0) = IOSDoubleArray_Get(res, 1);
        *IOSDoubleArray_GetRef(res, 1) = temp;
      }
      algo = [new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, paramEquation, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, JavaLangMath_maxWithDouble_withDouble_(IOSDoubleArray_Get(res, 1) - GeogebraCommonKernelKernel_MIN_PRECISION, [h_ getMinParameter])) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, JavaLangMath_minWithDouble_withDouble_(IOSDoubleArray_Get(res, 0) + GeogebraCommonKernelKernel_MIN_PRECISION, [h_ getMaxParameter])) autorelease]) autorelease];
    }
    else {
      algo = [new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, paramEquation, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [h_ getMinParameter]) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [h_ getMaxParameter]) autorelease]) autorelease];
    }
    IOSObjectArray *points = [((GeogebraCommonKernelAlgosAlgoRoots *) nil_chk(algo)) getRootPoints];
    id<JavaUtilList> valPairs = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(points))->size_; i++) {
      jdouble t = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(points, i))) getX];
      [valPairs addWithId:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ t, [h_ evaluateWithDouble:t] } count:2]];
    }
    [ker setSilentModeWithBoolean:NO];
    [self setPointsWithJavaUtilList:valPairs];
    return;
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (jdouble)getYValueWithDouble:(jdouble)x {
  return [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(h_)) evaluateWithDouble:x];
}

- (void)dealloc {
  RELEASE_(h_);
  RELEASE_(c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:", "AlgoIntersectPolynomialConic", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withBoolean:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoConic:", "AlgoIntersectPolynomialConic", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getYValueWithDouble:", "getYValue", "D", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "h_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "c_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic = { 2, "AlgoIntersectPolynomialConic", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *h, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(self, cons, [IOSObjectArray arrayWithObjects:(id[]){ h, c } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_set_h_(self, h);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_set_c_(self, c);
  [self compute];
}

GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *new_GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoFunction *h, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self = [GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(self, cons, h, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabel, GeogebraCommonKernelGeosGeoFunction *h, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(self, cons, [IOSObjectArray arrayWithObjects:(id[]){ h, c } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_set_h_(self, h);
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_set_c_(self, c);
  [self compute];
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_addIncidence(self);
}

GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *new_GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, jboolean setLabel, GeogebraCommonKernelGeosGeoFunction *h, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self = [GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoConic_(self, cons, labels, setLabel, h, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic_addIncidence(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectPolynomialConic)
