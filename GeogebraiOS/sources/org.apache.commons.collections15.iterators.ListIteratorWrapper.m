//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/iterators/ListIteratorWrapper.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/NoSuchElementException.h"
#include "org/apache/commons/collections15/iterators/ListIteratorWrapper.h"

@interface OrgApacheCommonsCollections15IteratorsListIteratorWrapper () {
 @public
  id<JavaUtilIterator> iterator_;
  JavaUtilLinkedList *list_;
  jint currentIndex_;
  jint wrappedIteratorIndex_;
}

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15IteratorsListIteratorWrapper, iterator_, id<JavaUtilIterator>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15IteratorsListIteratorWrapper, list_, JavaUtilLinkedList *)

static NSString *OrgApacheCommonsCollections15IteratorsListIteratorWrapper_UNSUPPORTED_OPERATION_MESSAGE_ = @"ListIteratorWrapper does not support optional operations of ListIterator.";
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15IteratorsListIteratorWrapper, UNSUPPORTED_OPERATION_MESSAGE_, NSString *)

@implementation OrgApacheCommonsCollections15IteratorsListIteratorWrapper

- (instancetype)initWithJavaUtilIterator:(id<JavaUtilIterator>)iterator {
  OrgApacheCommonsCollections15IteratorsListIteratorWrapper_initWithJavaUtilIterator_(self, iterator);
  return self;
}

- (void)addWithId:(id)o {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(OrgApacheCommonsCollections15IteratorsListIteratorWrapper_UNSUPPORTED_OPERATION_MESSAGE_) autorelease];
}

- (jboolean)hasNext {
  if (currentIndex_ == wrappedIteratorIndex_) {
    return [((id<JavaUtilIterator>) nil_chk(iterator_)) hasNext];
  }
  return YES;
}

- (jboolean)hasPrevious {
  if (currentIndex_ == 0) {
    return NO;
  }
  return YES;
}

- (id)next {
  if (currentIndex_ < wrappedIteratorIndex_) {
    ++currentIndex_;
    return [((JavaUtilLinkedList *) nil_chk(list_)) getWithInt:currentIndex_ - 1];
  }
  id retval = [((id<JavaUtilIterator>) nil_chk(iterator_)) next];
  [((JavaUtilLinkedList *) nil_chk(list_)) addWithId:retval];
  ++currentIndex_;
  ++wrappedIteratorIndex_;
  return retval;
}

- (jint)nextIndex {
  return currentIndex_;
}

- (id)previous {
  if (currentIndex_ == 0) {
    @throw [new_JavaUtilNoSuchElementException_init() autorelease];
  }
  --currentIndex_;
  return [((JavaUtilLinkedList *) nil_chk(list_)) getWithInt:currentIndex_];
}

- (jint)previousIndex {
  return currentIndex_ - 1;
}

- (void)remove {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(OrgApacheCommonsCollections15IteratorsListIteratorWrapper_UNSUPPORTED_OPERATION_MESSAGE_) autorelease];
}

- (void)setWithId:(id)o {
  @throw [new_JavaLangUnsupportedOperationException_initWithNSString_(OrgApacheCommonsCollections15IteratorsListIteratorWrapper_UNSUPPORTED_OPERATION_MESSAGE_) autorelease];
}

- (void)dealloc {
  RELEASE_(iterator_);
  RELEASE_(list_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithJavaUtilIterator:", "ListIteratorWrapper", NULL, 0x1, NULL, NULL },
    { "addWithId:", "add", "V", 0x1, "Ljava.lang.UnsupportedOperationException;", "(TE;)V" },
    { "hasNext", NULL, "Z", 0x1, NULL, NULL },
    { "hasPrevious", NULL, "Z", 0x1, NULL, NULL },
    { "next", NULL, "TE;", 0x1, "Ljava.util.NoSuchElementException;", "()TE;" },
    { "nextIndex", NULL, "I", 0x1, NULL, NULL },
    { "previous", NULL, "TE;", 0x1, "Ljava.util.NoSuchElementException;", "()TE;" },
    { "previousIndex", NULL, "I", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, "Ljava.lang.UnsupportedOperationException;", NULL },
    { "setWithId:", "set", "V", 0x1, "Ljava.lang.UnsupportedOperationException;", "(TE;)V" },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "iterator_", NULL, 0x12, "Ljava.util.Iterator;", NULL, "Ljava/util/Iterator<TE;>;",  },
    { "list_", NULL, 0x12, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<TE;>;",  },
    { "currentIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "wrappedIteratorIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "UNSUPPORTED_OPERATION_MESSAGE_", NULL, 0x1a, "Ljava.lang.String;", &OrgApacheCommonsCollections15IteratorsListIteratorWrapper_UNSUPPORTED_OPERATION_MESSAGE_, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsCollections15IteratorsListIteratorWrapper = { 2, "ListIteratorWrapper", "org.apache.commons.collections15.iterators", NULL, 0x1, 10, methods, 5, fields, 0, NULL, 0, NULL, NULL, "<E:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/ListIterator<TE;>;" };
  return &_OrgApacheCommonsCollections15IteratorsListIteratorWrapper;
}

@end

void OrgApacheCommonsCollections15IteratorsListIteratorWrapper_initWithJavaUtilIterator_(OrgApacheCommonsCollections15IteratorsListIteratorWrapper *self, id<JavaUtilIterator> iterator) {
  NSObject_init(self);
  OrgApacheCommonsCollections15IteratorsListIteratorWrapper_setAndConsume_list_(self, new_JavaUtilLinkedList_init());
  self->currentIndex_ = 0;
  self->wrappedIteratorIndex_ = 0;
  if (iterator == nil) {
    @throw [new_JavaLangNullPointerException_initWithNSString_(@"Iterator must not be null") autorelease];
  }
  OrgApacheCommonsCollections15IteratorsListIteratorWrapper_set_iterator_(self, iterator);
}

OrgApacheCommonsCollections15IteratorsListIteratorWrapper *new_OrgApacheCommonsCollections15IteratorsListIteratorWrapper_initWithJavaUtilIterator_(id<JavaUtilIterator> iterator) {
  OrgApacheCommonsCollections15IteratorsListIteratorWrapper *self = [OrgApacheCommonsCollections15IteratorsListIteratorWrapper alloc];
  OrgApacheCommonsCollections15IteratorsListIteratorWrapper_initWithJavaUtilIterator_(self, iterator);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsCollections15IteratorsListIteratorWrapper)
