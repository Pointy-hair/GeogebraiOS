//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectSingle3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersect3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectSingle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

#define GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_serialVersionUID 1LL

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D () {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *algo_;
  jint index_;
  id<GeogebraCommonKernelKernelNDGeoPointND> refPoint_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *point_;
  IOSObjectArray *parentOutput_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D, algo_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D, refPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D, point_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D, parentOutput_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initForNearToRelationship(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D

- (instancetype)initWithNSString:(NSString *)label
withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *)algo
withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)refPoint {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(self, label, algo, refPoint);
  return self;
}

- (instancetype)initWithNSString:(NSString *)label
withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *)algo
                         withInt:(jint)index {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(self, label, algo, index);
  return self;
}

- (jboolean)showUndefinedPointsInAlgebraView {
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  if (refPoint_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo_)) getInput]), 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(nil_chk([algo_ getInput]), 1));
    IOSObjectArray_SetAndConsume(input_, 2, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, index_ + 1));
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo_)) getInput]), 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(nil_chk([algo_ getInput]), 1));
    IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(refPoint_, [GeogebraCommonKernelGeosGeoElement class]));
  }
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:point_];
  [self setDependencies];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getPoint {
  return point_;
}

- (IOSObjectArray *)getIntersectionPoints {
  return (IOSObjectArray *) check_class_cast([self getOutput], [IOSObjectArray class]);
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return nil;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)initForNearToRelationship {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initForNearToRelationship(self);
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_set_parentOutput_(self, [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo_)) getIntersectionPoints]);
  if (refPoint_ != nil) if ([refPoint_ isDefined]) index_ = [algo_ getClosestPointIndexWithGeogebraCommonKernelKernelNDGeoPointND:refPoint_];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined] && index_ < ((IOSObjectArray *) nil_chk(parentOutput_))->size_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point_)) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(IOSObjectArray_Get(parentOutput_, index_))) getCoords]];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(point_)) setUndefined];
  }
}

- (void)remove {
  [super remove];
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo_)) removeUser];
}

- (void)dealloc {
  RELEASE_(algo_);
  RELEASE_(refPoint_);
  RELEASE_(point_);
  RELEASE_(parentOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoIntersectSingle3D", NULL, 0x0, NULL, NULL },
    { "initWithNSString:withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D:withInt:", "AlgoIntersectSingle3D", NULL, 0x0, NULL, NULL },
    { "showUndefinedPointsInAlgebraView", NULL, "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x4, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_serialVersionUID },
    { "algo_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersect3D;", NULL, NULL,  },
    { "index_", NULL, 0x2, "I", NULL, NULL,  },
    { "refPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "parentOutput_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D = { 2, "AlgoIntersectSingle3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 13, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self, NSString *label, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *algo, id<GeogebraCommonKernelKernelNDGeoPointND> refPoint) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo)) getConstruction]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_set_algo_(self, algo);
  [algo addUser];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_set_refPoint_(self, refPoint);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_setAndConsume_point_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([algo getConstruction]));
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(NSString *label, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *algo, id<GeogebraCommonKernelKernelNDGeoPointND> refPoint) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withGeogebraCommonKernelKernelNDGeoPointND_(self, label, algo, refPoint);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self, NSString *label, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *algo, jint index) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(algo)) getConstruction]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_set_algo_(self, algo);
  [algo addUser];
  if (index < 0) index = 0;
  else self->index_ = index;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_setAndConsume_point_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([algo getConstruction]));
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(NSString *label, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *algo, jint index) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initWithNSString_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D_withInt_(self, label, algo, index);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_initForNearToRelationship(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D *self) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D_set_parentOutput_(self, [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersect3D *) nil_chk(self->algo_)) getIntersectionPoints]);
  [self->algo_ initForNearToRelationship];
  [self->algo_ setIntersectionPointWithInt:self->index_ withGeogebraCommonKernelKernelNDGeoPointND:self->point_];
  [self->algo_ compute];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectSingle3D)
