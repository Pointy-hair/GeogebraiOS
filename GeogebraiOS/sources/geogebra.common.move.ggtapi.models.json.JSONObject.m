//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/move/ggtapi/models/json/JSONObject.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/move/ggtapi/models/json/JSONException.h"
#include "geogebra/common/move/ggtapi/models/json/JSONNumber.h"
#include "geogebra/common/move/ggtapi/models/json/JSONObject.h"
#include "geogebra/common/move/ggtapi/models/json/JSONString.h"
#include "geogebra/common/move/ggtapi/models/json/JSONValue.h"
#include "geogebra/common/move/ggtapi/models/json/JsonUtils.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuffer.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"

@interface GeogebraCommonMoveGgtapiModelsJsonJSONObject () {
 @public
  JavaUtilHashMap *jsObject_;
}

- (IOSObjectArray *)computeKeys;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMoveGgtapiModelsJsonJSONObject, jsObject_, JavaUtilHashMap *)

@implementation GeogebraCommonMoveGgtapiModelsJsonJSONObject

- (instancetype)init {
  GeogebraCommonMoveGgtapiModelsJsonJSONObject_init(self);
  return self;
}

- (jboolean)containsKeyWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(jsObject_)) containsKeyWithId:key];
}

- (jboolean)isEqual:(id)other {
  if (!([other isKindOfClass:[GeogebraCommonMoveGgtapiModelsJsonJSONObject class]])) {
    return NO;
  }
  return [((JavaUtilHashMap *) nil_chk(jsObject_)) isEqual:((GeogebraCommonMoveGgtapiModelsJsonJSONObject *) nil_chk(((GeogebraCommonMoveGgtapiModelsJsonJSONObject *) check_class_cast(other, [GeogebraCommonMoveGgtapiModelsJsonJSONObject class]))))->jsObject_];
}

- (GeogebraCommonMoveGgtapiModelsJsonJSONValue *)getWithNSString:(NSString *)key {
  if (key == nil) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  return [((JavaUtilHashMap *) nil_chk(jsObject_)) getWithId:key];
}

- (NSUInteger)hash {
  return ((jint) [((JavaUtilHashMap *) nil_chk(jsObject_)) hash]);
}

- (GeogebraCommonMoveGgtapiModelsJsonJSONObject *)isObject {
  return self;
}

- (id<JavaUtilSet>)keySet {
  return [((JavaUtilHashMap *) nil_chk(jsObject_)) keySet];
}

- (GeogebraCommonMoveGgtapiModelsJsonJSONValue *)putWithNSString:(NSString *)key
                 withGeogebraCommonMoveGgtapiModelsJsonJSONValue:(GeogebraCommonMoveGgtapiModelsJsonJSONValue *)jsonValue {
  if (key == nil) {
    @throw [new_JavaLangNullPointerException_init() autorelease];
  }
  GeogebraCommonMoveGgtapiModelsJsonJSONValue *previous = [self getWithNSString:key];
  [((JavaUtilHashMap *) nil_chk(jsObject_)) putWithId:key withId:jsonValue];
  return previous;
}

- (jint)size {
  return [((JavaUtilHashMap *) nil_chk(jsObject_)) size];
}

- (void)appendToWithJavaLangStringBuffer:(JavaLangStringBuffer *)sb {
  [((JavaLangStringBuffer *) nil_chk(sb)) appendWithNSString:@"{"];
  jboolean first = YES;
  for (NSString * __strong key in nil_chk([((JavaUtilHashMap *) nil_chk(jsObject_)) keySet])) {
    if (first) {
      first = NO;
    }
    else {
      [sb appendWithNSString:@", "];
    }
    [sb appendWithNSString:GeogebraCommonMoveGgtapiModelsJsonJsonUtils_escapeValueWithNSString_(key)];
    [sb appendWithNSString:@":"];
    [((GeogebraCommonMoveGgtapiModelsJsonJSONValue *) nil_chk([self getWithNSString:key])) appendToWithJavaLangStringBuffer:sb];
  }
  [sb appendWithNSString:@"}"];
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [new_JavaLangStringBuffer_init() autorelease];
  [self appendToWithJavaLangStringBuffer:sb];
  return [sb description];
}

- (IOSObjectArray *)computeKeys {
  return [((id<JavaUtilSet>) nil_chk([((JavaUtilHashMap *) nil_chk(jsObject_)) keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[jsObject_ size] type:NSString_class_()]];
}

- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)token {
  [self putWithNSString:key withGeogebraCommonMoveGgtapiModelsJsonJSONValue:[new_GeogebraCommonMoveGgtapiModelsJsonJSONString_initWithNSString_(token) autorelease]];
}

- (jboolean)hasWithNSString:(NSString *)key {
  return [((id<JavaUtilSet>) nil_chk([self keySet])) containsWithId:key];
}

- (NSString *)getStringWithNSString:(NSString *)key {
  GeogebraCommonMoveGgtapiModelsJsonJSONValue *val = [self getWithNSString:key];
  if ([val isKindOfClass:[GeogebraCommonMoveGgtapiModelsJsonJSONString class]]) {
    return [((GeogebraCommonMoveGgtapiModelsJsonJSONString *) nil_chk(((GeogebraCommonMoveGgtapiModelsJsonJSONString *) check_class_cast(val, [GeogebraCommonMoveGgtapiModelsJsonJSONString class])))) stringValue];
  }
  @throw [new_GeogebraCommonMoveGgtapiModelsJsonJSONException_init() autorelease];
}

- (jint)getIntWithNSString:(NSString *)key {
  GeogebraCommonMoveGgtapiModelsJsonJSONValue *val = [self getWithNSString:key];
  if ([val isKindOfClass:[GeogebraCommonMoveGgtapiModelsJsonJSONNumber class]]) {
    return J2ObjCFpToInt([((GeogebraCommonMoveGgtapiModelsJsonJSONNumber *) nil_chk(((GeogebraCommonMoveGgtapiModelsJsonJSONNumber *) check_class_cast(val, [GeogebraCommonMoveGgtapiModelsJsonJSONNumber class])))) doubleValue]);
  }
  @throw [new_GeogebraCommonMoveGgtapiModelsJsonJSONException_init() autorelease];
}

- (GeogebraCommonMoveGgtapiModelsJsonJSONObject *)getJSONObjectWithNSString:(NSString *)key {
  GeogebraCommonMoveGgtapiModelsJsonJSONValue *val = [self getWithNSString:key];
  if ([val isKindOfClass:[GeogebraCommonMoveGgtapiModelsJsonJSONObject class]]) {
    return (GeogebraCommonMoveGgtapiModelsJsonJSONObject *) check_class_cast(val, [GeogebraCommonMoveGgtapiModelsJsonJSONObject class]);
  }
  @throw [new_GeogebraCommonMoveGgtapiModelsJsonJSONException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(jsObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "JSONObject", NULL, 0x1, NULL, NULL },
    { "containsKeyWithNSString:", "containsKey", "Z", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "getWithNSString:", "get", "Lgeogebra.common.move.ggtapi.models.json.JSONValue;", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isObject", NULL, "Lgeogebra.common.move.ggtapi.models.json.JSONObject;", 0x1, NULL, NULL },
    { "keySet", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "putWithNSString:withGeogebraCommonMoveGgtapiModelsJsonJSONValue:", "put", "Lgeogebra.common.move.ggtapi.models.json.JSONValue;", 0x1, NULL, NULL },
    { "size", NULL, "I", 0x1, NULL, NULL },
    { "appendToWithJavaLangStringBuffer:", "appendTo", "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "computeKeys", NULL, "[Ljava.lang.String;", 0x2, NULL, NULL },
    { "putWithNSString:withNSString:", "put", "V", 0x1, NULL, NULL },
    { "hasWithNSString:", "has", "Z", 0x1, NULL, NULL },
    { "getStringWithNSString:", "getString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIntWithNSString:", "getInt", "I", 0x1, NULL, NULL },
    { "getJSONObjectWithNSString:", "getJSONObject", "Lgeogebra.common.move.ggtapi.models.json.JSONObject;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "jsObject_", NULL, 0x12, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/move/ggtapi/models/json/JSONValue;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMoveGgtapiModelsJsonJSONObject = { 2, "JSONObject", "geogebra.common.move.ggtapi.models.json", NULL, 0x1, 17, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMoveGgtapiModelsJsonJSONObject;
}

@end

void GeogebraCommonMoveGgtapiModelsJsonJSONObject_init(GeogebraCommonMoveGgtapiModelsJsonJSONObject *self) {
  GeogebraCommonMoveGgtapiModelsJsonJSONValue_init(self);
  GeogebraCommonMoveGgtapiModelsJsonJSONObject_setAndConsume_jsObject_(self, new_JavaUtilHashMap_init());
}

GeogebraCommonMoveGgtapiModelsJsonJSONObject *new_GeogebraCommonMoveGgtapiModelsJsonJSONObject_init() {
  GeogebraCommonMoveGgtapiModelsJsonJSONObject *self = [GeogebraCommonMoveGgtapiModelsJsonJSONObject alloc];
  GeogebraCommonMoveGgtapiModelsJsonJSONObject_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMoveGgtapiModelsJsonJSONObject)
