//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/geom/prep/PreparedPolygon.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/locate/IndexedPointInAreaLocator.h"
#include "com/vividsolutions/jts/algorithm/locate/PointOnGeometryLocator.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/geom/Polygonal.h"
#include "com/vividsolutions/jts/geom/prep/BasicPreparedGeometry.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygon.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonContains.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonContainsProperly.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonCovers.h"
#include "com/vividsolutions/jts/geom/prep/PreparedPolygonIntersects.h"
#include "com/vividsolutions/jts/noding/FastSegmentSetIntersectionFinder.h"
#include "com/vividsolutions/jts/noding/SegmentStringUtil.h"
#include "com/vividsolutions/jts/operation/predicate/RectangleContains.h"
#include "com/vividsolutions/jts/operation/predicate/RectangleIntersects.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsGeomPrepPreparedPolygon () {
 @public
  jboolean isRectangle_;
  ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *segIntFinder_;
  id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator> pia_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomPrepPreparedPolygon, segIntFinder_, ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsGeomPrepPreparedPolygon, pia_, id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator>)

@implementation ComVividsolutionsJtsGeomPrepPreparedPolygon

- (instancetype)initWithComVividsolutionsJtsGeomPolygonal:(id<ComVividsolutionsJtsGeomPolygonal>)poly {
  ComVividsolutionsJtsGeomPrepPreparedPolygon_initWithComVividsolutionsJtsGeomPolygonal_(self, poly);
  return self;
}

- (ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder *)getIntersectionFinder {
  if (segIntFinder_ == nil) ComVividsolutionsJtsGeomPrepPreparedPolygon_setAndConsume_segIntFinder_(self, new_ComVividsolutionsJtsNodingFastSegmentSetIntersectionFinder_initWithJavaUtilCollection_(ComVividsolutionsJtsNodingSegmentStringUtil_extractSegmentStringsWithComVividsolutionsJtsGeomGeometry_([self getGeometry])));
  return segIntFinder_;
}

- (id<ComVividsolutionsJtsAlgorithmLocatePointOnGeometryLocator>)getPointLocator {
  if (pia_ == nil) ComVividsolutionsJtsGeomPrepPreparedPolygon_setAndConsume_pia_(self, new_ComVividsolutionsJtsAlgorithmLocateIndexedPointInAreaLocator_initWithComVividsolutionsJtsGeomGeometry_([self getGeometry]));
  return pia_;
}

- (jboolean)intersectsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![self envelopesIntersectWithComVividsolutionsJtsGeomGeometry:g]) return NO;
  if (isRectangle_) {
    return ComVividsolutionsJtsOperationPredicateRectangleIntersects_intersectsWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomGeometry_((ComVividsolutionsJtsGeomPolygon *) check_class_cast([self getGeometry], [ComVividsolutionsJtsGeomPolygon class]), g);
  }
  return ComVividsolutionsJtsGeomPrepPreparedPolygonIntersects_intersectsWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)containsWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![self envelopeCoversWithComVividsolutionsJtsGeomGeometry:g]) return NO;
  if (isRectangle_) {
    return ComVividsolutionsJtsOperationPredicateRectangleContains_containsWithComVividsolutionsJtsGeomPolygon_withComVividsolutionsJtsGeomGeometry_((ComVividsolutionsJtsGeomPolygon *) check_class_cast([self getGeometry], [ComVividsolutionsJtsGeomPolygon class]), g);
  }
  return ComVividsolutionsJtsGeomPrepPreparedPolygonContains_containsWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)containsProperlyWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![self envelopeCoversWithComVividsolutionsJtsGeomGeometry:g]) return NO;
  return ComVividsolutionsJtsGeomPrepPreparedPolygonContainsProperly_containsProperlyWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)coversWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if (![self envelopeCoversWithComVividsolutionsJtsGeomGeometry:g]) return NO;
  if (isRectangle_) {
    return YES;
  }
  return ComVividsolutionsJtsGeomPrepPreparedPolygonCovers_coversWithComVividsolutionsJtsGeomPrepPreparedPolygon_withComVividsolutionsJtsGeomGeometry_(self, g);
}

- (void)dealloc {
  RELEASE_(segIntFinder_);
  RELEASE_(pia_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomPolygonal:", "PreparedPolygon", NULL, 0x1, NULL, NULL },
    { "getIntersectionFinder", NULL, "Lcom.vividsolutions.jts.noding.FastSegmentSetIntersectionFinder;", 0x1, NULL, NULL },
    { "getPointLocator", NULL, "Lcom.vividsolutions.jts.algorithm.locate.PointOnGeometryLocator;", 0x1, NULL, NULL },
    { "intersectsWithComVividsolutionsJtsGeomGeometry:", "intersects", "Z", 0x1, NULL, NULL },
    { "containsWithComVividsolutionsJtsGeomGeometry:", "contains", "Z", 0x1, NULL, NULL },
    { "containsProperlyWithComVividsolutionsJtsGeomGeometry:", "containsProperly", "Z", 0x1, NULL, NULL },
    { "coversWithComVividsolutionsJtsGeomGeometry:", "covers", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isRectangle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "segIntFinder_", NULL, 0x2, "Lcom.vividsolutions.jts.noding.FastSegmentSetIntersectionFinder;", NULL, NULL,  },
    { "pia_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.locate.PointOnGeometryLocator;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsGeomPrepPreparedPolygon = { 2, "PreparedPolygon", "com.vividsolutions.jts.geom.prep", NULL, 0x1, 7, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsGeomPrepPreparedPolygon;
}

@end

void ComVividsolutionsJtsGeomPrepPreparedPolygon_initWithComVividsolutionsJtsGeomPolygonal_(ComVividsolutionsJtsGeomPrepPreparedPolygon *self, id<ComVividsolutionsJtsGeomPolygonal> poly) {
  ComVividsolutionsJtsGeomPrepBasicPreparedGeometry_initWithComVividsolutionsJtsGeomGeometry_(self, (ComVividsolutionsJtsGeomGeometry *) check_class_cast(poly, [ComVividsolutionsJtsGeomGeometry class]));
  self->isRectangle_ = NO;
  ComVividsolutionsJtsGeomPrepPreparedPolygon_set_segIntFinder_(self, nil);
  ComVividsolutionsJtsGeomPrepPreparedPolygon_set_pia_(self, nil);
  self->isRectangle_ = [((ComVividsolutionsJtsGeomGeometry *) nil_chk([self getGeometry])) isRectangle];
}

ComVividsolutionsJtsGeomPrepPreparedPolygon *new_ComVividsolutionsJtsGeomPrepPreparedPolygon_initWithComVividsolutionsJtsGeomPolygonal_(id<ComVividsolutionsJtsGeomPolygonal> poly) {
  ComVividsolutionsJtsGeomPrepPreparedPolygon *self = [ComVividsolutionsJtsGeomPrepPreparedPolygon alloc];
  ComVividsolutionsJtsGeomPrepPreparedPolygon_initWithComVividsolutionsJtsGeomPolygonal_(self, poly);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsGeomPrepPreparedPolygon)
