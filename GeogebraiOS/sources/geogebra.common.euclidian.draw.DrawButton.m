//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawButton.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/MyButton.h"
#include "geogebra/common/euclidian/draw/DrawButton.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"

@interface GeogebraCommonEuclidianDrawDrawButton () {
 @public
  GeogebraCommonKernelGeosGeoButton *geoButton_;
  jboolean isVisible_;
  NSString *oldCaption_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawButton, geoButton_, GeogebraCommonKernelGeosGeoButton *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawButton, oldCaption_, NSString *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawButton_update(GeogebraCommonEuclidianDrawDrawButton *self);

@implementation GeogebraCommonEuclidianDrawDrawButton

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                       withGeogebraCommonKernelGeosGeoButton:(GeogebraCommonKernelGeosGeoButton *)geoButton {
  GeogebraCommonEuclidianDrawDrawButton_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoButton_(self, view, geoButton);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawButton_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    [((GeogebraCommonEuclidianMyButton *) nil_chk(myButton_)) setSelectedWithBoolean:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]];
    [myButton_ paintComponentWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (void)remove {
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonEuclidianMyButton *) nil_chk(myButton_)) getBounds])) containsWithInt:x withInt:y] && isVisible_;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonEuclidianMyButton *) nil_chk(myButton_)) getBounds])) intersectsWithGeogebraCommonAwtGRectangle2D:rect] && isVisible_;
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)dealloc {
  RELEASE_(geoButton_);
  RELEASE_(oldCaption_);
  RELEASE_(myButton_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoButton:", "DrawButton", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoButton_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoButton;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldCaption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "myButton_", NULL, 0x1, "Lgeogebra.common.euclidian.MyButton;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawButton = { 2, "DrawButton", "geogebra.common.euclidian.draw", NULL, 0x11, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawButton;
}

@end

void GeogebraCommonEuclidianDrawDrawButton_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoButton_(GeogebraCommonEuclidianDrawDrawButton *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoButton *geoButton) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawButton_set_geoButton_(self, geoButton);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geoButton);
  GeogebraCommonEuclidianDrawDrawButton_setAndConsume_myButton_(self, new_GeogebraCommonEuclidianMyButton_initWithGeogebraCommonKernelGeosGeoButton_withGeogebraCommonEuclidianEuclidianView_(geoButton, view));
  GeogebraCommonEuclidianDrawDrawButton_update(self);
}

GeogebraCommonEuclidianDrawDrawButton *new_GeogebraCommonEuclidianDrawDrawButton_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoButton_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoButton *geoButton) {
  GeogebraCommonEuclidianDrawDrawButton *self = [GeogebraCommonEuclidianDrawDrawButton alloc];
  GeogebraCommonEuclidianDrawDrawButton_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoButton_(self, view, geoButton);
  return self;
}

void GeogebraCommonEuclidianDrawDrawButton_update(GeogebraCommonEuclidianDrawDrawButton *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  NSString *caption = [self->geo_ getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  if (![((NSString *) nil_chk(caption)) isEqual:self->oldCaption_]) {
    GeogebraCommonEuclidianDrawDrawButton_set_oldCaption_(self, caption);
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(caption, YES));
  }
  [((GeogebraCommonEuclidianMyButton *) nil_chk(self->myButton_)) setTextWithNSString:self->labelDesc_];
  jint fontSize = J2ObjCFpToInt(([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontSize] * [((GeogebraCommonKernelGeosGeoButton *) nil_chk(self->geoButton_)) getFontSizeMultiplier]));
  GeogebraCommonMainApp *app = [self->view_ getApplication];
  [self->myButton_ setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:[self->myButton_ getText] withBoolean:[self->geoButton_ isSerifFont] withInt:[self->geoButton_ getFontStyle] withInt:fontSize]];
  self->xLabel_ = self->geo_->labelOffsetX_;
  self->yLabel_ = self->geo_->labelOffsetY_;
  [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ withInt:[self->myButton_ getWidth] withInt:[self->myButton_ getHeight]];
  [self->myButton_ setBoundsWithGeogebraCommonAwtGRectangle:self->labelRectangle_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawButton)
