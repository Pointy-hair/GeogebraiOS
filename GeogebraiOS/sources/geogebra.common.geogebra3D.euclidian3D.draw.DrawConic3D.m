//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hitting.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DCurves.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterSurface.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/geos/FromMeta.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@class GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum;

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D () {
 @public
  jdouble alpha_DrawConic3D_, beta_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *visible_;
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
  GeogebraCommonKernelPathParameter *hittingPathParameter_;
  GeogebraCommonKernelMatrixCoords *project_, *globalCoords_, *inPlaneCoords_;
  IOSDoubleArray *parameters_;
}

+ (jdouble)acoshWithDouble:(jdouble)x;

- (void)drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer;

- (void)checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                     withDouble:(jdouble)rMin
                                                     withDouble:(jdouble)rMax;

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *)calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                                                                               withDouble:(jdouble)frustumRadius;

- (void)setBoundsEllipse;

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                                                  withBoolean:(jboolean)checkRealPointSize;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, visible_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, hittingPathParameter_, GeogebraCommonKernelPathParameter *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, project_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, globalCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, inPlaneCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D, parameters_, IOSDoubleArray *)

__attribute__((unused)) static jdouble GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_acoshWithDouble_(jdouble x);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonKernelMatrixCoords *center, jdouble rMin, jdouble rMax);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonKernelMatrixCoords *v, jdouble frustumRadius);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setBoundsEllipse(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonGeogebra3DEuclidian3DHitting *hitting, jboolean checkRealPointSize);

typedef NS_ENUM(NSUInteger, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_TOTALLY_OUTSIDE = 0,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_FRUSTUM_INSIDE = 1,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_TOTALLY_INSIDE = 2,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_CENTER_OUTSIDE = 3,
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_CENTER_INSIDE = 4,
};

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values();

+ (GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum)

FOUNDATION_EXPORT GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[];

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_OUTSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_TOTALLY_OUTSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum, TOTALLY_OUTSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_FRUSTUM_INSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_FRUSTUM_INSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum, FRUSTUM_INSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_INSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_TOTALLY_INSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum, TOTALLY_INSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_OUTSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_CENTER_OUTSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum, CENTER_OUTSIDE)

#define GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_INSIDE GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_Visible_CENTER_INSIDE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum, CENTER_INSIDE)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3d
                                withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(self, view3d, conic);
  return self;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a_geo {
  [super setGeoElementWithGeogebraCommonKernelGeosGeoElement:a_geo];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_conic_(self, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a_geo, [GeogebraCommonKernelKernelNDGeoConicND class]));
}

- (void)updateColors {
  [self updateAlpha];
  [self setColorsOutlined];
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonKernelKernelNDGeoConicND *conic = (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class]);
  switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawWithInt:[self getGeometryIndex]];
    break;
    default:
    break;
  }
}

- (void)drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) drawInObjFormatWithGeogebraCommonKernelGeosGeoElement:[self getGeoElement] withInt:[self getGeometryIndex]];
  }
}

- (void)drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible] && [self getAlpha] >= 1) {
    [self setSurfaceHighlightingColor];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
  }
  [self drawTracesNotTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

+ (jdouble)acoshWithDouble:(jdouble)x {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_acoshWithDouble_(x);
}

- (jboolean)updateForItSelf {
  [self updateColors];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  [self checkVisibleAndSetBoundingBox];
  if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_OUTSIDE()) {
    [self setGeometryIndexWithInt:-1];
    [self setSurfaceIndexWithInt:-1];
    return YES;
  }
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface;
    surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
    [self updateSinglePointWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
  }
  else {
    if (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_FRUSTUM_INSIDE()) {
      GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
      [brush setThicknessWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineThickness] withFloat:(jfloat) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
      [brush setAffineTextureWithFloat:0.0f withFloat:0.0f];
      switch ([conic_ getType]) {
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
        [self updateCircleWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
        break;
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
        [self updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
        break;
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
        [self updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
        break;
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
        [self updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
        break;
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
        [brush segmentWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(m_)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(d_)) mulWithDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0)]] withGeogebraCommonKernelMatrixCoords:[m_ addWithGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(minmax_, 1)]]];
        break;
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
        case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
        [self updateLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:brush];
        break;
        default:
        break;
      }
      [self setGeometryIndexWithInt:[brush end]];
    }
    GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *surface = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getSurface];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithInt:[self getReusableSurfaceIndex]];
    switch ([conic_ getType]) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      [self updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      [self updateIntersectingLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      [self updateParallelLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      [self updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      [self updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:surface];
      break;
      default:
      break;
    }
    [self setSurfaceIndexWithInt:[surface end]];
  }
  return YES;
}

- (IOSDoubleArray *)getLineMinMaxWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getIntervalClippedWithDoubleArray:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_NEGATIVE_INFINITY, JavaLangDouble_POSITIVE_INFINITY } count:2] withGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:d_];
}

- (void)updateLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getOrigin3DWithInt:0]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_d_(self, [conic_ getDirection3DWithInt:0]);
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(d_)) isDefined]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_minmax_(self, [self getLineMinMaxWithInt:0]);
    IOSObjectArray_Set(nil_chk(points_), 0, [((GeogebraCommonKernelMatrixCoords *) nil_chk(m_)) addWithGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0)]]);
    IOSObjectArray_Set(points_, 1, [m_ addWithGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(minmax_, 1)]]);
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) segmentWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 1)];
  }
  else {
    IOSObjectArray_Set(nil_chk(points_), 0, nil);
  }
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getOrigin3DWithInt:1]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_d_(self, [conic_ getDirection3DWithInt:1]);
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(d_)) isDefined]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_minmax_(self, [self getLineMinMaxWithInt:1]);
    IOSObjectArray_Set(nil_chk(points_), 3, [((GeogebraCommonKernelMatrixCoords *) nil_chk(m_)) addWithGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0)]]);
    IOSObjectArray_Set(points_, 2, [m_ addWithGeogebraCommonKernelMatrixCoords:[d_ mulWithDouble:IOSDoubleArray_Get(minmax_, 1)]]);
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) segmentWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 2) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 3)];
  }
  else {
    IOSObjectArray_Set(nil_chk(points_), 0, nil);
  }
}

- (void)updateParallelLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  if (IOSObjectArray_Get(nil_chk(points_), 0) != nil) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) drawQuadWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 1) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 2) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 3)];
  }
}

- (void)updateIntersectingLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) drawTriangleWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(points_), 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 2) withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
  [surface drawTriangleWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 1) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 3) withGeogebraCommonKernelMatrixCoords:[conic_ getMidpoint3D]];
}

- (void)updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  IOSDoubleArray *minmax1 = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY } count:2];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getMinIntervalOutsideClippingWithDoubleArray:minmax1 withGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1_)) mulWithDouble:e1_]];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_minmax_(self, [IOSDoubleArray newArrayWithLength:4]);
  *IOSDoubleArray_GetRef(minmax_, 1) = GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_acoshWithDouble_(IOSDoubleArray_Get(minmax1, 1));
  *IOSDoubleArray_GetRef(minmax_, 3) = GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_acoshWithDouble_(-IOSDoubleArray_Get(minmax1, 0));
  *IOSDoubleArray_GetRef(minmax_, 0) = -IOSDoubleArray_Get(minmax_, 1);
  *IOSDoubleArray_GetRef(minmax_, 2) = -IOSDoubleArray_Get(minmax_, 3);
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) hyperbolaBranchWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:IOSDoubleArray_Get(minmax_, 0) withDouble:IOSDoubleArray_Get(minmax_, 1)];
  [brush hyperbolaBranchWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:[ev1_ mulWithDouble:-1] withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:IOSDoubleArray_Get(minmax_, 2) withDouble:IOSDoubleArray_Get(minmax_, 3)];
}

- (void)updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_minmax_(self, [self getParabolaMinMax]);
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) parabolaWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_ withDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0) withDouble:IOSDoubleArray_Get(minmax_, 1) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(points_), 0) withGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(points_, 1)];
}

- (void)updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) parabolaWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_ withDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0) withDouble:IOSDoubleArray_Get(minmax_, 1)];
}

- (IOSDoubleArray *)getParabolaMinMax {
  IOSDoubleArray *minmax1 = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangDouble_POSITIVE_INFINITY, JavaLangDouble_NEGATIVE_INFINITY } count:2];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getMinIntervalOutsideClippingWithDoubleArray:minmax1 withGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_];
  jdouble tMax = JavaLangMath_sqrtWithDouble_(2 * IOSDoubleArray_Get(minmax1, 1) / ((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_);
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ -tMax, tMax } count:2];
}

- (void)updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) hyperbolaPartWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:IOSDoubleArray_Get(nil_chk(minmax_), 0) withDouble:IOSDoubleArray_Get(minmax_, 1)];
  [surface hyperbolaPartWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(ev1_)) mulWithDouble:-1] withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:IOSDoubleArray_Get(minmax_, 2) withDouble:IOSDoubleArray_Get(minmax_, 3)];
}

- (void)updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) ellipsePartWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:[self getEllipseSurfaceStart] withDouble:[self getEllipseSurfaceExtent] withBoolean:[self isSector]];
}

- (void)updateSinglePointWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *)surface {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface *) nil_chk(surface)) startWithGeogebraCommonKernelArithmeticFunctional2Var:self withInt:[self getReusableGeometryIndex]];
  jint nb = 2 + [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getLineThickness];
  [surface setUWithFloat:(jfloat) [self getMinParameterWithInt:0] withFloat:(jfloat) [self getMaxParameterWithInt:0]];
  [surface setNbUWithInt:2 * nb];
  [surface setVWithFloat:(jfloat) [self getMinParameterWithInt:1] withFloat:(jfloat) [self getMaxParameterWithInt:1]];
  [surface setNbVWithInt:nb];
  [surface draw];
  [self setGeometryIndexWithInt:[surface end]];
}

- (jboolean)isSector {
  return YES;
}

- (jdouble)getEllipseSurfaceStart {
  if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_OUTSIDE() || visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_FRUSTUM_INSIDE()) {
    return beta_ - alpha_DrawConic3D_;
  }
  return 0;
}

- (jdouble)getEllipseSurfaceExtent {
  if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_OUTSIDE() || visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_FRUSTUM_INSIDE()) {
    return 2 * alpha_DrawConic3D_;
  }
  return 2 * JavaLangMath_PI;
}

- (void)updateCircleWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_OUTSIDE()) {
    longitude_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) calcArcLongitudesNeededWithDouble:e1_ withDouble:alpha_DrawConic3D_ withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
    [brush arcWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:beta_ - alpha_DrawConic3D_ withDouble:2 * alpha_DrawConic3D_ withInt:longitude_];
  }
  else {
    longitude_ = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) calcArcLongitudesNeededWithDouble:e1_ withDouble:JavaLangMath_PI withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
    [brush circleWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withInt:longitude_];
  }
}

- (void)updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  if (visible_ == GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_OUTSIDE()) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) arcEllipseWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:beta_ - alpha_DrawConic3D_ withDouble:2 * alpha_DrawConic3D_];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) arcEllipseWithGeogebraCommonKernelMatrixCoords:m_ withGeogebraCommonKernelMatrixCoords:ev1_ withGeogebraCommonKernelMatrixCoords:ev2_ withDouble:e1_ withDouble:e2_ withDouble:0 withDouble:2 * JavaLangMath_PI];
  }
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChanged]) {
    switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class])))) getType]) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate]) {
        [self updateForItSelf];
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom] || (visible_ != GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE() && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByTranslate])) [self updateForItSelf];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) [self updateForItSelf];
      break;
    }
  }
}

- (jint)getPickOrder {
  if ([self getPickingType] == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_PATH;
  }
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [super addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists];
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class])))) isEndOfQuadric]) [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [super removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists];
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class])))) isEndOfQuadric]) [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  else [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_SURFACES];
}

- (void)drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
}

- (void)drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
              withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  if (type == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    if ([self getAlpha] > 0) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
    }
  }
}

- (void)drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible] && [self hasTransparentAlpha]) {
    [self setSurfaceHighlightingColor];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
  }
  [self drawTracesTranspSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible] && [self hasTransparentAlpha]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
  }
  [self drawTracesHidingSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (GeogebraCommonKernelMatrixCoords *)evaluatePointWithDouble:(jdouble)u
                                                   withDouble:(jdouble)v {
  GeogebraCommonKernelKernelNDGeoConicND *conic = (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class]);
  jdouble r = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic)) getLineThickness] / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] * 1.5;
  GeogebraCommonKernelMatrixCoords *n = [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v) * r, JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v) * r, JavaLangMath_sinWithDouble_(v) * r } count:3]) autorelease];
  return [n addWithGeogebraCommonKernelMatrixCoords:[conic getMidpoint3D]];
}

- (GeogebraCommonKernelMatrixCoords *)evaluateNormalWithDouble:(jdouble)u
                                                    withDouble:(jdouble)v {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ JavaLangMath_cosWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(u) * JavaLangMath_cosWithDouble_(v), JavaLangMath_sinWithDouble_(v) } count:3]) autorelease];
}

- (jdouble)getMinParameterWithInt:(jint)index {
  switch (index) {
    case 0:
    default:
    return 0;
    case 1:
    return -JavaLangMath_PI / 2;
  }
}

- (jdouble)getMaxParameterWithInt:(jint)index {
  switch (index) {
    case 0:
    default:
    return 2 * JavaLangMath_PI;
    case 1:
    return JavaLangMath_PI / 2;
  }
}

- (void)updatePreview {
}

- (void)updateMousePosWithDouble:(jdouble)x
                      withDouble:(jdouble)y {
}

- (jboolean)isTransparent {
  if ([self getPickingType] == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()) {
    return [self getAlpha] <= GeogebraCommonEuclidianEuclidianController_MAX_TRANSPARENT_ALPHA_VALUE;
  }
  return NO;
}

- (void)checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)center
                                                     withDouble:(jdouble)rMin
                                                     withDouble:(jdouble)rMax {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(self, center, rMin, rMax);
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *)calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
                                                                                                               withDouble:(jdouble)frustumRadius {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords_withDouble_(self, v, frustumRadius);
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
    break;
  }
}

- (void)setBoundsEllipse {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setBoundsEllipse(self);
}

- (void)checkVisibleAndSetBoundingBox {
  {
    jdouble radius;
    jdouble frustumRadius;
    GeogebraCommonKernelMatrixCoords *origin;
    GeogebraCommonKernelMatrixCoords *v;
    jdouble centersDistance;
    jdouble eMin, eMax;
    switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getType]) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getMidpoint3D]);
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setValuesWithGeogebraCommonKernelMatrixCoords:m_ withInt:3];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setValuesWithGeogebraCommonKernelMatrixCoords:m_ withInt:3];
      radius = [conic_ getLineThickness] / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale] * GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_DRAW_POINT_FACTOR;
      [boundsMin_ addInsideWithDouble:-radius];
      [boundsMax_ addInsideWithDouble:radius];
      frustumRadius = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFrustumRadius];
      origin = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCenter];
      v = [((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) subWithGeogebraCommonKernelMatrixCoords:m_];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) calcNorm];
      centersDistance = [v getNorm];
      if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(centersDistance, frustumRadius)) {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_OUTSIDE());
      }
      else {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getMidpoint3D]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev1_(self, [conic_ getEigenvec3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev2_(self, [conic_ getEigenvec3DWithInt:1]);
      e1_ = [conic_ getHalfAxisWithInt:0];
      e2_ = e1_;
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setBoundsEllipse(self);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(self, m_, e1_, e2_);
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getMidpoint3D]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev1_(self, [conic_ getEigenvec3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev2_(self, [conic_ getEigenvec3DWithInt:1]);
      e1_ = [conic_ getHalfAxisWithInt:0];
      e2_ = [conic_ getHalfAxisWithInt:1];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setBoundsEllipse(self);
      if (e1_ > e2_) {
        eMax = e1_;
        eMin = e2_;
      }
      else {
        eMax = e2_;
        eMin = e1_;
      }
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(self, m_, eMin, eMax);
      if (alpha_DrawConic3D_ * eMax >= JavaLangMath_PI * eMin) {
        alpha_DrawConic3D_ = JavaLangMath_PI;
      }
      else {
        alpha_DrawConic3D_ *= eMax / eMin;
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getMidpoint3D]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev1_(self, [conic_ getEigenvec3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev2_(self, [conic_ getEigenvec3DWithInt:1]);
      e1_ = [conic_ getHalfAxisWithInt:0];
      e2_ = [conic_ getHalfAxisWithInt:1];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getMidpoint3D]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev1_(self, [conic_ getEigenvec3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_ev2_(self, [conic_ getEigenvec3DWithInt:1]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_m_(self, [conic_ getOrigin3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_d_(self, [conic_ getDirection3DWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_minmax_(self, [self getLineMinMaxWithInt:0]);
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      default:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
      break;
    }
  }
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withBoolean_(self, hitting, NO);
}

- (jboolean)hitForListWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withBoolean_(self, hitting, YES);
}

- (jboolean)hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:(GeogebraCommonGeogebra3DEuclidian3DHitting *)hitting
                                                  withBoolean:(jboolean)checkRealPointSize {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withBoolean_(self, hitting, checkRealPointSize);
}

- (jboolean)doHighlighting {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getMetasLength] > 0) {
    {
      IOSObjectArray *a__ = [((id<GeogebraCommonKernelGeosFromMeta>) nil_chk(((id<GeogebraCommonKernelGeosFromMeta>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelGeosFromMeta))))) getMetas];
      GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *meta = *b__++;
        if (meta != nil && [meta doHighlighting]) return YES;
      }
    }
  }
  return [super doHighlighting];
}

- (void)dealloc {
  RELEASE_(m_);
  RELEASE_(d_);
  RELEASE_(points_);
  RELEASE_(minmax_);
  RELEASE_(conic_);
  RELEASE_(ev1_);
  RELEASE_(ev2_);
  RELEASE_(visible_);
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  RELEASE_(hittingPathParameter_);
  RELEASE_(project_);
  RELEASE_(globalCoords_);
  RELEASE_(inPlaneCoords_);
  RELEASE_(parameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelKernelNDGeoConicND:", "DrawConic3D", NULL, 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "updateColors", NULL, "V", 0x4, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawInObjFormatWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawInObjFormat", "V", 0x1, NULL, NULL },
    { "drawNotTransparentSurfaceWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawNotTransparentSurface", "V", 0x1, NULL, NULL },
    { "acoshWithDouble:", "acosh", "D", 0xa, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "getLineMinMaxWithInt:", "getLineMinMax", "[D", 0x4, NULL, NULL },
    { "updateLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateLines", "V", 0x4, NULL, NULL },
    { "updateParallelLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateParallelLines", "V", 0x4, NULL, NULL },
    { "updateIntersectingLinesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateIntersectingLines", "V", 0x4, NULL, NULL },
    { "updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateHyperbola", "V", 0x4, NULL, NULL },
    { "updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateParabola", "V", 0x4, NULL, NULL },
    { "updateParabolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateParabola", "V", 0x4, NULL, NULL },
    { "getParabolaMinMax", NULL, "[D", 0x4, NULL, NULL },
    { "updateHyperbolaWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateHyperbola", "V", 0x4, NULL, NULL },
    { "updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateEllipse", "V", 0x4, NULL, NULL },
    { "updateSinglePointWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterSurface:", "updateSinglePoint", "V", 0x4, NULL, NULL },
    { "isSector", NULL, "Z", 0x4, NULL, NULL },
    { "getEllipseSurfaceStart", NULL, "D", 0x4, NULL, NULL },
    { "getEllipseSurfaceExtent", NULL, "D", 0x4, NULL, NULL },
    { "updateCircleWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateCircle", "V", 0x4, NULL, NULL },
    { "updateEllipseWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "updateEllipse", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfaceGeometry", "V", 0x2, NULL, NULL },
    { "drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawGeometryForPicking", "V", 0x4, NULL, NULL },
    { "drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x1, NULL, NULL },
    { "drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiding", "V", 0x1, NULL, NULL },
    { "evaluatePointWithDouble:withDouble:", "evaluatePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "evaluateNormalWithDouble:withDouble:", "evaluateNormal", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinParameterWithInt:", "getMinParameter", "D", 0x1, NULL, NULL },
    { "getMaxParameterWithInt:", "getMaxParameter", "D", 0x1, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "isTransparent", NULL, "Z", 0x1, NULL, NULL },
    { "checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords:withDouble:withDouble:", "checkEllipseVisible", "V", 0x2, NULL, NULL },
    { "calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords:withDouble:", "calcVisibleAngles", "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", 0x2, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
    { "setBoundsEllipse", NULL, "V", 0x12, NULL, NULL },
    { "checkVisibleAndSetBoundingBox", NULL, "V", 0x4, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hit", "Z", 0x1, NULL, NULL },
    { "hitForListWithGeogebraCommonGeogebra3DEuclidian3DHitting:", "hitForList", "Z", 0x1, NULL, NULL },
    { "hitWithGeogebraCommonGeogebra3DEuclidian3DHitting:withBoolean:", "hit", "Z", 0x2, NULL, NULL },
    { "doHighlighting", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "m_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "d_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "points_", NULL, 0x4, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "minmax_", NULL, 0x4, "[D", NULL, NULL,  },
    { "conic_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "ev1_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "ev2_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "e1_", NULL, 0x4, "D", NULL, NULL,  },
    { "e2_", NULL, 0x4, "D", NULL, NULL,  },
    { "alpha_DrawConic3D_", "alpha", 0x2, "D", NULL, NULL,  },
    { "beta_", NULL, 0x2, "D", NULL, NULL,  },
    { "longitude_", NULL, 0x4, "I", NULL, NULL,  },
    { "visible_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "hittingPathParameter_", NULL, 0x2, "Lgeogebra.common.kernel.PathParameter;", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "globalCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "inPlaneCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D = { 2, "DrawConic3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 48, methods, 20, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3d, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DCurves_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, view3d, conic);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelMatrixCoords_class_()]);
  self->longitude_ = 60;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_hittingPathParameter_(self, new_GeogebraCommonKernelPathParameter_init());
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3d, GeogebraCommonKernelKernelNDGeoConicND *conic) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(self, view3d, conic);
  return self;
}

jdouble GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_acoshWithDouble_(jdouble x) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initialize();
  if (x <= 1) return 0;
  return JavaLangMath_logWithDouble_(x + JavaLangMath_sqrtWithDouble_(x * x - 1));
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer) {
  switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class])))) getType]) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getSurfaceIndex]];
    [renderer setLayerWithFloat:0];
    break;
  }
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_checkEllipseVisibleWithGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonKernelMatrixCoords *center, jdouble rMin, jdouble rMax) {
  jdouble frustumRadius = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getFrustumRadius];
  GeogebraCommonKernelMatrixCoords *origin = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCenter];
  GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) subWithGeogebraCommonKernelMatrixCoords:center];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) calcNorm];
  jdouble centersDistance = [v getNorm];
  if (centersDistance > rMax + frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_OUTSIDE());
  }
  else if (centersDistance < frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_INSIDE());
  }
  else if (centersDistance + frustumRadius < rMin) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_FRUSTUM_INSIDE());
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords_withDouble_(self, v, frustumRadius);
  }
  else if (centersDistance + rMax < frustumRadius) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_TOTALLY_INSIDE());
  }
  else {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_visible_(self, GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords_withDouble_(self, v, frustumRadius));
  }
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_calcVisibleAnglesWithGeogebraCommonKernelMatrixCoords_withDouble_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonKernelMatrixCoords *v, jdouble frustumRadius) {
  jdouble x = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:self->ev1_];
  jdouble y = [v dotproductWithGeogebraCommonKernelMatrixCoords:self->ev2_];
  jdouble horizontalDistance = JavaLangMath_sqrtWithDouble_(x * x + y * y);
  if (horizontalDistance > frustumRadius) {
    self->alpha_DrawConic3D_ = JavaLangMath_asinWithDouble_(frustumRadius / horizontalDistance);
    self->beta_ = JavaLangMath_atan2WithDouble_withDouble_(y * self->e1_, x * self->e2_);
    return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_OUTSIDE();
  }
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_get_CENTER_INSIDE();
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setBoundsEllipse(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMin_)) setWithDouble:JavaLangDouble_POSITIVE_INFINITY];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->boundsMax_)) setWithDouble:JavaLangDouble_NEGATIVE_INFINITY];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsToDiagonalWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDouble_withDouble_(self->boundsMin_, self->boundsMax_, self->m_, self->ev1_, self->ev2_, self->e1_, self->e2_);
  jdouble radius = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getLineThickness] * GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_LINE3D_THICKNESS / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
  [self->boundsMin_ addInsideWithDouble:-radius];
  [self->boundsMax_ addInsideWithDouble:radius];
}

jboolean GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withBoolean_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D *self, GeogebraCommonGeogebra3DEuclidian3DHitting *hitting, jboolean checkRealPointSize) {
  if (self->waitForReset_) {
    return NO;
  }
  {
    jboolean ret;
    GeogebraCommonKernelMatrixCoords *p3d;
    switch ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(((GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast([self getGeoElement], [GeogebraCommonKernelKernelNDGeoConicND class])))) getType]) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      return NO;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      if (self->project_ == nil) {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
      }
      if (GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_hitWithGeogebraCommonGeogebra3DEuclidian3DHitting_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_withInt_withGeogebraCommonKernelMatrixCoords_withDoubleArray_withBoolean_(hitting, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getMidpoint3D], self, [self->conic_ getLineThickness], self->project_, self->parameters_, checkRealPointSize)) {
        [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
        return YES;
      }
      return NO;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      default:
      ret = NO;
      if (self->globalCoords_ == nil) {
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_globalCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
        GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_setAndConsume_inPlaneCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
      }
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DHitting *) nil_chk(hitting))->origin_)) projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:self->globalCoords_ withGeogebraCommonKernelMatrixCoords:self->inPlaneCoords_];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getAlphaValue] > GeogebraCommonEuclidianEuclidianController_MIN_VISIBLE_ALPHA_VALUE && [hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:self->globalCoords_] && [self->conic_ isInRegionWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inPlaneCoords_)) getX] withDouble:[self->inPlaneCoords_ getY]]) {
        jdouble parameterOnHitting = [self->inPlaneCoords_ getZ];
        [self setZPickWithDouble:parameterOnHitting withDouble:parameterOnHitting];
        [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
        ret = YES;
      }
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->inPlaneCoords_)) setZWithDouble:1.0];
      [self->conic_ pointChangedWithGeogebraCommonKernelMatrixCoords:self->inPlaneCoords_ withGeogebraCommonKernelPathParameter:self->hittingPathParameter_];
      p3d = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self->conic_ getCoordSys])) getPointWithDouble:[self->inPlaneCoords_ getX] withDouble:[self->inPlaneCoords_ getY]];
      if ([hitting isInsideClippingWithGeogebraCommonKernelMatrixCoords:p3d]) {
        if (self->project_ == nil) {
          GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
        }
        [((GeogebraCommonKernelMatrixCoords *) nil_chk(p3d)) projectLineWithGeogebraCommonKernelMatrixCoords:hitting->origin_ withGeogebraCommonKernelMatrixCoords:hitting->direction_ withGeogebraCommonKernelMatrixCoords:self->project_ withDoubleArray:self->parameters_];
        jdouble d = [p3d distanceWithGeogebraCommonKernelMatrixCoords:self->project_];
        jdouble scale_ = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
        if (d * scale_ <= [self->conic_ getLineThickness] + [hitting getThreshold]) {
          jdouble z = -IOSDoubleArray_Get(nil_chk(self->parameters_), 0);
          jdouble dz = [self->conic_ getLineThickness] / scale_;
          [self setZPickWithDouble:z + dz withDouble:z - dz];
          [self setPickingTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
          return YES;
        }
      }
      return ret;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum)

GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[5];

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values() {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_ count:5 type:GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values();
}

+ (GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_valueOfWithNSString_(name);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initialize();
  for (int i = 0; i < 5; i++) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *e = GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum class]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_OUTSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(@"TOTALLY_OUTSIDE", 0);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_FRUSTUM_INSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(@"FRUSTUM_INSIDE", 1);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_INSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(@"TOTALLY_INSIDE", 2);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_OUTSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(@"CENTER_OUTSIDE", 3);
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_INSIDE = new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(@"CENTER_INSIDE", 4);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "TOTALLY_OUTSIDE", "TOTALLY_OUTSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_OUTSIDE, NULL,  },
    { "FRUSTUM_INSIDE", "FRUSTUM_INSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_FRUSTUM_INSIDE, NULL,  },
    { "TOTALLY_INSIDE", "TOTALLY_INSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_TOTALLY_INSIDE, NULL,  },
    { "CENTER_OUTSIDE", "CENTER_OUTSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_OUTSIDE, NULL,  },
    { "CENTER_INSIDE", "CENTER_INSIDE", 0x4019, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;", &GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_CENTER_INSIDE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawConic3D$Visible;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum = { 2, "Visible", "geogebra.common.geogebra3D.euclidian3D.draw", "DrawConic3D", 0x401a, 0, NULL, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D$Visible;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_VisibleEnum)
