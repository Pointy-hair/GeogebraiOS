//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/parser/Parser.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/AssignmentType.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/Evaluatable.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/arithmetic3D/MyVec3DNode.h"
#include "geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/parser/ParserConstants.h"
#include "geogebra/common/kernel/parser/ParserTokenManager.h"
#include "geogebra/common/kernel/parser/SimpleCharStream.h"
#include "geogebra/common/kernel/parser/Token.h"
#include "geogebra/common/kernel/parser/cashandlers/CommandDispatcherGiac.h"
#include "geogebra/common/kernel/parser/cashandlers/ParserFunctions.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/BracketsError.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/main/MyParseError.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/io/InputStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Vector.h"

@class GeogebraCommonKernelParserParser_LookaheadSuccess;

@interface GeogebraCommonKernelParserParser () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonMainApp *app_;
  GeogebraCommonMainLocalization *loc_;
  jboolean GeoGebraCASParsing_;
  jboolean ExternalCASParsing_;
  jboolean GiacParsing_;
  JavaUtilArrayList *undecided_;
  jint jj_ntk__;
  GeogebraCommonKernelParserToken *jj_scanpos_, *jj_lastpos_;
  jint jj_la_;
  jboolean jj_lookingAhead_;
  jboolean jj_semLA_;
  jint jj_gen_;
  IOSIntArray *jj_la1_;
  IOSObjectArray *jj_2_rtns_;
  jboolean jj_rescan_;
  jint jj_gc_;
  GeogebraCommonKernelParserParser_LookaheadSuccess *jj_ls_;
  id<JavaUtilList> jj_expentries_;
  IOSIntArray *jj_expentry_;
  jint jj_kind_;
  IOSIntArray *jj_lasttokens_;
  jint jj_endpos_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)makePowerWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v
                                                           withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)e;

- (void)processUndecided;

- (GeogebraCommonKernelArithmeticExpressionNode *)buildOpNodeWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                                          withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list;

- (GeogebraCommonKernelArithmeticValidExpression *)buildGiacExpression;

- (jboolean)jj_2_1WithInt:(jint)xla;

- (jboolean)jj_2_2WithInt:(jint)xla;

- (jboolean)jj_2_3WithInt:(jint)xla;

- (jboolean)jj_2_4WithInt:(jint)xla;

- (jboolean)jj_2_5WithInt:(jint)xla;

- (jboolean)jj_2_6WithInt:(jint)xla;

- (jboolean)jj_2_7WithInt:(jint)xla;

- (jboolean)jj_2_8WithInt:(jint)xla;

- (jboolean)jj_2_9WithInt:(jint)xla;

- (jboolean)jj_2_10WithInt:(jint)xla;

- (jboolean)jj_2_11WithInt:(jint)xla;

- (jboolean)jj_2_12WithInt:(jint)xla;

- (jboolean)jj_2_13WithInt:(jint)xla;

- (jboolean)jj_2_14WithInt:(jint)xla;

- (jboolean)jj_2_15WithInt:(jint)xla;

- (jboolean)jj_2_16WithInt:(jint)xla;

- (jboolean)jj_2_17WithInt:(jint)xla;

- (jboolean)jj_2_18WithInt:(jint)xla;

- (jboolean)jj_2_19WithInt:(jint)xla;

- (jboolean)jj_2_20WithInt:(jint)xla;

- (jboolean)jj_2_21WithInt:(jint)xla;

- (jboolean)jj_2_22WithInt:(jint)xla;

- (jboolean)jj_2_23WithInt:(jint)xla;

- (jboolean)jj_2_24WithInt:(jint)xla;

- (jboolean)jj_2_25WithInt:(jint)xla;

- (jboolean)jj_2_26WithInt:(jint)xla;

- (jboolean)jj_2_27WithInt:(jint)xla;

- (jboolean)jj_2_28WithInt:(jint)xla;

- (jboolean)jj_2_29WithInt:(jint)xla;

- (jboolean)jj_2_30WithInt:(jint)xla;

- (jboolean)jj_2_31WithInt:(jint)xla;

- (jboolean)jj_3R_85;

- (jboolean)jj_3R_84;

- (jboolean)jj_3R_83;

- (jboolean)jj_3R_79;

- (jboolean)jj_3R_92;

- (jboolean)jj_3R_54;

- (jboolean)jj_3R_82;

- (jboolean)jj_3R_78;

- (jboolean)jj_3_17;

- (jboolean)jj_3R_74;

- (jboolean)jj_3R_70;

- (jboolean)jj_3R_53;

- (jboolean)jj_3R_33;

- (jboolean)jj_3R_126;

- (jboolean)jj_3R_76;

- (jboolean)jj_3R_69;

- (jboolean)jj_3R_48;

- (jboolean)jj_3R_68;

- (jboolean)jj_3R_45;

- (jboolean)jj_3R_47;

- (jboolean)jj_3R_24;

- (jboolean)jj_3R_122;

- (jboolean)jj_3R_121;

- (jboolean)jj_3R_28;

- (jboolean)jj_3R_50;

- (jboolean)jj_3R_75;

- (jboolean)jj_3R_49;

- (jboolean)jj_3R_67;

- (jboolean)jj_3R_120;

- (jboolean)jj_3R_119;

- (jboolean)jj_3R_118;

- (jboolean)jj_3R_27;

- (jboolean)jj_3R_25;

- (jboolean)jj_3R_64;

- (jboolean)jj_3R_117;

- (jboolean)jj_3R_129;

- (jboolean)jj_3R_36;

- (jboolean)jj_3R_116;

- (jboolean)jj_3R_26;

- (jboolean)jj_3R_115;

- (jboolean)jj_3R_128;

- (jboolean)jj_3R_30;

- (jboolean)jj_3R_20;

- (jboolean)jj_3R_127;

- (jboolean)jj_3R_123;

- (jboolean)jj_3R_125;

- (jboolean)jj_3R_46;

- (jboolean)jj_3R_71;

- (jboolean)jj_3R_40;

- (jboolean)jj_3R_23;

- (jboolean)jj_3R_124;

- (jboolean)jj_3R_112;

- (jboolean)jj_3R_114;

- (jboolean)jj_3R_111;

- (jboolean)jj_3R_39;

- (jboolean)jj_3R_110;

- (jboolean)jj_3R_103;

- (jboolean)jj_3R_109;

- (jboolean)jj_3R_19;

- (jboolean)jj_3_31;

- (jboolean)jj_3R_66;

- (jboolean)jj_3R_38;

- (jboolean)jj_3R_51;

- (jboolean)jj_3R_113;

- (jboolean)jj_3R_52;

- (jboolean)jj_3_30;

- (jboolean)jj_3R_65;

- (jboolean)jj_3R_37;

- (jboolean)jj_3R_44;

- (jboolean)jj_3R_29;

- (jboolean)jj_3R_104;

- (jboolean)jj_3R_101;

- (jboolean)jj_3R_42;

- (jboolean)jj_3R_62;

- (jboolean)jj_3_15;

- (jboolean)jj_3_29;

- (jboolean)jj_3_14;

- (jboolean)jj_3R_61;

- (jboolean)jj_3_13;

- (jboolean)jj_3_12;

- (jboolean)jj_3R_60;

- (jboolean)jj_3R_34;

- (jboolean)jj_3R_59;

- (jboolean)jj_3_11;

- (jboolean)jj_3R_43;

- (jboolean)jj_3R_73;

- (jboolean)jj_3R_32;

- (jboolean)jj_3R_18;

- (jboolean)jj_3R_31;

- (jboolean)jj_3_16;

- (jboolean)jj_3R_97;

- (jboolean)jj_3R_63;

- (jboolean)jj_3_10;

- (jboolean)jj_3R_35;

- (jboolean)jj_3_28;

- (jboolean)jj_3_8;

- (jboolean)jj_3_9;

- (jboolean)jj_3_7;

- (jboolean)jj_3_6;

- (jboolean)jj_3R_81;

- (jboolean)jj_3R_77;

- (jboolean)jj_3R_108;

- (jboolean)jj_3_27;

- (jboolean)jj_3_26;

- (jboolean)jj_3R_95;

- (jboolean)jj_3_25;

- (jboolean)jj_3R_80;

- (jboolean)jj_3_24;

- (jboolean)jj_3_23;

- (jboolean)jj_3R_98;

- (jboolean)jj_3_22;

- (jboolean)jj_3R_94;

- (jboolean)jj_3_21;

- (jboolean)jj_3_5;

- (jboolean)jj_3_20;

- (jboolean)jj_3R_22;

- (jboolean)jj_3R_72;

- (jboolean)jj_3_4;

- (jboolean)jj_3_19;

- (jboolean)jj_3_3;

- (jboolean)jj_3_18;

- (jboolean)jj_3R_107;

- (jboolean)jj_3R_58;

- (jboolean)jj_3_1;

- (jboolean)jj_3_2;

- (jboolean)jj_3R_106;

- (jboolean)jj_3R_57;

- (jboolean)jj_3R_102;

- (jboolean)jj_3R_105;

- (jboolean)jj_3R_91;

- (jboolean)jj_3R_41;

- (jboolean)jj_3R_90;

- (jboolean)jj_3R_56;

- (jboolean)jj_3R_89;

- (jboolean)jj_3R_100;

- (jboolean)jj_3R_21;

- (jboolean)jj_3R_88;

- (jboolean)jj_3R_96;

- (jboolean)jj_3R_99;

- (jboolean)jj_3R_87;

- (jboolean)jj_3R_93;

- (jboolean)jj_3R_86;

- (jboolean)jj_3R_55;

+ (void)jj_la1_init_0;

+ (void)jj_la1_init_1;

+ (void)jj_la1_init_2;

- (GeogebraCommonKernelParserToken *)jj_consume_tokenWithInt:(jint)kind;

- (jboolean)jj_scan_tokenWithInt:(jint)kind;

- (jint)jj_ntk;

- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos;

- (void)jj_rescan_token;

- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, loc_, GeogebraCommonMainLocalization *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, undecided_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_scanpos_, GeogebraCommonKernelParserToken *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_lastpos_, GeogebraCommonKernelParserToken *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_la1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_2_rtns_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_ls_, GeogebraCommonKernelParserParser_LookaheadSuccess *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_expentries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_expentry_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_lasttokens_, IOSIntArray *)

static IOSIntArray *GeogebraCommonKernelParserParser_jj_la1_0_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelParserParser, jj_la1_0_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_la1_0_, IOSIntArray *)

static IOSIntArray *GeogebraCommonKernelParserParser_jj_la1_1_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelParserParser, jj_la1_1_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_la1_1_, IOSIntArray *)

static IOSIntArray *GeogebraCommonKernelParserParser_jj_la1_2_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelParserParser, jj_la1_2_, IOSIntArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelParserParser, jj_la1_2_, IOSIntArray *)

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_makePowerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelParserParser *self, id<GeogebraCommonKernelArithmeticExpressionValue> v, id<GeogebraCommonKernelArithmeticExpressionValue> e);

__attribute__((unused)) static void GeogebraCommonKernelParserParser_processUndecided(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_buildOpNodeWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelParserParser *self, GeogebraCommonPluginOperationEnum *op, GeogebraCommonKernelArithmeticMyList *list);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildValidExpression(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildCASExpression(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildGiacExpression(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_label(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_casVar(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_command(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static JavaUtilVector *GeogebraCommonKernelParserParser_labellist(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticEquation *GeogebraCommonKernelParserParser_equation(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expression(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cmdexpression(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelParserParser_function(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelParserParser_functionNVar(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_functionExpressionnode(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelParserParser_casFunction(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expressionnode(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expressionOrEquation(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ANDterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ORterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_COMPAREterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_plusminusnode(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_setdifferencenode(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_listopnode(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_multterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_divterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_powerdivterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enunary(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enpower(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enfactorial(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ensqrt(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_NOTterm(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enelement(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_list(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_numVecVariable(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticCommand *GeogebraCommonKernelParserParser_spreadsheetRange(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_myDouble(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_numberFunction(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticVectorValue> GeogebraCommonKernelParserParser_cartesianvector(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmetic3DVector3DValue> GeogebraCommonKernelParserParser_cartesianvector3D(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmeticVectorValue> GeogebraCommonKernelParserParser_polarvector(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static id<GeogebraCommonKernelArithmetic3DVector3DValue> GeogebraCommonKernelParserParser_sphericalvector(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cartesianvector_special(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cartesianvector3D_special(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_polarvector_special(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_1WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_2WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_3WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_4WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_5WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_6WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_7WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_8WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_9WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_10WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_11WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_12WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_13WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_14WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_15WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_16WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_17WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_18WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_19WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_20WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_21WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_22WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_23WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_24WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_25WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_26WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_27WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_28WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_29WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_30WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_2_31WithInt_(GeogebraCommonKernelParserParser *self, jint xla);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_85(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_84(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_83(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_79(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_92(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_54(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_82(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_78(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_17(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_74(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_70(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_53(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_33(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_126(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_76(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_69(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_48(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_68(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_45(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_47(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_24(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_122(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_121(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_28(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_50(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_75(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_49(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_67(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_120(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_119(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_118(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_27(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_25(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_64(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_117(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_129(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_36(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_116(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_26(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_115(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_128(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_30(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_20(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_127(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_123(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_125(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_46(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_71(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_40(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_23(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_124(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_112(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_114(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_111(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_39(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_110(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_103(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_109(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_19(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_31(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_66(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_38(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_51(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_113(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_52(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_30(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_65(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_37(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_44(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_29(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_104(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_101(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_42(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_62(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_15(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_29(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_14(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_61(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_13(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_12(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_60(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_34(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_59(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_11(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_43(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_73(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_32(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_18(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_31(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_16(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_97(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_63(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_10(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_35(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_28(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_8(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_9(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_7(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_6(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_81(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_77(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_108(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_27(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_26(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_95(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_25(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_80(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_24(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_23(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_98(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_22(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_94(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_21(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_5(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_20(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_22(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_72(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_4(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_19(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_3(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_18(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_107(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_58(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_1(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3_2(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_106(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_57(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_102(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_105(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_91(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_41(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_90(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_56(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_89(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_100(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_21(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_88(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_96(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_99(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_87(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_93(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_86(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_3R_55(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_la1_init_0();

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_la1_init_1();

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_la1_init_2();

__attribute__((unused)) static GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(GeogebraCommonKernelParserParser *self, jint kind);

__attribute__((unused)) static jboolean GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(GeogebraCommonKernelParserParser *self, jint kind);

__attribute__((unused)) static GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_getTokenWithInt_(GeogebraCommonKernelParserParser *self, jint index);

__attribute__((unused)) static jint GeogebraCommonKernelParserParser_jj_ntk(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_add_error_tokenWithInt_withInt_(GeogebraCommonKernelParserParser *self, jint kind, jint pos);

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_rescan_token(GeogebraCommonKernelParserParser *self);

__attribute__((unused)) static void GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(GeogebraCommonKernelParserParser *self, jint index, jint xla);

@interface GeogebraCommonKernelParserParser_LookaheadSuccess : JavaLangError

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelParserParser_LookaheadSuccess)

__attribute__((unused)) static void GeogebraCommonKernelParserParser_LookaheadSuccess_init(GeogebraCommonKernelParserParser_LookaheadSuccess *self);

__attribute__((unused)) static GeogebraCommonKernelParserParser_LookaheadSuccess *new_GeogebraCommonKernelParserParser_LookaheadSuccess_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelParserParser_LookaheadSuccess)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelParserParser)

@implementation GeogebraCommonKernelParserParser

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
              withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)myReInitWithNSString:(NSString *)parseString {
  if (![((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) isFileLoading] && GeogebraCommonUtilStringUtil_checkBracketsBackwardWithNSString_(GeogebraCommonUtilStringUtil_ignoreIndicesWithNSString_(parseString)) >= 0) {
    @throw [new_GeogebraCommonMainBracketsError_initWithGeogebraCommonMainLocalization_withNSString_(loc_, parseString) autorelease];
  }
  [self ReInitWithJavaIoReader:[new_JavaIoStringReader_initWithNSString_(GeogebraCommonUtilStringUtil_fixVerticalBarsWithNSString_(parseString)) autorelease]];
  GeoGebraCASParsing_ = NO;
  ExternalCASParsing_ = NO;
  GiacParsing_ = NO;
  [((JavaUtilArrayList *) nil_chk(undecided_)) clear];
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraExpressionWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeogebraCommonKernelArithmeticValidExpression *ret = GeogebraCommonKernelParserParser_buildValidExpression(self);
  GeogebraCommonKernelParserParser_processUndecided(self);
  return ret;
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGeoGebraCASWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeoGebraCASParsing_ = YES;
  GeogebraCommonKernelArithmeticValidExpression *ret = GeogebraCommonKernelParserParser_buildCASExpression(self);
  return ret;
}

- (GeogebraCommonKernelArithmeticValidExpression *)parseGiacWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  ExternalCASParsing_ = YES;
  GiacParsing_ = YES;
  return GeogebraCommonKernelParserParser_buildGiacExpression(self);
}

- (GeogebraCommonKernelArithmeticFunction *)parseFunctionWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeogebraCommonKernelArithmeticFunction *ret = GeogebraCommonKernelParserParser_function(self);
  GeogebraCommonKernelParserParser_processUndecided(self);
  return ret;
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)parseFunctionNVarWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeogebraCommonKernelArithmeticFunctionNVar *ret = GeogebraCommonKernelParserParser_functionNVar(self);
  GeogebraCommonKernelParserParser_processUndecided(self);
  return ret;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)parseCmdExpressionWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeogebraCommonKernelArithmeticExpressionNode *ret = GeogebraCommonKernelParserParser_cmdexpression(self);
  GeogebraCommonKernelParserParser_processUndecided(self);
  return ret;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)parseExpressionWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  GeogebraCommonKernelArithmeticExpressionNode *ret = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_processUndecided(self);
  return ret;
}

- (NSString *)parseLabelWithNSString:(NSString *)parseString {
  [self myReInitWithNSString:parseString];
  return ((GeogebraCommonKernelParserToken *) nil_chk(GeogebraCommonKernelParserParser_label(self)))->image_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)makePowerWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v
                                                           withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)e {
  return GeogebraCommonKernelParserParser_makePowerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, v, e);
}

- (void)processUndecided {
  GeogebraCommonKernelParserParser_processUndecided(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)buildOpNodeWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                                          withGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)list {
  return GeogebraCommonKernelParserParser_buildOpNodeWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticMyList_(self, op, list);
}

- (GeogebraCommonKernelArithmeticValidExpression *)buildValidExpression {
  return GeogebraCommonKernelParserParser_buildValidExpression(self);
}

- (GeogebraCommonKernelArithmeticValidExpression *)buildCASExpression {
  return GeogebraCommonKernelParserParser_buildCASExpression(self);
}

- (GeogebraCommonKernelArithmeticValidExpression *)buildMathPiperExpression {
  GeogebraCommonKernelArithmeticValidExpression *ve;
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  GeogebraCommonKernelParserToken *l = [new_GeogebraCommonKernelParserToken_init() autorelease];
  JavaUtilVector *labels = [new_JavaUtilVector_init() autorelease];
  ve = GeogebraCommonKernelParserParser_buildCASExpression(self);
  switch ((jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
    break;
    case 0:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 0);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(jj_la1_), 7) = jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return ve;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

- (GeogebraCommonKernelArithmeticValidExpression *)buildGiacExpression {
  return GeogebraCommonKernelParserParser_buildGiacExpression(self);
}

- (GeogebraCommonKernelArithmeticValidExpression *)buildMaximaExpression {
  GeogebraCommonKernelArithmeticValidExpression *ve;
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  GeogebraCommonKernelParserToken *start, *sign = nil, *end;
  ve = GeogebraCommonKernelParserParser_buildCASExpression(self);
  switch ((jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
    break;
    case 0:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 0);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(jj_la1_), 9) = jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return ve;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

- (GeogebraCommonKernelParserToken *)label {
  return GeogebraCommonKernelParserParser_label(self);
}

- (GeogebraCommonKernelParserToken *)casVar {
  return GeogebraCommonKernelParserParser_casVar(self);
}

- (GeogebraCommonKernelArithmeticValidExpression *)command {
  return GeogebraCommonKernelParserParser_command(self);
}

- (JavaUtilVector *)labellist {
  return GeogebraCommonKernelParserParser_labellist(self);
}

- (GeogebraCommonKernelArithmeticEquation *)equation {
  return GeogebraCommonKernelParserParser_equation(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)expression {
  return GeogebraCommonKernelParserParser_expression(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)cmdexpression {
  return GeogebraCommonKernelParserParser_cmdexpression(self);
}

- (GeogebraCommonKernelArithmeticFunction *)function {
  return GeogebraCommonKernelParserParser_function(self);
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)functionNVar {
  return GeogebraCommonKernelParserParser_functionNVar(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)functionExpressionnode {
  return GeogebraCommonKernelParserParser_functionExpressionnode(self);
}

- (GeogebraCommonKernelArithmeticFunctionNVar *)casFunction {
  return GeogebraCommonKernelParserParser_casFunction(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)expressionnode {
  return GeogebraCommonKernelParserParser_expressionnode(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)expressionOrEquation {
  return GeogebraCommonKernelParserParser_expressionOrEquation(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)ANDterm {
  return GeogebraCommonKernelParserParser_ANDterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)ORterm {
  return GeogebraCommonKernelParserParser_ORterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)COMPAREterm {
  return GeogebraCommonKernelParserParser_COMPAREterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)plusminusnode {
  return GeogebraCommonKernelParserParser_plusminusnode(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)setdifferencenode {
  return GeogebraCommonKernelParserParser_setdifferencenode(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)listopnode {
  return GeogebraCommonKernelParserParser_listopnode(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)multterm {
  return GeogebraCommonKernelParserParser_multterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)divterm {
  return GeogebraCommonKernelParserParser_divterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)powerdivterm {
  return GeogebraCommonKernelParserParser_powerdivterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)enunary {
  return GeogebraCommonKernelParserParser_enunary(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)enpower {
  return GeogebraCommonKernelParserParser_enpower(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)enfactorial {
  return GeogebraCommonKernelParserParser_enfactorial(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)ensqrt {
  return GeogebraCommonKernelParserParser_ensqrt(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)NOTterm {
  return GeogebraCommonKernelParserParser_NOTterm(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)enelement {
  return GeogebraCommonKernelParserParser_enelement(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)list {
  return GeogebraCommonKernelParserParser_list(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)numVecVariable {
  return GeogebraCommonKernelParserParser_numVecVariable(self);
}

- (GeogebraCommonKernelArithmeticCommand *)spreadsheetRange {
  return GeogebraCommonKernelParserParser_spreadsheetRange(self);
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)myDouble {
  return GeogebraCommonKernelParserParser_myDouble(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)numberFunction {
  return GeogebraCommonKernelParserParser_numberFunction(self);
}

- (id<GeogebraCommonKernelArithmeticVectorValue>)cartesianvector {
  return GeogebraCommonKernelParserParser_cartesianvector(self);
}

- (id<GeogebraCommonKernelArithmetic3DVector3DValue>)cartesianvector3D {
  return GeogebraCommonKernelParserParser_cartesianvector3D(self);
}

- (id<GeogebraCommonKernelArithmeticVectorValue>)polarvector {
  return GeogebraCommonKernelParserParser_polarvector(self);
}

- (id<GeogebraCommonKernelArithmetic3DVector3DValue>)sphericalvector {
  return GeogebraCommonKernelParserParser_sphericalvector(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)cartesianvector_special {
  return GeogebraCommonKernelParserParser_cartesianvector_special(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)cartesianvector3D_special {
  return GeogebraCommonKernelParserParser_cartesianvector3D_special(self);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)polarvector_special {
  return GeogebraCommonKernelParserParser_polarvector_special(self);
}

- (jboolean)jj_2_1WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_1WithInt_(self, xla);
}

- (jboolean)jj_2_2WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_2WithInt_(self, xla);
}

- (jboolean)jj_2_3WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_3WithInt_(self, xla);
}

- (jboolean)jj_2_4WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_4WithInt_(self, xla);
}

- (jboolean)jj_2_5WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_5WithInt_(self, xla);
}

- (jboolean)jj_2_6WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_6WithInt_(self, xla);
}

- (jboolean)jj_2_7WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_7WithInt_(self, xla);
}

- (jboolean)jj_2_8WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_8WithInt_(self, xla);
}

- (jboolean)jj_2_9WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_9WithInt_(self, xla);
}

- (jboolean)jj_2_10WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_10WithInt_(self, xla);
}

- (jboolean)jj_2_11WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_11WithInt_(self, xla);
}

- (jboolean)jj_2_12WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_12WithInt_(self, xla);
}

- (jboolean)jj_2_13WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_13WithInt_(self, xla);
}

- (jboolean)jj_2_14WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_14WithInt_(self, xla);
}

- (jboolean)jj_2_15WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_15WithInt_(self, xla);
}

- (jboolean)jj_2_16WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_16WithInt_(self, xla);
}

- (jboolean)jj_2_17WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_17WithInt_(self, xla);
}

- (jboolean)jj_2_18WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_18WithInt_(self, xla);
}

- (jboolean)jj_2_19WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_19WithInt_(self, xla);
}

- (jboolean)jj_2_20WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_20WithInt_(self, xla);
}

- (jboolean)jj_2_21WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_21WithInt_(self, xla);
}

- (jboolean)jj_2_22WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_22WithInt_(self, xla);
}

- (jboolean)jj_2_23WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_23WithInt_(self, xla);
}

- (jboolean)jj_2_24WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_24WithInt_(self, xla);
}

- (jboolean)jj_2_25WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_25WithInt_(self, xla);
}

- (jboolean)jj_2_26WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_26WithInt_(self, xla);
}

- (jboolean)jj_2_27WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_27WithInt_(self, xla);
}

- (jboolean)jj_2_28WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_28WithInt_(self, xla);
}

- (jboolean)jj_2_29WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_29WithInt_(self, xla);
}

- (jboolean)jj_2_30WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_30WithInt_(self, xla);
}

- (jboolean)jj_2_31WithInt:(jint)xla {
  return GeogebraCommonKernelParserParser_jj_2_31WithInt_(self, xla);
}

- (jboolean)jj_3R_85 {
  return GeogebraCommonKernelParserParser_jj_3R_85(self);
}

- (jboolean)jj_3R_84 {
  return GeogebraCommonKernelParserParser_jj_3R_84(self);
}

- (jboolean)jj_3R_83 {
  return GeogebraCommonKernelParserParser_jj_3R_83(self);
}

- (jboolean)jj_3R_79 {
  return GeogebraCommonKernelParserParser_jj_3R_79(self);
}

- (jboolean)jj_3R_92 {
  return GeogebraCommonKernelParserParser_jj_3R_92(self);
}

- (jboolean)jj_3R_54 {
  return GeogebraCommonKernelParserParser_jj_3R_54(self);
}

- (jboolean)jj_3R_82 {
  return GeogebraCommonKernelParserParser_jj_3R_82(self);
}

- (jboolean)jj_3R_78 {
  return GeogebraCommonKernelParserParser_jj_3R_78(self);
}

- (jboolean)jj_3_17 {
  return GeogebraCommonKernelParserParser_jj_3_17(self);
}

- (jboolean)jj_3R_74 {
  return GeogebraCommonKernelParserParser_jj_3R_74(self);
}

- (jboolean)jj_3R_70 {
  return GeogebraCommonKernelParserParser_jj_3R_70(self);
}

- (jboolean)jj_3R_53 {
  return GeogebraCommonKernelParserParser_jj_3R_53(self);
}

- (jboolean)jj_3R_33 {
  return GeogebraCommonKernelParserParser_jj_3R_33(self);
}

- (jboolean)jj_3R_126 {
  return GeogebraCommonKernelParserParser_jj_3R_126(self);
}

- (jboolean)jj_3R_76 {
  return GeogebraCommonKernelParserParser_jj_3R_76(self);
}

- (jboolean)jj_3R_69 {
  return GeogebraCommonKernelParserParser_jj_3R_69(self);
}

- (jboolean)jj_3R_48 {
  return GeogebraCommonKernelParserParser_jj_3R_48(self);
}

- (jboolean)jj_3R_68 {
  return GeogebraCommonKernelParserParser_jj_3R_68(self);
}

- (jboolean)jj_3R_45 {
  return GeogebraCommonKernelParserParser_jj_3R_45(self);
}

- (jboolean)jj_3R_47 {
  return GeogebraCommonKernelParserParser_jj_3R_47(self);
}

- (jboolean)jj_3R_24 {
  return GeogebraCommonKernelParserParser_jj_3R_24(self);
}

- (jboolean)jj_3R_122 {
  return GeogebraCommonKernelParserParser_jj_3R_122(self);
}

- (jboolean)jj_3R_121 {
  return GeogebraCommonKernelParserParser_jj_3R_121(self);
}

- (jboolean)jj_3R_28 {
  return GeogebraCommonKernelParserParser_jj_3R_28(self);
}

- (jboolean)jj_3R_50 {
  return GeogebraCommonKernelParserParser_jj_3R_50(self);
}

- (jboolean)jj_3R_75 {
  return GeogebraCommonKernelParserParser_jj_3R_75(self);
}

- (jboolean)jj_3R_49 {
  return GeogebraCommonKernelParserParser_jj_3R_49(self);
}

- (jboolean)jj_3R_67 {
  return GeogebraCommonKernelParserParser_jj_3R_67(self);
}

- (jboolean)jj_3R_120 {
  return GeogebraCommonKernelParserParser_jj_3R_120(self);
}

- (jboolean)jj_3R_119 {
  return GeogebraCommonKernelParserParser_jj_3R_119(self);
}

- (jboolean)jj_3R_118 {
  return GeogebraCommonKernelParserParser_jj_3R_118(self);
}

- (jboolean)jj_3R_27 {
  return GeogebraCommonKernelParserParser_jj_3R_27(self);
}

- (jboolean)jj_3R_25 {
  return GeogebraCommonKernelParserParser_jj_3R_25(self);
}

- (jboolean)jj_3R_64 {
  return GeogebraCommonKernelParserParser_jj_3R_64(self);
}

- (jboolean)jj_3R_117 {
  return GeogebraCommonKernelParserParser_jj_3R_117(self);
}

- (jboolean)jj_3R_129 {
  return GeogebraCommonKernelParserParser_jj_3R_129(self);
}

- (jboolean)jj_3R_36 {
  return GeogebraCommonKernelParserParser_jj_3R_36(self);
}

- (jboolean)jj_3R_116 {
  return GeogebraCommonKernelParserParser_jj_3R_116(self);
}

- (jboolean)jj_3R_26 {
  return GeogebraCommonKernelParserParser_jj_3R_26(self);
}

- (jboolean)jj_3R_115 {
  return GeogebraCommonKernelParserParser_jj_3R_115(self);
}

- (jboolean)jj_3R_128 {
  return GeogebraCommonKernelParserParser_jj_3R_128(self);
}

- (jboolean)jj_3R_30 {
  return GeogebraCommonKernelParserParser_jj_3R_30(self);
}

- (jboolean)jj_3R_20 {
  return GeogebraCommonKernelParserParser_jj_3R_20(self);
}

- (jboolean)jj_3R_127 {
  return GeogebraCommonKernelParserParser_jj_3R_127(self);
}

- (jboolean)jj_3R_123 {
  return GeogebraCommonKernelParserParser_jj_3R_123(self);
}

- (jboolean)jj_3R_125 {
  return GeogebraCommonKernelParserParser_jj_3R_125(self);
}

- (jboolean)jj_3R_46 {
  return GeogebraCommonKernelParserParser_jj_3R_46(self);
}

- (jboolean)jj_3R_71 {
  return GeogebraCommonKernelParserParser_jj_3R_71(self);
}

- (jboolean)jj_3R_40 {
  return GeogebraCommonKernelParserParser_jj_3R_40(self);
}

- (jboolean)jj_3R_23 {
  return GeogebraCommonKernelParserParser_jj_3R_23(self);
}

- (jboolean)jj_3R_124 {
  return GeogebraCommonKernelParserParser_jj_3R_124(self);
}

- (jboolean)jj_3R_112 {
  return GeogebraCommonKernelParserParser_jj_3R_112(self);
}

- (jboolean)jj_3R_114 {
  return GeogebraCommonKernelParserParser_jj_3R_114(self);
}

- (jboolean)jj_3R_111 {
  return GeogebraCommonKernelParserParser_jj_3R_111(self);
}

- (jboolean)jj_3R_39 {
  return GeogebraCommonKernelParserParser_jj_3R_39(self);
}

- (jboolean)jj_3R_110 {
  return GeogebraCommonKernelParserParser_jj_3R_110(self);
}

- (jboolean)jj_3R_103 {
  return GeogebraCommonKernelParserParser_jj_3R_103(self);
}

- (jboolean)jj_3R_109 {
  return GeogebraCommonKernelParserParser_jj_3R_109(self);
}

- (jboolean)jj_3R_19 {
  return GeogebraCommonKernelParserParser_jj_3R_19(self);
}

- (jboolean)jj_3_31 {
  return GeogebraCommonKernelParserParser_jj_3_31(self);
}

- (jboolean)jj_3R_66 {
  return GeogebraCommonKernelParserParser_jj_3R_66(self);
}

- (jboolean)jj_3R_38 {
  return GeogebraCommonKernelParserParser_jj_3R_38(self);
}

- (jboolean)jj_3R_51 {
  return GeogebraCommonKernelParserParser_jj_3R_51(self);
}

- (jboolean)jj_3R_113 {
  return GeogebraCommonKernelParserParser_jj_3R_113(self);
}

- (jboolean)jj_3R_52 {
  return GeogebraCommonKernelParserParser_jj_3R_52(self);
}

- (jboolean)jj_3_30 {
  return GeogebraCommonKernelParserParser_jj_3_30(self);
}

- (jboolean)jj_3R_65 {
  return GeogebraCommonKernelParserParser_jj_3R_65(self);
}

- (jboolean)jj_3R_37 {
  return GeogebraCommonKernelParserParser_jj_3R_37(self);
}

- (jboolean)jj_3R_44 {
  return GeogebraCommonKernelParserParser_jj_3R_44(self);
}

- (jboolean)jj_3R_29 {
  return GeogebraCommonKernelParserParser_jj_3R_29(self);
}

- (jboolean)jj_3R_104 {
  return GeogebraCommonKernelParserParser_jj_3R_104(self);
}

- (jboolean)jj_3R_101 {
  return GeogebraCommonKernelParserParser_jj_3R_101(self);
}

- (jboolean)jj_3R_42 {
  return GeogebraCommonKernelParserParser_jj_3R_42(self);
}

- (jboolean)jj_3R_62 {
  return GeogebraCommonKernelParserParser_jj_3R_62(self);
}

- (jboolean)jj_3_15 {
  return GeogebraCommonKernelParserParser_jj_3_15(self);
}

- (jboolean)jj_3_29 {
  return GeogebraCommonKernelParserParser_jj_3_29(self);
}

- (jboolean)jj_3_14 {
  return GeogebraCommonKernelParserParser_jj_3_14(self);
}

- (jboolean)jj_3R_61 {
  return GeogebraCommonKernelParserParser_jj_3R_61(self);
}

- (jboolean)jj_3_13 {
  return GeogebraCommonKernelParserParser_jj_3_13(self);
}

- (jboolean)jj_3_12 {
  return GeogebraCommonKernelParserParser_jj_3_12(self);
}

- (jboolean)jj_3R_60 {
  return GeogebraCommonKernelParserParser_jj_3R_60(self);
}

- (jboolean)jj_3R_34 {
  return GeogebraCommonKernelParserParser_jj_3R_34(self);
}

- (jboolean)jj_3R_59 {
  return GeogebraCommonKernelParserParser_jj_3R_59(self);
}

- (jboolean)jj_3_11 {
  return GeogebraCommonKernelParserParser_jj_3_11(self);
}

- (jboolean)jj_3R_43 {
  return GeogebraCommonKernelParserParser_jj_3R_43(self);
}

- (jboolean)jj_3R_73 {
  return GeogebraCommonKernelParserParser_jj_3R_73(self);
}

- (jboolean)jj_3R_32 {
  return GeogebraCommonKernelParserParser_jj_3R_32(self);
}

- (jboolean)jj_3R_18 {
  return GeogebraCommonKernelParserParser_jj_3R_18(self);
}

- (jboolean)jj_3R_31 {
  return GeogebraCommonKernelParserParser_jj_3R_31(self);
}

- (jboolean)jj_3_16 {
  return GeogebraCommonKernelParserParser_jj_3_16(self);
}

- (jboolean)jj_3R_97 {
  return GeogebraCommonKernelParserParser_jj_3R_97(self);
}

- (jboolean)jj_3R_63 {
  return GeogebraCommonKernelParserParser_jj_3R_63(self);
}

- (jboolean)jj_3_10 {
  return GeogebraCommonKernelParserParser_jj_3_10(self);
}

- (jboolean)jj_3R_35 {
  return GeogebraCommonKernelParserParser_jj_3R_35(self);
}

- (jboolean)jj_3_28 {
  return GeogebraCommonKernelParserParser_jj_3_28(self);
}

- (jboolean)jj_3_8 {
  return GeogebraCommonKernelParserParser_jj_3_8(self);
}

- (jboolean)jj_3_9 {
  return GeogebraCommonKernelParserParser_jj_3_9(self);
}

- (jboolean)jj_3_7 {
  return GeogebraCommonKernelParserParser_jj_3_7(self);
}

- (jboolean)jj_3_6 {
  return GeogebraCommonKernelParserParser_jj_3_6(self);
}

- (jboolean)jj_3R_81 {
  return GeogebraCommonKernelParserParser_jj_3R_81(self);
}

- (jboolean)jj_3R_77 {
  return GeogebraCommonKernelParserParser_jj_3R_77(self);
}

- (jboolean)jj_3R_108 {
  return GeogebraCommonKernelParserParser_jj_3R_108(self);
}

- (jboolean)jj_3_27 {
  return GeogebraCommonKernelParserParser_jj_3_27(self);
}

- (jboolean)jj_3_26 {
  return GeogebraCommonKernelParserParser_jj_3_26(self);
}

- (jboolean)jj_3R_95 {
  return GeogebraCommonKernelParserParser_jj_3R_95(self);
}

- (jboolean)jj_3_25 {
  return GeogebraCommonKernelParserParser_jj_3_25(self);
}

- (jboolean)jj_3R_80 {
  return GeogebraCommonKernelParserParser_jj_3R_80(self);
}

- (jboolean)jj_3_24 {
  return GeogebraCommonKernelParserParser_jj_3_24(self);
}

- (jboolean)jj_3_23 {
  return GeogebraCommonKernelParserParser_jj_3_23(self);
}

- (jboolean)jj_3R_98 {
  return GeogebraCommonKernelParserParser_jj_3R_98(self);
}

- (jboolean)jj_3_22 {
  return GeogebraCommonKernelParserParser_jj_3_22(self);
}

- (jboolean)jj_3R_94 {
  return GeogebraCommonKernelParserParser_jj_3R_94(self);
}

- (jboolean)jj_3_21 {
  return GeogebraCommonKernelParserParser_jj_3_21(self);
}

- (jboolean)jj_3_5 {
  return GeogebraCommonKernelParserParser_jj_3_5(self);
}

- (jboolean)jj_3_20 {
  return GeogebraCommonKernelParserParser_jj_3_20(self);
}

- (jboolean)jj_3R_22 {
  return GeogebraCommonKernelParserParser_jj_3R_22(self);
}

- (jboolean)jj_3R_72 {
  return GeogebraCommonKernelParserParser_jj_3R_72(self);
}

- (jboolean)jj_3_4 {
  return GeogebraCommonKernelParserParser_jj_3_4(self);
}

- (jboolean)jj_3_19 {
  return GeogebraCommonKernelParserParser_jj_3_19(self);
}

- (jboolean)jj_3_3 {
  return GeogebraCommonKernelParserParser_jj_3_3(self);
}

- (jboolean)jj_3_18 {
  return GeogebraCommonKernelParserParser_jj_3_18(self);
}

- (jboolean)jj_3R_107 {
  return GeogebraCommonKernelParserParser_jj_3R_107(self);
}

- (jboolean)jj_3R_58 {
  return GeogebraCommonKernelParserParser_jj_3R_58(self);
}

- (jboolean)jj_3_1 {
  return GeogebraCommonKernelParserParser_jj_3_1(self);
}

- (jboolean)jj_3_2 {
  return GeogebraCommonKernelParserParser_jj_3_2(self);
}

- (jboolean)jj_3R_106 {
  return GeogebraCommonKernelParserParser_jj_3R_106(self);
}

- (jboolean)jj_3R_57 {
  return GeogebraCommonKernelParserParser_jj_3R_57(self);
}

- (jboolean)jj_3R_102 {
  return GeogebraCommonKernelParserParser_jj_3R_102(self);
}

- (jboolean)jj_3R_105 {
  return GeogebraCommonKernelParserParser_jj_3R_105(self);
}

- (jboolean)jj_3R_91 {
  return GeogebraCommonKernelParserParser_jj_3R_91(self);
}

- (jboolean)jj_3R_41 {
  return GeogebraCommonKernelParserParser_jj_3R_41(self);
}

- (jboolean)jj_3R_90 {
  return GeogebraCommonKernelParserParser_jj_3R_90(self);
}

- (jboolean)jj_3R_56 {
  return GeogebraCommonKernelParserParser_jj_3R_56(self);
}

- (jboolean)jj_3R_89 {
  return GeogebraCommonKernelParserParser_jj_3R_89(self);
}

- (jboolean)jj_3R_100 {
  return GeogebraCommonKernelParserParser_jj_3R_100(self);
}

- (jboolean)jj_3R_21 {
  return GeogebraCommonKernelParserParser_jj_3R_21(self);
}

- (jboolean)jj_3R_88 {
  return GeogebraCommonKernelParserParser_jj_3R_88(self);
}

- (jboolean)jj_3R_96 {
  return GeogebraCommonKernelParserParser_jj_3R_96(self);
}

- (jboolean)jj_3R_99 {
  return GeogebraCommonKernelParserParser_jj_3R_99(self);
}

- (jboolean)jj_3R_87 {
  return GeogebraCommonKernelParserParser_jj_3R_87(self);
}

- (jboolean)jj_3R_93 {
  return GeogebraCommonKernelParserParser_jj_3R_93(self);
}

- (jboolean)jj_3R_86 {
  return GeogebraCommonKernelParserParser_jj_3R_86(self);
}

- (jboolean)jj_3R_55 {
  return GeogebraCommonKernelParserParser_jj_3R_55(self);
}

+ (void)jj_la1_init_0 {
  GeogebraCommonKernelParserParser_jj_la1_init_0();
}

+ (void)jj_la1_init_1 {
  GeogebraCommonKernelParserParser_jj_la1_init_1();
}

+ (void)jj_la1_init_2 {
  GeogebraCommonKernelParserParser_jj_la1_init_2();
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  GeogebraCommonKernelParserParser_initWithJavaIoInputStream_(self, stream);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                             withNSString:(NSString *)encoding {
  GeogebraCommonKernelParserParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream {
  [self ReInitWithJavaIoInputStream:stream withNSString:nil];
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream
                       withNSString:(NSString *)encoding {
  @try {
    [((GeogebraCommonKernelParserSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoInputStream:stream withNSString:encoding withInt:1 withInt:1];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(e) autorelease];
  }
  [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(token_source_)) ReInitWithGeogebraCommonKernelParserSimpleCharStream:jj_input_stream_];
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) IOSObjectArray_SetAndConsume(jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)stream {
  GeogebraCommonKernelParserParser_initWithJavaIoReader_(self, stream);
  return self;
}

- (void)ReInitWithJavaIoReader:(JavaIoReader *)stream {
  [((GeogebraCommonKernelParserSimpleCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoReader:stream withInt:1 withInt:1];
  [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(token_source_)) ReInitWithGeogebraCommonKernelParserSimpleCharStream:jj_input_stream_];
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) IOSObjectArray_SetAndConsume(jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

- (instancetype)initWithGeogebraCommonKernelParserParserTokenManager:(GeogebraCommonKernelParserParserTokenManager *)tm {
  GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelParserParserTokenManager_(self, tm);
  return self;
}

- (void)ReInitWithGeogebraCommonKernelParserParserTokenManager:(GeogebraCommonKernelParserParserTokenManager *)tm {
  GeogebraCommonKernelParserParser_set_token_source_(self, tm);
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  jj_ntk__ = -1;
  jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(jj_2_rtns_))->size_; i++) IOSObjectArray_SetAndConsume(jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

- (GeogebraCommonKernelParserToken *)jj_consume_tokenWithInt:(jint)kind {
  return GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, kind);
}

- (jboolean)jj_scan_tokenWithInt:(jint)kind {
  return GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, kind);
}

- (GeogebraCommonKernelParserToken *)getNextToken {
  if (((GeogebraCommonKernelParserToken *) nil_chk(token_))->next_ != nil) GeogebraCommonKernelParserParser_set_token_(self, token_->next_);
  else GeogebraCommonKernelParserParser_set_token_(self, GeogebraCommonKernelParserToken_set_next_(token_, [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_ntk__ = -1;
  jj_gen_++;
  return token_;
}

- (GeogebraCommonKernelParserToken *)getTokenWithInt:(jint)index {
  return GeogebraCommonKernelParserParser_getTokenWithInt_(self, index);
}

- (jint)jj_ntk {
  return GeogebraCommonKernelParserParser_jj_ntk(self);
}

- (void)jj_add_error_tokenWithInt:(jint)kind
                          withInt:(jint)pos {
  GeogebraCommonKernelParserParser_jj_add_error_tokenWithInt_withInt_(self, kind, pos);
}

- (GeogebraCommonKernelParserParseException *)generateParseException {
  [((id<JavaUtilList>) nil_chk(jj_expentries_)) clear];
  IOSBooleanArray *la1tokens = [IOSBooleanArray arrayWithLength:76];
  if (jj_kind_ >= 0) {
    *IOSBooleanArray_GetRef(la1tokens, jj_kind_) = YES;
    jj_kind_ = -1;
  }
  for (jint i = 0; i < 67; i++) {
    if (IOSIntArray_Get(nil_chk(jj_la1_), i) == jj_gen_) {
      for (jint j = 0; j < 32; j++) {
        if ((IOSIntArray_Get(nil_chk(GeogebraCommonKernelParserParser_jj_la1_0_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(GeogebraCommonKernelParserParser_jj_la1_1_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 32 + j) = YES;
        }
        if ((IOSIntArray_Get(nil_chk(GeogebraCommonKernelParserParser_jj_la1_2_), i) & (LShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, 64 + j) = YES;
        }
      }
    }
  }
  for (jint i = 0; i < 76; i++) {
    if (IOSBooleanArray_Get(la1tokens, i)) {
      GeogebraCommonKernelParserParser_setAndConsume_jj_expentry_(self, [IOSIntArray newArrayWithLength:1]);
      *IOSIntArray_GetRef(jj_expentry_, 0) = i;
      [jj_expentries_ addWithId:jj_expentry_];
    }
  }
  jj_endpos_ = 0;
  GeogebraCommonKernelParserParser_jj_rescan_token(self);
  GeogebraCommonKernelParserParser_jj_add_error_tokenWithInt_withInt_(self, 0, 0);
  IOSObjectArray *exptokseq = [IOSObjectArray arrayWithLength:[jj_expentries_ size] type:IOSClass_intArray(1)];
  for (jint i = 0; i < [jj_expentries_ size]; i++) {
    IOSObjectArray_Set(exptokseq, i, [jj_expentries_ getWithInt:i]);
  }
  return [new_GeogebraCommonKernelParserParseException_initWithGeogebraCommonKernelParserToken_withIntArray2_withNSStringArray_(token_, exptokseq, GeogebraCommonKernelParserParserConstants_get_tokenImage_()) autorelease];
}

- (void)enable_tracing {
}

- (void)disable_tracing {
}

- (void)jj_rescan_token {
  GeogebraCommonKernelParserParser_jj_rescan_token(self);
}

- (void)jj_saveWithInt:(jint)index
               withInt:(jint)xla {
  GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, index, xla);
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(loc_);
  RELEASE_(undecided_);
  RELEASE_(token_source_);
  RELEASE_(jj_input_stream_);
  RELEASE_(token_);
  RELEASE_(jj_nt_);
  RELEASE_(jj_scanpos_);
  RELEASE_(jj_lastpos_);
  RELEASE_(jj_la1_);
  RELEASE_(jj_2_rtns_);
  RELEASE_(jj_ls_);
  RELEASE_(jj_expentries_);
  RELEASE_(jj_expentry_);
  RELEASE_(jj_lasttokens_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelParserParser class]) {
    {
      GeogebraCommonKernelParserParser_jj_la1_init_0();
      GeogebraCommonKernelParserParser_jj_la1_init_1();
      GeogebraCommonKernelParserParser_jj_la1_init_2();
    }
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelParserParser)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelConstruction:", "Parser", NULL, 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "myReInitWithNSString:", "myReInit", "V", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseGeoGebraExpressionWithNSString:", "parseGeoGebraExpression", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseGeoGebraCASWithNSString:", "parseGeoGebraCAS", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseGiacWithNSString:", "parseGiac", "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseFunctionWithNSString:", "parseFunction", "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseFunctionNVarWithNSString:", "parseFunctionNVar", "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseCmdExpressionWithNSString:", "parseCmdExpression", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseExpressionWithNSString:", "parseExpression", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "parseLabelWithNSString:", "parseLabel", "Ljava.lang.String;", 0x1, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "makePowerWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:", "makePower", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "processUndecided", NULL, "V", 0x2, NULL, NULL },
    { "buildOpNodeWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticMyList:", "buildOpNode", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "buildValidExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "buildCASExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "buildMathPiperExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "buildGiacExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x12, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "buildMaximaExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "label", NULL, "Lgeogebra.common.kernel.parser.Token;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "casVar", NULL, "Lgeogebra.common.kernel.parser.Token;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "command", NULL, "Lgeogebra.common.kernel.arithmetic.ValidExpression;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "labellist", NULL, "Ljava.util.Vector;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "equation", NULL, "Lgeogebra.common.kernel.arithmetic.Equation;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "expression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "cmdexpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "function", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "functionNVar", NULL, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "functionExpressionnode", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "casFunction", NULL, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "expressionnode", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "expressionOrEquation", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "ANDterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "ORterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "COMPAREterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "plusminusnode", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "setdifferencenode", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "listopnode", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "multterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "divterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "powerdivterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "enunary", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "enpower", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "enfactorial", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "ensqrt", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "NOTterm", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "enelement", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "list", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "numVecVariable", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "spreadsheetRange", NULL, "Lgeogebra.common.kernel.arithmetic.Command;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "myDouble", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "numberFunction", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "cartesianvector", NULL, "Lgeogebra.common.kernel.arithmetic.VectorValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "cartesianvector3D", NULL, "Lgeogebra.common.kernel.arithmetic3D.Vector3DValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "polarvector", NULL, "Lgeogebra.common.kernel.arithmetic.VectorValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "sphericalvector", NULL, "Lgeogebra.common.kernel.arithmetic3D.Vector3DValue;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "cartesianvector_special", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "cartesianvector3D_special", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "polarvector_special", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x11, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "jj_2_1WithInt:", "jj_2_1", "Z", 0x2, NULL, NULL },
    { "jj_2_2WithInt:", "jj_2_2", "Z", 0x2, NULL, NULL },
    { "jj_2_3WithInt:", "jj_2_3", "Z", 0x2, NULL, NULL },
    { "jj_2_4WithInt:", "jj_2_4", "Z", 0x2, NULL, NULL },
    { "jj_2_5WithInt:", "jj_2_5", "Z", 0x2, NULL, NULL },
    { "jj_2_6WithInt:", "jj_2_6", "Z", 0x2, NULL, NULL },
    { "jj_2_7WithInt:", "jj_2_7", "Z", 0x2, NULL, NULL },
    { "jj_2_8WithInt:", "jj_2_8", "Z", 0x2, NULL, NULL },
    { "jj_2_9WithInt:", "jj_2_9", "Z", 0x2, NULL, NULL },
    { "jj_2_10WithInt:", "jj_2_10", "Z", 0x2, NULL, NULL },
    { "jj_2_11WithInt:", "jj_2_11", "Z", 0x2, NULL, NULL },
    { "jj_2_12WithInt:", "jj_2_12", "Z", 0x2, NULL, NULL },
    { "jj_2_13WithInt:", "jj_2_13", "Z", 0x2, NULL, NULL },
    { "jj_2_14WithInt:", "jj_2_14", "Z", 0x2, NULL, NULL },
    { "jj_2_15WithInt:", "jj_2_15", "Z", 0x2, NULL, NULL },
    { "jj_2_16WithInt:", "jj_2_16", "Z", 0x2, NULL, NULL },
    { "jj_2_17WithInt:", "jj_2_17", "Z", 0x2, NULL, NULL },
    { "jj_2_18WithInt:", "jj_2_18", "Z", 0x2, NULL, NULL },
    { "jj_2_19WithInt:", "jj_2_19", "Z", 0x2, NULL, NULL },
    { "jj_2_20WithInt:", "jj_2_20", "Z", 0x2, NULL, NULL },
    { "jj_2_21WithInt:", "jj_2_21", "Z", 0x2, NULL, NULL },
    { "jj_2_22WithInt:", "jj_2_22", "Z", 0x2, NULL, NULL },
    { "jj_2_23WithInt:", "jj_2_23", "Z", 0x2, NULL, NULL },
    { "jj_2_24WithInt:", "jj_2_24", "Z", 0x2, NULL, NULL },
    { "jj_2_25WithInt:", "jj_2_25", "Z", 0x2, NULL, NULL },
    { "jj_2_26WithInt:", "jj_2_26", "Z", 0x2, NULL, NULL },
    { "jj_2_27WithInt:", "jj_2_27", "Z", 0x2, NULL, NULL },
    { "jj_2_28WithInt:", "jj_2_28", "Z", 0x2, NULL, NULL },
    { "jj_2_29WithInt:", "jj_2_29", "Z", 0x2, NULL, NULL },
    { "jj_2_30WithInt:", "jj_2_30", "Z", 0x2, NULL, NULL },
    { "jj_2_31WithInt:", "jj_2_31", "Z", 0x2, NULL, NULL },
    { "jj_3R_85", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_84", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_83", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_79", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_92", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_54", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_82", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_78", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_17", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_74", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_70", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_53", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_33", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_126", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_76", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_69", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_48", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_68", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_45", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_47", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_24", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_122", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_121", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_28", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_50", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_75", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_49", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_67", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_120", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_119", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_118", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_27", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_25", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_64", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_117", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_129", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_36", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_116", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_26", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_115", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_128", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_30", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_20", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_127", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_123", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_125", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_46", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_71", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_40", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_23", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_124", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_112", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_114", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_111", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_39", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_110", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_103", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_109", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_19", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_31", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_66", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_38", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_51", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_113", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_52", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_30", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_65", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_37", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_44", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_29", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_104", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_101", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_42", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_62", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_15", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_29", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_14", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_61", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_13", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_12", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_60", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_34", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_59", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_11", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_43", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_73", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_32", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_18", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_31", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_16", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_97", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_63", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_10", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_35", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_28", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_8", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_9", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_7", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_6", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_81", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_77", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_108", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_27", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_26", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_95", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_25", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_80", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_24", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_23", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_98", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_22", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_94", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_21", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_5", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_20", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_22", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_72", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_4", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_19", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_3", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_18", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_107", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_58", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_1", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3_2", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_106", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_57", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_102", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_105", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_91", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_41", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_90", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_56", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_89", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_100", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_21", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_88", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_96", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_99", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_87", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_93", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_86", NULL, "Z", 0x2, NULL, NULL },
    { "jj_3R_55", NULL, "Z", 0x2, NULL, NULL },
    { "jj_la1_init_0", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_1", NULL, "V", 0xa, NULL, NULL },
    { "jj_la1_init_2", NULL, "V", 0xa, NULL, NULL },
    { "initWithJavaIoInputStream:", "Parser", NULL, 0x1, NULL, NULL },
    { "initWithJavaIoInputStream:withNSString:", "Parser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:", "ReInit", "V", 0x1, NULL, NULL },
    { "ReInitWithJavaIoInputStream:withNSString:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithJavaIoReader:", "Parser", NULL, 0x1, NULL, NULL },
    { "ReInitWithJavaIoReader:", "ReInit", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelParserParserTokenManager:", "Parser", NULL, 0x1, NULL, NULL },
    { "ReInitWithGeogebraCommonKernelParserParserTokenManager:", "ReInit", "V", 0x1, NULL, NULL },
    { "jj_consume_tokenWithInt:", "jj_consume_token", "Lgeogebra.common.kernel.parser.Token;", 0x2, "Lgeogebra.common.kernel.parser.ParseException;", NULL },
    { "jj_scan_tokenWithInt:", "jj_scan_token", "Z", 0x2, NULL, NULL },
    { "getNextToken", NULL, "Lgeogebra.common.kernel.parser.Token;", 0x11, NULL, NULL },
    { "getTokenWithInt:", "getToken", "Lgeogebra.common.kernel.parser.Token;", 0x11, NULL, NULL },
    { "jj_ntk", NULL, "I", 0x2, NULL, NULL },
    { "jj_add_error_tokenWithInt:withInt:", "jj_add_error_token", "V", 0x2, NULL, NULL },
    { "generateParseException", NULL, "Lgeogebra.common.kernel.parser.ParseException;", 0x1, NULL, NULL },
    { "enable_tracing", NULL, "V", 0x11, NULL, NULL },
    { "disable_tracing", NULL, "V", 0x11, NULL, NULL },
    { "jj_rescan_token", NULL, "V", 0x2, NULL, NULL },
    { "jj_saveWithInt:withInt:", "jj_save", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "loc_", NULL, 0x2, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "GeoGebraCASParsing_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ExternalCASParsing_", NULL, 0x2, "Z", NULL, NULL,  },
    { "GiacParsing_", NULL, 0x2, "Z", NULL, NULL,  },
    { "undecided_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/ExpressionNode;>;",  },
    { "token_source_", NULL, 0x1, "Lgeogebra.common.kernel.parser.ParserTokenManager;", NULL, NULL,  },
    { "jj_input_stream_", NULL, 0x0, "Lgeogebra.common.kernel.parser.SimpleCharStream;", NULL, NULL,  },
    { "token_", NULL, 0x1, "Lgeogebra.common.kernel.parser.Token;", NULL, NULL,  },
    { "jj_nt_", NULL, 0x1, "Lgeogebra.common.kernel.parser.Token;", NULL, NULL,  },
    { "jj_ntk__", "jj_ntk", 0x2, "I", NULL, NULL,  },
    { "jj_scanpos_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Token;", NULL, NULL,  },
    { "jj_lastpos_", NULL, 0x2, "Lgeogebra.common.kernel.parser.Token;", NULL, NULL,  },
    { "jj_la_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_lookingAhead_", NULL, 0x2, "Z", NULL, NULL,  },
    { "jj_semLA_", NULL, 0x2, "Z", NULL, NULL,  },
    { "jj_gen_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_la1_", NULL, 0x12, "[I", NULL, NULL,  },
    { "jj_la1_0_", NULL, 0xa, "[I", &GeogebraCommonKernelParserParser_jj_la1_0_, NULL,  },
    { "jj_la1_1_", NULL, 0xa, "[I", &GeogebraCommonKernelParserParser_jj_la1_1_, NULL,  },
    { "jj_la1_2_", NULL, 0xa, "[I", &GeogebraCommonKernelParserParser_jj_la1_2_, NULL,  },
    { "jj_2_rtns_", NULL, 0x12, "[Lgeogebra.common.kernel.parser.Parser$JJCalls;", NULL, NULL,  },
    { "jj_rescan_", NULL, 0x2, "Z", NULL, NULL,  },
    { "jj_gc_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_ls_", NULL, 0x12, "Lgeogebra.common.kernel.parser.Parser$LookaheadSuccess;", NULL, NULL,  },
    { "jj_expentries_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<L[I;>;",  },
    { "jj_expentry_", NULL, 0x2, "[I", NULL, NULL,  },
    { "jj_kind_", NULL, 0x2, "I", NULL, NULL,  },
    { "jj_lasttokens_", NULL, 0x2, "[I", NULL, NULL,  },
    { "jj_endpos_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.parser.Parser$LookaheadSuccess;", "Lgeogebra.common.kernel.parser.Parser$JJCalls;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelParserParser = { 2, "Parser", "geogebra.common.kernel.parser", NULL, 0x1, 255, methods, 31, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelParserParser;
}

@end

void GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelParserParser *self, GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelParserParser_initWithJavaIoReader_(self, [new_JavaIoStringReader_initWithNSString_(@"") autorelease]);
  GeogebraCommonKernelParserParser_set_kernel_(self, kernel);
  GeogebraCommonKernelParserParser_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication]);
  GeogebraCommonKernelParserParser_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization]);
}

GeogebraCommonKernelParserParser *new_GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelParserParser *self = [GeogebraCommonKernelParserParser alloc];
  GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelConstruction_(self, kernel, cons);
  return self;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_makePowerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(GeogebraCommonKernelParserParser *self, id<GeogebraCommonKernelArithmeticExpressionValue> v, id<GeogebraCommonKernelArithmeticExpressionValue> e) {
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) isExpressionNode] && [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])) getRight], GeogebraCommonPluginOperationEnum_get_POWER(), e) autorelease]) autorelease];
  }
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, v, GeogebraCommonPluginOperationEnum_get_POWER(), e) autorelease];
}

void GeogebraCommonKernelParserParser_processUndecided(GeogebraCommonKernelParserParser *self) {
  for (GeogebraCommonKernelArithmeticExpressionNode * __strong en in nil_chk(self->undecided_)) [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_MULTIPLY()];
  [self->undecided_ clear];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_buildOpNodeWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticMyList_(GeogebraCommonKernelParserParser *self, GeogebraCommonPluginOperationEnum *op, GeogebraCommonKernelArithmeticMyList *list) {
  switch ([((GeogebraCommonKernelArithmeticMyList *) nil_chk(list)) size]) {
    case 1:
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [list getListElementWithInt:0], op, nil) autorelease];
    case 2:
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [list getListElementWithInt:0], op, [list getListElementWithInt:1]) autorelease];
    case 3:
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [list getListElementWithInt:0], [list getListElementWithInt:1]) autorelease], op, [list getListElementWithInt:2]) autorelease];
    case 4:
    return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [list getListElementWithInt:0], [list getListElementWithInt:1]) autorelease], op, [new_GeogebraCommonKernelArithmeticMyNumberPair_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [list getListElementWithInt:2], [list getListElementWithInt:3]) autorelease]) autorelease];
    default:
    return nil;
  }
}

GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildValidExpression(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticValidExpression *ve = nil;
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  GeogebraCommonKernelParserToken *l = [new_GeogebraCommonKernelParserToken_init() autorelease];
  GeogebraCommonKernelParserToken *c = nil;
  JavaUtilVector *labels = [new_JavaUtilVector_init() autorelease];
  if (GeogebraCommonKernelParserParser_jj_2_1WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_functionExpressionnode(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_2WithInt_(self, 3)) {
    ve = GeogebraCommonKernelParserParser_spreadsheetRange(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_3WithInt_(self, 2147483647)) {
    l = GeogebraCommonKernelParserParser_label(self);
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 70:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 70);
      break;
      case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 0) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    ve = GeogebraCommonKernelParserParser_equation(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_4WithInt_(self, 2147483647)) {
    l = GeogebraCommonKernelParserParser_label(self);
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 70:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 70);
      break;
      case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 1) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    ve = GeogebraCommonKernelParserParser_cmdexpression(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_5WithInt_(self, 2147483647)) {
    lhs = GeogebraCommonKernelParserParser_expressionnode(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL);
    rhs = GeogebraCommonKernelParserParser_expressionnode(self);
    if (![((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs)) containsFreeFunctionVariable]) {
      if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(lhs)) isSingleVariable]) {
        ve = rhs;
        [ve setLabelWithNSString:[((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast([lhs evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
      }
      else if ([((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_EULER_STRING_())) isEqual:[lhs toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        ve = rhs;
        [ve setLabelWithNSString:@"e"];
      }
      else if ([lhs isImaginaryUnit]) {
        ve = rhs;
        [ve setLabelWithNSString:@"i"];
      }
      else if ([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) isZvarAllowed] && [@"z" isEqual:[lhs toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]) {
        ve = rhs;
        [ve setLabelWithNSString:@"z"];
      }
    }
    if (ve == nil) {
      ve = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, lhs, rhs) autorelease];
    }
  }
  else if (GeogebraCommonKernelParserParser_jj_2_6WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_cmdexpression(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_7WithInt_(self, 2147483647)) {
    labels = GeogebraCommonKernelParserParser_labellist(self);
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_EQUAL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL);
      break;
      case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 2) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    ve = GeogebraCommonKernelParserParser_command(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_8WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_cartesianvector_special(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_9WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_cartesianvector3D_special(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_10WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_polarvector_special(self);
  }
  else {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
    break;
    case 0:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 0);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 3) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  if ([((JavaUtilVector *) nil_chk(labels)) size] > 0) [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) addLabelWithJavaUtilVector:labels];
  else if ([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) labelCount] == 0) {
    [ve addLabelWithNSString:((GeogebraCommonKernelParserToken *) nil_chk(l))->image_];
  }
  {
    return ve;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildCASExpression(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticValidExpression *ve;
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  GeogebraCommonKernelParserToken *l = [new_GeogebraCommonKernelParserToken_init() autorelease];
  GeogebraCommonKernelParserToken *assign = nil;
  GeogebraCommonKernelParserToken *c = nil;
  GeogebraCommonKernelParserToken *c2 = nil;
  JavaUtilVector *labels = [new_JavaUtilVector_init() autorelease];
  if (GeogebraCommonKernelParserParser_jj_2_11WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_casFunction(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_12WithInt_(self, 2147483647)) {
    l = GeogebraCommonKernelParserParser_label(self);
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 70:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 70);
      break;
      case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
      break;
      case GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 4) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    ve = GeogebraCommonKernelParserParser_equation(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_13WithInt_(self, 2147483647)) {
    l = GeogebraCommonKernelParserParser_casVar(self);
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 70:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 70);
      break;
      case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
      break;
      case GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT:
      assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 5) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    ve = GeogebraCommonKernelParserParser_expressionnode(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_14WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_equation(self);
  }
  else if (GeogebraCommonKernelParserParser_jj_2_15WithInt_(self, 2147483647)) {
    ve = GeogebraCommonKernelParserParser_expressionnode(self);
  }
  else {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
    break;
    case 0:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 0);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 6) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  if (((GeogebraCommonKernelParserToken *) nil_chk(l))->image_ != nil) {
    if ([@":" isEqual:((GeogebraCommonKernelParserToken *) nil_chk(assign))->image_] && GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_([((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) {
      GeogebraCommonKernelArithmeticExpressionNode *startCell = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, l->image_) autorelease]) autorelease];
      GeogebraCommonKernelArithmeticExpressionNode *endCell = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, [ve toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]) autorelease]) autorelease];
      GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, @"CellRange", NO, !self->ExternalCASParsing_) autorelease];
      [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:startCell];
      [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:endCell];
      {
        return cmd;
      }
    }
    [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(ve)) addLabelWithNSString:l->image_];
    [ve setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:assign->kind_ == GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT ? GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED() : GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
  }
  {
    return ve;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_buildGiacExpression(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticValidExpression *ve;
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  GeogebraCommonKernelParserToken *l = [new_GeogebraCommonKernelParserToken_init() autorelease];
  JavaUtilVector *labels = [new_JavaUtilVector_init() autorelease];
  ve = GeogebraCommonKernelParserParser_buildCASExpression(self);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
    break;
    case 0:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 0);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 8) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return ve;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_label(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *t;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_VARZ:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARZ);
    break;
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL);
    break;
    case GeogebraCommonKernelParserParserConstants_LABEL:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LABEL);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 10) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return t;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_casVar(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *t;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_VARX:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARX);
    break;
    case GeogebraCommonKernelParserParserConstants_VARY:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARY);
    break;
    case GeogebraCommonKernelParserParserConstants_VARZ:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARZ);
    break;
    case GeogebraCommonKernelParserParserConstants_LABEL:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LABEL);
    break;
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 11) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return t;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticValidExpression *GeogebraCommonKernelParserParser_command(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticCommand *c;
  GeogebraCommonKernelParserToken *t;
  NSString *cmdName;
  GeogebraCommonKernelArithmeticExpressionNode *en;
  t = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
  cmdName = [((GeogebraCommonKernelParserToken *) nil_chk(t))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(t->image_)) length]) - 1];
  c = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, cmdName, YES, !self->ExternalCASParsing_) autorelease];
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_VERTICAL_BAR:
    case GeogebraCommonKernelParserParserConstants_NOT:
    case GeogebraCommonKernelParserParserConstants_PLUS:
    case GeogebraCommonKernelParserParserConstants_MINUS:
    case GeogebraCommonKernelParserParserConstants_FACTORIAL:
    case GeogebraCommonKernelParserParserConstants_UNDEFINED:
    case GeogebraCommonKernelParserParserConstants_PI:
    case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
    case GeogebraCommonKernelParserParserConstants_E:
    case GeogebraCommonKernelParserParserConstants_IMAGINARY:
    case GeogebraCommonKernelParserParserConstants_DEGREE:
    case GeogebraCommonKernelParserParserConstants_INFINITY:
    case GeogebraCommonKernelParserParserConstants_RAD:
    case GeogebraCommonKernelParserParserConstants_TRUE:
    case GeogebraCommonKernelParserParserConstants_FALSE:
    case GeogebraCommonKernelParserParserConstants_VARX:
    case GeogebraCommonKernelParserParserConstants_VARY:
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_FLOAT:
    case GeogebraCommonKernelParserParserConstants_EFLOAT:
    case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    case GeogebraCommonKernelParserParserConstants_X_FUNC:
    case GeogebraCommonKernelParserParserConstants_Y_FUNC:
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    case GeogebraCommonKernelParserParserConstants_RANDOM_FUNC:
    case GeogebraCommonKernelParserParserConstants_SQRT_SHORT:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL:
    case GeogebraCommonKernelParserParserConstants_TEXT:
    case 73:
    case 75:
    en = GeogebraCommonKernelParserParser_cmdexpression(self);
    [c addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 12) = self->jj_gen_;
    ;
  }
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_COMMA:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 13) = self->jj_gen_;
      goto break_label_1;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    en = GeogebraCommonKernelParserParser_cmdexpression(self);
    [c addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
  }
  break_label_1: ;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case 71:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
    break;
    case 72:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 14) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  if (self->GiacParsing_) {
    GeogebraCommonKernelArithmeticExpressionNode *res = GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_processCommandWithNSString_withGeogebraCommonKernelArithmeticGetItem_withGeogebraCommonKernelKernel_(cmdName, c, self->kernel_);
    if (res != nil) {
      return res;
    }
  }
  {
    return c;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

JavaUtilVector *GeogebraCommonKernelParserParser_labellist(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *t;
  JavaUtilVector *labels;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case 73:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 73);
    t = GeogebraCommonKernelParserParser_label(self);
    labels = [new_JavaUtilVector_init() autorelease];
    [labels addWithId:((GeogebraCommonKernelParserToken *) nil_chk(t))->image_];
    {
      while (YES) {
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_COMMA:
          ;
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 15) = self->jj_gen_;
          goto break_label_2;
        }
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
        t = GeogebraCommonKernelParserParser_label(self);
        [labels addWithId:((GeogebraCommonKernelParserToken *) nil_chk(t))->image_];
      }
      break_label_2: ;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 74);
    break;
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    t = GeogebraCommonKernelParserParser_label(self);
    labels = [new_JavaUtilVector_init() autorelease];
    [labels addWithId:((GeogebraCommonKernelParserToken *) nil_chk(t))->image_];
    {
      while (YES) {
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_COMMA:
          ;
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 16) = self->jj_gen_;
          goto break_label_3;
        }
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
        t = GeogebraCommonKernelParserParser_label(self);
        [labels addWithId:((GeogebraCommonKernelParserToken *) nil_chk(t))->image_];
      }
      break_label_3: ;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 17) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  {
    return labels;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticEquation *GeogebraCommonKernelParserParser_equation(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *lhs, *rhs;
  lhs = GeogebraCommonKernelParserParser_expressionnode(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL);
  rhs = GeogebraCommonKernelParserParser_expressionnode(self);
  {
    return [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, lhs, rhs) autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expression(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *rhs;
  rhs = GeogebraCommonKernelParserParser_expressionnode(self);
  if (!self->GeoGebraCASParsing_ && !self->GiacParsing_ && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs)) containsFreeFunctionVariable]) {
    {
      @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_(self->loc_, @"IncompleteEquation") autorelease];
    }
  }
  {
    return rhs;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cmdexpression(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *en;
  en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelParserParser_function(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *rhs;
  GeogebraCommonKernelParserToken *l = nil;
  GeogebraCommonKernelArithmeticFunction *f;
  rhs = GeogebraCommonKernelParserParser_functionExpressionnode(self);
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs)) getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
    f = (GeogebraCommonKernelArithmeticFunction *) check_class_cast([rhs getLeft], [GeogebraCommonKernelArithmeticFunction class]);
  }
  else {
    f = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_(rhs) autorelease];
  }
  [((GeogebraCommonKernelArithmeticFunction *) nil_chk(f)) setLabelWithNSString:[rhs getLabel]];
  {
    return f;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelParserParser_functionNVar(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *rhs;
  GeogebraCommonKernelParserToken *l = nil;
  GeogebraCommonKernelArithmeticFunctionNVar *f;
  rhs = GeogebraCommonKernelParserParser_functionExpressionnode(self);
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs)) getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticFunctionNVar class]]) {
    f = (GeogebraCommonKernelArithmeticFunctionNVar *) check_class_cast([rhs getLeft], [GeogebraCommonKernelArithmeticFunctionNVar class]);
  }
  else {
    f = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(rhs) autorelease];
  }
  [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(f)) setLabelWithNSString:[rhs getLabel]];
  {
    return f;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_functionExpressionnode(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *rhs;
  GeogebraCommonKernelArithmeticExpressionNode *condition = nil;
  GeogebraCommonKernelParserToken *funName = nil;
  GeogebraCommonKernelParserToken *varName = nil;
  JavaUtilArrayList *localVars;
  GeogebraCommonKernelParserToken *var;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    funName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
    break;
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    funName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Z_FUNC);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 18) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_VARX:
    varName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARX);
    break;
    case GeogebraCommonKernelParserParserConstants_VARY:
    varName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARY);
    break;
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    varName = GeogebraCommonKernelParserParser_label(self);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 19) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  localVars = [new_JavaUtilArrayList_init() autorelease];
  [localVars addWithId:((GeogebraCommonKernelParserToken *) nil_chk(varName))->image_];
  [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction])) registerFunctionVariableWithNSString:varName->image_];
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_COMMA:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 20) = self->jj_gen_;
      goto break_label_4;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    varName = GeogebraCommonKernelParserParser_casVar(self);
    [localVars addWithId:((GeogebraCommonKernelParserToken *) nil_chk(varName))->image_];
    [((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) registerFunctionVariableWithNSString:varName->image_];
  }
  break_label_4: ;
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_EQUAL:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL);
    break;
    case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 21) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  rhs = GeogebraCommonKernelParserParser_expressionnode(self);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_COMMA:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    condition = GeogebraCommonKernelParserParser_expressionnode(self);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 22) = self->jj_gen_;
    ;
  }
  if (condition != nil) {
    rhs = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, condition, GeogebraCommonPluginOperationEnum_get_IF(), rhs) autorelease];
  }
  NSString *funLabel = [((GeogebraCommonKernelParserToken *) nil_chk(funName))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(funName->image_)) length]) - 1];
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(rhs)) getLeft] isKindOfClass:[GeogebraCommonKernelArithmeticCommand class]] && ![rhs containsFreeFunctionVariable]) {
    [rhs setLabelWithNSString:funLabel];
    {
      return rhs;
    }
  }
  jint n = [localVars size];
  IOSObjectArray *funVar = [IOSObjectArray arrayWithLength:n type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(funVar, i, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_));
    [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(funVar, i))) setVarStringWithNSString:[localVars getWithInt:i]];
  }
  {
    GeogebraCommonKernelArithmeticFunction *fun;
    GeogebraCommonKernelArithmeticFunctionNVar *funn;
    switch (n) {
      case 1:
      fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(rhs, IOSObjectArray_Get(funVar, 0)) autorelease];
      [fun setLabelWithNSString:funLabel];
      rhs = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, fun) autorelease];
      break;
      default:
      funn = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(rhs, funVar) autorelease];
      [funn setLabelWithNSString:funLabel];
      rhs = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, funn) autorelease];
      break;
    }
  }
  [rhs setLabelWithNSString:funLabel];
  {
    return rhs;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticFunctionNVar *GeogebraCommonKernelParserParser_casFunction(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *rhs;
  GeogebraCommonKernelParserToken *funName = nil;
  GeogebraCommonKernelParserToken *varName = nil;
  GeogebraCommonKernelParserToken *assign = nil;
  JavaUtilArrayList *localVars;
  GeogebraCommonKernelParserToken *var;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    funName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
    break;
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    funName = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Z_FUNC);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 23) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  varName = GeogebraCommonKernelParserParser_casVar(self);
  localVars = [new_JavaUtilArrayList_init() autorelease];
  [localVars addWithId:((GeogebraCommonKernelParserToken *) nil_chk(varName))->image_];
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_COMMA:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 24) = self->jj_gen_;
      goto break_label_5;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    varName = GeogebraCommonKernelParserParser_casVar(self);
    [localVars addWithId:((GeogebraCommonKernelParserToken *) nil_chk(varName))->image_];
  }
  break_label_5: ;
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_ASSIGNMENT:
    assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_ASSIGNMENT);
    break;
    case GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT:
    assign = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT);
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 25) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  rhs = GeogebraCommonKernelParserParser_expressionnode(self);
  NSString *funLabel = [((GeogebraCommonKernelParserToken *) nil_chk(funName))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(funName->image_)) length]) - 1];
  jint n = [localVars size];
  IOSObjectArray *funVar = [IOSObjectArray arrayWithLength:n type:GeogebraCommonKernelArithmeticFunctionVariable_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(funVar, i, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_));
    [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(funVar, i))) setVarStringWithNSString:[localVars getWithInt:i]];
  }
  {
    GeogebraCommonKernelArithmeticFunction *fun;
    GeogebraCommonKernelArithmeticFunctionNVar *funn;
    switch (n) {
      case 1:
      fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(rhs, IOSObjectArray_Get(funVar, 0)) autorelease];
      [fun setLabelWithNSString:funLabel];
      [fun setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:((GeogebraCommonKernelParserToken *) nil_chk(assign))->kind_ == GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT ? GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED() : GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
      {
        return fun;
      }
      default:
      funn = [new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(rhs, funVar) autorelease];
      [funn setLabelWithNSString:funLabel];
      [funn setAssignmentTypeWithGeogebraCommonKernelArithmeticAssignmentTypeEnum:((GeogebraCommonKernelParserToken *) nil_chk(assign))->kind_ == GeogebraCommonKernelParserParserConstants_DELAYED_ASSIGNMENT ? GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DELAYED() : GeogebraCommonKernelArithmeticAssignmentTypeEnum_get_DEFAULT()];
      {
        return funn;
      }
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expressionnode(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_ORterm(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_IMPLICATION:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 26) = self->jj_gen_;
      goto break_label_6;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IMPLICATION);
    f = GeogebraCommonKernelParserParser_ORterm(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_IMPLICATION(), f) autorelease];
  }
  break_label_6: ;
  GeogebraCommonKernelArithmeticExpressionNode *en;
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ret)) isExpressionNode]) en = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class]);
  else en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret) autorelease];
  if (self->ExternalCASParsing_) [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) simplifyLeafs];
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_expressionOrEquation(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *en, *rhs;
  en = GeogebraCommonKernelParserParser_expressionnode(self);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_EQUAL:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL);
    rhs = GeogebraCommonKernelParserParser_expressionnode(self);
    en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, rhs) autorelease]) autorelease];
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 27) = self->jj_gen_;
    ;
  }
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ANDterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_COMPAREterm(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_AND:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 28) = self->jj_gen_;
      goto break_label_7;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_AND);
    f = GeogebraCommonKernelParserParser_COMPAREterm(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_AND(), f) autorelease];
  }
  break_label_7: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ORterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_ANDterm(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_OR:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 29) = self->jj_gen_;
      goto break_label_8;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_OR);
    f = GeogebraCommonKernelParserParser_ANDterm(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_OR(), f) autorelease];
  }
  break_label_8: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_COMPAREterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> left, right;
  GeogebraCommonKernelArithmeticExpressionNode *result;
  JavaUtilVector *andList = nil;
  left = GeogebraCommonKernelParserParser_listopnode(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_EQUAL_BOOLEAN:
      case GeogebraCommonKernelParserParserConstants_NOT_EQUAL:
      case GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF:
      case GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF_STRICT:
      case GeogebraCommonKernelParserParserConstants_LESS:
      case GeogebraCommonKernelParserParserConstants_GREATER:
      case GeogebraCommonKernelParserParserConstants_LESS_EQUAL:
      case GeogebraCommonKernelParserParserConstants_GREATER_EQUAL:
      case GeogebraCommonKernelParserParserConstants_PARALLEL:
      case GeogebraCommonKernelParserParserConstants_PERPENDICULAR:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 30) = self->jj_gen_;
      goto break_label_9;
    }
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_EQUAL_BOOLEAN:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL_BOOLEAN);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      if (self->ExternalCASParsing_) result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, right) autorelease]) autorelease];
      else result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_EQUAL_BOOLEAN(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_NOT_EQUAL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_NOT_EQUAL);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_NOT_EQUAL(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF_STRICT:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF_STRICT);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_IS_SUBSET_OF_STRICT(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_LESS:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LESS);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_LESS(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_GREATER:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_GREATER);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_GREATER(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_LESS_EQUAL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LESS_EQUAL);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_LESS_EQUAL(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_GREATER_EQUAL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_GREATER_EQUAL);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_PARALLEL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PARALLEL);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_PARALLEL(), right) autorelease];
      break;
      case GeogebraCommonKernelParserParserConstants_PERPENDICULAR:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PERPENDICULAR);
      right = GeogebraCommonKernelParserParser_listopnode(self);
      result = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_PERPENDICULAR(), right) autorelease];
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 31) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    if (andList == nil) andList = [new_JavaUtilVector_init() autorelease];
    [((JavaUtilVector *) nil_chk(andList)) addWithId:result];
    left = right;
  }
  break_label_9: ;
  if (andList != nil) {
    left = [andList getWithInt:0];
    for (jint i = 1; i < [andList size]; i++) {
      left = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, left, GeogebraCommonPluginOperationEnum_get_AND_INTERVAL(), [andList getWithInt:i]) autorelease];
    }
  }
  {
    return left;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_plusminusnode(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_multterm(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_PLUS:
      case GeogebraCommonKernelParserParserConstants_MINUS:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 32) = self->jj_gen_;
      goto break_label_10;
    }
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_PLUS:
      x = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PLUS);
      break;
      case GeogebraCommonKernelParserParserConstants_MINUS:
      x = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_MINUS);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 33) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    f = GeogebraCommonKernelParserParser_multterm(self);
    if (((GeogebraCommonKernelParserToken *) nil_chk(x))->kind_ == GeogebraCommonKernelParserParserConstants_PLUS) ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_PLUS(), f) autorelease];
    else ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_MINUS(), f) autorelease];
  }
  break_label_10: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_setdifferencenode(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_plusminusnode(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_SET_DIFFERENCE:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 34) = self->jj_gen_;
      goto break_label_11;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SET_DIFFERENCE);
    f = GeogebraCommonKernelParserParser_plusminusnode(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_SET_DIFFERENCE(), f) autorelease];
  }
  break_label_11: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_listopnode(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_setdifferencenode(self);
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_IS_ELEMENT_OF:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_ELEMENT_OF);
    f = GeogebraCommonKernelParserParser_setdifferencenode(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_IS_ELEMENT_OF(), f) autorelease];
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 35) = self->jj_gen_;
    ;
  }
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_multterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_divterm(self);
  while (YES) {
    if (GeogebraCommonKernelParserParser_jj_2_16WithInt_(self, 1)) {
      ;
    }
    else {
      goto break_label_12;
    }
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_MULTIPLY:
      case GeogebraCommonKernelParserParserConstants_VECTORPRODUCT:
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case GeogebraCommonKernelParserParserConstants_MULTIPLY:
        x = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_MULTIPLY);
        break;
        case GeogebraCommonKernelParserParserConstants_VECTORPRODUCT:
        x = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VECTORPRODUCT);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 36) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      f = GeogebraCommonKernelParserParser_divterm(self);
      if (((GeogebraCommonKernelParserToken *) nil_chk(x))->kind_ == GeogebraCommonKernelParserParserConstants_MULTIPLY) {
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), f) autorelease];
      }
      else {
        ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_VECTORPRODUCT(), f) autorelease];
      }
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 37) = self->jj_gen_;
      if (((GeogebraCommonKernelParserToken *) nil_chk(GeogebraCommonKernelParserParser_getTokenWithInt_(self, 1)))->kind_ != GeogebraCommonKernelParserParserConstants_VERTICAL_BAR) {
        f = GeogebraCommonKernelParserParser_powerdivterm(self);
        NSString *leftImg = @"";
        jboolean normal = YES;
        jboolean leftIsExpxTimesVar = NO;
        if ([ret isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
          leftImg = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ret)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getParserFunctions])) getWithNSString:leftImg withInt:1];
          if (op != nil && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:leftImg] == nil && ![@"x" isEqual:leftImg] && ![@"y" isEqual:leftImg] && ![@"z" isEqual:leftImg]) {
            ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, f, op, nil) autorelease];
            normal = NO;
          }
        }
        else if ([ret isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY() && [[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight] isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
          leftIsExpxTimesVar = YES;
          leftImg = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
          GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getParserFunctions])) getWithNSString:leftImg withInt:1];
          if (op != nil && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:leftImg] == nil && ![@"x" isEqual:leftImg] && ![@"y" isEqual:leftImg] && ![@"z" isEqual:leftImg]) {
            [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) setRightWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, f, op, nil) autorelease]];
            normal = NO;
          }
        }
        if (normal && self->GiacParsing_) {
          if ([ret isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) {
            ret = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ret)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], YES, YES) autorelease];
            [((GeogebraCommonKernelArithmeticCommand *) check_class_cast(ret, [GeogebraCommonKernelArithmeticCommand class])) addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(f)) wrap]];
            normal = NO;
          }
          else if (leftIsExpxTimesVar) {
            GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], YES, YES) autorelease];
            [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ret, [GeogebraCommonKernelArithmeticExpressionNode class])))) setRightWithGeogebraCommonKernelArithmeticExpressionValue:cmd];
            [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(f)) wrap]];
            normal = NO;
          }
        }
        if (normal) {
          ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), f) autorelease];
        }
      }
      else {
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
    }
  }
  break_label_12: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_divterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_enunary(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_DIVIDE:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 38) = self->jj_gen_;
      goto break_label_13;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DIVIDE);
    f = GeogebraCommonKernelParserParser_enunary(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_DIVIDE(), f) autorelease];
  }
  break_label_13: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_powerdivterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *x;
  ret = GeogebraCommonKernelParserParser_enpower(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_DIVIDE:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 39) = self->jj_gen_;
      goto break_label_14;
    }
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DIVIDE);
    f = GeogebraCommonKernelParserParser_enunary(self);
    ret = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ret, GeogebraCommonPluginOperationEnum_get_DIVIDE(), f) autorelease];
  }
  break_label_14: ;
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enunary(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> e;
  GeogebraCommonKernelParserToken *c;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_MINUS:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_MINUS);
    e = GeogebraCommonKernelParserParser_enpower(self);
    {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), e) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_PLUS:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PLUS);
    e = GeogebraCommonKernelParserParser_enpower(self);
    {
      return e;
    }
    break;
    case GeogebraCommonKernelParserParserConstants_VERTICAL_BAR:
    case GeogebraCommonKernelParserParserConstants_NOT:
    case GeogebraCommonKernelParserParserConstants_FACTORIAL:
    case GeogebraCommonKernelParserParserConstants_UNDEFINED:
    case GeogebraCommonKernelParserParserConstants_PI:
    case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
    case GeogebraCommonKernelParserParserConstants_E:
    case GeogebraCommonKernelParserParserConstants_IMAGINARY:
    case GeogebraCommonKernelParserParserConstants_DEGREE:
    case GeogebraCommonKernelParserParserConstants_INFINITY:
    case GeogebraCommonKernelParserParserConstants_RAD:
    case GeogebraCommonKernelParserParserConstants_TRUE:
    case GeogebraCommonKernelParserParserConstants_FALSE:
    case GeogebraCommonKernelParserParserConstants_VARX:
    case GeogebraCommonKernelParserParserConstants_VARY:
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_FLOAT:
    case GeogebraCommonKernelParserParserConstants_EFLOAT:
    case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    case GeogebraCommonKernelParserParserConstants_X_FUNC:
    case GeogebraCommonKernelParserParserConstants_Y_FUNC:
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    case GeogebraCommonKernelParserParserConstants_RANDOM_FUNC:
    case GeogebraCommonKernelParserParserConstants_SQRT_SHORT:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL:
    case GeogebraCommonKernelParserParserConstants_TEXT:
    case 73:
    case 75:
    e = GeogebraCommonKernelParserParser_enpower(self);
    {
      return e;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 40) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enpower(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ret, f;
  GeogebraCommonKernelParserToken *c = nil;
  JavaUtilArrayList *exponentList = nil;
  ret = GeogebraCommonKernelParserParser_enfactorial(self);
  while (YES) {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_POWER:
      case GeogebraCommonKernelParserParserConstants_POWERN:
      ;
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 41) = self->jj_gen_;
      goto break_label_15;
    }
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_POWERN:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POWERN);
      f = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
      if (exponentList == nil) exponentList = [new_JavaUtilArrayList_init() autorelease];
      [((JavaUtilArrayList *) nil_chk(exponentList)) addWithId:f];
      break;
      case GeogebraCommonKernelParserParserConstants_POWER:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POWER);
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case GeogebraCommonKernelParserParserConstants_PLUS:
        case GeogebraCommonKernelParserParserConstants_MINUS:
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_MINUS:
          c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_MINUS);
          break;
          case GeogebraCommonKernelParserParserConstants_PLUS:
          c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PLUS);
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 42) = self->jj_gen_;
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
          @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
        }
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 43) = self->jj_gen_;
        ;
      }
      f = GeogebraCommonKernelParserParser_enfactorial(self);
      if (c != nil && c->kind_ == GeogebraCommonKernelParserParserConstants_MINUS) {
        f = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -1.0) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), f) autorelease];
        c = nil;
      }
      if (exponentList == nil) exponentList = [new_JavaUtilArrayList_init() autorelease];
      [((JavaUtilArrayList *) nil_chk(exponentList)) addWithId:f];
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 44) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  break_label_15: ;
  if (exponentList == nil) {
    return ret;
  }
  jint size = [((JavaUtilArrayList *) nil_chk(exponentList)) size];
  id<GeogebraCommonKernelArithmeticExpressionValue> tempEV = [exponentList getWithInt:size - 1];
  for (jint i = size - 2; i >= 0; i--) {
    id<GeogebraCommonKernelArithmeticExpressionValue> prevExponent = [exponentList getWithInt:i];
    tempEV = GeogebraCommonKernelParserParser_makePowerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, prevExponent, tempEV);
  }
  ret = GeogebraCommonKernelParserParser_makePowerWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self, ret, tempEV);
  {
    return ret;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enfactorial(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> en;
  en = GeogebraCommonKernelParserParser_ensqrt(self);
  if (GeogebraCommonKernelParserParser_jj_2_17WithInt_(self, 2147483647)) {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FACTORIAL);
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) isExpressionNode] && [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
      en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getRight], GeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil) autorelease]) autorelease];
    }
    else en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_FACTORIAL(), nil) autorelease];
  }
  else {
    ;
  }
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_ensqrt(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> en;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_SQRT_SHORT:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SQRT_SHORT);
    en = GeogebraCommonKernelParserParser_NOTterm(self);
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(en)) isExpressionNode] && [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION() && ![((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) hasBrackets]) {
      en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft], GeogebraCommonPluginOperationEnum_get_SQRT_SHORT(), nil) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(en, [GeogebraCommonKernelArithmeticExpressionNode class])) getRight]) autorelease];
    }
    else en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_SQRT_SHORT(), nil) autorelease];
    {
      return en;
    }
    break;
    case GeogebraCommonKernelParserParserConstants_VERTICAL_BAR:
    case GeogebraCommonKernelParserParserConstants_NOT:
    case GeogebraCommonKernelParserParserConstants_FACTORIAL:
    case GeogebraCommonKernelParserParserConstants_UNDEFINED:
    case GeogebraCommonKernelParserParserConstants_PI:
    case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
    case GeogebraCommonKernelParserParserConstants_E:
    case GeogebraCommonKernelParserParserConstants_IMAGINARY:
    case GeogebraCommonKernelParserParserConstants_DEGREE:
    case GeogebraCommonKernelParserParserConstants_INFINITY:
    case GeogebraCommonKernelParserParserConstants_RAD:
    case GeogebraCommonKernelParserParserConstants_TRUE:
    case GeogebraCommonKernelParserParserConstants_FALSE:
    case GeogebraCommonKernelParserParserConstants_VARX:
    case GeogebraCommonKernelParserParserConstants_VARY:
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_FLOAT:
    case GeogebraCommonKernelParserParserConstants_EFLOAT:
    case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    case GeogebraCommonKernelParserParserConstants_X_FUNC:
    case GeogebraCommonKernelParserParserConstants_Y_FUNC:
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    case GeogebraCommonKernelParserParserConstants_RANDOM_FUNC:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL:
    case GeogebraCommonKernelParserParserConstants_TEXT:
    case 73:
    case 75:
    en = GeogebraCommonKernelParserParser_NOTterm(self);
    {
      return en;
    }
    {
      return en;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 45) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_NOTterm(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> en;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_NOT:
    case GeogebraCommonKernelParserParserConstants_FACTORIAL:
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_NOT:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_NOT);
      break;
      case GeogebraCommonKernelParserParserConstants_FACTORIAL:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FACTORIAL);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 46) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
    en = GeogebraCommonKernelParserParser_enelement(self);
    {
      return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_NOT(), nil) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_VERTICAL_BAR:
    case GeogebraCommonKernelParserParserConstants_UNDEFINED:
    case GeogebraCommonKernelParserParserConstants_PI:
    case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
    case GeogebraCommonKernelParserParserConstants_E:
    case GeogebraCommonKernelParserParserConstants_IMAGINARY:
    case GeogebraCommonKernelParserParserConstants_DEGREE:
    case GeogebraCommonKernelParserParserConstants_INFINITY:
    case GeogebraCommonKernelParserParserConstants_RAD:
    case GeogebraCommonKernelParserParserConstants_TRUE:
    case GeogebraCommonKernelParserParserConstants_FALSE:
    case GeogebraCommonKernelParserParserConstants_VARX:
    case GeogebraCommonKernelParserParserConstants_VARY:
    case GeogebraCommonKernelParserParserConstants_VARZ:
    case GeogebraCommonKernelParserParserConstants_FLOAT:
    case GeogebraCommonKernelParserParserConstants_EFLOAT:
    case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
    case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
    case GeogebraCommonKernelParserParserConstants_LABEL:
    case GeogebraCommonKernelParserParserConstants_X_FUNC:
    case GeogebraCommonKernelParserParserConstants_Y_FUNC:
    case GeogebraCommonKernelParserParserConstants_Z_FUNC:
    case GeogebraCommonKernelParserParserConstants_RANDOM_FUNC:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
    case GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL:
    case GeogebraCommonKernelParserParserConstants_TEXT:
    case 73:
    case 75:
    en = GeogebraCommonKernelParserParser_enelement(self);
    {
      return en;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 47) = self->jj_gen_;
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
    @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_enelement(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> ev;
  jdouble num;
  GeogebraCommonKernelParserToken *c;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_TRUE:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_TRUE);
    {
      return [new_GeogebraCommonKernelArithmeticMyBoolean_initWithGeogebraCommonKernelKernel_withBoolean_(self->kernel_, YES) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_FALSE:
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FALSE);
    {
      return [new_GeogebraCommonKernelArithmeticMyBoolean_initWithGeogebraCommonKernelKernel_withBoolean_(self->kernel_, NO) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_UNDEFINED:
    case GeogebraCommonKernelParserParserConstants_PI:
    case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
    case GeogebraCommonKernelParserParserConstants_E:
    case GeogebraCommonKernelParserParserConstants_IMAGINARY:
    case GeogebraCommonKernelParserParserConstants_DEGREE:
    case GeogebraCommonKernelParserParserConstants_INFINITY:
    case GeogebraCommonKernelParserParserConstants_RAD:
    case GeogebraCommonKernelParserParserConstants_FLOAT:
    case GeogebraCommonKernelParserParserConstants_EFLOAT:
    case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
    ev = GeogebraCommonKernelParserParser_myDouble(self);
    {
      return ev;
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 48) = self->jj_gen_;
    if (GeogebraCommonKernelParserParser_jj_2_18WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_numberFunction(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_19WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_command(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_20WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_numVecVariable(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_21WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_list(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_22WithInt_(self, 2147483647)) {
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
      ev = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
      ev = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) unwrap];
      if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class])))) setBracketsWithBoolean:YES];
      }
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_23WithInt_(self, 2147483647)) {
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
      ev = GeogebraCommonKernelParserParser_expressionnode(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
      {
        return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev, GeogebraCommonPluginOperationEnum_get_ABS(), nil) autorelease];
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_24WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_cartesianvector(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_25WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_cartesianvector3D(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_26WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_polarvector(self);
      {
        return ev;
      }
    }
    else if (GeogebraCommonKernelParserParser_jj_2_27WithInt_(self, 2147483647)) {
      ev = GeogebraCommonKernelParserParser_sphericalvector(self);
      {
        return ev;
      }
    }
    else {
      {
        NSString *text;
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_TEXT:
          c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_TEXT);
          text = [((GeogebraCommonKernelParserToken *) nil_chk(c))->image_ substring:1 endIndex:((jint) [((NSString *) nil_chk(c->image_)) length]) - 1];
          {
            return [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, text) autorelease];
          }
          break;
          default:
          *IOSIntArray_GetRef(self->jj_la1_, 49) = self->jj_gen_;
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
          @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
        }
      }
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_list(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticMyList *myList;
  id<GeogebraCommonKernelArithmeticExpressionValue> ev;
  if (GeogebraCommonKernelParserParser_jj_2_28WithInt_(self, 5)) {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 73);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 74);
    {
      return [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    }
  }
  else {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 73:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 73);
      ev = GeogebraCommonKernelParserParser_cmdexpression(self);
      myList = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      [myList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:ev];
      {
        while (YES) {
          switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
            case GeogebraCommonKernelParserParserConstants_COMMA:
            ;
            break;
            default:
            *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 50) = self->jj_gen_;
            goto break_label_16;
          }
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
          ev = GeogebraCommonKernelParserParser_cmdexpression(self);
          [myList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:ev];
        }
        break_label_16: ;
      }
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 74);
      {
        return myList;
      }
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 51) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_numVecVariable(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelGeosGeoElement *geo;
  GeogebraCommonKernelParserToken *c;
  id<GeogebraCommonKernelArithmeticExpressionValue> ev;
  switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
    case GeogebraCommonKernelParserParserConstants_VARX:
    c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARX);
    if (self->GeoGebraCASParsing_) {
      return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
    }
    else {
      return [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_VARY:
    c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARY);
    if (self->GeoGebraCASParsing_) {
      return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
    }
    else {
      return [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
    }
    break;
    case GeogebraCommonKernelParserParserConstants_VARZ:
    c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARZ);
    if (self->GeoGebraCASParsing_ || [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:@"z"] != nil) {
      {
        return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
      }
    }
    else {
      {
        return [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
      }
    }
    break;
    default:
    *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 53) = self->jj_gen_;
    if (GeogebraCommonKernelParserParser_jj_2_29WithInt_(self, 3)) {
      ev = GeogebraCommonKernelParserParser_spreadsheetRange(self);
      {
        return ev;
      }
    }
    else {
      {
        jboolean lookforEulerImaginary;
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
          case GeogebraCommonKernelParserParserConstants_LABEL:
          switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
            case GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL:
            c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL);
            break;
            case GeogebraCommonKernelParserParserConstants_LABEL:
            c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LABEL);
            break;
            default:
            *IOSIntArray_GetRef(self->jj_la1_, 52) = self->jj_gen_;
            GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
            @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
          }
          lookforEulerImaginary = NO;
          if (self->GeoGebraCASParsing_) {
            lookforEulerImaginary = NO;
          }
          else if (self->ExternalCASParsing_) {
            lookforEulerImaginary = NO;
          }
          else {
            lookforEulerImaginary = YES;
          }
          if (lookforEulerImaginary) {
            if ([((NSString *) nil_chk(((GeogebraCommonKernelParserToken *) nil_chk(c))->image_)) isEqual:@"e"] && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:c->image_] == nil) {
              {
                return GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(self->kernel_);
              }
            }
            else if ([c->image_ isEqual:@"i"] && [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:c->image_] == nil) {
              {
                return [self->kernel_ getImaginaryUnit];
              }
            }
          }
          {
            return [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
          }
          break;
          default:
          *IOSIntArray_GetRef(self->jj_la1_, 54) = self->jj_gen_;
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
          @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
        }
      }
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticCommand *GeogebraCommonKernelParserParser_spreadsheetRange(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *c, *c2;
  c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 70);
  c2 = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL);
  GeogebraCommonKernelArithmeticExpressionNode *startCell = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease]) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *endCell = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, ((GeogebraCommonKernelParserToken *) nil_chk(c2))->image_) autorelease]) autorelease];
  GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, @"CellRange", NO, !self->ExternalCASParsing_) autorelease];
  [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:startCell];
  [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:endCell];
  {
    return cmd;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelParserParser_myDouble(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *c;
  GeogebraCommonKernelArithmeticMyDouble *d;
  jdouble val;
  {
    GeogebraCommonKernelGeosGeoVec2D *z;
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_FLOAT:
      case GeogebraCommonKernelParserParserConstants_EFLOAT:
      case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case GeogebraCommonKernelParserParserConstants_FLOAT:
        case GeogebraCommonKernelParserParserConstants_EFLOAT:
        switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
          case GeogebraCommonKernelParserParserConstants_FLOAT:
          c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FLOAT);
          break;
          case GeogebraCommonKernelParserParserConstants_EFLOAT:
          c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EFLOAT);
          break;
          default:
          *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 55) = self->jj_gen_;
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
          @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
        }
        GeogebraCommonKernelParserToken_set_image_(nil_chk(c), [((NSString *) nil_chk(c->image_)) replaceFirst:@"e" withReplacement:@"E"]);
        val = GeogebraCommonKernelArithmeticMyDouble_parseDoubleWithGeogebraCommonMainLocalization_withNSString_(self->loc_, c->image_);
        break;
        case GeogebraCommonKernelParserParserConstants_PERCENTAGE:
        c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PERCENTAGE);
        val = GeogebraCommonKernelArithmeticMyDouble_parsePercentageWithGeogebraCommonMainLocalization_withNSString_(self->loc_, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 56) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      if (self->ExternalCASParsing_ || self->GeoGebraCASParsing_) {
        {
          return [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, val, ((GeogebraCommonKernelParserToken *) nil_chk(c))->image_) autorelease];
        }
      }
      else {
        {
          return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, val) autorelease];
        }
      }
      break;
      case GeogebraCommonKernelParserParserConstants_DEGREE:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DEGREE);
      d = [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, JavaLangMath_PI / 180.0, @"\u00b0") autorelease];
      [d setAngle];
      {
        return d;
      }
      break;
      case GeogebraCommonKernelParserParserConstants_RAD:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_RAD);
      d = [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, 1.0, @"rad") autorelease];
      [d setAngle];
      {
        return d;
      }
      break;
      case GeogebraCommonKernelParserParserConstants_PI:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PI);
      {
        return [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, JavaLangMath_PI, GeogebraCommonUtilUnicode_get_PI_STRING_()) autorelease];
      }
      break;
      case GeogebraCommonKernelParserParserConstants_EULER_GAMMA:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EULER_GAMMA);
      {
        return [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, 0.57721566490153286, GeogebraCommonUtilUnicode_get_EULER_GAMMA_STRING_()) autorelease];
      }
      break;
      case GeogebraCommonKernelParserParserConstants_E:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_E);
      {
        return [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self->kernel_, JavaLangMath_E, GeogebraCommonUtilUnicode_get_EULER_STRING_()) autorelease];
      }
      break;
      case GeogebraCommonKernelParserParserConstants_IMAGINARY:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IMAGINARY);
      z = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_withDouble_withDouble_(self->kernel_, 0, 1) autorelease];
      [z setModeWithInt:GeogebraCommonKernelKernel_COORD_COMPLEX];
      {
        return z;
      }
      break;
      case GeogebraCommonKernelParserParserConstants_INFINITY:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_INFINITY);
      {
        return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, JavaLangDouble_POSITIVE_INFINITY) autorelease];
      }
      break;
      case GeogebraCommonKernelParserParserConstants_UNDEFINED:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_UNDEFINED);
      {
        return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, JavaLangDouble_NaN) autorelease];
      }
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 57) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_numberFunction(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelArithmeticExpressionNode *en, *en2, *en3, *en4;
  id<GeogebraCommonKernelArithmeticExpressionValue> ev;
  GeogebraCommonKernelArithmeticMyList *myList;
  GeogebraCommonKernelParserToken *c, *flabel, *fvar1, *fvar2;
  NSString *conslabel;
  GeogebraCommonKernelArithmeticMySpecialDouble *myconst;
  {
    jint pos;
    GeogebraCommonKernelArithmeticExpressionNode *ret;
    GeogebraCommonKernelConstruction *cons;
    GeogebraCommonKernelGeosGeoNumeric *randNum;
    NSString *funcName;
    jboolean forceCommand;
    GeogebraCommonKernelGeosGeoElement *geo;
    GeogebraCommonKernelGeosGeoElement *cell;
    jint order;
    jint index;
    NSString *label;
    GeogebraCommonKernelArithmeticVariable *geoVar;
    id<GeogebraCommonKernelArithmeticExpressionValue> geoExp;
    jint argNumber;
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case GeogebraCommonKernelParserParserConstants_X_FUNC:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_X_FUNC);
      en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case 71:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
        break;
        case 72:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 58) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      if (self->GeoGebraCASParsing_) {
        NSString *funName = [((GeogebraCommonKernelParserToken *) nil_chk(c))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(c->image_)) length]) - 1];
        GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, funName, YES, !self->ExternalCASParsing_) autorelease];
        [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cmd) autorelease];
        }
      }
      else {
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
        }
      }
      break;
      case GeogebraCommonKernelParserParserConstants_Y_FUNC:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Y_FUNC);
      en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case 71:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
        break;
        case 72:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 59) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      if (self->GeoGebraCASParsing_) {
        NSString *funName = [((GeogebraCommonKernelParserToken *) nil_chk(c))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(c->image_)) length]) - 1];
        GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(self->kernel_, funName, YES) autorelease];
        [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cmd) autorelease];
        }
      }
      else {
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
        }
      }
      break;
      case GeogebraCommonKernelParserParserConstants_Z_FUNC:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Z_FUNC);
      en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case 71:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
        break;
        case 72:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 60) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      if (self->GeoGebraCASParsing_) {
        NSString *funName = [((GeogebraCommonKernelParserToken *) nil_chk(c))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(c->image_)) length]) - 1];
        GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, funName, YES, !self->ExternalCASParsing_) autorelease];
        [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:en];
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cmd) autorelease];
        }
      }
      else {
        GeogebraCommonKernelGeosGeoElement *userFun = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:@"z"];
        if ([GeogebraCommonKernelArithmeticEvaluatable_class_() isInstance:userFun]) {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, userFun, GeogebraCommonPluginOperationEnum_get_FUNCTION(), en) autorelease];
          }
        }
        else {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, en, GeogebraCommonPluginOperationEnum_get_ZCOORD(), nil) autorelease];
          }
        }
      }
      break;
      case GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL);
      en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case 71:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
        break;
        case 72:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 61) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      pos = ((jint) [((NSString *) nil_chk(((GeogebraCommonKernelParserToken *) nil_chk(c))->image_)) length]) - 2;
      while (pos >= 0 && (GeogebraCommonUtilUnicode_isSuperscriptDigitWithChar_([c->image_ charAtWithInt:pos]) || GeogebraCommonUtilUnicode_Superscript_Minus == [c->image_ charAtWithInt:pos])) {
        pos--;
      }
      ret = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) handleTrigPowerWithNSString:c->image_ withGeogebraCommonKernelArithmeticExpressionNode:en withNSString:[c->image_ substring:0 endIndex:pos + 1]];
      if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ret)) getOperation] == GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION()) [((JavaUtilArrayList *) nil_chk(self->undecided_)) addWithId:ret];
      {
        return ret;
      }
      break;
      case GeogebraCommonKernelParserParserConstants_RANDOM_FUNC:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_RANDOM_FUNC);
      cons = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
      randNum = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithGeogebraCommonKernelGeosGeoElement:randNum];
      [randNum setValueWithDouble:[((GeogebraCommonMainApp *) nil_chk(self->app_)) getRandomNumber]];
      {
        return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, randNum, GeogebraCommonPluginOperationEnum_get_RANDOM(), nil) autorelease];
      }
      break;
      case GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL:
      c = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
      en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
      myList = [new_GeogebraCommonKernelArithmeticMyList_initWithGeogebraCommonKernelKernel_withBoolean_(self->kernel_, YES) autorelease];
      [myList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:en];
      {
        while (YES) {
          switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
            case GeogebraCommonKernelParserParserConstants_COMMA:
            ;
            break;
            default:
            *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 62) = self->jj_gen_;
            goto break_label_17;
          }
          GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
          en = GeogebraCommonKernelParserParser_expressionOrEquation(self);
          [myList addListElementWithGeogebraCommonKernelArithmeticExpressionValue:en];
        }
        break_label_17: ;
      }
      switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
        case 71:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
        break;
        case 72:
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 72);
        break;
        default:
        *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 63) = self->jj_gen_;
        GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
        @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
      }
      funcName = [((GeogebraCommonKernelParserToken *) nil_chk(c))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(c->image_)) length]) - 1];
      if (self->GiacParsing_) {
        en = GeogebraCommonKernelParserCashandlersCommandDispatcherGiac_processCommandWithNSString_withGeogebraCommonKernelArithmeticGetItem_withGeogebraCommonKernelKernel_(funcName, myList, self->kernel_);
        if (en != nil) {
          {
            return en;
          }
        }
      }
      forceCommand = ([c->image_ charAtWithInt:((jint) [c->image_ length]) - 1] == '[');
      geo = nil;
      cell = nil;
      order = 0;
      index = ((jint) [((NSString *) nil_chk(funcName)) length]) - 1;
      label = funcName;
      if (!forceCommand) {
        geo = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:funcName];
        cell = [self->kernel_ lookupCasCellLabelWithNSString:funcName];
        if (cell == nil && (geo == nil || !([geo isGeoFunction] || [geo isGeoCurveCartesian]))) {
          while (index >= 0 && [c->image_ charAtWithInt:index] == '\'') {
            order++;
            index--;
          }
          while (index < ((jint) [funcName length])) {
            label = [funcName substring:0 endIndex:index + 1];
            geo = [self->kernel_ lookupLabelWithNSString:label];
            cell = [self->kernel_ lookupCasCellLabelWithNSString:label];
            if (cell != nil || (geo != nil && ([geo isGeoFunction] || [geo isGeoCurveCartesian]))) {
              break;
            }
            order--;
            index++;
          }
        }
        if ([((GeogebraCommonKernelConstruction *) nil_chk([self->kernel_ getConstruction])) isRegistredFunctionVariableWithNSString:funcName]) {
          GeogebraCommonKernelArithmeticExpressionNode *expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, funcName) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
          [((JavaUtilArrayList *) nil_chk(self->undecided_)) addWithId:expr];
          {
            return expr;
          }
        }
      }
      if (forceCommand || (geo == nil && cell == nil)) {
        GeogebraCommonPluginOperationEnum *op = [((GeogebraCommonKernelParserCashandlersParserFunctions *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getParserFunctions])) getWithNSString:funcName withInt:[myList size]];
        if (op != nil) {
          return GeogebraCommonKernelParserParser_buildOpNodeWithGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticMyList_(self, op, myList);
        }
        GeogebraCommonKernelArithmeticCommand *cmd = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self->kernel_, funcName, YES, !self->ExternalCASParsing_) autorelease];
        for (jint i = 0; i < [myList size]; i++) {
          [cmd addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([myList getListElementWithInt:i], [GeogebraCommonKernelArithmeticExpressionNode class])];
        }
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cmd) autorelease];
        }
      }
      if (cell != nil && order > 0) {
        GeogebraCommonKernelArithmeticExpressionNode *derivative = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cell, GeogebraCommonPluginOperationEnum_get_DERIVATIVE(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, order) autorelease]) autorelease];
        {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, derivative, GeogebraCommonPluginOperationEnum_get_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
        }
      }
      if (cell != nil && (geo == nil || [geo isGeoLine])) {
        if (((IOSObjectArray *) nil_chk([((GeogebraCommonKernelGeosGeoCasCell *) check_class_cast(cell, [GeogebraCommonKernelGeosGeoCasCell class])) getFunctionVariables]))->size_ < 2) {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cell, GeogebraCommonPluginOperationEnum_get_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
          }
        }
        else {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, cell, GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), myList) autorelease];
          }
        }
      }
      geoVar = [new_GeogebraCommonKernelArithmeticVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, label) autorelease];
      geoExp = [geoVar resolveAsExpressionValue];
      argNumber = [myList size];
      if (order > 0) {
        GeogebraCommonKernelArithmeticExpressionNode *derivative = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geoExp, GeogebraCommonPluginOperationEnum_get_DERIVATIVE(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, order) autorelease]) autorelease];
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoFunction]) {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, derivative, GeogebraCommonPluginOperationEnum_get_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
          }
        }
        else if ([geo isGeoCurveCartesian]) {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, derivative, GeogebraCommonPluginOperationEnum_get_VEC_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
          }
        }
        else {
          IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"FunctionExpected", funcName } count:2 type:NSString_class_()];
          {
            @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, str) autorelease];
          }
        }
      }
      else {
        if ([GeogebraCommonKernelArithmeticEvaluatable_class_() isInstance:geo]) {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geoExp, GeogebraCommonPluginOperationEnum_get_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
        }
        else if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) {
          {
            return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geoExp, GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR(), myList) autorelease];
          }
        }
        else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoCurveCartesian]) {
          return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geoExp, GeogebraCommonPluginOperationEnum_get_VEC_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
        }
        else if ([geo isGeoList]) {
          IOSObjectArray *str = [IOSObjectArray arrayWithObjects:(id[]){ @"FunctionExpected", funcName } count:2 type:NSString_class_()];
          {
            @throw [new_GeogebraCommonMainMyParseError_initWithGeogebraCommonMainLocalization_withNSStringArray_(self->loc_, str) autorelease];
          }
        }
        GeogebraCommonKernelArithmeticExpressionNode *expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, geoExp, GeogebraCommonPluginOperationEnum_get_MULTIPLY_OR_FUNCTION(), [myList getListElementWithInt:0]) autorelease];
        [((JavaUtilArrayList *) nil_chk(self->undecided_)) addWithId:expr];
        {
          return expr;
        }
      }
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 64) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticVectorValue> GeogebraCommonKernelParserParser_cartesianvector(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> x, y;
  if (GeogebraCommonKernelParserParser_jj_2_30WithInt_(self, 2147483647)) {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
    x = GeogebraCommonKernelParserParser_expression(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    y = GeogebraCommonKernelParserParser_expression(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  }
  else {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 75:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
      x = GeogebraCommonKernelParserParser_expression(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
      y = GeogebraCommonKernelParserParser_expression(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 65) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  {
    return [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, x, y) autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmetic3DVector3DValue> GeogebraCommonKernelParserParser_cartesianvector3D(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> x, y, z;
  if (GeogebraCommonKernelParserParser_jj_2_31WithInt_(self, 2147483647)) {
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
    x = GeogebraCommonKernelParserParser_expression(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    y = GeogebraCommonKernelParserParser_expression(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA);
    z = GeogebraCommonKernelParserParser_expression(self);
    GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  }
  else {
    switch ((self->jj_ntk__ == -1) ? GeogebraCommonKernelParserParser_jj_ntk(self) : self->jj_ntk__) {
      case 75:
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
      x = GeogebraCommonKernelParserParser_expression(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
      y = GeogebraCommonKernelParserParser_expression(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
      z = GeogebraCommonKernelParserParser_expression(self);
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
      break;
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 66) = self->jj_gen_;
      GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, -1);
      @throw [new_GeogebraCommonKernelParserParseException_init() autorelease];
    }
  }
  {
    return [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, x, y, z) autorelease];
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmeticVectorValue> GeogebraCommonKernelParserParser_polarvector(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> r, phi;
  GeogebraCommonKernelArithmeticMyVecNode *v;
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
  r = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
  phi = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  v = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  [v setPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:r withGeogebraCommonKernelArithmeticExpressionValue:phi];
  {
    return v;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

id<GeogebraCommonKernelArithmetic3DVector3DValue> GeogebraCommonKernelParserParser_sphericalvector(GeogebraCommonKernelParserParser *self) {
  id<GeogebraCommonKernelArithmeticExpressionValue> r, phi, theta;
  GeogebraCommonKernelArithmetic3DMyVec3DNode *v;
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 75);
  r = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
  theta = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
  phi = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  v = [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  [v setSphericalPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:r withGeogebraCommonKernelArithmeticExpressionValue:theta withGeogebraCommonKernelArithmeticExpressionValue:phi];
  {
    return v;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cartesianvector_special(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *l;
  id<GeogebraCommonKernelArithmeticExpressionValue> x, y;
  l = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
  x = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
  y = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, x, y) autorelease]) autorelease];
  [en setLabelWithNSString:[((GeogebraCommonKernelParserToken *) nil_chk(l))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(l->image_)) length]) - 1]];
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_cartesianvector3D_special(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *l;
  id<GeogebraCommonKernelArithmeticExpressionValue> x, y, z;
  l = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
  x = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
  y = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
  z = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmetic3DMyVec3DNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, x, y, z) autorelease]) autorelease];
  [en setLabelWithNSString:[((GeogebraCommonKernelParserToken *) nil_chk(l))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(l->image_)) length]) - 1]];
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelParserParser_polarvector_special(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *l;
  id<GeogebraCommonKernelArithmeticExpressionValue> r, phi;
  l = GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL);
  r = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR);
  phi = GeogebraCommonKernelParserParser_expression(self);
  GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(self, 71);
  GeogebraCommonKernelArithmeticMyVecNode *v = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  [v setPolarCoordsWithGeogebraCommonKernelArithmeticExpressionValue:r withGeogebraCommonKernelArithmeticExpressionValue:phi];
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, v) autorelease];
  [en setLabelWithNSString:[((GeogebraCommonKernelParserToken *) nil_chk(l))->image_ substring:0 endIndex:((jint) [((NSString *) nil_chk(l->image_)) length]) - 1]];
  {
    return en;
  }
  @throw [new_JavaLangError_initWithNSString_(@"Missing return statement in function") autorelease];
}

jboolean GeogebraCommonKernelParserParser_jj_2_1WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_1(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 0, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_2WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_2(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 1, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_3WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_3(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 2, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_4WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_4(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 3, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_5WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_5(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 4, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_6WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_6(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 5, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_7WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_7(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 6, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_8WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_8(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 7, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_9WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_9(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 8, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_10WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_10(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 9, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_11WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_11(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 10, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_12WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_12(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 11, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_13WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_13(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 12, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_14WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_14(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 13, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_15WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_15(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 14, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_16WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_16(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 15, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_17WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_17(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 16, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_18WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_18(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 17, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_19WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_19(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 18, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_20WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_20(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 19, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_21WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_21(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 20, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_22WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_22(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 21, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_23WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_23(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 22, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_24WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_24(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 23, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_25WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_25(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 24, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_26WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_26(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 25, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_27WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_27(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 26, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_28WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_28(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 27, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_29WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_29(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 28, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_30WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_30(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 29, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_2_31WithInt_(GeogebraCommonKernelParserParser *self, jint xla) {
  self->jj_la_ = xla;
  GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->token_));
  @try {
    return !GeogebraCommonKernelParserParser_jj_3_31(self);
  }
  @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    return YES;
  }
  @finally {
    GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(self, 30, xla);
  }
}

jboolean GeogebraCommonKernelParserParser_jj_3R_85(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF_STRICT)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_84(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_SUBSET_OF)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_83(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_NOT_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_79(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_92(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_93(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_92(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SQRT_SHORT)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_96(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_54(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Y_FUNC)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_82(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL_BOOLEAN)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_78(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_82(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_83(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_84(self)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_3R_85(self)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_3R_86(self)) {
            GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
            if (GeogebraCommonKernelParserParser_jj_3R_87(self)) {
              GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
              if (GeogebraCommonKernelParserParser_jj_3R_88(self)) {
                GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                if (GeogebraCommonKernelParserParser_jj_3R_89(self)) {
                  GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                  if (GeogebraCommonKernelParserParser_jj_3R_90(self)) {
                    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                    if (GeogebraCommonKernelParserParser_jj_3R_91(self)) return YES;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_17(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FACTORIAL)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_74(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_78(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_70(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_53(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_X_FUNC)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_33(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_53(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_54(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_55(self)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_3R_56(self)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_3R_57(self)) {
            GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
            if (GeogebraCommonKernelParserParser_jj_3R_58(self)) return YES;
          }
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_126(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FACTORIAL)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_76(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_79(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_126(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_69(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_48(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_70(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_68(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_OR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_67(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_45(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_67(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_68(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_47(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 73)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_69(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 74)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_24(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_47(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_48(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_122(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_UNDEFINED)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_121(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_INFINITY)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_28(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_50(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_75(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_AND)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_74(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_49(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_67(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_74(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_75(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_120(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IMAGINARY)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_119(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_E)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_118(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EULER_GAMMA)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_27(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_25(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_49(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_50(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_64(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_117(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PI)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_129(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 26)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 25)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_36(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_64(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_116(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_RAD)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_26(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_115(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DEGREE)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_128(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POWER)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_129(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  if (GeogebraCommonKernelParserParser_jj_3R_76(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_30(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 48)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 49)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 50)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 57)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 56)) return YES;
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_20(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 50)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 56)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 57)) return YES;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_127(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POWERN)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_123(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_127(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_128(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_125(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PERCENTAGE)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_46(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IMPLICATION)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_45(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_71(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_76(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_123(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_40(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_23(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_45(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_46(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_124(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 51)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 52)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_112(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_114(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_115(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_116(self)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_3R_117(self)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_3R_118(self)) {
            GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
            if (GeogebraCommonKernelParserParser_jj_3R_119(self)) {
              GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
              if (GeogebraCommonKernelParserParser_jj_3R_120(self)) {
                GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                if (GeogebraCommonKernelParserParser_jj_3R_121(self)) {
                  GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                  if (GeogebraCommonKernelParserParser_jj_3R_122(self)) return YES;
                }
              }
            }
          }
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_114(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_124(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_125(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_111(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_71(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_39(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_POLAR_SEPARATOR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_110(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PLUS)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_71(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_103(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_109(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_110(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_111(self)) return YES;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_109(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_MINUS)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_71(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_19(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 70)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SPREADSHEET_LABEL)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_31(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_66(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_38(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3_31(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_66(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_51(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_30(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_113(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DIVIDE)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_103(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_52(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_71(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_113(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_30(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_65(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_41(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_37(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3_30(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_65(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_44(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_29(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 66)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 62)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_30(self)) return YES;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_51(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 6)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_104(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_DIVIDE)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_103(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_101(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_103(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_104(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_42(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_62(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 56)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 57)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_15(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_29(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_19(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_14(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_21(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_61(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARZ)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_13(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_30(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 70)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 6)) return YES;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_12(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 70)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 6)) return YES;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_3R_21(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_60(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARY)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_34(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_59(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_60(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_61(self)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_3_29(self)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_3R_62(self)) return YES;
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_59(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VARX)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_11(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_29(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_43(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_30(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_73(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_32(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_52(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_18(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 66)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 62)) return YES;
  }
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 48)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 49)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_42(self)) return YES;
    }
  }
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_43(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 24)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_44(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_31(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 29)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 30)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_101(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_16(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_31(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    self->jj_lookingAhead_ = YES;
    self->jj_semLA_ = (((GeogebraCommonKernelParserToken *) nil_chk(GeogebraCommonKernelParserParser_getTokenWithInt_(self, 1)))->kind_ != GeogebraCommonKernelParserParserConstants_VERTICAL_BAR);
    self->jj_lookingAhead_ = NO;
    if (!self->jj_semLA_ || GeogebraCommonKernelParserParser_jj_3R_32(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_97(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_101(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3_16(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_63(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 73)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_73(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 74)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_10(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_28(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_35(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3_28(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_63(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_28(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 73)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 74)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_8(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_26(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_9(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_27(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_7(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_24(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 24)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_25(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_6(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_81(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_IS_ELEMENT_OF)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_80(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_77(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_80(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_81(self)) GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_108(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_TEXT)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_27(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_40(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_26(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_39(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_95(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_SET_DIFFERENCE)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_94(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_25(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_38(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_80(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_94(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_95(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_24(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_37(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_23(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_VERTICAL_BAR)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_98(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 25)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 26)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_97(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_22(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 75)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_94(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_97(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_98(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_21(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_35(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_5(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_20(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_34(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_22(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_72(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_COMMA)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_4(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 70)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_22(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_19(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_25(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_3(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_20(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 70)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 5)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_21(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_18(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_33(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_107(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_112(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_58(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  while (YES) {
    xsp = self->jj_scanpos_;
    if (GeogebraCommonKernelParserParser_jj_3R_72(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      break;
    }
  }
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_1(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_18(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3_2(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_19(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_106(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FALSE)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_57(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_RANDOM_FUNC)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_102(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_105(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_106(self)) {
      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
      if (GeogebraCommonKernelParserParser_jj_3R_107(self)) {
        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
        if (GeogebraCommonKernelParserParser_jj_3_18(self)) {
          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
          if (GeogebraCommonKernelParserParser_jj_3_19(self)) {
            GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
            if (GeogebraCommonKernelParserParser_jj_3_20(self)) {
              GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
              if (GeogebraCommonKernelParserParser_jj_3_21(self)) {
                GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                if (GeogebraCommonKernelParserParser_jj_3_22(self)) {
                  GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                  if (GeogebraCommonKernelParserParser_jj_3_23(self)) {
                    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                    if (GeogebraCommonKernelParserParser_jj_3_24(self)) {
                      GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                      if (GeogebraCommonKernelParserParser_jj_3_25(self)) {
                        GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                        if (GeogebraCommonKernelParserParser_jj_3_26(self)) {
                          GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                          if (GeogebraCommonKernelParserParser_jj_3_27(self)) {
                            GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
                            if (GeogebraCommonKernelParserParser_jj_3R_108(self)) return YES;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_105(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_TRUE)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_91(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PERPENDICULAR)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_41(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_90(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_PARALLEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_56(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_FUNCTION_POWER_LABEL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_89(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_GREATER_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_100(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_102(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_21(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_23(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_88(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LESS_EQUAL)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_96(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_3R_99(self)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_3R_100(self)) return YES;
  }
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_99(GeogebraCommonKernelParserParser *self) {
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 8)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 32)) return YES;
  }
  if (GeogebraCommonKernelParserParser_jj_3R_102(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_87(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_GREATER)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_93(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_3R_96(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_86(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_LESS)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_77(self)) return YES;
  return NO;
}

jboolean GeogebraCommonKernelParserParser_jj_3R_55(GeogebraCommonKernelParserParser *self) {
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, GeogebraCommonKernelParserParserConstants_Z_FUNC)) return YES;
  if (GeogebraCommonKernelParserParser_jj_3R_36(self)) return YES;
  GeogebraCommonKernelParserToken *xsp;
  xsp = self->jj_scanpos_;
  if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 71)) {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, xsp);
    if (GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(self, 72)) return YES;
  }
  return NO;
}

void GeogebraCommonKernelParserParser_jj_la1_init_0() {
  GeogebraCommonKernelParserParser_initialize();
  JreStrongAssignAndConsume(&GeogebraCommonKernelParserParser_jj_la1_0_, nil, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x20, (jint) 0x20, (jint) 0x1000020, (jint) 0x1, (jint) 0x60, (jint) 0x60, (jint) 0x1, (jint) 0x1, (jint) 0x1, (jint) 0x1, (jint) 0x0, (jint) 0x0, (jint) 0x6000180, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x1000020, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x60, (jint) 0x800, (jint) 0x1000000, (jint) 0x400, (jint) 0x200, (jint) 0xfdb000, (jint) 0xfdb000, (jint) 0x6000000, (jint) 0x6000000, (jint) 0x20000, (jint) 0x4000, (jint) 0x60000000, (jint) 0x60000000, -0x7fffffff - 1, -0x7fffffff - 1, (jint) 0x6000180, (jint) 0x10000000, (jint) 0x6000000, (jint) 0x6000000, (jint) 0x10000000, (jint) 0x180, (jint) 0x100, (jint) 0x180, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0 } count:67]);
}

void GeogebraCommonKernelParserParser_jj_la1_init_1() {
  GeogebraCommonKernelParserParser_initialize();
  JreStrongAssignAndConsume(&GeogebraCommonKernelParserParser_jj_la1_1_, nil, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x3040000, (jint) 0x3070000, (jint) 0xf33f37f3, (jint) 0x8000, (jint) 0x0, (jint) 0x8000, (jint) 0x8000, (jint) 0x3040000, (jint) 0x40000000, (jint) 0x3070000, (jint) 0x8000, (jint) 0x0, (jint) 0x8000, (jint) 0x40000000, (jint) 0x8000, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0xf33f37f3, (jint) 0x4, (jint) 0x0, (jint) 0x0, (jint) 0x4, (jint) 0xf33f37f3, (jint) 0x1, (jint) 0xf33f37f3, (jint) 0x3837f2, (jint) 0x0, (jint) 0x8000, (jint) 0x0, (jint) 0x3000000, (jint) 0x70000, (jint) 0x3000000, (jint) 0x180000, (jint) 0x380000, (jint) 0x3807f2, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x8000, (jint) 0x0, (jint) 0xf0000000, (jint) 0x0, (jint) 0x0 } count:67]);
}

void GeogebraCommonKernelParserParser_jj_la1_init_2() {
  GeogebraCommonKernelParserParser_initialize();
  JreStrongAssignAndConsume(&GeogebraCommonKernelParserParser_jj_la1_2_, nil, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x40, (jint) 0x40, (jint) 0x0, (jint) 0x1, (jint) 0x40, (jint) 0x40, (jint) 0x1, (jint) 0x1, (jint) 0x1, (jint) 0x1, (jint) 0x0, (jint) 0x0, (jint) 0xa1e, (jint) 0x0, (jint) 0x180, (jint) 0x0, (jint) 0x0, (jint) 0x200, (jint) 0x4, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x4, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0xa1e, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0xa1e, (jint) 0x0, (jint) 0xa1c, (jint) 0x0, (jint) 0x10, (jint) 0x0, (jint) 0x200, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x0, (jint) 0x180, (jint) 0x180, (jint) 0x180, (jint) 0x180, (jint) 0x0, (jint) 0x180, (jint) 0xc, (jint) 0x800, (jint) 0x800 } count:67]);
}

void GeogebraCommonKernelParserParser_initWithJavaIoInputStream_(GeogebraCommonKernelParserParser *self, JavaIoInputStream *stream) {
  GeogebraCommonKernelParserParser_initWithJavaIoInputStream_withNSString_(self, stream, nil);
}

GeogebraCommonKernelParserParser *new_GeogebraCommonKernelParserParser_initWithJavaIoInputStream_(JavaIoInputStream *stream) {
  GeogebraCommonKernelParserParser *self = [GeogebraCommonKernelParserParser alloc];
  GeogebraCommonKernelParserParser_initWithJavaIoInputStream_(self, stream);
  return self;
}

void GeogebraCommonKernelParserParser_initWithJavaIoInputStream_withNSString_(GeogebraCommonKernelParserParser *self, JavaIoInputStream *stream, NSString *encoding) {
  NSObject_init(self);
  self->GeoGebraCASParsing_ = NO;
  self->ExternalCASParsing_ = NO;
  self->GiacParsing_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_undecided_(self, new_JavaUtilArrayList_init());
  self->jj_lookingAhead_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:67]);
  GeogebraCommonKernelParserParser_setAndConsume_jj_2_rtns_(self, [IOSObjectArray newArrayWithLength:31 type:GeogebraCommonKernelParserParser_JJCalls_class_()]);
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  GeogebraCommonKernelParserParser_setAndConsume_jj_ls_(self, new_GeogebraCommonKernelParserParser_LookaheadSuccess_init());
  GeogebraCommonKernelParserParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  GeogebraCommonKernelParserParser_setAndConsume_jj_lasttokens_(self, [IOSIntArray newArrayWithLength:100]);
  @try {
    GeogebraCommonKernelParserParser_setAndConsume_jj_input_stream_(self, new_GeogebraCommonKernelParserSimpleCharStream_initWithJavaIoInputStream_withNSString_withInt_withInt_(stream, encoding, 1, 1));
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw [new_JavaLangRuntimeException_initWithJavaLangThrowable_(e) autorelease];
  }
  GeogebraCommonKernelParserParser_setAndConsume_token_source_(self, new_GeogebraCommonKernelParserParserTokenManager_initWithGeogebraCommonKernelParserSimpleCharStream_(self->jj_input_stream_));
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) IOSObjectArray_SetAndConsume(self->jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

GeogebraCommonKernelParserParser *new_GeogebraCommonKernelParserParser_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  GeogebraCommonKernelParserParser *self = [GeogebraCommonKernelParserParser alloc];
  GeogebraCommonKernelParserParser_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}

void GeogebraCommonKernelParserParser_initWithJavaIoReader_(GeogebraCommonKernelParserParser *self, JavaIoReader *stream) {
  NSObject_init(self);
  self->GeoGebraCASParsing_ = NO;
  self->ExternalCASParsing_ = NO;
  self->GiacParsing_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_undecided_(self, new_JavaUtilArrayList_init());
  self->jj_lookingAhead_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:67]);
  GeogebraCommonKernelParserParser_setAndConsume_jj_2_rtns_(self, [IOSObjectArray newArrayWithLength:31 type:GeogebraCommonKernelParserParser_JJCalls_class_()]);
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  GeogebraCommonKernelParserParser_setAndConsume_jj_ls_(self, new_GeogebraCommonKernelParserParser_LookaheadSuccess_init());
  GeogebraCommonKernelParserParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  GeogebraCommonKernelParserParser_setAndConsume_jj_lasttokens_(self, [IOSIntArray newArrayWithLength:100]);
  GeogebraCommonKernelParserParser_setAndConsume_jj_input_stream_(self, new_GeogebraCommonKernelParserSimpleCharStream_initWithJavaIoReader_withInt_withInt_(stream, 1, 1));
  GeogebraCommonKernelParserParser_setAndConsume_token_source_(self, new_GeogebraCommonKernelParserParserTokenManager_initWithGeogebraCommonKernelParserSimpleCharStream_(self->jj_input_stream_));
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) IOSObjectArray_SetAndConsume(self->jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

GeogebraCommonKernelParserParser *new_GeogebraCommonKernelParserParser_initWithJavaIoReader_(JavaIoReader *stream) {
  GeogebraCommonKernelParserParser *self = [GeogebraCommonKernelParserParser alloc];
  GeogebraCommonKernelParserParser_initWithJavaIoReader_(self, stream);
  return self;
}

void GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelParserParserTokenManager_(GeogebraCommonKernelParserParser *self, GeogebraCommonKernelParserParserTokenManager *tm) {
  NSObject_init(self);
  self->GeoGebraCASParsing_ = NO;
  self->ExternalCASParsing_ = NO;
  self->GiacParsing_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_undecided_(self, new_JavaUtilArrayList_init());
  self->jj_lookingAhead_ = NO;
  GeogebraCommonKernelParserParser_setAndConsume_jj_la1_(self, [IOSIntArray newArrayWithLength:67]);
  GeogebraCommonKernelParserParser_setAndConsume_jj_2_rtns_(self, [IOSObjectArray newArrayWithLength:31 type:GeogebraCommonKernelParserParser_JJCalls_class_()]);
  self->jj_rescan_ = NO;
  self->jj_gc_ = 0;
  GeogebraCommonKernelParserParser_setAndConsume_jj_ls_(self, new_GeogebraCommonKernelParserParser_LookaheadSuccess_init());
  GeogebraCommonKernelParserParser_setAndConsume_jj_expentries_(self, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  GeogebraCommonKernelParserParser_setAndConsume_jj_lasttokens_(self, [IOSIntArray newArrayWithLength:100]);
  GeogebraCommonKernelParserParser_set_token_source_(self, tm);
  GeogebraCommonKernelParserParser_setAndConsume_token_(self, new_GeogebraCommonKernelParserToken_init());
  self->jj_ntk__ = -1;
  self->jj_gen_ = 0;
  for (jint i = 0; i < 67; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
  for (jint i = 0; i < self->jj_2_rtns_->size_; i++) IOSObjectArray_SetAndConsume(self->jj_2_rtns_, i, new_GeogebraCommonKernelParserParser_JJCalls_init());
}

GeogebraCommonKernelParserParser *new_GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelParserParserTokenManager_(GeogebraCommonKernelParserParserTokenManager *tm) {
  GeogebraCommonKernelParserParser *self = [GeogebraCommonKernelParserParser alloc];
  GeogebraCommonKernelParserParser_initWithGeogebraCommonKernelParserParserTokenManager_(self, tm);
  return self;
}

GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_jj_consume_tokenWithInt_(GeogebraCommonKernelParserParser *self, jint kind) {
  GeogebraCommonKernelParserToken *oldToken;
  if ((oldToken = self->token_)->next_ != nil) GeogebraCommonKernelParserParser_set_token_(self, ((GeogebraCommonKernelParserToken *) nil_chk(self->token_))->next_);
  else GeogebraCommonKernelParserParser_set_token_(self, GeogebraCommonKernelParserToken_set_next_(nil_chk(self->token_), [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_ntk__ = -1;
  if (((GeogebraCommonKernelParserToken *) nil_chk(self->token_))->kind_ == kind) {
    self->jj_gen_++;
    if (++self->jj_gc_ > 100) {
      self->jj_gc_ = 0;
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->jj_2_rtns_))->size_; i++) {
        GeogebraCommonKernelParserParser_JJCalls *c = IOSObjectArray_Get(self->jj_2_rtns_, i);
        while (c != nil) {
          if (((GeogebraCommonKernelParserParser_JJCalls *) nil_chk(c))->gen_ < self->jj_gen_) GeogebraCommonKernelParserParser_JJCalls_set_first_(c, nil);
          c = c->next_;
        }
      }
    }
    return self->token_;
  }
  GeogebraCommonKernelParserParser_set_token_(self, oldToken);
  self->jj_kind_ = kind;
  @throw [self generateParseException];
}

jboolean GeogebraCommonKernelParserParser_jj_scan_tokenWithInt_(GeogebraCommonKernelParserParser *self, jint kind) {
  if (self->jj_scanpos_ == self->jj_lastpos_) {
    self->jj_la_--;
    if (((GeogebraCommonKernelParserToken *) nil_chk(self->jj_scanpos_))->next_ == nil) {
      GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, GeogebraCommonKernelParserToken_set_next_(self->jj_scanpos_, [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(self->token_source_)) getNextToken])));
    }
    else {
      GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, self->jj_scanpos_->next_));
    }
  }
  else {
    GeogebraCommonKernelParserParser_set_jj_scanpos_(self, ((GeogebraCommonKernelParserToken *) nil_chk(self->jj_scanpos_))->next_);
  }
  if (self->jj_rescan_) {
    jint i = 0;
    GeogebraCommonKernelParserToken *tok = self->token_;
    while (tok != nil && tok != self->jj_scanpos_) {
      i++;
      tok = ((GeogebraCommonKernelParserToken *) nil_chk(tok))->next_;
    }
    if (tok != nil) GeogebraCommonKernelParserParser_jj_add_error_tokenWithInt_withInt_(self, kind, i);
  }
  if (((GeogebraCommonKernelParserToken *) nil_chk(self->jj_scanpos_))->kind_ != kind) return YES;
  if (self->jj_la_ == 0 && self->jj_scanpos_ == self->jj_lastpos_) @throw self->jj_ls_;
  return NO;
}

GeogebraCommonKernelParserToken *GeogebraCommonKernelParserParser_getTokenWithInt_(GeogebraCommonKernelParserParser *self, jint index) {
  GeogebraCommonKernelParserToken *t = self->jj_lookingAhead_ ? self->jj_scanpos_ : self->token_;
  for (jint i = 0; i < index; i++) {
    if (t->next_ != nil) t = t->next_;
    else t = GeogebraCommonKernelParserToken_set_next_(t, [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(self->token_source_)) getNextToken]);
  }
  return t;
}

jint GeogebraCommonKernelParserParser_jj_ntk(GeogebraCommonKernelParserParser *self) {
  if ((GeogebraCommonKernelParserParser_set_jj_nt_(self, ((GeogebraCommonKernelParserToken *) nil_chk(self->token_))->next_)) == nil) return (self->jj_ntk__ = (GeogebraCommonKernelParserToken_set_next_(self->token_, [((GeogebraCommonKernelParserParserTokenManager *) nil_chk(self->token_source_)) getNextToken]))->kind_);
  else return (self->jj_ntk__ = ((GeogebraCommonKernelParserToken *) nil_chk(self->jj_nt_))->kind_);
}

void GeogebraCommonKernelParserParser_jj_add_error_tokenWithInt_withInt_(GeogebraCommonKernelParserParser *self, jint kind, jint pos) {
  if (pos >= 100) return;
  if (pos == self->jj_endpos_ + 1) {
    *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), self->jj_endpos_++) = kind;
  }
  else if (self->jj_endpos_ != 0) {
    GeogebraCommonKernelParserParser_setAndConsume_jj_expentry_(self, [IOSIntArray newArrayWithLength:self->jj_endpos_]);
    for (jint i = 0; i < self->jj_endpos_; i++) {
      *IOSIntArray_GetRef(self->jj_expentry_, i) = IOSIntArray_Get(nil_chk(self->jj_lasttokens_), i);
    }
    for (id<JavaUtilIterator> it = [((id<JavaUtilList>) nil_chk(self->jj_expentries_)) iterator]; [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
      {
        IOSIntArray *oldentry = (IOSIntArray *) check_class_cast(([it next]), [IOSIntArray class]);
        if (((IOSIntArray *) nil_chk(oldentry))->size_ == self->jj_expentry_->size_) {
          for (jint i = 0; i < self->jj_expentry_->size_; i++) {
            if (IOSIntArray_Get(oldentry, i) != IOSIntArray_Get(self->jj_expentry_, i)) {
              goto continue_jj_entries_loop;
            }
          }
          [self->jj_expentries_ addWithId:self->jj_expentry_];
          goto break_jj_entries_loop;
        }
      }
      continue_jj_entries_loop: ;
    }
    break_jj_entries_loop: ;
    if (pos != 0) *IOSIntArray_GetRef(nil_chk(self->jj_lasttokens_), (self->jj_endpos_ = pos) - 1) = kind;
  }
}

void GeogebraCommonKernelParserParser_jj_rescan_token(GeogebraCommonKernelParserParser *self) {
  self->jj_rescan_ = YES;
  for (jint i = 0; i < 31; i++) {
    @try {
      GeogebraCommonKernelParserParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), i);
      do {
        if (((GeogebraCommonKernelParserParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
          self->jj_la_ = p->arg_;
          GeogebraCommonKernelParserParser_set_jj_lastpos_(self, GeogebraCommonKernelParserParser_set_jj_scanpos_(self, p->first_));
          switch (i) {
            case 0:
            GeogebraCommonKernelParserParser_jj_3_1(self);
            break;
            case 1:
            GeogebraCommonKernelParserParser_jj_3_2(self);
            break;
            case 2:
            GeogebraCommonKernelParserParser_jj_3_3(self);
            break;
            case 3:
            GeogebraCommonKernelParserParser_jj_3_4(self);
            break;
            case 4:
            GeogebraCommonKernelParserParser_jj_3_5(self);
            break;
            case 5:
            GeogebraCommonKernelParserParser_jj_3_6(self);
            break;
            case 6:
            GeogebraCommonKernelParserParser_jj_3_7(self);
            break;
            case 7:
            GeogebraCommonKernelParserParser_jj_3_8(self);
            break;
            case 8:
            GeogebraCommonKernelParserParser_jj_3_9(self);
            break;
            case 9:
            GeogebraCommonKernelParserParser_jj_3_10(self);
            break;
            case 10:
            GeogebraCommonKernelParserParser_jj_3_11(self);
            break;
            case 11:
            GeogebraCommonKernelParserParser_jj_3_12(self);
            break;
            case 12:
            GeogebraCommonKernelParserParser_jj_3_13(self);
            break;
            case 13:
            GeogebraCommonKernelParserParser_jj_3_14(self);
            break;
            case 14:
            GeogebraCommonKernelParserParser_jj_3_15(self);
            break;
            case 15:
            GeogebraCommonKernelParserParser_jj_3_16(self);
            break;
            case 16:
            GeogebraCommonKernelParserParser_jj_3_17(self);
            break;
            case 17:
            GeogebraCommonKernelParserParser_jj_3_18(self);
            break;
            case 18:
            GeogebraCommonKernelParserParser_jj_3_19(self);
            break;
            case 19:
            GeogebraCommonKernelParserParser_jj_3_20(self);
            break;
            case 20:
            GeogebraCommonKernelParserParser_jj_3_21(self);
            break;
            case 21:
            GeogebraCommonKernelParserParser_jj_3_22(self);
            break;
            case 22:
            GeogebraCommonKernelParserParser_jj_3_23(self);
            break;
            case 23:
            GeogebraCommonKernelParserParser_jj_3_24(self);
            break;
            case 24:
            GeogebraCommonKernelParserParser_jj_3_25(self);
            break;
            case 25:
            GeogebraCommonKernelParserParser_jj_3_26(self);
            break;
            case 26:
            GeogebraCommonKernelParserParser_jj_3_27(self);
            break;
            case 27:
            GeogebraCommonKernelParserParser_jj_3_28(self);
            break;
            case 28:
            GeogebraCommonKernelParserParser_jj_3_29(self);
            break;
            case 29:
            GeogebraCommonKernelParserParser_jj_3_30(self);
            break;
            case 30:
            GeogebraCommonKernelParserParser_jj_3_31(self);
            break;
          }
        }
        p = p->next_;
      }
      while (p != nil);
    }
    @catch (GeogebraCommonKernelParserParser_LookaheadSuccess *ls) {
    }
  }
  self->jj_rescan_ = NO;
}

void GeogebraCommonKernelParserParser_jj_saveWithInt_withInt_(GeogebraCommonKernelParserParser *self, jint index, jint xla) {
  GeogebraCommonKernelParserParser_JJCalls *p = IOSObjectArray_Get(nil_chk(self->jj_2_rtns_), index);
  while (((GeogebraCommonKernelParserParser_JJCalls *) nil_chk(p))->gen_ > self->jj_gen_) {
    if (p->next_ == nil) {
      p = GeogebraCommonKernelParserParser_JJCalls_setAndConsume_next_(p, new_GeogebraCommonKernelParserParser_JJCalls_init());
      break;
    }
    p = p->next_;
  }
  ((GeogebraCommonKernelParserParser_JJCalls *) nil_chk(p))->gen_ = self->jj_gen_ + xla - self->jj_la_;
  GeogebraCommonKernelParserParser_JJCalls_set_first_(p, self->token_);
  p->arg_ = xla;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParserParser)

@implementation GeogebraCommonKernelParserParser_LookaheadSuccess

- (instancetype)init {
  GeogebraCommonKernelParserParser_LookaheadSuccess_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x2, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelParserParser_LookaheadSuccess = { 2, "LookaheadSuccess", "geogebra.common.kernel.parser", "Parser", 0x1a, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelParserParser_LookaheadSuccess;
}

@end

void GeogebraCommonKernelParserParser_LookaheadSuccess_init(GeogebraCommonKernelParserParser_LookaheadSuccess *self) {
  JavaLangError_init(self);
}

GeogebraCommonKernelParserParser_LookaheadSuccess *new_GeogebraCommonKernelParserParser_LookaheadSuccess_init() {
  GeogebraCommonKernelParserParser_LookaheadSuccess *self = [GeogebraCommonKernelParserParser_LookaheadSuccess alloc];
  GeogebraCommonKernelParserParser_LookaheadSuccess_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParserParser_LookaheadSuccess)

@implementation GeogebraCommonKernelParserParser_JJCalls

- (instancetype)init {
  GeogebraCommonKernelParserParser_JJCalls_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(first_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", NULL, NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "gen_", NULL, 0x0, "I", NULL, NULL,  },
    { "first_", NULL, 0x0, "Lgeogebra.common.kernel.parser.Token;", NULL, NULL,  },
    { "arg_", NULL, 0x0, "I", NULL, NULL,  },
    { "next_", NULL, 0x0, "Lgeogebra.common.kernel.parser.Parser$JJCalls;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelParserParser_JJCalls = { 2, "JJCalls", "geogebra.common.kernel.parser", "Parser", 0x18, 1, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelParserParser_JJCalls;
}

@end

void GeogebraCommonKernelParserParser_JJCalls_init(GeogebraCommonKernelParserParser_JJCalls *self) {
  NSObject_init(self);
}

GeogebraCommonKernelParserParser_JJCalls *new_GeogebraCommonKernelParserParser_JJCalls_init() {
  GeogebraCommonKernelParserParser_JJCalls *self = [GeogebraCommonKernelParserParser_JJCalls alloc];
  GeogebraCommonKernelParserParser_JJCalls_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelParserParser_JJCalls)
