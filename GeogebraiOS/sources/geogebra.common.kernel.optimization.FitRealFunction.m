//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/optimization/FitRealFunction.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/optimization/FitRealFunction.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelOptimizationFitRealFunction () {
 @public
  GeogebraCommonKernelKernel *kernel_;
  jint numberOfParameters_;
  IOSObjectArray *gliders_;
  GeogebraCommonKernelArithmeticFunction *newf_;
  jdouble lastvalue_;
  IOSObjectArray *mydoubles_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelOptimizationFitRealFunction, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelOptimizationFitRealFunction, gliders_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelOptimizationFitRealFunction, newf_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelOptimizationFitRealFunction, mydoubles_, IOSObjectArray *)

__attribute__((unused)) static jdouble GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(GeogebraCommonKernelOptimizationFitRealFunction *self, jdouble x, IOSDoubleArray *pars);

@implementation GeogebraCommonKernelOptimizationFitRealFunction

- (instancetype)init {
  GeogebraCommonKernelOptimizationFitRealFunction_init(self);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)f {
  GeogebraCommonKernelOptimizationFitRealFunction_initWithGeogebraCommonKernelArithmeticFunction_(self, f);
  return self;
}

- (jdouble)valueWithDouble:(jdouble)x
           withDoubleArray:(IOSDoubleArray *)pars {
  return GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(self, x, pars);
}

- (IOSDoubleArray *)gradientWithDouble:(jdouble)x
                       withDoubleArray:(IOSDoubleArray *)pars {
  jdouble oldf, newf;
  jdouble deltap = 1.0E-5;
  IOSDoubleArray *gradient = [IOSDoubleArray arrayWithLength:numberOfParameters_];
  for (jint i = 0; i < numberOfParameters_; i++) {
    oldf = GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(self, x, pars);
    *IOSDoubleArray_GetRef(nil_chk(pars), i) += deltap;
    newf = GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(self, x, pars);
    *IOSDoubleArray_GetRef(gradient, i) = (newf - oldf) / deltap;
    *IOSDoubleArray_GetRef(pars, i) -= deltap;
  }
  return gradient;
}

- (void)setFunctionWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)f {
  GeogebraCommonKernelOptimizationFitRealFunction_set_kernel_(self, [((GeogebraCommonKernelArithmeticFunction *) nil_chk(f)) getKernel]);
  GeogebraCommonKernelArithmeticFunctionVariable *fvar = [f getFunctionVariable];
  JavaUtilHashSet *hash_ = [f getVariables];
  if (hash_ == nil) {
    self->parametersOK_ = NO;
  }
  else {
    GeogebraCommonKernelOptimizationFitRealFunction_set_gliders_(self, [hash_ toArray]);
  }
  numberOfParameters_ = ((IOSObjectArray *) nil_chk(gliders_))->size_;
  GeogebraCommonKernelOptimizationFitRealFunction_setAndConsume_mydoubles_(self, [IOSObjectArray newArrayWithLength:numberOfParameters_ type:GeogebraCommonKernelArithmeticMyDouble_class_()]);
  jdouble temp;
  for (jint i = 0; i < numberOfParameters_; i++) {
    temp = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(gliders_, i), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    IOSObjectArray_SetAndConsume(mydoubles_, i, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(kernel_));
    [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(IOSObjectArray_Get(mydoubles_, i))) setWithDouble:temp];
  }
  GeogebraCommonKernelArithmeticExpressionNode *node = [f getExpression];
  GeogebraCommonKernelArithmeticExpressionNode *enf = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) deepCopyWithGeogebraCommonKernelKernel:kernel_], [GeogebraCommonKernelArithmeticExpressionNode class]);
  for (jint i = 0; i < numberOfParameters_; i++) {
    enf = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enf)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>) check_protocol_cast(IOSObjectArray_Get(gliders_, i), @protocol(GeogebraCommonKernelArithmeticExpressionValue)) withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(IOSObjectArray_Get(mydoubles_, i))) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) wrap];
  }
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enf)) resolveVariables];
  GeogebraCommonKernelOptimizationFitRealFunction_setAndConsume_newf_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(enf, fvar));
}

- (jint)getNumberOfParameters {
  return numberOfParameters_;
}

- (IOSDoubleArray *)getStartValues {
  IOSDoubleArray *startvalues = [IOSDoubleArray arrayWithLength:numberOfParameters_];
  for (jint i = 0; i < numberOfParameters_; i++) {
    *IOSDoubleArray_GetRef(startvalues, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(gliders_), i), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
  }
  return startvalues;
}

- (jdouble)evaluateWithDouble:(jdouble)x
              withDoubleArray:(IOSDoubleArray *)pars {
  return GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(self, x, pars);
}

- (jdouble)evaluate {
  return lastvalue_;
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(newf_)) evaluateWithDouble:x];
}

- (GeogebraCommonKernelArithmeticFunction *)getFunction {
  return newf_;
}

- (IOSObjectArray *)getCoeffs {
  return mydoubles_;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(gliders_);
  RELEASE_(newf_);
  RELEASE_(mydoubles_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "FitRealFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticFunction:", "FitRealFunction", NULL, 0x1, NULL, NULL },
    { "valueWithDouble:withDoubleArray:", "value", "D", 0x11, NULL, NULL },
    { "gradientWithDouble:withDoubleArray:", "gradient", "[D", 0x11, NULL, NULL },
    { "setFunctionWithGeogebraCommonKernelArithmeticFunction:", "setFunction", "V", 0x1, NULL, NULL },
    { "getNumberOfParameters", NULL, "I", 0x11, NULL, NULL },
    { "getStartValues", NULL, "[D", 0x11, NULL, NULL },
    { "evaluateWithDouble:withDoubleArray:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluate", NULL, "D", 0x11, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x11, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getCoeffs", NULL, "[Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "numberOfParameters_", NULL, 0x2, "I", NULL, NULL,  },
    { "gliders_", NULL, 0x2, "[Ljava.lang.Object;", NULL, NULL,  },
    { "newf_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "lastvalue_", NULL, 0x2, "D", NULL, NULL,  },
    { "mydoubles_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "parametersOK_", NULL, 0x1, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelOptimizationFitRealFunction = { 2, "FitRealFunction", "geogebra.common.kernel.optimization", NULL, 0x1, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelOptimizationFitRealFunction;
}

@end

void GeogebraCommonKernelOptimizationFitRealFunction_init(GeogebraCommonKernelOptimizationFitRealFunction *self) {
  NSObject_init(self);
  GeogebraCommonKernelOptimizationFitRealFunction_set_kernel_(self, nil);
  self->numberOfParameters_ = 0;
  GeogebraCommonKernelOptimizationFitRealFunction_set_gliders_(self, nil);
  GeogebraCommonKernelOptimizationFitRealFunction_set_newf_(self, nil);
  self->lastvalue_ = 0.0;
  GeogebraCommonKernelOptimizationFitRealFunction_set_mydoubles_(self, nil);
  self->parametersOK_ = YES;
}

GeogebraCommonKernelOptimizationFitRealFunction *new_GeogebraCommonKernelOptimizationFitRealFunction_init() {
  GeogebraCommonKernelOptimizationFitRealFunction *self = [GeogebraCommonKernelOptimizationFitRealFunction alloc];
  GeogebraCommonKernelOptimizationFitRealFunction_init(self);
  return self;
}

void GeogebraCommonKernelOptimizationFitRealFunction_initWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelOptimizationFitRealFunction *self, GeogebraCommonKernelArithmeticFunction *f) {
  NSObject_init(self);
  GeogebraCommonKernelOptimizationFitRealFunction_set_kernel_(self, nil);
  self->numberOfParameters_ = 0;
  GeogebraCommonKernelOptimizationFitRealFunction_set_gliders_(self, nil);
  GeogebraCommonKernelOptimizationFitRealFunction_set_newf_(self, nil);
  self->lastvalue_ = 0.0;
  GeogebraCommonKernelOptimizationFitRealFunction_set_mydoubles_(self, nil);
  self->parametersOK_ = YES;
  [self setFunctionWithGeogebraCommonKernelArithmeticFunction:f];
}

GeogebraCommonKernelOptimizationFitRealFunction *new_GeogebraCommonKernelOptimizationFitRealFunction_initWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *f) {
  GeogebraCommonKernelOptimizationFitRealFunction *self = [GeogebraCommonKernelOptimizationFitRealFunction alloc];
  GeogebraCommonKernelOptimizationFitRealFunction_initWithGeogebraCommonKernelArithmeticFunction_(self, f);
  return self;
}

jdouble GeogebraCommonKernelOptimizationFitRealFunction_valueWithDouble_withDoubleArray_(GeogebraCommonKernelOptimizationFitRealFunction *self, jdouble x, IOSDoubleArray *pars) {
  for (jint i = 0; i < self->numberOfParameters_; i++) {
    [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(IOSObjectArray_Get(nil_chk(self->mydoubles_), i))) setWithDouble:IOSDoubleArray_Get(nil_chk(pars), i)];
  }
  self->lastvalue_ = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(self->newf_)) evaluateWithDouble:x];
  return self->lastvalue_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelOptimizationFitRealFunction)
