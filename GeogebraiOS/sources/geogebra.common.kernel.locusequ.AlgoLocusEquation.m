//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/AlgoLocusEquation.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/locusequ/AlgoLocusEquation.h"
#include "geogebra/common/kernel/locusequ/CASTranslator.h"
#include "geogebra/common/kernel/locusequ/EquationAuxiliarSymbolicPoint.h"
#include "geogebra/common/kernel/locusequ/EquationHelpers.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/EquationSystem.h"
#include "geogebra/common/kernel/locusequ/EquationTranslator.h"
#include "geogebra/common/kernel/locusequ/arith/Equation.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelLocusequAlgoLocusEquation () {
 @public
  GeogebraCommonKernelGeosGeoPoint *movingPoint_, *locusPoint_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *geoPoly_;
  IOSObjectArray *efficientInput_AlgoLocusEquation_, *standardInput_;
  GeogebraCommonKernelLocusequEquationSystem *old_system_;
}

- (GeogebraCommonKernelLocusequEquationSystem *)getOriginalIdeal;

+ (void)addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList:(GeogebraCommonKernelLocusequEquationList *)restrictions
                               withGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo
                          withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope
                                                        withJavaUtilSet:(id<JavaUtilSet>)visitedAlgos;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, movingPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, locusPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, geoPoly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, efficientInput_AlgoLocusEquation_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, standardInput_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequAlgoLocusEquation, old_system_, GeogebraCommonKernelLocusequEquationSystem *)

__attribute__((unused)) static GeogebraCommonKernelLocusequEquationSystem *GeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(GeogebraCommonKernelLocusequAlgoLocusEquation *self);

__attribute__((unused)) static void GeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(GeogebraCommonKernelLocusequEquationList *restrictions, GeogebraCommonKernelAlgosAlgoElement *algo, GeogebraCommonKernelLocusequEquationScope *scope, id<JavaUtilSet> visitedAlgos);

NSString *GeogebraCommonKernelLocusequAlgoLocusEquation_CLASS_NAME_ = @"AlgoLocusEqu";

@implementation GeogebraCommonKernelLocusequAlgoLocusEquation

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)locusPoint
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint {
  GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, locusPoint, movingPoint);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)locusPoint
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)movingPoint {
  GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  return self;
}

- (void)setInputOutput {
  JavaUtilTreeSet *inSet = [new_JavaUtilTreeSet_init() autorelease];
  [inSet addWithId:[((id<GeogebraCommonKernelPath>) nil_chk([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->movingPoint_)) getPath])) toGeoElement]];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->locusPoint_)) getAllPredecessors])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent] || [geo isPointOnPath]) {
      [inSet addWithId:geo];
    }
  }
  [inSet removeWithId:movingPoint_];
  GeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_efficientInput_AlgoLocusEquation_(self, [IOSObjectArray newArrayWithLength:[inSet size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelLocusequAlgoLocusEquation_set_efficientInput_AlgoLocusEquation_(self, [inSet toArrayWithNSObjectArray:efficientInput_AlgoLocusEquation_]);
  GeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_standardInput_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(standardInput_, 0, self->locusPoint_);
  IOSObjectArray_Set(standardInput_, 1, self->movingPoint_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:self->geoPoly_];
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:standardInput_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput_AlgoLocusEquation_];
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)getPoly {
  return self->geoPoly_;
}

- (void)compute {
  GeogebraCommonKernelLocusequEquationSystem *system = GeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(self);
  if (self->geoPoly_ != nil && [self->geoPoly_ isDefined] && system != nil && [system looksSameWithGeogebraCommonKernelLocusequEquationSystem:old_system_]) {
    return;
  }
  GeogebraCommonKernelLocusequAlgoLocusEquation_set_old_system_(self, system);
  if (system != nil) {
    GeogebraCommonKernelLocusequEquationTranslator *trans = [new_GeogebraCommonKernelLocusequCASTranslator_initWithGeogebraCommonKernelKernel_([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel]) autorelease];
    @try {
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setCoeffWithDoubleArray2:[trans eliminateSystemWithGeogebraCommonKernelLocusequEquationSystem:system]];
      [self->geoPoly_ setDefined];
    }
    @catch (JavaLangException *e) {
      [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setUndefined];
    }
  }
  else {
    [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setUndefined];
  }
}

- (GeogebraCommonKernelLocusequEquationSystem *)getOriginalIdeal {
  return GeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(self);
}

+ (void)addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList:(GeogebraCommonKernelLocusequEquationList *)restrictions
                               withGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo
                          withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope
                                                        withJavaUtilSet:(id<JavaUtilSet>)visitedAlgos {
  GeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, algo, scope, visitedAlgos);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LocusEquation();
}

- (void)dealloc {
  RELEASE_(movingPoint_);
  RELEASE_(locusPoint_);
  RELEASE_(geoPoly_);
  RELEASE_(efficientInput_AlgoLocusEquation_);
  RELEASE_(standardInput_);
  RELEASE_(old_system_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusEquation", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoLocusEquation", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getOriginalIdeal", NULL, "Lgeogebra.common.kernel.locusequ.EquationSystem;", 0x2, NULL, NULL },
    { "addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList:withGeogebraCommonKernelAlgosAlgoElement:withGeogebraCommonKernelLocusequEquationScope:withJavaUtilSet:", "addAlgoIfNotVisited", "V", 0xa, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "movingPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "locusPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "CLASS_NAME_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonKernelLocusequAlgoLocusEquation_CLASS_NAME_, NULL,  },
    { "geoPoly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "efficientInput_AlgoLocusEquation_", "efficientInput", 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "standardInput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "old_system_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationSystem;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequAlgoLocusEquation = { 2, "AlgoLocusEquation", "geogebra.common.kernel.locusequ", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequAlgoLocusEquation;
}

@end

void GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequAlgoLocusEquation *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(self->geoPoly_)) setLabelWithNSString:label];
}

GeogebraCommonKernelLocusequAlgoLocusEquation *new_GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  GeogebraCommonKernelLocusequAlgoLocusEquation *self = [GeogebraCommonKernelLocusequAlgoLocusEquation alloc];
  GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, locusPoint, movingPoint);
  return self;
}

void GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelLocusequAlgoLocusEquation *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelLocusequAlgoLocusEquation_set_old_system_(self, nil);
  GeogebraCommonKernelLocusequAlgoLocusEquation_set_movingPoint_(self, movingPoint);
  GeogebraCommonKernelLocusequAlgoLocusEquation_set_locusPoint_(self, locusPoint);
  GeogebraCommonKernelLocusequAlgoLocusEquation_setAndConsume_geoPoly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
}

GeogebraCommonKernelLocusequAlgoLocusEquation *new_GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *locusPoint, GeogebraCommonKernelGeosGeoPoint *movingPoint) {
  GeogebraCommonKernelLocusequAlgoLocusEquation *self = [GeogebraCommonKernelLocusequAlgoLocusEquation alloc];
  GeogebraCommonKernelLocusequAlgoLocusEquation_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, locusPoint, movingPoint);
  return self;
}

GeogebraCommonKernelLocusequEquationSystem *GeogebraCommonKernelLocusequAlgoLocusEquation_getOriginalIdeal(GeogebraCommonKernelLocusequAlgoLocusEquation *self) {
  GeogebraCommonKernelLocusequEquationScope *scope = [new_GeogebraCommonKernelLocusequEquationScope_initWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self->locusPoint_, self->movingPoint_) autorelease];
  IOSObjectArray *points = GeogebraCommonKernelLocusequEquationHelpers_getDependentPredecessorPointsForElementWithGeogebraCommonKernelGeosGeoElement_(self->locusPoint_);
  GeogebraCommonKernelLocusequEquationPoint *pequ;
  GeogebraCommonKernelLocusequEquationList *restrictions = [new_GeogebraCommonKernelLocusequEquationList_init() autorelease];
  GeogebraCommonKernelAlgosAlgoElement *algo;
  id<JavaUtilSet> visitedAlgos = [new_JavaUtilHashSet_init() autorelease];
  jboolean constructionIsFeasible = YES;
  {
    IOSObjectArray *a__ = points;
    GeogebraCommonKernelGeosGeoPoint * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelGeosGeoPoint * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelGeosGeoPoint *p = *b__++;
      pequ = [scope getPointWithGeogebraCommonKernelGeosGeoPoint:p];
      if (![((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(pequ)) isIndependent]) {
        GeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) getParentAlgorithm], scope, visitedAlgos);
        if ([p getParentAlgorithm] != nil && ![((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([p getParentAlgorithm])) isLocusEquable]) {
          constructionIsFeasible = NO;
          break;
        }
        for (id __strong algoObj in nil_chk([p getAlgorithmList])) {
          algo = (GeogebraCommonKernelAlgosAlgoElement *) check_class_cast(algoObj, [GeogebraCommonKernelAlgosAlgoElement class]);
          GeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(restrictions, algo, scope, visitedAlgos);
        }
      }
    }
  }
  if (constructionIsFeasible) {
    for (GeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint * __strong p in nil_chk([scope getAuxiliarSymbolicPoints])) {
      [restrictions addAllWithJavaUtilCollection:[((GeogebraCommonKernelLocusequEquationAuxiliarSymbolicPoint *) nil_chk(p)) getRestrictions]];
    }
    return [new_GeogebraCommonKernelLocusequEquationSystem_initWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelLocusequEquationScope_(restrictions, scope) autorelease];
  }
  return nil;
}

void GeogebraCommonKernelLocusequAlgoLocusEquation_addAlgoIfNotVisitedWithGeogebraCommonKernelLocusequEquationList_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelLocusequEquationScope_withJavaUtilSet_(GeogebraCommonKernelLocusequEquationList *restrictions, GeogebraCommonKernelAlgosAlgoElement *algo, GeogebraCommonKernelLocusequEquationScope *scope, id<JavaUtilSet> visitedAlgos) {
  GeogebraCommonKernelLocusequAlgoLocusEquation_initialize();
  if (![((id<JavaUtilSet>) nil_chk(visitedAlgos)) containsWithId:algo]) {
    [visitedAlgos addWithId:algo];
    GeogebraCommonKernelLocusequEquationList *eqs = [((GeogebraCommonKernelLocusequEquationScope *) nil_chk(scope)) getRestrictionsFromAlgoWithGeogebraCommonKernelAlgosAlgoElement:algo];
    GeogebraCommonMainApp_debugWithNSString_(@"[LocusEqu] Restrictions init");
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"[LocusEqu] Construction ", [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getOutput]), 0))) description]));
    for (GeogebraCommonKernelLocusequArithEquation * __strong eq in nil_chk(eqs)) {
      GeogebraCommonMainApp_debugWithNSString_([((GeogebraCommonKernelLocusequArithEquation *) nil_chk(eq)) description]);
    }
    GeogebraCommonMainApp_debugWithNSString_(@"[LocusEqu] Restrictions end");
    [((GeogebraCommonKernelLocusequEquationList *) nil_chk(restrictions)) addAllWithJavaUtilCollection:eqs];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequAlgoLocusEquation)
