//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/io/QDParser.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/io/DocHandler.h"
#include "geogebra/common/io/QDParser.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/io/Reader.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Stack.h"

#define GeogebraCommonIoQDParser_TEXT 1
#define GeogebraCommonIoQDParser_ENTITY 2
#define GeogebraCommonIoQDParser_OPEN_TAG 3
#define GeogebraCommonIoQDParser_CLOSE_TAG 4
#define GeogebraCommonIoQDParser_START_TAG 5
#define GeogebraCommonIoQDParser_ATTRIBUTE_LVALUE 6
#define GeogebraCommonIoQDParser_ATTRIBUTE_EQUAL 9
#define GeogebraCommonIoQDParser_ATTRIBUTE_RVALUE 10
#define GeogebraCommonIoQDParser_QUOTE 7
#define GeogebraCommonIoQDParser_IN_TAG 8
#define GeogebraCommonIoQDParser_SINGLE_TAG 12
#define GeogebraCommonIoQDParser_COMMENT 13
#define GeogebraCommonIoQDParser_DONE 11
#define GeogebraCommonIoQDParser_DOCTYPE 14
#define GeogebraCommonIoQDParser_PRE 15
#define GeogebraCommonIoQDParser_CDATA 16

@interface GeogebraCommonIoQDParser () {
 @public
  JavaUtilLinkedHashMap *attrs_;
  JavaUtilStack *stack_;
  JavaLangStringBuilder *sb_, *etag_;
}

+ (jint)popModeWithJavaUtilStack:(JavaUtilStack *)st;

+ (void)excWithNSString:(NSString *)s
                withInt:(jint)line
                withInt:(jint)col;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonIoQDParser, attrs_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoQDParser, stack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoQDParser, sb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonIoQDParser, etag_, JavaLangStringBuilder *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, TEXT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, ENTITY, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, OPEN_TAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, CLOSE_TAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, START_TAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, ATTRIBUTE_LVALUE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, ATTRIBUTE_EQUAL, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, ATTRIBUTE_RVALUE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, QUOTE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, IN_TAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, SINGLE_TAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, COMMENT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, DONE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, DOCTYPE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, PRE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonIoQDParser, CDATA, jint)

__attribute__((unused)) static jint GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(JavaUtilStack *st);

__attribute__((unused)) static void GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(NSString *s, jint line, jint col);

@implementation GeogebraCommonIoQDParser

- (instancetype)init {
  GeogebraCommonIoQDParser_init(self);
  return self;
}

- (void)reset {
  [((JavaUtilLinkedHashMap *) nil_chk(attrs_)) clear];
  [((JavaUtilStack *) nil_chk(stack_)) clear];
  GeogebraCommonIoQDParser_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonIoQDParser_setAndConsume_etag_(self, new_JavaLangStringBuilder_init());
}

+ (jint)popModeWithJavaUtilStack:(JavaUtilStack *)st {
  return GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(st);
}

- (void)parseWithGeogebraCommonIoDocHandler:(id<GeogebraCommonIoDocHandler>)doc
                           withJavaIoReader:(JavaIoReader *)r {
  [((JavaUtilStack *) nil_chk(stack_)) clear];
  jint depth = 0;
  jint mode = GeogebraCommonIoQDParser_PRE;
  jint c = 0;
  jint quotec = '"';
  depth = 0;
  [((JavaLangStringBuilder *) nil_chk(sb_)) setLengthWithInt:0];
  [((JavaLangStringBuilder *) nil_chk(etag_)) setLengthWithInt:0];
  NSString *tagName = nil;
  NSString *lvalue = nil;
  NSString *rvalue = nil;
  [((JavaUtilLinkedHashMap *) nil_chk(attrs_)) clear];
  [((id<GeogebraCommonIoDocHandler>) nil_chk(doc)) startDocument];
  jint line = 1, col = 0;
  jboolean eol = NO;
  while ((c = [((JavaIoReader *) nil_chk(r)) read]) != -1) {
    if (c == 0x000a && eol) {
      eol = NO;
      continue;
    }
    else if (eol) {
      eol = NO;
    }
    else if (c == 0x000a) {
      line++;
      col = 0;
    }
    else if (c == 0x000d) {
      eol = YES;
      c = 0x000a;
      line++;
      col = 0;
    }
    else {
      col++;
    }
    switch (mode) {
      case GeogebraCommonIoQDParser_DONE:
      [doc endDocument];
      return;
      case GeogebraCommonIoQDParser_TEXT:
      switch (c) {
        case '<':
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_START_TAG;
        if ([sb_ length] > 0) {
          [doc textWithNSString:[sb_ description]];
          [sb_ setLengthWithInt:0];
        }
        break;
        case '&':
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_ENTITY;
        [etag_ setLengthWithInt:0];
        break;
        default:
        [sb_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_CLOSE_TAG:
      switch (c) {
        case '>':
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
        tagName = [sb_ description];
        [sb_ setLengthWithInt:0];
        depth--;
        if (depth == 0) mode = GeogebraCommonIoQDParser_DONE;
        [doc endElementWithNSString:tagName];
        break;
        default:
        [sb_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_CDATA:
      if (c == '>' && [((NSString *) nil_chk([sb_ description])) hasSuffix:@"]]"]) {
        [sb_ setLengthWithInt:[sb_ length] - 2];
        [doc textWithNSString:[sb_ description]];
        [sb_ setLengthWithInt:0];
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
      }
      else [sb_ appendWithChar:(jchar) c];
      break;
      case GeogebraCommonIoQDParser_COMMENT:
      if (c == '>' && [((NSString *) nil_chk([sb_ description])) hasSuffix:@"--"]) {
        [sb_ setLengthWithInt:0];
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
      }
      else [sb_ appendWithChar:(jchar) c];
      break;
      case GeogebraCommonIoQDParser_PRE:
      if (c == '<') {
        mode = GeogebraCommonIoQDParser_TEXT;
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_START_TAG;
      }
      break;
      case GeogebraCommonIoQDParser_DOCTYPE:
      if (c == '>') {
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
        if (mode == GeogebraCommonIoQDParser_TEXT) mode = GeogebraCommonIoQDParser_PRE;
      }
      break;
      case GeogebraCommonIoQDParser_START_TAG:
      mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
      switch (c) {
        case '/':
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_CLOSE_TAG;
        break;
        case '?':
        mode = GeogebraCommonIoQDParser_DOCTYPE;
        break;
        default:
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_OPEN_TAG;
        tagName = nil;
        [sb_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_ENTITY:
      if (c == ';') {
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
        NSString *cent = [etag_ description];
        [etag_ setLengthWithInt:0];
        if ([((NSString *) nil_chk(cent)) isEqual:@"lt"]) [sb_ appendWithChar:'<'];
        else if ([cent isEqual:@"gt"]) [sb_ appendWithChar:'>'];
        else if ([cent isEqual:@"amp"]) [sb_ appendWithChar:'&'];
        else if ([cent isEqual:@"quot"]) [sb_ appendWithChar:'"'];
        else if ([cent isEqual:@"apos"]) [sb_ appendWithChar:'\''];
        else if ([cent hasPrefix:@"#x"]) [sb_ appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_([cent substring:2], 16)];
        else if ([cent charAtWithInt:0] == '#') [sb_ appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_([cent substring:1])];
        else GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(JreStrcat("$$C", @"Unknown entity: &", cent, ';'), line, col);
      }
      else {
        [etag_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_SINGLE_TAG:
      if (tagName == nil) tagName = [sb_ description];
      if (c != '>') GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(JreStrcat("$$$", @"Expected > for tag: <", tagName, @"/>"), line, col);
      [doc startElementWithNSString:tagName withJavaUtilLinkedHashMap:attrs_];
      [doc endElementWithNSString:tagName];
      if (depth == 0) {
        [doc endDocument];
        return;
      }
      [sb_ setLengthWithInt:0];
      [attrs_ clear];
      tagName = nil;
      mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
      break;
      case GeogebraCommonIoQDParser_OPEN_TAG:
      switch (c) {
        case '>':
        if (tagName == nil) tagName = [sb_ description];
        [sb_ setLengthWithInt:0];
        depth++;
        [doc startElementWithNSString:tagName withJavaUtilLinkedHashMap:attrs_];
        tagName = nil;
        [attrs_ clear];
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
        break;
        case '/':
        mode = GeogebraCommonIoQDParser_SINGLE_TAG;
        break;
        case '-':
        if ([((NSString *) nil_chk([sb_ description])) isEqual:@"!-"]) {
          mode = GeogebraCommonIoQDParser_COMMENT;
        }
        else {
          [sb_ appendWithChar:(jchar) c];
        }
        break;
        case '[':
        if ([((NSString *) nil_chk([sb_ description])) isEqual:@"![CDATA"]) {
          mode = GeogebraCommonIoQDParser_CDATA;
          [sb_ setLengthWithInt:0];
        }
        break;
        case 'E':
        if ([((NSString *) nil_chk([sb_ description])) isEqual:@"!DOCTYP"]) {
          [sb_ setLengthWithInt:0];
          mode = GeogebraCommonIoQDParser_DOCTYPE;
        }
        break;
        default:
        if (GeogebraCommonUtilStringUtil_isWhitespaceWithChar_((jchar) c)) {
          tagName = [sb_ description];
          [sb_ setLengthWithInt:0];
          mode = GeogebraCommonIoQDParser_IN_TAG;
        }
        else {
          [sb_ appendWithChar:(jchar) c];
        }
      }
      break;
      case GeogebraCommonIoQDParser_QUOTE:
      if (c == quotec) {
        rvalue = [sb_ description];
        [sb_ setLengthWithInt:0];
        [attrs_ putWithId:lvalue withId:rvalue];
        mode = GeogebraCommonIoQDParser_IN_TAG;
      }
      else if (c == '&') {
        [stack_ pushWithId:[new_JavaLangInteger_initWithInt_(mode) autorelease]];
        mode = GeogebraCommonIoQDParser_ENTITY;
        [etag_ setLengthWithInt:0];
      }
      else {
        [sb_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_ATTRIBUTE_RVALUE:
      if (c == '"' || c == '\'') {
        quotec = c;
        mode = GeogebraCommonIoQDParser_QUOTE;
      }
      else if (!GeogebraCommonUtilStringUtil_isWhitespaceWithChar_((jchar) c)) {
        GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(@"Error in attribute processing", line, col);
      }
      break;
      case GeogebraCommonIoQDParser_ATTRIBUTE_LVALUE:
      if (GeogebraCommonUtilStringUtil_isWhitespaceWithChar_((jchar) c)) {
        lvalue = [sb_ description];
        [sb_ setLengthWithInt:0];
        mode = GeogebraCommonIoQDParser_ATTRIBUTE_EQUAL;
      }
      else if (c == '=') {
        lvalue = [sb_ description];
        [sb_ setLengthWithInt:0];
        mode = GeogebraCommonIoQDParser_ATTRIBUTE_RVALUE;
      }
      else {
        [sb_ appendWithChar:(jchar) c];
      }
      break;
      case GeogebraCommonIoQDParser_ATTRIBUTE_EQUAL:
      if (c == '=') {
        mode = GeogebraCommonIoQDParser_ATTRIBUTE_RVALUE;
      }
      else if (!GeogebraCommonUtilStringUtil_isWhitespaceWithChar_((jchar) c)) {
        GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(@"Error in attribute processing.", line, col);
      }
      break;
      case GeogebraCommonIoQDParser_IN_TAG:
      switch (c) {
        case '>':
        mode = GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(stack_);
        [doc startElementWithNSString:tagName withJavaUtilLinkedHashMap:attrs_];
        depth++;
        tagName = nil;
        [attrs_ clear];
        break;
        case '/':
        mode = GeogebraCommonIoQDParser_SINGLE_TAG;
        break;
        default:
        if (!GeogebraCommonUtilStringUtil_isWhitespaceWithChar_((jchar) c)) {
          mode = GeogebraCommonIoQDParser_ATTRIBUTE_LVALUE;
          [sb_ appendWithChar:(jchar) c];
        }
      }
      break;
    }
  }
  if (mode == GeogebraCommonIoQDParser_DONE) [doc endDocument];
  else GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(@"missing end tag", line, col);
}

+ (void)excWithNSString:(NSString *)s
                withInt:(jint)line
                withInt:(jint)col {
  GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(s, line, col);
}

- (void)dealloc {
  RELEASE_(attrs_);
  RELEASE_(stack_);
  RELEASE_(sb_);
  RELEASE_(etag_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "QDParser", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "popModeWithJavaUtilStack:", "popMode", "I", 0xa, NULL, NULL },
    { "parseWithGeogebraCommonIoDocHandler:withJavaIoReader:", "parse", "V", 0x11, "Ljava.lang.Exception;", NULL },
    { "excWithNSString:withInt:withInt:", "exc", "V", 0xa, "Ljava.lang.Exception;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "attrs_", NULL, 0x2, "Ljava.util.LinkedHashMap;", NULL, "Ljava/util/LinkedHashMap<Ljava/lang/String;Ljava/lang/String;>;",  },
    { "stack_", NULL, 0x2, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/lang/Integer;>;",  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "etag_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "TEXT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_TEXT },
    { "ENTITY_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_ENTITY },
    { "OPEN_TAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_OPEN_TAG },
    { "CLOSE_TAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_CLOSE_TAG },
    { "START_TAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_START_TAG },
    { "ATTRIBUTE_LVALUE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_ATTRIBUTE_LVALUE },
    { "ATTRIBUTE_EQUAL_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_ATTRIBUTE_EQUAL },
    { "ATTRIBUTE_RVALUE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_ATTRIBUTE_RVALUE },
    { "QUOTE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_QUOTE },
    { "IN_TAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_IN_TAG },
    { "SINGLE_TAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_SINGLE_TAG },
    { "COMMENT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_COMMENT },
    { "DONE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_DONE },
    { "DOCTYPE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_DOCTYPE },
    { "PRE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_PRE },
    { "CDATA_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonIoQDParser_CDATA },
  };
  static const J2ObjcClassInfo _GeogebraCommonIoQDParser = { 2, "QDParser", "geogebra.common.io", NULL, 0x1, 5, methods, 20, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonIoQDParser;
}

@end

void GeogebraCommonIoQDParser_init(GeogebraCommonIoQDParser *self) {
  NSObject_init(self);
  GeogebraCommonIoQDParser_setAndConsume_attrs_(self, new_JavaUtilLinkedHashMap_init());
  GeogebraCommonIoQDParser_setAndConsume_stack_(self, new_JavaUtilStack_init());
  GeogebraCommonIoQDParser_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonIoQDParser_setAndConsume_etag_(self, new_JavaLangStringBuilder_init());
}

GeogebraCommonIoQDParser *new_GeogebraCommonIoQDParser_init() {
  GeogebraCommonIoQDParser *self = [GeogebraCommonIoQDParser alloc];
  GeogebraCommonIoQDParser_init(self);
  return self;
}

jint GeogebraCommonIoQDParser_popModeWithJavaUtilStack_(JavaUtilStack *st) {
  GeogebraCommonIoQDParser_initialize();
  if (![((JavaUtilStack *) nil_chk(st)) empty]) {
    return [((JavaLangInteger *) nil_chk([st pop])) intValue];
  }
  return GeogebraCommonIoQDParser_PRE;
}

void GeogebraCommonIoQDParser_excWithNSString_withInt_withInt_(NSString *s, jint line, jint col) {
  GeogebraCommonIoQDParser_initialize();
  @throw [new_JavaLangException_initWithNSString_(JreStrcat("$$I$I", s, @" near line ", line, @", column ", col)) autorelease];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonIoQDParser)
