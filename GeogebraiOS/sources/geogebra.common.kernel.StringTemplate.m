//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/StringTemplate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/export/MathmlTemplate.h"
#include "geogebra/common/factories/FormatFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/ListValue.h"
#include "geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "geogebra/common/kernel/arithmetic/MyVecNDNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/NumberFormatAdapter.h"
#include "geogebra/common/util/ScientificFormatAdapter.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"

#define GeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR 1.000000000000001

@interface GeogebraCommonKernelStringTemplate () {
 @public
  NSString *name_;
  jboolean hideLHS_;
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType_;
  jboolean internationalizeDigits__;
  NSString *casPrintFormPI_;
  id<GeogebraCommonUtilScientificFormatAdapter> sf_;
  id<GeogebraCommonUtilNumberFormatAdapter> nf_;
  jboolean forceSF_;
  jboolean forceNF_;
  jboolean allowMoreDigits__;
  jboolean useRealLabels_;
  jboolean localizeCmds_;
  jboolean usePrefix_;
  IOSDoubleArray *precisions_;
}

- (void)setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t;

- (GeogebraCommonKernelStringTemplate *)copy__ OBJC_METHOD_FAMILY_NONE;

- (NSString *)printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)printForm
                                                                                           withNSString:(NSString *)label;

- (NSString *)addTempVariablePrefixWithNSString:(NSString *)label;

- (NSString *)right;

- (NSString *)left;

+ (NSString *)opWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)right
                                                     withBoolean:(jboolean)reverse;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, name_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, stringType_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, casPrintFormPI_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, sf_, id<GeogebraCommonUtilScientificFormatAdapter>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, nf_, id<GeogebraCommonUtilNumberFormatAdapter>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStringTemplate, precisions_, IOSDoubleArray *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStringTemplate, ROUND_HALF_UP_FACTOR, jdouble)

__attribute__((unused)) static void GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate *self, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t);

__attribute__((unused)) static GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_copy__(GeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelStringTemplate_printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(GeogebraCommonKernelStringTemplate *self, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm, NSString *label);

__attribute__((unused)) static NSString *GeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(GeogebraCommonKernelStringTemplate *self, NSString *label);

__attribute__((unused)) static NSString *GeogebraCommonKernelStringTemplate_right(GeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelStringTemplate_left(GeogebraCommonKernelStringTemplate *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelArithmeticExpressionNode *right, jboolean reverse);

@interface GeogebraCommonKernelStringTemplate_$1 : GeogebraCommonKernelStringTemplate

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withGeogebraCommonUtilNumberFormatAdapter:(id<GeogebraCommonUtilNumberFormatAdapter>)nf2
withGeogebraCommonUtilScientificFormatAdapter:(id<GeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelStringTemplate_$1)

__attribute__((unused)) static void GeogebraCommonKernelStringTemplate_$1_initWithNSString_(GeogebraCommonKernelStringTemplate_$1 *self, NSString *arg$0);

__attribute__((unused)) static GeogebraCommonKernelStringTemplate_$1 *new_GeogebraCommonKernelStringTemplate_$1_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelStringTemplate_$1)

@interface GeogebraCommonKernelStringTemplate_$2 : GeogebraCommonKernelStringTemplate

- (NSString *)multiplyStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                                 withNSString:(NSString *)leftStr
                                                                 withNSString:(NSString *)rightStr
                                                                  withBoolean:(jboolean)valueForm
                                           withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelStringTemplate_$2)

__attribute__((unused)) static void GeogebraCommonKernelStringTemplate_$2_initWithNSString_(GeogebraCommonKernelStringTemplate_$2 *self, NSString *arg$0);

__attribute__((unused)) static GeogebraCommonKernelStringTemplate_$2 *new_GeogebraCommonKernelStringTemplate_$2_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelStringTemplate_$2)

@interface GeogebraCommonKernelStringTemplate_$3 : GeogebraCommonKernelStringTemplate

- (jint)getCoordStyleWithInt:(jint)coordStyle;

- (instancetype)initWithNSString:(NSString *)arg$0;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelStringTemplate_$3)

__attribute__((unused)) static void GeogebraCommonKernelStringTemplate_$3_initWithNSString_(GeogebraCommonKernelStringTemplate_$3 *self, NSString *arg$0);

__attribute__((unused)) static GeogebraCommonKernelStringTemplate_$3 *new_GeogebraCommonKernelStringTemplate_$3_initWithNSString_(NSString *arg$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelStringTemplate_$3)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelStringTemplate)

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_noLocalDefault_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_prefixedDefault_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_defaultTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_defaultTemplateLocal_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_realTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_latexTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_latexTemplateMQ_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_mathmlTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_libreofficeTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_giacTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_xmlTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_editTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_regression_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_ogpTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_maxPrecision_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_numericDefault_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_numericNoLocal_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_numericLatex_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_testTemplate_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_testTemplateJSON_;
GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_testNumeric_;

@implementation GeogebraCommonKernelStringTemplate

- (jboolean)isInsertLineBreaks {
  return NO;
}

- (instancetype)initWithNSString:(NSString *)name {
  GeogebraCommonKernelStringTemplate_initWithNSString_(self, name);
  return self;
}

- (GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)getStringType {
  return self->stringType_;
}

- (jboolean)internationalizeDigits {
  return self->internationalizeDigits__;
}

- (NSString *)getPi {
  return casPrintFormPI_;
}

+ (GeogebraCommonKernelStringTemplate *)getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  return GeogebraCommonKernelStringTemplate_getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(t);
}

- (void)setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(self, t);
}

- (jboolean)useScientificWithBoolean:(jboolean)kernelUsesSF {
  return forceSF_ || (kernelUsesSF && !forceNF_);
}

- (jboolean)hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)t {
  return [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:t];
}

+ (GeogebraCommonKernelStringTemplate *)printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                      withInt:(jint)decimals
                                                                                                                  withBoolean:(jboolean)allowMore {
  return GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

+ (GeogebraCommonKernelStringTemplate *)printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                     withInt:(jint)decimals
                                                                                                                 withBoolean:(jboolean)allowMore {
  return GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

+ (GeogebraCommonKernelStringTemplate *)fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type {
  return GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(type);
}

+ (GeogebraCommonKernelStringTemplate *)printScientificWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)type
                                                                                                                        withInt:(jint)decimals
                                                                                                                    withBoolean:(jboolean)allowMore {
  return GeogebraCommonKernelStringTemplate_printScientificWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, decimals, allowMore);
}

- (id<GeogebraCommonUtilScientificFormatAdapter>)getSFWithGeogebraCommonUtilScientificFormatAdapter:(id<GeogebraCommonUtilScientificFormatAdapter>)sfk {
  return sf_ == nil || (allowMoreDigits__ && [((id<GeogebraCommonUtilScientificFormatAdapter>) nil_chk(sfk)) getSigDigits] > [sf_ getSigDigits]) ? sfk : sf_;
}

- (id<GeogebraCommonUtilNumberFormatAdapter>)getNFWithGeogebraCommonUtilNumberFormatAdapter:(id<GeogebraCommonUtilNumberFormatAdapter>)nfk {
  return nf_ == nil || (allowMoreDigits__ && [((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk(nfk)) getMaximumFractionDigits] > [nf_ getMaximumFractionDigits]) ? nfk : nf_;
}

- (jboolean)isPrintLocalizedCommandNames {
  return localizeCmds_;
}

- (jint)getCoordStyleWithInt:(jint)coordStyle {
  return coordStyle;
}

- (jboolean)isUseTempVariablePrefix {
  return usePrefix_;
}

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withGeogebraCommonUtilNumberFormatAdapter:(id<GeogebraCommonUtilNumberFormatAdapter>)nf2
withGeogebraCommonUtilScientificFormatAdapter:(id<GeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF {
  jint digits = useSF ? [((id<GeogebraCommonUtilScientificFormatAdapter>) nil_chk(sf2)) getSigDigits] : [((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk(nf2)) getMaximumFractionDigits];
  if (digits >= 15) {
    return 1;
  }
  if (abs < 1000) {
    return GeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
  }
  if (abs > 10E7) {
    return 1;
  }
  if (useSF) {
    if ([self getSFWithGeogebraCommonUtilScientificFormatAdapter:sf2] != nil && [((id<GeogebraCommonUtilScientificFormatAdapter>) nil_chk([self getSFWithGeogebraCommonUtilScientificFormatAdapter:sf2])) getSigDigits] < 10) {
      return GeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
    }
  }
  else {
    if ([self getNFWithGeogebraCommonUtilNumberFormatAdapter:nf2] != nil && [((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk([self getNFWithGeogebraCommonUtilNumberFormatAdapter:nf2])) getMaximumFractionDigits] < 10) {
      return GeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR;
    }
  }
  return 1;
}

- (jboolean)allowMoreDigits {
  return allowMoreDigits__;
}

- (jdouble)getPrecisionWithGeogebraCommonUtilNumberFormatAdapter:(id<GeogebraCommonUtilNumberFormatAdapter>)nf2 {
  jint digits = [((id<GeogebraCommonUtilNumberFormatAdapter>) nil_chk([self getNFWithGeogebraCommonUtilNumberFormatAdapter:nf2])) getMaximumFractionDigits];
  return digits <= 16 ? IOSDoubleArray_Get(nil_chk(precisions_), digits) : JavaLangMath_powWithDouble_withDouble_(10, -digits);
}

- (jboolean)isUseRealLabels {
  return useRealLabels_;
}

- (GeogebraCommonKernelStringTemplate *)deriveReal {
  GeogebraCommonKernelStringTemplate *copy_ = GeogebraCommonKernelStringTemplate_copy__(self);
  ((GeogebraCommonKernelStringTemplate *) nil_chk(copy_))->useRealLabels_ = YES;
  return copy_;
}

- (GeogebraCommonKernelStringTemplate *)copy__ {
  return GeogebraCommonKernelStringTemplate_copy__(self);
}

- (NSString *)description {
  return name_;
}

- (NSString *)printVariableNameWithNSString:(NSString *)label {
  NSString *ret;
  if ([self isUseTempVariablePrefix]) {
    ret = GeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, label);
  }
  ret = GeogebraCommonKernelStringTemplate_printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(self, [self getStringType], label);
  if (((jint) [((NSString *) nil_chk(ret)) length]) == 1 && [ret isEqual:@"l"] && [self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    ret = @"\\ell";
  }
  return ret;
}

- (NSString *)printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)printForm
                                                                                           withNSString:(NSString *)label {
  return GeogebraCommonKernelStringTemplate_printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(self, printForm, label);
}

- (NSString *)addTempVariablePrefixWithNSString:(NSString *)label {
  return GeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, label);
}

- (GeogebraCommonKernelStringTemplate *)deriveMathMLTemplate {
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    return self;
  }
  GeogebraCommonKernelStringTemplate *ret = GeogebraCommonKernelStringTemplate_copy__(self);
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(nil_chk(ret), GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML());
  return ret;
}

- (GeogebraCommonKernelStringTemplate *)deriveLaTeXTemplate {
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
    return self;
  }
  GeogebraCommonKernelStringTemplate *ret = GeogebraCommonKernelStringTemplate_copy__(self);
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(nil_chk(ret), GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
  return ret;
}

- (jboolean)hasCASType {
  return [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()];
}

- (jboolean)isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v {
  return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) evaluatesToNonComplex2DVector] || [v evaluatesTo3DVector];
}

- (NSString *)plusStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)l
                        withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)r
                                                             withNSString:(NSString *)leftStr
                                                             withNSString:(NSString *)rightStr
                                                              withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(l)) unwrap];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(r)) unwrap];
  GeogebraCommonPluginOperationEnum *operation = GeogebraCommonPluginOperationEnum_get_PLUS();
  switch ([stringType_ ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<plus/>", leftStr, rightStr);
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@CZ", left, ' ', [left evaluatesToList]));
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",ggx->ggx+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
    }
    else if (([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToList]) {
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",ggx->ggx+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")"];
    }
    else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",im("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
    }
    else if (([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",im("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if (([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesTo3DVector]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[0]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[1]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[2]+"];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
    }
    else if ([left evaluatesTo3DVector] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[0]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[1]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[2]+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([left evaluatesToVectorNotPoint] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToVectorNotPoint]) {
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:rightStr];
    }
    else if ([GeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:right] && [GeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:left]) {
      id<GeogebraCommonKernelArithmeticMyVecNDNode> leftVN = (id<GeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(left, @protocol(GeogebraCommonKernelArithmeticMyVecNDNode));
      id<GeogebraCommonKernelArithmeticMyVecNDNode> rightVN = (id<GeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(right, @protocol(GeogebraCommonKernelArithmeticMyVecNDNode));
      jboolean leftIsVector = [leftVN isCASVector];
      jboolean rightIsVector = [((id<GeogebraCommonKernelArithmeticMyVecNDNode>) nil_chk(rightVN)) isCASVector];
      if (leftIsVector && rightIsVector) {
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"+"];
        [sb appendWithNSString:rightStr];
      }
      else if (!leftIsVector && !rightIsVector) {
        [sb appendWithNSString:@"point("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"+"];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      else {
        if ([leftVN getDimension] == 3 || [rightVN getDimension] == 3) {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
          [sb appendWithNSString:@")"];
        }
        else {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:leftStr];
          [sb appendWithNSString:@"+"];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
        }
      }
    }
    else if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:left]) {
      GeogebraCommonUtilDebugLog_debugWithNSString_(JreStrcat("@C@", [left getClass], ' ', [right getClass]));
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"+"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
      [sb appendWithNSString:@")"];
    }
    else {
      [sb appendWithChar:'('];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")+("];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    break;
    default:
    if (valueForm) {
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 0, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 0, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
    }
    if ([left isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      [sb appendWithNSString:leftStr];
    }
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToText] && (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || ([right isGeoElement] && ![((GeogebraCommonKernelGeosGeoElement *) check_class_cast(right, [GeogebraCommonKernelGeosGeoElement class])) isLabelSet]))) {
      if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
        [sb appendWithNSString:@" \\-+ "];
      }
      else {
        [sb appendWithNSString:@" + "];
      }
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      if ([((NSString *) nil_chk(rightStr)) charAtWithInt:0] == '-') {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [sb appendWithNSString:[rightStr substring:1]];
      }
      else if ([rightStr hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [self appendWithJavaLangStringBuilder:sb withNSString:[rightStr substring:3] withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_PLUS()];
      }
      else {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_PLUS()];
      }
    }
    break;
  }
  return [sb description];
}

- (NSString *)leftBracket {
  return JreStrcat("$C", GeogebraCommonKernelStringTemplate_left(self), '(');
}

- (NSString *)rightBracket {
  return JreStrcat("$C", GeogebraCommonKernelStringTemplate_right(self), ')');
}

- (NSString *)leftSquareBracket {
  return JreStrcat("$C", GeogebraCommonKernelStringTemplate_left(self), '[');
}

- (NSString *)rightSquareBracket {
  return JreStrcat("$C", GeogebraCommonKernelStringTemplate_right(self), ']');
}

- (NSString *)right {
  return GeogebraCommonKernelStringTemplate_right(self);
}

- (NSString *)left {
  return GeogebraCommonKernelStringTemplate_left(self);
}

- (NSString *)minusStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)l
                         withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)r
                                                              withNSString:(NSString *)leftStr
                                                              withNSString:(NSString *)rightStr
                                                               withBoolean:(jboolean)valueForm
                                        withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(l)) unwrap];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(r)) unwrap];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([stringType_ ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<minus/>", leftStr, rightStr);
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@CZ", left, ' ', [left evaluatesToList]));
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@",ggx->ggx-"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
    }
    else if (([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left]) && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToList]) {
      [sb appendWithNSString:@"map("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@",ggx->"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-ggx)"];
    }
    else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-real("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1])"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-im("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"[1]))"];
    }
    else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point(real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),real("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"[1])-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"))"];
    }
    else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:left] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesTo3DVector]) {
      [sb appendWithNSString:@"("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[0]"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[1]"];
      [sb appendWithNSString:@","];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")[2])"];
    }
    else if ([left evaluatesTo3DVector] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:right]) {
      [sb appendWithNSString:@"(("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[0]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[1]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")[2]-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"))"];
    }
    else if ([left evaluatesToVectorNotPoint] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToVectorNotPoint]) {
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:rightStr];
    }
    else if ([GeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:right] && [GeogebraCommonKernelArithmeticMyVecNDNode_class_() isInstance:left]) {
      id<GeogebraCommonKernelArithmeticMyVecNDNode> leftVN = (id<GeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(left, @protocol(GeogebraCommonKernelArithmeticMyVecNDNode));
      id<GeogebraCommonKernelArithmeticMyVecNDNode> rightVN = (id<GeogebraCommonKernelArithmeticMyVecNDNode>) check_protocol_cast(right, @protocol(GeogebraCommonKernelArithmeticMyVecNDNode));
      jboolean leftIsVector = [leftVN isCASVector];
      jboolean rightIsVector = [((id<GeogebraCommonKernelArithmeticMyVecNDNode>) nil_chk(rightVN)) isCASVector];
      if (leftIsVector && rightIsVector) {
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"-"];
        [sb appendWithNSString:rightStr];
      }
      else if (!leftIsVector && !rightIsVector) {
        [sb appendWithNSString:@"point("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@"-"];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      else {
        if ([leftVN getDimension] == 3 || [rightVN getDimension] == 3) {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"xcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"ycoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@"),"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:leftStr];
          [sb appendWithChar:')'];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:@"zcoord("];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
          [sb appendWithNSString:@")"];
        }
        else {
          [sb appendWithNSString:@"point("];
          [sb appendWithNSString:leftStr];
          [sb appendWithNSString:@"-"];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:@")"];
        }
      }
    }
    else if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) evaluatesToNonComplex2DVector] && [left evaluatesToNonComplex2DVector]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    else if ([self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:left]) {
      [sb appendWithNSString:@"point("];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"xcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"ycoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"),"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:leftStr];
      [sb appendWithChar:')'];
      [sb appendWithNSString:@"-"];
      [sb appendWithNSString:@"zcoord("];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@")"];
      [sb appendWithNSString:@")"];
    }
    else {
      [sb appendWithChar:'('];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@")-("];
      [sb appendWithNSString:rightStr];
      [sb appendWithChar:')'];
    }
    break;
    default:
    if ([left isKindOfClass:[GeogebraCommonKernelArithmeticEquation class]]) {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    else {
      [sb appendWithNSString:leftStr];
    }
    if (valueForm && [((NSString *) nil_chk(rightStr)) isEqual:JreStrcat("C", ((GeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_)]) {
      break;
    }
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(right) >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
      if ([((NSString *) nil_chk(rightStr)) charAtWithInt:0] == '-') {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [sb appendWithNSString:[rightStr substring:1]];
      }
      else if ([rightStr hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-+ "];
        }
        else {
          [sb appendWithNSString:@" + "];
        }
        [sb appendWithNSString:[rightStr substring:3]];
      }
      else {
        if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
          [sb appendWithNSString:@" \\-- "];
        }
        else {
          [sb appendWithNSString:@" - "];
        }
        [sb appendWithNSString:rightStr];
      }
    }
    else {
      if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
        [sb appendWithNSString:@" \\-- "];
      }
      else {
        [sb appendWithNSString:@" - "];
      }
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:[self rightBracket]];
    }
    break;
  }
  return [sb description];
}

- (NSString *)multiplyStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                                 withNSString:(NSString *)leftStr
                                                                 withNSString:(NSString *)rightStr
                                                                  withBoolean:(jboolean)valueForm
                                           withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonPluginOperationEnum *operation = GeogebraCommonPluginOperationEnum_get_MULTIPLY();
  {
    jboolean nounary;
    jint opIDright;
    switch ([stringType_ ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<times/>", leftStr, rightStr);
      break;
      default:
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (((((jint) [((NSString *) nil_chk(rightStr)) length]) == 2) && ((([rightStr charAtWithInt:0] == GeogebraCommonUtilUnicode_degreeChar) && ([rightStr charAtWithInt:1] == (((GeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))) || (([rightStr charAtWithInt:0] == GeogebraCommonUtilUnicode_degreeChar) && ([rightStr charAtWithInt:1] == (((GeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))))) || [rightStr isEqual:GeogebraCommonUtilUnicode_get_degree_()]) {
        jboolean rtl = [((GeogebraCommonMainLocalization *) nil_chk(loc)) isRightToLeftDigitsWithGeogebraCommonKernelStringTemplate:self];
        if (rtl) {
          [sb appendWithNSString:GeogebraCommonUtilUnicode_get_degree_()];
        }
        if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
          [sb appendWithChar:'('];
        }
        [sb appendWithNSString:leftStr];
        if (![left isLeaf]) {
          [sb appendWithChar:')'];
        }
        if (!rtl) {
          [sb appendWithNSString:GeogebraCommonUtilUnicode_get_degree_()];
        }
        break;
      }
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      nounary = YES;
      if (![self isPrintLocalizedCommandNames] || ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self leftBracket]];
      }
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || (GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(left) >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
          nounary = NO;
          [sb appendWithChar:'-'];
        }
        else {
          if ([((NSString *) nil_chk(leftStr)) hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
            [sb appendWithNSString:[self leftBracket]];
            [sb appendWithNSString:leftStr];
            [sb appendWithNSString:[self rightBracket]];
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
          else {
            [sb appendWithNSString:leftStr];
          }
        }
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      opIDright = GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(right);
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (opIDright >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        jboolean showMultiplicationSign = NO;
        jboolean multiplicationSpaceNeeded = YES;
        if (nounary) {
          {
            jchar lastLeft;
            jchar firstRight;
            jchar firstLeft;
            switch ([stringType_ ordinal]) {
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
              showMultiplicationSign = YES;
              break;
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
              lastLeft = [leftStr charAtWithInt:((jint) [((NSString *) nil_chk(leftStr)) length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = ((GeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft) || (lastLeft == '}')) && (GeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || [rightStr hasPrefix:@"\\frac"]));
              multiplicationSpaceNeeded = !([right isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_degree_())) isEqual:[right toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_defaultTemplate_]]);
              break;
              default:
              firstLeft = [((NSString *) nil_chk(leftStr)) charAtWithInt:0];
              lastLeft = [leftStr charAtWithInt:((jint) [leftStr length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = (JavaLangCharacter_isDigitWithChar_(lastLeft) && (GeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || ([rightStr charAtWithInt:0] == 'E')));
              multiplicationSpaceNeeded = showMultiplicationSign;
              if (!multiplicationSpaceNeeded) {
                jboolean leftIsNumber = [left isLeaf] && (GeogebraCommonUtilStringUtil_isDigitWithChar_(firstLeft) || (firstLeft == '-')) && GeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft);
                multiplicationSpaceNeeded = (showMultiplicationSign || !(leftIsNumber && !JavaLangCharacter_isDigitWithChar_(firstRight)));
              }
            }
          }
          if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
            [sb appendWithNSString:@"\\-"];
          }
          if (showMultiplicationSign) {
            [sb appendWithNSString:[self multiplicationSign]];
          }
          else if (multiplicationSpaceNeeded) {
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        jboolean rtlMinus;
        if (((rtlMinus = [((NSString *) nil_chk(rightStr)) hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) || ([rightStr charAtWithInt:0] == '-')) || (!nounary && ![right isLeaf] && (opIDright <= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_DIVIDE())) ordinal])) || (showMultiplicationSign && [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()])) {
          if (rtlMinus) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
          if (rtlMinus) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
        }
        else {
          [sb appendWithNSString:rightStr];
        }
      }
      else {
        if (nounary) {
          switch ([stringType_ ordinal]) {
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
            [sb appendWithNSString:[self multiplicationSign]];
            break;
            default:
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      if (![self isPrintLocalizedCommandNames] || ([left evaluatesToList] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([left isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [right isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(leftStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [left isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(rightStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
        [sb appendWithNSString:@"-("];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      break;
    }
  }
  return [sb description];
}

- (NSString *)expToStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v
                                                               withBoolean:(jboolean)valueMode {
  return valueMode ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toValueStringWithGeogebraCommonKernelStringTemplate:self] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(v)) toStringWithGeogebraCommonKernelStringTemplate:self];
}

+ (NSString *)opWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)right
                                                     withBoolean:(jboolean)reverse {
  return GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(right, reverse);
}

- (NSString *)multiplicationSign {
  switch ([stringType_ ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    return @" \\cdot ";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @" cdot ";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA:
    return @" ";
    default:
    return @" * ";
  }
}

- (NSString *)multiplicationSpace {
  return ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) ? @" \\; " : @" ";
}

- (void)appendWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                           withNSString:(NSString *)str
withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
  withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op {
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isLeaf] || ((GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(ev) >= [((GeogebraCommonPluginOperationEnum *) nil_chk(op)) ordinal]) && (!GeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithGeogebraCommonPluginOperationEnum_(op) || !GeogebraCommonKernelArithmeticExpressionNode_chainedBooleanOpWithGeogebraCommonPluginOperationEnum_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([ev wrap])) getOperation])))) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:str];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self leftBracket]];
    [sb appendWithNSString:str];
    [sb appendWithNSString:[self rightBracket]];
  }
}

- (NSString *)divideStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                          withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                               withNSString:(NSString *)leftStr
                                                               withNSString:(NSString *)rightStr
                                                                withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  switch ([stringType_ ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<divide/>", leftStr, rightStr);
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if (([((NSString *) nil_chk(leftStr)) charAtWithInt:0] == '-') && ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || ([left isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && GeogebraCommonKernelArithmeticExpressionNode_isMultiplyOrDivideWithGeogebraCommonKernelArithmeticExpressionNode_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]))))) {
      [sb appendWithNSString:@"-\\frac{"];
      [sb appendWithNSString:[leftStr substring:1]];
      [sb appendWithNSString:@"}{"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"}"];
    }
    else {
      [sb appendWithNSString:@"\\frac{"];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:@"}{"];
      [sb appendWithNSString:rightStr];
      [sb appendWithNSString:@"}"];
    }
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    [sb appendWithNSString:@"{ "];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@" } over { "];
    [sb appendWithNSString:rightStr];
    [sb appendWithNSString:@" }"];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    [sb appendWithNSString:@"("];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@")/("];
    [sb appendWithNSString:rightStr];
    [sb appendWithChar:')'];
    break;
    default:
    if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
      [sb appendWithNSString:leftStr];
      break;
    }
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_DIVIDE()];
    [sb appendWithNSString:@" / "];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_POWER()];
  }
  return [sb description];
}

- (NSString *)notStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                                                            withNSString:(NSString *)leftStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<not/>", leftStr, nil);
  }
  else {
    switch ([stringType_ ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      [sb appendWithNSString:@"\\neg "];
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"neg "];
      break;
      default:
      [sb appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strNOT_()];
    }
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
      [sb appendWithNSString:leftStr];
    }
    else {
      [sb appendWithNSString:[self leftBracket]];
      [sb appendWithNSString:leftStr];
      [sb appendWithNSString:[self rightBracket]];
    }
  }
  return [sb description];
}

+ (void)appendOpWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                             withNSString:(NSString *)string
                             withNSString:(NSString *)leftStr
                             withNSString:(NSString *)rightStr {
  GeogebraCommonKernelStringTemplate_appendOpWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, string, leftStr, rightStr);
}

- (NSString *)orStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                      withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                           withNSString:(NSString *)leftStr
                                                           withNSString:(NSString *)rightStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<or/>", leftStr, rightStr);
  }
  else {
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_OR()];
    [sb appendWithChar:' '];
    switch ([stringType_ ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([self isInsertLineBreaks]) {
        [sb appendWithNSString:@"\\-"];
      }
      [sb appendWithNSString:@"\\vee"];
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"or"];
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      [sb appendWithNSString:@"||"];
      break;
      default:
      [sb appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strOR_()];
    }
    [sb appendWithChar:' '];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_OR()];
  }
  return [sb description];
}

- (NSString *)geqSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\geq";
    }
    return @"\\geq";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @">=";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strGREATER_EQUAL_();
  }
}

- (NSString *)leqSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\leq";
    }
    return @"\\leq";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @"<=";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strLESS_EQUAL_();
  }
}

- (NSString *)greaterSign {
  if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
    return @"\\->";
  }
  return @">";
}

- (NSString *)lessSign {
  if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
    return @"\\-<";
  }
  return @" < ";
}

- (NSString *)strictSubsetSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\subset";
    }
    return @"\\subset";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"subset";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIS_SUBSET_OF_STRICT_();
  }
}

- (NSString *)subsetSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\subseteq";
    }
    return @"\\subseteq";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"subseteq";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strIS_SUBSET_OF_();
  }
}

- (NSString *)notEqualSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\neq";
    }
    return @"\\neq";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"<>";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strNOT_EQUAL_();
  }
}

- (NSString *)equalSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\questeq ";
    }
    return @"\\questeq ";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return @"=";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strEQUAL_BOOLEAN_();
  }
}

- (NSString *)perpSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\perp";
    }
    return @"\\perp";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"ortho";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strPERPENDICULAR_();
  }
}

- (NSString *)parallelSign {
  switch ([[self getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    if ([self isInsertLineBreaks]) {
      return @"\\-\\parallel";
    }
    return @"\\parallel";
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    return @"parallel";
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strPARALLEL_();
  }
}

- (void)infixBinaryWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
       withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)operation
                                withNSString:(NSString *)leftStr
                                withNSString:(NSString *)rightStr
      withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                withNSString:(NSString *)operationString {
  [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:operation];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:' '];
  [sb appendWithNSString:operationString];
  [sb appendWithChar:' '];
  [tpl appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:operation];
}

- (NSString *)andIntervalStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                               withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                                    withNSString:(NSString *)leftStr
                                                                    withNSString:(NSString *)rightStr
                                                                     withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()] || [stringType_ isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    return [self andStringWithGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
  }
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode]) {
    [sb appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) wrap])) getCASstringWithGeogebraCommonKernelStringTemplate:self withBoolean:!valueForm]];
    [sb appendWithChar:' '];
    switch ([[((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] ordinal]) {
      case GeogebraCommonPluginOperation_LESS:
      [sb appendWithNSString:[self lessSign]];
      break;
      case GeogebraCommonPluginOperation_LESS_EQUAL:
      [sb appendWithNSString:[self leqSign]];
      break;
      case GeogebraCommonPluginOperation_GREATER:
      [sb appendWithNSString:[self greaterSign]];
      break;
      case GeogebraCommonPluginOperation_EQUAL_BOOLEAN:
      [sb appendWithNSString:[self equalSign]];
      break;
      case GeogebraCommonPluginOperation_NOT_EQUAL:
      [sb appendWithNSString:[self notEqualSign]];
      break;
      case GeogebraCommonPluginOperation_GREATER_EQUAL:
      [sb appendWithNSString:[self geqSign]];
      break;
      case GeogebraCommonPluginOperation_IS_SUBSET_OF:
      [sb appendWithNSString:[self subsetSign]];
      break;
      case GeogebraCommonPluginOperation_IS_SUBSET_OF_STRICT:
      [sb appendWithNSString:[self strictSubsetSign]];
      break;
      case GeogebraCommonPluginOperation_PARALLEL:
      [sb appendWithNSString:[self parallelSign]];
      break;
      case GeogebraCommonPluginOperation_PERPENDICULAR:
      [sb appendWithNSString:[self perpSign]];
      break;
      default:
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation], @" invalid in chain"));
    }
    [sb appendWithChar:' '];
    [sb appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getRightTree])) getCASstringWithGeogebraCommonKernelStringTemplate:self withBoolean:!valueForm]];
    return [sb description];
  }
  return [self andStringWithGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonKernelArithmeticExpressionValue:right withNSString:leftStr withNSString:rightStr];
}

- (NSString *)andStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                       withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                            withNSString:(NSString *)leftStr
                                                            withNSString:(NSString *)rightStr {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<and/>", leftStr, rightStr);
  }
  else if ([stringType_ isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    [sb appendWithChar:'('];
    [sb appendWithNSString:leftStr];
    [sb appendWithNSString:@" && "];
    [sb appendWithNSString:rightStr];
    [sb appendWithChar:')'];
  }
  else {
    [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_AND()];
    [sb appendWithChar:' '];
    switch ([stringType_ ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([self isInsertLineBreaks]) {
        [sb appendWithNSString:@"\\-"];
      }
      [sb appendWithNSString:@"\\wedge"];
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      [sb appendWithNSString:@"and"];
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      [sb appendWithNSString:@"&&"];
      break;
      default:
      [sb appendWithNSString:GeogebraCommonKernelArithmeticExpressionNodeConstants_get_strAND_()];
    }
    [sb appendWithChar:' '];
    [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_AND()];
  }
  return [sb description];
}

- (NSString *)powerStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                         withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                              withNSString:(NSString *)leftStr
                                                              withNSString:(NSString *)rightStr
                                                               withBoolean:(jboolean)valueForm {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<power/>", leftStr, rightStr);
  }
  else {
    jboolean finished = NO;
    if ([stringType_ isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isExpressionNode]) {
      {
        jint index;
        switch ([[((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] ordinal]) {
          case GeogebraCommonPluginOperation_SIN:
          case GeogebraCommonPluginOperation_COS:
          case GeogebraCommonPluginOperation_TAN:
          case GeogebraCommonPluginOperation_SEC:
          case GeogebraCommonPluginOperation_CSC:
          case GeogebraCommonPluginOperation_COT:
          case GeogebraCommonPluginOperation_SINH:
          case GeogebraCommonPluginOperation_COSH:
          case GeogebraCommonPluginOperation_TANH:
          case GeogebraCommonPluginOperation_SECH:
          case GeogebraCommonPluginOperation_CSCH:
          case GeogebraCommonPluginOperation_COTH:
          @try {
            index = JavaLangInteger_parseIntWithNSString_(rightStr);
          }
          @catch (JavaLangNumberFormatException *nfe) {
            index = JavaLangInteger_MAX_VALUE;
          }
          if ((index > 0) && (index != JavaLangInteger_MAX_VALUE)) {
            NSString *leftStrTrimmed = [((NSString *) nil_chk(leftStr)) trim];
            jint spaceIndex = [((NSString *) nil_chk([((NSString *) nil_chk(leftStrTrimmed)) trim])) indexOf:' '];
            [sb appendWithNSString:[leftStrTrimmed substring:0 endIndex:spaceIndex]];
            [sb appendWithNSString:@" ^{"];
            [sb appendWithNSString:rightStr];
            [sb appendWithNSString:@"}"];
            [sb appendWithNSString:[leftStrTrimmed substring:spaceIndex + 1]];
            finished = YES;
            break;
          }
          default:
          ;
        }
      }
      if (finished) {
        return [sb description];
      }
    }
    switch ([stringType_ ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([@"e" isEqual:leftStr] || [((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_EULER_STRING_())) isEqual:leftStr]) {
        [sb appendWithNSString:@"exp("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_DIVIDE()) {
        GeogebraCommonKernelArithmeticExpressionNode *enR = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]);
        [sb appendWithNSString:@"simplify(surd("];
        [sb appendWithNSString:leftStr];
        [sb appendWithChar:','];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[enR getRight] withBoolean:valueForm]];
        [sb appendWithNSString:@")"];
        [sb appendWithNSString:@"^("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[enR getLeft] withBoolean:valueForm]];
        [sb appendWithNSString:@"))"];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && !([GeogebraCommonKernelArithmeticListValue_class_() isInstance:[left unwrap]] && [((id<GeogebraCommonKernelArithmeticListValue>) nil_chk(((id<GeogebraCommonKernelArithmeticListValue>) check_protocol_cast([left unwrap], @protocol(GeogebraCommonKernelArithmeticListValue))))) isMatrix])) {
          [sb appendWithNSString:@").^("];
        }
        else {
          [sb appendWithNSString:@")^("];
        }
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
      }
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] && ([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-')) {
        [sb appendWithNSString:leftStr];
        break;
      }
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      default:
      if (([((NSString *) nil_chk(leftStr)) charAtWithInt:0] != '-') && ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || ((GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(left) > [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_POWER())) ordinal]) && (GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(left) != [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_EXP())) ordinal])))) {
        [sb appendWithNSString:leftStr];
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
    }
    {
      jboolean addParentheses;
      switch ([stringType_ ordinal]) {
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
        if ([@"1" isEqual:rightStr]) {
          break;
        }
        [sb appendWithChar:'^'];
        addParentheses = ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isExpressionNode] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_POWER()]);
        [sb appendWithChar:'{'];
        if (addParentheses) {
          [sb appendWithNSString:[self leftBracket]];
        }
        [sb appendWithNSString:rightStr];
        if (addParentheses) {
          [sb appendWithNSString:[self rightBracket]];
        }
        [sb appendWithChar:'}'];
        break;
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
        break;
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
        case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
        [sb appendWithChar:'^'];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
        break;
        default:
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || ((GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(right) > [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_POWER())) ordinal]) && (GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(right) != [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_EXP())) ordinal]))) {
          @try {
            jint i = JavaLangInteger_parseIntWithNSString_(rightStr);
            NSString *index = @"";
            if (i < 0) {
              [sb appendWithChar:0x207b];
              i = -i;
            }
            if (i == 0) {
              [sb appendWithChar:0x2070];
            }
            else {
              while (i > 0) {
                switch (i % 10) {
                  case 0:
                  index = JreStrcat("C$", 0x2070, index);
                  break;
                  case 1:
                  index = JreStrcat("C$", 0x00b9, index);
                  break;
                  case 2:
                  index = JreStrcat("C$", 0x00b2, index);
                  break;
                  case 3:
                  index = JreStrcat("C$", 0x00b3, index);
                  break;
                  case 4:
                  index = JreStrcat("C$", 0x2074, index);
                  break;
                  case 5:
                  index = JreStrcat("C$", 0x2075, index);
                  break;
                  case 6:
                  index = JreStrcat("C$", 0x2076, index);
                  break;
                  case 7:
                  index = JreStrcat("C$", 0x2077, index);
                  break;
                  case 8:
                  index = JreStrcat("C$", 0x2078, index);
                  break;
                  case 9:
                  index = JreStrcat("C$", 0x2079, index);
                  break;
                }
                i = i / 10;
              }
            }
            [sb appendWithNSString:index];
          }
          @catch (JavaLangException *e) {
            [sb appendWithChar:'^'];
            [sb appendWithNSString:rightStr];
          }
        }
        else {
          [sb appendWithChar:'^'];
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
        }
      }
    }
  }
  return [sb description];
}

- (NSString *)convertScientificNotationWithNSString:(NSString *)scientificStr {
  if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
    return GeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(scientificStr);
  }
  if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()]) {
    return scientificStr;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(((jint) [((NSString *) nil_chk(scientificStr)) length]) * 2) autorelease];
  jboolean Efound = NO;
  for (jint i = 0; i < ((jint) [scientificStr length]); i++) {
    jchar ch = [scientificStr charAtWithInt:i];
    if (ch == 'E') {
      if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
        [sb appendWithNSString:@" \\cdot 10^{"];
      }
      else {
        [sb appendWithNSString:@"*10^("];
      }
      Efound = YES;
    }
    else if (ch != '+') {
      [sb appendWithChar:ch];
    }
  }
  if (Efound) {
    if ([self hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) {
      [sb appendWithNSString:@"}"];
    }
    else {
      [sb appendWithNSString:@")"];
    }
  }
  return [sb description];
}

+ (NSString *)convertScientificNotationGiacWithNSString:(NSString *)originalString {
  return GeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(originalString);
}

- (jboolean)isHideLHS {
  return self->hideLHS_;
}

- (void)dealloc {
  RELEASE_(name_);
  RELEASE_(stringType_);
  RELEASE_(casPrintFormPI_);
  RELEASE_(sf_);
  RELEASE_(nf_);
  RELEASE_(precisions_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelStringTemplate class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_noLocalDefault_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"nonLocalDefault"));
    {
      GeogebraCommonKernelStringTemplate_noLocalDefault_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_prefixedDefault_, nil, new_GeogebraCommonKernelStringTemplate_$1_initWithNSString_(@"prefixedDefault"));
    {
      GeogebraCommonKernelStringTemplate_prefixedDefault_->localizeCmds_ = NO;
      GeogebraCommonKernelStringTemplate_prefixedDefault_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_prefixedDefault_->forceNF_ = YES;
      GeogebraCommonKernelStringTemplate_prefixedDefault_->usePrefix_ = YES;
      GeogebraCommonKernelStringTemplate_set_nf_(GeogebraCommonKernelStringTemplate_prefixedDefault_, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:15]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_defaultTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"defaultTemplate"));
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_defaultTemplateLocal_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"defaultTemplateLocal"));
    {
      GeogebraCommonKernelStringTemplate_defaultTemplateLocal_->localizeCmds_ = YES;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_realTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"realTemplate"));
    {
      GeogebraCommonKernelStringTemplate_realTemplate_->useRealLabels_ = YES;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_latexTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"latexTemplate"));
    {
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_latexTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_latexTemplateMQ_, nil, new_GeogebraCommonKernelStringTemplate_$2_initWithNSString_(@"latexTemplate"));
    {
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_latexTemplateMQ_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_mathmlTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"mathmlTemplate"));
    {
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_mathmlTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML());
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_libreofficeTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"libreOfficeTemplate"));
    {
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_libreofficeTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE());
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_giacTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"giacTemplate"));
    {
      GeogebraCommonKernelStringTemplate_giacTemplate_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_giacTemplate_->usePrefix_ = NO;
      GeogebraCommonKernelStringTemplate_giacTemplate_->forceNF_ = YES;
      GeogebraCommonKernelStringTemplate_giacTemplate_->localizeCmds_ = NO;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_giacTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC());
      GeogebraCommonKernelStringTemplate_set_nf_(GeogebraCommonKernelStringTemplate_giacTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:15]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_xmlTemplate_, nil, new_GeogebraCommonKernelStringTemplate_$3_initWithNSString_(@"xmlTemplate"));
    {
      GeogebraCommonKernelStringTemplate_xmlTemplate_->forceSF_ = YES;
      GeogebraCommonKernelStringTemplate_xmlTemplate_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_xmlTemplate_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_xmlTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      GeogebraCommonKernelStringTemplate_xmlTemplate_->localizeCmds_ = NO;
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_xmlTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_editTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"editTemplate"));
    {
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_editTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:GeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION withInt:20 withBoolean:NO]);
      GeogebraCommonKernelStringTemplate_set_nf_(GeogebraCommonKernelStringTemplate_editTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:GeogebraCommonKernelGeosGeoElement_MIN_EDITING_PRINT_PRECISION]);
      GeogebraCommonKernelStringTemplate_editTemplate_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_editTemplate_->hideLHS_ = YES;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_regression_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"regression"));
    {
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_regression_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:6 withInt:20 withBoolean:NO]);
      GeogebraCommonKernelStringTemplate_set_nf_(GeogebraCommonKernelStringTemplate_regression_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:6]);
      GeogebraCommonKernelStringTemplate_regression_->forceSF_ = YES;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_regression_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_ogpTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"ogpTemplate"));
    {
      GeogebraCommonKernelStringTemplate_ogpTemplate_->forceSF_ = NO;
      GeogebraCommonKernelStringTemplate_ogpTemplate_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_ogpTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_OGP());
      GeogebraCommonKernelStringTemplate_ogpTemplate_->localizeCmds_ = NO;
      GeogebraCommonKernelStringTemplate_set_nf_(GeogebraCommonKernelStringTemplate_ogpTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getNumberFormatWithInt:0]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_maxPrecision_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"maxPrecision"));
    {
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_maxPrecision_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
      GeogebraCommonKernelStringTemplate_maxPrecision_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_maxPrecision_->forceSF_ = YES;
      GeogebraCommonKernelStringTemplate_maxPrecision_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_numericDefault_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"numericDefault"));
    {
      GeogebraCommonKernelStringTemplate_numericDefault_->allowMoreDigits__ = YES;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_numericNoLocal_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"numericNoLocal"));
    {
      GeogebraCommonKernelStringTemplate_numericNoLocal_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_numericNoLocal_->localizeCmds_ = NO;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_numericLatex_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"numericLatex"));
    {
      GeogebraCommonKernelStringTemplate_set_stringType_(GeogebraCommonKernelStringTemplate_numericLatex_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX());
      GeogebraCommonKernelStringTemplate_numericLatex_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_numericLatex_->useRealLabels_ = YES;
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_testTemplate_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"testTemplate"));
    {
      GeogebraCommonKernelStringTemplate_testTemplate_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_testTemplate_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_testTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_testTemplateJSON_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"testTemplate"));
    {
      GeogebraCommonKernelStringTemplate_testTemplate_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_testTemplate_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    JreStrongAssignAndConsume(&GeogebraCommonKernelStringTemplate_testNumeric_, nil, new_GeogebraCommonKernelStringTemplate_initWithNSString_(@"testNumeric"));
    {
      GeogebraCommonKernelStringTemplate_testNumeric_->internationalizeDigits__ = NO;
      GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate_testNumeric_, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML());
      GeogebraCommonKernelStringTemplate_testNumeric_->allowMoreDigits__ = YES;
      GeogebraCommonKernelStringTemplate_set_sf_(GeogebraCommonKernelStringTemplate_testNumeric_, [GeogebraCommonFactoriesFormatFactory_get_prototype_() getScientificFormatWithInt:15 withInt:20 withBoolean:NO]);
    }
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelStringTemplate)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "isInsertLineBreaks", NULL, "Z", 0x1, NULL, NULL },
    { "initWithNSString:", "StringTemplate", NULL, 0x4, NULL, NULL },
    { "getStringType", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", 0x1, NULL, NULL },
    { "internationalizeDigits", NULL, "Z", 0x1, NULL, NULL },
    { "getPi", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "get", "Lgeogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "setType", "V", 0x2, NULL, NULL },
    { "useScientificWithBoolean:", "useScientific", "Z", 0x1, NULL, NULL },
    { "hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "hasType", "Z", 0x1, NULL, NULL },
    { "printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printDecimals", "Lgeogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printFigures", "Lgeogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "fullFigures", "Lgeogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "printScientificWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withInt:withBoolean:", "printScientific", "Lgeogebra.common.kernel.StringTemplate;", 0x9, NULL, NULL },
    { "getSFWithGeogebraCommonUtilScientificFormatAdapter:", "getSF", "Lgeogebra.common.util.ScientificFormatAdapter;", 0x1, NULL, NULL },
    { "getNFWithGeogebraCommonUtilNumberFormatAdapter:", "getNF", "Lgeogebra.common.util.NumberFormatAdapter;", 0x1, NULL, NULL },
    { "isPrintLocalizedCommandNames", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordStyleWithInt:", "getCoordStyle", "I", 0x1, NULL, NULL },
    { "isUseTempVariablePrefix", NULL, "Z", 0x1, NULL, NULL },
    { "getRoundHalfUpFactorWithDouble:withGeogebraCommonUtilNumberFormatAdapter:withGeogebraCommonUtilScientificFormatAdapter:withBoolean:", "getRoundHalfUpFactor", "D", 0x1, NULL, NULL },
    { "allowMoreDigits", NULL, "Z", 0x1, NULL, NULL },
    { "getPrecisionWithGeogebraCommonUtilNumberFormatAdapter:", "getPrecision", "D", 0x1, NULL, NULL },
    { "isUseRealLabels", NULL, "Z", 0x1, NULL, NULL },
    { "deriveReal", NULL, "Lgeogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.StringTemplate;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "printVariableNameWithNSString:", "printVariableName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:withNSString:", "printVariableName", "Ljava.lang.String;", 0x12, NULL, NULL },
    { "addTempVariablePrefixWithNSString:", "addTempVariablePrefix", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "deriveMathMLTemplate", NULL, "Lgeogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "deriveLaTeXTemplate", NULL, "Lgeogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "hasCASType", NULL, "Z", 0x1, NULL, NULL },
    { "isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:", "isNDvector", "Z", 0x4, NULL, NULL },
    { "plusStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "plusString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leftBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "rightBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leftSquareBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "rightSquareBracket", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "right", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "left", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "minusStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withGeogebraCommonMainLocalization:", "minusString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "multiplyStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withGeogebraCommonMainLocalization:", "multiplyString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "expToStringWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "expToString", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "opWithGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "op", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "multiplicationSign", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "multiplicationSpace", NULL, "Ljava.lang.String;", 0x4, NULL, NULL },
    { "appendWithJavaLangStringBuilder:withNSString:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonPluginOperationEnum:", "append", "V", 0x1, NULL, NULL },
    { "divideStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "divideString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "notStringWithGeogebraCommonKernelArithmeticExpressionValue:withNSString:", "notString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "appendOpWithJavaLangStringBuilder:withNSString:withNSString:withNSString:", "appendOp", "V", 0x9, NULL, NULL },
    { "orStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:", "orString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "geqSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "leqSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "greaterSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "lessSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "strictSubsetSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "subsetSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "notEqualSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "equalSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "perpSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "parallelSign", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "infixBinaryWithJavaLangStringBuilder:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonPluginOperationEnum:withNSString:withNSString:withGeogebraCommonKernelStringTemplate:withNSString:", "infixBinary", "V", 0x1, NULL, NULL },
    { "andIntervalStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "andIntervalString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "andStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:", "andString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "powerStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:", "powerString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertScientificNotationWithNSString:", "convertScientificNotation", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "convertScientificNotationGiacWithNSString:", "convertScientificNotationGiac", "Ljava.lang.String;", 0x9, NULL, NULL },
    { "isHideLHS", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ROUND_HALF_UP_FACTOR_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStringTemplate_ROUND_HALF_UP_FACTOR },
    { "name_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "hideLHS_", NULL, 0x2, "Z", NULL, NULL,  },
    { "noLocalDefault_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_noLocalDefault_, NULL,  },
    { "prefixedDefault_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_prefixedDefault_, NULL,  },
    { "defaultTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_defaultTemplate_, NULL,  },
    { "defaultTemplateLocal_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_defaultTemplateLocal_, NULL,  },
    { "realTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_realTemplate_, NULL,  },
    { "latexTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_latexTemplate_, NULL,  },
    { "latexTemplateMQ_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_latexTemplateMQ_, NULL,  },
    { "mathmlTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_mathmlTemplate_, NULL,  },
    { "libreofficeTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_libreofficeTemplate_, NULL,  },
    { "giacTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_giacTemplate_, NULL,  },
    { "xmlTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_xmlTemplate_, NULL,  },
    { "editTemplate_", NULL, 0x9, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_editTemplate_, NULL,  },
    { "regression_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_regression_, NULL,  },
    { "ogpTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_ogpTemplate_, NULL,  },
    { "maxPrecision_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_maxPrecision_, NULL,  },
    { "numericDefault_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_numericDefault_, NULL,  },
    { "numericNoLocal_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_numericNoLocal_, NULL,  },
    { "numericLatex_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_numericLatex_, NULL,  },
    { "testTemplate_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_testTemplate_, NULL,  },
    { "testTemplateJSON_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_testTemplateJSON_, NULL,  },
    { "testNumeric_", NULL, 0x19, "Lgeogebra.common.kernel.StringTemplate;", &GeogebraCommonKernelStringTemplate_testNumeric_, NULL,  },
    { "stringType_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", NULL, NULL,  },
    { "internationalizeDigits__", "internationalizeDigits", 0x2, "Z", NULL, NULL,  },
    { "casPrintFormPI_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "sf_", NULL, 0x2, "Lgeogebra.common.util.ScientificFormatAdapter;", NULL, NULL,  },
    { "nf_", NULL, 0x2, "Lgeogebra.common.util.NumberFormatAdapter;", NULL, NULL,  },
    { "forceSF_", NULL, 0x2, "Z", NULL, NULL,  },
    { "forceNF_", NULL, 0x2, "Z", NULL, NULL,  },
    { "allowMoreDigits__", "allowMoreDigits", 0x2, "Z", NULL, NULL,  },
    { "useRealLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "localizeCmds_", NULL, 0x2, "Z", NULL, NULL,  },
    { "usePrefix_", NULL, 0x2, "Z", NULL, NULL,  },
    { "precisions_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStringTemplate = { 2, "StringTemplate", "geogebra.common.kernel", NULL, 0x1, 67, methods, 36, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStringTemplate;
}

@end

void GeogebraCommonKernelStringTemplate_initWithNSString_(GeogebraCommonKernelStringTemplate *self, NSString *name) {
  NSObject_init(self);
  self->hideLHS_ = NO;
  GeogebraCommonKernelStringTemplate_setAndConsume_precisions_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1E-1, 1E-2, 1E-3, 1E-4, 1E-5, 1E-6, 1E-7, 1E-8, 1E-9, 1E-10, 1E-11, 1E-12, 1E-13, 1E-14, 1E-15, 1E-16 } count:17]);
  self->internationalizeDigits__ = YES;
  self->localizeCmds_ = YES;
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(self, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA());
  GeogebraCommonKernelStringTemplate_set_name_(self, name);
}

GeogebraCommonKernelStringTemplate *new_GeogebraCommonKernelStringTemplate_initWithNSString_(NSString *name) {
  GeogebraCommonKernelStringTemplate *self = [GeogebraCommonKernelStringTemplate alloc];
  GeogebraCommonKernelStringTemplate_initWithNSString_(self, name);
  return self;
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t) {
  GeogebraCommonKernelStringTemplate_initialize();
  if (t == nil || [t isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()]) {
    return GeogebraCommonKernelStringTemplate_defaultTemplate_;
  }
  GeogebraCommonKernelStringTemplate *tpl = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@", @"TemplateFor:", t)) autorelease];
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, t);
  return tpl;
}

void GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelStringTemplate *self, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *t) {
  GeogebraCommonKernelStringTemplate_set_stringType_(self, t);
  switch ([t ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"%pi");
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
    GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"pi");
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"\\pi");
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
    GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, @"%pi");
    break;
    default:
    GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(self, GeogebraCommonUtilUnicode_get_PI_STRING_());
  }
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  GeogebraCommonKernelStringTemplate_initialize();
  GeogebraCommonKernelStringTemplate *tpl = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateFor:", type, @",Decimals:", decimals, ',', allowMore)) autorelease];
  tpl->forceNF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  GeogebraCommonKernelStringTemplate_set_nf_(tpl, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getNumberFormatWithInt:decimals]);
  return tpl;
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  GeogebraCommonKernelStringTemplate_initialize();
  GeogebraCommonKernelStringTemplate *tpl = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateFor:", type, @",Figures:", decimals, ',', allowMore)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  GeogebraCommonKernelStringTemplate_set_sf_(tpl, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:decimals withInt:20 withBoolean:NO]);
  return tpl;
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_fullFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type) {
  GeogebraCommonKernelStringTemplate_initialize();
  GeogebraCommonKernelStringTemplate *tpl = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@", @"FullFiguresFor:", type)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = YES;
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  GeogebraCommonKernelStringTemplate_set_sf_(tpl, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:16 withInt:350 withBoolean:NO]);
  return tpl;
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_printScientificWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type, jint decimals, jboolean allowMore) {
  GeogebraCommonKernelStringTemplate_initialize();
  GeogebraCommonKernelStringTemplate *tpl = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$@$ICZ", @"TemplateForScientific:", type, @",Decimals:", decimals, ',', allowMore)) autorelease];
  tpl->forceSF_ = YES;
  tpl->allowMoreDigits__ = allowMore;
  GeogebraCommonKernelStringTemplate_setTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(tpl, type);
  GeogebraCommonKernelStringTemplate_set_sf_(tpl, [((GeogebraCommonFactoriesFormatFactory *) nil_chk(GeogebraCommonFactoriesFormatFactory_get_prototype_())) getScientificFormatWithInt:decimals withInt:20 withBoolean:YES]);
  return tpl;
}

GeogebraCommonKernelStringTemplate *GeogebraCommonKernelStringTemplate_copy__(GeogebraCommonKernelStringTemplate *self) {
  GeogebraCommonKernelStringTemplate *result = [new_GeogebraCommonKernelStringTemplate_initWithNSString_(JreStrcat("$$", @"CopyOf:", self->name_)) autorelease];
  GeogebraCommonKernelStringTemplate_set_stringType_(result, self->stringType_);
  GeogebraCommonKernelStringTemplate_set_nf_(result, self->nf_);
  GeogebraCommonKernelStringTemplate_set_sf_(result, self->sf_);
  result->usePrefix_ = self->usePrefix_;
  result->allowMoreDigits__ = self->allowMoreDigits__;
  GeogebraCommonKernelStringTemplate_set_casPrintFormPI_(result, self->casPrintFormPI_);
  result->internationalizeDigits__ = self->internationalizeDigits__;
  result->useRealLabels_ = self->useRealLabels_;
  result->localizeCmds_ = self->localizeCmds_;
  result->forceNF_ = self->forceNF_;
  result->forceSF_ = self->forceSF_;
  return result;
}

NSString *GeogebraCommonKernelStringTemplate_printVariableNameWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withNSString_(GeogebraCommonKernelStringTemplate *self, GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm, NSString *label) {
  switch ([printForm ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    return GeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(self, [((NSString *) nil_chk(label)) replace:@"$" withSequence:@""]);
    default:
    return label;
  }
}

NSString *GeogebraCommonKernelStringTemplate_addTempVariablePrefixWithNSString_(GeogebraCommonKernelStringTemplate *self, NSString *label) {
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()] && ([@"x" isEqual:label] || [@"y" isEqual:label] || [@"y'" isEqual:label] || [@"y''" isEqual:label] || [@"z" isEqual:label])) {
    return label;
  }
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:GeogebraCommonKernelKernel_get_TMP_VARIABLE_PREFIX_()];
  [sb appendWithNSString:[((NSString *) nil_chk(label)) replaceAll:@"'" withReplacement:@"unicode39u"]];
  return [sb description];
}

NSString *GeogebraCommonKernelStringTemplate_right(GeogebraCommonKernelStringTemplate *self) {
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(self->stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) return @" \\right";
  else if ([self->stringType_ isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) return @" right ";
  else return @"";
}

NSString *GeogebraCommonKernelStringTemplate_left(GeogebraCommonKernelStringTemplate *self) {
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(self->stringType_)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) return @" \\left";
  else if ([self->stringType_ isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LIBRE_OFFICE()]) return @" left ";
  else return @"";
}

NSString *GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelArithmeticExpressionNode *right, jboolean reverse) {
  GeogebraCommonKernelStringTemplate_initialize();
  switch ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) getOperation] ordinal]) {
    case GeogebraCommonPluginOperation_LESS:
    return reverse ? @">" : @"<";
    case GeogebraCommonPluginOperation_LESS_EQUAL:
    return reverse ? @">=" : @"<=";
    case GeogebraCommonPluginOperation_GREATER_EQUAL:
    return reverse ? @"<=" : @">=";
    case GeogebraCommonPluginOperation_GREATER:
    return reverse ? @"<" : @">";
  }
  return nil;
}

void GeogebraCommonKernelStringTemplate_appendOpWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(JavaLangStringBuilder *sb, NSString *string, NSString *leftStr, NSString *rightStr) {
  GeogebraCommonKernelStringTemplate_initialize();
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:string];
  [sb appendWithChar:'('];
  [sb appendWithNSString:leftStr];
  [sb appendWithChar:','];
  [sb appendWithNSString:rightStr];
  [sb appendWithChar:')'];
}

NSString *GeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(NSString *originalString) {
  GeogebraCommonKernelStringTemplate_initialize();
  if ([((NSString *) nil_chk(originalString)) indexOfString:@"E-"] > -1) {
    IOSObjectArray *s = [originalString split:@"E-"];
    jint i = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(s), 1));
    jint dotIndex = [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) indexOf:'.'];
    if (dotIndex > -1) {
      i += ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) - dotIndex - 1;
      IOSObjectArray_Set(s, 0, [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) replace:@"." withSequence:@""]);
    }
    return JreStrcat("C$$$C", '(', IOSObjectArray_Get(s, 0), @"/1", GeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', i), ')');
  }
  else if ([originalString indexOfString:@"E"] > -1) {
    IOSObjectArray *s = [originalString split:@"E"];
    jint i = JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(s), 1));
    jint dotIndex = [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) indexOf:'.'];
    if (dotIndex > -1) {
      i -= ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) - dotIndex - 1;
      IOSObjectArray_Set(s, 0, [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) replace:@"." withSequence:@""]);
    }
    if (i < 0) {
      return JreStrcat("$C$", [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) substring:0 endIndex:((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) + i], '.', [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) substring:((jint) [((NSString *) nil_chk(IOSObjectArray_Get(s, 0))) length]) + i]);
    }
    if (i == 0) {
      return IOSObjectArray_Get(s, 0);
    }
    return JreStrcat("$$", IOSObjectArray_Get(s, 0), GeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', i));
  }
  jint dotIndex = [originalString indexOf:'.'];
  if (dotIndex > -1) {
    if ([originalString hasSuffix:@"%"]) {
      return JreStrcat("C$$$C", '(', [((NSString *) nil_chk([originalString substring:0 endIndex:((jint) [originalString length]) - 1])) replace:@"." withSequence:@""], @"/1", GeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', ((jint) [originalString length]) - dotIndex), ')');
    }
    return JreStrcat("C$$$C", '(', [((NSString *) nil_chk(([originalString replace:@"." withSequence:@""]))) replaceFirst:@"^0+(?!$)" withReplacement:@""], @"/1", GeogebraCommonUtilStringUtil_repeatWithChar_withInt_('0', ((jint) [originalString length]) - dotIndex - 1), ')');
  }
  return originalString;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStringTemplate)

@implementation GeogebraCommonKernelStringTemplate_$1

- (jdouble)getRoundHalfUpFactorWithDouble:(jdouble)abs
withGeogebraCommonUtilNumberFormatAdapter:(id<GeogebraCommonUtilNumberFormatAdapter>)nf2
withGeogebraCommonUtilScientificFormatAdapter:(id<GeogebraCommonUtilScientificFormatAdapter>)sf2
                              withBoolean:(jboolean)useSF {
  return 1;
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  GeogebraCommonKernelStringTemplate_$1_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getRoundHalfUpFactorWithDouble:withGeogebraCommonUtilNumberFormatAdapter:withGeogebraCommonUtilScientificFormatAdapter:withBoolean:", "getRoundHalfUpFactor", "D", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStringTemplate_$1 = { 2, "", "geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStringTemplate_$1;
}

@end

void GeogebraCommonKernelStringTemplate_$1_initWithNSString_(GeogebraCommonKernelStringTemplate_$1 *self, NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

GeogebraCommonKernelStringTemplate_$1 *new_GeogebraCommonKernelStringTemplate_$1_initWithNSString_(NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_$1 *self = [GeogebraCommonKernelStringTemplate_$1 alloc];
  GeogebraCommonKernelStringTemplate_$1_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStringTemplate_$1)

@implementation GeogebraCommonKernelStringTemplate_$2

- (NSString *)multiplyStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                            withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                                 withNSString:(NSString *)leftStr
                                                                 withNSString:(NSString *)rightStr
                                                                  withBoolean:(jboolean)valueForm
                                           withGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  GeogebraCommonPluginOperationEnum *operation = GeogebraCommonPluginOperationEnum_get_MULTIPLY();
  {
    jboolean nounary;
    jint opIDright;
    switch ([[self getStringType] ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
      GeogebraCommonExportMathmlTemplate_mathmlWithJavaLangStringBuilder_withNSString_withNSString_withNSString_(sb, @"<times/>", leftStr, rightStr);
      break;
      default:
      if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:rightStr withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(right, 1, !valueForm)) {
        [self appendWithJavaLangStringBuilder:sb withNSString:leftStr withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonPluginOperationEnum:operation];
        break;
      }
      else if (((((jint) [((NSString *) nil_chk(rightStr)) length]) == 2) && ((([rightStr charAtWithInt:0] == GeogebraCommonUtilUnicode_degreeChar) && ([rightStr charAtWithInt:1] == (((GeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))) || (([rightStr charAtWithInt:0] == GeogebraCommonUtilUnicode_degreeChar) && ([rightStr charAtWithInt:1] == (((GeogebraCommonMainLocalization *) nil_chk(loc))->unicodeZero_ + 1))))) || [rightStr isEqual:GeogebraCommonUtilUnicode_get_degree_()]) {
        jboolean rtl = [((GeogebraCommonMainLocalization *) nil_chk(loc)) isRightToLeftDigitsWithGeogebraCommonKernelStringTemplate:self];
        if (rtl) {
          [sb appendWithNSString:GeogebraCommonUtilUnicode_get_degree_()];
        }
        if (![((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf]) {
          [sb appendWithChar:'('];
        }
        [sb appendWithNSString:leftStr];
        if (![left isLeaf]) {
          [sb appendWithChar:')'];
        }
        if (!rtl) {
          [sb appendWithNSString:GeogebraCommonUtilUnicode_get_degree_()];
        }
        break;
      }
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
      nounary = YES;
      if (![self isPrintLocalizedCommandNames] || ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) evaluatesToList] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self leftBracket]];
      }
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(left)) isLeaf] || (GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(left) >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
          nounary = NO;
          [sb appendWithChar:'-'];
        }
        else {
          if ([((NSString *) nil_chk(leftStr)) hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
            [sb appendWithNSString:[self leftBracket]];
            [sb appendWithNSString:leftStr];
            [sb appendWithNSString:[self rightBracket]];
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
          else {
            [sb appendWithNSString:leftStr];
          }
        }
      }
      else {
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      opIDright = GeogebraCommonKernelArithmeticExpressionNode_opIDWithGeogebraCommonKernelArithmeticExpressionValue_(right);
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(right)) isLeaf] || (opIDright >= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_MULTIPLY())) ordinal])) {
        jboolean showMultiplicationSign = YES;
        jboolean multiplicationSpaceNeeded = NO;
        if (nounary) {
          {
            jchar lastLeft;
            jchar firstRight;
            jchar firstLeft;
            switch ([[self getStringType] ordinal]) {
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
              showMultiplicationSign = YES;
              break;
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LIBRE_OFFICE:
              case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
              lastLeft = [leftStr charAtWithInt:((jint) [((NSString *) nil_chk(leftStr)) length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = !([right isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_degree_())) isEqual:[right toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]);
              multiplicationSpaceNeeded = !([right isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [((NSString *) nil_chk(GeogebraCommonUtilUnicode_get_degree_())) isEqual:[right toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]]);
              break;
              default:
              firstLeft = [((NSString *) nil_chk(leftStr)) charAtWithInt:0];
              lastLeft = [leftStr charAtWithInt:((jint) [leftStr length]) - 1];
              firstRight = [((NSString *) nil_chk(rightStr)) charAtWithInt:0];
              showMultiplicationSign = (JavaLangCharacter_isDigitWithChar_(lastLeft) && (GeogebraCommonUtilStringUtil_isDigitWithChar_(firstRight) || ([rightStr charAtWithInt:0] == 'E')));
              multiplicationSpaceNeeded = showMultiplicationSign;
              if (!multiplicationSpaceNeeded) {
                jboolean leftIsNumber = [left isLeaf] && (GeogebraCommonUtilStringUtil_isDigitWithChar_(firstLeft) || (firstLeft == '-')) && GeogebraCommonUtilStringUtil_isDigitWithChar_(lastLeft);
                multiplicationSpaceNeeded = (showMultiplicationSign || !(leftIsNumber && !JavaLangCharacter_isDigitWithChar_(firstRight)));
              }
            }
          }
          if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()] && [self isInsertLineBreaks]) {
            [sb appendWithNSString:@"\\-"];
          }
          if (showMultiplicationSign) {
            [sb appendWithNSString:[self multiplicationSign]];
          }
          else if (multiplicationSpaceNeeded) {
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        jboolean rtlMinus;
        if (((rtlMinus = [((NSString *) nil_chk(rightStr)) hasPrefix:GeogebraCommonUtilUnicode_get_RightToLeftUnaryMinusSign_()]) || ([rightStr charAtWithInt:0] == '-')) || (!nounary && ![right isLeaf] && (opIDright <= [((GeogebraCommonPluginOperationEnum *) nil_chk(GeogebraCommonPluginOperationEnum_get_DIVIDE())) ordinal])) || (showMultiplicationSign && [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([self getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()])) {
          if (rtlMinus) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
          [sb appendWithNSString:[self leftBracket]];
          [sb appendWithNSString:rightStr];
          [sb appendWithNSString:[self rightBracket]];
          if (rtlMinus) {
            [sb appendWithChar:GeogebraCommonUtilUnicode_RightToLeftMark];
          }
        }
        else {
          [sb appendWithNSString:rightStr];
        }
      }
      else {
        if (nounary) {
          switch ([[self getStringType] ordinal]) {
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PGF:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_PSTRICKS:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GEOGEBRA_XML:
            case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
            [sb appendWithNSString:[self multiplicationSign]];
            break;
            default:
            [sb appendWithNSString:[self multiplicationSpace]];
          }
        }
        [sb appendWithNSString:[self leftBracket]];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:[self rightBracket]];
      }
      if (![self isPrintLocalizedCommandNames] || ([left evaluatesToList] && [self isNDvectorWithGeogebraCommonKernelArithmeticExpressionValue:right])) {
        [sb appendWithNSString:[self rightBracket]];
      }
      break;
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      if ([left isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [right isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(leftStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]] && [left isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation])) isInequality]) {
        jboolean reverse = [((NSString *) nil_chk(rightStr)) hasPrefix:@"-"];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft] withBoolean:valueForm]];
        [sb appendWithChar:')'];
        [sb appendWithNSString:GeogebraCommonKernelStringTemplate_opWithGeogebraCommonKernelArithmeticExpressionNode_withBoolean_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]), reverse)];
        [sb appendWithChar:'('];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:[self expToStringWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight] withBoolean:valueForm]];
        [sb appendWithChar:')'];
      }
      else if (GeogebraCommonKernelArithmeticExpressionNode_isEqualStringWithGeogebraCommonKernelArithmeticExpressionValue_withDouble_withBoolean_(left, -1, !valueForm)) {
        [sb appendWithNSString:@"-("];
        [sb appendWithNSString:rightStr];
        [sb appendWithChar:')'];
      }
      else {
        [sb appendWithNSString:@"("];
        [sb appendWithNSString:leftStr];
        [sb appendWithNSString:@")*("];
        [sb appendWithNSString:rightStr];
        [sb appendWithNSString:@")"];
        break;
      }
      break;
    }
  }
  return [sb description];
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  GeogebraCommonKernelStringTemplate_$2_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "multiplyStringWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withNSString:withNSString:withBoolean:withGeogebraCommonMainLocalization:", "multiplyString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStringTemplate_$2 = { 2, "", "geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStringTemplate_$2;
}

@end

void GeogebraCommonKernelStringTemplate_$2_initWithNSString_(GeogebraCommonKernelStringTemplate_$2 *self, NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

GeogebraCommonKernelStringTemplate_$2 *new_GeogebraCommonKernelStringTemplate_$2_initWithNSString_(NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_$2 *self = [GeogebraCommonKernelStringTemplate_$2 alloc];
  GeogebraCommonKernelStringTemplate_$2_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStringTemplate_$2)

@implementation GeogebraCommonKernelStringTemplate_$3

- (jint)getCoordStyleWithInt:(jint)coordStyle {
  return GeogebraCommonKernelKernel_COORD_STYLE_DEFAULT;
}

- (instancetype)initWithNSString:(NSString *)arg$0 {
  GeogebraCommonKernelStringTemplate_$3_initWithNSString_(self, arg$0);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getCoordStyleWithInt:", "getCoordStyle", "I", 0x1, NULL, NULL },
    { "initWithNSString:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStringTemplate_$3 = { 2, "", "geogebra.common.kernel", "StringTemplate", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStringTemplate_$3;
}

@end

void GeogebraCommonKernelStringTemplate_$3_initWithNSString_(GeogebraCommonKernelStringTemplate_$3 *self, NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_initWithNSString_(self, arg$0);
}

GeogebraCommonKernelStringTemplate_$3 *new_GeogebraCommonKernelStringTemplate_$3_initWithNSString_(NSString *arg$0) {
  GeogebraCommonKernelStringTemplate_$3 *self = [GeogebraCommonKernelStringTemplate_$3 alloc];
  GeogebraCommonKernelStringTemplate_$3_initWithNSString_(self, arg$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStringTemplate_$3)
