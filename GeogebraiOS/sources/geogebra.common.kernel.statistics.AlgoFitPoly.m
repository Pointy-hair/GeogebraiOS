//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitPoly.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/statistics/AlgoFitPoly.h"
#include "geogebra/common/kernel/statistics/RegressionMath.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelStatisticsAlgoFitPoly () {
 @public
  GeogebraCommonKernelGeosGeoList *geolist_;
  id<GeogebraCommonKernelArithmeticNumberValue> degree_;
  GeogebraCommonKernelGeosGeoFunction *geofunction_;
  GeogebraCommonKernelGeosGeoElement *geodegree_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitPoly, geolist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitPoly, degree_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitPoly, geofunction_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitPoly, geodegree_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitPoly_compute(GeogebraCommonKernelStatisticsAlgoFitPoly *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitPoly

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)degree {
  GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, geolist, degree);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)degree {
  GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitPoly();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geolist_);
  IOSObjectArray_Set(input_, 1, geodegree_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFitPoly {
  return geofunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitPoly_compute(self);
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(degree_);
  RELEASE_(geofunction_);
  RELEASE_(geodegree_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoFitPoly", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoFitPoly", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitPoly", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geolist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "degree_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "geodegree_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitPoly = { 2, "AlgoFitPoly", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitPoly;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoFitPoly *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist, id<GeogebraCommonKernelArithmeticNumberValue> degree) {
  GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitPoly *new_GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist, id<GeogebraCommonKernelArithmeticNumberValue> degree) {
  GeogebraCommonKernelStatisticsAlgoFitPoly *self = [GeogebraCommonKernelStatisticsAlgoFitPoly alloc];
  GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, geolist, degree);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoFitPoly *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist, id<GeogebraCommonKernelArithmeticNumberValue> degree) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitPoly_set_geolist_(self, geolist);
  GeogebraCommonKernelStatisticsAlgoFitPoly_set_degree_(self, degree);
  GeogebraCommonKernelStatisticsAlgoFitPoly_set_geodegree_(self, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(degree)) toGeoElement]);
  GeogebraCommonKernelStatisticsAlgoFitPoly_setAndConsume_geofunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitPoly_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitPoly *new_GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist, id<GeogebraCommonKernelArithmeticNumberValue> degree) {
  GeogebraCommonKernelStatisticsAlgoFitPoly *self = [GeogebraCommonKernelStatisticsAlgoFitPoly alloc];
  GeogebraCommonKernelStatisticsAlgoFitPoly_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, geolist, degree);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitPoly_compute(GeogebraCommonKernelStatisticsAlgoFitPoly *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  jint par;
  jboolean regok = YES;
  IOSDoubleArray *cof = nil;
  par = (jint) JavaLangMath_roundWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->degree_)) getDouble]);
  if (![self->geolist_ isDefined] || (size < 2) || (par >= size)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  GeogebraCommonKernelStatisticsRegressionMath *regMath = [new_GeogebraCommonKernelStatisticsRegressionMath_init() autorelease];
  switch (par) {
    case GeogebraCommonKernelStatisticsRegressionMath_LINEAR:
    regok = [regMath doLinearWithGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray arrayWithLength:2];
      *IOSDoubleArray_GetRef(cof, 0) = [regMath getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [regMath getP2];
    }
    break;
    case GeogebraCommonKernelStatisticsRegressionMath_QUAD:
    regok = [regMath doQuadWithGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray arrayWithLength:3];
      *IOSDoubleArray_GetRef(cof, 0) = [regMath getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [regMath getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [regMath getP3];
    }
    break;
    case GeogebraCommonKernelStatisticsRegressionMath_CUBIC:
    regok = [regMath doCubicWithGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray arrayWithLength:4];
      *IOSDoubleArray_GetRef(cof, 0) = [regMath getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [regMath getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [regMath getP3];
      *IOSDoubleArray_GetRef(cof, 3) = [regMath getP4];
    }
    break;
    case GeogebraCommonKernelStatisticsRegressionMath_QUART:
    regok = [regMath doQuartWithGeogebraCommonKernelGeosGeoList:self->geolist_];
    if (regok) {
      cof = [IOSDoubleArray arrayWithLength:5];
      *IOSDoubleArray_GetRef(cof, 0) = [regMath getP1];
      *IOSDoubleArray_GetRef(cof, 1) = [regMath getP2];
      *IOSDoubleArray_GetRef(cof, 2) = [regMath getP3];
      *IOSDoubleArray_GetRef(cof, 3) = [regMath getP4];
      *IOSDoubleArray_GetRef(cof, 4) = [regMath getP5];
    }
    break;
    default:
    if ((par > 4) && (par < 300)) {
      regok = [regMath doPolyNWithGeogebraCommonKernelGeosGeoList:self->geolist_ withInt:par];
      if (regok) {
        cof = [IOSDoubleArray arrayWithLength:par + 1];
        cof = [regMath getPar];
      }
    }
    else {
      regok = NO;
    }
  }
  if (!regok) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithGeogebraCommonKernelKernel_withDoubleArray_([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel], cof)];
  [self->geofunction_ setDefinedWithBoolean:YES];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitPoly)
