//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/MySpecialDouble.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/math/BigDecimal.h"

@interface GeogebraCommonKernelArithmeticMySpecialDouble () {
 @public
  NSString *strToString_;
  NSString *originalString_;
  jboolean keepOriginalString_;
  jboolean isLetterConstant_;
  jboolean scientificNotation_;
  jboolean setFromOutside_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMySpecialDouble, strToString_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticMySpecialDouble, originalString_, NSString *)

static GeogebraCommonKernelArithmeticMySpecialDouble *GeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticMySpecialDouble, eulerConstant_, GeogebraCommonKernelArithmeticMySpecialDouble *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelArithmeticMySpecialDouble, eulerConstant_, GeogebraCommonKernelArithmeticMySpecialDouble *)

@implementation GeogebraCommonKernelArithmeticMySpecialDouble

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                        withDouble:(jdouble)val
                                      withNSString:(NSString *)str {
  GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, val, str);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticMySpecialDouble:(GeogebraCommonKernelArithmeticMySpecialDouble *)sd {
  GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelArithmeticMySpecialDouble_(self, sd);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  if ([self isEulerConstant]) return GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(kernel1);
  GeogebraCommonKernelArithmeticMySpecialDouble *ret = [new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelArithmeticMySpecialDouble_(self) autorelease];
  GeogebraCommonKernelArithmeticMyDouble_set_kernel_(ret, kernel1);
  return ret;
}

- (void)setKeepOriginalString {
  keepOriginalString_ = YES;
}

+ (GeogebraCommonKernelArithmeticMySpecialDouble *)getEulerConstantWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  return GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(kernel);
}

- (jboolean)isEulerConstant {
  return [self getDouble] == JavaLangMath_E;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (setFromOutside_) {
    return [super toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  if (!isLetterConstant_) {
    if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GIAC()]) {
      return GeogebraCommonKernelStringTemplate_convertScientificNotationGiacWithNSString_(originalString_);
    }
    if (keepOriginalString_ || (![tpl useScientificWithBoolean:((GeogebraCommonKernelKernel *) nil_chk(kernel_))->useSignificantFigures_] && ![((NSString *) nil_chk(strToString_)) contains:@"."]) || [tpl allowMoreDigits]) {
      if (scientificNotation_) {
        return [tpl convertScientificNotationWithNSString:strToString_];
      }
      return strToString_;
    }
    return [super toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm = [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType];
  jchar ch;
  switch ([printForm ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
    ch = [((NSString *) nil_chk(strToString_)) charAtWithInt:0];
    switch (ch) {
      case GeogebraCommonUtilUnicode_piChar:
      return @"pi";
      case GeogebraCommonUtilUnicode_degreeChar:
      return @"pi/180";
      case GeogebraCommonUtilUnicode_eulerChar:
      if ([strToString_ isEqual:GeogebraCommonUtilUnicode_get_EULER_GAMMA_STRING_()]) {
        return @"euler\\_gamma";
      }
      return @"e";
    }
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    ch = [((NSString *) nil_chk(strToString_)) charAtWithInt:0];
    switch (ch) {
      case GeogebraCommonUtilUnicode_piChar:
      return @"\\pi";
      case GeogebraCommonUtilUnicode_degreeChar:
      return @"^{\\circ}";
      case GeogebraCommonUtilUnicode_eulerChar:
      if ([strToString_ isEqual:GeogebraCommonUtilUnicode_get_EULER_GAMMA_STRING_()]) {
        return @"\\mathit{e_{\\gamma}}";
      }
      return @"\\textit{e}";
    }
    break;
  }
  return strToString_;
}

- (void)setWithDouble:(jdouble)val {
  [super setWithDouble:val];
  setFromOutside_ = YES;
}

- (void)dealloc {
  RELEASE_(strToString_);
  RELEASE_(originalString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withDouble:withNSString:", "MySpecialDouble", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticMySpecialDouble:", "MySpecialDouble", NULL, 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setKeepOriginalString", NULL, "V", 0x1, NULL, NULL },
    { "getEulerConstantWithGeogebraCommonKernelKernel:", "getEulerConstant", "Lgeogebra.common.kernel.arithmetic.MySpecialDouble;", 0x9, NULL, NULL },
    { "isEulerConstant", NULL, "Z", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setWithDouble:", "set", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "strToString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "originalString_", NULL, 0x12, "Ljava.lang.String;", NULL, NULL,  },
    { "keepOriginalString_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isLetterConstant_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scientificNotation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "setFromOutside_", NULL, 0x2, "Z", NULL, NULL,  },
    { "eulerConstant_", NULL, 0xa, "Lgeogebra.common.kernel.arithmetic.MySpecialDouble;", &GeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticMySpecialDouble = { 2, "MySpecialDouble", "geogebra.common.kernel.arithmetic", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticMySpecialDouble;
}

@end

void GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(GeogebraCommonKernelArithmeticMySpecialDouble *self, GeogebraCommonKernelKernel *kernel, jdouble val, NSString *str) {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self, kernel, val);
  self->scientificNotation_ = NO;
  GeogebraCommonKernelArithmeticMySpecialDouble_set_originalString_(self, GeogebraCommonUtilStringUtil_cannonicNumberWithNSString_(str));
  GeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, self->originalString_);
  if (self->strToString_ == nil) GeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, @"0");
  jchar firstChar = [((NSString *) nil_chk(self->strToString_)) charAtWithInt:0];
  self->isLetterConstant_ = (GeogebraCommonUtilStringUtil_isLetterWithChar_(firstChar) || firstChar == GeogebraCommonUtilUnicode_degreeChar);
  self->scientificNotation_ = ([self->strToString_ indexOfString:@"E"] > 0);
  self->keepOriginalString_ = (!self->isLetterConstant_ && (self->scientificNotation_ || JavaLangDouble_isInfiniteWithDouble_(val)));
  if (self->keepOriginalString_) {
    JavaMathBigDecimal *bd = [new_JavaMathBigDecimal_initWithNSString_(self->strToString_) autorelease];
    jdouble absVal = JavaLangMath_absWithDouble_(val);
    if (absVal >= 10E-3 && absVal < 10E7) {
      bd = [bd stripTrailingZeros];
      GeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, [((JavaMathBigDecimal *) nil_chk(bd)) toPlainString]);
    }
    else {
      GeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, [bd description]);
      self->scientificNotation_ = ([((NSString *) nil_chk(self->strToString_)) indexOfString:@"E"] > 0);
    }
  }
}

GeogebraCommonKernelArithmeticMySpecialDouble *new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(GeogebraCommonKernelKernel *kernel, jdouble val, NSString *str) {
  GeogebraCommonKernelArithmeticMySpecialDouble *self = [GeogebraCommonKernelArithmeticMySpecialDouble alloc];
  GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(self, kernel, val, str);
  return self;
}

void GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelArithmeticMySpecialDouble_(GeogebraCommonKernelArithmeticMySpecialDouble *self, GeogebraCommonKernelArithmeticMySpecialDouble *sd) {
  GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelArithmeticMyDouble_(self, sd);
  self->scientificNotation_ = NO;
  GeogebraCommonKernelArithmeticMySpecialDouble_set_originalString_(self, ((GeogebraCommonKernelArithmeticMySpecialDouble *) nil_chk(sd))->originalString_);
  GeogebraCommonKernelArithmeticMySpecialDouble_set_strToString_(self, sd->strToString_);
  self->keepOriginalString_ = sd->keepOriginalString_;
  self->isLetterConstant_ = sd->isLetterConstant_;
  self->scientificNotation_ = sd->scientificNotation_;
  self->setFromOutside_ = sd->setFromOutside_;
}

GeogebraCommonKernelArithmeticMySpecialDouble *new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelArithmeticMySpecialDouble_(GeogebraCommonKernelArithmeticMySpecialDouble *sd) {
  GeogebraCommonKernelArithmeticMySpecialDouble *self = [GeogebraCommonKernelArithmeticMySpecialDouble alloc];
  GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelArithmeticMySpecialDouble_(self, sd);
  return self;
}

GeogebraCommonKernelArithmeticMySpecialDouble *GeogebraCommonKernelArithmeticMySpecialDouble_getEulerConstantWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticMySpecialDouble_initialize();
  if (GeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_, nil, new_GeogebraCommonKernelArithmeticMySpecialDouble_initWithGeogebraCommonKernelKernel_withDouble_withNSString_(kernel, JavaLangMath_E, GeogebraCommonUtilUnicode_get_EULER_STRING_()));
  }
  return GeogebraCommonKernelArithmeticMySpecialDouble_eulerConstant_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticMySpecialDouble)
