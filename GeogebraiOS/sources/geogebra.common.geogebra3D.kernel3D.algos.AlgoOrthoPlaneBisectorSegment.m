//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorSegment.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlane.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoPlaneBisectorSegment.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment () {
 @public
  id<GeogebraCommonKernelKernelNDGeoSegmentND> segment_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment, segment_, id<GeogebraCommonKernelKernelNDGeoSegmentND>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
            withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, label, segment);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_PlaneBisector();
}

- (GeogebraCommonKernelMatrixCoords *)getNormal {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment_, [GeogebraCommonKernelGeosGeoElement class])))) getMainDirection];
}

- (GeogebraCommonKernelMatrixCoords *)getPoint {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment_)) getPointInDWithInt:3 withDouble:0.5])) getInhomCoordsInSameDimension];
}

- (void)dealloc {
  RELEASE_(segment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoSegmentND:", "AlgoOrthoPlaneBisectorSegment", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getNormal", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "segment_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment = { 2, "AlgoOrthoPlaneBisectorSegment", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlane_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_set_segment_(self, segment);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getPlane] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getPlane])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, label, segment);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoPlaneBisectorSegment)
