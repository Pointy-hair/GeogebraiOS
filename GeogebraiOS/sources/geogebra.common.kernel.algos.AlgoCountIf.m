//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCountIf.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCountIf.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Exception.h"

@interface GeogebraCommonKernelAlgosAlgoCountIf () {
 @public
  GeogebraCommonKernelGeosGeoFunction *boolFun_;
  GeogebraCommonKernelGeosGeoList *list_;
  GeogebraCommonKernelGeosGeoNumeric *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf, boolFun_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCountIf, result_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCountIf_compute(GeogebraCommonKernelAlgosAlgoCountIf *self);

@implementation GeogebraCommonKernelAlgosAlgoCountIf

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)boolFun
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelAlgosAlgoCountIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(self, cons, label, boolFun, list);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CountIf();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, boolFun_);
  IOSObjectArray_Set(input_, 1, list_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoCountIf_compute(self);
}

- (void)dealloc {
  RELEASE_(boolFun_);
  RELEASE_(list_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoList:", "AlgoCountIf", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boolFun_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCountIf = { 2, "AlgoCountIf", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCountIf;
}

@end

void GeogebraCommonKernelAlgosAlgoCountIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoCountIf *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoCountIf_set_boolFun_(self, boolFun);
  GeogebraCommonKernelAlgosAlgoCountIf_set_list_(self, list);
  GeogebraCommonKernelAlgosAlgoCountIf_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoCountIf_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoCountIf *new_GeogebraCommonKernelAlgosAlgoCountIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *boolFun, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoCountIf *self = [GeogebraCommonKernelAlgosAlgoCountIf alloc];
  GeogebraCommonKernelAlgosAlgoCountIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(self, cons, label, boolFun, list);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCountIf_compute(GeogebraCommonKernelAlgosAlgoCountIf *self) {
  @try {
    jint count = 0;
    GeogebraCommonKernelArithmeticFunctionVariable *var = [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->boolFun_)) getFunction])) getFunctionVariable];
    for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size]; i++) {
      GeogebraCommonKernelGeosGeoElement *val = [self->list_ getWithInt:i];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(val)) isGeoNumeric]) {
        if ([self->boolFun_ evaluateBooleanWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(val, [GeogebraCommonKernelGeosGeoNumeric class])) getValue]]) count++;
      }
      else {
        GeogebraCommonKernelArithmeticExpressionNode *ex = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->boolFun_ getFunction])) getExpression])) deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticExpressionNode class]);
        ex = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ex)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:var withGeogebraCommonKernelArithmeticExpressionValue:[val evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]])) wrap];
        if ([((GeogebraCommonKernelArithmeticMyBoolean *) nil_chk(((GeogebraCommonKernelArithmeticMyBoolean *) check_class_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(ex)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelArithmeticMyBoolean class])))) getBoolean]) count++;
      }
    }
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setValueWithDouble:count];
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->result_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCountIf)
