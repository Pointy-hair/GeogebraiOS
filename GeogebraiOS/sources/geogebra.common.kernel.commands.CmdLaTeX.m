//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdLaTeX.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoLaTeX.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdLaTeX.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/MyError.h"

@interface GeogebraCommonKernelCommandsCmdLaTeX ()

- (GeogebraCommonKernelGeosGeoText *)LaTeXWithNSString:(NSString *)label
                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)substituteVars
                withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)showName;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelCommandsCmdLaTeX *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoBoolean *substituteVars, GeogebraCommonKernelGeosGeoBoolean *showName);

@implementation GeogebraCommonKernelCommandsCmdLaTeX

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdLaTeX_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    GeogebraCommonKernelAlgosAlgoLaTeX *algo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      algo = [new_GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(cons_, [c getLabel], IOSObjectArray_Get(nil_chk(arg), 0)) autorelease];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getGeoText] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      case 2:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoBoolean]) {
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], IOSObjectArray_Get(arg, 0), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoBoolean class]), nil) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      case 3:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c withBoolean:YES];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 1))) isGeoBoolean] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoBoolean]) {
        IOSObjectArray *ret2 = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self, [c getLabel], IOSObjectArray_Get(arg, 0), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 1), [GeogebraCommonKernelGeosGeoBoolean class]), (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg, 2), [GeogebraCommonKernelGeosGeoBoolean class])) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret2;
      }
      else if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoBoolean]) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelGeosGeoText *)LaTeXWithNSString:(NSString *)label
                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)substituteVars
                withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)showName {
  return GeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self, label, geo, substituteVars, showName);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdLaTeX", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "LaTeXWithNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoBoolean:", "LaTeX", "Lgeogebra.common.kernel.geos.GeoText;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdLaTeX = { 2, "CmdLaTeX", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdLaTeX;
}

@end

void GeogebraCommonKernelCommandsCmdLaTeX_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdLaTeX *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdLaTeX *new_GeogebraCommonKernelCommandsCmdLaTeX_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdLaTeX *self = [GeogebraCommonKernelCommandsCmdLaTeX alloc];
  GeogebraCommonKernelCommandsCmdLaTeX_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoText *GeogebraCommonKernelCommandsCmdLaTeX_LaTeXWithNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelCommandsCmdLaTeX *self, NSString *label, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoBoolean *substituteVars, GeogebraCommonKernelGeosGeoBoolean *showName) {
  GeogebraCommonKernelAlgosAlgoLaTeX *algo = [new_GeogebraCommonKernelAlgosAlgoLaTeX_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoBoolean_(self->cons_, label, geo, substituteVars, showName) autorelease];
  GeogebraCommonKernelGeosGeoText *t = [algo getGeoText];
  return t;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdLaTeX)
