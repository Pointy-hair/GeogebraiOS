//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/GeneralPathClipped.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GPathIterator.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/clipping/ClipLine.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

#define GeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE 10000.0f
#define GeogebraCommonEuclidianGeneralPathClipped_TOLERANCE 0.01

@interface GeogebraCommonEuclidianGeneralPathClipped () {
 @public
  JavaUtilArrayList *pathPoints_;
  id<GeogebraCommonAwtGGeneralPath> gp_;
  jdouble largestCoord_;
  jboolean needClosePath_;
  id<GeogebraCommonAwtGRectangle> bounds_;
}

- (void)addSimpleSegments;

- (void)addClippedSegments;

- (void)addClippedLineWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)prevP
                      withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)curP
                      withGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect;

- (GeogebraCommonAwtGPoint2D *)getPointCloseToScreenWithDouble:(jdouble)ptx
                                                    withDouble:(jdouble)pty;

- (void)addToGeneralPathWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)q
                                          withBoolean:(jboolean)lineTo;

- (void)addPointWithDouble:(jdouble)x
                withDouble:(jdouble)y
               withBoolean:(jboolean)lineTo;

- (void)updateBoundsWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)p;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianGeneralPathClipped, pathPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianGeneralPathClipped, gp_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianGeneralPathClipped, bounds_, id<GeogebraCommonAwtGRectangle>)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianGeneralPathClipped, MAX_COORD_VALUE, jfloat)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianGeneralPathClipped, TOLERANCE, jdouble)

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_reset(GeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(GeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(GeogebraCommonEuclidianGeneralPathClipped *self);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithGeogebraCommonKernelMyPoint_withGeogebraCommonKernelMyPoint_withGeogebraCommonAwtGRectangle_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonKernelMyPoint *prevP, GeogebraCommonKernelMyPoint *curP, id<GeogebraCommonAwtGRectangle> viewRect);

__attribute__((unused)) static GeogebraCommonAwtGPoint2D *GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(GeogebraCommonEuclidianGeneralPathClipped *self, jdouble ptx, jdouble pty);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonAwtGPoint2D *q, jboolean lineTo);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(GeogebraCommonEuclidianGeneralPathClipped *self, jdouble x, jdouble y, jboolean lineTo);

__attribute__((unused)) static void GeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithGeogebraCommonKernelMyPoint_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonKernelMyPoint *p);

@implementation GeogebraCommonEuclidianGeneralPathClipped

- (instancetype)initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>)view {
  GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

- (GeogebraCommonKernelMyPoint *)firstPoint {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) {
    return nil;
  }
  return [pathPoints_ getWithInt:0];
}

- (void)reset {
  GeogebraCommonEuclidianGeneralPathClipped_reset(self);
}

- (void)closePath {
  needClosePath_ = YES;
}

- (id<GeogebraCommonAwtGGeneralPath>)getGeneralPath {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) return gp_;
  [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(gp_)) reset];
  if (largestCoord_ < GeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE) {
    GeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(self);
  }
  else {
    GeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(self);
  }
  [pathPoints_ clear];
  return gp_;
}

- (void)addSimpleSegments {
  GeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(self);
}

- (void)addClippedSegments {
  GeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(self);
}

- (void)addClippedLineWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)prevP
                      withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)curP
                      withGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect {
  GeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithGeogebraCommonKernelMyPoint_withGeogebraCommonKernelMyPoint_withGeogebraCommonAwtGRectangle_(self, prevP, curP, viewRect);
}

- (GeogebraCommonAwtGPoint2D *)getPointCloseToScreenWithDouble:(jdouble)ptx
                                                    withDouble:(jdouble)pty {
  return GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, ptx, pty);
}

- (void)addToGeneralPathWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)q
                                          withBoolean:(jboolean)lineTo {
  GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, q, lineTo);
}

- (void)moveToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  GeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, NO);
}

- (void)lineToWithDouble:(jdouble)x
              withDouble:(jdouble)y {
  GeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, YES);
}

- (void)addPointWithInt:(jint)pos
             withDouble:(jdouble)x
             withDouble:(jdouble)y {
  GeogebraCommonKernelMyPoint *p = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, YES) autorelease];
  GeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithGeogebraCommonKernelMyPoint_(self, p);
  [((JavaUtilArrayList *) nil_chk(pathPoints_)) ensureCapacityWithInt:pos + 1];
  while ([pathPoints_ size] <= pos) {
    [pathPoints_ addWithId:nil];
  }
  [pathPoints_ setWithInt:pos withId:p];
}

- (void)addPointWithDouble:(jdouble)x
                withDouble:(jdouble)y
               withBoolean:(jboolean)lineTo {
  GeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(self, x, y, lineTo);
}

- (void)updateBoundsWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)p {
  GeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithGeogebraCommonKernelMyPoint_(self, p);
}

- (GeogebraCommonAwtGPoint2D *)getCurrentPoint {
  if ([((JavaUtilArrayList *) nil_chk(pathPoints_)) size] == 0) {
    return nil;
  }
  return [pathPoints_ getWithInt:[pathPoints_ size] - 1];
}

- (void)transformWithGeogebraCommonAwtGAffineTransform:(id<GeogebraCommonAwtGAffineTransform>)af {
  jint size = [((JavaUtilArrayList *) nil_chk(pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelMyPoint *p = [pathPoints_ getWithInt:i];
    [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(af)) transformWithGeogebraCommonAwtGPoint2D:p withGeogebraCommonAwtGPoint2D:p];
  }
}

- (jboolean)containsWithGeogebraCommonAwtGPoint2D:(GeogebraCommonAwtGPoint2D *)p {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithGeogebraCommonAwtGPoint2D:p];
}

- (jboolean)containsWithGeogebraCommonAwtGRectangle2D:(id<GeogebraCommonAwtGRectangle2D>)rect {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)containsWithDouble:(jdouble)arg0
                    withDouble:(jdouble)arg1 {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithDouble:arg0 withDouble:arg1];
}

- (jboolean)containsWithDouble:(jdouble)arg0
                    withDouble:(jdouble)arg1
                    withDouble:(jdouble)arg2
                    withDouble:(jdouble)arg3 {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithDouble:arg0 withDouble:arg1 withDouble:arg2 withDouble:arg3];
}

- (jboolean)containsWithInt:(jint)x
                    withInt:(jint)y {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithInt:x withInt:y];
}

- (jboolean)containsWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rectangle {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) containsWithGeogebraCommonAwtGRectangle2D:rectangle];
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  return bounds_ == nil ? [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle] : bounds_;
}

- (id<GeogebraCommonAwtGRectangle2D>)getBounds2D {
  return bounds_ == nil ? [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle] : bounds_;
}

- (id<GeogebraCommonAwtGPathIterator>)getPathIteratorWithGeogebraCommonAwtGAffineTransform:(id<GeogebraCommonAwtGAffineTransform>)arg0 {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) getPathIteratorWithGeogebraCommonAwtGAffineTransform:arg0];
}

- (jboolean)intersectsWithGeogebraCommonAwtGRectangle2D:(id<GeogebraCommonAwtGRectangle2D>)arg0 {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithGeogebraCommonAwtGRectangle2D:arg0];
}

- (jboolean)intersectsWithDouble:(jdouble)arg0
                      withDouble:(jdouble)arg1
                      withDouble:(jdouble)arg2
                      withDouble:(jdouble)arg3 {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithDouble:arg0 withDouble:arg1 withDouble:arg2 withDouble:arg3];
}

- (jboolean)intersectsWithInt:(jint)i
                      withInt:(jint)j
                      withInt:(jint)k
                      withInt:(jint)l {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithInt:i withInt:j withInt:k withInt:l];
}

- (jboolean)intersectsWithInt:(jint)i
                      withInt:(jint)j
                      withInt:(jint)w {
  return [((id<GeogebraCommonAwtGGeneralPath>) nil_chk([self getGeneralPath])) intersectsWithInt:i - w withInt:j - w withInt:2 * w withInt:2 * w];
}

- (void)dealloc {
  RELEASE_(pathPoints_);
  RELEASE_(gp_);
  RELEASE_(view_);
  RELEASE_(bounds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim:", "GeneralPathClipped", NULL, 0x1, NULL, NULL },
    { "firstPoint", NULL, "Lgeogebra.common.kernel.MyPoint;", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x11, NULL, NULL },
    { "closePath", NULL, "V", 0x11, NULL, NULL },
    { "getGeneralPath", NULL, "Lgeogebra.common.awt.GGeneralPath;", 0x1, NULL, NULL },
    { "addSimpleSegments", NULL, "V", 0x2, NULL, NULL },
    { "addClippedSegments", NULL, "V", 0x2, NULL, NULL },
    { "addClippedLineWithGeogebraCommonKernelMyPoint:withGeogebraCommonKernelMyPoint:withGeogebraCommonAwtGRectangle:", "addClippedLine", "V", 0x2, NULL, NULL },
    { "getPointCloseToScreenWithDouble:withDouble:", "getPointCloseToScreen", "Lgeogebra.common.awt.GPoint2D;", 0x2, NULL, NULL },
    { "addToGeneralPathWithGeogebraCommonAwtGPoint2D:withBoolean:", "addToGeneralPath", "V", 0x2, NULL, NULL },
    { "moveToWithDouble:withDouble:", "moveTo", "V", 0x11, NULL, NULL },
    { "lineToWithDouble:withDouble:", "lineTo", "V", 0x11, NULL, NULL },
    { "addPointWithInt:withDouble:withDouble:", "addPoint", "V", 0x11, NULL, NULL },
    { "addPointWithDouble:withDouble:withBoolean:", "addPoint", "V", 0x2, NULL, NULL },
    { "updateBoundsWithGeogebraCommonKernelMyPoint:", "updateBounds", "V", 0x2, NULL, NULL },
    { "getCurrentPoint", NULL, "Lgeogebra.common.awt.GPoint2D;", 0x1, NULL, NULL },
    { "transformWithGeogebraCommonAwtGAffineTransform:", "transform", "V", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonAwtGPoint2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonAwtGRectangle2D:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithDouble:withDouble:withDouble:withDouble:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithInt:withInt:", "contains", "Z", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonAwtGRectangle:", "contains", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "getBounds2D", NULL, "Lgeogebra.common.awt.GRectangle2D;", 0x1, NULL, NULL },
    { "getPathIteratorWithGeogebraCommonAwtGAffineTransform:", "getPathIterator", "Lgeogebra.common.awt.GPathIterator;", 0x1, NULL, NULL },
    { "intersectsWithGeogebraCommonAwtGRectangle2D:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithDouble:withDouble:withDouble:withDouble:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
    { "intersectsWithInt:withInt:withInt:", "intersects", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_COORD_VALUE_", NULL, 0x1a, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonEuclidianGeneralPathClipped_MAX_COORD_VALUE },
    { "TOLERANCE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianGeneralPathClipped_TOLERANCE },
    { "pathPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/MyPoint;>;",  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianViewInterfaceSlim;", NULL, NULL,  },
    { "largestCoord_", NULL, 0x2, "D", NULL, NULL,  },
    { "needClosePath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "bounds_", NULL, 0x2, "Lgeogebra.common.awt.GRectangle;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianGeneralPathClipped = { 2, "GeneralPathClipped", "geogebra.common.euclidian", NULL, 0x1, 30, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianGeneralPathClipped;
}

@end

void GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(GeogebraCommonEuclidianGeneralPathClipped *self, id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  NSObject_init(self);
  GeogebraCommonEuclidianGeneralPathClipped_set_view_(self, view);
  GeogebraCommonEuclidianGeneralPathClipped_setAndConsume_pathPoints_(self, new_JavaUtilArrayList_init());
  GeogebraCommonEuclidianGeneralPathClipped_set_gp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
  GeogebraCommonEuclidianGeneralPathClipped_reset(self);
}

GeogebraCommonEuclidianGeneralPathClipped *new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> view) {
  GeogebraCommonEuclidianGeneralPathClipped *self = [GeogebraCommonEuclidianGeneralPathClipped alloc];
  GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self, view);
  return self;
}

void GeogebraCommonEuclidianGeneralPathClipped_reset(GeogebraCommonEuclidianGeneralPathClipped *self) {
  [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) clear];
  [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) reset];
  GeogebraCommonEuclidianGeneralPathClipped_set_bounds_(self, nil);
  self->largestCoord_ = 0;
  self->needClosePath_ = NO;
}

void GeogebraCommonEuclidianGeneralPathClipped_addSimpleSegments(GeogebraCommonEuclidianGeneralPathClipped *self) {
  jint size = [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelMyPoint *curP = [self->pathPoints_ getWithInt:i];
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, curP, [((GeogebraCommonKernelMyPoint *) nil_chk(curP)) getLineTo]);
  }
  if (self->needClosePath_) [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) closePath];
}

void GeogebraCommonEuclidianGeneralPathClipped_addClippedSegments(GeogebraCommonEuclidianGeneralPathClipped *self) {
  id<GeogebraCommonAwtGRectangle> viewRect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]];
  GeogebraCommonKernelMyPoint *curP = nil, *prevP;
  jint size = [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) size];
  for (jint i = 0; i < size; i++) {
    prevP = curP;
    curP = [self->pathPoints_ getWithInt:i];
    if (![((GeogebraCommonKernelMyPoint *) nil_chk(curP)) getLineTo] || prevP == nil) {
      GeogebraCommonAwtGPoint2D *p = GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]);
      GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, p, NO);
    }
    else {
      GeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithGeogebraCommonKernelMyPoint_withGeogebraCommonKernelMyPoint_withGeogebraCommonAwtGRectangle_(self, prevP, curP, viewRect);
    }
  }
  if (self->needClosePath_) {
    GeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithGeogebraCommonKernelMyPoint_withGeogebraCommonKernelMyPoint_withGeogebraCommonAwtGRectangle_(self, curP, [self->pathPoints_ getWithInt:0], viewRect);
    [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) closePath];
  }
}

void GeogebraCommonEuclidianGeneralPathClipped_addClippedLineWithGeogebraCommonKernelMyPoint_withGeogebraCommonKernelMyPoint_withGeogebraCommonAwtGRectangle_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonKernelMyPoint *prevP, GeogebraCommonKernelMyPoint *curP, id<GeogebraCommonAwtGRectangle> viewRect) {
  if ([((id<GeogebraCommonAwtGRectangle>) nil_chk(viewRect)) containsWithGeogebraCommonAwtGPoint2D:prevP] && [viewRect containsWithGeogebraCommonAwtGPoint2D:curP]) {
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, curP, YES);
    return;
  }
  IOSObjectArray *clippedPoints = GeogebraCommonEuclidianClippingClipLine_getClippedWithDouble_withDouble_withDouble_withDouble_withInt_withInt_withInt_withInt_([((GeogebraCommonKernelMyPoint *) nil_chk(prevP)) getX], [prevP getY], [((GeogebraCommonKernelMyPoint *) nil_chk(curP)) getX], [curP getY], -10, [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] + 10, -10, [self->view_ getHeight] + 10);
  if (clippedPoints != nil) {
    jint first = 0;
    jint second = 1;
    if ([((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, first))) distanceWithDouble:[prevP getX] withDouble:[prevP getY]] > [((GeogebraCommonAwtGPoint2D *) nil_chk(IOSObjectArray_Get(clippedPoints, second))) distanceWithDouble:[prevP getX] withDouble:[prevP getY]]) {
      first = 1;
      second = 0;
    }
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, IOSObjectArray_Get(clippedPoints, first), YES);
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, IOSObjectArray_Get(clippedPoints, second), YES);
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]), YES);
  }
  else {
    GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(self, GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(self, [curP getX], [curP getY]), YES);
  }
}

GeogebraCommonAwtGPoint2D *GeogebraCommonEuclidianGeneralPathClipped_getPointCloseToScreenWithDouble_withDouble_(GeogebraCommonEuclidianGeneralPathClipped *self, jdouble ptx, jdouble pty) {
  jdouble x = ptx;
  jdouble y = pty;
  jdouble border = 10;
  jdouble right = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(self->view_)) getWidth] + border;
  jdouble bottom = [self->view_ getHeight] + border;
  if (x > right) {
    x = right;
  }
  else if (x < -border) {
    x = -border;
  }
  if (y > bottom) {
    y = bottom;
  }
  else if (y < -border) {
    y = -border;
  }
  return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newPoint2DWithDouble:x withDouble:y];
}

void GeogebraCommonEuclidianGeneralPathClipped_addToGeneralPathWithGeogebraCommonAwtGPoint2D_withBoolean_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonAwtGPoint2D *q, jboolean lineTo) {
  GeogebraCommonAwtGPoint2D *p = [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) getCurrentPoint];
  if (p != nil && [p distanceWithGeogebraCommonAwtGPoint2D:q] < GeogebraCommonEuclidianGeneralPathClipped_TOLERANCE) {
    return;
  }
  if (lineTo && p != nil) {
    @try {
      [self->gp_ lineToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
    }
    @catch (JavaLangException *e) {
      [self->gp_ moveToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
    }
  }
  else {
    [self->gp_ moveToWithFloat:(jfloat) [((GeogebraCommonAwtGPoint2D *) nil_chk(q)) getX] withFloat:(jfloat) [q getY]];
  }
}

void GeogebraCommonEuclidianGeneralPathClipped_addPointWithDouble_withDouble_withBoolean_(GeogebraCommonEuclidianGeneralPathClipped *self, jdouble x, jdouble y, jboolean lineTo) {
  GeogebraCommonKernelMyPoint *p = [new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(x, y, lineTo) autorelease];
  GeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithGeogebraCommonKernelMyPoint_(self, p);
  [((JavaUtilArrayList *) nil_chk(self->pathPoints_)) addWithId:p];
}

void GeogebraCommonEuclidianGeneralPathClipped_updateBoundsWithGeogebraCommonKernelMyPoint_(GeogebraCommonEuclidianGeneralPathClipped *self, GeogebraCommonKernelMyPoint *p) {
  if (self->bounds_ == nil) {
    GeogebraCommonEuclidianGeneralPathClipped_set_bounds_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle]);
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->bounds_)) setBoundsWithInt:J2ObjCFpToInt([((GeogebraCommonKernelMyPoint *) nil_chk(p)) getX]) withInt:J2ObjCFpToInt([p getY]) withInt:0 withInt:0];
  }
  if (JavaLangMath_absWithDouble_([((GeogebraCommonKernelMyPoint *) nil_chk(p)) getX]) > self->largestCoord_) self->largestCoord_ = JavaLangMath_absWithDouble_([p getX]);
  if (JavaLangMath_absWithDouble_([p getY]) > self->largestCoord_) self->largestCoord_ = JavaLangMath_absWithDouble_([p getY]);
  [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->bounds_)) addWithDouble:[p getX] withDouble:[p getY]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianGeneralPathClipped)
