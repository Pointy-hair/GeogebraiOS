//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawVector3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawJoinPoints.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawVector3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D () {
 @public
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                               withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vector {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoVectorND_(self, view3D, vector);
  return self;
}

- (void)setArrowTypeBeforeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setArrowTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_SIMPLE];
}

- (void)setArrowTypeAfterWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setArrowTypeWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_ARROW_TYPE_NONE];
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    [self updateForItSelf];
  }
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, view3D, selectedPoints);
  return self;
}

- (void)setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)firstPoint
                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setCoordsWithDoubleArray:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(secondPoint)) getInhomCoordsInD3])) subWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(firstPoint)) getInhomCoordsInD3]])) get]];
  @try {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:firstPoint];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    [((GeogebraCommonKernelCircularDefinitionException *) nil_chk(e)) printStackTrace];
  }
}

- (IOSObjectArray *)calcPoints {
  id<GeogebraCommonKernelKernelNDGeoVectorND> geo = ((id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast([self getGeoElement], @protocol(GeogebraCommonKernelKernelNDGeoVectorND)));
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(geo)) updateStartPointPosition];
  GeogebraCommonKernelMatrixCoords *p1;
  if ([geo getStartPoint] == nil) {
    p1 = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
    [p1 setWWithDouble:1];
  }
  else p1 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([geo getStartPoint])) getInhomCoordsInD3];
  GeogebraCommonKernelMatrixCoords *p2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) addWithGeogebraCommonKernelMatrixCoords:[geo getCoordsInD3]];
  return [IOSObjectArray arrayWithObjects:(id[]){ p1, p2 } count:2 type:GeogebraCommonKernelMatrixCoords_class_()];
}

- (void)setStartEndPointsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
  [super setStartEndPointsWithGeogebraCommonKernelMatrixCoords:p1 withGeogebraCommonKernelMatrixCoords:p2];
  jdouble radius = [self getLineThickness] * GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_LINE3D_THICKNESS / [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale];
  for (jint i = 1; i <= 3; i++) {
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) getWithInt:i] < [((GeogebraCommonKernelMatrixCoords *) nil_chk(p2)) getWithInt:i]) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setWithInt:i withDouble:[p1 getWithInt:i] - radius];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setWithInt:i withDouble:[p2 getWithInt:i] + radius];
    }
    else {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setWithInt:i withDouble:[p2 getWithInt:i] - radius];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setWithInt:i withDouble:[p1 getWithInt:i] + radius];
    }
  }
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_enlargeBoundsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(min, max, boundsMin_, boundsMax_);
}

- (void)dealloc {
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonKernelKernelNDGeoVectorND:", "DrawVector3D", NULL, 0x1, NULL, NULL },
    { "setArrowTypeBeforeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeBefore", "V", 0x4, NULL, NULL },
    { "setArrowTypeAfterWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:", "setArrowTypeAfter", "V", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:", "DrawVector3D", NULL, 0x1, NULL, NULL },
    { "setPreviewableCoordsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setPreviewableCoords", "V", 0x4, NULL, NULL },
    { "calcPoints", NULL, "[Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "setStartEndPointsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setStartEndPoints", "V", 0x4, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D = { 2, "DrawVector3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 9, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<GeogebraCommonKernelKernelNDGeoVectorND> vector) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, view3D, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(vector, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  [self setDrawMinMaxWithDouble:0 withDouble:1];
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, id<GeogebraCommonKernelKernelNDGeoVectorND> vector) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoVectorND_(self, view3D, vector);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawJoinPoints_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withGeogebraCommonKernelGeosGeoElement_(self, view3D, selectedPoints, [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D)) getKernel])) getConstruction]) autorelease]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D, JavaUtilArrayList *selectedPoints) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, view3D, selectedPoints);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D)
