//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoJoinPointsSegment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/main/Localization.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoJoinPointsSegment () {
 @public
  GeogebraCommonKernelGeosGeoPoint *P_, *Q_;
  GeogebraCommonKernelGeosGeoSegment *s_;
  GeogebraCommonKernelGeosGeoPolygon *poly_;
  IOSObjectArray *botanaVars_;
  IOSObjectArray *polynomials_;
}

- (void)setIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, P_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, Q_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, s_, GeogebraCommonKernelGeosGeoSegment *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, poly_, GeogebraCommonKernelGeosGeoPolygon *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, botanaVars_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoJoinPointsSegment, polynomials_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_setIncidence(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_compute(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self);

@implementation GeogebraCommonKernelAlgosAlgoJoinPointsSegment

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)poly {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, P, Q, poly);
  return self;
}

- (void)setIncidence {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_setIncidence(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Segment();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_SEGMENT;
}

- (void)setInputOutput {
  IOSObjectArray *efficientInput = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
  IOSObjectArray_Set(efficientInput, 0, P_);
  IOSObjectArray_Set(efficientInput, 1, Q_);
  if (poly_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_set_input_(self, efficientInput);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, P_);
    IOSObjectArray_Set(input_, 1, Q_);
    IOSObjectArray_Set(input_, 2, poly_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:s_];
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:input_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput];
}

- (void)modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B {
  if ((P_ == A && Q_ == B) || (Q_ == A && P_ == B)) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(input_))->size_; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_P_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A, [GeogebraCommonKernelGeosGeoPoint class]));
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_Q_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B, [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(s_)) setPointsWithGeogebraCommonKernelGeosGeoPoint:P_ withGeogebraCommonKernelGeosGeoPoint:Q_];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_compute(self);
}

- (GeogebraCommonKernelGeosGeoSegment *)getSegment {
  return s_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getP {
  return P_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return Q_;
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPoly {
  return poly_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  if (poly_ != nil) [poly_ remove];
}

- (void)removeSegmentOnly {
  [super remove];
}

- (jint)getConstructionIndex {
  if (poly_ != nil) {
    return [poly_ getConstructionIndex];
  }
  return [super getConstructionIndex];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (poly_ != nil) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"SegmentABofC" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[poly_ getNameDescription]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"SegmentAB" withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaVars_ != nil) return botanaVars_;
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_botanaVars_(self, GeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray_(input_));
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return nil;
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (P_ != nil && Q_ != nil) {
    [P_ getFreeVariablesWithJavaUtilHashSet:variables];
    [Q_ getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (P_ != nil && Q_ != nil) {
    IOSIntArray *degree1 = [P_ getDegrees];
    IOSIntArray *degree2 = [Q_ getDegrees];
    return GeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(degree1, degree2);
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (P_ != nil && Q_ != nil) {
    IOSObjectArray *coords1 = [P_ getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [Q_ getExactCoordinatesWithJavaUtilHashMap:values];
    if (coords1 != nil && coords2 != nil) {
      return GeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(coords1, coords2);
    }
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (P_ != nil && Q_ != nil) {
    IOSObjectArray *coords1 = [P_ getPolynomials];
    IOSObjectArray *coords2 = [Q_ getPolynomials];
    if (coords1 != nil && coords2 != nil) {
      GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_polynomials_(self, GeogebraCommonKernelProverPolynomialPolynomial_crossProductWithGeogebraCommonKernelProverPolynomialPolynomialArray_withGeogebraCommonKernelProverPolynomialPolynomialArray_(coords1, coords2));
      return polynomials_;
    }
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnJoinPointsSegmentWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(s_);
  RELEASE_(poly_);
  RELEASE_(botanaVars_);
  RELEASE_(polynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoJoinPointsSegment", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoJoinPointsSegment", NULL, 0x1, NULL, NULL },
    { "setIncidence", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "modifyInputPoints", "V", 0x1, NULL, NULL },
    { "getSegment", NULL, "Lgeogebra.common.kernel.geos.GeoSegment;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "removeSegmentOnly", NULL, "V", 0x1, NULL, NULL },
    { "getConstructionIndex", NULL, "I", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "s_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoSegment;", NULL, NULL,  },
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoJoinPointsSegment = { 2, "AlgoJoinPointsSegment", "geogebra.common.kernel.algos", NULL, 0x1, 25, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoJoinPointsSegment;
}

@end

void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, P, Q, nil);
  [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(self->s_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoJoinPointsSegment *new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self = [GeogebraCommonKernelAlgosAlgoJoinPointsSegment alloc];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPolygon *poly) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  if (poly != nil) {
    [self setUpdateAfterAlgoWithGeogebraCommonKernelAlgosAlgoElement:[poly getParentAlgorithm]];
    self->protectedInput_ = YES;
  }
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_poly_(self, poly);
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_set_Q_(self, Q);
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_setAndConsume_s_(self, new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, P, Q));
  [self->s_ setFromMetaWithGeogebraCommonKernelGeosGeoElement:poly];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_compute(self);
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_setIncidence(self);
}

GeogebraCommonKernelAlgosAlgoJoinPointsSegment *new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q, GeogebraCommonKernelGeosGeoPolygon *poly) {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self = [GeogebraCommonKernelAlgosAlgoJoinPointsSegment alloc];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self, cons, P, Q, poly);
  return self;
}

void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_setIncidence(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self) {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->P_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->s_ withBoolean:YES];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->Q_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:self->s_ withBoolean:YES];
}

void GeogebraCommonKernelAlgosAlgoJoinPointsSegment_compute(GeogebraCommonKernelAlgosAlgoJoinPointsSegment *self) {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(self->P_, self->Q_, self->s_);
  [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(self->s_)) calcLength];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoJoinPointsSegment)
