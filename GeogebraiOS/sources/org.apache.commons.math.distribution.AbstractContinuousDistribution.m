//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/distribution/AbstractContinuousDistribution.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "org/apache/commons/math/ConvergenceException.h"
#include "org/apache/commons/math/FunctionEvaluationException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/analysis/UnivariateRealFunction.h"
#include "org/apache/commons/math/analysis/solvers/BrentSolver.h"
#include "org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/AbstractDistribution.h"
#include "org/apache/commons/math/exception/util/Localizable.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/random/RandomDataImpl.h"
#include "org/apache/commons/math/util/FastMath.h"

#pragma clang diagnostic ignored "-Wprotocol"

#define OrgApacheCommonsMathDistributionAbstractContinuousDistribution_serialVersionUID -38038050983108802LL

@interface OrgApacheCommonsMathDistributionAbstractContinuousDistribution () {
 @public
  jdouble solverAbsoluteAccuracy_;
}

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionAbstractContinuousDistribution, serialVersionUID, jlong)

@interface OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 : NSObject < OrgApacheCommonsMathAnalysisUnivariateRealFunction > {
 @public
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution *this$0_;
  jdouble val$p_;
}

- (jdouble)valueWithDouble:(jdouble)x;

- (instancetype)initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution:(OrgApacheCommonsMathDistributionAbstractContinuousDistribution *)outer$
                                                                            withDouble:(jdouble)capture$0;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1)

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1, this$0_, OrgApacheCommonsMathDistributionAbstractContinuousDistribution *)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 *self, OrgApacheCommonsMathDistributionAbstractContinuousDistribution *outer$, jdouble capture$0);

__attribute__((unused)) static OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 *new_OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(OrgApacheCommonsMathDistributionAbstractContinuousDistribution *outer$, jdouble capture$0) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1)

@implementation OrgApacheCommonsMathDistributionAbstractContinuousDistribution

- (instancetype)init {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  return self;
}

- (jdouble)densityWithDouble:(jdouble)x {
  @throw [new_OrgApacheCommonsMathMathRuntimeException_initWithJavaLangThrowable_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_([new_JavaLangUnsupportedOperationException_init() autorelease], OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_DENSITY_FOR_THIS_DISTRIBUTION(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  if (p < 0.0 || p > 1.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_RANGE_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(p), JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_(1.0) } count:3 type:NSObject_class_()]);
  }
  id<OrgApacheCommonsMathAnalysisUnivariateRealFunction> rootFindingFunction = [new_OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(self, p) autorelease];
  jdouble lowerBound = [self getDomainLowerBoundWithDouble:p];
  jdouble upperBound = [self getDomainUpperBoundWithDouble:p];
  IOSDoubleArray *bracket = nil;
  @try {
    bracket = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverUtils_bracketWithOrgApacheCommonsMathAnalysisUnivariateRealFunction_withDouble_withDouble_withDouble_(rootFindingFunction, [self getInitialDomainWithDouble:p], lowerBound, upperBound);
  }
  @catch (OrgApacheCommonsMathConvergenceException *ex) {
    if (OrgApacheCommonsMathUtilFastMath_absWithDouble_([rootFindingFunction valueWithDouble:lowerBound]) < [self getSolverAbsoluteAccuracy]) {
      return lowerBound;
    }
    if (OrgApacheCommonsMathUtilFastMath_absWithDouble_([rootFindingFunction valueWithDouble:upperBound]) < [self getSolverAbsoluteAccuracy]) {
      return upperBound;
    }
    @throw [new_OrgApacheCommonsMathMathException_initWithJavaLangThrowable_(ex) autorelease];
  }
  jdouble root = OrgApacheCommonsMathAnalysisSolversUnivariateRealSolverUtils_solveWithOrgApacheCommonsMathAnalysisUnivariateRealFunction_withDouble_withDouble_withDouble_(rootFindingFunction, IOSDoubleArray_Get(nil_chk(bracket), 0), IOSDoubleArray_Get(bracket, 1), [self getSolverAbsoluteAccuracy]);
  return root;
}

- (void)reseedRandomGeneratorWithLong:(jlong)seed {
  [((OrgApacheCommonsMathRandomRandomDataImpl *) nil_chk(randomData_)) reSeedWithLong:seed];
}

- (jdouble)sample {
  return [((OrgApacheCommonsMathRandomRandomDataImpl *) nil_chk(randomData_)) nextInversionDeviateWithOrgApacheCommonsMathDistributionContinuousDistribution:self];
}

- (IOSDoubleArray *)sampleWithInt:(jint)sampleSize {
  if (sampleSize <= 0) {
    OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_SAMPLE_SIZE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(sampleSize) } count:1 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:sampleSize];
  for (jint i = 0; i < sampleSize; i++) {
    *IOSDoubleArray_GetRef(out, i) = [self sample];
  }
  return out;
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_;
}

- (void)dealloc {
  RELEASE_(randomData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "AbstractContinuousDistribution", NULL, 0x4, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, "Lorg.apache.commons.math.MathRuntimeException;", NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "reseedRandomGeneratorWithLong:", "reseedRandomGenerator", "V", 0x1, NULL, NULL },
    { "sample", NULL, "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "sampleWithInt:", "sample", "[D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x404, NULL, NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x404, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x404, NULL, NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionAbstractContinuousDistribution_serialVersionUID },
    { "randomData_", NULL, 0x14, "Lorg.apache.commons.math.random.RandomDataImpl;", NULL, NULL,  },
    { "solverAbsoluteAccuracy_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionAbstractContinuousDistribution = { 2, "AbstractContinuousDistribution", "org.apache.commons.math.distribution", NULL, 0x401, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionAbstractContinuousDistribution;
}

@end

void OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(OrgApacheCommonsMathDistributionAbstractContinuousDistribution *self) {
  OrgApacheCommonsMathDistributionAbstractDistribution_init(self);
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_setAndConsume_randomData_(self, new_OrgApacheCommonsMathRandomRandomDataImpl_init());
  self->solverAbsoluteAccuracy_ = OrgApacheCommonsMathAnalysisSolversBrentSolver_DEFAULT_ABSOLUTE_ACCURACY;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionAbstractContinuousDistribution)

@implementation OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1

- (jdouble)valueWithDouble:(jdouble)x {
  jdouble ret = JavaLangDouble_NaN;
  @try {
    ret = [this$0_ cumulativeProbabilityWithDouble:x] - val$p_;
  }
  @catch (OrgApacheCommonsMathMathException *ex) {
    @throw [new_OrgApacheCommonsMathFunctionEvaluationException_initWithDouble_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(x, [((OrgApacheCommonsMathMathException *) nil_chk(ex)) getSpecificPattern], [IOSObjectArray arrayWithObjects:(id[]){ [ex getGeneralPattern], [ex getArguments] } count:2 type:NSObject_class_()]) autorelease];
  }
  if (JavaLangDouble_isNaNWithDouble_(ret)) {
    @throw [new_OrgApacheCommonsMathFunctionEvaluationException_initWithDouble_withOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(x, OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CUMULATIVE_PROBABILITY_RETURNED_NAN(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(x), JavaLangDouble_valueOfWithDouble_(val$p_) } count:2 type:NSObject_class_()]) autorelease];
  }
  return ret;
}

- (instancetype)initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution:(OrgApacheCommonsMathDistributionAbstractContinuousDistribution *)outer$
                                                                            withDouble:(jdouble)capture$0 {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(self, outer$, capture$0);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "valueWithDouble:", "value", "D", 0x1, "Lorg.apache.commons.math.FunctionEvaluationException;", NULL },
    { "initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution:withDouble:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lorg.apache.commons.math.distribution.AbstractContinuousDistribution;", NULL, NULL,  },
    { "val$p_", NULL, 0x1012, "D", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "OrgApacheCommonsMathDistributionAbstractContinuousDistribution", "inverseCumulativeProbabilityWithDouble:" };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 = { 2, "", "org.apache.commons.math.distribution", "AbstractContinuousDistribution", 0x8008, 2, methods, 2, fields, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1;
}

@end

void OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 *self, OrgApacheCommonsMathDistributionAbstractContinuousDistribution *outer$, jdouble capture$0) {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_set_this$0_(self, outer$);
  self->val$p_ = capture$0;
  NSObject_init(self);
}

OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 *new_OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(OrgApacheCommonsMathDistributionAbstractContinuousDistribution *outer$, jdouble capture$0) {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 *self = [OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1 alloc];
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1_initWithOrgApacheCommonsMathDistributionAbstractContinuousDistribution_withDouble_(self, outer$, capture$0);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionAbstractContinuousDistribution_$1)
