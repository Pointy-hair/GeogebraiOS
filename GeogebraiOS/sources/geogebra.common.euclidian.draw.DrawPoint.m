//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawPoint.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GEllipse2DDouble.h"
#include "geogebra/common/awt/GEllipse2DFloat.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawConicPart.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/euclidian/draw/DrawParametricCurve.h"
#include "geogebra/common/euclidian/draw/DrawPoint.h"
#include "geogebra/common/euclidian/draw/DrawRay.h"
#include "geogebra/common/euclidian/draw/DrawSegment.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectAbstract.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

#define GeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN 12

@interface GeogebraCommonEuclidianDrawDrawPoint () {
 @public
  jint HIGHLIGHT_OFFSET_;
  id<GeogebraCommonKernelKernelNDGeoPointND> P_;
  jint diameter_, hightlightDiameter_, pointSize_;
  jboolean isVisible_, labelVisible_;
  id<GeogebraCommonAwtGEllipse2DDouble> circle_;
  id<GeogebraCommonAwtGEllipse2DDouble> circleHighlight_;
  id<GeogebraCommonAwtGLine2D> line1_, line2_, line3_, line4_;
  id<GeogebraCommonAwtGGeneralPath> gp_;
  jboolean isPreview_;
  IOSDoubleArray *coords_;
  IOSDoubleArray *coords1_;
  GeogebraCommonEuclidianDrawable *drawable_;
}

- (void)updateDiameter;

- (void)drawClippedSectionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo2
                                withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2;

+ (id<GeogebraCommonAwtGBasicStroke>)getEmptyStrokeWithInt:(jint)pointSize;

+ (id<GeogebraCommonAwtGBasicStroke>)getFillStrokeWithInt:(jint)pointSize;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, circle_, id<GeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, circleHighlight_, id<GeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, line1_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, line2_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, line3_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, line4_, id<GeogebraCommonAwtGLine2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, gp_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, coords1_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, drawable_, GeogebraCommonEuclidianDrawable *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawPoint, SELECTION_RADIUS_MIN, jint)

static id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianDrawDrawPoint_borderStroke_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawPoint, borderStroke_, id<GeogebraCommonAwtGBasicStroke>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, borderStroke_, id<GeogebraCommonAwtGBasicStroke>)

static IOSObjectArray *GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawPoint, fillStrokes_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, fillStrokes_, IOSObjectArray *)

static IOSObjectArray *GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonEuclidianDrawDrawPoint, emptyStrokes_, IOSObjectArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawPoint, emptyStrokes_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPoint_update(GeogebraCommonEuclidianDrawDrawPoint *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(GeogebraCommonEuclidianDrawDrawPoint *self, IOSDoubleArray *coords2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPoint_updateDiameter(GeogebraCommonEuclidianDrawDrawPoint *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPoint *self, GeogebraCommonKernelGeosGeoElement *geo2, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawPoint_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPoint *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(jint pointSize);

__attribute__((unused)) static id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(jint pointSize);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianDrawDrawPoint)

@implementation GeogebraCommonEuclidianDrawDrawPoint

+ (jint)getSelectionThresholdWithInt:(jint)threshold {
  return GeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(threshold);
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_(self, view, P);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                 withBoolean:(jboolean)isPreview {
  GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, isPreview);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawPoint_update(self);
}

- (void)updateWithDoubleArray:(IOSDoubleArray *)coords2 {
  GeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(self, coords2);
}

- (void)updateDiameter {
  GeogebraCommonEuclidianDrawDrawPoint_updateDiameter(self);
}

- (void)drawClippedSectionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo2
                                withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_(self, geo2, g2);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 fillWithGeogebraCommonAwtGShape:circleHighlight_];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_borderStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:circleHighlight_];
    }
    if ([geo_ getShowTrimmedIntersectionLines]) {
      GeogebraCommonKernelAlgosAlgoElement *algo = [geo_ getParentAlgorithm];
      if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntersectAbstract class]]) {
        IOSObjectArray *geos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput];
        GeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_(self, IOSObjectArray_Get(nil_chk(geos), 0), g2);
        if (geos->size_ > 1) GeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_(self, IOSObjectArray_Get(geos, 1), g2);
      }
    }
    jint pointStyle = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getPointStyle];
    if (pointStyle == -1) pointStyle = GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
    switch (pointStyle) {
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithGeogebraCommonAwtGShape:line1_];
      [g2 drawWithGeogebraCommonAwtGShape:line2_];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithGeogebraCommonAwtGShape:line1_];
      [g2 drawWithGeogebraCommonAwtGShape:line2_];
      [g2 drawWithGeogebraCommonAwtGShape:line3_];
      [g2 drawWithGeogebraCommonAwtGShape:line4_];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(pointSize_)];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:gp_];
      [g2 fillWithGeogebraCommonAwtGShape:gp_];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize_)];
      [g2 drawWithGeogebraCommonAwtGShape:circle_];
      break;
      default:
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getObjectColor]];
      [g2 fillWithGeogebraCommonAwtGShape:circle_];
      [g2 setPaintWithGeogebraCommonAwtGPaint:GeogebraCommonAwtGColor_get_black_()];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_borderStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:circle_];
    }
    if (labelVisible_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontPoint]];
      [g2 setPaintWithGeogebraCommonAwtGPaint:[geo_ getLabelColor]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawPoint_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  jint r = GeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(hitThreshold);
  jdouble dx = IOSDoubleArray_Get(nil_chk(coords_), 0) - x;
  jdouble dy = IOSDoubleArray_Get(coords_, 1) - y;
  return dx < r && dx > -r && dx * dx + dy * dy <= r * r;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:[((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) getBounds]];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(circle_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible]) {
    return nil;
  }
  jint selRadius = pointSize_ + HIGHLIGHT_OFFSET_;
  jint minRadius = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:GeogebraCommonEuclidianEventPointerEventTypeEnum_get_MOUSE()] + GeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN;
  if (selRadius < minRadius) {
    selRadius = minRadius;
  }
  return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(coords_), 0)) - selRadius withInt:J2ObjCFpToInt(IOSDoubleArray_Get(coords_, 1)) - selRadius withInt:2 * selRadius withInt:2 * selRadius];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

+ (id<GeogebraCommonAwtGBasicStroke>)getEmptyStrokeWithInt:(jint)pointSize {
  return GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(pointSize);
}

+ (id<GeogebraCommonAwtGBasicStroke>)getFillStrokeWithInt:(jint)pointSize {
  return GeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(pointSize);
}

- (void)setPointStyleWithInt:(jint)pointType {
  if (pointType == [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointStyle]) {
    return;
  }
  [P_ setPointStyleWithInt:pointType];
  GeogebraCommonEuclidianDrawDrawPoint_update(self);
}

- (id<GeogebraCommonAwtGArea>)getDot {
  return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:self->circle_];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(circle_);
  RELEASE_(circleHighlight_);
  RELEASE_(line1_);
  RELEASE_(line2_);
  RELEASE_(line3_);
  RELEASE_(line4_);
  RELEASE_(gp_);
  RELEASE_(coords_);
  RELEASE_(coords1_);
  RELEASE_(drawable_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianDrawDrawPoint class]) {
    JreStrongAssign(&GeogebraCommonEuclidianDrawDrawPoint_borderStroke_, nil, GeogebraCommonEuclidianEuclidianStatic_getDefaultStroke());
    JreStrongAssignAndConsume(&GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, nil, [IOSObjectArray newArrayWithLength:10 type:GeogebraCommonAwtGBasicStroke_class_()]);
    JreStrongAssignAndConsume(&GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, nil, [IOSObjectArray newArrayWithLength:10 type:GeogebraCommonAwtGBasicStroke_class_()]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianDrawDrawPoint)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getSelectionThresholdWithInt:", "getSelectionThreshold", "I", 0x19, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoPointND:", "DrawPoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoPointND:withBoolean:", "DrawPoint", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "updateWithDoubleArray:", "update", "V", 0x11, NULL, NULL },
    { "updateDiameter", NULL, "V", 0x2, NULL, NULL },
    { "drawClippedSectionWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonAwtGGraphics2D:", "drawClippedSection", "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getEmptyStrokeWithInt:", "getEmptyStroke", "Lgeogebra.common.awt.GBasicStroke;", 0x1a, NULL, NULL },
    { "getFillStrokeWithInt:", "getFillStroke", "Lgeogebra.common.awt.GBasicStroke;", 0x1a, NULL, NULL },
    { "setPointStyleWithInt:", "setPointStyle", "V", 0x1, NULL, NULL },
    { "getDot", NULL, "Lgeogebra.common.awt.GArea;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "HIGHLIGHT_OFFSET_", NULL, 0x2, "I", NULL, NULL,  },
    { "SELECTION_RADIUS_MIN_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN },
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "diameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "hightlightDiameter_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "circleHighlight_", NULL, 0x2, "Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "line1_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line2_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line3_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "line4_", NULL, 0x2, "Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "borderStroke_", NULL, 0xa, "Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianDrawDrawPoint_borderStroke_, NULL,  },
    { "fillStrokes_", NULL, 0xa, "[Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, NULL,  },
    { "emptyStrokes_", NULL, 0xa, "[Lgeogebra.common.awt.GBasicStroke;", &GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, NULL,  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coords1_", NULL, 0x2, "[D", NULL, NULL,  },
    { "drawable_", NULL, 0x2, "Lgeogebra.common.euclidian.Drawable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawPoint = { 2, "DrawPoint", "geogebra.common.euclidian.draw", NULL, 0x11, 19, methods, 22, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawPoint;
}

@end

jint GeogebraCommonEuclidianDrawDrawPoint_getSelectionThresholdWithInt_(jint threshold) {
  GeogebraCommonEuclidianDrawDrawPoint_initialize();
  return threshold + GeogebraCommonEuclidianDrawDrawPoint_SELECTION_RADIUS_MIN;
}

void GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianDrawDrawPoint *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, NO);
}

GeogebraCommonEuclidianDrawDrawPoint *new_GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonEuclidianDrawDrawPoint *self = [GeogebraCommonEuclidianDrawDrawPoint alloc];
  GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_(self, view, P);
  return self;
}

void GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(GeogebraCommonEuclidianDrawDrawPoint *self, GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoPointND> P, jboolean isPreview) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawPoint_set_circle_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble]);
  GeogebraCommonEuclidianDrawDrawPoint_set_circleHighlight_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble]);
  GeogebraCommonEuclidianDrawDrawPoint_set_gp_(self, nil);
  GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_coords1_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawPoint_set_P_(self, P);
  GeogebraCommonEuclidianDrawable_set_geo_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P, [GeogebraCommonKernelGeosGeoElement class]));
  self->isPreview_ = isPreview;
  GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawPoint_update(self);
}

GeogebraCommonEuclidianDrawDrawPoint *new_GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(GeogebraCommonEuclidianEuclidianView *view, id<GeogebraCommonKernelKernelNDGeoPointND> P, jboolean isPreview) {
  GeogebraCommonEuclidianDrawDrawPoint *self = [GeogebraCommonEuclidianDrawDrawPoint alloc];
  GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self, view, P, isPreview);
  return self;
}

void GeogebraCommonEuclidianDrawDrawPoint_update(GeogebraCommonEuclidianDrawDrawPoint *self) {
  if (self->gp_ != nil) [self->gp_ reset];
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (self->isPreview_) {
    GeogebraCommonKernelMatrixCoords *p = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsInD2];
    *IOSDoubleArray_GetRef(nil_chk(self->coords1_), 0) = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
    *IOSDoubleArray_GetRef(self->coords1_, 1) = [p getY];
  }
  else {
    GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsInD3]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
      self->isVisible_ = NO;
    }
    else {
      *IOSDoubleArray_GetRef(nil_chk(self->coords1_), 0) = [p getX];
      *IOSDoubleArray_GetRef(self->coords1_, 1) = [p getY];
    }
  }
  if (!self->isVisible_) return;
  GeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(self, self->coords1_);
}

void GeogebraCommonEuclidianDrawDrawPoint_updateWithDoubleArray_(GeogebraCommonEuclidianDrawDrawPoint *self, IOSDoubleArray *coords2) {
  self->isVisible_ = YES;
  self->labelVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isLabelVisible];
  GeogebraCommonEuclidianDrawDrawPoint_set_coords_(self, coords2);
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords_];
  if (JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(self->coords_), 0)) || JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(self->coords_, 1))) {
    self->isVisible_ = NO;
  }
  else if (IOSDoubleArray_Get(self->coords_, 0) > [self->view_ getWidth] + [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize] || IOSDoubleArray_Get(self->coords_, 0) < -[self->P_ getPointSize] || IOSDoubleArray_Get(self->coords_, 1) > [self->view_ getHeight] + [self->P_ getPointSize] || IOSDoubleArray_Get(self->coords_, 1) < -[self->P_ getPointSize]) {
    self->isVisible_ = NO;
  }
  if (self->pointSize_ != [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize]) {
    GeogebraCommonEuclidianDrawDrawPoint_updateDiameter(self);
  }
  jdouble xUL = (IOSDoubleArray_Get(self->coords_, 0) - self->pointSize_);
  jdouble yUL = (IOSDoubleArray_Get(self->coords_, 1) - self->pointSize_);
  jint pointStyle = [self->P_ getPointStyle];
  if (pointStyle == -1) pointStyle = GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
  jdouble root3over2;
  {
    jdouble xR;
    jdouble yB;
    jdouble direction;
    switch (pointStyle) {
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->gp_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_gp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
      }
      [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) (xUL + xR) / 2 withFloat:(jfloat) yUL];
      [self->gp_ lineToWithFloat:(jfloat) xUL withFloat:(jfloat) (yB + yUL) / 2];
      [self->gp_ lineToWithFloat:(jfloat) (xUL + xR) / 2 withFloat:(jfloat) yB];
      [self->gp_ lineToWithFloat:(jfloat) xR withFloat:(jfloat) (yB + yUL) / 2];
      [self->gp_ closePath];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_SOUTH:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH:
      direction = 1.0;
      if (pointStyle == GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_NORTH) direction = -1.0;
      if (self->gp_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_gp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
      }
      root3over2 = JavaLangMath_sqrtWithDouble_(3.0) / 2.0;
      [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + direction * self->pointSize_)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_ * root3over2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - direction * self->pointSize_ / 2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - self->pointSize_ * root3over2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - direction * self->pointSize_ / 2)];
      [self->gp_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + direction * self->pointSize_)];
      [self->gp_ closePath];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_EAST:
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST:
      direction = 1.0;
      if (pointStyle == GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_TRIANGLE_WEST) direction = -1.0;
      if (self->gp_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_gp_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
      }
      root3over2 = JavaLangMath_sqrtWithDouble_(3.0) / 2.0;
      [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->gp_)) moveToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + direction * self->pointSize_) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - direction * self->pointSize_ / 2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_ * root3over2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) - direction * self->pointSize_ / 2) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - self->pointSize_ * root3over2)];
      [self->gp_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + direction * self->pointSize_) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
      [self->gp_ closePath];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_EMPTY_DIAMOND:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_line1_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
        GeogebraCommonEuclidianDrawDrawPoint_set_line2_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
      }
      if (self->line3_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_line3_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
        GeogebraCommonEuclidianDrawDrawPoint_set_line4_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
      }
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yUL withDouble:xUL withDouble:(yB + yUL) / 2];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:(yB + yUL) / 2 withDouble:(xUL + xR) / 2 withDouble:yB];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line3_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yB withDouble:xR withDouble:(yB + yUL) / 2];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line4_)) setLineWithDouble:xR withDouble:(yB + yUL) / 2 withDouble:(xUL + xR) / 2 withDouble:yUL];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_PLUS:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_line1_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
        GeogebraCommonEuclidianDrawDrawPoint_set_line2_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
      }
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:(xUL + xR) / 2 withDouble:yUL withDouble:(xUL + xR) / 2 withDouble:yB];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:(yB + yUL) / 2 withDouble:xR withDouble:(yB + yUL) / 2];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
      xR = IOSDoubleArray_Get(self->coords_, 0) + self->pointSize_;
      yB = IOSDoubleArray_Get(self->coords_, 1) + self->pointSize_;
      if (self->line1_ == nil) {
        GeogebraCommonEuclidianDrawDrawPoint_set_line1_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
        GeogebraCommonEuclidianDrawDrawPoint_set_line2_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newLine2D]);
      }
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line1_)) setLineWithDouble:xUL withDouble:yUL withDouble:xR withDouble:yB];
      [((id<GeogebraCommonAwtGLine2D>) nil_chk(self->line2_)) setLineWithDouble:xUL withDouble:yB withDouble:xR withDouble:yUL];
      break;
      case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
      break;
    }
  }
  [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circle_)) setFrameWithDouble:xUL withDouble:yUL withDouble:self->diameter_ withDouble:self->diameter_];
  [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->circleHighlight_)) setFrameWithDouble:xUL - self->HIGHLIGHT_OFFSET_ withDouble:yUL - self->HIGHLIGHT_OFFSET_ withDouble:self->hightlightDiameter_ withDouble:self->hightlightDiameter_];
  if ([self->P_ getTrace]) {
    self->isTracing__ = YES;
    id<GeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) GeogebraCommonEuclidianDrawDrawPoint_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if (self->isVisible_ && self->labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    self->xLabel_ = (jint) JavaLangMath_roundWithDouble_(IOSDoubleArray_Get(self->coords_, 0) + 4);
    self->yLabel_ = (jint) JavaLangMath_roundWithDouble_(yUL - self->pointSize_);
    [self addLabelOffsetEnsureOnScreen];
  }
}

void GeogebraCommonEuclidianDrawDrawPoint_updateDiameter(GeogebraCommonEuclidianDrawDrawPoint *self) {
  self->pointSize_ = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointSize];
  self->diameter_ = 2 * self->pointSize_;
  self->HIGHLIGHT_OFFSET_ = self->pointSize_ / 2 + 1;
  self->hightlightDiameter_ = self->diameter_ + 2 * self->HIGHLIGHT_OFFSET_;
}

void GeogebraCommonEuclidianDrawDrawPoint_drawClippedSectionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPoint *self, GeogebraCommonKernelGeosGeoElement *geo2, id<GeogebraCommonAwtGGraphics2D> g2) {
  switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_LINE:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoLine class])));
    break;
    case GeogebraCommonPluginGeoClass_SEGMENT:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawSegment_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoSegment class])));
    break;
    case GeogebraCommonPluginGeoClass_RAY:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawRay_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(self->view_, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo2, @protocol(GeogebraCommonKernelKernelNDGeoLineND))));
    break;
    case GeogebraCommonPluginGeoClass_CONIC:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self->view_, (GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoConic class]), NO));
    break;
    case GeogebraCommonPluginGeoClass_FUNCTION:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawParametricCurve_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDCurveEvaluable_(self->view_, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoFunction class])));
    break;
    case GeogebraCommonPluginGeoClass_AXIS:
    GeogebraCommonEuclidianDrawDrawPoint_set_drawable_(self, nil);
    break;
    case GeogebraCommonPluginGeoClass_CONICPART:
    GeogebraCommonEuclidianDrawDrawPoint_setAndConsume_drawable_(self, new_GeogebraCommonEuclidianDrawDrawConicPart_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicPartND_(self->view_, (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoConicPart class])));
    break;
    default:
    GeogebraCommonEuclidianDrawDrawPoint_set_drawable_(self, nil);
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"unsupported type for restricted drawing ", [geo2 getGeoClassType]));
  }
  if (self->drawable_ != nil) {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getInhomCoordsWithDoubleArray:self->coords1_];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toScreenCoordsWithDoubleArray:self->coords1_];
    id<GeogebraCommonAwtGEllipse2DFloat> circleClip = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DFloatWithInt:J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(self->coords1_), 0)) - 30 withInt:J2ObjCFpToInt(IOSDoubleArray_Get(self->coords1_, 1)) - 30 withInt:60 withInt:60];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) clipWithGeogebraCommonAwtGShape:circleClip];
    [geo2 forceEuclidianVisibleWithBoolean:YES];
    [self->drawable_ update];
    [self->drawable_ drawWithGeogebraCommonAwtGGraphics2D:g2];
    [geo2 forceEuclidianVisibleWithBoolean:NO];
    [g2 setClipWithGeogebraCommonAwtGShape:nil];
  }
}

void GeogebraCommonEuclidianDrawDrawPoint_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawPoint *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
  jint pointStyle = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPointStyle];
  switch (pointStyle) {
    case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE:
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(self->pointSize_)];
    [g2 drawWithGeogebraCommonAwtGShape:self->circle_];
    break;
    case GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CROSS:
    default:
    [g2 fillWithGeogebraCommonAwtGShape:self->circle_];
  }
}

id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianDrawDrawPoint_getEmptyStrokeWithInt_(jint pointSize) {
  GeogebraCommonEuclidianDrawDrawPoint_initialize();
  if (pointSize > 9) return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeJoinMitreWithFloat:pointSize / 2.0f];
  if (IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_), pointSize) == nil) IOSObjectArray_Set(GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, pointSize, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeJoinMitreWithFloat:pointSize / 2.0f]);
  return IOSObjectArray_Get(GeogebraCommonEuclidianDrawDrawPoint_emptyStrokes_, pointSize);
}

id<GeogebraCommonAwtGBasicStroke> GeogebraCommonEuclidianDrawDrawPoint_getFillStrokeWithInt_(jint pointSize) {
  GeogebraCommonEuclidianDrawDrawPoint_initialize();
  if (pointSize > 9) return [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:pointSize / 2.0f];
  if (IOSObjectArray_Get(nil_chk(GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_), pointSize) == nil) IOSObjectArray_Set(GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, pointSize, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:pointSize / 2.0f]);
  return IOSObjectArray_Get(GeogebraCommonEuclidianDrawDrawPoint_fillStrokes_, pointSize);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawPoint)
