//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocateableList.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentText.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSequence.h"
#include "geogebra/common/kernel/algos/AlgoTextCorner.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/NormalizerMinimal.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"

@class GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum;

@interface GeogebraCommonKernelGeosGeoText () {
 @public
  NSString *str_;
  id<GeogebraCommonKernelKernelNDGeoPointND> startPoint_;
  jboolean isLaTeXorMathML_;
  jboolean isMathML__;
  id<GeogebraCommonAwtGRectangle2D> boundingBox_;
  jboolean needsUpdatedBoundingBox_;
  jboolean serifFont_;
  jint fontStyle_;
  jdouble fontSizeD_;
  jint printDecimals_;
  jint printFigures_;
  jboolean useSignificantFigures__;
  jboolean hasAbsoluteScreenLocation_;
  JavaLangStringBuilder *sbToString_;
  GeogebraCommonKernelStringTemplate *tpl_;
  GeogebraCommonKernelGeosGeoText *linkedText_;
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *spreadsheetTraceableCase_;
  id<GeogebraCommonKernelArithmeticExpressionValue> spreadsheetTraceableValue_;
  GeogebraCommonKernelArithmeticExpressionNode *spreadsheetTraceableLeftTree_;
  GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *traceModes_;
}

- (NSString *)getXMLlocation;

- (void)setSameLocationWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text;

- (void)updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo;

- (void)updateTemplate;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, str_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, startPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, boundingBox_, id<GeogebraCommonAwtGRectangle2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, tpl_, GeogebraCommonKernelStringTemplate *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, linkedText_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, spreadsheetTraceableCase_, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, spreadsheetTraceableValue_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, spreadsheetTraceableLeftTree_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, traceModes_, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)

static id<JavaUtilComparator> GeogebraCommonKernelGeosGeoText_comparator_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoText, comparator_, id<JavaUtilComparator>)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelGeosGeoText, comparator_, id<JavaUtilComparator>)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(GeogebraCommonKernelGeosGeoText *self, NSString *text2);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoText_getTextString(GeogebraCommonKernelGeosGeoText *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoText_getXMLlocation(GeogebraCommonKernelGeosGeoText *self);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_setSameLocationWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelGeosGeoText *text);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelAlgosAlgoElement *algo);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_updateTemplate(GeogebraCommonKernelGeosGeoText *self);

typedef NS_ENUM(NSUInteger, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase) {
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED = 0,
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE = 1,
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE = 2,
};

@interface GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum : JavaLangEnum < NSCopying >

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values();

+ (GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

FOUNDATION_EXPORT GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[];

#define GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_NOT_TESTED)

#define GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_TRUE)

#define GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE]
J2OBJC_ENUM_CONSTANT_GETTER(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum, SPREADSHEET_TRACEABLE_FALSE)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *new_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

@interface GeogebraCommonKernelGeosGeoText_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoText *)itemA
               withId:(GeogebraCommonKernelGeosGeoText *)itemB;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelGeosGeoText_$1)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoText_$1_init(GeogebraCommonKernelGeosGeoText_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoText_$1 *new_GeogebraCommonKernelGeosGeoText_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelGeosGeoText_$1)

@implementation GeogebraCommonKernelGeosGeoText

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                            withNSString:(NSString *)value {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, value);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)value {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelGeosGeoText_(self, text);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelGeosGeoText_(self) autorelease];
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return;
  GeogebraCommonKernelGeosGeoText *gt = (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]);
  if (cons_ != geo->cons_ && [self isAlgoMacroOutput]) {
    if (!useSignificantFigures__) [gt setPrintDecimalsWithInt:printDecimals_ > -1 ? printDecimals_ : [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintDecimals] withBoolean:YES];
    else [gt setPrintFiguresWithInt:printFigures_ > -1 ? printFigures_ : [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getPrintFigures] withBoolean:YES];
    GeogebraCommonKernelGeosGeoText_set_str_(self, gt->str_);
    isLaTeXorMathML_ = gt->isLaTeXorMathML_;
    isMathML__ = gt->isMathML__;
    GeogebraCommonKernelGeosGeoText_updateTemplate(self);
    return;
  }
  GeogebraCommonKernelGeosGeoText_set_str_(self, gt->str_);
  isLaTeXorMathML_ = gt->isLaTeXorMathML_;
  isMathML__ = gt->isMathML__;
  GeogebraCommonKernelGeosGeoText_set_boundingBox_(self, [gt getBoundingBox]);
  @try {
    if (gt->startPoint_ != nil) {
      if ([gt hasAbsoluteLocation]) {
        [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:[gt->startPoint_ copy__]];
      }
      else {
        [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:gt->startPoint_];
      }
    }
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"set GeoText: CircularDefinitionException");
  }
  GeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return;
  GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]);
  serifFont_ = text->serifFont_;
  fontStyle_ = text->fontStyle_;
  fontSizeD_ = text->fontSizeD_;
  printDecimals_ = text->printDecimals_;
  printFigures_ = text->printFigures_;
  useSignificantFigures__ = text->useSignificantFigures__;
  GeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (void)setTextStringWithNSString:(NSString *)text2 {
  GeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(self, text2);
}

- (NSString *)getTextString {
  return GeogebraCommonKernelGeosGeoText_getTextString(self);
}

- (void)initStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                         withInt:(jint)number {
  GeogebraCommonKernelGeosGeoText_set_startPoint_(self, p);
}

- (void)setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p
                                                        withInt:(jint)number {
  [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:p];
}

- (void)removeStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (startPoint_ == p) {
    @try {
      [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:nil];
    }
    @catch (JavaLangException *e) {
    }
  }
}

- (void)setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  if (alwaysFixed_) return;
  if ([self isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:p]) @throw [new_GeogebraCommonKernelCircularDefinitionException_init() autorelease];
  if (startPoint_ != nil) [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithGeogebraCommonKernelLocateable:self];
  if (p == nil) {
    if (startPoint_ != nil) GeogebraCommonKernelGeosGeoText_set_startPoint_(self, [startPoint_ copy__]);
    else GeogebraCommonKernelGeosGeoText_set_startPoint_(self, nil);
    labelOffsetX_ = 0;
    labelOffsetY_ = 0;
  }
  else {
    GeogebraCommonKernelGeosGeoText_set_startPoint_(self, p);
    [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) registerLocateableWithGeogebraCommonKernelLocateable:self];
    [self setAbsoluteScreenLocActiveWithBoolean:NO];
  }
}

- (void)doRemove {
  [super doRemove];
  if (startPoint_ != nil) [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithGeogebraCommonKernelLocateable:self];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getStartPoint {
  return startPoint_;
}

- (IOSObjectArray *)getStartPoints {
  if (startPoint_ == nil) return nil;
  IOSObjectArray *ret = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(ret, 0, startPoint_);
  return ret;
}

- (jboolean)hasAbsoluteLocation {
  return startPoint_ == nil || [startPoint_ isAbsoluteStartPoint];
}

- (void)setWaitForStartPoint {
}

- (void)update {
  [super update];
}

- (jboolean)isDefined {
  return str_ != nil && (startPoint_ == nil || [startPoint_ isDefined]);
}

- (void)setUndefined {
  GeogebraCommonKernelGeosGeoText_set_str_(self, nil);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl1 {
  return str_ == nil ? @"" : str_;
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl1 {
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *printForm = [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl1)) getStringType];
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(printForm)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) [sbToString_ appendWithNSString:@"\\text{``"];
  else [sbToString_ appendWithChar:'"'];
  if (str_ != nil) [sbToString_ appendWithNSString:str_];
  if ([printForm isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()]) [sbToString_ appendWithNSString:@"''}"];
  else [sbToString_ appendWithChar:'"'];
  return [sbToString_ description];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl1 {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  if ([self isLabelSet]) {
    [sbToString_ appendWithNSString:label_];
    [sbToString_ appendWithNSString:@" = "];
  }
  [sbToString_ appendWithChar:'"'];
  if (str_ != nil) [sbToString_ appendWithNSString:str_];
  [sbToString_ appendWithChar:'"'];
  return [sbToString_ description];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TEXT;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_TEXT();
}

- (jboolean)isMoveable {
  if (alwaysFixed_) return NO;
  return ![self isFixed];
}

- (void)setIsTextCommandWithBoolean:(jboolean)isCommand {
  self->isTextCommand__ = isCommand;
}

- (jboolean)isTextCommand {
  if (!([self getParentAlgorithm] == nil) && !([[self getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentText class]])) return YES;
  return isTextCommand__;
}

- (jboolean)isLaTeXTextCommand {
  if (!isTextCommand__ || [self getParentAlgorithm] == nil) return NO;
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([self getParentAlgorithm])) isLaTeXTextCommand];
}

- (void)setAlgoMacroOutputWithBoolean:(jboolean)isAlgoMacroOutput {
  [super setAlgoMacroOutputWithBoolean:YES];
  [self setIsTextCommandWithBoolean:YES];
}

- (void)addTextDescendantWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  if ([self isLabelSet]) return;
  GeogebraCommonKernelGeosGeoText_set_linkedText_(self, text);
}

- (void)setAlwaysFixedWithBoolean:(jboolean)alwaysFixed {
  self->alwaysFixed_ = alwaysFixed;
}

- (jboolean)isFixable {
  if (alwaysFixed_) return NO;
  return YES;
}

- (jboolean)isNumberValue {
  return NO;
}

- (jboolean)evaluatesToText {
  return YES;
}

- (jboolean)isGeoText {
  return YES;
}

- (GeogebraCommonKernelArithmeticMyStringBuffer *)getText {
  if (str_ != nil) return [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, str_) autorelease];
  return [new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernel_, @"") autorelease];
}

- (void)getXMLWithBoolean:(jboolean)getListenersToo
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  if ([self isIndependent] && [self getDefaultGeoType] < 0) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<expression"];
    [sb appendWithNSString:@" label=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
    [sb appendWithNSString:@"\" exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [self toOutputValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\"/>\n"];
  }
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<element"];
  [sb appendWithNSString:@" type=\"text\""];
  [sb appendWithNSString:@" label=\""];
  GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, label_);
  if ([self getDefaultGeoType] >= 0) {
    [sb appendWithNSString:@"\" default=\""];
    [sb appendWithInt:[self getDefaultGeoType]];
  }
  [sb appendWithNSString:@"\">\n"];
  [self getXMLtagsWithJavaLangStringBuilder:sb];
  if (getListenersToo) [self getListenerTagsXMLWithJavaLangStringBuilder:sb];
  [sb appendWithNSString:@"</element>\n"];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb withBoolean:NO];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  if (isLaTeXorMathML_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<isLaTeX val=\"true\"/>\n"];
  }
  GeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withGeogebraCommonMainApp_(sb, serifFont_, fontSizeD_, fontStyle_, isLaTeXorMathML_, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication]);
  if (printDecimals_ >= 0 && !useSignificantFigures__) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<decimals val=\""];
    [sb appendWithInt:printDecimals_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  if (printFigures_ >= 0 && useSignificantFigures__) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<significantfigures val=\""];
    [sb appendWithInt:printFigures_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:GeogebraCommonKernelGeosGeoText_getXMLlocation(self)];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (NSString *)getXMLlocation {
  return GeogebraCommonKernelGeosGeoText_getXMLlocation(self);
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                               withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) {
    GeogebraCommonKernelGeosGeoText *text = (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]);
    GeogebraCommonKernelGeosGeoText_setSameLocationWithGeogebraCommonKernelGeosGeoText_(self, text);
    [self setLaTeXWithBoolean:((GeogebraCommonKernelGeosGeoText *) nil_chk(text))->isLaTeXorMathML_ withBoolean:YES];
  }
}

- (void)setSameLocationWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonKernelGeosGeoText_setSameLocationWithGeogebraCommonKernelGeosGeoText_(self, text);
}

- (jboolean)isLaTeX {
  return isLaTeXorMathML_;
}

- (void)setLaTeXWithBoolean:(jboolean)b
                withBoolean:(jboolean)updateParentAlgo {
  if (b == isLaTeXorMathML_) return;
  isLaTeXorMathML_ = b;
  GeogebraCommonKernelGeosGeoText_updateTemplate(self);
  if (updateParentAlgo) {
    GeogebraCommonKernelAlgosAlgoElement *parent = [self getParentAlgorithm];
    if (parent != nil && !([parent isKindOfClass:[GeogebraCommonKernelAlgosAlgoSequence class]])) {
      [parent update];
    }
  }
}

- (jboolean)isMathML {
  return isMathML__;
}

- (void)setMathMLWithBoolean:(jboolean)b {
  isMathML__ = b;
}

- (void)setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)st {
  isMathML__ = [((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk(st)) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()];
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return labelOffsetX_;
}

- (jint)getAbsoluteScreenLocY {
  return labelOffsetY_;
}

- (jdouble)getRealWorldLocX {
  if (startPoint_ == nil) return 0;
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoords])) getX];
}

- (jdouble)getRealWorldLocY {
  if (startPoint_ == nil) return 0;
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint_)) getInhomCoords])) getY];
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
  id<GeogebraCommonKernelKernelNDGeoPointND> locPoint = [self getStartPoint];
  if (locPoint == nil) {
    locPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    @try {
      [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:locPoint];
    }
    @catch (JavaLangException *e) {
    }
  }
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(locPoint)) setCoordsWithDouble:x withDouble:y withDouble:1.0];
  labelOffsetX_ = 0;
  labelOffsetY_ = 0;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
  if (flag == hasAbsoluteScreenLocation_) return;
  hasAbsoluteScreenLocation_ = flag;
  if (flag) {
    if (startPoint_ != nil) {
      [((GeogebraCommonKernelLocateableList *) nil_chk([startPoint_ getLocateableList])) unregisterLocateableWithGeogebraCommonKernelLocateable:self];
      GeogebraCommonKernelGeosGeoText_set_startPoint_(self, nil);
    }
  }
  else {
    labelOffsetX_ = 0;
    labelOffsetY_ = 0;
  }
}

- (jboolean)isAbsoluteScreenLocActive {
  return hasAbsoluteScreenLocation_;
}

- (jboolean)isAbsoluteScreenLocateable {
  return YES;
}

- (jdouble)getFontSizeMultiplier {
  return fontSizeD_;
}

+ (jdouble)getRelativeFontSizeWithInt:(jint)index {
  return GeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(index);
}

+ (jint)getFontSizeIndexWithDouble:(jdouble)d {
  return GeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_(d);
}

- (void)setFontSizeMultiplierWithDouble:(jdouble)d {
  fontSizeD_ = d;
}

- (jint)getFontStyle {
  return fontStyle_;
}

- (void)setFontStyleWithInt:(jint)fontStyle {
  self->fontStyle_ = fontStyle;
  if ((fontStyle & GeogebraCommonAwtGFont_BOLD) != 0) lineThickness_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS * 2;
  else lineThickness_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo != nil && update) {
    self->printDecimals_ = printDecimals;
    printFigures_ = -1;
    useSignificantFigures__ = NO;
    GeogebraCommonKernelGeosGeoText_updateTemplate(self);
    GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(self, algo);
  }
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if (algo != nil && update) {
    self->printFigures_ = printFigures;
    printDecimals_ = -1;
    useSignificantFigures__ = YES;
    GeogebraCommonKernelGeosGeoText_updateTemplate(self);
    GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(self, algo);
  }
}

- (void)updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algo {
  GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(self, algo);
}

- (jboolean)useSignificantFigures {
  return useSignificantFigures__;
}

- (jboolean)isSerifFont {
  return serifFont_;
}

- (void)setSerifFontWithBoolean:(jboolean)serifFont {
  self->serifFont_ = serifFont;
}

- (void)calculateCornerPointWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)result
                                                         withInt:(jint)n {
  if (hasAbsoluteScreenLocation_ || boundingBox_ == nil) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
    return;
  }
  switch (n) {
    case 4:
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] withDouble:[boundingBox_ getY] withDouble:1.0];
    break;
    case 3:
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] + [boundingBox_ getWidth] withDouble:[boundingBox_ getY] withDouble:1.0];
    break;
    case 2:
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] + [boundingBox_ getWidth] withDouble:[boundingBox_ getY] + [boundingBox_ getHeight] withDouble:1.0];
    break;
    case 1:
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setCoordsWithDouble:[((id<GeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) getX] withDouble:[boundingBox_ getY] + [boundingBox_ getHeight] withDouble:1.0];
    break;
    default:
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(result)) setUndefined];
  }
}

- (id<GeogebraCommonAwtGRectangle2D>)getBoundingBox {
  return boundingBox_;
}

- (void)setBoundingBoxWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)w
                      withDouble:(jdouble)h {
  jboolean firstTime = boundingBox_ == nil;
  if (firstTime) {
    GeogebraCommonKernelGeosGeoText_set_boundingBox_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangle2D]);
  }
  [((id<GeogebraCommonAwtGRectangle2D>) nil_chk(boundingBox_)) setRectWithDouble:x withDouble:y withDouble:w withDouble:h];
}

- (jboolean)isNeedsUpdatedBoundingBox {
  return needsUpdatedBoundingBox_;
}

- (void)setNeedsUpdatedBoundingBoxWithBoolean:(jboolean)needsUpdatedBoundingBox {
  self->needsUpdatedBoundingBox_ = needsUpdatedBoundingBox;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (str_ == nil) return NO;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return [((NSString *) nil_chk(str_)) isEqual:((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class]))->str_];
  return NO;
}

- (void)setZero {
  GeogebraCommonKernelGeosGeoText_set_str_(self, @"");
}

+ (id<JavaUtilComparator>)getComparator {
  return GeogebraCommonKernelGeosGeoText_getComparator();
}

- (void)updateTemplate {
  GeogebraCommonKernelGeosGeoText_updateTemplate(self);
}

- (jboolean)isAlwaysFixed {
  return alwaysFixed_;
}

- (jboolean)isAuxiliaryObjectByDefault {
  return YES;
}

- (jboolean)justFontSize {
  return NO;
}

- (jboolean)isRedefineable {
  return YES;
}

- (jboolean)isLaTeXDrawableGeo {
  return [self isLaTeX] || (GeogebraCommonKernelGeosGeoText_getTextString(self) != nil && [((NSString *) nil_chk(GeogebraCommonKernelGeosGeoText_getTextString(self))) indexOf:'_'] != -1);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (jboolean)hasBackgroundColor {
  return YES;
}

- (GeogebraCommonKernelStringTemplate *)getStringTemplate {
  if (linkedText_ == nil) return tpl_;
  return [((GeogebraCommonKernelGeosGeoText *) nil_chk(linkedText_)) getStringTemplate];
}

- (void)setSpreadsheetTraceableWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)leftTree
                              withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)value {
  GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableLeftTree_(self, leftTree);
  GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableValue_(self, value);
}

- (void)initSpreadsheetTraceableCase {
  GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableCase_(self, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_NOT_TESTED());
}

- (jboolean)isSpreadsheetTraceable {
  {
    GeogebraCommonKernelAlgosAlgoElement *algo;
    switch ([spreadsheetTraceableCase_ ordinal]) {
      case GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_TRUE:
      return YES;
      case GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_FALSE:
      return NO;
      case GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCase_SPREADSHEET_TRACEABLE_NOT_TESTED:
      algo = [self getParentAlgorithm];
      if (algo != nil && ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentText class]])) {
        [((GeogebraCommonKernelAlgosAlgoDependentText *) check_class_cast(algo, [GeogebraCommonKernelAlgosAlgoDependentText class])) setSpreadsheetTraceableText];
        if (spreadsheetTraceableLeftTree_ != nil) {
          GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableCase_(self, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_TRUE());
          if (spreadsheetTraceableValue_ == nil) GeogebraCommonKernelGeosGeoText_set_traceModes_(self, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY());
          else GeogebraCommonKernelGeosGeoText_set_traceModes_(self, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONE_VALUE_OR_COPY());
          return YES;
        }
      }
      GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableCase_(self, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_TRUE());
      GeogebraCommonKernelGeosGeoText_set_traceModes_(self, GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum_get_ONLY_COPY());
      return YES;
      default:
      return NO;
    }
  }
}

- (void)updateColumnHeadingsForTraceValues {
  [self resetSpreadsheetColumnHeadings];
  GeogebraCommonKernelGeosGeoText *text = [self getColumnHeadingTextWithGeogebraCommonKernelArithmeticExpressionNode:spreadsheetTraceableLeftTree_];
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) setLaTeXWithBoolean:self->isLaTeXorMathML_ withBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(spreadsheetColumnHeadings_)) addWithId:text];
}

- (void)addToSpreadsheetTraceListWithJavaUtilArrayList:(JavaUtilArrayList *)spreadsheetTraceList {
  GeogebraCommonKernelGeosGeoNumeric *numeric = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(spreadsheetTraceableValue_)) evaluateDouble]) autorelease];
  [((JavaUtilArrayList *) nil_chk(spreadsheetTraceList)) addWithId:numeric];
}

- (GeogebraCommonKernelGeosGeoElement_TraceModesEnumEnum *)getTraceModes {
  return traceModes_;
}

+ (void)appendFontTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                   withBoolean:(jboolean)serifFont
                                    withDouble:(jdouble)fontSizeD
                                       withInt:(jint)fontStyle
                                   withBoolean:(jboolean)isLaTeX
                     withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withGeogebraCommonMainApp_(sb, serifFont, fontSizeD, fontStyle, isLaTeX, app);
}

- (jboolean)isPinnable {
  return YES;
}

- (void)updateLocation {
  [self updateGeo];
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateLocationWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)updateVisualStyle {
  [super updateVisualStyle];
  JavaUtilArrayList *algosTextCorner = [new_JavaUtilArrayList_init() autorelease];
  for (GeogebraCommonKernelAlgosAlgoElement * __strong algo in nil_chk([self getAlgorithmList])) {
    if ([algo isKindOfClass:[GeogebraCommonKernelAlgosAlgoTextCorner class]]) [algosTextCorner addWithId:algo];
  }
  GeogebraCommonKernelAlgosAlgoElement_updateCascadeAlgosWithJavaUtilArrayList_(algosTextCorner);
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(str_);
  RELEASE_(startPoint_);
  RELEASE_(boundingBox_);
  RELEASE_(sbToString_);
  RELEASE_(tpl_);
  RELEASE_(linkedText_);
  RELEASE_(spreadsheetTraceableCase_);
  RELEASE_(spreadsheetTraceableValue_);
  RELEASE_(spreadsheetTraceableLeftTree_);
  RELEASE_(traceModes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withNSString:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:", "GeoText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoText:", "GeoText", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setTextStringWithNSString:", "setTextString", "V", 0x11, NULL, NULL },
    { "getTextString", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initStartPointWithGeogebraCommonKernelKernelNDGeoPointND:withInt:", "initStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:withInt:", "setStartPoint", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "removeStartPointWithGeogebraCommonKernelKernelNDGeoPointND:", "removeStartPoint", "V", 0x1, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "getStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getStartPoints", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "hasAbsoluteLocation", NULL, "Z", 0x1, NULL, NULL },
    { "setWaitForStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isMoveable", NULL, "Z", 0x1, NULL, NULL },
    { "setIsTextCommandWithBoolean:", "setIsTextCommand", "V", 0x1, NULL, NULL },
    { "isTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
    { "setAlgoMacroOutputWithBoolean:", "setAlgoMacroOutput", "V", 0x1, NULL, NULL },
    { "addTextDescendantWithGeogebraCommonKernelGeosGeoText:", "addTextDescendant", "V", 0x1, NULL, NULL },
    { "setAlwaysFixedWithBoolean:", "setAlwaysFixed", "V", 0x1, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "isGeoText", NULL, "Z", 0x1, NULL, NULL },
    { "getText", NULL, "Lgeogebra.common.kernel.arithmetic.MyStringBuffer;", 0x1, NULL, NULL },
    { "getXMLWithBoolean:withJavaLangStringBuilder:", "getXML", "V", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLlocation", NULL, "Ljava.lang.String;", 0x2, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setSameLocationWithGeogebraCommonKernelGeosGeoText:", "setSameLocation", "V", 0x2, NULL, NULL },
    { "isLaTeX", NULL, "Z", 0x1, NULL, NULL },
    { "setLaTeXWithBoolean:withBoolean:", "setLaTeX", "V", 0x1, NULL, NULL },
    { "isMathML", NULL, "Z", 0x1, NULL, NULL },
    { "setMathMLWithBoolean:", "setMathML", "V", 0x1, NULL, NULL },
    { "setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:", "setFormulaType", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "getFontSizeMultiplier", NULL, "D", 0x1, NULL, NULL },
    { "getRelativeFontSizeWithInt:", "getRelativeFontSize", "D", 0x9, NULL, NULL },
    { "getFontSizeIndexWithDouble:", "getFontSizeIndex", "I", 0x9, NULL, NULL },
    { "setFontSizeMultiplierWithDouble:", "setFontSizeMultiplier", "V", 0x1, NULL, NULL },
    { "getFontStyle", NULL, "I", 0x1, NULL, NULL },
    { "setFontStyleWithInt:", "setFontStyle", "V", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x11, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x11, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement:", "updateTemplateAlgos", "V", 0x2, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "isSerifFont", NULL, "Z", 0x1, NULL, NULL },
    { "setSerifFontWithBoolean:", "setSerifFont", "V", 0x1, NULL, NULL },
    { "calculateCornerPointWithGeogebraCommonKernelGeosGeoPoint:withInt:", "calculateCornerPoint", "V", 0x1, NULL, NULL },
    { "getBoundingBox", NULL, "Lgeogebra.common.awt.GRectangle2D;", 0x1, NULL, NULL },
    { "setBoundingBoxWithDouble:withDouble:withDouble:withDouble:", "setBoundingBox", "V", 0x1, NULL, NULL },
    { "isNeedsUpdatedBoundingBox", NULL, "Z", 0x11, NULL, NULL },
    { "setNeedsUpdatedBoundingBoxWithBoolean:", "setNeedsUpdatedBoundingBox", "V", 0x11, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "getComparator", NULL, "Ljava.util.Comparator;", 0x9, NULL, NULL },
    { "updateTemplate", NULL, "V", 0x2, NULL, NULL },
    { "isAlwaysFixed", NULL, "Z", 0x1, NULL, NULL },
    { "isAuxiliaryObjectByDefault", NULL, "Z", 0x11, NULL, NULL },
    { "justFontSize", NULL, "Z", 0x1, NULL, NULL },
    { "isRedefineable", NULL, "Z", 0x1, NULL, NULL },
    { "isLaTeXDrawableGeo", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "hasBackgroundColor", NULL, "Z", 0x1, NULL, NULL },
    { "getStringTemplate", NULL, "Lgeogebra.common.kernel.StringTemplate;", 0x1, NULL, NULL },
    { "setSpreadsheetTraceableWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticExpressionValue:", "setSpreadsheetTraceable", "V", 0x1, NULL, NULL },
    { "initSpreadsheetTraceableCase", NULL, "V", 0x1, NULL, NULL },
    { "isSpreadsheetTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "updateColumnHeadingsForTraceValues", NULL, "V", 0x1, NULL, NULL },
    { "addToSpreadsheetTraceListWithJavaUtilArrayList:", "addToSpreadsheetTraceList", "V", 0x1, NULL, NULL },
    { "getTraceModes", NULL, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", 0x1, NULL, NULL },
    { "appendFontTagWithJavaLangStringBuilder:withBoolean:withDouble:withInt:withBoolean:withGeogebraCommonMainApp:", "appendFontTag", "V", 0x9, NULL, NULL },
    { "isPinnable", NULL, "Z", 0x1, NULL, NULL },
    { "updateLocation", NULL, "V", 0x1, NULL, NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "str_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "startPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "isLaTeXorMathML_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isMathML__", "isMathML", 0x2, "Z", NULL, NULL,  },
    { "boundingBox_", NULL, 0x2, "Lgeogebra.common.awt.GRectangle2D;", NULL, NULL,  },
    { "needsUpdatedBoundingBox_", NULL, 0x2, "Z", NULL, NULL,  },
    { "serifFont_", NULL, 0x2, "Z", NULL, NULL,  },
    { "fontStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "fontSizeD_", NULL, 0x2, "D", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "useSignificantFigures__", "useSignificantFigures", 0x2, "Z", NULL, NULL,  },
    { "FONTSIZE_EXTRA_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL },
    { "FONTSIZE_VERY_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL },
    { "FONTSIZE_SMALL_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL },
    { "FONTSIZE_MEDIUM_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM },
    { "FONTSIZE_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE },
    { "FONTSIZE_VERY_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE },
    { "FONTSIZE_EXTRA_LARGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE },
    { "hasAbsoluteScreenLocation_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "isTextCommand__", "isTextCommand", 0x1, "Z", NULL, NULL,  },
    { "alwaysFixed_", NULL, 0x0, "Z", NULL, NULL,  },
    { "tpl_", NULL, 0x2, "Lgeogebra.common.kernel.StringTemplate;", NULL, NULL,  },
    { "linkedText_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "comparator_", NULL, 0xa, "Ljava.util.Comparator;", &GeogebraCommonKernelGeosGeoText_comparator_, "Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoText;>;",  },
    { "spreadsheetTraceableCase_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", NULL, NULL,  },
    { "spreadsheetTraceableValue_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "spreadsheetTraceableLeftTree_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "traceModes_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement$TraceModesEnum;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoText = { 2, "GeoText", "geogebra.common.kernel.geos", NULL, 0x1, 101, methods, 30, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoText;
}

@end

void GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->isMathML__ = NO;
  self->needsUpdatedBoundingBox_ = NO;
  self->fontSizeD_ = 1;
  self->printDecimals_ = -1;
  self->printFigures_ = -1;
  self->useSignificantFigures__ = NO;
  self->hasAbsoluteScreenLocation_ = NO;
  GeogebraCommonKernelGeosGeoText_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(80));
  self->isTextCommand__ = NO;
  self->alwaysFixed_ = NO;
  GeogebraCommonKernelGeosGeoText_set_tpl_(self, GeogebraCommonKernelStringTemplate_get_defaultTemplate_());
  GeogebraCommonKernelGeosGeoText_set_spreadsheetTraceableCase_(self, GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_get_SPREADSHEET_TRACEABLE_NOT_TESTED());
  [self setConstructionDefaults];
  [self setAuxiliaryObjectWithBoolean:YES];
}

GeogebraCommonKernelGeosGeoText *new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoText *self = [GeogebraCommonKernelGeosGeoText alloc];
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelConstruction *c, NSString *label, NSString *value) {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoText *new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(GeogebraCommonKernelConstruction *c, NSString *label, NSString *value) {
  GeogebraCommonKernelGeosGeoText *self = [GeogebraCommonKernelGeosGeoText alloc];
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_(self, c, label, value);
  return self;
}

void GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelConstruction *c, NSString *value) {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(self, value);
}

GeogebraCommonKernelGeosGeoText *new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(GeogebraCommonKernelConstruction *c, NSString *value) {
  GeogebraCommonKernelGeosGeoText *self = [GeogebraCommonKernelGeosGeoText alloc];
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(self, c, value);
  return self;
}

void GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelGeosGeoText *) nil_chk(text))->cons_);
  [self setWithGeogebraCommonKernelGeosGeoElement:text];
}

GeogebraCommonKernelGeosGeoText *new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonKernelGeosGeoText *self = [GeogebraCommonKernelGeosGeoText alloc];
  GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelGeosGeoText_(self, text);
  return self;
}

void GeogebraCommonKernelGeosGeoText_setTextStringWithNSString_(GeogebraCommonKernelGeosGeoText *self, NSString *text2) {
  NSString *text = text2 == nil ? @"" : text2;
  while (((jint) [text length]) > 1 && [text charAtWithInt:((jint) [text length]) - 1] == 0x000a) {
    text = [text substring:0 endIndex:((jint) [text length]) - 1];
  }
  if (self->isLaTeXorMathML_) {
    GeogebraCommonKernelGeosGeoText_set_str_(self, GeogebraCommonUtilStringUtil_toLaTeXStringWithNSString_withBoolean_(text, NO));
  }
  else {
    GeogebraCommonKernelGeosGeoText_set_str_(self, [((NSString *) nil_chk(text)) replaceAll:@"\\\\\\\\n" withReplacement:@"\n"]);
  }
}

NSString *GeogebraCommonKernelGeosGeoText_getTextString(GeogebraCommonKernelGeosGeoText *self) {
  return self->str_;
}

NSString *GeogebraCommonKernelGeosGeoText_getXMLlocation(GeogebraCommonKernelGeosGeoText *self) {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (self->hasAbsoluteScreenLocation_) {
    [sb appendWithNSString:@"\t<absoluteScreenLocation "];
    [sb appendWithNSString:@" x=\""];
    [sb appendWithInt:self->labelOffsetX_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@" y=\""];
    [sb appendWithInt:self->labelOffsetY_];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
  else {
    if (self->startPoint_ != nil) {
      [sb appendWithNSString:[self->startPoint_ getStartPointXML]];
      if (self->labelOffsetX_ != 0 || self->labelOffsetY_ != 0) {
        [sb appendWithNSString:@"\t<labelOffset"];
        [sb appendWithNSString:@" x=\""];
        [sb appendWithInt:self->labelOffsetX_];
        [sb appendWithNSString:@"\""];
        [sb appendWithNSString:@" y=\""];
        [sb appendWithInt:self->labelOffsetY_];
        [sb appendWithNSString:@"\""];
        [sb appendWithNSString:@"/>\n"];
      }
    }
  }
  return [sb description];
}

void GeogebraCommonKernelGeosGeoText_setSameLocationWithGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelGeosGeoText *text) {
  if (((GeogebraCommonKernelGeosGeoText *) nil_chk(text))->hasAbsoluteScreenLocation_) {
    [self setAbsoluteScreenLocActiveWithBoolean:YES];
    [self setAbsoluteScreenLocWithInt:[text getAbsoluteScreenLocX] withInt:[text getAbsoluteScreenLocY]];
  }
  else {
    if (text->startPoint_ != nil) {
      @try {
        [self setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:text->startPoint_];
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

jdouble GeogebraCommonKernelGeosGeoText_getRelativeFontSizeWithInt_(jint index) {
  GeogebraCommonKernelGeosGeoText_initialize();
  switch (index) {
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL:
    return 0.5;
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL:
    return 0.7;
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL:
    return 1;
    default:
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM:
    return 1.4;
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE:
    return 2;
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE:
    return 4;
    case GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE:
    return 8;
  }
}

jint GeogebraCommonKernelGeosGeoText_getFontSizeIndexWithDouble_(jdouble d) {
  GeogebraCommonKernelGeosGeoText_initialize();
  if (d <= 0.5) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_SMALL;
  }
  if (d <= 0.8) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_SMALL;
  }
  if (d <= 1) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_SMALL;
  }
  if (d <= 1.5) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_MEDIUM;
  }
  if (d <= 2) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_LARGE;
  }
  if (d <= 4) {
    return GeogebraCommonKernelGeosGeoText_FONTSIZE_VERY_LARGE;
  }
  return GeogebraCommonKernelGeosGeoText_FONTSIZE_EXTRA_LARGE;
}

void GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(GeogebraCommonKernelGeosGeoText *self, GeogebraCommonKernelAlgosAlgoElement *algo) {
  if (algo == nil) return;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) getInput]))->size_; i++) if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), i))) isGeoText]) GeogebraCommonKernelGeosGeoText_updateTemplateAlgosWithGeogebraCommonKernelAlgosAlgoElement_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([algo getInput]), i))) getParentAlgorithm]);
  [algo update];
}

id<JavaUtilComparator> GeogebraCommonKernelGeosGeoText_getComparator() {
  GeogebraCommonKernelGeosGeoText_initialize();
  if (GeogebraCommonKernelGeosGeoText_comparator_ == nil) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoText_comparator_, nil, new_GeogebraCommonKernelGeosGeoText_$1_init());
  }
  return GeogebraCommonKernelGeosGeoText_comparator_;
}

void GeogebraCommonKernelGeosGeoText_updateTemplate(GeogebraCommonKernelGeosGeoText *self) {
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *type = self->isLaTeXorMathML_ ? (self->isMathML__ ? GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML() : GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()) : GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA();
  if ([self useSignificantFigures] && self->printFigures_ > -1) {
    GeogebraCommonKernelGeosGeoText_set_tpl_(self, GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, self->printFigures_, NO));
  }
  else if (!self->useSignificantFigures__ && self->printDecimals_ > -1) {
    GeogebraCommonKernelGeosGeoText_set_tpl_(self, GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(type, self->printDecimals_, NO));
  }
  else {
    GeogebraCommonKernelGeosGeoText_set_tpl_(self, GeogebraCommonKernelStringTemplate_getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(type));
  }
}

void GeogebraCommonKernelGeosGeoText_appendFontTagWithJavaLangStringBuilder_withBoolean_withDouble_withInt_withBoolean_withGeogebraCommonMainApp_(JavaLangStringBuilder *sb, jboolean serifFont, jdouble fontSizeD, jint fontStyle, jboolean isLaTeX, GeogebraCommonMainApp *app) {
  GeogebraCommonKernelGeosGeoText_initialize();
  if (serifFont || fontSizeD != 1 || fontStyle != 0 || isLaTeX) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<font serif=\""];
    [sb appendWithBoolean:serifFont];
    [sb appendWithNSString:@"\" sizeM=\""];
    [sb appendWithDouble:fontSizeD];
    jdouble oldFontSize = [((GeogebraCommonMainApp *) nil_chk(app)) getFontSize] * fontSizeD - [app getFontSize];
    if (oldFontSize > 0) {
      oldFontSize = JavaLangMath_ceilWithDouble_(oldFontSize);
    }
    else {
      oldFontSize = JavaLangMath_floorWithDouble_(oldFontSize);
    }
    [sb appendWithNSString:@"\" size=\""];
    [sb appendWithInt:J2ObjCFpToInt(oldFontSize)];
    [sb appendWithNSString:@"\" style=\""];
    [sb appendWithInt:fontStyle];
    [sb appendWithNSString:@"\"/>\n"];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoText)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[3];

@implementation GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values() {
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_ count:3 type:GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values();
}

+ (GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initialize();
  for (int i = 0; i < 3; i++) {
    GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *e = GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum class]) {
    GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED = new_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_NOT_TESTED", 0);
    GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE = new_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_TRUE", 1);
    GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE = new_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(@"SPREADSHEET_TRACEABLE_FALSE", 2);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "SPREADSHEET_TRACEABLE_NOT_TESTED", "SPREADSHEET_TRACEABLE_NOT_TESTED", 0x4019, "Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_NOT_TESTED, NULL,  },
    { "SPREADSHEET_TRACEABLE_TRUE", "SPREADSHEET_TRACEABLE_TRUE", 0x4019, "Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_TRUE, NULL,  },
    { "SPREADSHEET_TRACEABLE_FALSE", "SPREADSHEET_TRACEABLE_FALSE", 0x4019, "Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;", &GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_SPREADSHEET_TRACEABLE_FALSE, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoText$SpreadsheetTraceableCase;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum = { 2, "SpreadsheetTraceableCase", "geogebra.common.kernel.geos", "GeoText", 0x401a, 0, NULL, 3, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoText$SpreadsheetTraceableCase;>;" };
  return &_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum;
}

@end

void GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *new_GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum *self = [GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum alloc];
  GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoText_SpreadsheetTraceableCaseEnum)

@implementation GeogebraCommonKernelGeosGeoText_$1

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoText *)itemA
               withId:(GeogebraCommonKernelGeosGeoText *)itemB {
  GeogebraCommonUtilNormalizerMinimal *noramlizer = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelGeosGeoText *) nil_chk(itemA)) getKernel])) getApplication])) getNormalizer];
  NSString *strA = [((GeogebraCommonUtilNormalizerMinimal *) nil_chk(noramlizer)) transformWithNSString:GeogebraCommonKernelGeosGeoText_getTextString(itemA)];
  NSString *strB = [noramlizer transformWithNSString:GeogebraCommonKernelGeosGeoText_getTextString(nil_chk(itemB))];
  jint comp = [((NSString *) nil_chk(strA)) compareToWithId:strB];
  if (comp == 0) {
    comp = [((NSString *) nil_chk(GeogebraCommonKernelGeosGeoText_getTextString(itemA))) compareToWithId:GeogebraCommonKernelGeosGeoText_getTextString(itemB)];
  }
  if (comp == 0) return [itemA getConstructionIndex] > [itemB getConstructionIndex] ? -1 : 1;
  return comp;
}

- (instancetype)init {
  GeogebraCommonKernelGeosGeoText_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelGeosGeoText", "getComparator" };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoText_$1 = { 2, "", "geogebra.common.kernel.geos", "GeoText", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoText;>;" };
  return &_GeogebraCommonKernelGeosGeoText_$1;
}

@end

void GeogebraCommonKernelGeosGeoText_$1_init(GeogebraCommonKernelGeosGeoText_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelGeosGeoText_$1 *new_GeogebraCommonKernelGeosGeoText_$1_init() {
  GeogebraCommonKernelGeosGeoText_$1 *self = [GeogebraCommonKernelGeosGeoText_$1 alloc];
  GeogebraCommonKernelGeosGeoText_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoText_$1)
