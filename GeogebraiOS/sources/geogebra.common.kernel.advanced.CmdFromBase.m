//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/CmdFromBase.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoFromBase.h"
#include "geogebra/common/kernel/advanced/CmdFromBase.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Throwable.h"

@implementation GeogebraCommonKernelAdvancedCmdFromBase

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelAdvancedCmdFromBase_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    jboolean oldMacroMode;
    IOSObjectArray *argE;
    IOSObjectArray *arg;
    NSString *str;
    GeogebraCommonKernelAdvancedAlgoFromBase *fromBase;
    IOSObjectArray *ret;
    switch (n) {
      case 2:
      oldMacroMode = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      [cons_ setSuppressLabelCreationWithBoolean:YES];
      argE = [c getArguments];
      arg = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(nil_chk(argE), 1))) resolveVariables];
      IOSObjectArray_Set(arg, 1, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(argE, 1)]), 0));
      if (!([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      str = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(argE, 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      @try {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(argE, 0))) resolveVariables];
        IOSObjectArray_Set(arg, 0, IOSObjectArray_Get(nil_chk([self resArgWithGeogebraCommonKernelArithmeticExpressionNode:IOSObjectArray_Get(argE, 0)]), 0));
      }
      @catch (JavaLangThrowable *t) {
      }
      if (!([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoText class]])) {
        IOSObjectArray_SetAndConsume(arg, 0, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction], str));
      }
      [cons_ setSuppressLabelCreationWithBoolean:oldMacroMode];
      fromBase = [new_GeogebraCommonKernelAdvancedAlgoFromBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumberValue_(cons_, [c getLabel], (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoText class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ [fromBase getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdFromBase", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedCmdFromBase = { 2, "CmdFromBase", "geogebra.common.kernel.advanced", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedCmdFromBase;
}

@end

void GeogebraCommonKernelAdvancedCmdFromBase_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelAdvancedCmdFromBase *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelAdvancedCmdFromBase *new_GeogebraCommonKernelAdvancedCmdFromBase_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAdvancedCmdFromBase *self = [GeogebraCommonKernelAdvancedCmdFromBase alloc];
  GeogebraCommonKernelAdvancedCmdFromBase_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedCmdFromBase)
