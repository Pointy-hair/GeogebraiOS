//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectCS1D2D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLinePolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/HasSegments.h"
#include "java/lang/Double.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D () {
 @public
  JavaUtilTreeMap *newCoords_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D, newCoords_, JavaUtilTreeMap *)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *this$0_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1, this$0_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1)

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *this$0_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2, this$0_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, g, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
             withGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, g, p);
  return self;
}

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_g_(self, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND)));
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self) autorelease]) autorelease];
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputSegments {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self) autorelease]) autorelease];
}

- (void)setIntersectionLine {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_o1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_d1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([g_ getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o1_]);
}

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)hasSegments
                                                   withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  GeogebraCommonKernelGeosGeoPolygon *p = (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(hasSegments, [GeogebraCommonKernelGeosGeoPolygon class]);
  switch ([GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getConfigLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_(g_, p) ordinal]) {
    case GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlane_GENERAL:
    [self intersectionsCoordsGeneralWithGeogebraCommonKernelGeosGeoPolygon:p withJavaUtilTreeMap:newCoords];
    break;
    case GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlane_CONTAINED:
    [self intersectionsCoordsContainedWithGeogebraCommonKernelKernelNDHasSegments:p withJavaUtilTreeMap:newCoords];
    break;
    case GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_ConfigLinePlane_PARALLEL:
    break;
  }
}

- (void)intersectionsCoordsContainedWithGeogebraCommonKernelKernelNDHasSegments:(id<GeogebraCommonKernelKernelNDHasSegments>)p
                                                            withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  [self setIntersectionLine];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((id<GeogebraCommonKernelKernelNDHasSegments>) nil_chk(p)) getSegments]))->size_; i++) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(nil_chk([p getSegments]), i);
    GeogebraCommonKernelMatrixCoords *o2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
    GeogebraCommonKernelMatrixCoords *d2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o2];
    IOSObjectArray *project = GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(o1_, d1_, o2, d2);
    if (project != nil && [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 0))) equalsForKernelWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(project, 1) withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
      jdouble t1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:1];
      jdouble t2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(project, 2))) getWithInt:2];
      if ([self checkParameterWithDouble:t1] && [seg respectLimitedPathWithDouble:t2]) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_(t1) withId:IOSObjectArray_Get(project, 0)];
    }
  }
}

- (void)intersectionsCoordsGeneralWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p
                                                     withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  GeogebraCommonKernelMatrixCoords *globalCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  GeogebraCommonKernelMatrixCoords *inPlaneCoords = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(4) autorelease];
  GeogebraCommonKernelMatrixCoords *singlePoint = GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectCS1D2D_getIntersectLinePlaneWithGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoCoordSys2D_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(g_, p, globalCoords, inPlaneCoords);
  if (singlePoint != nil) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:singlePoint];
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) respectLimitedPathWithDouble:t1];
}

- (void)compute {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) clear];
  jint index = 0;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getFirstInput])) isDefined]) {
    [self intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:p_ withJavaUtilTreeMap:newCoords_];
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:[newCoords_ size]];
    for (GeogebraCommonKernelMatrixCoords * __strong coords in nil_chk([newCoords_ values])) {
      id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([outputPoints_ getElementWithInt:index], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
      [point updateCoords];
      index++;
    }
  }
  for (; index < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; index++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size] > 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [outputPoints_ setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setLabelsWithNSStringArray:labels];
  }
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [self getFirstInput]);
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(p_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setDependencies];
}

- (void)dealloc {
  RELEASE_(p_);
  RELEASE_(g_);
  RELEASE_(outputPoints_);
  RELEASE_(newCoords_);
  RELEASE_(o1_);
  RELEASE_(d1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelGeosGeoPolygon:", "AlgoIntersectLinePolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDHasSegments:", "AlgoIntersectLinePolygon3D", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createOutputPoints", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "createOutputSegments", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "intersectionsCoordsContainedWithGeogebraCommonKernelKernelNDHasSegments:withJavaUtilTreeMap:", "intersectionsCoordsContained", "V", 0x4, NULL, NULL },
    { "intersectionsCoordsGeneralWithGeogebraCommonKernelGeosGeoPolygon:withJavaUtilTreeMap:", "intersectionsCoordsGeneral", "V", 0x4, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "spaceDim_", NULL, 0x4, "I", NULL, NULL,  },
    { "p_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.HasSegments;", NULL, NULL,  },
    { "g_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "outputPoints_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "newCoords_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lgeogebra/common/kernel/Matrix/Coords;>;",  },
    { "o1_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "d1_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D = { 2, "AlgoIntersectLinePolygon3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 15, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class]), p);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelGeosGeoPolygon *p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPolygon_(self, c, labels, g, p);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *g, id<GeogebraCommonKernelKernelNDHasSegments> p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->spaceDim_ = 3;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_outputPoints_(self, [self createOutputPoints]);
  [self setFirstInputWithGeogebraCommonKernelGeosGeoElement:g];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_set_p_(self, p);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_setAndConsume_newCoords_(self, new_JavaUtilTreeMap_initWithJavaUtilComparator_(GeogebraCommonKernelKernel_DoubleComparatorWithDouble_(GeogebraCommonKernelKernel_STANDARD_PRECISION)));
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *g, id<GeogebraCommonKernelKernelNDHasSegments> p) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDHasSegments_(self, c, labels, g, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)newElement {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *p = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLinePolygon3D;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D", "createOutputPoints" };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectLinePolygon3D", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$1)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2

- (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *)newElement {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *aS = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [aS setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *aE = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [aE setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *a = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(this$0_->cons_, aS, aE) autorelease];
  [a setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return a;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *)outer$ {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoSegment3D;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoIntersectLinePolygon3D;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D", "createOutputSegments" };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 = { 2, "", "geogebra.common.geogebra3D.kernel3D.algos", "AlgoIntersectLinePolygon3D", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 *self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D *outer$) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2 alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2_initWithGeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLinePolygon3D_$2)
