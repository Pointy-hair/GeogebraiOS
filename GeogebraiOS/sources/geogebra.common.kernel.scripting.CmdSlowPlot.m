//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSlowPlot.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/scripting/CmdSlowPlot.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"

@implementation GeogebraCommonKernelScriptingCmdSlowPlot

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSlowPlot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  switch (n) {
    case 1:
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable]) {
      GeogebraCommonKernelGeosGeoNumeric *var = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, 0.0) autorelease];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) setEuclidianVisibleWithBoolean:NO];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) update];
      [var setLabelWithNSString:nil];
      [var setEuclidianVisibleWithBoolean:YES];
      [var setIntervalMinWithDouble:0.0];
      [var setIntervalMaxWithDouble:1.0];
      [var setAnimatingWithBoolean:YES];
      [var setAnimationStepWithDouble:0.01];
      [var setAnimationTypeWithInt:GeogebraCommonKernelGeosGeoElement_ANIMATION_INCREASING];
      [var update];
      GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_maxPrecision_();
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithNSString:@"Function["];
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@",x(Corner[1]), x(Corner[1]) (1-"];
      [sb appendWithNSString:[var getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@") + x(Corner(2)) "];
      [sb appendWithNSString:[var getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithNSString:@"]"];
      [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAnimatonManager])) startAnimation];
      @try {
        return [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernelA_ getAlgebraProcessor])) processAlgebraCommandNoExceptionHandlingWithNSString:[sb description] withBoolean:YES withBoolean:NO withBoolean:YES withBoolean:NO];
      }
      @catch (JavaLangException *e) {
        [((JavaLangException *) nil_chk(e)) printStackTrace];
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      @catch (GeogebraCommonMainMyError *e) {
        [((GeogebraCommonMainMyError *) nil_chk(e)) printStackTrace];
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSlowPlot", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSlowPlot = { 2, "CmdSlowPlot", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSlowPlot;
}

@end

void GeogebraCommonKernelScriptingCmdSlowPlot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSlowPlot *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSlowPlot *new_GeogebraCommonKernelScriptingCmdSlowPlot_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSlowPlot *self = [GeogebraCommonKernelScriptingCmdSlowPlot alloc];
  GeogebraCommonKernelScriptingCmdSlowPlot_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSlowPlot)
