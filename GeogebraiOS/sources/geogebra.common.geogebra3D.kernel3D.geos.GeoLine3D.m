//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoLinePoint.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D () {
 @public
  NSString *parameter_;
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D, parameter_, NSString *)

__attribute__((unused)) static JavaLangStringBuilder *GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelStringTemplate *tpl);

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)O
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)I {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, I);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                             withBoolean:(jboolean)isIntersection {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                    withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, c, o, v);
  return self;
}

- (void)setParameterWithNSString:(NSString *)s {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_set_parameter_(self, s);
}

- (void)setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_set_startPoint_(self, P);
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D *)createWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_LINE3D();
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  GeogebraCommonMainApp_debugWithNSString_(@"unimplemented");
  return NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) isDefined];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((JavaLangStringBuilder *) nil_chk(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl))) description];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [self getSbToString];
  [((JavaLangStringBuilder *) nil_chk(sbToString)) setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  [sbToString appendWithNSString:@": "];
  [sbToString appendWithJavaLangCharSequence:GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString description];
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [self getCoordsXMLWithJavaLangStringBuilder:sb];
}

- (void)getCoordsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(coordsys_)) getOrigin];
  GeogebraCommonKernelMatrixCoords *v = [coordsys_ getVx];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coords"];
  [sb appendWithNSString:@" ox=\""];
  [sb appendWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(o)) getX]];
  [sb appendWithNSString:@"\" oy=\""];
  [sb appendWithDouble:[o getY]];
  [sb appendWithNSString:@"\" oz=\""];
  [sb appendWithDouble:[o getZ]];
  [sb appendWithNSString:@"\" ow=\""];
  [sb appendWithDouble:[o getW]];
  [sb appendWithNSString:@"\" vx=\""];
  [sb appendWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX]];
  [sb appendWithNSString:@"\" vy=\""];
  [sb appendWithDouble:[v getY]];
  [sb appendWithNSString:@"\" vz=\""];
  [sb appendWithDouble:[v getZ]];
  [sb appendWithNSString:@"\" vw=\""];
  [sb appendWithDouble:[v getW]];
  [sb appendWithNSString:@"\"/>\n"];
}

- (jboolean)isGeoLine {
  return YES;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (jdouble)getMaxParameter {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)getMinParameter {
  return JavaLangDouble_NEGATIVE_INFINITY;
}

- (jboolean)isClosedPath {
  return NO;
}

- (jboolean)isValidCoordWithDouble:(jdouble)x {
  return YES;
}

- (void)removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
}

- (jboolean)respectLimitedPathWithDouble:(jdouble)parameter {
  return YES;
}

- (void)setStandardStartPoint {
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(parameter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "GeoLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "GeoLine3D", NULL, 0x1, NULL, NULL },
    { "setParameterWithNSString:", "setParameter", "V", 0x1, NULL, NULL },
    { "setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setStartPoint", "V", 0x11, NULL, NULL },
    { "createWithGeogebraCommonKernelConstruction:", "create", "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCoordSys1D;", 0x4, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x2, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getCoordsXMLWithJavaLangStringBuilder:", "getCoordsXML", "V", 0x4, NULL, NULL },
    { "isGeoLine", NULL, "Z", 0x11, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "isClosedPath", NULL, "Z", 0x1, NULL, NULL },
    { "isValidCoordWithDouble:", "isValidCoord", "Z", 0x1, NULL, NULL },
    { "removePointOnLineWithGeogebraCommonKernelKernelNDGeoPointND:", "removePointOnLine", "V", 0x11, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "setStandardStartPoint", NULL, "V", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "parameter_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D = { 2, "GeoLine3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 26, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> I) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, I);
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_set_parameter_(self, JreStrcat("C", GeogebraCommonUtilUnicode_lambda));
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *c, id<GeogebraCommonKernelKernelNDGeoPointND> O, id<GeogebraCommonKernelKernelNDGeoPointND> I) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, O, I);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, NO);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelConstruction *c, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_set_parameter_(self, JreStrcat("C", GeogebraCommonUtilUnicode_lambda));
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *c, jboolean isIntersection) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, isIntersection);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelMatrixCoords *o, GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoCoordSys1D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, c, o, v);
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_set_parameter_(self, JreStrcat("C", GeogebraCommonUtilUnicode_lambda));
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelMatrixCoords *o, GeogebraCommonKernelMatrixCoords *v) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, c, o, v);
  return self;
}

JavaLangStringBuilder *GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_buildValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *self, GeogebraCommonKernelStringTemplate *tpl) {
  JavaLangStringBuilder *sbToString = [self getSbBuildValueString];
  [((JavaLangStringBuilder *) nil_chk(sbToString)) setLengthWithInt:0];
  if (![self isDefined]) {
    [sbToString appendWithNSString:@"X = (?, ?, ?)"];
    return sbToString;
  }
  GeogebraCommonKernelAlgosAlgoElement *algo = [self getParentAlgorithm];
  if ([algo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint class]]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *algoLP = (GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *) check_class_cast(algo, [GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint class]);
    IOSObjectArray *geos = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoLinePoint *) nil_chk(algoLP)) getInput];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(geos), 0))) isGeoPoint] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(geos, 1))) isGeoVector]) {
      id<GeogebraCommonKernelKernelNDGeoPointND> pt = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(geos, 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      GeogebraCommonKernelMatrixCoords *coords1 = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pt)) getInhomCoordsInD3];
      id<GeogebraCommonKernelKernelNDGeoVectorND> vec = (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(IOSObjectArray_Get(geos, 1), @protocol(GeogebraCommonKernelKernelNDGeoVectorND));
      GeogebraCommonKernelMatrixCoords *coords2 = [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vec)) getCoordsInD3];
      [sbToString appendWithNSString:@"X = ("];
      [sbToString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords1)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@", "];
      [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[coords1 getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@", "];
      [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[coords1 getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@") + "];
      [sbToString appendWithNSString:self->parameter_];
      [sbToString appendWithNSString:@" ("];
      [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2)) getX] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@", "];
      [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[coords2 getY] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@", "];
      [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[coords2 getZ] withGeogebraCommonKernelStringTemplate:tpl]];
      [sbToString appendWithNSString:@")"];
      return sbToString;
    }
  }
  GeogebraCommonKernelMatrixCoords *O = [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(self->coordsys_)) getOrigin];
  GeogebraCommonKernelMatrixCoords *V = [self->coordsys_ getVx];
  [sbToString appendWithNSString:@"X = ("];
  [sbToString appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(O)) getWithInt:1] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@", "];
  [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[O getWithInt:2] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@", "];
  [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[O getWithInt:3] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@") + "];
  [sbToString appendWithNSString:self->parameter_];
  [sbToString appendWithNSString:@" ("];
  [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(V)) getWithInt:1] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@", "];
  [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[V getWithInt:2] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@", "];
  [sbToString appendWithNSString:[self->kernel_ formatWithDouble:[V getWithInt:3] withGeogebraCommonKernelStringTemplate:tpl]];
  [sbToString appendWithNSString:@")"];
  return sbToString;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D)
