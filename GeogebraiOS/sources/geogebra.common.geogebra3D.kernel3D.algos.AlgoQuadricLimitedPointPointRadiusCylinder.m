//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCylinder.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricEnds.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricLimitedPointPointRadiusCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)origin
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)secondPoint
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, origin, secondPoint, r);
  return self;
}

- (void)createEnds {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnds *algo2 = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricEnds_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoQuadricND_(cons_, [self getQuadric]) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo2];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_bottom_(self, [algo2 getSection1]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_set_top_(self, [algo2 getSection2]);
}

- (void)setOutput {
  [self setOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getQuadric], [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getBottom], [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getTop], [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) getSide] } count:4 type:GeogebraCommonKernelGeosGeoElement_class_()]];
}

- (void)setQuadricWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o1
                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o2
                  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)d
                                            withDouble:(jdouble)r
                                            withDouble:(jdouble)min
                                            withDouble:(jdouble)max {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk([self getQuadric])) setCylinderWithGeogebraCommonKernelMatrixCoords:o1 withGeogebraCommonKernelMatrixCoords:d withDouble:r withDouble:min withDouble:max];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Cylinder();
}

- (GeogebraCommonKernelAlgosAlgoElement *)getTransformedAlgoWithNSStringArray:(IOSObjectArray *)labels
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                       withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)r {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self->cons_, labels, p1, p2, r) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoQuadricLimitedPointPointRadiusCylinder", NULL, 0x1, NULL, NULL },
    { "createEnds", NULL, "V", 0x4, NULL, NULL },
    { "setOutput", NULL, "V", 0x4, NULL, NULL },
    { "setQuadricWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "setQuadric", "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getTransformedAlgoWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumeric:", "getTransformedAlgo", "Lgeogebra.common.kernel.algos.AlgoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder = { 2, "AlgoQuadricLimitedPointPointRadiusCylinder", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> origin, id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadius_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withInt_(self, c, labels, origin, secondPoint, r, GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> origin, id<GeogebraCommonKernelKernelNDGeoPointND> secondPoint, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, labels, origin, secondPoint, r);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricLimitedPointPointRadiusCylinder)
