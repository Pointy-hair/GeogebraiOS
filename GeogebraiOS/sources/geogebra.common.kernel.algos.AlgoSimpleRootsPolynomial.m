//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSimpleRootsPolynomial.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/EquationSolver.h"
#include "geogebra/common/kernel/EquationSolverInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoSimpleRootsPolynomial.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"

@interface GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial ()

+ (jdouble)distancePairSqWithDoubleArray:(IOSDoubleArray *)p1
                         withDoubleArray:(IOSDoubleArray *)p2;

- (void)makePointsWithDoubleArray:(IOSDoubleArray *)roots
                          withInt:(jint)nrRealRoots;

@end

__attribute__((unused)) static jdouble GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_distancePairSqWithDoubleArray_withDoubleArray_(IOSDoubleArray *p1, IOSDoubleArray *p2);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_makePointsWithDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *self, IOSDoubleArray *roots, jint nrRealRoots);

@interface GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *this$0_;
}

- (GeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial:(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1, this$0_, GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 *self, GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 *new_GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1)

@implementation GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
             withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)geos {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(self, c, geos);
  return self;
}

- (void)setRootsPolynomialWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)pf {
  [self doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:pf];
}

- (void)setRootsPolynomialWithinRangeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)pf
                                                                                        withDouble:(jdouble)min
                                                                                        withDouble:(jdouble)max {
  [self doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:pf withDouble:min withDouble:max];
}

- (IOSObjectArray *)getIntersectionPoints {
  return [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(points_)) getOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithLength:0 type:GeogebraCommonKernelGeosGeoPoint_class_()]];
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return nil;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, geos_);
  [self setDependencies];
}

+ (jint)getRootsWithDoubleArray:(IOSDoubleArray *)roots
withGeogebraCommonKernelEquationSolverInterface:(id<GeogebraCommonKernelEquationSolverInterface>)eqnSolver {
  return GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_getRootsWithDoubleArray_withGeogebraCommonKernelEquationSolverInterface_(roots, eqnSolver);
}

- (void)doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)rootsPoly {
  IOSDoubleArray *roots = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(rootsPoly)) getCoefficients];
  jint nrRealRoots = 0;
  if (((IOSDoubleArray *) nil_chk(roots))->size_ > 1) nrRealRoots = GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_getRootsWithDoubleArray_withGeogebraCommonKernelEquationSolverInterface_(roots, eqnSolver_);
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_makePointsWithDoubleArray_withInt_(self, roots, nrRealRoots);
}

- (void)doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:(OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)rootsPoly
                                                                 withDouble:(jdouble)min
                                                                 withDouble:(jdouble)max {
  IOSDoubleArray *roots = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(rootsPoly)) getCoefficients];
  jint nrRealRoots = 0;
  if (((IOSDoubleArray *) nil_chk(roots))->size_ > 1) nrRealRoots = GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_getRootsWithDoubleArray_withGeogebraCommonKernelEquationSolverInterface_(roots, eqnSolver_);
  for (jint i = 0; i < nrRealRoots; ++i) {
    if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(roots, i), max, GeogebraCommonKernelKernel_STANDARD_PRECISION) || GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(min, IOSDoubleArray_Get(roots, i), GeogebraCommonKernelKernel_STANDARD_PRECISION)) *IOSDoubleArray_GetRef(roots, i) = JavaLangDouble_NaN;
  }
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_makePointsWithDoubleArray_withInt_(self, roots, nrRealRoots);
}

+ (jdouble)distancePairSqWithDoubleArray:(IOSDoubleArray *)p1
                         withDoubleArray:(IOSDoubleArray *)p2 {
  return GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_distancePairSqWithDoubleArray_withDoubleArray_(p1, p2);
}

- (void)makePointsWithDoubleArray:(IOSDoubleArray *)roots
                          withInt:(jint)nrRealRoots {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_makePointsWithDoubleArray_withInt_(self, roots, nrRealRoots);
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(points_)) setLabelsWithNSStringArray:labels];
  [self update];
}

- (void)setPointsWithJavaUtilList:(id<JavaUtilList>)valPairs {
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(points_)) adjustOutputSizeWithInt:[((id<JavaUtilList>) nil_chk(valPairs)) size]];
  for (jint i = 0; i < [valPairs size]; i++) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([points_ getElementWithInt:i])) setCoordsWithDouble:IOSDoubleArray_Get(nil_chk([valPairs getWithInt:i]), 0) withDouble:IOSDoubleArray_Get(nil_chk([valPairs getWithInt:i]), 1) withDouble:1];
  }
  if (setLabels__) [points_ updateLabels];
}

- (jint)getNrPointsWithDouble:(jdouble)t {
  return 1;
}

- (jdouble)getYValueWithDouble:(jdouble)t
                       withInt:(jint)idx {
  return [self getYValueWithDouble:t];
}

- (jdouble)getYValueWithDouble:(jdouble)t {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jdouble)getXValueWithDouble:(jdouble)t {
  return t;
}

- (jdouble)getXValueWithDouble:(jdouble)t
                       withInt:(jint)idx {
  return [self getXValueWithDouble:t];
}

- (IOSDoubleArray *)getXYPairWithDouble:(jdouble)t
                                withInt:(jint)idx {
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ [self getXValueWithDouble:t withInt:idx], [self getYValueWithDouble:t withInt:idx] } count:2];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Roots();
}

- (void)dealloc {
  RELEASE_(eqnSolver_);
  RELEASE_(geos_);
  RELEASE_(points_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "AlgoSimpleRootsPolynomial", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElementArray:", "AlgoSimpleRootsPolynomial", NULL, 0x81, NULL, NULL },
    { "setRootsPolynomialWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "setRootsPolynomial", "V", 0x1, NULL, NULL },
    { "setRootsPolynomialWithinRangeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:withDouble:withDouble:", "setRootsPolynomialWithinRange", "V", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getRootsWithDoubleArray:withGeogebraCommonKernelEquationSolverInterface:", "getRoots", "I", 0x9, NULL, NULL },
    { "doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:", "doCalc", "V", 0x4, NULL, NULL },
    { "doCalcWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:withDouble:withDouble:", "doCalc", "V", 0x4, NULL, NULL },
    { "distancePairSqWithDoubleArray:withDoubleArray:", "distancePairSq", "D", 0xa, NULL, NULL },
    { "makePointsWithDoubleArray:withInt:", "makePoints", "V", 0x2, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "setPointsWithJavaUtilList:", "setPoints", "V", 0x4, NULL, NULL },
    { "getNrPointsWithDouble:", "getNrPoints", "I", 0x4, NULL, NULL },
    { "getYValueWithDouble:withInt:", "getYValue", "D", 0x4, NULL, NULL },
    { "getYValueWithDouble:", "getYValue", "D", 0x404, NULL, NULL },
    { "getXValueWithDouble:", "getXValue", "D", 0x4, NULL, NULL },
    { "getXValueWithDouble:withInt:", "getXValue", "D", 0x4, NULL, NULL },
    { "getXYPairWithDouble:withInt:", "getXYPair", "[D", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "setLabels__", "setLabels", 0x4, "Z", NULL, NULL,  },
    { "eqnSolver_", NULL, 0x4, "Lgeogebra.common.kernel.EquationSolverInterface;", NULL, NULL,  },
    { "geos_", NULL, 0x4, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "points_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoPoint;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial = { 2, "AlgoSimpleRootsPolynomial", "geogebra.common.kernel.algos", NULL, 0x401, 21, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial;
}

@end

void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoIntersect_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_set_eqnSolver_(self, [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getKernel])) getEquationSolver]);
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_setAndConsume_points_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(self) autorelease]));
}

void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *geos) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_setAndConsume_geos_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(geos))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < geos->size_; i++) {
    IOSObjectArray_Set(self->geos_, i, IOSObjectArray_Get(geos, i));
  }
  [self setInputOutput];
}

jint GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_getRootsWithDoubleArray_withGeogebraCommonKernelEquationSolverInterface_(IOSDoubleArray *roots, id<GeogebraCommonKernelEquationSolverInterface> eqnSolver) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initialize();
  jint nrRealRoots = [((id<GeogebraCommonKernelEquationSolverInterface>) nil_chk(eqnSolver)) polynomialRootsWithDoubleArray:roots withBoolean:NO];
  if (nrRealRoots > 1) {
    jint c = 0;
    JavaUtilArrays_sortWithDoubleArray_withInt_withInt_(roots, 0, nrRealRoots);
    jdouble last = IOSDoubleArray_Get(nil_chk(roots), 0);
    for (jint i = 1; i < nrRealRoots; i++) {
      if (IOSDoubleArray_Get(roots, i) - last <= GeogebraCommonKernelKernel_MIN_PRECISION) {
        c++;
      }
      else {
        last = IOSDoubleArray_Get(roots, i);
        if (c > 0) *IOSDoubleArray_GetRef(roots, i - c) = IOSDoubleArray_Get(roots, i);
      }
    }
    nrRealRoots -= c;
  }
  return nrRealRoots;
}

jdouble GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_distancePairSqWithDoubleArray_withDoubleArray_(IOSDoubleArray *p1, IOSDoubleArray *p2) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initialize();
  return (IOSDoubleArray_Get(nil_chk(p1), 0) - IOSDoubleArray_Get(nil_chk(p2), 0)) * (IOSDoubleArray_Get(p1, 0) - IOSDoubleArray_Get(p2, 0)) + (IOSDoubleArray_Get(p1, 1) - IOSDoubleArray_Get(p2, 1)) * (IOSDoubleArray_Get(p1, 1) - IOSDoubleArray_Get(p2, 1));
}

void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_makePointsWithDoubleArray_withInt_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *self, IOSDoubleArray *roots, jint nrRealRoots) {
  id<JavaUtilList> valPairs = [new_JavaUtilArrayList_init() autorelease];
  jint len;
  for (jint i = 0; i < nrRealRoots; i++) {
    len = [self getNrPointsWithDouble:IOSDoubleArray_Get(nil_chk(roots), i)];
    for (jint j = 0; j < len; j++) {
      IOSDoubleArray *pair = [self getXYPairWithDouble:IOSDoubleArray_Get(roots, i) withInt:j];
      for (jint k = 0; k < [valPairs size]; k++) {
        if (GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_distancePairSqWithDoubleArray_withDoubleArray_(pair, [valPairs getWithInt:k]) < GeogebraCommonKernelKernel_STANDARD_PRECISION) {
          pair = nil;
          break;
        }
      }
      if (pair != nil) [valPairs addWithId:pair];
    }
  }
  [self setPointsWithJavaUtilList:valPairs];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial)

@implementation GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1

- (GeogebraCommonKernelGeosGeoPoint *)newElement {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setUndefined];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial:(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *)outer$ {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoSimpleRootsPolynomial;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial", "initWithGeogebraCommonKernelConstruction:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoSimpleRootsPolynomial", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoPoint;>;" };
  return &_GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 *self, GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *outer$) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 *new_GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial *outer$) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 *self = [GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1 alloc];
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1_initWithGeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_$1)
