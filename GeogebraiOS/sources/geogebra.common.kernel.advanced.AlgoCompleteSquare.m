//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCompleteSquare.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoCompleteSquare.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/cas/AlgoCoefficients.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedAlgoCompleteSquare () {
 @public
  GeogebraCommonKernelGeosGeoFunction *f_, *square_;
  GeogebraCommonKernelArithmeticFunctionVariable *fv_;
  GeogebraCommonKernelArithmeticMyDouble *a_, *h_, *k_;
  jint lastDeg_;
  GeogebraCommonKernelCasAlgoCoefficients *algoCoef_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, square_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, fv_, GeogebraCommonKernelArithmeticFunctionVariable *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, a_, GeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, h_, GeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, k_, GeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCompleteSquare, algoCoef_, GeogebraCommonKernelCasAlgoCoefficients *)

@implementation GeogebraCommonKernelAdvancedAlgoCompleteSquare

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

- (void)compute {
  jint degInt;
  GeogebraCommonKernelGeosGeoList *coefs = nil;
  [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(fv_)) setVarStringWithNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  jdouble r = [f_ evaluateWithDouble:0];
  jdouble s = [f_ evaluateWithDouble:1];
  jdouble p = 0.5 * (s + [f_ evaluateWithDouble:-1]) - r;
  jdouble q = s - p - r;
  jboolean isQuadratic = ![f_ isGeoFunctionConditional];
  IOSDoubleArray *checkpoints = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 1000, -1000, JavaLangMath_PI, JavaLangMath_E } count:4];
  for (jint i = 0; i < checkpoints->size_; i++) {
    jdouble x = IOSDoubleArray_Get(checkpoints, i);
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_(p * x * x + q * x + r - [f_ evaluateWithDouble:x])) {
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("DCDCDCD", p, ',', q, ',', r, ',', (p * x * x + q * x + r - [f_ evaluateWithDouble:x])));
      isQuadratic = NO;
    }
  }
  if (!isQuadratic) {
    if (algoCoef_ == nil) {
      GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_algoCoef_(self, new_GeogebraCommonKernelCasAlgoCoefficients_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(cons_, f_));
      [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCoef_];
    }
    coefs = [((GeogebraCommonKernelCasAlgoCoefficients *) nil_chk(algoCoef_)) getResult];
    GeogebraCommonMainApp_debugWithNSString_([((GeogebraCommonKernelGeosGeoList *) nil_chk(coefs)) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    degInt = [coefs size] - 1;
    isQuadratic = ([coefs isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([coefs getWithInt:0])) isDefined]);
    for (jint i = 1; i < degInt; i++) {
      if (2 * i != degInt && !GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:i], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble])) {
        isQuadratic = NO;
      }
      p = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      q = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:degInt / 2], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
      r = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([coefs getWithInt:degInt], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    }
  }
  else {
    degInt = 2;
  }
  if (degInt % 2 == 1 || degInt < 2 || !isQuadratic) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) setUndefined];
    return;
  }
  if (lastDeg_ != degInt) {
    GeogebraCommonKernelArithmeticExpressionNode *squareE;
    id<GeogebraCommonKernelArithmeticExpressionValue> fvPower;
    if (degInt == 2) fvPower = fv_;
    else fvPower = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv_, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, degInt / 2) autorelease]) autorelease];
    squareE = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, a_, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fvPower, GeogebraCommonPluginOperationEnum_get_MINUS(), h_) autorelease]) powerWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2) autorelease]]) autorelease], GeogebraCommonPluginOperationEnum_get_PLUS(), k_) autorelease];
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) getFunction])) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:squareE];
  }
  lastDeg_ = degInt;
  [fv_ setVarStringWithNSString:[f_ getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(square_)) setDefinedWithBoolean:!JavaLangDouble_isNaNWithDouble_(r)];
  [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(a_)) setWithDouble:p];
  [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(h_)) setWithDouble:-q / (2 * p)];
  [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(k_)) setWithDouble:r - q * q / (p * 4)];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:square_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getResult {
  return square_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CompleteSquare();
}

- (void)dealloc {
  RELEASE_(f_);
  RELEASE_(square_);
  RELEASE_(fv_);
  RELEASE_(a_);
  RELEASE_(h_);
  RELEASE_(k_);
  RELEASE_(algoCoef_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoFunction:", "AlgoCompleteSquare", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "square_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "fv_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "h_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "k_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "lastDeg_", NULL, 0x2, "I", NULL, NULL,  },
    { "algoCoef_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoCoefficients;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCompleteSquare = { 2, "AlgoCompleteSquare", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCompleteSquare;
}

@end

void GeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelAdvancedAlgoCompleteSquare *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_a_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_h_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_k_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_fv_(self, new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelArithmeticExpressionNode *squareE = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->a_) autorelease];
  GeogebraCommonKernelArithmeticFunction *squareF = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(squareE, self->fv_) autorelease];
  [squareF initFunction];
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_setAndConsume_square_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self->square_ setFunctionWithGeogebraCommonKernelArithmeticFunction:squareF];
  [self compute];
  self->lastDeg_ = 0;
  [self->square_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoCompleteSquare *new_GeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAdvancedAlgoCompleteSquare *self = [GeogebraCommonKernelAdvancedAlgoCompleteSquare alloc];
  GeogebraCommonKernelAdvancedAlgoCompleteSquare_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCompleteSquare)
