//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoRotate.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRotate.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/PointRotateable.h"
#include "geogebra/common/kernel/geos/Rotateable.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoRotate () {
 @public
  id<GeogebraCommonKernelGeosRotateable> out_;
  id<GeogebraCommonKernelArithmeticNumberValue> angle_;
  GeogebraCommonKernelGeosGeoElement *inGeo_, *outGeo_, *angleGeo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotate, out_, id<GeogebraCommonKernelGeosRotateable>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotate, angle_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotate, inGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotate, outGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoRotate, angleGeo_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoRotate_compute(GeogebraCommonKernelAlgosAlgoRotate *self);

@implementation GeogebraCommonKernelAlgosAlgoRotate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle {
  GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, A, angle);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)A
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle {
  GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, A, angle);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Rotate();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ROTATE_BY_ANGLE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inGeo_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(angle_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoRotate_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ARotatedByAngleB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(angleGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g2 {
  GeogebraCommonKernelAlgosAlgoRotate_set_inGeo_(self, g);
  GeogebraCommonKernelAlgosAlgoRotate_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]])) GeogebraCommonKernelAlgosAlgoRotate_set_out_(self, (id<GeogebraCommonKernelGeosRotateable>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelGeosRotateable)));
}

- (GeogebraCommonKernelGeosGeoElement *)getResultTemplateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) return [new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [super getResultTemplateWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (jdouble)getAreaScaleFactor {
  return 1;
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(angle_);
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(angleGeo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoRotate", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoRotate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x2, "Lgeogebra.common.kernel.geos.Rotateable;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "inGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "angleGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoRotate = { 2, "AlgoRotate", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoRotate;
}

@end

void GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoRotate *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, A, angle);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoRotate *new_GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelAlgosAlgoRotate *self = [GeogebraCommonKernelAlgosAlgoRotate alloc];
  GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, A, angle);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoRotate *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelAlgosAlgoTransformation_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoRotate_set_angle_(self, angle);
  GeogebraCommonKernelAlgosAlgoRotate_set_angleGeo_(self, [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(angle)) toGeoElement]);
  GeogebraCommonKernelAlgosAlgoRotate_set_inGeo_(self, A);
  GeogebraCommonKernelAlgosAlgoRotate_set_outGeo_(self, [self getResultTemplateWithGeogebraCommonKernelGeosGeoElement:self->inGeo_]);
  if ([GeogebraCommonKernelGeosPointRotateable_class_() isInstance:self->outGeo_]) GeogebraCommonKernelAlgosAlgoRotate_set_out_(self, (id<GeogebraCommonKernelGeosPointRotateable>) check_protocol_cast(self->outGeo_, @protocol(GeogebraCommonKernelGeosPointRotateable)));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoRotate_compute(self);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoFunction]) [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
}

GeogebraCommonKernelAlgosAlgoRotate *new_GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *A, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelAlgosAlgoRotate *self = [GeogebraCommonKernelAlgosAlgoRotate alloc];
  GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, A, angle);
  return self;
}

void GeogebraCommonKernelAlgosAlgoRotate_compute(GeogebraCommonKernelAlgosAlgoRotate *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoList class]) withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoList class])];
    return;
  }
  if ([self->inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoFunction class])) toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setWithGeogebraCommonKernelGeosGeoElement:self->inGeo_];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  [((id<GeogebraCommonKernelGeosRotateable>) nil_chk(self->out_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:self->angle_];
  if ([self->inGeo_ isLimitedPath]) [self transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:self->inGeo_ withGeogebraCommonKernelGeosGeoElement:self->outGeo_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoRotate)
