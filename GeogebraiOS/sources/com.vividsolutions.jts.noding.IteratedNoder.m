//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/noding/IteratedNoder.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/LineIntersector.h"
#include "com/vividsolutions/jts/algorithm/RobustLineIntersector.h"
#include "com/vividsolutions/jts/geom/PrecisionModel.h"
#include "com/vividsolutions/jts/geom/TopologyException.h"
#include "com/vividsolutions/jts/noding/IntersectionAdder.h"
#include "com/vividsolutions/jts/noding/IteratedNoder.h"
#include "com/vividsolutions/jts/noding/MCIndexNoder.h"
#include "java/util/Collection.h"

@interface ComVividsolutionsJtsNodingIteratedNoder () {
 @public
  ComVividsolutionsJtsGeomPrecisionModel *pm_;
  ComVividsolutionsJtsAlgorithmLineIntersector *li_;
  id<JavaUtilCollection> nodedSegStrings_;
  jint maxIter_;
}

- (void)nodeWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                      withIntArray:(IOSIntArray *)numInteriorIntersections;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingIteratedNoder, pm_, ComVividsolutionsJtsGeomPrecisionModel *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingIteratedNoder, li_, ComVividsolutionsJtsAlgorithmLineIntersector *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsNodingIteratedNoder, nodedSegStrings_, id<JavaUtilCollection>)

__attribute__((unused)) static void ComVividsolutionsJtsNodingIteratedNoder_nodeWithJavaUtilCollection_withIntArray_(ComVividsolutionsJtsNodingIteratedNoder *self, id<JavaUtilCollection> segStrings, IOSIntArray *numInteriorIntersections);

@implementation ComVividsolutionsJtsNodingIteratedNoder

- (instancetype)initWithComVividsolutionsJtsGeomPrecisionModel:(ComVividsolutionsJtsGeomPrecisionModel *)pm {
  ComVividsolutionsJtsNodingIteratedNoder_initWithComVividsolutionsJtsGeomPrecisionModel_(self, pm);
  return self;
}

- (void)setMaximumIterationsWithInt:(jint)maxIter {
  self->maxIter_ = maxIter;
}

- (id<JavaUtilCollection>)getNodedSubstrings {
  return nodedSegStrings_;
}

- (void)computeNodesWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings {
  IOSIntArray *numInteriorIntersections = [IOSIntArray arrayWithLength:1];
  ComVividsolutionsJtsNodingIteratedNoder_set_nodedSegStrings_(self, segStrings);
  jint nodingIterationCount = 0;
  jint lastNodesCreated = -1;
  do {
    ComVividsolutionsJtsNodingIteratedNoder_nodeWithJavaUtilCollection_withIntArray_(self, nodedSegStrings_, numInteriorIntersections);
    nodingIterationCount++;
    jint nodesCreated = IOSIntArray_Get(numInteriorIntersections, 0);
    if (lastNodesCreated > 0 && nodesCreated >= lastNodesCreated && nodingIterationCount > maxIter_) {
      @throw [new_ComVividsolutionsJtsGeomTopologyException_initWithNSString_(JreStrcat("$I$", @"Iterated noding failed to converge after ", nodingIterationCount, @" iterations")) autorelease];
    }
    lastNodesCreated = nodesCreated;
  }
  while (lastNodesCreated > 0);
}

- (void)nodeWithJavaUtilCollection:(id<JavaUtilCollection>)segStrings
                      withIntArray:(IOSIntArray *)numInteriorIntersections {
  ComVividsolutionsJtsNodingIteratedNoder_nodeWithJavaUtilCollection_withIntArray_(self, segStrings, numInteriorIntersections);
}

- (void)dealloc {
  RELEASE_(pm_);
  RELEASE_(li_);
  RELEASE_(nodedSegStrings_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomPrecisionModel:", "IteratedNoder", NULL, 0x1, NULL, NULL },
    { "setMaximumIterationsWithInt:", "setMaximumIterations", "V", 0x1, NULL, NULL },
    { "getNodedSubstrings", NULL, "Ljava.util.Collection;", 0x1, NULL, NULL },
    { "computeNodesWithJavaUtilCollection:", "computeNodes", "V", 0x1, "Lcom.vividsolutions.jts.geom.TopologyException;", NULL },
    { "nodeWithJavaUtilCollection:withIntArray:", "node", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ITER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = ComVividsolutionsJtsNodingIteratedNoder_MAX_ITER },
    { "pm_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.PrecisionModel;", NULL, NULL,  },
    { "li_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.LineIntersector;", NULL, NULL,  },
    { "nodedSegStrings_", NULL, 0x2, "Ljava.util.Collection;", NULL, NULL,  },
    { "maxIter_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsNodingIteratedNoder = { 2, "IteratedNoder", "com.vividsolutions.jts.noding", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsNodingIteratedNoder;
}

@end

void ComVividsolutionsJtsNodingIteratedNoder_initWithComVividsolutionsJtsGeomPrecisionModel_(ComVividsolutionsJtsNodingIteratedNoder *self, ComVividsolutionsJtsGeomPrecisionModel *pm) {
  NSObject_init(self);
  self->maxIter_ = ComVividsolutionsJtsNodingIteratedNoder_MAX_ITER;
  ComVividsolutionsJtsNodingIteratedNoder_setAndConsume_li_(self, new_ComVividsolutionsJtsAlgorithmRobustLineIntersector_init());
  ComVividsolutionsJtsNodingIteratedNoder_set_pm_(self, pm);
  [self->li_ setPrecisionModelWithComVividsolutionsJtsGeomPrecisionModel:pm];
}

ComVividsolutionsJtsNodingIteratedNoder *new_ComVividsolutionsJtsNodingIteratedNoder_initWithComVividsolutionsJtsGeomPrecisionModel_(ComVividsolutionsJtsGeomPrecisionModel *pm) {
  ComVividsolutionsJtsNodingIteratedNoder *self = [ComVividsolutionsJtsNodingIteratedNoder alloc];
  ComVividsolutionsJtsNodingIteratedNoder_initWithComVividsolutionsJtsGeomPrecisionModel_(self, pm);
  return self;
}

void ComVividsolutionsJtsNodingIteratedNoder_nodeWithJavaUtilCollection_withIntArray_(ComVividsolutionsJtsNodingIteratedNoder *self, id<JavaUtilCollection> segStrings, IOSIntArray *numInteriorIntersections) {
  ComVividsolutionsJtsNodingIntersectionAdder *si = [new_ComVividsolutionsJtsNodingIntersectionAdder_initWithComVividsolutionsJtsAlgorithmLineIntersector_(self->li_) autorelease];
  ComVividsolutionsJtsNodingMCIndexNoder *noder = [new_ComVividsolutionsJtsNodingMCIndexNoder_init() autorelease];
  [noder setSegmentIntersectorWithComVividsolutionsJtsNodingSegmentIntersector:si];
  [noder computeNodesWithJavaUtilCollection:segStrings];
  ComVividsolutionsJtsNodingIteratedNoder_set_nodedSegStrings_(self, [noder getNodedSubstrings]);
  *IOSIntArray_GetRef(nil_chk(numInteriorIntersections), 0) = si->numInteriorIntersections_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsNodingIteratedNoder)
