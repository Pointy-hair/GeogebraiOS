//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoLogNormalDF.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/statistics/AlgoLogNormalDF.h"
#include "geogebra/common/kernel/statistics/DistributionFunctionFactory.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelStatisticsAlgoLogNormalDF () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> mean_, sd_;
  id<GeogebraCommonKernelArithmeticBooleanValue> cumulative_;
  GeogebraCommonKernelGeosGeoFunction *ret_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoLogNormalDF, mean_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoLogNormalDF, sd_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoLogNormalDF, cumulative_, id<GeogebraCommonKernelArithmeticBooleanValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoLogNormalDF, ret_, GeogebraCommonKernelGeosGeoFunction *)

@implementation GeogebraCommonKernelStatisticsAlgoLogNormalDF

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)mean
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)sd
          withGeogebraCommonKernelArithmeticBooleanValue:(id<GeogebraCommonKernelArithmeticBooleanValue>)cumulative {
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self, cons, label, mean, sd, cumulative);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)mean
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)sd
          withGeogebraCommonKernelArithmeticBooleanValue:(id<GeogebraCommonKernelArithmeticBooleanValue>)cumulative {
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self, cons, mean, sd, cumulative);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_LogNormal();
}

- (void)setInputOutput {
  GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel_) autorelease];
  GeogebraCommonKernelGeosGeoFunction *dummyFun = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fv wrap])) buildFunctionWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:cumulative_ == nil ? 3 : 4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(mean_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(sd_)) toGeoElement]);
  IOSObjectArray_Set(input_, 2, dummyFun);
  if (cumulative_ != nil) {
    IOSObjectArray_Set(input_, 3, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(cumulative_, [GeogebraCommonKernelGeosGeoElement class]));
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:ret_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getResult {
  return ret_;
}

- (void)compute {
  GeogebraCommonKernelArithmeticFunctionVariable *fv = IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(ret_)) getFunctionVariables]), 0);
  GeogebraCommonKernelArithmeticExpressionNode *fvEn = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, fv) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *sdEn = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, sd_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fvEn ln])) subtractWithGeogebraCommonKernelArithmeticExpressionValue:mean_];
  if (cumulative_ != nil && [cumulative_ getBoolean]) {
    GeogebraCommonKernelArithmeticExpressionNode *sqrt2 = [([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0) autorelease]) sqrt];
    GeogebraCommonKernelArithmeticExpressionNode *div = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([sdEn abs])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:sqrt2];
    en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) divideWithGeogebraCommonKernelArithmeticExpressionValue:div])) erf])) multiplyWithDouble:0.5])) plusWithDouble:0.5];
  }
  else {
    GeogebraCommonKernelArithmeticExpressionNode *sqrt2pi = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(([((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, 2.0) autorelease]) multiplyWithDouble:JavaLangMath_PI]))) sqrt];
    GeogebraCommonKernelArithmeticExpressionNode *prod = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fvEn multiplyWithGeogebraCommonKernelArithmeticExpressionValue:sqrt2pi])) multiplyWithGeogebraCommonKernelArithmeticExpressionValue:[sdEn abs]];
    en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) square])) divideWithGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([sdEn square])) multiplyWithDouble:2]])) reverseSign])) exp])) divideWithGeogebraCommonKernelArithmeticExpressionValue:prod];
  }
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([ret_ getFunctionExpression])) setRightWithGeogebraCommonKernelArithmeticExpressionValue:en];
}

- (void)dealloc {
  RELEASE_(mean_);
  RELEASE_(sd_);
  RELEASE_(cumulative_);
  RELEASE_(ret_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticBooleanValue:", "AlgoLogNormalDF", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticBooleanValue:", "AlgoLogNormalDF", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "mean_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "sd_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "cumulative_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.BooleanValue;", NULL, NULL,  },
    { "ret_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoLogNormalDF = { 2, "AlgoLogNormalDF", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoLogNormalDF;
}

@end

void GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(GeogebraCommonKernelStatisticsAlgoLogNormalDF *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> mean, id<GeogebraCommonKernelArithmeticNumberValue> sd, id<GeogebraCommonKernelArithmeticBooleanValue> cumulative) {
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self, cons, mean, sd, cumulative);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->ret_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoLogNormalDF *new_GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> mean, id<GeogebraCommonKernelArithmeticNumberValue> sd, id<GeogebraCommonKernelArithmeticBooleanValue> cumulative) {
  GeogebraCommonKernelStatisticsAlgoLogNormalDF *self = [GeogebraCommonKernelStatisticsAlgoLogNormalDF alloc];
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self, cons, label, mean, sd, cumulative);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(GeogebraCommonKernelStatisticsAlgoLogNormalDF *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> mean, id<GeogebraCommonKernelArithmeticNumberValue> sd, id<GeogebraCommonKernelArithmeticBooleanValue> cumulative) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_set_mean_(self, mean);
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_set_sd_(self, sd);
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_set_cumulative_(self, cumulative);
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_set_ret_(self, GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenNegativeWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  [self compute];
}

GeogebraCommonKernelStatisticsAlgoLogNormalDF *new_GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelArithmeticNumberValue> mean, id<GeogebraCommonKernelArithmeticNumberValue> sd, id<GeogebraCommonKernelArithmeticBooleanValue> cumulative) {
  GeogebraCommonKernelStatisticsAlgoLogNormalDF *self = [GeogebraCommonKernelStatisticsAlgoLogNormalDF alloc];
  GeogebraCommonKernelStatisticsAlgoLogNormalDF_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticBooleanValue_(self, cons, mean, sd, cumulative);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoLogNormalDF)
