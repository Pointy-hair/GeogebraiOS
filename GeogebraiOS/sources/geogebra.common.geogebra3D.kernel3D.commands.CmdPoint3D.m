//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPointVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdPoint.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  {
    GeogebraCommonKernelGeosGeoElement *geo0;
    switch (n) {
      case 1:
      arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      geo0 = IOSObjectArray_Get(nil_chk(arg), 0);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) isGeoElement3D] || ([geo0 isGeoList] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo0, [GeogebraCommonKernelGeosGeoList class])) containsGeoElement3D])) {
        if ([geo0 isPath]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DWithNSString:[c getLabel] withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>) check_protocol_cast(geo0, @protocol(GeogebraCommonKernelPath)) withBoolean:NO], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        if ([geo0 isRegion]) {
          IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DInWithNSString:[c getLabel] withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelRegion)) withBoolean:NO], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret;
        }
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:geo0];
      }
    }
  }
  return [super processWithGeogebraCommonKernelArithmeticCommand:c];
}

- (GeogebraCommonKernelGeosGeoElement *)pointWithNSString:(NSString *)label
                             withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
               withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)value {
  if ([((id<GeogebraCommonKernelPath>) nil_chk(path)) isGeoElement3D] || ([((GeogebraCommonKernelGeosGeoElement *) check_class_cast(path, [GeogebraCommonKernelGeosGeoElement class])) isGeoList] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(path, [GeogebraCommonKernelGeosGeoList class])) containsGeoElement3D])) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) Point3DWithNSString:label withGeogebraCommonKernelPath:path withGeogebraCommonKernelArithmeticNumberValue:value], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super pointWithNSString:label withGeogebraCommonKernelPath:path withGeogebraCommonKernelGeosGeoNumberValue:value];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)pointWithNSString:(NSString *)label
                     withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                    withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vector {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(vector)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPointVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPointVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoVectorND_(cons_, label, point, vector) autorelease];
    return [algo getQ];
  }
  return [super pointWithNSString:label withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelKernelNDGeoVectorND:vector];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPoint3D", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "pointWithNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelGeosGeoNumberValue:", "point", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "pointWithNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:", "point", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D = { 2, "CmdPoint3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdPoint_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdPoint3D)
