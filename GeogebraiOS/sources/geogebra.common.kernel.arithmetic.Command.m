//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Command.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CASGenericInterface.h"
#include "geogebra/common/kernel/GeoGebraCasInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/ListValue.h"
#include "geogebra/common/kernel/arithmetic/MySpecialDouble.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/arithmetic/Variable.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

@interface GeogebraCommonKernelArithmeticCommand () {
 @public
  JavaUtilArrayList *args_;
  NSString *name_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonMainApp *app_;
  IOSObjectArray *evalGeos_;
  GeogebraCommonKernelMacro *macro_;
  jboolean allowEvaluationForTypeCheck_;
  JavaLangStringBuilder *sbToString_;
  IOSIntArray *outputSizes_;
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
                      withBoolean:(jboolean)LaTeX
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

+ (NSString *)toStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                            withBoolean:(jboolean)symbolic
                                                            withBoolean:(jboolean)LaTeX
                                 withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, args_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, name_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, evalGeos_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, macro_, GeogebraCommonKernelMacro *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, sbToString_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticCommand, outputSizes_, IOSIntArray *)

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticCommand *self, jboolean symbolic, jboolean LaTeX, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static NSString *GeogebraCommonKernelArithmeticCommand_toStringWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic, jboolean LaTeX, GeogebraCommonKernelStringTemplate *tpl);

@implementation GeogebraCommonKernelArithmeticCommand

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)name
                                       withBoolean:(jboolean)translateName {
  GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(self, kernel, name, translateName);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                      withNSString:(NSString *)name
                                       withBoolean:(jboolean)translateName
                                       withBoolean:(jboolean)allowEvaluationForTypeCheck {
  GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, allowEvaluationForTypeCheck);
  return self;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (void)addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)arg {
  [((JavaUtilArrayList *) nil_chk(args_)) addWithId:arg];
}

- (NSString *)getVariableNameWithInt:(jint)i {
  if (i >= [((JavaUtilArrayList *) nil_chk(args_)) size]) return nil;
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getLeft];
  if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticVariable class]]) return [((GeogebraCommonKernelArithmeticVariable *) nil_chk(((GeogebraCommonKernelArithmeticVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticVariable class])))) getNameWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoElement class]]) {
    GeogebraCommonKernelGeosGeoElement *geo = ((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class]));
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoElement class])))) getLabelSimple];
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunctionVariable class]]) {
    return [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(((GeogebraCommonKernelArithmeticFunctionVariable *) check_class_cast(ev, [GeogebraCommonKernelArithmeticFunctionVariable class])))) getSetVarString];
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticFunction class]]) {
    NSString *str = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (((jint) [((NSString *) nil_chk(str)) length]) == 1 && GeogebraCommonUtilStringUtil_isLetterWithChar_([str charAtWithInt:0])) return str;
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelGeosGeoVec2D class]]) {
    if ([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelGeosGeoVec2D *) check_class_cast(ev, [GeogebraCommonKernelGeosGeoVec2D class])))) isImaginaryUnit]) {
      return GeogebraCommonUtilUnicode_get_IMAGINARY_();
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticMySpecialDouble class]]) {
    if ([((GeogebraCommonKernelArithmeticMySpecialDouble *) nil_chk(((GeogebraCommonKernelArithmeticMySpecialDouble *) check_class_cast(ev, [GeogebraCommonKernelArithmeticMySpecialDouble class])))) isEulerConstant]) {
      return GeogebraCommonUtilUnicode_get_EULER_STRING_();
    }
  }
  return nil;
}

- (IOSObjectArray *)getArguments {
  return [((JavaUtilArrayList *) nil_chk(args_)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:GeogebraCommonKernelArithmeticExpressionNode_class_()]];
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getArgumentWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(args_)) getWithInt:i];
}

- (void)setArgumentWithInt:(jint)i
withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en {
  [((JavaUtilArrayList *) nil_chk(args_)) setWithInt:i withId:en];
}

- (jint)getArgumentNumber {
  return [((JavaUtilArrayList *) nil_chk(args_)) size];
}

- (NSString *)getName {
  return name_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(self, YES, NO, tpl);
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(self, NO, NO, tpl);
}

- (NSString *)toLaTeXStringWithBoolean:(jboolean)symbolic
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(self, symbolic, YES, tpl);
}

- (NSString *)toStringWithBoolean:(jboolean)symbolic
                      withBoolean:(jboolean)LaTeX
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(self, symbolic, LaTeX, tpl);
}

+ (NSString *)toStringWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                            withBoolean:(jboolean)symbolic
                                                            withBoolean:(jboolean)LaTeX
                                 withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelArithmeticCommand_toStringWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(ev, symbolic, LaTeX, tpl);
}

- (IOSObjectArray *)evaluateMultiple {
  IOSObjectArray *geos = nil;
  geos = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) processCommandWithGeogebraCommonKernelArithmeticCommand:self withBoolean:NO];
  return geos;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)evaluateWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (evalGeos_ == nil) GeogebraCommonKernelArithmeticCommand_set_evalGeos_(self, [self evaluateMultiple]);
  if (evalGeos_ != nil && evalGeos_->size_ >= 1) {
    return IOSObjectArray_Get(evalGeos_, 0);
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"invalid command evaluation: ", name_));
  @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk(app_)) getLocalization], JreStrcat("$$@", [((GeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getErrorWithNSString:@"InvalidInput"], @":\n", self)) autorelease];
}

- (void)resolveVariables {
  if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isResolveUnkownVarsAsDummyGeos]) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) resolveVariables];
    }
    allowEvaluationForTypeCheck_ = NO;
  }
}

- (jboolean)isConstant {
  if (evalGeos_ == nil) GeogebraCommonKernelArithmeticCommand_set_evalGeos_(self, [self evaluateMultiple]);
  if (evalGeos_ == nil || evalGeos_->size_ == 0) @throw [new_GeogebraCommonMainMyError_initWithGeogebraCommonMainLocalization_withNSString_([((GeogebraCommonMainApp *) nil_chk(app_)) getLocalization], JreStrcat("$$@", [((GeogebraCommonMainLocalization *) nil_chk([app_ getLocalization])) getErrorWithNSString:@"InvalidInput"], @":\n", self)) autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(evalGeos_))->size_; i++) if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(evalGeos_, i))) isConstant]) return NO;
  return YES;
}

- (jboolean)isLeaf {
  return YES;
}

- (jboolean)isNumberValue {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isNumberValue];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) isNumberValue];
    @throw ex;
  }
}

- (jboolean)evaluatesToNonComplex2DVector {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:[self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToNonComplex2DVector];
    @throw ex;
  }
}

- (jboolean)evaluatesToVectorNotPoint {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:[self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToNonComplex2DVector];
    @throw ex;
  }
}

- (jboolean)evaluatesToText {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getInternalCommandWithNSString:name_] == nil && [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getMacroWithNSString:name_] == nil) {
    return NO;
  }
  @try {
    return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) evaluatesToText];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([ev unwrap])) evaluatesToText];
    @throw ex;
  }
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  GeogebraCommonKernelArithmeticCommand *c = [new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(kernel1, name_, NO) autorelease];
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    [c addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getCopyWithGeogebraCommonKernelKernel:kernel1]];
  }
  return c;
}

- (void)replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (JavaUtilHashSet *)getVariables {
  JavaUtilHashSet *set = [new_JavaUtilHashSet_init() autorelease];
  jint size = [((JavaUtilArrayList *) nil_chk(args_)) size];
  for (jint i = 0; i < size; i++) {
    id<JavaUtilSet> s = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) getVariables];
    if (s != nil) [set addAllWithJavaUtilCollection:s];
  }
  return set;
}

- (jboolean)containsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return ev == self;
}

- (jboolean)evaluatesToList {
  if ([@"x" isEqual:[self getName]] || [@"y" isEqual:[self getName]] || [@"z" isEqual:[self getName]] || [@"If" isEqual:[self getName]]) {
    return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) evaluatesToList];
  }
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [GeogebraCommonKernelArithmeticListValue_class_() isInstance:[self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [GeogebraCommonKernelArithmeticListValue_class_() isInstance:[ev unwrap]];
    @throw ex;
  }
}

- (GeogebraCommonKernelMacro *)getMacro {
  return macro_;
}

- (void)setMacroWithGeogebraCommonKernelMacro:(GeogebraCommonKernelMacro *)macro {
  GeogebraCommonKernelArithmeticCommand_set_macro_(self, macro);
}

- (jboolean)evaluatesTo3DVector {
  if (!allowEvaluationForTypeCheck_) {
    return NO;
  }
  @try {
    return [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:[self evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  @catch (GeogebraCommonMainMyError *ex) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((id<GeogebraCommonKernelCASGenericInterface>) nil_chk([((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS])) getCurrentCAS])) evaluateToExpressionWithGeogebraCommonKernelArithmeticValidExpression:self withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelKernel:kernel_];
    if (ev != nil) return [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:[ev unwrap]];
    @throw ex;
  }
}

- (jboolean)isTopLevelCommand {
  return YES;
}

- (GeogebraCommonKernelArithmeticCommand *)getTopLevelCommand {
  return self;
}

- (NSString *)toOutputValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)traverseWithGeogebraCommonKernelArithmeticTraversing:(id<GeogebraCommonKernelArithmeticTraversing>)t {
  id<GeogebraCommonKernelArithmeticExpressionValue> v = [((id<GeogebraCommonKernelArithmeticTraversing>) nil_chk(t)) processWithGeogebraCommonKernelArithmeticExpressionValue:self];
  if (v != self) return v;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
    GeogebraCommonKernelArithmeticExpressionNode *en = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) traverseWithGeogebraCommonKernelArithmeticTraversing:t])) wrap];
    [args_ setWithInt:i withId:en];
  }
  return self;
}

- (jboolean)inspectWithGeogebraCommonKernelArithmeticInspecting:(id<GeogebraCommonKernelArithmeticInspecting>)t {
  if ([((id<GeogebraCommonKernelArithmeticInspecting>) nil_chk(t)) checkWithGeogebraCommonKernelArithmeticExpressionValue:self]) return YES;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(args_)) size]; i++) {
    if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([args_ getWithInt:i])) inspectWithGeogebraCommonKernelArithmeticInspecting:t]) return YES;
  }
  return NO;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)getItemWithInt:(jint)i {
  return [((JavaUtilArrayList *) nil_chk(args_)) getWithInt:i];
}

- (jboolean)hasCoords {
  if ([@"x" isEqual:name_] || [@"y" isEqual:name_] || [@"z" isEqual:name_]) return NO;
  return YES;
}

- (void)setOutputSizesWithIntArray:(IOSIntArray *)sizes {
  GeogebraCommonKernelArithmeticCommand_set_outputSizes_(self, sizes);
}

- (IOSIntArray *)getOutputSizes {
  return outputSizes_;
}

- (jint)getLength {
  return [self getArgumentNumber];
}

- (jint)replaceVariablesWithNSString:(NSString *)varName
withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  jint replacements = 0;
  for (GeogebraCommonKernelArithmeticExpressionNode * __strong arg in nil_chk(args_)) {
    replacements += [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(arg)) replaceVariablesWithNSString:varName withGeogebraCommonKernelArithmeticFunctionVariable:fVar];
  }
  return replacements;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)wrap {
  return [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, self) autorelease];
}

- (void)dealloc {
  RELEASE_(args_);
  RELEASE_(name_);
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(evalGeos_);
  RELEASE_(macro_);
  RELEASE_(sbToString_);
  RELEASE_(outputSizes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withNSString:withBoolean:", "Command", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:withNSString:withBoolean:withBoolean:", "Command", NULL, 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "addArgumentWithGeogebraCommonKernelArithmeticExpressionNode:", "addArgument", "V", 0x1, NULL, NULL },
    { "getVariableNameWithInt:", "getVariableName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getArguments", NULL, "[Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "getArgumentWithInt:", "getArgument", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "setArgumentWithInt:withGeogebraCommonKernelArithmeticExpressionNode:", "setArgument", "V", 0x1, NULL, NULL },
    { "getArgumentNumber", NULL, "I", 0x1, NULL, NULL },
    { "getName", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toLaTeXStringWithBoolean:withGeogebraCommonKernelStringTemplate:", "toLaTeXString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "toStringWithBoolean:withBoolean:withGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x2, NULL, NULL },
    { "toStringWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withBoolean:withGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "evaluateMultiple", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "evaluateWithGeogebraCommonKernelStringTemplate:", "evaluate", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "resolveVariables", NULL, "V", 0x1, NULL, NULL },
    { "isConstant", NULL, "Z", 0x1, NULL, NULL },
    { "isLeaf", NULL, "Z", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToNonComplex2DVector", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToVectorNotPoint", NULL, "Z", 0x1, NULL, NULL },
    { "evaluatesToText", NULL, "Z", 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "replaceChildrenByValuesWithGeogebraCommonKernelGeosGeoElement:", "replaceChildrenByValues", "V", 0x1, NULL, NULL },
    { "getVariables", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "containsWithGeogebraCommonKernelArithmeticExpressionValue:", "contains", "Z", 0x11, NULL, NULL },
    { "evaluatesToList", NULL, "Z", 0x1, NULL, NULL },
    { "getMacro", NULL, "Lgeogebra.common.kernel.Macro;", 0x11, NULL, NULL },
    { "setMacroWithGeogebraCommonKernelMacro:", "setMacro", "V", 0x11, NULL, NULL },
    { "evaluatesTo3DVector", NULL, "Z", 0x11, NULL, NULL },
    { "isTopLevelCommand", NULL, "Z", 0x1, NULL, NULL },
    { "getTopLevelCommand", NULL, "Lgeogebra.common.kernel.arithmetic.Command;", 0x1, NULL, NULL },
    { "toOutputValueStringWithGeogebraCommonKernelStringTemplate:", "toOutputValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "traverseWithGeogebraCommonKernelArithmeticTraversing:", "traverse", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "inspectWithGeogebraCommonKernelArithmeticInspecting:", "inspect", "Z", 0x1, NULL, NULL },
    { "getItemWithInt:", "getItem", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
    { "setOutputSizesWithIntArray:", "setOutputSizes", "V", 0x1, NULL, NULL },
    { "getOutputSizes", NULL, "[I", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "replaceVariablesWithNSString:withGeogebraCommonKernelArithmeticFunctionVariable:", "replaceVariables", "I", 0x1, NULL, NULL },
    { "wrap", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "args_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/arithmetic/ExpressionNode;>;",  },
    { "name_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "evalGeos_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "macro_", NULL, 0x2, "Lgeogebra.common.kernel.Macro;", NULL, NULL,  },
    { "allowEvaluationForTypeCheck_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "outputSizes_", NULL, 0x2, "[I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticCommand = { 2, "Command", "geogebra.common.kernel.arithmetic", NULL, 0x1, 44, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticCommand;
}

@end

void GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(GeogebraCommonKernelArithmeticCommand *self, GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) {
  GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, YES);
}

GeogebraCommonKernelArithmeticCommand *new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName) {
  GeogebraCommonKernelArithmeticCommand *self = [GeogebraCommonKernelArithmeticCommand alloc];
  GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_(self, kernel, name, translateName);
  return self;
}

void GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticCommand *self, GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) {
  GeogebraCommonKernelArithmeticValidExpression_init(self);
  GeogebraCommonKernelArithmeticCommand_setAndConsume_args_(self, new_JavaUtilArrayList_init());
  self->allowEvaluationForTypeCheck_ = YES;
  GeogebraCommonKernelArithmeticCommand_set_kernel_(self, kernel);
  GeogebraCommonKernelArithmeticCommand_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication]);
  self->allowEvaluationForTypeCheck_ = allowEvaluationForTypeCheck;
  if (translateName && ![kernel isUsingInternalCommandNames]) {
    GeogebraCommonKernelArithmeticCommand_set_name_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getReverseCommandWithNSString:name]);
    if (self->name_ == nil) GeogebraCommonKernelArithmeticCommand_set_name_(self, name);
  }
  else {
    GeogebraCommonKernelArithmeticCommand_set_name_(self, name);
  }
}

GeogebraCommonKernelArithmeticCommand *new_GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelKernel *kernel, NSString *name, jboolean translateName, jboolean allowEvaluationForTypeCheck) {
  GeogebraCommonKernelArithmeticCommand *self = [GeogebraCommonKernelArithmeticCommand alloc];
  GeogebraCommonKernelArithmeticCommand_initWithGeogebraCommonKernelKernel_withNSString_withBoolean_withBoolean_(self, kernel, name, translateName, allowEvaluationForTypeCheck);
  return self;
}

NSString *GeogebraCommonKernelArithmeticCommand_toStringWithBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelArithmeticCommand *self, jboolean symbolic, jboolean LaTeX, GeogebraCommonKernelStringTemplate *tpl) {
  {
    jint size;
    switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_GIAC:
      return [((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk(([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getGeoGebraCAS]))) getCASCommandWithNSString:self->name_ withJavaUtilArrayList:self->args_ withBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl];
      case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
      if (self->sbToString_ == nil) GeogebraCommonKernelArithmeticCommand_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_init());
      [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
      if ([((NSString *) nil_chk(self->name_)) isEqual:@"Integral"]) {
        [self->sbToString_ appendWithNSString:@"\\int"];
        id<JavaUtilSet> vars = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) getVariables];
        NSString *var = @"x";
        if (vars != nil && ![vars isEmpty]) var = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<JavaUtilIterator>) nil_chk([vars iterator])) next])) toStringWithGeogebraCommonKernelStringTemplate:tpl];
        switch ([self getArgumentNumber]) {
          case 1:
          [self->sbToString_ appendWithNSString:@" "];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 2:
          [self->sbToString_ appendWithNSString:@" "];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          var = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:tpl];
          break;
          case 3:
          [self->sbToString_ appendWithNSString:@"\\limits_{"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          [self->sbToString_ appendWithNSString:@"}^{"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:2])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          [self->sbToString_ appendWithNSString:@"}"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          break;
          case 4:
          [self->sbToString_ appendWithNSString:@"\\limits_{"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:2])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          [self->sbToString_ appendWithNSString:@"}^{"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:3])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          [self->sbToString_ appendWithNSString:@"}"];
          [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
          var = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:tpl];
          break;
          default:
          break;
        }
        [self->sbToString_ appendWithNSString:@"\\,\\mathrm{d}"];
        [self->sbToString_ appendWithNSString:var];
        return [self->sbToString_ description];
      }
      else if ([self->name_ isEqual:@"Sum"] && [self getArgumentNumber] == 4) {
        [self->sbToString_ appendWithNSString:@"\\sum_{"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((JavaUtilArrayList *) nil_chk(self->args_)) getWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"="];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:2])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"}^{"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:3])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"}"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        return [self->sbToString_ description];
      }
      else if ([self->name_ isEqual:@"Product"] && [self getArgumentNumber] == 4) {
        [self->sbToString_ appendWithNSString:@"\\prod_{"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((JavaUtilArrayList *) nil_chk(self->args_)) getWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"="];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:2])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"}^{"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:3])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        [self->sbToString_ appendWithNSString:@"}"];
        [self->sbToString_ appendWithNSString:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self->args_ getWithInt:0])) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
        return [self->sbToString_ description];
      }
      default:
      if (self->sbToString_ == nil) GeogebraCommonKernelArithmeticCommand_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_init());
      [((JavaLangStringBuilder *) nil_chk(self->sbToString_)) setLengthWithInt:0];
      if ([tpl isPrintLocalizedCommandNames]) {
        [self->sbToString_ appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getLocalization])) getCommandWithNSString:self->name_]];
      }
      else {
        [self->sbToString_ appendWithNSString:self->name_];
      }
      if (LaTeX) {
        [self->sbToString_ appendWithNSString:@" \\left"];
      }
      [self->sbToString_ appendWithChar:'['];
      size = [((JavaUtilArrayList *) nil_chk(self->args_)) size];
      for (jint i = 0; i < size; i++) {
        [self->sbToString_ appendWithNSString:GeogebraCommonKernelArithmeticCommand_toStringWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_([self->args_ getWithInt:i], symbolic, LaTeX, tpl)];
        [self->sbToString_ appendWithChar:','];
      }
      if (size > 0) [self->sbToString_ deleteCharAtWithInt:[self->sbToString_ length] - 1];
      if (LaTeX) {
        [self->sbToString_ appendWithNSString:@" \\right"];
      }
      [self->sbToString_ appendWithChar:']'];
      return [self->sbToString_ description];
    }
  }
}

NSString *GeogebraCommonKernelArithmeticCommand_toStringWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_withBoolean_withGeogebraCommonKernelStringTemplate_(id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic, jboolean LaTeX, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonKernelArithmeticCommand_initialize();
  if (LaTeX) {
    return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toLaTeXStringWithBoolean:symbolic withGeogebraCommonKernelStringTemplate:tpl];
  }
  return symbolic ? [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toStringWithGeogebraCommonKernelStringTemplate:tpl] : [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) toValueStringWithGeogebraCommonKernelStringTemplate:tpl];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticCommand)
