//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentNumber.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Throwable.h"

@interface GeogebraCommonKernelAlgosAlgoDependentNumber () {
 @public
  GeogebraCommonKernelArithmeticExpressionNode *root_;
  GeogebraCommonKernelGeosGeoNumeric *number_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentNumber, root_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentNumber, number_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentNumber_compute(GeogebraCommonKernelAlgosAlgoDependentNumber *self);

@implementation GeogebraCommonKernelAlgosAlgoDependentNumber

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                             withBoolean:(jboolean)isAngle {
  GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, cons, label, root, isAngle);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
        withGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)root
                                             withBoolean:(jboolean)isAngle {
  GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, cons, root, isAngle);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) getGeoElementVariables]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:number_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getNumber {
  return number_;
}

- (GeogebraCommonKernelArithmeticExpressionNode *)getExpression {
  return root_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentNumber_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root_)) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(number_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "AlgoDependentNumber", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticExpressionNode:withBoolean:", "AlgoDependentNumber", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getExpression", NULL, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentNumber = { 2, "AlgoDependentNumber", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentNumber;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelAlgosAlgoDependentNumber *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, cons, root, isAngle);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->number_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentNumber *new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  GeogebraCommonKernelAlgosAlgoDependentNumber *self = [GeogebraCommonKernelAlgosAlgoDependentNumber alloc];
  GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, cons, label, root, isAngle);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelAlgosAlgoDependentNumber *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentNumber_set_root_(self, root);
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(root)) simplifyConstantIntegers];
  if (isAngle) {
    GeogebraCommonKernelAlgosAlgoDependentNumber_setAndConsume_number_(self, new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(cons));
    if (![((GeogebraCommonKernelConstruction *) nil_chk(cons)) isFileLoading] || [cons isAllowUnboundedAngles]) {
      [((GeogebraCommonKernelGeosGeoAngle *) check_class_cast(self->number_, [GeogebraCommonKernelGeosGeoAngle class])) setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()];
    }
  }
  else {
    GeogebraCommonKernelAlgosAlgoDependentNumber_setAndConsume_number_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  }
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentNumber_compute(self);
}

GeogebraCommonKernelAlgosAlgoDependentNumber *new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticExpressionNode *root, jboolean isAngle) {
  GeogebraCommonKernelAlgosAlgoDependentNumber *self = [GeogebraCommonKernelAlgosAlgoDependentNumber alloc];
  GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self, cons, root, isAngle);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentNumber_compute(GeogebraCommonKernelAlgosAlgoDependentNumber *self) {
  @try {
    id<GeogebraCommonKernelArithmeticNumberValue> nv = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->root_)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticNumberValue));
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->number_)) setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(nv)) getDouble]];
  }
  @catch (JavaLangThrowable *e) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->number_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentNumber)
