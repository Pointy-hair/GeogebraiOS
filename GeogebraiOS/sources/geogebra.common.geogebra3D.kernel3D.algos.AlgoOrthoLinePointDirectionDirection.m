//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointDirectionDirection.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoOrthoLinePointDirectionDirection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  id<GeogebraCommonKernelKernelNDGeoDirectionND> direction1_, direction2_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *line_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection, direction1_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection, direction2_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection, line_, GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction1
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction2 {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, direction1, direction2);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *)getLine {
  return line_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalLine();
}

- (void)compute {
  GeogebraCommonKernelMatrixCoords *direction = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction1_)) getDirectionInD3])) crossProductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction2_)) getDirectionInD3]];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(direction)) isZero]) [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line_)) setUndefined];
  else [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(line_)) setCoordWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:direction];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:direction1_]) return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAParallelToBPerpendicularToC" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction1_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction2_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:direction2_]) return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToBParallelToC" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction1_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction2_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"LineThroughAPerpendicularToBAndC" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction1_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction2_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(point_);
  RELEASE_(direction1_);
  RELEASE_(direction2_);
  RELEASE_(line_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoOrthoLinePointDirectionDirection", NULL, 0x1, NULL, NULL },
    { "getLine", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "direction1_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "direction2_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "line_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLine3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection = { 2, "AlgoOrthoLinePointDirectionDirection", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction1, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_set_point_(self, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_set_direction1_(self, direction1);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_set_direction2_(self, direction2);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_setAndConsume_line_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction1, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction2, [GeogebraCommonKernelGeosGeoElement class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getLine] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk([self getLine])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> point, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction1, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction2) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, point, direction1, direction2);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoOrthoLinePointDirectionDirection)
