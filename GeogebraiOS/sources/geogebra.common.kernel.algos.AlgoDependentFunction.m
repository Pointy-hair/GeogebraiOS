//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentFunction.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Functional.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonKernelAlgosAlgoDependentFunction () {
 @public
  GeogebraCommonKernelArithmeticFunction *expandedFun_;
  GeogebraCommonKernelArithmeticExpressionNode *expression_;
  jboolean expContainsFunctions_;
  JavaUtilHashSet *unconditionalInput_;
  JavaLangStringBuilder *sb_;
}

- (jboolean)inputDefined;

+ (NSString *)getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunction, expandedFun_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunction, expression_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunction, unconditionalInput_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunction, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentFunction_compute(GeogebraCommonKernelAlgosAlgoDependentFunction *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(GeogebraCommonKernelAlgosAlgoDependentFunction *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *fun);

@implementation GeogebraCommonKernelAlgosAlgoDependentFunction

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self, cons, label, fun);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) getGeoElementVariables]);
  GeogebraCommonKernelAlgosAlgoDependentFunction_set_unconditionalInput_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun_ getFunctionExpression])) getUnconditionalVars]);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:f_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFunction {
  return f_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentFunction_compute(self);
}

- (jboolean)inputDefined {
  return GeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(self);
}

+ (id<GeogebraCommonKernelArithmeticExpressionValue>)expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

+ (jboolean)containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev {
  return GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_(ev);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) GeogebraCommonKernelAlgosAlgoDependentFunction_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f_)) isLabelSet] && ![((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isHideLHS] && (![f_ isBooleanFunction] || [tpl hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()])) {
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[f_ getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@"("];
    [sb_ appendWithNSString:[f_ getVarStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@") = "];
  }
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sb_ description];
}

+ (NSString *)getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun {
  return GeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction_(fun);
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(f_);
  RELEASE_(expandedFun_);
  RELEASE_(expression_);
  RELEASE_(unconditionalInput_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunction:", "AlgoDependentFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunction:", "AlgoDependentFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoDependentFunction", NULL, 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "inputDefined", NULL, "Z", 0x2, NULL, NULL },
    { "expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue:", "expandFunctionDerivativeNodes", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x9, NULL, NULL },
    { "containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue:", "containsFunctions", "Z", 0x9, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction:", "getDerivativeLabel", "Ljava.lang.String;", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "f_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "expandedFun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "expression_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "expContainsFunctions_", NULL, 0x2, "Z", NULL, NULL,  },
    { "unconditionalInput_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentFunction = { 2, "AlgoDependentFunction", "geogebra.common.kernel.algos", NULL, 0x1, 12, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentFunction;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelAlgosAlgoDependentFunction *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  NSString *derivativeLabel = nil;
  if (label == nil) {
    derivativeLabel = GeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction_(fun);
  }
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) setLabelWithNSString:derivativeLabel != nil ? derivativeLabel : label];
}

GeogebraCommonKernelAlgosAlgoDependentFunction *new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunction *self = [GeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunction_(self, cons, label, fun);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelAlgosAlgoDependentFunction *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentFunction_set_fun_(self, fun);
  GeogebraCommonKernelAlgosAlgoDependentFunction_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self->f_ setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
  [self->f_ initFunction];
  GeogebraCommonKernelAlgosAlgoDependentFunction_set_expression_(self, [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getExpression]);
  self->expContainsFunctions_ = GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_(self->expression_);
  if (self->expContainsFunctions_) {
    GeogebraCommonKernelAlgosAlgoDependentFunction_setAndConsume_expandedFun_(self, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(fun, self->kernel_));
  }
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentFunction_compute(self);
}

GeogebraCommonKernelAlgosAlgoDependentFunction *new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunction *self = [GeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(self, cons, fun);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoDependentFunction *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
}

GeogebraCommonKernelAlgosAlgoDependentFunction *new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoDependentFunction *self = [GeogebraCommonKernelAlgosAlgoDependentFunction alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunction_compute(GeogebraCommonKernelAlgosAlgoDependentFunction *self) {
  jboolean isDefined = GeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(self);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->f_)) setDefinedWithBoolean:isDefined];
  if (isDefined && self->expContainsFunctions_) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = nil;
    @try {
      ev = GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) deepCopyWithGeogebraCommonKernelKernel:self->kernel_]);
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      GeogebraCommonMainApp_debugWithNSString_(@"derivative failed");
    }
    if (ev == nil) {
      [self->f_ setUndefined];
      return;
    }
    GeogebraCommonKernelArithmeticExpressionNode *node;
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    else node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev) autorelease];
    [((GeogebraCommonKernelArithmeticFunction *) nil_chk(self->expandedFun_)) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:node];
    [self->f_ setFunctionWithGeogebraCommonKernelArithmeticFunction:self->expandedFun_];
    if ([self->f_ isBooleanFunction] && [self->f_ isLabelSet]) [self->f_ resetIneqs];
  }
  else if ([self->f_ isBooleanFunction]) [((GeogebraCommonKernelArithmeticFunction *) nil_chk([self->f_ getFunction])) updateIneqs];
}

jboolean GeogebraCommonKernelAlgosAlgoDependentFunction_inputDefined(GeogebraCommonKernelAlgosAlgoDependentFunction *self) {
  if (self->unconditionalInput_ == nil) {
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isDefined]) {
        return NO;
      }
    }
    return YES;
  }
  id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(self->unconditionalInput_)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([it next])) isDefined]) {
      return NO;
    }
  }
  return YES;
}

id<GeogebraCommonKernelArithmeticExpressionValue> GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  if (ev != nil && [ev isExpressionNode]) {
    GeogebraCommonKernelArithmeticExpressionNode *node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    id<GeogebraCommonKernelArithmeticExpressionValue> leftValue = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getLeft])) unwrap];
    {
      GeogebraCommonKernelArithmeticFunction *fun;
      GeogebraCommonKernelArithmeticFunctionVariable *x;
      GeogebraCommonKernelArithmeticExpressionNode *funcExpression;
      GeogebraCommonKernelArithmeticFunctionNVar *funN;
      IOSObjectArray *xy;
      GeogebraCommonKernelArithmeticExpressionNode *funNExpression;
      jint order;
      switch ([[node getOperation] ordinal]) {
        case GeogebraCommonPluginOperation_FUNCTION:
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) {
          leftValue = GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_(leftValue);
          [node setLeftWithGeogebraCommonKernelArithmeticExpressionValue:leftValue];
          if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) return node;
        }
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isGeoElement] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(leftValue, [GeogebraCommonKernelGeosGeoElement class])) isGeoFunctionConditional]) return node;
        fun = [((id<GeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(leftValue, @protocol(GeogebraCommonKernelArithmeticFunctional))) getFunction];
        x = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getFunctionVariable];
        funcExpression = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) getCopyWithGeogebraCommonKernelKernel:[fun getKernel]];
        return [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(funcExpression)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:x withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([node getRight])])) wrap];
        case GeogebraCommonPluginOperation_FUNCTION_NVAR:
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) {
          leftValue = GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_(leftValue);
          [node setLeftWithGeogebraCommonKernelArithmeticExpressionValue:leftValue];
          if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isExpressionNode]) return node;
        }
        funN = [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(leftValue, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))))) getFunction];
        xy = [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(funN)) getFunctionVariables];
        funNExpression = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([funN getExpression])) getCopyWithGeogebraCommonKernelKernel:[funN getKernel]];
        if (!([[node getRight] isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]])) return ev;
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(xy))->size_; i++) funNExpression = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(funNExpression)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(xy, i) withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast([node getRight], [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])])) wrap];
        return (funNExpression);
        case GeogebraCommonPluginOperation_DERIVATIVE:
        if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(leftValue)) isGeoElement] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(leftValue, [GeogebraCommonKernelGeosGeoElement class])) isGeoFunctionConditional]) {
          return node;
        }
        order = (jint) JavaLangMath_roundWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([node getRight], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
        if ([leftValue isExpressionNode] && ([((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_$VAR_COL() || [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_$VAR_ROW() || [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [GeogebraCommonKernelArithmeticExpressionNode class])) getOperation] == GeogebraCommonPluginOperationEnum_get_$VAR_ROW_COL())) leftValue = [((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(leftValue, [GeogebraCommonKernelArithmeticExpressionNode class])) getLeft];
        return [((id<GeogebraCommonKernelArithmeticFunctional>) nil_chk(((id<GeogebraCommonKernelArithmeticFunctional>) check_protocol_cast(leftValue, @protocol(GeogebraCommonKernelArithmeticFunctional))))) getGeoDerivativeWithInt:order];
        case GeogebraCommonPluginOperation_$VAR_ROW:
        case GeogebraCommonPluginOperation_$VAR_COL:
        case GeogebraCommonPluginOperation_$VAR_ROW_COL:
        return leftValue;
        default:
        [node setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_(leftValue)];
        [node setRightWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([node getRight])];
        return node;
      }
    }
  }
  else if ([ev isKindOfClass:[GeogebraCommonKernelArithmeticMyNumberPair class]]) {
    [((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [GeogebraCommonKernelArithmeticMyNumberPair class])))) setXWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [GeogebraCommonKernelArithmeticMyNumberPair class])))) getX])];
    [((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [GeogebraCommonKernelArithmeticMyNumberPair class])))) setYWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(ev, [GeogebraCommonKernelArithmeticMyNumberPair class])))) getY])];
  }
  return ev;
}

jboolean GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_(id<GeogebraCommonKernelArithmeticExpressionValue> ev) {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  if (ev != nil && [ev isExpressionNode]) {
    GeogebraCommonKernelArithmeticExpressionNode *node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    GeogebraCommonPluginOperationEnum *op = [node getOperation];
    if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:GeogebraCommonPluginOperationEnum_get_FUNCTION_NVAR()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_FUNCTION()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_DERIVATIVE()]) {
      return YES;
    }
    return GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_([node getLeft]) || GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_([node getRight]);
  }
  return NO;
}

NSString *GeogebraCommonKernelAlgosAlgoDependentFunction_getDerivativeLabelWithGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunction_initialize();
  id<GeogebraCommonKernelArithmeticExpressionValue> ev = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) getExpression])) getLeft];
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    GeogebraCommonKernelArithmeticExpressionNode *enL = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fun getExpression])) getLeft]), [GeogebraCommonKernelArithmeticExpressionNode class]);
    if ([((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(enL)) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_DERIVATIVE()]) {
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([enL getLeft])) isGeoElement]) {
        GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([enL getLeft], [GeogebraCommonKernelGeosGeoElement class]);
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLabelSet]) {
          id<GeogebraCommonKernelArithmeticExpressionValue> evR = ([enL getRight]);
          if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:evR]) {
            id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(evR, @protocol(GeogebraCommonKernelArithmeticNumberValue));
            jdouble val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
            if (val > 0.0 && GeogebraCommonKernelKernel_isIntegerWithDouble_(val)) {
              return JreStrcat("$$", [geo getLabelSimple], GeogebraCommonUtilStringUtil_stringWithNSString_withInt_(@"'", J2ObjCFpToInt(val)));
            }
          }
        }
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentFunction)
