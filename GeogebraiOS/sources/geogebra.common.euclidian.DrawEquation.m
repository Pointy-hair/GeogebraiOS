//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/DrawEquation.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/euclidian/DrawEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonEuclidianDrawEquation ()

+ (GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)checkStringTypeWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelStringTemplate *tpl);

@implementation GeogebraCommonEuclidianDrawEquation

+ (GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *)checkStringTypeWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
}

+ (void)appendFormulaStartWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
             withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendFormulaStartWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendFractionStartWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
              withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendFractionStartWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendFractionMiddleWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
               withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendFractionMiddleWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendFractionEndWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendFractionEndWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendInfinityWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendMinusInfinityWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
              withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendMinusInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendNegationWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
         withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonEuclidianDrawEquation_appendNegationWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(sb, tpl);
}

+ (void)appendNumberWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
       withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                 withNSString:(NSString *)num {
  GeogebraCommonEuclidianDrawEquation_appendNumberWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_withNSString_(sb, tpl, num);
}

- (void)setUseJavaFontsForLaTeXWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                             withBoolean:(jboolean)b {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonAwtGDimension *)drawEquationWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                      withGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                                               withInt:(jint)x
                                                               withInt:(jint)y
                                                          withNSString:(NSString *)text
                                            withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font
                                                           withBoolean:(jboolean)serif
                                           withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)fgColor
                                           withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor
                                                           withBoolean:(jboolean)useCache
                                                           withBoolean:(jboolean)updateAgain {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)init {
  GeogebraCommonEuclidianDrawEquation_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkStringTypeWithGeogebraCommonKernelStringTemplate:", "checkStringType", "Lgeogebra.common.kernel.arithmetic.ExpressionNodeConstants$StringType;", 0xa, NULL, NULL },
    { "appendFormulaStartWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendFormulaStart", "V", 0x9, NULL, NULL },
    { "appendFractionStartWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendFractionStart", "V", 0x9, NULL, NULL },
    { "appendFractionMiddleWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendFractionMiddle", "V", 0x9, NULL, NULL },
    { "appendFractionEndWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendFractionEnd", "V", 0x9, NULL, NULL },
    { "appendInfinityWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendInfinity", "V", 0x9, NULL, NULL },
    { "appendMinusInfinityWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendMinusInfinity", "V", 0x9, NULL, NULL },
    { "appendNegationWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "appendNegation", "V", 0x9, NULL, NULL },
    { "appendNumberWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:withNSString:", "appendNumber", "V", 0x9, NULL, NULL },
    { "setUseJavaFontsForLaTeXWithGeogebraCommonMainApp:withBoolean:", "setUseJavaFontsForLaTeX", "V", 0x401, NULL, NULL },
    { "drawEquationWithGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonAwtGGraphics2D:withInt:withInt:withNSString:withGeogebraCommonAwtGFont:withBoolean:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:withBoolean:withBoolean:", "drawEquation", "Lgeogebra.common.awt.GDimension;", 0x401, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawEquation = { 2, "DrawEquation", "geogebra.common.euclidian", NULL, 0x401, 12, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawEquation;
}

@end

GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  switch ([[((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType] ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX();
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML();
    default:
    return GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX();
  }
}

void GeogebraCommonEuclidianDrawEquation_appendFormulaStartWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<apply>"];
    break;
  }
}

void GeogebraCommonEuclidianDrawEquation_appendFractionStartWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\frac{ "];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<divide/><cn>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"("];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendFractionMiddleWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" }{ "];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"</cn><cn>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@")/("];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendFractionEndWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" } "];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"</cn></apply>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@")"];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" \\infty "];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<infinity/>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:GeogebraCommonUtilUnicode_Infinity];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendMinusInfinityWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_LATEX:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@" - \\infty "];
    break;
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<apply><minus/><infinity/></apply>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'-'];
    [sb appendWithChar:GeogebraCommonUtilUnicode_Infinity];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendNegationWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<minus/>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"-"];
  }
}

void GeogebraCommonEuclidianDrawEquation_appendNumberWithJavaLangStringBuilder_withGeogebraCommonKernelStringTemplate_withNSString_(JavaLangStringBuilder *sb, GeogebraCommonKernelStringTemplate *tpl, NSString *num) {
  GeogebraCommonEuclidianDrawEquation_initialize();
  GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *stringType = GeogebraCommonEuclidianDrawEquation_checkStringTypeWithGeogebraCommonKernelStringTemplate_(tpl);
  switch ([stringType ordinal]) {
    case GeogebraCommonKernelArithmeticExpressionNodeConstants_StringType_MATHML:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<cn>"];
    [sb appendWithNSString:num];
    [sb appendWithNSString:@"</cn>"];
    break;
    default:
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:num];
  }
}

void GeogebraCommonEuclidianDrawEquation_init(GeogebraCommonEuclidianDrawEquation *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawEquation)
