//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSlope.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSlope.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/DrawInformationAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoSlope () {
 @public
  GeogebraCommonKernelGeosGeoLine *g_;
  GeogebraCommonKernelGeosGeoNumeric *slope_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSlope, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSlope, slope_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSlope_compute(GeogebraCommonKernelAlgosAlgoSlope *self);

@implementation GeogebraCommonKernelAlgosAlgoSlope

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelGeosGeoLine_(self, g);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Slope();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_SLOPE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, g_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:slope_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getSlope {
  return slope_;
}

- (GeogebraCommonKernelGeosGeoLine *)getg {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSlope_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"SlopeOfA" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (id<GeogebraCommonKernelAlgosDrawInformationAlgo>)copy__ {
  return [new_GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelGeosGeoLine_([((GeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) copy__]) autorelease];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(slope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoLine:", "AlgoSlope", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelGeosGeoLine:", "AlgoSlope", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSlope", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.algos.DrawInformationAlgo;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "slope_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSlope = { 2, "AlgoSlope", "geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSlope;
}

@end

void GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoSlope *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoSlope_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoSlope_setAndConsume_slope_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSlope_compute(self);
  [self->slope_ setLabelWithNSString:label];
  [self->slope_ setDrawableWithBoolean:YES];
}

GeogebraCommonKernelAlgosAlgoSlope *new_GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoSlope *self = [GeogebraCommonKernelAlgosAlgoSlope alloc];
  GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoSlope *self, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, ((GeogebraCommonKernelGeosGeoLine *) nil_chk(g))->cons_, NO);
  GeogebraCommonKernelAlgosAlgoSlope_set_g_(self, g);
}

GeogebraCommonKernelAlgosAlgoSlope *new_GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoSlope *self = [GeogebraCommonKernelAlgosAlgoSlope alloc];
  GeogebraCommonKernelAlgosAlgoSlope_initWithGeogebraCommonKernelGeosGeoLine_(self, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoSlope_compute(GeogebraCommonKernelAlgosAlgoSlope *self) {
  if ([((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_)) isDefined] && !GeogebraCommonKernelKernel_isZeroWithDouble_(self->g_->y_)) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) setValueWithDouble:-self->g_->x_ / self->g_->y_];
  }
  else {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->slope_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSlope)
