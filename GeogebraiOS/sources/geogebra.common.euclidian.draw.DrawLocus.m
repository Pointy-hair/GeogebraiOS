//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawLocus.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/draw/DrawLocus.h"
#include "geogebra/common/euclidian/plot/CurvePlotter.h"
#include "geogebra/common/euclidian/plot/GeneralPathClippedForCurvePlotter.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawLocus () {
 @public
  GeogebraCommonKernelGeosGeoLocusND *locus_;
  jboolean isVisible_, labelVisible_;
  GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *gp_;
  IOSDoubleArray *lastPointCoords_;
}

- (void)buildGeneralPathWithJavaUtilArrayList:(JavaUtilArrayList *)pointList;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLocus, locus_, GeogebraCommonKernelGeosGeoLocusND *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLocus, gp_, GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawLocus, lastPointCoords_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLocus_update(GeogebraCommonEuclidianDrawDrawLocus *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLocus_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawLocus *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawLocus *self, JavaUtilArrayList *pointList);

@implementation GeogebraCommonEuclidianDrawDrawLocus

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                      withGeogebraCommonKernelGeosGeoLocusND:(GeogebraCommonKernelGeosGeoLocusND *)locus {
  GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(self, view, locus);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawLocus_update(self);
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawLocus_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)buildGeneralPathWithJavaUtilArrayList:(JavaUtilArrayList *)pointList {
  GeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(self, pointList);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
      [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:gp_];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
    [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:gp_];
    if ([geo_ isFillable] && ([geo_ getAlphaValue] > 0 || [geo_ isHatchingEnabled])) {
      @try {
        [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:([geo_ isInverseFill] ? ((id) [self getShape]) : gp_) withBoolean:NO];
      }
      @catch (JavaLangException *e) {
        [((JavaIoPrintStream *) nil_chk(JavaLangSystem_get_err_())) printlnWithNSString:[((JavaLangException *) nil_chk(e)) getMessage]];
      }
    }
    if (labelVisible_) {
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontLine]];
      [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getLabelColor]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  id<GeogebraCommonAwtGShape> t = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isInverseFill] ? ((id) [self getShape]) : gp_;
  if (t == nil) return NO;
  if (strokedShape_ == nil) {
    GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:gp_]);
  }
  if ([geo_ getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]) {
    return [t intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
  }
  return [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:x - hitThreshold withInt:y - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:[((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds]];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(locus_)) isClosedPath] || ![geo_ isEuclidianVisible]) {
    return nil;
  }
  return [((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(gp_)) getBounds];
}

- (void)dealloc {
  RELEASE_(locus_);
  RELEASE_(gp_);
  RELEASE_(lastPointCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoLocusND:", "DrawLocus", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "buildGeneralPathWithJavaUtilArrayList:", "buildGeneralPath", "V", 0x2, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocusND;", NULL, "Lgeogebra/common/kernel/geos/GeoLocusND<+Lgeogebra/common/kernel/MyPoint;>;",  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.plot.GeneralPathClippedForCurvePlotter;", NULL, NULL,  },
    { "lastPointCoords_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawLocus = { 2, "DrawLocus", "geogebra.common.euclidian.draw", NULL, 0x1, 11, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawLocus;
}

@end

void GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(GeogebraCommonEuclidianDrawDrawLocus *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoLocusND *locus) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawLocus_set_locus_(self, locus);
  GeogebraCommonEuclidianDrawable_set_geo_(self, locus);
  GeogebraCommonEuclidianDrawDrawLocus_update(self);
}

GeogebraCommonEuclidianDrawDrawLocus *new_GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoLocusND *locus) {
  GeogebraCommonEuclidianDrawDrawLocus *self = [GeogebraCommonEuclidianDrawDrawLocus alloc];
  GeogebraCommonEuclidianDrawDrawLocus_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoLocusND_(self, view, locus);
  return self;
}

void GeogebraCommonEuclidianDrawDrawLocus_update(GeogebraCommonEuclidianDrawDrawLocus *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  GeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(self, [((GeogebraCommonKernelGeosGeoLocusND *) nil_chk(self->locus_)) getPoints]);
  if (![((GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter *) nil_chk(self->gp_)) intersectsWithInt:0 withInt:0 withInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]]) {
    self->isVisible_ = NO;
  }
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->geo_];
  self->labelVisible_ = [self->geo_ isLabelVisible];
  if (self->labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(nil_chk(self->lastPointCoords_), 0) - 5));
    self->yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->lastPointCoords_, 1) + 4 + [self->view_ getFontSize]));
    [self addLabelOffsetEnsureOnScreenWithDouble:1.25 withDouble:1.0];
  }
  if ([self->geo_ isTraceable] && ([GeogebraCommonKernelGeosTraceable_class_() isInstance:self->geo_]) && [((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(self->geo_, @protocol(GeogebraCommonKernelGeosTraceable))) getTrace]) {
    self->isTracing__ = YES;
    id<GeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) GeogebraCommonEuclidianDrawDrawLocus_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if ([self->geo_ isInverseFill]) {
    [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[self->view_ getBoundingPath]]];
    [((id<GeogebraCommonAwtGArea>) nil_chk([self getShape])) subtractWithGeogebraCommonAwtGArea:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:self->gp_]];
  }
}

void GeogebraCommonEuclidianDrawDrawLocus_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawLocus *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[self getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:self->gp_];
  }
}

void GeogebraCommonEuclidianDrawDrawLocus_buildGeneralPathWithJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawLocus *self, JavaUtilArrayList *pointList) {
  if (self->gp_ == nil) GeogebraCommonEuclidianDrawDrawLocus_setAndConsume_gp_(self, new_GeogebraCommonEuclidianPlotGeneralPathClippedForCurvePlotter_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
  else [self->gp_ reset];
  GeogebraCommonEuclidianDrawDrawLocus_set_lastPointCoords_(self, GeogebraCommonEuclidianPlotCurvePlotter_drawWithGeogebraCommonEuclidianPlotPathPlotter_withJavaUtilArrayList_(self->gp_, pointList));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawLocus)
