//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdCopyFreeObject.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/commands/CmdCopyFreeObject.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"

@implementation GeogebraCommonKernelCommandsCmdCopyFreeObject

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdCopyFreeObject_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    NSString *label;
    GeogebraCommonKernelGeosGeoElement *geo;
    IOSObjectArray *ret;
    switch (n) {
      case 1:
      label = [c getLabel];
      if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)]) {
        id<GeogebraCommonKernelArithmeticFunctionalNVar> f = (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar));
        JavaLangStringBuilder *command = [new_JavaLangStringBuilder_init() autorelease];
        if (label != nil) {
          [command appendWithNSString:label];
          [command appendWithChar:'('];
          [command appendWithNSString:[((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(f)) getVarStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          [command appendWithNSString:@")="];
        }
        GeogebraCommonKernelStringTemplate *highPrecision = GeogebraCommonKernelStringTemplate_get_maxPrecision_();
        [command appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) toOutputValueStringWithGeogebraCommonKernelStringTemplate:highPrecision]];
        @try {
          IOSObjectArray *ret = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgebraProcessor])) processAlgebraCommandNoExceptionsWithNSString:[command description] withBoolean:YES];
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(ret), 0))) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0)];
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
          return ret;
        }
        @catch (JavaLangException *e) {
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
          [((JavaLangException *) nil_chk(e)) printStackTrace];
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
        }
      }
      if ([GeogebraCommonKernelKernelNDGeoSegmentND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
        geo = [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))))) copyFreeSegment];
      }
      else if ([GeogebraCommonKernelKernelNDGeoRayND_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
        geo = [((id<GeogebraCommonKernelKernelNDGeoRayND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelKernelNDGeoRayND))))) copyFreeRay];
      }
      else {
        geo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) deepCopyGeo];
      }
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:label];
      [geo setVisualStyleWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 0)];
      ret = [IOSObjectArray arrayWithObjects:(id[]){ geo } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isLabelSet]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) remove];
      return ret;
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdCopyFreeObject", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdCopyFreeObject = { 2, "CmdCopyFreeObject", "geogebra.common.kernel.commands", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdCopyFreeObject;
}

@end

void GeogebraCommonKernelCommandsCmdCopyFreeObject_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdCopyFreeObject *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdCopyFreeObject *new_GeogebraCommonKernelCommandsCmdCopyFreeObject_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdCopyFreeObject *self = [GeogebraCommonKernelCommandsCmdCopyFreeObject alloc];
  GeogebraCommonKernelCommandsCmdCopyFreeObject_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdCopyFreeObject)
