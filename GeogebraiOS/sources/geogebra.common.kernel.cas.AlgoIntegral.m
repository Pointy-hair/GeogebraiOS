//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoIntegral.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCasBase.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/cas/AlgoIntegral.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelCasAlgoIntegral () {
 @public
  GeogebraCommonKernelGeosGeoNumeric *var_;
  jboolean allowConstant_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoIntegral, var_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoIntegral, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

@implementation GeogebraCommonKernelCasAlgoIntegral

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)var {
  GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, f, var);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
        withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)var
                                             withBoolean:(jboolean)allowConstant {
  GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, cons, f, var, allowConstant);
  return self;
}

- (void)setInputOutput {
  jint length = 1;
  if (var_ != nil) length++;
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:length type:GeogebraCommonKernelGeosGeoElement_class_()]);
  length = 0;
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement]);
  if (var_ != nil) IOSObjectArray_Set(input_, ++length, var_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:[((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(g_)) toGeoElement]];
  [self setDependencies];
}

- (void)applyCasCommandWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([f_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
    GeogebraCommonKernelArithmeticFunction *inFun = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(f_, [GeogebraCommonKernelGeosGeoFunction class])))) getFunction];
    if (![((GeogebraCommonKernelKernel *) nil_chk(kernel_)) useCASforIntegrals]) {
      inFun = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(inFun)) getIntegralNoCAS];
      if (inFun == nil) {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoFunction class])))) setDefinedWithBoolean:NO];
      }
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoFunction class])))) setFunctionWithGeogebraCommonKernelArithmeticFunction:inFun];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoFunction class])))) setDefinedWithBoolean:YES];
      return;
    }
    GeogebraCommonKernelArithmeticPolyFunction *polyDeriv = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(inFun)) getNumericPolynomialIntegral];
    if (polyDeriv != nil) {
      GeogebraCommonKernelArithmeticFunction *funDeriv = [polyDeriv getFunctionWithGeogebraCommonKernelKernel:kernel_ withGeogebraCommonKernelArithmeticFunctionVariable:[inFun getFunctionVariable]];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoFunction class])))) setFunctionWithGeogebraCommonKernelArithmeticFunction:funDeriv];
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoFunction class])))) setDefinedWithBoolean:YES];
      return;
    }
  }
  NSString *varStr = var_ != nil ? [var_ getLabelWithGeogebraCommonKernelStringTemplate:tpl] : [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) getVarStringWithGeogebraCommonKernelStringTemplate:tpl];
  [((JavaLangStringBuilder *) nil_chk(sbAE_)) setLengthWithInt:0];
  [sbAE_ appendWithNSString:@"Integral[%"];
  [sbAE_ appendWithNSString:@","];
  [sbAE_ appendWithNSString:varStr];
  [sbAE_ appendWithNSString:@"]"];
  [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(g_)) setUsingCasCommandWithNSString:[sbAE_ description] withGeogebraCommonKernelGeosCasEvaluableFunction:f_ withBoolean:YES withGeogebraCommonKernelArithmeticMyArbitraryConstant:self->allowConstant_ ? arbconst_ : nil];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  if (var_ != nil) {
    [sb appendWithNSString:[super toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  else {
    [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntegralOfA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]]];
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement])) isIndependent]) {
    [sb appendWithNSString:@": "];
    [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(g_)) toGeoElement])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    if ([[g_ toGeoElement] isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      [sb appendWithChar:'('];
      [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast([g_ toGeoElement], [GeogebraCommonKernelGeosGeoFunction class])))) getVarStringWithGeogebraCommonKernelStringTemplate:tpl]];
      [sb appendWithChar:')'];
    }
    [sb appendWithNSString:@" = "];
    [sb appendWithNSString:[g_ toSymbolicStringWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [sb description];
}

- (void)dealloc {
  RELEASE_(var_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoIntegral", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosCasEvaluableFunction:withGeogebraCommonKernelGeosGeoNumeric:withBoolean:", "AlgoIntegral", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "applyCasCommandWithGeogebraCommonKernelStringTemplate:", "applyCasCommand", "V", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "var_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "allowConstant_", NULL, 0x2, "Z", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoIntegral = { 2, "AlgoIntegral", "geogebra.common.kernel.cas", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoIntegral;
}

@end

void GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelCasAlgoIntegral *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoNumeric *var) {
  GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, cons, f, var, YES);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(self->g_)) toGeoElement])) setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoIntegral *new_GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoNumeric *var) {
  GeogebraCommonKernelCasAlgoIntegral *self = [GeogebraCommonKernelCasAlgoIntegral alloc];
  GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, f, var);
  return self;
}

void GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonKernelCasAlgoIntegral *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoNumeric *var, jboolean allowConstant) {
  GeogebraCommonKernelAlgosAlgoCasBase_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelCommandsCommandsEnum_(self, cons, f, GeogebraCommonKernelCommandsCommandsEnum_get_Integral());
  GeogebraCommonKernelCasAlgoIntegral_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  GeogebraCommonKernelCasAlgoIntegral_set_var_(self, var);
  self->allowConstant_ = allowConstant;
  [self setInputOutput];
  [self compute];
}

GeogebraCommonKernelCasAlgoIntegral *new_GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoNumeric *var, jboolean allowConstant) {
  GeogebraCommonKernelCasAlgoIntegral *self = [GeogebraCommonKernelCasAlgoIntegral alloc];
  GeogebraCommonKernelCasAlgoIntegral_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoNumeric_withBoolean_(self, cons, f, var, allowConstant);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoIntegral)
