//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Inequality.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/arithmetic/Inequality.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelArithmeticInequality () {
 @public
  GeogebraCommonPluginOperationEnum *op_;
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *type_;
  GeogebraCommonKernelGeosGeoConic *conicBorder_;
  GeogebraCommonKernelGeosGeoLine *lineBorder_;
  GeogebraCommonKernelGeosGeoFunction *funBorder_;
  GeogebraCommonKernelGeosGeoElement *border_;
  GeogebraCommonKernelKernel *kernel_;
  jboolean isAboveBorder__;
  GeogebraCommonKernelArithmeticExpressionNode *normal_;
  IOSObjectArray *fv_;
  GeogebraCommonKernelArithmeticMyDouble *coef_;
  IOSObjectArray *zeros_;
  GeogebraCommonKernelArithmeticMyDouble *zeroDummy0_, *zeroDummy1_;
}

- (void)update;

- (void)setAboveBorderFromConic;

- (void)init1varFunctionWithInt:(jint)varIndex OBJC_METHOD_FAMILY_NONE;

+ (IOSObjectArray *)RootMultipleWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, op_, GeogebraCommonPluginOperationEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, type_, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, conicBorder_, GeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, lineBorder_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, funBorder_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, border_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, normal_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, fv_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, coef_, GeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, zeros_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, zeroDummy0_, GeogebraCommonKernelArithmeticMyDouble *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticInequality, zeroDummy1_, GeogebraCommonKernelArithmeticMyDouble *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticInequality_update(GeogebraCommonKernelArithmeticInequality *self);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(GeogebraCommonKernelArithmeticInequality *self);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(GeogebraCommonKernelArithmeticInequality *self, jint varIndex);

__attribute__((unused)) static IOSObjectArray *GeogebraCommonKernelArithmeticInequality_RootMultipleWithGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelGeosGeoFunction *f);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonKernelArithmeticInequality

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)lhs
 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)rhs
             withGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
withGeogebraCommonKernelArithmeticFunctionVariableArray:(IOSObjectArray *)fv
  withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)function {
  GeogebraCommonKernelArithmeticInequality_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticFunctionVariableArray_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, kernel, lhs, rhs, op, fv, function);
  return self;
}

- (void)update {
  GeogebraCommonKernelArithmeticInequality_update(self);
}

- (void)setAboveBorderFromConic {
  GeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(self);
}

- (void)init1varFunctionWithInt:(jint)varIndex {
  GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, varIndex);
}

+ (IOSObjectArray *)RootMultipleWithGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  return GeogebraCommonKernelArithmeticInequality_RootMultipleWithGeogebraCommonKernelGeosGeoFunction_(f);
}

- (void)updateCoef {
  JavaLangDouble *coefVal = nil, *otherVal = nil;
  if (type_ == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
    coefVal = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(normal_)) getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fv_), 1)];
    otherVal = [normal_ getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv_, 0)];
  }
  else if (type_ == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
    coefVal = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(normal_)) getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fv_), 0)];
    otherVal = [normal_ getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(fv_, 1)];
  }
  if (coefVal == nil || [coefVal doubleValue] == 0 || (otherVal != nil && JavaLangMath_absWithDouble_([otherVal doubleValue]) > JavaLangMath_absWithDouble_([coefVal doubleValue]))) GeogebraCommonKernelArithmeticInequality_update(self);
  else {
    isAboveBorder__ = ([coefVal doubleValue] > 0);
    [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(coef_)) setWithDouble:-[coefVal doubleValue]];
  }
}

- (NSString *)description {
  return @"inequality";
}

- (jboolean)isStrict {
  return ([((GeogebraCommonPluginOperationEnum *) nil_chk(op_)) isEqual:GeogebraCommonPluginOperationEnum_get_GREATER()] || [op_ isEqual:GeogebraCommonPluginOperationEnum_get_LESS()]);
}

- (GeogebraCommonKernelGeosGeoFunction *)getFunBorder {
  return funBorder_;
}

- (jboolean)isAboveBorder {
  return isAboveBorder__;
}

- (GeogebraCommonKernelGeosGeoElement *)getBorder {
  return border_;
}

- (GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)getType {
  return type_;
}

- (GeogebraCommonKernelGeosGeoConic *)getConicBorder {
  return conicBorder_;
}

- (GeogebraCommonKernelGeosGeoLine *)getLineBorder {
  return lineBorder_;
}

- (IOSObjectArray *)getZeros {
  return zeros_;
}

- (void)dealloc {
  RELEASE_(op_);
  RELEASE_(type_);
  RELEASE_(conicBorder_);
  RELEASE_(lineBorder_);
  RELEASE_(funBorder_);
  RELEASE_(border_);
  RELEASE_(kernel_);
  RELEASE_(normal_);
  RELEASE_(fv_);
  RELEASE_(coef_);
  RELEASE_(zeros_);
  RELEASE_(zeroDummy0_);
  RELEASE_(zeroDummy1_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticFunctionVariableArray:withGeogebraCommonKernelArithmeticFunctionalNVar:", "Inequality", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x2, NULL, NULL },
    { "setAboveBorderFromConic", NULL, "V", 0x2, NULL, NULL },
    { "init1varFunctionWithInt:", "init1varFunction", "V", 0x2, NULL, NULL },
    { "RootMultipleWithGeogebraCommonKernelGeosGeoFunction:", "RootMultiple", "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1a, NULL, NULL },
    { "updateCoef", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isStrict", NULL, "Z", 0x1, NULL, NULL },
    { "getFunBorder", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "isAboveBorder", NULL, "Z", 0x1, NULL, NULL },
    { "getBorder", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", 0x1, NULL, NULL },
    { "getConicBorder", NULL, "Lgeogebra.common.kernel.geos.GeoConic;", 0x1, NULL, NULL },
    { "getLineBorder", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getZeros", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "op_", NULL, 0x2, "Lgeogebra.common.plugin.Operation;", NULL, NULL,  },
    { "type_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", NULL, NULL,  },
    { "conicBorder_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "lineBorder_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "funBorder_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "border_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "isAboveBorder__", "isAboveBorder", 0x2, "Z", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "fv_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.FunctionVariable;", NULL, NULL,  },
    { "coef_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "zeros_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "zeroDummy0_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "zeroDummy1_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticInequality = { 2, "Inequality", "geogebra.common.kernel.arithmetic", NULL, 0x1, 15, methods, 14, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticInequality;
}

@end

void GeogebraCommonKernelArithmeticInequality_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticFunctionVariableArray_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelArithmeticInequality *self, GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> lhs, id<GeogebraCommonKernelArithmeticExpressionValue> rhs, GeogebraCommonPluginOperationEnum *op, IOSObjectArray *fv, id<GeogebraCommonKernelArithmeticFunctionalNVar> function) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticInequality_set_op_(self, GeogebraCommonPluginOperationEnum_get_LESS());
  GeogebraCommonKernelArithmeticInequality_set_op_(self, op);
  GeogebraCommonKernelArithmeticInequality_set_kernel_(self, kernel);
  GeogebraCommonKernelArithmeticInequality_set_fv_(self, fv);
  if ([((GeogebraCommonPluginOperationEnum *) nil_chk(op)) isEqual:GeogebraCommonPluginOperationEnum_get_GREATER()] || [op isEqual:GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL()]) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_normal_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, lhs, GeogebraCommonPluginOperationEnum_get_MINUS(), rhs));
  }
  else {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_normal_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, rhs, GeogebraCommonPluginOperationEnum_get_MINUS(), lhs));
  }
  GeogebraCommonKernelArithmeticInequality_update(self);
}

GeogebraCommonKernelArithmeticInequality *new_GeogebraCommonKernelArithmeticInequality_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticFunctionVariableArray_withGeogebraCommonKernelArithmeticFunctionalNVar_(GeogebraCommonKernelKernel *kernel, id<GeogebraCommonKernelArithmeticExpressionValue> lhs, id<GeogebraCommonKernelArithmeticExpressionValue> rhs, GeogebraCommonPluginOperationEnum *op, IOSObjectArray *fv, id<GeogebraCommonKernelArithmeticFunctionalNVar> function) {
  GeogebraCommonKernelArithmeticInequality *self = [GeogebraCommonKernelArithmeticInequality alloc];
  GeogebraCommonKernelArithmeticInequality_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticFunctionVariableArray_withGeogebraCommonKernelArithmeticFunctionalNVar_(self, kernel, lhs, rhs, op, fv, function);
  return self;
}

void GeogebraCommonKernelArithmeticInequality_update(GeogebraCommonKernelArithmeticInequality *self) {
  if (((IOSObjectArray *) nil_chk(self->fv_))->size_ == 1) {
    GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 0);
    if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO]) {
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID());
    }
    else if ([((NSString *) nil_chk([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(self->fv_, 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])) isEqual:@"y"]) {
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y());
    }
    else GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X());
    return;
  }
  if (self->zeroDummy0_ != nil) [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy0_ withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0)])) wrap];
  if (self->zeroDummy1_ != nil) [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy1_ withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1)])) wrap];
  JavaLangDouble *coefY = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->normal_)) getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(self->fv_, 1)];
  JavaLangDouble *coefX = [self->normal_ getCoefficientWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(self->fv_, 0)];
  GeogebraCommonKernelArithmeticFunction *fun = nil;
  if (coefY != nil && !GeogebraCommonKernelKernel_isZeroWithDouble_([coefY doubleValue]) && !JavaLangDouble_isNaNWithDouble_([coefY doubleValue]) && coefX == nil) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_coef_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -[coefY doubleValue]));
    self->isAboveBorder__ = ([coefY doubleValue] > 0);
    GeogebraCommonKernelArithmeticExpressionNode *m = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->normal_, GeogebraCommonPluginOperationEnum_get_DIVIDE(), self->coef_) autorelease], GeogebraCommonPluginOperationEnum_get_PLUS(), IOSObjectArray_Get(self->fv_, 1)) autorelease];
    [m simplifyLeafs];
    fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(m, IOSObjectArray_Get(self->fv_, 0)) autorelease];
    GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y());
  }
  else if (coefX != nil && !GeogebraCommonKernelKernel_isZeroWithDouble_([coefX doubleValue]) && !JavaLangDouble_isNaNWithDouble_([coefX doubleValue]) && coefY == nil) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_coef_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -[coefX doubleValue]));
    self->isAboveBorder__ = ([coefX doubleValue] > 0);
    GeogebraCommonKernelArithmeticExpressionNode *m = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->normal_, GeogebraCommonPluginOperationEnum_get_DIVIDE(), self->coef_) autorelease], GeogebraCommonPluginOperationEnum_get_PLUS(), IOSObjectArray_Get(self->fv_, 0)) autorelease];
    [m simplifyLeafs];
    fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(m, IOSObjectArray_Get(self->fv_, 1)) autorelease];
    GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X());
  }
  else if (coefX != nil && GeogebraCommonKernelKernel_isZeroWithDouble_([coefX doubleValue]) && coefY == nil) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_zeroDummy0_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
    [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self->normal_ replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0) withGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy0_])) wrap];
    GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 1);
    GeogebraCommonKernelArithmeticInequality_set_type_(self, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO] ? GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_Y() : GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID());
  }
  else if (coefY != nil && GeogebraCommonKernelKernel_isZeroWithDouble_([coefY doubleValue]) && coefX == nil) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_zeroDummy1_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0));
    [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([self->normal_ replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1) withGeogebraCommonKernelArithmeticExpressionValue:self->zeroDummy1_])) wrap];
    GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(self, 0);
    GeogebraCommonKernelArithmeticInequality_set_type_(self, [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->funBorder_)) isPolynomialFunctionWithBoolean:NO] ? GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_1VAR_X() : GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID());
  }
  else {
    GeogebraCommonKernelArithmeticFunctionVariable *xVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x") autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *yVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"y") autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *replaced = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([self->normal_ deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticExpressionNode class])))) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 0) withGeogebraCommonKernelArithmeticExpressionValue:xVar])) wrap])) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fv_, 1) withGeogebraCommonKernelArithmeticExpressionValue:yVar])) wrap];
    GeogebraCommonKernelArithmeticEquation *equ = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, replaced, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]) autorelease];
    [equ initEquation];
    if (![equ isPolynomial]) {
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID());
      return;
    }
    GeogebraCommonKernelArithmeticPolynomial *newBorder = [equ getNormalForm];
    if ([((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(newBorder)) degree] < 2) {
      if (self->lineBorder_ == nil) GeogebraCommonKernelArithmeticInequality_setAndConsume_lineBorder_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]));
      IOSObjectArray *evs = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk([equ getNormalForm])) getCoeff];
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->lineBorder_)) setCoordsWithDouble:GeogebraCommonKernelGeosGeoConic_evalCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 1, 0) withDouble:GeogebraCommonKernelGeosGeoConic_evalCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 0, 1) withDouble:GeogebraCommonKernelGeosGeoConic_evalCoeffWithGeogebraCommonKernelArithmeticExpressionValueArray2_withInt_withInt_(evs, 0, 0)];
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_LINEAR());
      GeogebraCommonKernelArithmeticInequality_set_border_(self, self->lineBorder_);
      self->isAboveBorder__ = ([((JavaLangDouble *) nil_chk(coefY)) doubleValue] < 0 || ([coefY doubleValue] == 0.0 && [((JavaLangDouble *) nil_chk(coefX)) doubleValue] > 0));
    }
    else if ([newBorder degree] == 2) {
      if (self->conicBorder_ == nil) GeogebraCommonKernelArithmeticInequality_setAndConsume_conicBorder_(self, new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]));
      [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->conicBorder_)) setCoeffsWithGeogebraCommonKernelArithmeticExpressionValueArray2:[((GeogebraCommonKernelArithmeticPolynomial *) nil_chk([equ getNormalForm])) getCoeff]];
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_CONIC());
      GeogebraCommonKernelArithmeticInequality_set_border_(self, self->conicBorder_);
      GeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(self);
    }
    else {
      GeogebraCommonKernelArithmeticInequality_set_type_(self, GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_INVALID());
      return;
    }
  }
  GeogebraCommonUtilDebugLog_traceWithNSString_(JreStrcat("@C@C@", self->type_, ':', coefX, ',', coefY));
  if (self->type_ == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X() || self->type_ == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_Y()) {
    GeogebraCommonKernelArithmeticInequality_setAndConsume_funBorder_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]));
    [self->funBorder_ setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
    if (self->type_ == GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_get_INEQUALITY_PARAMETRIC_X()) {
      [self->funBorder_ swapEval];
    }
  }
  if (self->funBorder_ != nil) GeogebraCommonKernelArithmeticInequality_set_border_(self, self->funBorder_);
  if ([self isStrict]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->border_)) setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->border_)) setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
  }
}

void GeogebraCommonKernelArithmeticInequality_setAboveBorderFromConic(GeogebraCommonKernelArithmeticInequality *self) {
  if ([((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->conicBorder_)) getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY || [self->conicBorder_ getType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) {
    self->isAboveBorder__ = ([self->conicBorder_ evaluateInSignificantPoint] >= 0);
    return;
  }
  self->isAboveBorder__ = ([self->conicBorder_ evaluateInSignificantPoint] < 0);
}

void GeogebraCommonKernelArithmeticInequality_init1varFunctionWithInt_(GeogebraCommonKernelArithmeticInequality *self, jint varIndex) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction];
  jboolean supress = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:YES];
  GeogebraCommonKernelArithmeticInequality_setAndConsume_funBorder_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self->funBorder_ setFunctionWithGeogebraCommonKernelArithmeticFunction:[new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(self->normal_, IOSObjectArray_Get(nil_chk(self->fv_), varIndex)) autorelease]];
  GeogebraCommonKernelArithmeticInequality_set_zeros_(self, GeogebraCommonKernelArithmeticInequality_RootMultipleWithGeogebraCommonKernelGeosGeoFunction_(self->funBorder_));
  [cons setSuppressLabelCreationWithBoolean:supress];
  GeogebraCommonKernelArithmeticInequality_set_border_(self, self->funBorder_);
  if ([self isStrict]) {
    [self->border_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  }
  else [self->border_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL];
}

IOSObjectArray *GeogebraCommonKernelArithmeticInequality_RootMultipleWithGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelArithmeticInequality_initialize();
  if (![((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) isPolynomialFunctionWithBoolean:YES]) return nil;
  GeogebraCommonKernelAlgosAlgoRootsPolynomial *algo = [new_GeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithGeogebraCommonKernelGeosGeoFunction_(f) autorelease];
  IOSObjectArray *g = [algo getRootPoints];
  return g;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticInequality)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelArithmeticInequality_IneqTypeEnum)

GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_[8];

@implementation GeogebraCommonKernelArithmeticInequality_IneqTypeEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values() {
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_ count:8 type:GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values();
}

+ (GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initialize();
  for (int i = 0; i < 8; i++) {
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *e = GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelArithmeticInequality_IneqTypeEnum class]) {
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_INVALID = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_INVALID", 0);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_X = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_PARAMETRIC_X", 1);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_Y = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_PARAMETRIC_Y", 2);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_LINEAR = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_LINEAR", 3);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_CONIC = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_CONIC", 4);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_IMPLICIT = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_IMPLICIT", 5);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_X = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_1VAR_X", 6);
    GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_Y = new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(@"INEQUALITY_1VAR_Y", 7);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelArithmeticInequality_IneqTypeEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "INEQUALITY_INVALID", "INEQUALITY_INVALID", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_INVALID, NULL,  },
    { "INEQUALITY_PARAMETRIC_X", "INEQUALITY_PARAMETRIC_X", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_X, NULL,  },
    { "INEQUALITY_PARAMETRIC_Y", "INEQUALITY_PARAMETRIC_Y", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_PARAMETRIC_Y, NULL,  },
    { "INEQUALITY_LINEAR", "INEQUALITY_LINEAR", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_LINEAR, NULL,  },
    { "INEQUALITY_CONIC", "INEQUALITY_CONIC", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_CONIC, NULL,  },
    { "INEQUALITY_IMPLICIT", "INEQUALITY_IMPLICIT", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_IMPLICIT, NULL,  },
    { "INEQUALITY_1VAR_X", "INEQUALITY_1VAR_X", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_X, NULL,  },
    { "INEQUALITY_1VAR_Y", "INEQUALITY_1VAR_Y", 0x4019, "Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;", &GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_INEQUALITY_1VAR_Y, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.arithmetic.Inequality$IneqType;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticInequality_IneqTypeEnum = { 2, "IneqType", "geogebra.common.kernel.arithmetic", "Inequality", 0x4019, 0, NULL, 8, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/arithmetic/Inequality$IneqType;>;" };
  return &_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum;
}

@end

void GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *new_GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum *self = [GeogebraCommonKernelArithmeticInequality_IneqTypeEnum alloc];
  GeogebraCommonKernelArithmeticInequality_IneqTypeEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticInequality_IneqTypeEnum)
