//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPoint.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPlaneThroughPoint.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  GeogebraCommonKernelGeosGeoElement *cs_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *plane_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint, cs_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint, plane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, point);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Plane();
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)getPlane {
  return plane_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return point_;
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PlaneThroughAParallelToB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(point_);
  RELEASE_(cs_);
  RELEASE_(plane_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoPlaneThroughPoint", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getPlane", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x404, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "cs_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "plane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint = { 2, "AlgoPlaneThroughPoint", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x401, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoElement3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_set_point_(self, point);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint_setAndConsume_plane_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_initWithGeogebraCommonKernelConstruction_(cons));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPlaneThroughPoint)
