//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D ()

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList;

@end

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, GeogebraCommonKernelGeosGeoList *pointList);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

- (void)createPolyLine {
  GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_poly_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolyLine3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self->cons_, self->points_));
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_POLYLINE;
}

- (void)updatePointArrayWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, pointList);
}

- (void)update {
  [self compute];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getOutputWithInt:0])) update];
}

- (IOSObjectArray *)getPointsND {
  return points_;
}

- (void)compute {
  if (geoList_ != nil) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(self, geoList_);
  }
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(poly_)) calcLength];
}

- (void)setInputOutput {
  IOSObjectArray *efficientInput = [self createEfficientInput];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(efficientInput))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < efficientInput->size_; i++) IOSObjectArray_Set(input_, i, IOSObjectArray_Get(efficientInput, i));
  [self setEfficientDependenciesWithGeogebraCommonKernelGeosGeoElementArray:input_ withGeogebraCommonKernelGeosGeoElementArray:efficientInput];
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:poly_];
  [self setDependencies];
}

- (IOSObjectArray *)createEfficientInput {
  IOSObjectArray *efficientInput;
  if (geoList_ != nil) {
    efficientInput = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    IOSObjectArray_Set(efficientInput, 0, geoList_);
  }
  else {
    efficientInput = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(points_))->size_ type:GeogebraCommonKernelGeosGeoElement_class_()];
    for (jint i = 0; i < points_->size_; i++) IOSObjectArray_Set(efficientInput, i, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points_, i), [GeogebraCommonKernelGeosGeoElement class]));
  }
  return efficientInput;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:", "AlgoPolyLine3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoList:", "AlgoPolyLine3D", NULL, 0x4, NULL, NULL },
    { "createPolyLine", NULL, "V", 0x4, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "updatePointArrayWithGeogebraCommonKernelGeosGeoList:", "updatePointArray", "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "getPointsND", NULL, "[Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "createEfficientInput", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D = { 2, "AlgoPolyLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 11, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, nil, geoList);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, geoList);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, nil);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(self, cons, labels, points);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonKernelAlgosAlgoPolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_(self, cons, labels, points, geoList);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D_updatePointArrayWithGeogebraCommonKernelGeosGeoList_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D *self, GeogebraCommonKernelGeosGeoList *pointList) {
  if (![((GeogebraCommonPluginGeoClassEnum *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_POINT()]) {
    [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setUndefined];
    return;
  }
  jint size = [pointList size];
  GeogebraCommonKernelAlgosAlgoPolyLine_setAndConsume_points_(self, [IOSObjectArray newArrayWithLength:size type:GeogebraCommonKernelKernelNDGeoPointND_class_()]);
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(self->points_, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([pointList getWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
  }
  [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(self->poly_)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:self->points_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyLine3D)
