//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawConic.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GArc2D.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GEllipse2DDouble.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GRectangle2D.h"
#include "geogebra/common/awt/GRectangularShape.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/GeneralPathClipped.h"
#include "geogebra/common/euclidian/clipping/ClipShape.h"
#include "geogebra/common/euclidian/draw/DrawConic.h"
#include "geogebra/common/euclidian/draw/DrawLine.h"
#include "geogebra/common/euclidian/draw/DrawPoint.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "geogebra/common/kernel/algos/AlgoParabolaPointLine.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawConic () {
 @public
  jint type_;
  jboolean firstPoint_;
  GeogebraCommonKernelGeosGeoPoint *point_;
  GeogebraCommonEuclidianDrawDrawPoint *drawPoint_;
  jboolean firstLines_;
  IOSObjectArray *lines_;
  IOSObjectArray *drawLines__;
  jboolean firstCircle_;
  GeogebraCommonKernelGeosGeoVec2D *midpoint_;
  id<GeogebraCommonAwtGArc2D> arc_;
  GeogebraCommonEuclidianGeneralPathClipped *arcFiller_, *gp_;
  id<GeogebraCommonAwtGRectangularShape> circle_;
  jdouble mx_, my_, radius_, yradius_, angSt_, angEnd_;
  jboolean firstEllipse_;
  id<GeogebraCommonAwtGEllipse2DDouble> ellipse_;
  jboolean firstParabola_;
  jdouble k2_;
  GeogebraCommonKernelGeosGeoVec2D *vertex_;
  IOSDoubleArray *parpoints_;
  jdouble b_;
  jdouble tsq_;
  jdouble step_;
  jdouble t_;
  jdouble denom_;
  jdouble x_, y_;
  jint index0_, index1_, n_;
  GeogebraCommonEuclidianGeneralPathClipped *hypLeft_, *hypRight_;
  jboolean hypLeftOnScreen_, hypRightOnScreen_;
  JavaUtilArrayList *prevPoints_;
  JavaUtilArrayList *prevSegments_;
  JavaUtilArrayList *prevLines_;
  JavaUtilArrayList *prevConics_;
  IOSObjectArray *previewTempPoints_;
  GeogebraCommonKernelGeosGeoLine *previewTempLine_;
  GeogebraCommonKernelGeosGeoNumeric *previewTempRadius_;
  jint previewMode_, neededPrevPoints_;
  jboolean isPreview_;
  jboolean ignoreSingularities_;
}

- (void)initConicWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c OBJC_METHOD_FAMILY_NONE;

- (void)updateSinglePoint;

- (jboolean)negativeColored;

- (void)initPreview OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, point_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, drawPoint_, GeogebraCommonEuclidianDrawDrawPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, lines_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, drawLines__, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, midpoint_, GeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, arc_, id<GeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, arcFiller_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, gp_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, circle_, id<GeogebraCommonAwtGRectangularShape>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, ellipse_, id<GeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, vertex_, GeogebraCommonKernelGeosGeoVec2D *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, parpoints_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, hypLeft_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, hypRight_, GeogebraCommonEuclidianGeneralPathClipped *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, prevPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, prevSegments_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, prevLines_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, prevConics_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, previewTempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, previewTempLine_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawConic, previewTempRadius_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonKernelKernelNDGeoConicND *c);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_update(GeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(GeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianDrawDrawConic_negativeColored(GeogebraCommonEuclidianDrawDrawConic *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_drawWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawConic *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawConic *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawConic_initPreview(GeogebraCommonEuclidianDrawDrawConic *self);

@implementation GeogebraCommonEuclidianDrawDrawConic

- (id<GeogebraCommonAwtGArea>)getShape {
  id<GeogebraCommonAwtGArea> area = [super getShape] != nil ? [super getShape] : (shape_DrawConic_ == nil ? [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArea] : [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:shape_DrawConic_]);
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    id<GeogebraCommonAwtGArea> complement = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
    [((id<GeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithGeogebraCommonAwtGArea:area];
    return complement;
  }
  return area;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                  withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c
                                                 withBoolean:(jboolean)ignoreSingularities {
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self, view, c, ignoreSingularities);
  return self;
}

- (void)initConicWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, c);
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                                     withInt:(jint)mode
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points
                                       withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, points, selectedLines);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                                     withInt:(jint)mode
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points
                                       withJavaUtilArrayList:(JavaUtilArrayList *)segments
                                       withJavaUtilArrayList:(JavaUtilArrayList *)conics {
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, mode, points, segments, conics);
  return self;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawConic_update(self);
}

- (jboolean)checkCircleEllipseParabolaOnScreenWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect {
  jboolean includesScreenCompletely = [((id<GeogebraCommonAwtGShape>) nil_chk(shape_DrawConic_)) containsWithGeogebraCommonAwtGRectangle2D:viewRect];
  jboolean offScreen = includesScreenCompletely || ![((id<GeogebraCommonAwtGRectangle2D>) nil_chk([shape_DrawConic_ getBounds2D])) intersectsWithGeogebraCommonAwtGRectangle2D:viewRect];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getAlphaValue] == 0.0f) {
    return !offScreen;
  }
  if (includesScreenCompletely) {
    return YES;
  }
  return !offScreen;
}

- (jboolean)checkHyperbolaOnScreenWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)viewRect {
  hypLeftOnScreen_ = [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) intersectsWithGeogebraCommonAwtGRectangle2D:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithGeogebraCommonAwtGRectangle:viewRect]];
  hypRightOnScreen_ = [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) intersectsWithGeogebraCommonAwtGRectangle2D:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newRectangleWithGeogebraCommonAwtGRectangle:viewRect]];
  if (!hypLeftOnScreen_ && !hypRightOnScreen_) {
    return NO;
  }
  return YES;
}

- (void)updateSinglePoint {
  GeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(self);
}

- (void)updateDoubleLine {
  [self updateLines];
}

- (void)updateLines {
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, nil);
  if (firstLines_) {
    firstLines_ = NO;
    GeogebraCommonEuclidianDrawDrawConic_set_lines_(self, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getLines]);
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_drawLines__(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonEuclidianDrawDrawLine_class_()]);
    IOSObjectArray_SetAndConsume(drawLines__, 0, new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(view_, IOSObjectArray_Get(nil_chk(lines_), 0)));
    IOSObjectArray_SetAndConsume(drawLines__, 1, new_GeogebraCommonEuclidianDrawDrawLine_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoLineND_(view_, IOSObjectArray_Get(lines_, 1)));
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 0))) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo_];
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo_];
  }
  GeogebraCommonKernelMatrixCoordMatrix *m = nil;
  if (!isPreview_) {
    if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix] == nil) {
      if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isGeoElement3D]) {
        m = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([conic_ getCoordSys])) getMatrixOrthonormal])) inverse];
      }
    }
    else {
      if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isGeoElement3D]) {
        m = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([conic_ getCoordSys])) getMatrixOrthonormal])) inverse])) mulWithGeogebraCommonKernelMatrixCoordMatrix:[view_ getMatrix]];
      }
      else {
        m = [view_ getMatrix];
      }
    }
  }
  for (jint i = 0; i < 2; i++) {
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), i))) forceLineTypeWithInt:((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->lineType_];
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) updateWithGeogebraCommonKernelMatrixCoordMatrix:m];
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:geo_];
  }
  if (((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES || conic_->type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES || conic_->type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) {
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) getShapeWithBoolean:YES]);
    if (conic_->type_ != GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE) [((id<GeogebraCommonAwtGArea>) nil_chk(((id<GeogebraCommonAwtGArea>) check_protocol_cast(shape_DrawConic_, @protocol(GeogebraCommonAwtGArea))))) exclusiveOrWithGeogebraCommonAwtGArea:[((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) getShapeWithBoolean:YES]];
    if (GeogebraCommonEuclidianDrawDrawConic_negativeColored(self)) {
      id<GeogebraCommonAwtGArea> complement = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
      [((id<GeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithGeogebraCommonAwtGArea:(id<GeogebraCommonAwtGArea>) check_protocol_cast(shape_DrawConic_, @protocol(GeogebraCommonAwtGArea))];
      GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, complement);
    }
  }
}

- (jboolean)negativeColored {
  return GeogebraCommonEuclidianDrawDrawConic_negativeColored(self);
}

- (void)updateCircle {
  [self setShapeWithGeogebraCommonAwtGArea:nil];
  radius_ = IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale];
  yradius_ = IOSDoubleArray_Get(halfAxes_, 1) * [view_ getYscale];
  if (radius_ > GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS || yradius_ > GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  if (firstCircle_) {
    firstCircle_ = NO;
    GeogebraCommonEuclidianDrawDrawConic_set_arc_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
    if (ellipse_ == nil) GeogebraCommonEuclidianDrawDrawConic_set_ellipse_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newEllipse2DDouble]);
  }
  jint i = -1;
  jint BIG_RADIUS = [view_ getWidth] + [view_ getHeight];
  if (radius_ < BIG_RADIUS && yradius_ < BIG_RADIUS) {
    GeogebraCommonEuclidianDrawDrawConic_set_circle_(self, ellipse_);
    GeogebraCommonEuclidianDrawDrawConic_set_arcFiller_(self, nil);
    GeogebraCommonKernelMatrixCoords *M;
    if (isPreview_) M = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
    else {
      M = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
        isVisible_ = NO;
        return;
      }
      for (jint j = 0; j < 2; j++) {
        GeogebraCommonKernelMatrixCoords *ev = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]];
        if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(ev)) getZ])) {
          isVisible_ = NO;
          return;
        }
      }
    }
    mx_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getX] * [view_ getXscale] + [view_ getxZero];
    my_ = -[M getY] * [view_ getYscale] + [view_ getyZero];
    [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(ellipse_)) setFrameWithDouble:mx_ - radius_ withDouble:my_ - yradius_ withDouble:2.0 * radius_ withDouble:2.0 * yradius_];
  }
  else {
    GeogebraCommonKernelMatrixCoords *M = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
    for (jint j = 0; j < 2; j++) {
      GeogebraCommonKernelMatrixCoords *ev = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]];
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(ev)) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
    mx_ = [M getX] * [view_ getXscale] + [view_ getxZero];
    my_ = -[M getY] * [view_ getYscale] + [view_ getyZero];
    angSt_ = JavaLangDouble_NaN;
    if (mx_ < 0.0) {
      if (my_ < 0.0) {
        angSt_ = -JavaLangMath_acosWithDouble_(-mx_ / radius_);
        angEnd_ = -JavaLangMath_asinWithDouble_(-my_ / yradius_);
        i = 0;
      }
      else if (my_ > [view_ getHeight]) {
        angSt_ = JavaLangMath_asinWithDouble_((my_ - [view_ getHeight]) / yradius_);
        angEnd_ = JavaLangMath_acosWithDouble_(-mx_ / radius_);
        i = 2;
      }
      else {
        angSt_ = -JavaLangMath_asinWithDouble_(([view_ getHeight] - my_) / yradius_);
        angEnd_ = JavaLangMath_asinWithDouble_(my_ / yradius_);
        i = 1;
      }
    }
    else if (mx_ > [view_ getWidth]) {
      if (my_ < 0.0) {
        angSt_ = JavaLangMath_PI + JavaLangMath_asinWithDouble_(-my_ / yradius_);
        angEnd_ = JavaLangMath_PI + JavaLangMath_acosWithDouble_((mx_ - [view_ getWidth]) / radius_);
        i = 6;
      }
      else if (my_ > [view_ getHeight]) {
        angSt_ = JavaLangMath_PI - JavaLangMath_acosWithDouble_((mx_ - [view_ getWidth]) / radius_);
        angEnd_ = JavaLangMath_PI - JavaLangMath_asinWithDouble_((my_ - [view_ getHeight]) / yradius_);
        i = 4;
      }
      else {
        angSt_ = JavaLangMath_PI - JavaLangMath_asinWithDouble_(my_ / yradius_);
        angEnd_ = JavaLangMath_PI + JavaLangMath_asinWithDouble_(([view_ getHeight] - my_) / yradius_);
        i = 5;
      }
    }
    else if (my_ < 0.0) {
      angSt_ = JavaLangMath_PI + JavaLangMath_acosWithDouble_(mx_ / radius_);
      angEnd_ = 2 * JavaLangMath_PI - JavaLangMath_acosWithDouble_(([view_ getWidth] - mx_) / radius_);
      i = 7;
    }
    else if (my_ > [view_ getHeight]) {
      angSt_ = JavaLangMath_acosWithDouble_(([view_ getWidth] - mx_) / radius_);
      angEnd_ = JavaLangMath_PI - JavaLangMath_acosWithDouble_(mx_ / radius_);
      i = 3;
    }
    else {
      GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, GeogebraCommonEuclidianDrawDrawConic_set_circle_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[view_ getWidth] + 2 withInt:[view_ getHeight] + 2]));
      GeogebraCommonEuclidianDrawDrawConic_set_arcFiller_(self, nil);
      xLabel_ = -100;
      yLabel_ = -100;
      return;
    }
    if (JavaLangDouble_isNaNWithDouble_(angSt_) || JavaLangDouble_isNaNWithDouble_(angEnd_)) {
      angSt_ = 0.0;
      angEnd_ = 2 * JavaLangMath_PI;
    }
    GeogebraCommonEuclidianDrawDrawConic_set_circle_(self, arc_);
    [((id<GeogebraCommonAwtGArc2D>) nil_chk(arc_)) setArcWithDouble:mx_ - radius_ withDouble:my_ - yradius_ withDouble:2.0 * radius_ withDouble:2.0 * yradius_ withDouble:JavaLangMath_toDegreesWithDouble_(angSt_) withDouble:JavaLangMath_toDegreesWithDouble_(angEnd_ - angSt_) withInt:GeogebraCommonAwtGArc2D_OPEN];
    if ([conic_ getAlphaValue] > 0.0f || [conic_ isHatchingEnabled]) {
      if (gp_ == nil) GeogebraCommonEuclidianDrawDrawConic_setAndConsume_gp_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
      else [gp_ reset];
      GeogebraCommonAwtGPoint2D *sp = [arc_ getStartPoint];
      GeogebraCommonAwtGPoint2D *ep = [arc_ getEndPoint];
      switch (i) {
        case 0:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:0];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 1:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:0 withDouble:0];
        break;
        case 2:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 3:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:0 withDouble:[view_ getHeight]];
        break;
        case 4:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 5:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:0];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:[view_ getWidth] withDouble:[view_ getHeight]];
        break;
        case 6:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:[view_ getWidth] withDouble:0];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        break;
        case 7:
        [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(gp_)) moveToWithDouble:0 withDouble:0];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(sp)) getX] withDouble:[sp getY]];
        [gp_ lineToWithDouble:[((GeogebraCommonAwtGPoint2D *) nil_chk(ep)) getX] withDouble:[ep getY]];
        [gp_ lineToWithDouble:[view_ getWidth] withDouble:0];
        break;
        default:
        GeogebraCommonEuclidianDrawDrawConic_set_gp_(self, nil);
      }
      GeogebraCommonEuclidianDrawDrawConic_set_arcFiller_(self, gp_);
    }
  }
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, circle_);
  xLabel_ = J2ObjCFpToInt((mx_ - radius_ / 2.0));
  yLabel_ = J2ObjCFpToInt((my_ - yradius_ * 0.85)) + 20;
}

- (void)updateEllipse {
  [self setShapeWithGeogebraCommonAwtGArea:nil];
  jdouble xRadius = IOSDoubleArray_Get(nil_chk(halfAxes_), 0) * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXscale];
  jdouble yRadius = IOSDoubleArray_Get(halfAxes_, 1) * [view_ getYscale];
  if (xRadius > GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS || yRadius > GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  GeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelMatrixCoords_class_()]);
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [view_ getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvec3DWithInt:j]]);
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  if (firstEllipse_) {
    firstEllipse_ = NO;
    if (ellipse_ == nil) GeogebraCommonEuclidianDrawDrawConic_set_ellipse_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble]);
  }
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  [transform_ concatenateWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithGeogebraCommonKernelKernelNDGeoConicND:conic_ withGeogebraCommonKernelMatrixCoords:M withGeogebraCommonKernelMatrixCoordsArray:ev_]];
  [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(ellipse_)) setFrameFromCenterWithDouble:0 withDouble:0 withDouble:IOSDoubleArray_Get(halfAxes_, 0) withDouble:IOSDoubleArray_Get(halfAxes_, 1)];
  jint BIG_RADIUS = [view_ getWidth] + [view_ getHeight];
  if (xRadius < BIG_RADIUS && yRadius < BIG_RADIUS) {
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, [transform_ createTransformedShapeWithGeogebraCommonAwtGShape:ellipse_]);
  }
  else {
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, GeogebraCommonEuclidianClippingClipShape_clipToRectWithGeogebraCommonAwtGShape_withGeogebraCommonAwtGAffineTransform_withGeogebraCommonAwtGRectangle2D_(ellipse_, transform_, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:-1 withInt:-1 withInt:[view_ getWidth] + 2 withInt:[view_ getHeight] + 2]));
  }
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = -IOSDoubleArray_Get(halfAxes_, 0) / 2.0;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = IOSDoubleArray_Get(halfAxes_, 1) * 0.85 - 20.0 / [view_ getYscale];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
}

- (void)updateHyperbolaEdge {
  isVisible_ = NO;
}

- (void)updateHyperbola {
  GeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getMidpoint3D]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelMatrixCoords_class_()]);
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getEigenvec3DWithInt:j]]);
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  [self updateHyperbolaResetPaths];
  a_ = IOSDoubleArray_Get(nil_chk(halfAxes_), 0);
  b_ = IOSDoubleArray_Get(halfAxes_, 1);
  [self updateHyperbolaX0];
  if (x0_ <= a_) {
    isVisible_ = NO;
    return;
  }
  n_ = GeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS + J2ObjCFpToInt((JavaLangMath_absWithDouble_(x0_ - a_) / ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmax] - [view_ getXmin]))) * 10;
  if (points_ != n_) {
    points_ = JavaLangMath_minWithInt_withInt_(n_, GeogebraCommonEuclidianDrawDrawConic_MAX_PLOT_POINTS);
  }
  step_ = JavaLangMath_sqrtWithDouble_((x0_ - a_) / (x0_ + a_)) / (points_ - 1);
  [self updateHyperbolaAddPointWithInt:points_ - 1 withDouble:a_ withDouble:0];
  t_ = step_;
  jint i = 1;
  index0_ = points_;
  index1_ = points_ - 2;
  while (index1_ >= 0) {
    tsq_ = t_ * t_;
    denom_ = 1.0 - tsq_;
    x_ = (a_ * (1.0 + tsq_) / denom_);
    y_ = (2.0 * b_ * t_ / denom_);
    [self updateHyperbolaAddPointWithInt:index0_ withDouble:x_ withDouble:y_];
    [self updateHyperbolaAddPointWithInt:index1_ withDouble:x_ withDouble:-y_];
    index0_++;
    index1_--;
    i++;
    t_ = i * step_;
  }
  [self updateHyperbolaClosePaths];
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[view_ getCoordTransform]];
  [transform_ concatenateWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithGeogebraCommonKernelKernelNDGeoConicND:conic_ withGeogebraCommonKernelMatrixCoords:M withGeogebraCommonKernelMatrixCoordsArray:ev_]];
  [self updateHyperboalSetTransformToPaths];
  [self updateHyperbolaLabelCoords];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(labelCoords_), 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
  [self updateHyperbolaSetShape];
}

- (void)updateHyperbolaLabelCoords {
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = 2.0 * a_;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = b_ * 1.7 - 20.0 / [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYscale];
}

- (void)updateHyperbolaResetPaths {
  if (firstHyperbola_) {
    firstHyperbola_ = NO;
    points_ = GeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS;
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_hypRight_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_hypLeft_(self, new_GeogebraCommonEuclidianGeneralPathClipped_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(view_));
  }
  else {
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) reset];
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) reset];
  }
}

- (void)updateHyperbolaX0 {
  x0_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(midpoint_)) getX] - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin]), JavaLangMath_absWithDouble_([midpoint_ getX] - [view_ getXmax])), JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([midpoint_ getY] - [view_ getYmin]), JavaLangMath_absWithDouble_([midpoint_ getY] - [view_ getYmax])));
  x0_ *= 1.5;
}

- (void)updateHyperbolaAddPointWithInt:(jint)index
                            withDouble:(jdouble)x1
                            withDouble:(jdouble)y1 {
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) addPointWithInt:index withDouble:x1 withDouble:y1];
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) addPointWithInt:index withDouble:-x1 withDouble:y1];
}

- (void)updateHyperboalSetTransformToPaths {
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) transformWithGeogebraCommonAwtGAffineTransform:transform_];
  [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) transformWithGeogebraCommonAwtGAffineTransform:transform_];
}

- (void)updateHyperbolaClosePaths {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) getAlphaValue] > 0.0f || [conic_ isHatchingEnabled]) {
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypRight_)) lineToWithDouble:JavaLangFloat_MAX_VALUE withDouble:y_];
    [hypRight_ lineToWithDouble:JavaLangFloat_MAX_VALUE withDouble:-y_];
    [((GeogebraCommonEuclidianGeneralPathClipped *) nil_chk(hypLeft_)) lineToWithDouble:-JavaLangFloat_MAX_VALUE withDouble:y_];
    [hypLeft_ lineToWithDouble:-JavaLangFloat_MAX_VALUE withDouble:-y_];
  }
}

- (void)updateHyperbolaSetShape {
  [self setShapeWithGeogebraCommonAwtGArea:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:hypLeft_]];
  [((id<GeogebraCommonAwtGArea>) nil_chk([super getShape])) addWithGeogebraCommonAwtGArea:[GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:hypRight_]];
}

- (void)updateParabolaEdge {
  isVisible_ = NO;
}

- (void)updateParabola {
  if (((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_ > GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS) {
    isVisible_ = NO;
    return;
  }
  GeogebraCommonKernelMatrixCoords *M;
  if (isPreview_) {
    M = [((GeogebraCommonKernelMatrixCoords *) nil_chk([conic_ getMidpoint3D])) getInhomCoords];
  }
  else {
    M = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[conic_ getMidpoint3D]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(M)) getZ])) {
      isVisible_ = NO;
      return;
    }
  }
  if (ev_ == nil) {
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_ev_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelMatrixCoords_class_()]);
  }
  if (isPreview_) {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [conic_ getEigenvecWithInt:j]);
    }
  }
  else {
    for (jint j = 0; j < 2; j++) {
      IOSObjectArray_Set(nil_chk(ev_), j, [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[conic_ getEigenvec3DWithInt:j]]);
      if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(ev_, j))) getZ])) {
        isVisible_ = NO;
        return;
      }
    }
  }
  if (firstParabola_) {
    firstParabola_ = NO;
    GeogebraCommonEuclidianDrawDrawConic_set_parabola_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
  }
  [self updateParabolaX0Y0];
  [((id<GeogebraCommonAwtGAffineTransform>) nil_chk(transform_)) setTransformWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordTransform]];
  [transform_ concatenateWithGeogebraCommonAwtGAffineTransform:[((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk([view_ getCompanion])) getTransformWithGeogebraCommonKernelKernelNDGeoConicND:conic_ withGeogebraCommonKernelMatrixCoords:M withGeogebraCommonKernelMatrixCoordsArray:ev_]];
  *IOSDoubleArray_GetRef(nil_chk(parpoints_), 0) = x0_;
  *IOSDoubleArray_GetRef(parpoints_, 1) = y0_;
  *IOSDoubleArray_GetRef(parpoints_, 2) = -x0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 3) = y0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 4) = -x0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 5) = -y0_ / 3;
  *IOSDoubleArray_GetRef(parpoints_, 6) = x0_;
  *IOSDoubleArray_GetRef(parpoints_, 7) = -y0_;
  [transform_ transformWithDoubleArray:parpoints_ withInt:0 withDoubleArray:parpoints_ withInt:0 withInt:4];
  [self updateParabolaPath];
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, parabola_);
  [self updateParabolaLabelCoords];
  [transform_ transformWithDoubleArray:labelCoords_ withInt:0 withDoubleArray:labelCoords_ withInt:0 withInt:1];
  xLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(nil_chk(labelCoords_), 0));
  yLabel_ = J2ObjCFpToInt(IOSDoubleArray_Get(labelCoords_, 1));
}

- (void)updateParabolaLabelCoords {
  *IOSDoubleArray_GetRef(nil_chk(labelCoords_), 0) = 2 * ((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_;
  *IOSDoubleArray_GetRef(labelCoords_, 1) = IOSDoubleArray_Get(labelCoords_, 0) - 20.0 / [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getYscale];
}

- (void)updateParabolaX0Y0 {
  x0_ = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(vertex_)) getX] - [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getXmin]), JavaLangMath_absWithDouble_([vertex_ getX] - [view_ getXmax]));
  x0_ = JavaLangMath_maxWithDouble_withDouble_(x0_, JavaLangMath_absWithDouble_([vertex_ getY] - [view_ getYmin]));
  x0_ = JavaLangMath_maxWithDouble_withDouble_(x0_, JavaLangMath_absWithDouble_([vertex_ getY] - [view_ getYmax]));
  x0_ = 4 * x0_ / ((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_))->p_;
  jdouble i = 4;
  k2_ = 16;
  while (k2_ < x0_) {
    i += 2;
    k2_ = i * i;
  }
  x0_ = k2_ / 2 * conic_->p_;
  y0_ = i * conic_->p_;
}

- (void)updateParabolaPath {
  [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(parabola_)) reset];
  [parabola_ moveToWithFloat:(jfloat) IOSDoubleArray_Get(nil_chk(parpoints_), 0) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 1)];
  [parabola_ curveToWithFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 2) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 3) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 4) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 5) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 6) withFloat:(jfloat) IOSDoubleArray_Get(parpoints_, 7)];
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawConic_drawWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)drawLinesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) drawWithGeogebraCommonAwtGGraphics2D:g2];
  [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) drawWithGeogebraCommonAwtGGraphics2D:g2];
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
  }
  else [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:shape_DrawConic_ withBoolean:NO];
}

- (void)drawHyperbolaWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInverseFill]) {
    id<GeogebraCommonAwtGArea> a1 = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAreaWithGeogebraCommonAwtGShape:hypLeft_];
    id<GeogebraCommonAwtGArea> a2 = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:hypRight_];
    id<GeogebraCommonAwtGArea> complement = [GeogebraCommonFactoriesAwtFactory_get_prototype_() newAreaWithGeogebraCommonAwtGShape:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getBoundingPath]];
    [((id<GeogebraCommonAwtGArea>) nil_chk(complement)) subtractWithGeogebraCommonAwtGArea:a1];
    [complement subtractWithGeogebraCommonAwtGArea:a2];
    [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:complement withBoolean:NO];
  }
  else {
    if (hypLeftOnScreen_) [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:hypLeft_ withBoolean:YES];
    if (hypRightOnScreen_) [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:hypRight_ withBoolean:YES];
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:selStroke_];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getSelColor]];
    if (hypLeftOnScreen_) [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:hypLeft_];
    if (hypRightOnScreen_) [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:hypRight_];
  }
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:objStroke_];
  [g2 setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  if (hypLeftOnScreen_) [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:hypLeft_];
  if (hypRightOnScreen_) [g2 drawWithValueStrokePureWithGeogebraCommonAwtGShape:hypRight_];
  if (labelVisible_) {
    [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getFontConic]];
    [g2 setColorWithGeogebraCommonAwtGColor:[geo_ getLabelColor]];
    [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
  }
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || ![geo_ isEuclidianVisible]) return nil;
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) getBounds];
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return [((id<GeogebraCommonAwtGShape>) nil_chk(shape_DrawConic_)) getBounds];
    default:
    return nil;
  }
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawConic_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (jboolean)checkIsOnFilling {
  return [self isFilled] && type_ != GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT && type_ != GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE;
}

- (jboolean)hitWithInt:(jint)hitX
               withInt:(jint)hitY
               withInt:(jint)hitThreshold {
  if (!isVisible_) return NO;
  jboolean isOnFilling = NO;
  if ([self checkIsOnFilling]) {
    jdouble realX = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toRealWorldCoordXWithDouble:hitX];
    jdouble realY = [view_ toRealWorldCoordYWithDouble:hitY];
    jdouble x3 = [view_ toRealWorldCoordXWithDouble:3] - [view_ toRealWorldCoordXWithDouble:0];
    jdouble y3 = [view_ toRealWorldCoordYWithDouble:3] - [view_ toRealWorldCoordYWithDouble:0];
    jint insideNeigbors = ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) isInRegionWithDouble:realX withDouble:realY] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX - x3 withDouble:realY - y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX + x3 withDouble:realY - y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX - x3 withDouble:realY + y3] ? 1 : 0) + ([conic_ isInRegionWithDouble:realX + x3 withDouble:realY + y3] ? 1 : 0);
    if ([conic_ isInverseFill]) isOnFilling = (insideNeigbors < 5);
    else isOnFilling = (insideNeigbors > 0);
  }
  jboolean isOnBoundary = NO;
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    isOnBoundary = [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    isOnBoundary = [self hitLinesWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    isOnBoundary = [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    if (strokedShape_ == nil) {
      GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:shape_DrawConic_]);
    }
    isOnBoundary = [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    isOnBoundary = [self hitEllipseWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    isOnBoundary = [self hitHyperbolaWithInt:hitX withInt:hitY withInt:hitThreshold];
    break;
  }
  if (isOnFilling) {
    if (isOnBoundary) {
      [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithGeogebraCommonKernelGeosGeoElement_HitTypeEnum:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()];
      return YES;
    }
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithGeogebraCommonKernelGeosGeoElement_HitTypeEnum:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING()];
    return YES;
  }
  if (isOnBoundary) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithGeogebraCommonKernelGeosGeoElement_HitTypeEnum:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY()];
    return YES;
  }
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(conic_)) setLastHitTypeWithGeogebraCommonKernelGeosGeoElement_HitTypeEnum:GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_NONE()];
  return NO;
}

- (jboolean)hitLinesWithInt:(jint)hitX
                    withInt:(jint)hitY
                    withInt:(jint)hitThreshold {
  return [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) hitWithInt:hitX withInt:hitY withInt:hitThreshold] || [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) hitWithInt:hitX withInt:hitY withInt:hitThreshold];
}

- (jboolean)hitHyperbolaWithInt:(jint)hitX
                        withInt:(jint)hitY
                        withInt:(jint)hitThreshold {
  if (strokedShape_ == nil) {
    GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:hypLeft_]);
    GeogebraCommonEuclidianDrawable_set_strokedShape2_(self, [objStroke_ createStrokedShapeWithGeogebraCommonAwtGShape:hypRight_]);
  }
  return [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold] || [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape2_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)hitEllipseWithInt:(jint)hitX
                      withInt:(jint)hitY
                      withInt:(jint)hitThreshold {
  if (strokedShape_ == nil) {
    GeogebraCommonEuclidianDrawable_set_strokedShape_(self, [((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) createStrokedShapeWithGeogebraCommonAwtGShape:shape_DrawConic_]);
  }
  return [((id<GeogebraCommonAwtGShape>) nil_chk(strokedShape_)) intersectsWithInt:hitX - hitThreshold withInt:hitY - hitThreshold withInt:2 * hitThreshold withInt:2 * hitThreshold];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    return [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) isInsideWithGeogebraCommonAwtGRectangle:rect];
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    return rect != nil && shape_DrawConic_ != nil && [rect containsWithGeogebraCommonAwtGRectangle2D:[shape_DrawConic_ getBounds]];
  }
  return NO;
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if (type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT) {
    return [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(drawPoint_)) intersectsRectangleWithGeogebraCommonAwtGRectangle:rect];
  }
  if (type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE) {
    return [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(drawLines__), 0))) intersectsRectangleWithGeogebraCommonAwtGRectangle:rect] || [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, 1))) intersectsRectangleWithGeogebraCommonAwtGRectangle:rect];
  }
  if ([self isFilled]) {
    return [super intersectsRectangleWithGeogebraCommonAwtGRectangle:rect];
  }
  if (shape_DrawConic_ != nil) {
    return [shape_DrawConic_ intersectsWithGeogebraCommonAwtGRectangle2D:rect] && ![shape_DrawConic_ containsWithGeogebraCommonAwtGRectangle2D:rect];
  }
  if ([super getShape] != nil) {
    return [((id<GeogebraCommonAwtGArea>) nil_chk([super getShape])) intersectsWithGeogebraCommonAwtGRectangle2D:rect] && ![((id<GeogebraCommonAwtGArea>) nil_chk([super getShape])) containsWithGeogebraCommonAwtGRectangle2D:rect];
  }
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
  if (drawLines__ != nil) for (jint i = 0; i < 2 && IOSObjectArray_Get(drawLines__, i) != nil; i++) [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(drawLines__, i))) setGeoElementWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)initPreview {
  GeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

- (void)updatePreview {
  switch (previewMode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
    isVisible_ = (conic_ != nil && ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2 || [((JavaUtilArrayList *) nil_chk(prevSegments_)) size] == 1 || [((JavaUtilArrayList *) nil_chk(prevConics_)) size] == 1));
    if (isVisible_) {
      if ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2) {
        id<GeogebraCommonKernelKernelNDGeoPointND> p1 = [prevPoints_ getWithInt:0];
        id<GeogebraCommonKernelKernelNDGeoPointND> p2 = [prevPoints_ getWithInt:1];
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:p2]];
      }
      else if ([((JavaUtilArrayList *) nil_chk(prevSegments_)) size] == 1) {
        id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = [prevSegments_ getWithInt:0];
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) getLength]];
      }
      else if ([((JavaUtilArrayList *) nil_chk(prevConics_)) size] == 1) {
        GeogebraCommonKernelKernelNDGeoConicND *prevCircle = [prevConics_ getWithInt:0];
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) setValueWithDouble:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(prevCircle)) getCircleRadius]];
      }
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(previewTempRadius_)) updateCascade];
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
    isVisible_ = ([((JavaUtilArrayList *) nil_chk(prevLines_)) size] == 1);
    if ([prevLines_ size] > 0) {
      id<GeogebraCommonKernelKernelNDGeoLineND> lND = [prevLines_ getWithInt:0];
      GeogebraCommonKernelMatrixCoords *equation = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(lND)) getCartesianEquationVectorWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getMatrix]];
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(previewTempLine_)) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(equation)) getX] withDouble:[equation getY] withDouble:[equation getZ]];
    }
    if ([((JavaUtilArrayList *) nil_chk(prevPoints_)) size] > 0) {
      GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:0])) getInhomCoordsInD3]];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:YES];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 0))) updateCascade];
    }
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    isVisible_ = (conic_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == neededPrevPoints_);
    if (isVisible_) {
      GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((JavaUtilArrayList *) nil_chk(prevPoints_)) getWithInt:0])) getInhomCoordsInD3]];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 0))) getConstruction];
      GeogebraCommonKernelArithmeticMyDouble *distance = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, 1))) distanceWithGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(previewTempPoints_, 0)]) autorelease];
      GeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircleRadius = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(previewTempPoints_, 0), distance) autorelease];
      [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCircleRadius];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algoCircleRadius getCircle]);
      [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) updateCascade];
    }
    break;
    default:
    isVisible_ = (conic_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == neededPrevPoints_);
    if (isVisible_) {
      for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(prevPoints_)) size]; i++) {
        GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:i])) getInhomCoordsInD3]];
        [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      }
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) updateCascade];
    }
  }
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
  if (isVisible_) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, ((IOSObjectArray *) nil_chk(previewTempPoints_))->size_ - 1))) setCoordsWithDouble:xRW withDouble:yRW withDouble:1.0];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, previewTempPoints_->size_ - 1))) updateCascade];
    GeogebraCommonEuclidianDrawDrawConic_update(self);
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawConic_drawWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)disposePreview {
  if (conic_ != nil) {
    [conic_ remove];
  }
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getConic {
  return conic_;
}

- (void)setIgnoreSingularitiesWithBoolean:(jboolean)ignore {
  self->ignoreSingularities_ = ignore;
}

- (void)dealloc {
  RELEASE_(conic_);
  RELEASE_(labelCoords_);
  RELEASE_(point_);
  RELEASE_(drawPoint_);
  RELEASE_(lines_);
  RELEASE_(drawLines__);
  RELEASE_(midpoint_);
  RELEASE_(arc_);
  RELEASE_(arcFiller_);
  RELEASE_(gp_);
  RELEASE_(circle_);
  RELEASE_(transform_);
  RELEASE_(shape_DrawConic_);
  RELEASE_(halfAxes_);
  RELEASE_(ellipse_);
  RELEASE_(vertex_);
  RELEASE_(parabola_);
  RELEASE_(parpoints_);
  RELEASE_(hypLeft_);
  RELEASE_(hypRight_);
  RELEASE_(prevPoints_);
  RELEASE_(prevSegments_);
  RELEASE_(prevLines_);
  RELEASE_(prevConics_);
  RELEASE_(previewTempPoints_);
  RELEASE_(previewTempLine_);
  RELEASE_(previewTempRadius_);
  RELEASE_(ev_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getShape", NULL, "Lgeogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelKernelNDGeoConicND:withBoolean:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initConicWithGeogebraCommonKernelKernelNDGeoConicND:", "initConic", "V", 0x2, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withInt:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withInt:withJavaUtilArrayList:withJavaUtilArrayList:withJavaUtilArrayList:", "DrawConic", NULL, 0x1, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "checkCircleEllipseParabolaOnScreenWithGeogebraCommonAwtGRectangle:", "checkCircleEllipseParabolaOnScreen", "Z", 0x4, NULL, NULL },
    { "checkHyperbolaOnScreenWithGeogebraCommonAwtGRectangle:", "checkHyperbolaOnScreen", "Z", 0x4, NULL, NULL },
    { "updateSinglePoint", NULL, "V", 0x12, NULL, NULL },
    { "updateDoubleLine", NULL, "V", 0x4, NULL, NULL },
    { "updateLines", NULL, "V", 0x4, NULL, NULL },
    { "negativeColored", NULL, "Z", 0x2, NULL, NULL },
    { "updateCircle", NULL, "V", 0x4, NULL, NULL },
    { "updateEllipse", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbola", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaResetPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaX0", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaAddPointWithInt:withDouble:withDouble:", "updateHyperbolaAddPoint", "V", 0x4, NULL, NULL },
    { "updateHyperboalSetTransformToPaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaClosePaths", NULL, "V", 0x4, NULL, NULL },
    { "updateHyperbolaSetShape", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaEdge", NULL, "V", 0x4, NULL, NULL },
    { "updateParabola", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaLabelCoords", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaX0Y0", NULL, "V", 0x4, NULL, NULL },
    { "updateParabolaPath", NULL, "V", 0x4, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "drawLinesWithGeogebraCommonAwtGGraphics2D:", "drawLines", "V", 0x4, NULL, NULL },
    { "drawHyperbolaWithGeogebraCommonAwtGGraphics2D:", "drawHyperbola", "V", 0x4, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x11, NULL, NULL },
    { "checkIsOnFilling", NULL, "Z", 0x4, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "hitLinesWithInt:withInt:withInt:", "hitLines", "Z", 0x1, NULL, NULL },
    { "hitHyperbolaWithInt:withInt:withInt:", "hitHyperbola", "Z", 0x1, NULL, NULL },
    { "hitEllipseWithInt:withInt:withInt:", "hitEllipse", "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "initPreview", NULL, "V", 0x2, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "getConic", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "setIgnoreSingularitiesWithBoolean:", "setIgnoreSingularities", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "PLOT_POINTS_", NULL, 0x1c, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawConic_PLOT_POINTS },
    { "MAX_PLOT_POINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonEuclidianDrawDrawConic_MAX_PLOT_POINTS },
    { "HUGE_RADIUS_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonEuclidianDrawDrawConic_HUGE_RADIUS },
    { "conic_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "isVisible_", NULL, 0x4, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x4, "Z", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "labelCoords_", NULL, 0x4, "[D", NULL, NULL,  },
    { "firstPoint_", NULL, 0x2, "Z", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "drawPoint_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawPoint;", NULL, NULL,  },
    { "firstLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "lines_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "drawLines__", "drawLines", 0x2, "[Lgeogebra.common.euclidian.draw.DrawLine;", NULL, NULL,  },
    { "firstCircle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "midpoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "arc_", NULL, 0x2, "Lgeogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "arcFiller_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "gp_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "circle_", NULL, 0x2, "Lgeogebra.common.awt.GRectangularShape;", NULL, NULL,  },
    { "mx_", NULL, 0x2, "D", NULL, NULL,  },
    { "my_", NULL, 0x2, "D", NULL, NULL,  },
    { "radius_", NULL, 0x2, "D", NULL, NULL,  },
    { "yradius_", NULL, 0x2, "D", NULL, NULL,  },
    { "angSt_", NULL, 0x2, "D", NULL, NULL,  },
    { "angEnd_", NULL, 0x2, "D", NULL, NULL,  },
    { "transform_", NULL, 0x4, "Lgeogebra.common.awt.GAffineTransform;", NULL, NULL,  },
    { "shape_DrawConic_", "shape", 0x4, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "firstEllipse_", NULL, 0x2, "Z", NULL, NULL,  },
    { "halfAxes_", NULL, 0x4, "[D", NULL, NULL,  },
    { "ellipse_", NULL, 0x2, "Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "firstParabola_", NULL, 0x2, "Z", NULL, NULL,  },
    { "x0_", NULL, 0x4, "D", NULL, NULL,  },
    { "y0_", NULL, 0x4, "D", NULL, NULL,  },
    { "k2_", NULL, 0x2, "D", NULL, NULL,  },
    { "vertex_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVec2D;", NULL, NULL,  },
    { "parabola_", NULL, 0x4, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "parpoints_", NULL, 0x2, "[D", NULL, NULL,  },
    { "firstHyperbola_", NULL, 0x4, "Z", NULL, NULL,  },
    { "a_", NULL, 0x4, "D", NULL, NULL,  },
    { "b_", NULL, 0x2, "D", NULL, NULL,  },
    { "tsq_", NULL, 0x2, "D", NULL, NULL,  },
    { "step_", NULL, 0x2, "D", NULL, NULL,  },
    { "t_", NULL, 0x2, "D", NULL, NULL,  },
    { "denom_", NULL, 0x2, "D", NULL, NULL,  },
    { "x_", NULL, 0x2, "D", NULL, NULL,  },
    { "y_", NULL, 0x2, "D", NULL, NULL,  },
    { "index0_", NULL, 0x2, "I", NULL, NULL,  },
    { "index1_", NULL, 0x2, "I", NULL, NULL,  },
    { "n_", NULL, 0x2, "I", NULL, NULL,  },
    { "points_", NULL, 0x4, "I", NULL, NULL,  },
    { "hypLeft_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "hypRight_", NULL, 0x2, "Lgeogebra.common.euclidian.GeneralPathClipped;", NULL, NULL,  },
    { "hypLeftOnScreen_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hypRightOnScreen_", NULL, 0x2, "Z", NULL, NULL,  },
    { "prevPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "prevSegments_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoSegmentND;>;",  },
    { "prevLines_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoLineND;>;",  },
    { "prevConics_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoConicND;>;",  },
    { "previewTempPoints_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "previewTempLine_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "previewTempRadius_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "neededPrevPoints_", NULL, 0x2, "I", NULL, NULL,  },
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ignoreSingularities_", NULL, 0x2, "Z", NULL, NULL,  },
    { "ev_", NULL, 0x4, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawConic = { 2, "DrawConic", "geogebra.common.euclidian.draw", NULL, 0x1, 50, methods, 67, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawConic;
}

@end

void GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelKernelNDGeoConicND *c, jboolean ignoreSingularities) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_labelCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_set_transform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_parpoints_(self, [IOSDoubleArray newArrayWithLength:8]);
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  self->isPreview_ = NO;
  self->ignoreSingularities_ = ignoreSingularities;
  GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, c);
  GeogebraCommonEuclidianDrawDrawConic_update(self);
}

GeogebraCommonEuclidianDrawDrawConic *new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelKernelNDGeoConicND *c, jboolean ignoreSingularities) {
  GeogebraCommonEuclidianDrawDrawConic *self = [GeogebraCommonEuclidianDrawDrawConic alloc];
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoConicND_withBoolean_(self, view, c, ignoreSingularities);
  return self;
}

void GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonEuclidianDrawDrawConic_set_conic_(self, c);
  GeogebraCommonEuclidianDrawable_set_geo_(self, c);
  GeogebraCommonEuclidianDrawDrawConic_set_vertex_(self, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) getTranslationVector]);
  GeogebraCommonEuclidianDrawDrawConic_set_midpoint_(self, self->vertex_);
  GeogebraCommonEuclidianDrawDrawConic_set_halfAxes_(self, [c getHalfAxes]);
  [c getAffineTransform];
}

void GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_labelCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_set_transform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_parpoints_(self, [IOSDoubleArray newArrayWithLength:8]);
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawConic_set_prevPoints_(self, points);
  self->previewMode_ = mode;
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  switch (mode) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
    self->neededPrevPoints_ = 1;
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
    case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
    self->neededPrevPoints_ = 2;
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
    self->neededPrevPoints_ = 4;
    break;
  }
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:self->neededPrevPoints_ + 1 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < self->previewTempPoints_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->previewTempPoints_, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  }
  GeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

GeogebraCommonEuclidianDrawDrawConic *new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawDrawConic *self = [GeogebraCommonEuclidianDrawDrawConic alloc];
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_(self, view, mode, points);
  return self;
}

void GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *selectedLines) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_labelCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_set_transform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_parpoints_(self, [IOSDoubleArray newArrayWithLength:8]);
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawConic_set_prevPoints_(self, points);
  GeogebraCommonEuclidianDrawDrawConic_set_prevLines_(self, selectedLines);
  self->neededPrevPoints_ = 1;
  self->previewMode_ = GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA;
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  if ([((JavaUtilArrayList *) nil_chk(selectedLines)) size] == 0) {
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_previewTempLine_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  }
  else {
    GeogebraCommonEuclidianDrawDrawConic_set_previewTempLine_(self, (GeogebraCommonKernelGeosGeoLine *) check_class_cast([selectedLines getWithInt:0], [GeogebraCommonKernelGeosGeoLine class]));
  }
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  IOSObjectArray_SetAndConsume(self->previewTempPoints_, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

GeogebraCommonEuclidianDrawDrawConic *new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points, JavaUtilArrayList *selectedLines) {
  GeogebraCommonEuclidianDrawDrawConic *self = [GeogebraCommonEuclidianDrawDrawConic alloc];
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, points, selectedLines);
  return self;
}

void GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawConic *self, GeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points, JavaUtilArrayList *segments, JavaUtilArrayList *conics) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_labelCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
  self->firstPoint_ = YES;
  self->firstLines_ = YES;
  self->firstCircle_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_set_transform_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newAffineTransform]);
  self->firstEllipse_ = YES;
  self->firstParabola_ = YES;
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_parpoints_(self, [IOSDoubleArray newArrayWithLength:8]);
  self->firstHyperbola_ = YES;
  self->isPreview_ = NO;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawConic_set_prevPoints_(self, points);
  GeogebraCommonEuclidianDrawDrawConic_set_prevSegments_(self, segments);
  GeogebraCommonEuclidianDrawDrawConic_set_prevConics_(self, conics);
  self->previewMode_ = mode;
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_previewTempRadius_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonEuclidianDrawDrawConic_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  IOSObjectArray_SetAndConsume(self->previewTempPoints_, 0, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonEuclidianDrawDrawConic_initPreview(self);
}

GeogebraCommonEuclidianDrawDrawConic *new_GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, jint mode, JavaUtilArrayList *points, JavaUtilArrayList *segments, JavaUtilArrayList *conics) {
  GeogebraCommonEuclidianDrawDrawConic *self = [GeogebraCommonEuclidianDrawDrawConic alloc];
  GeogebraCommonEuclidianDrawDrawConic_initWithGeogebraCommonEuclidianEuclidianView_withInt_withJavaUtilArrayList_withJavaUtilArrayList_withJavaUtilArrayList_(self, view, mode, points, segments, conics);
  return self;
}

void GeogebraCommonEuclidianDrawDrawConic_update(GeogebraCommonEuclidianDrawDrawConic *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  if (!self->isVisible_) return;
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->conic_];
  self->type_ = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getType];
  switch (self->type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
    [self setShapeWithGeogebraCommonAwtGArea:nil];
    GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, nil);
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    GeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(self);
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    [self updateDoubleLine];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    [self updateLines];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    [self updateCircle];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    [self updateEllipse];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    [self updateHyperbola];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    [self updateParabola];
    break;
  }
  if (!self->isVisible_) return;
  id<GeogebraCommonAwtGRectangle> viewRect = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0 withInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getWidth] withInt:[self->view_ getHeight]];
  switch (self->type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    self->isVisible_ = [self checkCircleEllipseParabolaOnScreenWithGeogebraCommonAwtGRectangle:viewRect];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    self->isVisible_ = [self checkHyperbolaOnScreenWithGeogebraCommonAwtGRectangle:viewRect];
    break;
  }
  if (!self->isVisible_) return;
  if ([self->conic_ getTrace]) {
    self->isTracing__ = YES;
    id<GeogebraCommonAwtGGraphics2D> g2 = [self->view_ getBackgroundGraphics];
    if (g2 != nil) GeogebraCommonEuclidianDrawDrawConic_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
  else {
    if (self->isTracing__) {
      self->isTracing__ = NO;
    }
  }
  if (self->labelVisible_) {
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->geo_ getLabelDescription]);
    [self addLabelOffset];
  }
}

void GeogebraCommonEuclidianDrawDrawConic_updateSinglePoint(GeogebraCommonEuclidianDrawDrawConic *self) {
  GeogebraCommonEuclidianDrawDrawConic_set_shape_DrawConic_(self, nil);
  if (self->firstPoint_) {
    self->firstPoint_ = NO;
    GeogebraCommonEuclidianDrawDrawConic_set_point_(self, [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getSinglePoint]);
    if (self->point_ == nil) GeogebraCommonEuclidianDrawDrawConic_setAndConsume_point_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([self->conic_ getConstruction]));
    GeogebraCommonEuclidianDrawDrawConic_setAndConsume_drawPoint_(self, new_GeogebraCommonEuclidianDrawDrawPoint_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelKernelNDGeoPointND_withBoolean_(self->view_, self->point_, self->isPreview_));
    [self->drawPoint_ setGeoElementWithGeogebraCommonKernelGeosGeoElement:self->conic_];
  }
  [self setShapeWithGeogebraCommonAwtGArea:!self->ignoreSingularities_ ? [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) getDot] : nil];
  GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) getMidpoint3D]];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getZ])) {
    self->isVisible_ = NO;
    return;
  }
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(coords, 0) = [p getX];
  *IOSDoubleArray_GetRef(coords, 1) = [p getY];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) copyLabelWithGeogebraCommonKernelGeosGeoElement:self->conic_];
  [self->point_ setObjColorWithGeogebraCommonAwtGColor:[self->conic_ getObjectColor]];
  [self->point_ setLabelColorWithGeogebraCommonAwtGColor:[self->conic_ getLabelColor]];
  [self->point_ setPointSizeWithInt:self->conic_->lineThickness_];
  [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) updateWithDoubleArray:coords];
}

jboolean GeogebraCommonEuclidianDrawDrawConic_negativeColored(GeogebraCommonEuclidianDrawDrawConic *self) {
  IOSDoubleArray *xTry = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 10, 20, 0, 10, 20 } count:6];
  IOSDoubleArray *yTry = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 0, 0, 10, 10, 20 } count:6];
  for (jint i = 0; i < 6; i++) {
    jdouble val1 = [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) evaluateWithDouble:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) toRealWorldCoordXWithDouble:IOSDoubleArray_Get(xTry, i)] withDouble:[self->view_ toRealWorldCoordYWithDouble:IOSDoubleArray_Get(yTry, i)]];
    if (self->conic_->type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES) val1 *= [self->conic_ evaluateWithDouble:[((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->conic_->b_)) getX] + ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->lines_), 0)))->x_ + ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->x_ withDouble:[self->conic_->b_ getY] + ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 0)))->y_ + ((GeogebraCommonKernelGeosGeoLine *) nil_chk(IOSObjectArray_Get(self->lines_, 1)))->y_];
    if (self->conic_->type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES) val1 *= [self->conic_ evaluateWithDouble:[((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(self->conic_->b_)) getX] withDouble:[self->conic_->b_ getY]];
    if (!GeogebraCommonKernelKernel_isZeroWithDouble_(val1)) return (val1 > 0) ^ [((id<GeogebraCommonAwtGShape>) nil_chk(self->shape_DrawConic_)) containsWithDouble:IOSDoubleArray_Get(xTry, i) withDouble:IOSDoubleArray_Get(yTry, i)];
  }
  return NO;
}

void GeogebraCommonEuclidianDrawDrawConic_drawWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawConic *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (!self->isVisible_) return;
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  {
    jint pointType;
    switch (self->type_) {
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
      if ((self->conic_ == self->geo_ && [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isInverseFill] != [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
        pointType = GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_CIRCLE;
      }
      else {
        pointType = GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT;
      }
      if (!self->ignoreSingularities_) {
        [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) setPointStyleWithInt:pointType];
        [self->drawPoint_ drawWithGeogebraCommonAwtGGraphics2D:g2];
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
      [self drawLinesWithGeogebraCommonAwtGGraphics2D:g2];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
      [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawWithGeogebraCommonAwtGGraphics2D:g2];
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_EMPTY:
      if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
      if ([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(self->conic_)) isInverseFill]) {
        [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:[self getShape] withBoolean:NO];
      }
      else {
        [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:self->shape_DrawConic_ withBoolean:NO];
      }
      if (self->arcFiller_ != nil) [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:self->arcFiller_ withBoolean:YES];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) doHighlighting]) {
        [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->selStroke_];
        [g2 setColorWithGeogebraCommonAwtGColor:[self->geo_ getSelColor]];
        [g2 drawWithGeogebraCommonAwtGShape:self->shape_DrawConic_];
      }
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [g2 setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
      [g2 drawWithGeogebraCommonAwtGShape:self->shape_DrawConic_];
      if (self->labelVisible_) {
        [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontConic]];
        [g2 setColorWithGeogebraCommonAwtGColor:[self->geo_ getLabelColor]];
        [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
      }
      break;
      case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
      [self drawHyperbolaWithGeogebraCommonAwtGGraphics2D:g2];
      break;
    }
  }
}

void GeogebraCommonEuclidianDrawDrawConic_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawConic *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  switch (self->type_) {
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_SINGLE_POINT:
    [((GeogebraCommonEuclidianDrawDrawPoint *) nil_chk(self->drawPoint_)) drawTraceWithGeogebraCommonAwtGGraphics2D:g2];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_INTERSECTING_LINES:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_DOUBLE_LINE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARALLEL_LINES:
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawTraceWithGeogebraCommonAwtGGraphics2D:g2];
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(self->drawLines__, 1))) drawTraceWithGeogebraCommonAwtGGraphics2D:g2];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_LINE:
    [((GeogebraCommonEuclidianDrawDrawLine *) nil_chk(IOSObjectArray_Get(nil_chk(self->drawLines__), 0))) drawTraceWithGeogebraCommonAwtGGraphics2D:g2];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_CIRCLE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE:
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PARABOLA:
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
    [g2 drawWithGeogebraCommonAwtGShape:self->shape_DrawConic_];
    break;
    case GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA:
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
    [g2 setColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
    [g2 drawWithGeogebraCommonAwtGShape:self->hypLeft_];
    [g2 drawWithGeogebraCommonAwtGShape:self->hypRight_];
    break;
  }
}

void GeogebraCommonEuclidianDrawDrawConic_initPreview(GeogebraCommonEuclidianDrawDrawConic *self) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->previewTempPoints_), 0))) getConstruction];
  self->isPreview_ = YES;
  {
    GeogebraCommonKernelAlgosAlgoCircleTwoPoints *algo;
    GeogebraCommonKernelMatrixCoords *p;
    GeogebraCommonKernelArithmeticMyDouble *distance;
    GeogebraCommonKernelAlgosAlgoCirclePointRadius *algoCircleRadius;
    IOSObjectArray *pts;
    GeogebraCommonKernelAlgosAlgoConicFivePoints *algo0;
    GeogebraCommonKernelAlgosAlgoCircleThreePoints *algo2;
    GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo3;
    GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint *algo4;
    GeogebraCommonKernelAlgosAlgoCirclePointRadius *algo5;
    GeogebraCommonKernelAlgosAlgoParabolaPointLine *algo6;
    switch (self->previewMode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_TWO_POINTS:
      algo = [new_GeogebraCommonKernelAlgosAlgoCircleTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1)) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo getCircle]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_POINT_RADIUS:
      p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((JavaUtilArrayList *) nil_chk(self->prevPoints_)) getWithInt:0])) getInhomCoordsInD3]];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->previewTempPoints_, 0))) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) projectInfDim] withBoolean:NO];
      distance = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->previewTempPoints_, 1))) distanceWithGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->previewTempPoints_, 0)]) autorelease];
      algoCircleRadius = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), distance) autorelease];
      [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoCircleRadius];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algoCircleRadius getCircle]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CONIC_FIVE_POINTS:
      pts = [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), IOSObjectArray_Get(self->previewTempPoints_, 3), IOSObjectArray_Get(self->previewTempPoints_, 4) } count:5 type:GeogebraCommonKernelGeosGeoPoint_class_()];
      algo0 = [new_GeogebraCommonKernelAlgosAlgoConicFivePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, pts) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo0];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo0 getConic]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_CIRCLE_THREE_POINTS:
      algo2 = [new_GeogebraCommonKernelAlgosAlgoCircleThreePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2)) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo2];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo2 getCircle]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_ELLIPSE_THREE_POINTS:
      algo3 = [new_GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_ELLIPSE) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo3];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo3 getConic]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_HYPERBOLA_THREE_POINTS:
      algo4 = [new_GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2), GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo4];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo4 getConic]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_COMPASSES:
      algo5 = [new_GeogebraCommonKernelAlgosAlgoCirclePointRadius_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelArithmeticNumberValue_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), self->previewTempRadius_) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo5];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo5 getCircle]);
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PARABOLA:
      algo6 = [new_GeogebraCommonKernelAlgosAlgoParabolaPointLine_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoLineND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), self->previewTempLine_) autorelease];
      [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo6];
      GeogebraCommonEuclidianDrawDrawConic_initConicWithGeogebraCommonKernelKernelNDGeoConicND_(self, [algo6 getParabola]);
      break;
      default:
      GeogebraCommonMainApp_debugWithNSString_(@"unknown conic type");
    }
  }
  if (self->conic_ != nil) [self->conic_ setLabelVisibleWithBoolean:NO];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawConic)
