//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/SymbolicParameters.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/algos/SymbolicParametersBotanaAlgo.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosSymbolicParameters () {
 @public
  JavaUtilHashSet *variables_;
  id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> spa_;
}

- (void)initFreeVariables OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosSymbolicParameters, variables_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosSymbolicParameters, spa_, id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>)

__attribute__((unused)) static void GeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(GeogebraCommonKernelAlgosSymbolicParameters *self);

@implementation GeogebraCommonKernelAlgosSymbolicParameters

- (instancetype)initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo:(id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>)spa {
  GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self, spa);
  return self;
}

- (IOSIntArray *)getDegrees {
  return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(spa_)) getDegrees];
}

+ (IOSIntArray *)getMaxDegreeWithIntArray:(IOSIntArray *)degree1
                             withIntArray:(IOSIntArray *)degree2 {
  return GeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSIntArray *)addDegreeWithIntArray:(IOSIntArray *)degree1
                          withIntArray:(IOSIntArray *)degree2 {
  return GeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSIntArray *)crossDegreeWithIntArray:(IOSIntArray *)degree1
                            withIntArray:(IOSIntArray *)degree2 {
  return GeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(degree1, degree2);
}

+ (IOSObjectArray *)crossProductWithJavaMathBigIntegerArray:(IOSObjectArray *)a
                                withJavaMathBigIntegerArray:(IOSObjectArray *)b {
  return GeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(a, b);
}

- (jint)getDimension {
  if (variables_ == nil) {
    GeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
  }
  return [((JavaUtilHashSet *) nil_chk(variables_)) size];
}

- (JavaUtilHashSet *)getFreeVariables {
  if (variables_ == nil) {
    GeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
  }
  return variables_;
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  return [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(spa_)) getExactCoordinatesWithJavaUtilHashMap:values];
}

+ (IOSObjectArray *)reduceWithJavaMathBigIntegerArray:(IOSObjectArray *)vect {
  return GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(vect);
}

- (void)initFreeVariables {
  GeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(self);
}

+ (JavaMathBigInteger *)det4WithJavaMathBigIntegerArray2:(IOSObjectArray *)matrix {
  return GeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(matrix);
}

+ (IOSObjectArray *)addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)input {
  return GeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray_(input);
}

+ (IOSObjectArray *)botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)P
                                             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Q
                              withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars {
  return GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelProverPolynomialVariableArray_(P, Q, botanaVars);
}

+ (IOSObjectArray *)botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Ax
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Ay
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)Bx
                                                 withGeogebraCommonKernelProverPolynomialVariable:(GeogebraCommonKernelProverPolynomialVariable *)By
                                            withGeogebraCommonKernelProverPolynomialVariableArray:(IOSObjectArray *)botanaVars {
  return GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariableArray_(Ax, Ay, Bx, By, botanaVars);
}

- (void)dealloc {
  RELEASE_(degree_);
  RELEASE_(variables_);
  RELEASE_(spa_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo:", "SymbolicParameters", NULL, 0x1, NULL, NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getMaxDegreeWithIntArray:withIntArray:", "getMaxDegree", "[I", 0x9, NULL, NULL },
    { "addDegreeWithIntArray:withIntArray:", "addDegree", "[I", 0x9, NULL, NULL },
    { "crossDegreeWithIntArray:withIntArray:", "crossDegree", "[I", 0x9, NULL, NULL },
    { "crossProductWithJavaMathBigIntegerArray:withJavaMathBigIntegerArray:", "crossProduct", "[Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getFreeVariables", NULL, "Ljava.util.HashSet;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "reduceWithJavaMathBigIntegerArray:", "reduce", "[Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "initFreeVariables", NULL, "V", 0x2, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "det4WithJavaMathBigIntegerArray2:", "det4", "Ljava.math.BigInteger;", 0x9, NULL, NULL },
    { "addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray:", "addBotanaVarsJoinPoints", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x9, NULL, NULL },
    { "botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelProverPolynomialVariableArray:", "botanaPolynomialsMidpoint", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
    { "botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariable:withGeogebraCommonKernelProverPolynomialVariableArray:", "botanaPolynomialsLineBisector", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "degree_", NULL, 0x4, "[I", NULL, NULL,  },
    { "variables_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/kernel/prover/polynomial/Variable;>;",  },
    { "spa_", NULL, 0x2, "Lgeogebra.common.kernel.algos.SymbolicParametersAlgo;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosSymbolicParameters = { 2, "SymbolicParameters", "geogebra.common.kernel.algos", NULL, 0x1, 15, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosSymbolicParameters;
}

@end

void GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(GeogebraCommonKernelAlgosSymbolicParameters *self, id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) {
  NSObject_init(self);
  GeogebraCommonKernelAlgosSymbolicParameters_set_spa_(self, spa);
}

GeogebraCommonKernelAlgosSymbolicParameters *new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(id<GeogebraCommonKernelAlgosSymbolicParametersAlgo> spa) {
  GeogebraCommonKernelAlgosSymbolicParameters *self = [GeogebraCommonKernelAlgosSymbolicParameters alloc];
  GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self, spa);
  return self;
}

IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_getMaxDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  if (degree1 == nil || degree2 == nil || degree1->size_ != 3 || degree2->size_ != 3) return nil;
  IOSIntArray *maxDegree = [IOSIntArray arrayWithLength:3];
  *IOSIntArray_GetRef(maxDegree, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0), IOSIntArray_Get(nil_chk(degree2), 0));
  *IOSIntArray_GetRef(maxDegree, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1), IOSIntArray_Get(degree2, 1));
  *IOSIntArray_GetRef(maxDegree, 2) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 2), IOSIntArray_Get(degree2, 2));
  return maxDegree;
}

IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_addDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  if (degree1 == nil || degree2 == nil || degree1->size_ != 3 || degree2->size_ != 3) return nil;
  IOSIntArray *addDegree = [IOSIntArray arrayWithLength:3];
  *IOSIntArray_GetRef(addDegree, 0) = IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 0);
  *IOSIntArray_GetRef(addDegree, 1) = IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 1);
  *IOSIntArray_GetRef(addDegree, 2) = IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 2);
  return addDegree;
}

IOSIntArray *GeogebraCommonKernelAlgosSymbolicParameters_crossDegreeWithIntArray_withIntArray_(IOSIntArray *degree1, IOSIntArray *degree2) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSIntArray *result = [IOSIntArray arrayWithLength:3];
  *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 1) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 1));
  *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 0) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree1, 2) + IOSIntArray_Get(degree2, 0));
  *IOSIntArray_GetRef(result, 2) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 0), IOSIntArray_Get(degree1, 0) + IOSIntArray_Get(degree2, 1));
  return result;
}

IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_crossProductWithJavaMathBigIntegerArray_withJavaMathBigIntegerArray_(IOSObjectArray *a, IOSObjectArray *b) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
  IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(a), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(b), 2)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 1)]]);
  IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 0)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 2)]]);
  IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 1)]))) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(a, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(b, 0)]]);
  return GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
}

IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(IOSObjectArray *vect) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  JavaMathBigInteger *gcd = [new_JavaMathBigInteger_initWithNSString_(@"0") autorelease];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(vect))->size_; i++) {
    gcd = [gcd gcdWithJavaMathBigInteger:IOSObjectArray_Get(vect, i)];
  }
  if ([((JavaMathBigInteger *) nil_chk(gcd)) isEqual:JavaMathBigInteger_get_ZERO_()]) {
    gcd = JavaMathBigInteger_get_ONE_();
  }
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:vect->size_ type:JavaMathBigInteger_class_()];
  for (jint i = 0; i < vect->size_; i++) {
    IOSObjectArray_Set(result, i, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(vect, i))) divideWithJavaMathBigInteger:gcd]);
  }
  return result;
}

void GeogebraCommonKernelAlgosSymbolicParameters_initFreeVariables(GeogebraCommonKernelAlgosSymbolicParameters *self) {
  GeogebraCommonKernelAlgosSymbolicParameters_setAndConsume_variables_(self, new_JavaUtilHashSet_init());
  [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) nil_chk(self->spa_)) getFreeVariablesWithJavaUtilHashSet:self->variables_];
}

JavaMathBigInteger *GeogebraCommonKernelAlgosSymbolicParameters_det4WithJavaMathBigIntegerArray2_(IOSObjectArray *matrix) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  JavaMathBigInteger *complex$1 = [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(matrix), 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 0)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 1)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 3))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 3)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 2)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
  return [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(complex$1)) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 0)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 0)), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 1)), 1)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 2)), 2)])) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(matrix, 3)), 3)]];
}

IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_addBotanaVarsJoinPointsWithGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *input) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *botanaVars = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *line1vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  IOSObjectArray *line2vars = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()];
  line1vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(nil_chk(input), 0), @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, 0)];
  line2vars = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(IOSObjectArray_Get(input, 1), @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(input, 1)];
  IOSObjectArray_Set(botanaVars, 0, IOSObjectArray_Get(nil_chk(line1vars), 0));
  IOSObjectArray_Set(botanaVars, 1, IOSObjectArray_Get(line1vars, 1));
  IOSObjectArray_Set(botanaVars, 2, IOSObjectArray_Get(nil_chk(line2vars), 0));
  IOSObjectArray_Set(botanaVars, 3, IOSObjectArray_Get(line2vars, 1));
  return botanaVars;
}

IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelProverPolynomialVariableArray_(GeogebraCommonKernelGeosGeoElement *P, GeogebraCommonKernelGeosGeoElement *Q, IOSObjectArray *botanaVars) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *fv1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(P, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:P];
  IOSObjectArray *fv2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo>) check_protocol_cast(Q, @protocol(GeogebraCommonKernelAlgosSymbolicParametersBotanaAlgo))))) getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:Q];
  IOSObjectArray *botanaPolynomials = [IOSObjectArray arrayWithLength:2 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()];
  IOSObjectArray_Set(botanaPolynomials, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([([new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVars), 0)) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv1), 0)) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(fv2), 0)) autorelease]]);
  IOSObjectArray_Set(botanaPolynomials, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([([new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 1)) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(fv1, 1)) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(fv2, 1)) autorelease]]);
  return botanaPolynomials;
}

IOSObjectArray *GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsLineBisectorWithGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariable_withGeogebraCommonKernelProverPolynomialVariableArray_(GeogebraCommonKernelProverPolynomialVariable *Ax, GeogebraCommonKernelProverPolynomialVariable *Ay, GeogebraCommonKernelProverPolynomialVariable *Bx, GeogebraCommonKernelProverPolynomialVariable *By, IOSObjectArray *botanaVars) {
  GeogebraCommonKernelAlgosSymbolicParameters_initialize();
  IOSObjectArray *botanaPolynomials = [IOSObjectArray arrayWithLength:4 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()];
  GeogebraCommonKernelProverPolynomialPolynomial *a1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(Ax) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *a2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(Ay) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(nil_chk(botanaVars), 0)) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *c2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 1)) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d1 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 2)) autorelease];
  GeogebraCommonKernelProverPolynomialPolynomial *d2 = [new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(IOSObjectArray_Get(botanaVars, 3)) autorelease];
  IOSObjectArray_Set(botanaPolynomials, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([([new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:c1])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(Ax) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(Bx) autorelease]]);
  IOSObjectArray_Set(botanaPolynomials, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([([new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:c2])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(Ay) autorelease]])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithGeogebraCommonKernelProverPolynomialVariable_(By) autorelease]]);
  IOSObjectArray_Set(botanaPolynomials, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([d2 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:c2]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:c1]))) addWithGeogebraCommonKernelProverPolynomialPolynomial:a1]);
  IOSObjectArray_Set(botanaPolynomials, 3, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(([d1 subtractWithGeogebraCommonKernelProverPolynomialPolynomial:c1]))) addWithGeogebraCommonKernelProverPolynomialPolynomial:c2]))) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:a2]);
  return botanaPolynomials;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosSymbolicParameters)
