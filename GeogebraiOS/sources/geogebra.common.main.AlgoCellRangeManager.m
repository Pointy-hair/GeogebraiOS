//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/AlgoCellRangeManager.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/statistics/AlgoCellRange.h"
#include "geogebra/common/main/AlgoCellRangeManager.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"

@interface GeogebraCommonMainAlgoCellRangeManager () {
 @public
  JavaUtilHashMap *algos_;
}

+ (NSString *)getKeyWithNSString:(NSString *)start
                    withNSString:(NSString *)end;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonMainAlgoCellRangeManager, algos_, JavaUtilHashMap *)

__attribute__((unused)) static NSString *GeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(NSString *start, NSString *end);

@implementation GeogebraCommonMainAlgoCellRangeManager

- (void)unregisterCellRangeListenerAlgoWithGeogebraCommonKernelStatisticsAlgoCellRange:(GeogebraCommonKernelStatisticsAlgoCellRange *)algo {
  if (algos_ != nil) {
    [algos_ removeWithId:GeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_([((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getStart], [algo getEnd])];
  }
}

- (void)updateCellRangeAlgosWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                       withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)location
                                                       withBoolean:(jboolean)isRemoveAction {
  if (geo == nil || algos_ == nil) {
    return;
  }
  for (GeogebraCommonKernelStatisticsAlgoCellRange * __strong algo in nil_chk([((JavaUtilHashMap *) nil_chk(algos_)) values])) {
    if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getCellRange])) containsWithGeogebraCommonAwtGPoint:location]) {
      [algo updateListWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:isRemoveAction];
    }
  }
}

- (void)addToCellRangeAlgosWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                      withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)location {
  if (geo == nil || algos_ == nil) {
    return;
  }
  for (GeogebraCommonKernelStatisticsAlgoCellRange * __strong algo in nil_chk([((JavaUtilHashMap *) nil_chk(algos_)) values])) {
    if ([((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo)) getCellRange])) containsWithGeogebraCommonAwtGPoint:location]) {
      [algo addToListWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonAwtGPoint:location];
    }
  }
}

- (void)removeAll {
  if (algos_ != nil) {
    [algos_ clear];
  }
}

- (GeogebraCommonKernelStatisticsAlgoCellRange *)getAlgoCellRangeWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                         withNSString:(NSString *)label
                                                                                         withNSString:(NSString *)start
                                                                                         withNSString:(NSString *)end {
  if (algos_ == nil) {
    GeogebraCommonMainAlgoCellRangeManager_setAndConsume_algos_(self, new_JavaUtilHashMap_init());
  }
  NSString *key = GeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(start, end);
  GeogebraCommonKernelStatisticsAlgoCellRange *algo = [((JavaUtilHashMap *) nil_chk(algos_)) getWithId:key];
  if (algo == nil) {
    algo = [new_GeogebraCommonKernelStatisticsAlgoCellRange_initWithGeogebraCommonKernelConstruction_withNSString_withNSString_withNSString_(cons, label, start, end) autorelease];
    [algos_ putWithId:key withId:algo];
  }
  else {
    if (label != nil && ((jint) [label length]) > 0) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk([algo getList])) setLabelWithNSString:label];
    }
  }
  return algo;
}

+ (NSString *)getKeyWithNSString:(NSString *)start
                    withNSString:(NSString *)end {
  return GeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(start, end);
}

- (instancetype)init {
  GeogebraCommonMainAlgoCellRangeManager_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(algos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "unregisterCellRangeListenerAlgoWithGeogebraCommonKernelStatisticsAlgoCellRange:", "unregisterCellRangeListenerAlgo", "V", 0x1, NULL, NULL },
    { "updateCellRangeAlgosWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonAwtGPoint:withBoolean:", "updateCellRangeAlgos", "V", 0x1, NULL, NULL },
    { "addToCellRangeAlgosWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonAwtGPoint:", "addToCellRangeAlgos", "V", 0x1, NULL, NULL },
    { "removeAll", NULL, "V", 0x1, NULL, NULL },
    { "getAlgoCellRangeWithGeogebraCommonKernelConstruction:withNSString:withNSString:withNSString:", "getAlgoCellRange", "Lgeogebra.common.kernel.statistics.AlgoCellRange;", 0x1, NULL, NULL },
    { "getKeyWithNSString:withNSString:", "getKey", "Ljava.lang.String;", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algos_", NULL, 0x2, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/String;Lgeogebra/common/kernel/statistics/AlgoCellRange;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainAlgoCellRangeManager = { 2, "AlgoCellRangeManager", "geogebra.common.main", NULL, 0x1, 7, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainAlgoCellRangeManager;
}

@end

NSString *GeogebraCommonMainAlgoCellRangeManager_getKeyWithNSString_withNSString_(NSString *start, NSString *end) {
  GeogebraCommonMainAlgoCellRangeManager_initialize();
  return JreStrcat("$C$", start, ':', end);
}

void GeogebraCommonMainAlgoCellRangeManager_init(GeogebraCommonMainAlgoCellRangeManager *self) {
  NSObject_init(self);
}

GeogebraCommonMainAlgoCellRangeManager *new_GeogebraCommonMainAlgoCellRangeManager_init() {
  GeogebraCommonMainAlgoCellRangeManager *self = [GeogebraCommonMainAlgoCellRangeManager alloc];
  GeogebraCommonMainAlgoCellRangeManager_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainAlgoCellRangeManager)
