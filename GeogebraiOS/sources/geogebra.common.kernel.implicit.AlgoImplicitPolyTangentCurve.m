//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/AlgoImplicitPolyTangentCurve.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/implicit/AlgoImplicitPolyTangentCurve.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/implicit/PolynomialUtils.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve () {
 @public
  GeogebraCommonKernelImplicitGeoImplicitPoly *poly_;
  id<GeogebraCommonKernelKernelNDGeoPointND> point_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *tangentPoly_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, poly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, point_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve, tangentPoly_, GeogebraCommonKernelImplicitGeoImplicitPoly *)

@implementation GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)poly
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                                            withNSString:(NSString *)label
                                             withBoolean:(jboolean)addToConstructionList
                                             withBoolean:(jboolean)calcPath {
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(self, c, poly, point, label, addToConstructionList, calcPath);
  return self;
}

- (void)compute {
  IOSObjectArray *coeff = [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(poly_)) getCoeff];
  jdouble x = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) getInhomX];
  jdouble y = [point_ getInhomY];
  IOSObjectArray *newCoeff = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(coeff))->size_ type:IOSClass_doubleArray(1)];
  jint maxDeg = [poly_ getDeg];
  for (jint i = 0; i < coeff->size_; i++) {
    IOSObjectArray_SetAndConsume(newCoeff, i, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_]);
    for (jint j = 0; j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) = (maxDeg - (i + j)) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j);
      if (i + 1 < coeff->size_ && j < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i + 1)))->size_) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) += x * (i + 1) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i + 1)), j);
      }
      if (j + 1 < ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_) {
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(newCoeff, i)), j) += y * (j + 1) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j + 1);
      }
    }
  }
  [((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(tangentPoly_)) setCoeffWithDoubleArray2:GeogebraCommonKernelImplicitPolynomialUtils_coeffMinDegWithDoubleArray2_(newCoeff)];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ poly_, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(point_, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:tangentPoly_];
  [self setDependencies];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (GeogebraCommonKernelImplicitGeoImplicitPoly *)getTangentCurve {
  return tangentPoly_;
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(point_);
  RELEASE_(tangentPoly_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelKernelNDGeoPointND:withNSString:withBoolean:withBoolean:", "AlgoImplicitPolyTangentCurve", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getTangentCurve", NULL, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "tangentPoly_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve = { 2, "AlgoImplicitPolyTangentCurve", "geogebra.common.kernel.implicit", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve;
}

@end

void GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *poly, id<GeogebraCommonKernelKernelNDGeoPointND> point, NSString *label, jboolean addToConstructionList, jboolean calcPath) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_withBoolean_(self, c, addToConstructionList);
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_set_poly_(self, poly);
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_set_point_(self, point);
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_setAndConsume_tangentPoly_(self, new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(c));
  if (!calcPath) {
    [self->tangentPoly_ preventPathCreation];
  }
  [self setInputOutput];
  [self compute];
  if (label != nil) {
    [self->tangentPoly_ setLabelWithNSString:label];
  }
}

GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *new_GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *poly, id<GeogebraCommonKernelKernelNDGeoPointND> point, NSString *label, jboolean addToConstructionList, jboolean calcPath) {
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *self = [GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve alloc];
  GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(self, c, poly, point, label, addToConstructionList, calcPath);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve)
