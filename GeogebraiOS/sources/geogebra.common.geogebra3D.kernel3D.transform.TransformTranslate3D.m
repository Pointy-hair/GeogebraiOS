//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTranslate3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/Transform3D.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/TransformTranslate3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"

@interface GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D () {
 @public
  GeogebraCommonKernelGeosGeoElement *transVec_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D, transVec_, GeogebraCommonKernelGeosGeoElement *)

@implementation GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
             withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)transVec {
  GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, transVec);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTranslate3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(cons_, geo, transVec_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(transVec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoVectorND:", "TransformTranslate3D", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "transVec_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D = { 2, "TransformTranslate3D", "geogebra.common.geogebra3D.kernel3D.transform", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoVectorND> transVec) {
  GeogebraCommonGeogebra3DKernel3DTransformTransform3D_init(self);
  GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_set_transVec_(self, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(transVec, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *new_GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoVectorND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoVectorND> transVec) {
  GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D *self = [GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D alloc];
  GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoVectorND_(self, cons, transVec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DTransformTransformTranslate3D)
