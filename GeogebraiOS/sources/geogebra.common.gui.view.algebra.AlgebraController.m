//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/algebra/AlgebraController.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/algebra/AlgebraController.h"
#include "geogebra/common/gui/view/algebra/AlgebraView.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SelectionManager.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@implementation GeogebraCommonGuiViewAlgebraAlgebraController

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGuiViewAlgebraAlgebraController_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)setViewWithGeogebraCommonGuiViewAlgebraAlgebraView:(id<GeogebraCommonGuiViewAlgebraAlgebraView>)view {
  GeogebraCommonGuiViewAlgebraAlgebraController_set_view_(self, view);
}

- (GeogebraCommonMainApp *)getApplication {
  return app_;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return kernel_;
}

- (NSString *)getDragTextWithJavaUtilArrayList:(JavaUtilArrayList *)geoLabelList {
  NSString *latex = nil;
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((GeogebraCommonMainSelectionManager *) nil_chk(selection_)) getSelectedGeos])) {
    [((JavaUtilArrayList *) nil_chk(geoLabelList)) addWithId:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  if ([((JavaUtilArrayList *) nil_chk(geoLabelList)) size] > 0) {
    jboolean showJustFirstGeoInDrag = NO;
    if ([((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) size] == 1) {
      showJustFirstGeoInDrag = YES;
    }
    else {
      for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([selection_ getSelectedGeos])) {
        if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoCurveCartesian]) {
          showJustFirstGeoInDrag = YES;
          break;
        }
      }
    }
    if (showJustFirstGeoInDrag) {
      latex = [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk([selection_ getSelectedGeos])) getWithInt:0])) getLaTeXAlgebraDescriptionWithBoolean:YES withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_latexTemplate_()];
    }
    else {
      JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
      [sb appendWithNSString:@"\\fbox{\\begin{array}{l}"];
      for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([selection_ getSelectedGeos])) {
        [sb appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLaTeXAlgebraDescriptionWithBoolean:YES withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_latexTemplate_()]];
        [sb appendWithNSString:@"\\\\"];
      }
      [sb appendWithNSString:@"\\end{array}}"];
      latex = [sb description];
    }
  }
  return latex;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(app_);
  RELEASE_(selection_);
  RELEASE_(view_);
  RELEASE_(lastSelectedGeo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "AlgebraController", NULL, 0x1, NULL, NULL },
    { "setViewWithGeogebraCommonGuiViewAlgebraAlgebraView:", "setView", "V", 0x1, NULL, NULL },
    { "getApplication", NULL, "Lgeogebra.common.main.App;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "getDragTextWithJavaUtilArrayList:", "getDragText", "Ljava.lang.String;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "selection_", NULL, 0x4, "Lgeogebra.common.main.SelectionManager;", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.gui.view.algebra.AlgebraView;", NULL, NULL,  },
    { "lastSelectedGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "skipSelection_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewAlgebraAlgebraController = { 2, "AlgebraController", "geogebra.common.gui.view.algebra", NULL, 0x1, 5, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewAlgebraAlgebraController;
}

@end

void GeogebraCommonGuiViewAlgebraAlgebraController_initWithGeogebraCommonKernelKernel_(GeogebraCommonGuiViewAlgebraAlgebraController *self, GeogebraCommonKernelKernel *kernel) {
  NSObject_init(self);
  GeogebraCommonGuiViewAlgebraAlgebraController_set_lastSelectedGeo_(self, nil);
  GeogebraCommonGuiViewAlgebraAlgebraController_set_kernel_(self, kernel);
  GeogebraCommonGuiViewAlgebraAlgebraController_set_app_(self, [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getApplication]);
  GeogebraCommonGuiViewAlgebraAlgebraController_set_selection_(self, [((GeogebraCommonMainApp *) nil_chk(self->app_)) getSelectionManager]);
}

GeogebraCommonGuiViewAlgebraAlgebraController *new_GeogebraCommonGuiViewAlgebraAlgebraController_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGuiViewAlgebraAlgebraController *self = [GeogebraCommonGuiViewAlgebraAlgebraController alloc];
  GeogebraCommonGuiViewAlgebraAlgebraController_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewAlgebraAlgebraController)
