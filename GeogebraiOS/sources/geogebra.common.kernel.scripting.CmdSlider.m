//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSlider.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/scripting/CmdSlider.h"
#include "geogebra/common/main/MyError.h"
#include "java/lang/Math.h"

@implementation GeogebraCommonKernelScriptingCmdSlider

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSlider_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if (n < 2 || n > 9) @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  for (jint i = 0; i < JavaLangMath_minWithInt_withInt_(n, 5); i++) if (!([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), i)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
  for (jint i = 5; i < n; i++) if (!([GeogebraCommonKernelArithmeticBooleanValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), i)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, i)];
  GeogebraCommonKernelGeosGeoNumeric *slider = nil;
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) lookupLabelWithNSString:[c getLabel]];
  if (geo != nil && [geo isGeoNumeric]) {
    slider = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
  }
  if ((n > 5 && [((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(arg), 5), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]) || [IOSObjectArray_Get(nil_chk(arg), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoAngle class]] || [IOSObjectArray_Get(arg, 1) isKindOfClass:[GeogebraCommonKernelGeosGeoAngle class]]) {
    if (slider == nil || ![slider isAngle]) {
      slider = [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction]) autorelease];
    }
  }
  else {
    if (slider == nil || [slider isAngle]) {
      slider = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getConstruction]) autorelease];
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(slider)) setIntervalMinWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(arg), 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
  [slider setIntervalMaxWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
  if (n > 2) [slider setAnimationStepWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
  if (n > 3) [slider setAnimationSpeedObjectWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 3), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
  if (n > 4) [slider setSliderWidthWithDouble:[((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(((id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 4), @protocol(GeogebraCommonKernelGeosGeoNumberValue))))) getDouble]];
  if (n > 6) [slider setSliderHorizontalWithBoolean:[((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(arg, 6), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]];
  if (n > 7) [slider setAnimatingWithBoolean:[((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(arg, 7), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]];
  if (n > 8) [slider setRandomWithBoolean:[((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast(IOSObjectArray_Get(arg, 8), @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean]];
  [slider setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  [slider setLabelVisibleWithBoolean:YES];
  [slider setEuclidianVisibleWithBoolean:YES];
  [slider setLabelWithNSString:[c getLabel]];
  return [IOSObjectArray arrayWithObjects:(id[]){ slider } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSlider", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSlider = { 2, "CmdSlider", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSlider;
}

@end

void GeogebraCommonKernelScriptingCmdSlider_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSlider *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSlider *new_GeogebraCommonKernelScriptingCmdSlider_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSlider *self = [GeogebraCommonKernelScriptingCmdSlider alloc];
  GeogebraCommonKernelScriptingCmdSlider_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSlider)
