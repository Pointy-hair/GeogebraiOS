//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoDependentFunctionNVar.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunctionNVar.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAlgosAlgoDependentFunctionNVar () {
 @public
  GeogebraCommonKernelArithmeticFunctionNVar *fun_;
  GeogebraCommonKernelGeosGeoFunctionNVar *f_;
  GeogebraCommonKernelArithmeticExpressionNode *expression_;
  GeogebraCommonKernelArithmeticFunctionNVar *expandedFun_;
  jboolean expContainsFunctions_;
  JavaLangStringBuilder *sb_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar, fun_, GeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar, f_, GeogebraCommonKernelGeosGeoFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar, expression_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar, expandedFun_, GeogebraCommonKernelArithmeticFunctionNVar *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar, sb_, JavaLangStringBuilder *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self);

@implementation GeogebraCommonKernelAlgosAlgoDependentFunctionNVar

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
          withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, label, fun);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
          withGeogebraCommonKernelArithmeticFunctionNVar:(GeogebraCommonKernelArithmeticFunctionNVar *)fun {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (GeogebraCommonKernelAlgosAlgosEnum *)getClassName {
  return GeogebraCommonKernelAlgosAlgosEnum_get_Expression();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) getGeoElementVariables]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:f_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunctionNVar *)getFunction {
  return f_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (sb_ == nil) GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  else [sb_ setLengthWithInt:0];
  if ([((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(f_)) isLabelSet] && ![((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isHideLHS] && (![f_ isBooleanFunction] || [tpl hasTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA_XML()])) {
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[f_ getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@"("];
    [sb_ appendWithNSString:[f_ getVarStringWithGeogebraCommonKernelStringTemplate:tpl]];
    [sb_ appendWithNSString:@") = "];
  }
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:[((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun_)) toStringWithGeogebraCommonKernelStringTemplate:tpl]];
  return [sb_ description];
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(f_);
  RELEASE_(expression_);
  RELEASE_(expandedFun_);
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionNVar:", "AlgoDependentFunctionNVar", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionNVar:", "AlgoDependentFunctionNVar", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoDependentFunctionNVar", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.algos.Algos;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunctionNVar;", NULL, NULL,  },
    { "expression_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "expandedFun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionNVar;", NULL, NULL,  },
    { "expContainsFunctions_", NULL, 0x2, "Z", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoDependentFunctionNVar = { 2, "AlgoDependentFunctionNVar", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar;
}

@end

void GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *new_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self = [GeogebraCommonKernelAlgosAlgoDependentFunctionNVar alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, label, fun);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_set_fun_(self, fun);
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_f_(self, new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(cons));
  [self->f_ setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:fun];
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_set_expression_(self, [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(fun)) getExpression]);
  self->expContainsFunctions_ = GeogebraCommonKernelAlgosAlgoDependentFunction_containsFunctionsWithGeogebraCommonKernelArithmeticExpressionValue_(self->expression_);
  if (self->expContainsFunctions_) {
    GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_setAndConsume_expandedFun_(self, new_GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticFunctionNVar_withGeogebraCommonKernelKernel_(fun, self->kernel_));
  }
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(self);
  [self->f_ setConstructionDefaults];
}

GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *new_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelArithmeticFunctionNVar *fun) {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self = [GeogebraCommonKernelAlgosAlgoDependentFunctionNVar alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionNVar_(self, cons, fun);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
}

GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *new_GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self = [GeogebraCommonKernelAlgosAlgoDependentFunctionNVar alloc];
  GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonKernelAlgosAlgoDependentFunctionNVar_compute(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar *self) {
  jboolean isDefined = YES;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->input_))->size_; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, i))) isDefined]) {
      isDefined = NO;
      break;
    }
  }
  if (isDefined && self->expContainsFunctions_) {
    id<GeogebraCommonKernelArithmeticExpressionValue> ev = nil;
    @try {
      ev = GeogebraCommonKernelAlgosAlgoDependentFunction_expandFunctionDerivativeNodesWithGeogebraCommonKernelArithmeticExpressionValue_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) deepCopyWithGeogebraCommonKernelKernel:self->kernel_]);
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      GeogebraCommonMainApp_debugWithNSString_(@"derivative failed");
    }
    if (ev == nil) {
      [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setUndefined];
      return;
    }
    GeogebraCommonKernelArithmeticExpressionNode *node;
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    else node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, ev) autorelease];
    [((GeogebraCommonKernelArithmeticFunctionNVar *) nil_chk(self->expandedFun_)) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:node];
    [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setFunctionWithGeogebraCommonKernelArithmeticFunctionNVar:self->expandedFun_];
    if ([self->f_ isBooleanFunction] && [self->f_ isLabelSet]) [self->f_ resetIneqs];
  }
  [((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(self->f_)) setDefinedWithBoolean:isDefined];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoDependentFunctionNVar)
