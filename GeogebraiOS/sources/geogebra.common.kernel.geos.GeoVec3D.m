//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoVec3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoVec3D () {
 @public
  jboolean trace_;
  JavaLangStringBuilder *sbToString_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoVec3D, sbToString_, JavaLangStringBuilder *)

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoVec3D_getX(GeogebraCommonKernelGeosGeoVec3D *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoVec3D_getY(GeogebraCommonKernelGeosGeoVec3D *self);

@implementation GeogebraCommonKernelGeosGeoVec3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                              withDouble:(jdouble)x
                                              withDouble:(jdouble)y
                                              withDouble:(jdouble)z {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(self, c, x, y, z);
  return self;
}

- (jboolean)isDefined {
  return (!(JavaLangDouble_isNaNWithDouble_(x_) || JavaLangDouble_isNaNWithDouble_(y_) || JavaLangDouble_isNaNWithDouble_(z_)));
}

- (void)setUndefined {
  [self setUndefinedCoords];
  [self update];
}

- (void)setUndefinedCoords {
  [self setCoordsWithDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN withDouble:JavaLangDouble_NaN];
}

- (jboolean)showInEuclidianView {
  return [self isDefined];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoVec3D *v = (GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoVec3D class]);
  [self setCoordsWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_ withDouble:v->y_ withDouble:v->z_];
}

- (void)setCoordsWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)z {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getX {
  return GeogebraCommonKernelGeosGeoVec3D_getX(self);
}

- (jdouble)getY {
  return GeogebraCommonKernelGeosGeoVec3D_getY(self);
}

- (jdouble)getZ {
  return z_;
}

- (void)getCoordsWithDoubleArray:(IOSDoubleArray *)ret {
  *IOSDoubleArray_GetRef(nil_chk(ret), 0) = x_;
  *IOSDoubleArray_GetRef(ret, 1) = y_;
  *IOSDoubleArray_GetRef(ret, 2) = z_;
}

- (GeogebraCommonKernelMatrixCoords *)getCoords {
  GeogebraCommonKernelMatrixCoords *coords = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(x_, y_, z_) autorelease];
  return coords;
}

- (void)getInhomCoordsWithDoubleArray:(IOSDoubleArray *)res {
  *IOSDoubleArray_GetRef(nil_chk(res), 0) = x_;
  *IOSDoubleArray_GetRef(res, 1) = y_;
}

- (jboolean)isPolar {
  return toStringMode_ == GeogebraCommonKernelKernel_COORD_POLAR;
}

- (jint)getMode {
  return toStringMode_;
}

- (void)setModeWithInt:(jint)mode {
  toStringMode_ = mode;
}

- (void)setPolar {
  toStringMode_ = GeogebraCommonKernelKernel_COORD_POLAR;
}

- (void)setCartesian {
  toStringMode_ = GeogebraCommonKernelKernel_COORD_CARTESIAN;
}

- (void)setComplex {
  toStringMode_ = GeogebraCommonKernelKernel_COORD_COMPLEX;
}

- (void)setCartesian3D {
  toStringMode_ = GeogebraCommonKernelKernel_COORD_CARTESIAN_3D;
}

- (void)setSpherical {
  [self setModeWithInt:GeogebraCommonKernelKernel_COORD_SPHERICAL];
}

- (jboolean)isTraceable {
  return YES;
}

- (void)setTraceWithBoolean:(jboolean)trace {
  self->trace_ = trace;
}

- (jboolean)getTrace {
  return trace_;
}

- (jboolean)linDepWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  jdouble n1 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(x_), JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(y_), JavaLangMath_absWithDouble_(z_)));
  jdouble n2 = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_), JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_absWithDouble_(v->y_), JavaLangMath_absWithDouble_(v->z_)));
  jdouble x1 = x_ / n1;
  jdouble y1 = y_ / n1;
  jdouble z1 = z_ / n1;
  jdouble x2 = v->x_ / n2;
  jdouble y2 = v->y_ / n2;
  jdouble z2 = v->z_ / n2;
  return GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x1 * y2, x2 * y1) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(z1 * y2, z2 * y1) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(x1 * z2, x2 * z1);
}

- (jboolean)isZero {
  return GeogebraCommonKernelKernel_isZeroWithDouble_(x_) && GeogebraCommonKernelKernel_isZeroWithDouble_(y_) && GeogebraCommonKernelKernel_isZeroWithDouble_(z_);
}

+ (void)crossWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)u
             withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v
             withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)w {
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(u, v, w);
}

+ (GeogebraCommonKernelMatrixCoords *)crossWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)u
                                           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  return GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(u, v);
}

+ (void)lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B
                          withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(A, B, g);
}

+ (void)lineThroughPointsCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)A
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)B
                                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsCoordsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelGeosGeoLine_(A, B, g);
}

+ (void)lineThroughPointVectorWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                              withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v
                               withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelGeosGeoVec3D_lineThroughPointVectorWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoLine_(A, v, g);
}

+ (void)crossWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)u
                                       withDouble:(jdouble)vx
                                       withDouble:(jdouble)vy
                                       withDouble:(jdouble)vz
             withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)w {
  GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(u, vx, vy, vz, w);
}

+ (void)crossWithDouble:(jdouble)ux
             withDouble:(jdouble)uy
             withDouble:(jdouble)uz
             withDouble:(jdouble)vx
             withDouble:(jdouble)vy
             withDouble:(jdouble)vz
withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)w {
  GeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(ux, uy, uz, vx, vy, vz, w);
}

+ (void)crossWithDoubleArray:(IOSDoubleArray *)u
             withDoubleArray:(IOSDoubleArray *)v
             withDoubleArray:(IOSDoubleArray *)w {
  GeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(u, v, w);
}

- (jdouble)innerWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)v {
  return x_ * ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->x_ + y_ * v->y_ + z_ * v->z_;
}

- (void)changeSign {
  [self setCoordsWithDouble:-x_ withDouble:-y_ withDouble:-z_];
}

+ (void)addWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)a
           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)b
           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)c {
  GeogebraCommonKernelGeosGeoVec3D_addWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(a, b, c);
}

+ (void)subWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)a
           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)b
           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)c {
  GeogebraCommonKernelGeosGeoVec3D_subWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(a, b, c);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_)) setLengthWithInt:0];
  [sbToString_ appendWithChar:'('];
  [sbToString_ appendWithDouble:x_];
  [sbToString_ appendWithNSString:@", "];
  [sbToString_ appendWithDouble:y_];
  [sbToString_ appendWithNSString:@", "];
  [sbToString_ appendWithDouble:z_];
  [sbToString_ appendWithChar:')'];
  return [sbToString_ description];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<coords"];
  [sb appendWithNSString:@" x=\""];
  [sb appendWithDouble:x_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" y=\""];
  [sb appendWithDouble:y_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" z=\""];
  [sb appendWithDouble:z_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
}

- (void)getXMLtagsMinimalWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:JreStrcat("$C$C$", [self regrFormatWithDouble:x_], ' ', [self regrFormatWithDouble:y_], ' ', [self regrFormatWithDouble:z_])];
}

- (jboolean)isNumberValue {
  return NO;
}

- (void)setZero {
  x_ = 0;
  y_ = 0;
  z_ = 0;
}

- (void)rotateXYWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phi {
  jdouble ph = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(phi)) getDouble];
  jdouble cos = JavaLangMath_cosWithDouble_(ph);
  jdouble sin = JavaLangMath_sinWithDouble_(ph);
  jdouble x0 = x_ * cos - y_ * sin;
  y_ = x_ * sin + y_ * cos;
  x_ = x0;
}

- (void)mirrorXYWithDouble:(jdouble)phi {
  jdouble cos = JavaLangMath_cosWithDouble_(phi);
  jdouble sin = JavaLangMath_sinWithDouble_(phi);
  jdouble x0 = x_ * cos + y_ * sin;
  y_ = x_ * sin - y_ * cos;
  x_ = x0;
}

- (jboolean)hasCoords {
  return YES;
}

- (void)dealloc {
  RELEASE_(sbToString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoVec3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withDouble:withDouble:withDouble:", "GeoVec3D", NULL, 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "setUndefinedCoords", NULL, "V", 0x4, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setCoordsWithDouble:withDouble:withDouble:", "setCoords", "V", 0x401, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelGeosGeoVec3D:", "setCoords", "V", 0x401, NULL, NULL },
    { "getX", NULL, "D", 0x11, NULL, NULL },
    { "getY", NULL, "D", 0x11, NULL, NULL },
    { "getZ", NULL, "D", 0x11, NULL, NULL },
    { "getCoordsWithDoubleArray:", "getCoords", "V", 0x11, NULL, NULL },
    { "getCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x11, NULL, NULL },
    { "getInhomCoordsWithDoubleArray:", "getInhomCoords", "V", 0x1, NULL, NULL },
    { "isPolar", NULL, "Z", 0x11, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x1, NULL, NULL },
    { "setCartesian", NULL, "V", 0x1, NULL, NULL },
    { "setComplex", NULL, "V", 0x1, NULL, NULL },
    { "setCartesian3D", NULL, "V", 0x1, NULL, NULL },
    { "setSpherical", NULL, "V", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "getTrace", NULL, "Z", 0x1, NULL, NULL },
    { "linDepWithGeogebraCommonKernelGeosGeoVec3D:", "linDep", "Z", 0x11, NULL, NULL },
    { "isZero", NULL, "Z", 0x11, NULL, NULL },
    { "crossWithGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:", "cross", "V", 0x19, NULL, NULL },
    { "crossWithGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:", "cross", "Lgeogebra.common.kernel.Matrix.Coords;", 0x19, NULL, NULL },
    { "lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoLine:", "lineThroughPoints", "V", 0x19, NULL, NULL },
    { "lineThroughPointsCoordsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelGeosGeoLine:", "lineThroughPointsCoords", "V", 0x19, NULL, NULL },
    { "lineThroughPointVectorWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoLine:", "lineThroughPointVector", "V", 0x19, NULL, NULL },
    { "crossWithGeogebraCommonKernelGeosGeoVec3D:withDouble:withDouble:withDouble:withGeogebraCommonKernelGeosGeoVec3D:", "cross", "V", 0x19, NULL, NULL },
    { "crossWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withGeogebraCommonKernelGeosGeoVec3D:", "cross", "V", 0x19, NULL, NULL },
    { "crossWithDoubleArray:withDoubleArray:withDoubleArray:", "cross", "V", 0x19, NULL, NULL },
    { "innerWithGeogebraCommonKernelGeosGeoVec3D:", "inner", "D", 0x11, NULL, NULL },
    { "changeSign", NULL, "V", 0x11, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:", "add", "V", 0x19, NULL, NULL },
    { "subWithGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:withGeogebraCommonKernelGeosGeoVec3D:", "sub", "V", 0x19, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLtagsMinimalWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "getXMLtagsMinimal", "V", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "rotateXYWithGeogebraCommonKernelArithmeticNumberValue:", "rotateXY", "V", 0x4, NULL, NULL },
    { "mirrorXYWithDouble:", "mirrorXY", "V", 0x14, NULL, NULL },
    { "hasCoords", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "x_", NULL, 0x1, "D", NULL, NULL,  },
    { "y_", NULL, 0x1, "D", NULL, NULL,  },
    { "z_", NULL, 0x1, "D", NULL, NULL,  },
    { "trace_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hasUpdatePrevilege_", NULL, 0x1, "Z", NULL, NULL,  },
    { "sbToString_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoVec3D = { 2, "GeoVec3D", "geogebra.common.kernel.geos", NULL, 0x401, 49, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoVec3D;
}

@end

void GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoVec3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->x_ = JavaLangDouble_NaN;
  self->y_ = JavaLangDouble_NaN;
  self->z_ = JavaLangDouble_NaN;
  self->hasUpdatePrevilege_ = NO;
  GeogebraCommonKernelGeosGeoVec3D_setAndConsume_sbToString_(self, new_JavaLangStringBuilder_initWithInt_(50));
}

void GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_withDouble_withDouble_withDouble_(GeogebraCommonKernelGeosGeoVec3D *self, GeogebraCommonKernelConstruction *c, jdouble x, jdouble y, jdouble z) {
  GeogebraCommonKernelGeosGeoVec3D_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setCoordsWithDouble:x withDouble:y withDouble:z];
}

jdouble GeogebraCommonKernelGeosGeoVec3D_getX(GeogebraCommonKernelGeosGeoVec3D *self) {
  return self->x_;
}

jdouble GeogebraCommonKernelGeosGeoVec3D_getY(GeogebraCommonKernelGeosGeoVec3D *self) {
  return self->y_;
}

void GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoVec3D *u, GeogebraCommonKernelGeosGeoVec3D *v, GeogebraCommonKernelGeosGeoVec3D *w) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(w)) setCoordsWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(u))->y_ * ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->z_ - u->z_ * v->y_ withDouble:u->z_ * v->x_ - u->x_ * v->z_ withDouble:u->x_ * v->y_ - u->y_ * v->x_];
}

GeogebraCommonKernelMatrixCoords *GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoVec3D *u, GeogebraCommonKernelGeosGeoVec3D *v) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  GeogebraCommonKernelMatrixCoords *ret = [new_GeogebraCommonKernelMatrixCoords_initWithInt_(3) autorelease];
  [ret setXWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(u))->y_ * ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->z_ - u->z_ * v->y_];
  [ret setYWithDouble:u->z_ * v->x_ - u->x_ * v->z_];
  [ret setZWithDouble:u->x_ * v->y_ - u->y_ * v->x_];
  return ret;
}

void GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  if (!([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A)) isDefined] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) isDefined])) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
    return;
  }
  if ([A isInfinite]) {
    if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) isInfinite]) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
    }
    else {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:GeogebraCommonKernelGeosGeoVec3D_getY(A) withDouble:-GeogebraCommonKernelGeosGeoVec3D_getX(A) withDouble:GeogebraCommonKernelGeosGeoVec3D_getX(A) * [B getInhomY] - GeogebraCommonKernelGeosGeoVec3D_getY(A) * [B getInhomX]];
    }
  }
  else {
    if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(B)) isInfinite]) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:-GeogebraCommonKernelGeosGeoVec3D_getY(B) withDouble:GeogebraCommonKernelGeosGeoVec3D_getX(B) withDouble:[A getInhomX] * GeogebraCommonKernelGeosGeoVec3D_getY(B) - [A getInhomY] * GeogebraCommonKernelGeosGeoVec3D_getX(B)];
    }
    else {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:[A getInhomY] - [B getInhomY] withDouble:[B getInhomX] - [A getInhomX] withDouble:[A getInhomX] * [B getInhomY] - [A getInhomY] * [B getInhomX]];
    }
  }
}

void GeogebraCommonKernelGeosGeoVec3D_lineThroughPointsCoordsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelMatrixCoords *A, GeogebraCommonKernelMatrixCoords *B, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  if (!([((GeogebraCommonKernelMatrixCoords *) nil_chk(A)) getLength] == 3 && [((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getLength] == 3)) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
    return;
  }
  if (!([A isFinite] && [((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) isFinite])) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
    return;
  }
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([A getZ])) {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
    }
    else {
      GeogebraCommonKernelMatrixCoords *BInhom = [B getInhomCoords];
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:[A getY] withDouble:-[A getX] withDouble:[A getX] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(BInhom)) getY] - [A getY] * [BInhom getX]];
    }
  }
  else {
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(B)) getZ])) {
      GeogebraCommonKernelMatrixCoords *AInhom = [A getInhomCoords];
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:[B getY] withDouble:-[B getX] withDouble:[B getX] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(AInhom)) getY] - [B getY] * [AInhom getX]];
    }
    else {
      GeogebraCommonKernelMatrixCoords *AInhom = [A getInhomCoords];
      GeogebraCommonKernelMatrixCoords *BInhom = [B getInhomCoords];
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(AInhom)) getY] - [((GeogebraCommonKernelMatrixCoords *) nil_chk(BInhom)) getY] withDouble:[BInhom getX] - [AInhom getX] withDouble:[AInhom getX] * [BInhom getY] - [AInhom getY] * [BInhom getX]];
    }
  }
}

void GeogebraCommonKernelGeosGeoVec3D_lineThroughPointVectorWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoVec3D *v, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(A)) isInfinite]) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setUndefined];
  }
  else {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) setCoordsWithDouble:-((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(v))->y_ withDouble:v->x_ withDouble:[A getInhomX] * v->y_ - [A getInhomY] * v->x_];
  }
}

void GeogebraCommonKernelGeosGeoVec3D_crossWithGeogebraCommonKernelGeosGeoVec3D_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoVec3D *u, jdouble vx, jdouble vy, jdouble vz, GeogebraCommonKernelGeosGeoVec3D *w) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(w)) setCoordsWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(u))->y_ * vz - u->z_ * vy withDouble:u->z_ * vx - u->x_ * vz withDouble:u->x_ * vy - u->y_ * vx];
}

void GeogebraCommonKernelGeosGeoVec3D_crossWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withGeogebraCommonKernelGeosGeoVec3D_(jdouble ux, jdouble uy, jdouble uz, jdouble vx, jdouble vy, jdouble vz, GeogebraCommonKernelGeosGeoVec3D *w) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(w)) setCoordsWithDouble:uy * vz - uz * vy withDouble:uz * vx - ux * vz withDouble:ux * vy - uy * vx];
}

void GeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(IOSDoubleArray *u, IOSDoubleArray *v, IOSDoubleArray *w) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  *IOSDoubleArray_GetRef(nil_chk(w), 0) = IOSDoubleArray_Get(nil_chk(u), 1) * IOSDoubleArray_Get(nil_chk(v), 2) - IOSDoubleArray_Get(u, 2) * IOSDoubleArray_Get(v, 1);
  *IOSDoubleArray_GetRef(w, 1) = IOSDoubleArray_Get(u, 2) * IOSDoubleArray_Get(v, 0) - IOSDoubleArray_Get(u, 0) * IOSDoubleArray_Get(v, 2);
  *IOSDoubleArray_GetRef(w, 2) = IOSDoubleArray_Get(u, 0) * IOSDoubleArray_Get(v, 1) - IOSDoubleArray_Get(u, 1) * IOSDoubleArray_Get(v, 0);
}

void GeogebraCommonKernelGeosGeoVec3D_addWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoVec3D *a, GeogebraCommonKernelGeosGeoVec3D *b, GeogebraCommonKernelGeosGeoVec3D *c) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(c)) setCoordsWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(a))->x_ + ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(b))->x_ withDouble:a->y_ + b->y_ withDouble:a->z_ + b->z_];
}

void GeogebraCommonKernelGeosGeoVec3D_subWithGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_withGeogebraCommonKernelGeosGeoVec3D_(GeogebraCommonKernelGeosGeoVec3D *a, GeogebraCommonKernelGeosGeoVec3D *b, GeogebraCommonKernelGeosGeoVec3D *c) {
  GeogebraCommonKernelGeosGeoVec3D_initialize();
  [((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(c)) setCoordsWithDouble:((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(a))->x_ - ((GeogebraCommonKernelGeosGeoVec3D *) nil_chk(b))->x_ withDouble:a->y_ - b->y_ withDouble:a->z_ - b->z_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoVec3D)
