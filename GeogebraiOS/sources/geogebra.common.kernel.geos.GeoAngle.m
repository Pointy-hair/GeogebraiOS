//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoAngle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoAngle () {
 @public
  jint arcSize_;
  jboolean emphasizeRightAngle_;
  jdouble rawValue_;
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *angleStyle_;
}

- (jdouble)calcAngleValueWithDouble:(jdouble)val;

- (void)getXMLAngleStyleTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoAngle, angleStyle_, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoAngle_calcAngleValueWithDouble_(GeogebraCommonKernelGeosGeoAngle *self, jdouble val);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoAngle_getXMLAngleStyleTagWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoAngle *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoAngle_getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoAngle *self, JavaLangStringBuilder *sb);

@interface GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum () {
 @public
  jint xmlVal_;
}

@end

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *self, jint xmlVal, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(jint xmlVal, NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoAngle)

IOSObjectArray *GeogebraCommonKernelGeosGeoAngle_INTERVAL_MIN_;
IOSObjectArray *GeogebraCommonKernelGeosGeoAngle_INTERVAL_MAX_;

@implementation GeogebraCommonKernelGeosGeoAngle

+ (IOSObjectArray *)getDecoTypes {
  return GeogebraCommonKernelGeosGeoAngle_getDecoTypes();
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                               withBoolean:(jboolean)keepAdvanced {
  [super setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:geo withBoolean:keepAdvanced];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoAngle]) {
    [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:[((GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class])) getAngleStyle]];
  }
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                              withDouble:(jdouble)x {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(self, c, label, x);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                                              withDouble:(jdouble)x
     withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)style {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(self, c, label, x, style);
  return self;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_ANGLE();
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                              withDouble:(jdouble)x {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  return self;
}

- (jboolean)isGeoAngle {
  return YES;
}

- (jboolean)isAngle {
  return YES;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoNumeric *num = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class]);
  [self setValueWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) getValue]];
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoAngle]) {
    GeogebraCommonKernelGeosGeoAngle *ang = (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class]);
    arcSize_ = ang->arcSize_;
    if (![ang isIndependent]) {
      [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:ang->angleStyle_];
    }
    emphasizeRightAngle_ = ang->emphasizeRightAngle_;
  }
}

- (void)setValueWithDouble:(jdouble)val
               withBoolean:(jboolean)changeAnimationValue {
  jdouble angVal = GeogebraCommonKernelGeosGeoAngle_calcAngleValueWithDouble_(self, val);
  [super setValueWithDouble:angVal withBoolean:changeAnimationValue];
}

- (jdouble)calcAngleValueWithDouble:(jdouble)val {
  return GeogebraCommonKernelGeosGeoAngle_calcAngleValueWithDouble_(self, val);
}

- (GeogebraCommonKernelGeosGeoNumeric *)copy__ {
  GeogebraCommonKernelGeosGeoAngle *angle = [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [angle setValueWithDouble:rawValue_];
  [angle setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:angleStyle_];
  return angle;
}

- (void)setAllowReflexAngleWithBoolean:(jboolean)allowReflexAngle {
  switch ([angleStyle_ ordinal]) {
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    if (allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    break;
    default:
    if (!allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
    break;
  }
  if (allowReflexAngle) [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  else [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_NOTREFLEX()];
}

- (void)setForceReflexAngleWithBoolean:(jboolean)forceReflexAngle {
  if (forceReflexAngle) {
    [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()];
  }
  else if (angleStyle_ == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ISREFLEX()) {
    [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE()];
  }
}

- (void)setAngleStyleWithInt:(jint)style {
  [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_getStyleWithInt_(style)];
}

- (void)setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)angleStyle {
  if (angleStyle == self->angleStyle_) return;
  GeogebraCommonKernelGeosGeoAngle_set_angleStyle_(self, angleStyle);
  if (algoParent_ == nil) {
    [self setValueWithDouble:rawValue_];
  }
  else {
    [algoParent_ update];
  }
}

- (GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)getAngleStyle {
  return angleStyle_;
}

- (jboolean)hasOrientation {
  return YES;
}

- (jdouble)getRawAngle {
  return rawValue_;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [self isEuclidianVisible] ? [((JavaLangStringBuilder *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:value_ withDouble:1 / [self getAnimationStep] withGeogebraCommonKernelStringTemplate:tpl withBoolean:angleStyle_ == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()])) description] : [((JavaLangStringBuilder *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatAngleWithDouble:value_ withGeogebraCommonKernelStringTemplate:tpl withBoolean:angleStyle_ == GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()])) description];
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  GeogebraCommonKernelArithmeticMyDouble *ret = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, value_) autorelease];
  [ret setAngle];
  return ret;
}

- (jint)getArcSize {
  return arcSize_;
}

- (void)setArcSizeWithInt:(jint)i {
  arcSize_ = i;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoAngle_getXMLAngleStyleTagWithJavaLangStringBuilder_(self, sb);
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<value val=\""];
  [sb appendWithDouble:rawValue_];
  [sb appendWithNSString:@"\""];
  if ([self isRandom]) {
    [sb appendWithNSString:@" random=\"true\""];
  }
  [sb appendWithNSString:@"/>\n"];
  if ([self isDrawable] || [self isSliderable]) {
    [self getXMLsliderTagWithJavaLangStringBuilder:sb];
    [self getXMLvisualTagsWithJavaLangStringBuilder:sb];
    [self getLineStyleXMLWithJavaLangStringBuilder:sb];
    [sb appendWithNSString:@"\t<arcSize val=\""];
    [sb appendWithInt:arcSize_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  else if (GeogebraCommonKernelGeosGeoElementSpreadsheet_isSpreadsheetLabelWithNSString_(label_)) {
    [self appendObjectColorXMLWithJavaLangStringBuilder:sb];
  }
  GeogebraCommonKernelGeosGeoAngle_getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder_(self, sb);
  [self getXMLanimationTagsWithJavaLangStringBuilder:sb];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  [self getBreakpointXMLWithJavaLangStringBuilder:sb];
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (void)getXMLtagsMinimalWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[self regrFormatWithDouble:rawValue_]];
  if ([self isDrawable] || [self isSliderable]) {
    [sb appendWithNSString:JreStrcat("C$", ' ', [self regrFormatWithDouble:arcSize_])];
  }
}

- (void)getXMLAngleStyleTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoAngle_getXMLAngleStyleTagWithJavaLangStringBuilder_(self, sb);
}

- (void)getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelGeosGeoAngle_getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder_(self, sb);
}

- (void)setDecorationTypeWithInt:(jint)type {
  if (type >= ((IOSObjectArray *) nil_chk(GeogebraCommonKernelGeosGeoAngle_getDecoTypes()))->size_ || type < 0) decorationType_ = GeogebraCommonKernelGeosGeoElement_DECORATION_NONE;
  else decorationType_ = type;
}

- (jboolean)isEmphasizeRightAngle {
  return emphasizeRightAngle_;
}

- (void)setEmphasizeRightAngleWithBoolean:(jboolean)emphasizeRightAngle {
  self->emphasizeRightAngle_ = emphasizeRightAngle;
}

- (void)setZero {
  rawValue_ = 0;
}

- (jboolean)isDrawable {
  return isDrawable__ || ([self getDrawAlgorithm] != [self getParentAlgorithm]) || (([self isIndependent] && [self isLabelSet]) || [[self getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoAngle class]]);
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (jboolean)canHaveClickScript {
  return [self isDrawable];
}

- (void)dealloc {
  RELEASE_(angleStyle_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoAngle class]) {
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoAngle_INTERVAL_MIN_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("CC", '0', GeogebraCommonUtilUnicode_degreeChar), JreStrcat("CC", '0', GeogebraCommonUtilUnicode_degreeChar), JreStrcat("$C", @"180", GeogebraCommonUtilUnicode_degreeChar), JreStrcat("CC", '-', GeogebraCommonUtilUnicode_Infinity) } count:4 type:NSString_class_()]);
    JreStrongAssignAndConsume(&GeogebraCommonKernelGeosGeoAngle_INTERVAL_MAX_, nil, [IOSObjectArray newArrayWithObjects:(id[]){ JreStrcat("$C", @"360", GeogebraCommonUtilUnicode_degreeChar), JreStrcat("$C", @"180", GeogebraCommonUtilUnicode_degreeChar), JreStrcat("$C", @"360", GeogebraCommonUtilUnicode_degreeChar), JreStrcat("C", GeogebraCommonUtilUnicode_Infinity) } count:4 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoAngle)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDecoTypes", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoAngle", NULL, 0x1, NULL, NULL },
    { "setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setAllVisualPropertiesExceptEuclidianVisible", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDouble:", "GeoAngle", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withDouble:withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:", "GeoAngle", NULL, 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withDouble:", "GeoAngle", NULL, 0x1, NULL, NULL },
    { "isGeoAngle", NULL, "Z", 0x11, NULL, NULL },
    { "isAngle", NULL, "Z", 0x11, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "setValueWithDouble:withBoolean:", "setValue", "V", 0x1, NULL, NULL },
    { "calcAngleValueWithDouble:", "calcAngleValue", "D", 0x2, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "setAllowReflexAngleWithBoolean:", "setAllowReflexAngle", "V", 0x11, NULL, NULL },
    { "setForceReflexAngleWithBoolean:", "setForceReflexAngle", "V", 0x11, NULL, NULL },
    { "setAngleStyleWithInt:", "setAngleStyle", "V", 0x1, NULL, NULL },
    { "setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:", "setAngleStyle", "V", 0x1, NULL, NULL },
    { "getAngleStyle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", 0x1, NULL, NULL },
    { "hasOrientation", NULL, "Z", 0x1, NULL, NULL },
    { "getRawAngle", NULL, "D", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x11, NULL, NULL },
    { "getArcSize", NULL, "I", 0x1, NULL, NULL },
    { "setArcSizeWithInt:", "setArcSize", "V", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "getXMLtagsMinimalWithJavaLangStringBuilder:withGeogebraCommonKernelStringTemplate:", "getXMLtagsMinimal", "V", 0x1, NULL, NULL },
    { "getXMLAngleStyleTagWithJavaLangStringBuilder:", "getXMLAngleStyleTag", "V", 0x2, NULL, NULL },
    { "getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder:", "getXMLEmphasizeRightAngleTag", "V", 0x2, NULL, NULL },
    { "setDecorationTypeWithInt:", "setDecorationType", "V", 0x1, NULL, NULL },
    { "isEmphasizeRightAngle", NULL, "Z", 0x1, NULL, NULL },
    { "setEmphasizeRightAngleWithBoolean:", "setEmphasizeRightAngle", "V", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "isDrawable", NULL, "Z", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "canHaveClickScript", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "arcSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "emphasizeRightAngle_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rawValue_", NULL, 0x2, "D", NULL, NULL,  },
    { "DEFAULT_SLIDER_MIN_ANGLE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MIN_ANGLE },
    { "DEFAULT_SLIDER_MAX_ANGLE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MAX_ANGLE },
    { "DEFAULT_SLIDER_INCREMENT_ANGLE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_INCREMENT_ANGLE },
    { "angleStyle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", NULL, NULL,  },
    { "INTERVAL_MIN_", NULL, 0x19, "[Ljava.lang.String;", &GeogebraCommonKernelGeosGeoAngle_INTERVAL_MIN_, NULL,  },
    { "INTERVAL_MAX_", NULL, 0x19, "[Ljava.lang.String;", &GeogebraCommonKernelGeosGeoAngle_INTERVAL_MAX_, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoAngle = { 2, "GeoAngle", "geogebra.common.kernel.geos", NULL, 0x1, 36, methods, 9, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoAngle;
}

@end

IOSObjectArray *GeogebraCommonKernelGeosGeoAngle_getDecoTypes() {
  GeogebraCommonKernelGeosGeoAngle_initialize();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_JavaLangInteger_initWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_NONE) autorelease], JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE) } count:8 type:JavaLangInteger_class_()];
  return ret;
}

void GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoAngle *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self, c);
  self->emphasizeRightAngle_ = YES;
  GeogebraCommonKernelGeosGeoAngle_set_angleStyle_(self, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_ANTICLOCKWISE());
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoAngle *new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoAngle *self = [GeogebraCommonKernelGeosGeoAngle alloc];
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(GeogebraCommonKernelGeosGeoAngle *self, GeogebraCommonKernelConstruction *c, NSString *label, jdouble x) {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoAngle *new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(GeogebraCommonKernelConstruction *c, NSString *label, jdouble x) {
  GeogebraCommonKernelGeosGeoAngle *self = [GeogebraCommonKernelGeosGeoAngle alloc];
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_(self, c, label, x);
  return self;
}

void GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(GeogebraCommonKernelGeosGeoAngle *self, GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *style) {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setAngleStyleWithGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum:style];
  [self setValueWithDouble:x];
  [self setLabelWithNSString:label];
}

GeogebraCommonKernelGeosGeoAngle *new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(GeogebraCommonKernelConstruction *c, NSString *label, jdouble x, GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *style) {
  GeogebraCommonKernelGeosGeoAngle *self = [GeogebraCommonKernelGeosGeoAngle alloc];
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withNSString_withDouble_withGeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_(self, c, label, x, style);
  return self;
}

void GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(GeogebraCommonKernelGeosGeoAngle *self, GeogebraCommonKernelConstruction *c, jdouble x) {
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setValueWithDouble:x];
}

GeogebraCommonKernelGeosGeoAngle *new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(GeogebraCommonKernelConstruction *c, jdouble x) {
  GeogebraCommonKernelGeosGeoAngle *self = [GeogebraCommonKernelGeosGeoAngle alloc];
  GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_withDouble_(self, c, x);
  return self;
}

jdouble GeogebraCommonKernelGeosGeoAngle_calcAngleValueWithDouble_(GeogebraCommonKernelGeosGeoAngle *self, jdouble val) {
  jdouble angVal;
  if (self->angleStyle_ != GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_get_UNBOUNDED()) {
    angVal = GeogebraCommonKernelKernel_convertToAngleValueWithDouble_(val);
  }
  else {
    angVal = val;
  }
  self->rawValue_ = angVal;
  switch ([self->angleStyle_ ordinal]) {
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    if (angVal > JavaLangMath_PI) angVal = 2.0 * JavaLangMath_PI - angVal;
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    if (angVal < JavaLangMath_PI) angVal = 2.0 * JavaLangMath_PI - angVal;
    break;
  }
  return angVal;
}

void GeogebraCommonKernelGeosGeoAngle_getXMLAngleStyleTagWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoAngle *self, JavaLangStringBuilder *sb) {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<angleStyle val=\""];
  [sb appendWithInt:[((GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *) nil_chk(self->angleStyle_)) getXmlVal]];
  [sb appendWithNSString:@"\"/>\n"];
}

void GeogebraCommonKernelGeosGeoAngle_getXMLEmphasizeRightAngleTagWithJavaLangStringBuilder_(GeogebraCommonKernelGeosGeoAngle *self, JavaLangStringBuilder *sb) {
  if (self->emphasizeRightAngle_) return;
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<emphasizeRightAngle val=\""];
  [sb appendWithBoolean:self->emphasizeRightAngle_];
  [sb appendWithNSString:@"\"/>\n"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoAngle)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum)

GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values_[4];

@implementation GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum

- (jint)getXmlVal {
  return xmlVal_;
}

- (instancetype)initWithInt:(jint)xmlVal
               withNSString:(NSString *)__name
                    withInt:(jint)__ordinal {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(self, xmlVal, __name, __ordinal);
  return self;
}

+ (GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)getStyleWithInt:(jint)style {
  return GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_getStyleWithInt_(style);
}

IOSObjectArray *GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values() {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values_ count:4 type:GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values();
}

+ (GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *e = GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum class]) {
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_ANTICLOCKWISE = new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(0, @"ANTICLOCKWISE", 0);
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_NOTREFLEX = new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(1, @"NOTREFLEX", 1);
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_ISREFLEX = new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(2, @"ISREFLEX", 2);
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_UNBOUNDED = new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(3, @"UNBOUNDED", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getXmlVal", NULL, "I", 0x1, NULL, NULL },
    { "getStyleWithInt:", "getStyle", "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ANTICLOCKWISE", "ANTICLOCKWISE", 0x4019, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", &GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_ANTICLOCKWISE, NULL,  },
    { "NOTREFLEX", "NOTREFLEX", 0x4019, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", &GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_NOTREFLEX, NULL,  },
    { "ISREFLEX", "ISREFLEX", 0x4019, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", &GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_ISREFLEX, NULL,  },
    { "UNBOUNDED", "UNBOUNDED", 0x4019, "Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;", &GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_UNBOUNDED, NULL,  },
    { "xmlVal_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.geos.GeoAngle$AngleStyle;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum = { 2, "AngleStyle", "geogebra.common.kernel.geos", "GeoAngle", 0x4019, 2, methods, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/geos/GeoAngle$AngleStyle;>;" };
  return &_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum;
}

@end

void GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *self, jint xmlVal, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  self->xmlVal_ = xmlVal;
}

GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *new_GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(jint xmlVal, NSString *__name, jint __ordinal) {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *self = [GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum alloc];
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initWithInt_withNSString_withInt_(self, xmlVal, __name, __ordinal);
  return self;
}

GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_getStyleWithInt_(jint style) {
  GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_initialize();
  {
    IOSObjectArray *a__ = GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_values();
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *l = *b__++;
      if (((GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum *) nil_chk(l))->xmlVal_ == style) {
        return l;
      }
    }
  }
  return GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum_ANTICLOCKWISE;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoAngle_AngleStyleEnum)
