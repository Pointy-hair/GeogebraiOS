//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/kernelND/AlgoMidpointND.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/AlgoMidpointND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelKernelNDAlgoMidpointND () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> P_, Q_;
  id<GeogebraCommonKernelKernelNDGeoPointND> M_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDAlgoMidpointND, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDAlgoMidpointND, Q_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelKernelNDAlgoMidpointND, M_, id<GeogebraCommonKernelKernelNDGeoPointND>)

__attribute__((unused)) static void GeogebraCommonKernelKernelNDAlgoMidpointND_compute(GeogebraCommonKernelKernelNDAlgoMidpointND *self);

@implementation GeogebraCommonKernelKernelNDAlgoMidpointND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonKernelKernelNDAlgoMidpointND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, P, Q);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
            withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  GeogebraCommonKernelKernelNDAlgoMidpointND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, cons, segment);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)construction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Midpoint();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_MIDPOINT;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(Q_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:M_];
  [self setDependencies];
}

- (void)compute {
  GeogebraCommonKernelKernelNDAlgoMidpointND_compute(self);
}

- (void)copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)computeMidCoords {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return M_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getQ {
  return Q_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"MidpointOfAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(Q_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(M_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMidpointND", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoSegmentND:", "AlgoMidpointND", NULL, 0x4, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x404, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x11, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:", "copyCoords", "V", 0x404, NULL, NULL },
    { "computeMidCoords", NULL, "V", 0x404, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x19, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelKernelNDAlgoMidpointND_serialVersionUID },
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "M_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelKernelNDAlgoMidpointND = { 2, "AlgoMidpointND", "geogebra.common.kernel.kernelND", NULL, 0x401, 13, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelKernelNDAlgoMidpointND;
}

@end

void GeogebraCommonKernelKernelNDAlgoMidpointND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelKernelNDAlgoMidpointND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_P_(self, P);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_Q_(self, Q);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_M_(self, [self newGeoPointWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  GeogebraCommonKernelKernelNDAlgoMidpointND_compute(self);
}

void GeogebraCommonKernelKernelNDAlgoMidpointND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonKernelKernelNDAlgoMidpointND *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoSegmentND> segment) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_P_(self, [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(segment)) getStartPoint]);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_Q_(self, [segment getEndPoint]);
  GeogebraCommonKernelKernelNDAlgoMidpointND_set_M_(self, [self newGeoPointWithGeogebraCommonKernelConstruction:cons]);
}

void GeogebraCommonKernelKernelNDAlgoMidpointND_compute(GeogebraCommonKernelKernelNDAlgoMidpointND *self) {
  jboolean pInf = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isInfinite];
  jboolean qInf = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Q_)) isInfinite];
  if (!pInf && !qInf) {
    [self computeMidCoords];
  }
  else if (pInf && qInf) [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->M_)) setUndefined];
  else if (pInf) [self copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:self->P_];
  else [self copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:self->Q_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelKernelNDAlgoMidpointND)
