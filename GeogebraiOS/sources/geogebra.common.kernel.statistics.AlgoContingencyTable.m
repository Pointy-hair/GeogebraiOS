//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoContingencyTable.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/statistics/AlgoChiSquaredTest.h"
#include "geogebra/common/kernel/statistics/AlgoContingencyTable.h"
#include "geogebra/common/kernel/statistics/AlgoFrequency.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelStatisticsAlgoContingencyTable () {
 @public
  GeogebraCommonKernelGeosGeoList *list1_, *list2_, *rowList_, *colList_, *freqMatrix_;
  GeogebraCommonKernelGeosGeoText *args_;
  GeogebraCommonKernelGeosGeoText *table_;
  GeogebraCommonKernelStatisticsAlgoFrequency *freq_;
  JavaLangStringBuilder *tableSb_;
  jboolean isRawData_;
  IOSObjectArray *rowValues_;
  IOSObjectArray *colValues_;
  IOSObjectArray *freqValues_;
  IOSObjectArray *expected_;
  IOSObjectArray *chiCont_;
  IOSIntArray *rowSum_;
  IOSIntArray *colSum_;
  jint totalSum_;
  jboolean showRowPercent_, showColPercent_, showTotalPercent_, showChi_, showExpected_, showTest_;
  jint rowCount_;
  jint colCount_;
  jint lastRow_;
}

- (void)parseArgs;

- (jboolean)loadRawDataValues;

- (jboolean)loadPreparedDataValues;

- (void)computeChiTestValues;

- (void)endTableWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb2;

- (void)addChiTestWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (void)beginTable;

- (void)addTableRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withInt:(jint)rowIndex
                                withNSString:(NSString *)header
                                withNSString:(NSString *)type
                                 withBoolean:(jboolean)lineBelow;

- (void)startRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withBoolean:(jboolean)lineBelow
                              withBoolean:(jboolean)lineAbove;

- (void)endRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)lineBelow;

- (void)endCellWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)handleSpecialCharWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, list1_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, list2_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, rowList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, colList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, freqMatrix_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, args_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, table_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, freq_, GeogebraCommonKernelStatisticsAlgoFrequency *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, tableSb_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, rowValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, colValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, freqValues_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, expected_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, chiCont_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, rowSum_, IOSIntArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoContingencyTable, colSum_, IOSIntArray *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_compute(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb2);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(GeogebraCommonKernelStatisticsAlgoContingencyTable *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jint rowIndex, NSString *header, NSString *type, jboolean lineBelow);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow, jboolean lineAbove);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, NSString *s);

@implementation GeogebraCommonKernelStatisticsAlgoContingencyTable

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list2
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, list1, list2, args);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)rowList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)colList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)freqMatrix
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, rowList, colList, freqMatrix, args);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ContingencyTable();
}

- (void)setInputOutput {
  JavaUtilArrayList *outList = [new_JavaUtilArrayList_init() autorelease];
  if (list1_ != nil) [outList addWithId:list1_];
  if (list2_ != nil) [outList addWithId:list2_];
  if (rowList_ != nil) [outList addWithId:rowList_];
  if (colList_ != nil) [outList addWithId:colList_];
  if (freqMatrix_ != nil) [outList addWithId:freqMatrix_];
  if (args_ != nil) [outList addWithId:args_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:[outList size] type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelAlgosAlgoElement_set_input_(self, [outList toArrayWithNSObjectArray:input_]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:table_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return table_;
}

- (void)parseArgs {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(self);
}

- (jboolean)loadRawDataValues {
  return GeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(self);
}

- (jboolean)loadPreparedDataValues {
  return GeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(self);
}

- (void)computeChiTestValues {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(self);
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
}

- (void)endTableWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb2 {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(self, sb2);
}

- (void)addChiTestWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(self, sb);
}

- (void)beginTable {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(self);
}

- (void)addTableRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                                     withInt:(jint)rowIndex
                                withNSString:(NSString *)header
                                withNSString:(NSString *)type
                                 withBoolean:(jboolean)lineBelow {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, sb, rowIndex, header, type, lineBelow);
}

- (void)startRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                              withBoolean:(jboolean)lineBelow
                              withBoolean:(jboolean)lineAbove {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(self, sb, lineBelow, lineAbove);
}

- (void)endRowWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)lineBelow {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(self, sb, lineBelow);
}

- (void)endCellWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
}

- (NSString *)handleSpecialCharWithNSString:(NSString *)s {
  return GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, s);
}

- (void)dealloc {
  RELEASE_(list1_);
  RELEASE_(list2_);
  RELEASE_(rowList_);
  RELEASE_(colList_);
  RELEASE_(freqMatrix_);
  RELEASE_(args_);
  RELEASE_(table_);
  RELEASE_(freq_);
  RELEASE_(tableSb_);
  RELEASE_(rowValues_);
  RELEASE_(colValues_);
  RELEASE_(freqValues_);
  RELEASE_(expected_);
  RELEASE_(chiCont_);
  RELEASE_(rowSum_);
  RELEASE_(colSum_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:", "AlgoContingencyTable", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:", "AlgoContingencyTable", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "parseArgs", NULL, "V", 0x2, NULL, NULL },
    { "loadRawDataValues", NULL, "Z", 0x2, NULL, NULL },
    { "loadPreparedDataValues", NULL, "Z", 0x2, NULL, NULL },
    { "computeChiTestValues", NULL, "V", 0x2, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "endTableWithJavaLangStringBuilder:", "endTable", "V", 0x2, NULL, NULL },
    { "addChiTestWithJavaLangStringBuilder:", "addChiTest", "V", 0x2, NULL, NULL },
    { "beginTable", NULL, "V", 0x2, NULL, NULL },
    { "addTableRowWithJavaLangStringBuilder:withInt:withNSString:withNSString:withBoolean:", "addTableRow", "V", 0x2, NULL, NULL },
    { "startRowWithJavaLangStringBuilder:withBoolean:withBoolean:", "startRow", "V", 0x2, NULL, NULL },
    { "endRowWithJavaLangStringBuilder:withBoolean:", "endRow", "V", 0x2, NULL, NULL },
    { "endCellWithJavaLangStringBuilder:", "endCell", "V", 0x2, NULL, NULL },
    { "handleSpecialCharWithNSString:", "handleSpecialChar", "Ljava.lang.String;", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "rowList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "colList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "freqMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "args_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "freq_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoFrequency;", NULL, NULL,  },
    { "tableSb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "isRawData_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rowValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "colValues_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "freqValues_", NULL, 0x2, "[[I", NULL, NULL,  },
    { "expected_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "chiCont_", NULL, 0x2, "[[D", NULL, NULL,  },
    { "rowSum_", NULL, 0x2, "[I", NULL, NULL,  },
    { "colSum_", NULL, 0x2, "[I", NULL, NULL,  },
    { "totalSum_", NULL, 0x2, "I", NULL, NULL,  },
    { "showRowPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showColPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showTotalPercent_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showChi_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showExpected_", NULL, 0x2, "Z", NULL, NULL,  },
    { "showTest_", NULL, 0x2, "Z", NULL, NULL,  },
    { "rowCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "colCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "lastRow_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoContingencyTable = { 2, "AlgoContingencyTable", "geogebra.common.kernel.statistics", NULL, 0x1, 18, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoContingencyTable;
}

@end

void GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_tableSb_(self, new_JavaLangStringBuilder_init());
  self->isRawData_ = YES;
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_list1_(self, list1);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_list2_(self, list2);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_args_(self, args);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_freq_(self, new_GeogebraCommonKernelStatisticsAlgoFrequency_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withBoolean_(cons, list1, list2, YES));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->freq_];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_table_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  self->table_->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
  [self->table_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoContingencyTable *new_GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list1, GeogebraCommonKernelGeosGeoList *list2, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelStatisticsAlgoContingencyTable *self = [GeogebraCommonKernelStatisticsAlgoContingencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, list1, list2, args);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *rowList, GeogebraCommonKernelGeosGeoList *colList, GeogebraCommonKernelGeosGeoList *freqMatrix, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_tableSb_(self, new_JavaLangStringBuilder_init());
  self->isRawData_ = NO;
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_rowList_(self, rowList);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_colList_(self, colList);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_freqMatrix_(self, freqMatrix);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_args_(self, args);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_table_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  self->table_->isTextCommand__ = YES;
  [self->table_ setLaTeXWithBoolean:YES withBoolean:NO];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_compute(self);
  [self->table_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoContingencyTable *new_GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *rowList, GeogebraCommonKernelGeosGeoList *colList, GeogebraCommonKernelGeosGeoList *freqMatrix, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelStatisticsAlgoContingencyTable *self = [GeogebraCommonKernelStatisticsAlgoContingencyTable alloc];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, rowList, colList, freqMatrix, args);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  self->showRowPercent_ = NO;
  self->showColPercent_ = NO;
  self->showTotalPercent_ = NO;
  self->showChi_ = NO;
  self->showExpected_ = NO;
  self->showTest_ = NO;
  self->lastRow_ = 0;
  if (self->args_ != nil) {
    NSString *optionsStr = [self->args_ getTextString];
    if ([((NSString *) nil_chk(optionsStr)) indexOfString:@"_"] > -1) {
      self->showRowPercent_ = YES;
      self->lastRow_ = 1;
    }
    if ([optionsStr indexOfString:@"|"] > -1) {
      self->showColPercent_ = YES;
      self->lastRow_ = 2;
    }
    if ([optionsStr indexOfString:@"+"] > -1) {
      self->showTotalPercent_ = YES;
      self->lastRow_ = 3;
    }
    if ([optionsStr indexOfString:@"e"] > -1) {
      self->showExpected_ = YES;
      self->lastRow_ = 4;
    }
    if ([optionsStr indexOfString:@"k"] > -1) {
      self->showChi_ = YES;
      self->lastRow_ = 5;
    }
    if ([optionsStr indexOfString:@"="] > -1) {
      self->showTest_ = YES;
    }
  }
}

jboolean GeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk([((GeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult])) isDefined]) {
    return NO;
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_rowValues_(self, [self->freq_ getContingencyRowValues]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_set_colValues_(self, [self->freq_ getContingencyColumnValues]);
  GeogebraCommonKernelGeosGeoList *fr = [self->freq_ getResult];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_rowSum_(self, [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->rowValues_))->size_]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_colSum_(self, [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(self->colValues_))->size_]);
  self->totalSum_ = 0;
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_freqValues_(self, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowValues_->size_, self->colValues_->size_ }]);
  for (jint rowIndex = 0; rowIndex < self->rowValues_->size_; rowIndex++) {
    GeogebraCommonKernelGeosGeoList *rowGeo = (GeogebraCommonKernelGeosGeoList *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(fr)) getWithInt:rowIndex], [GeogebraCommonKernelGeosGeoList class]);
    for (jint colIndex = 0; colIndex < self->colValues_->size_; colIndex++) {
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex) = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(rowGeo)) getWithInt:colIndex], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      *IOSIntArray_GetRef(self->rowSum_, rowIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      *IOSIntArray_GetRef(self->colSum_, colIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      self->totalSum_ += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
    }
  }
  return YES;
}

jboolean GeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  GeogebraCommonKernelGeosGeoElement *geo;
  if (self->rowList_ == nil || self->colList_ == nil || self->freqMatrix_ == nil || ![self->rowList_ isDefined] || ![self->colList_ isDefined] || ![self->freqMatrix_ isDefined] || ![self->freqMatrix_ isMatrix]) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return NO;
  }
  self->rowCount_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->rowList_)) size];
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->freqMatrix_)) size] != self->rowCount_) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return NO;
  }
  self->colCount_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->colList_)) size];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_rowValues_(self, [IOSObjectArray newArrayWithLength:self->rowCount_ type:NSString_class_()]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_colValues_(self, [IOSObjectArray newArrayWithLength:self->colCount_ type:NSString_class_()]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_rowSum_(self, [IOSIntArray newArrayWithLength:self->rowCount_]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_colSum_(self, [IOSIntArray newArrayWithLength:self->colCount_]);
  for (jint i = 0; i < self->rowCount_; i++) {
    geo = [self->rowList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return NO;
    IOSObjectArray_Set(self->rowValues_, i, [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getTextString]);
  }
  for (jint i = 0; i < self->colCount_; i++) {
    geo = [self->colList_ getWithInt:i];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return NO;
    IOSObjectArray_Set(self->colValues_, i, [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getTextString]);
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_freqValues_(self, [IOSIntArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowSum_->size_, self->colValues_->size_ }]);
  self->totalSum_ = 0;
  for (jint rowIndex = 0; rowIndex < self->rowCount_; rowIndex++) {
    GeogebraCommonKernelGeosGeoList *rowGeo = (GeogebraCommonKernelGeosGeoList *) check_class_cast([self->freqMatrix_ getWithInt:rowIndex], [GeogebraCommonKernelGeosGeoList class]);
    for (jint colIndex = 0; colIndex < self->colCount_; colIndex++) {
      geo = [((GeogebraCommonKernelGeosGeoList *) nil_chk(rowGeo)) getWithInt:colIndex];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) return NO;
      *IOSIntArray_GetRef(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex) = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([rowGeo getWithInt:colIndex], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]);
      *IOSIntArray_GetRef(self->rowSum_, rowIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      *IOSIntArray_GetRef(self->colSum_, colIndex) += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
      self->totalSum_ += IOSIntArray_Get(nil_chk(IOSObjectArray_Get(self->freqValues_, rowIndex)), colIndex);
    }
  }
  return YES;
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_expected_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ ((IOSObjectArray *) nil_chk(self->rowValues_))->size_, ((IOSObjectArray *) nil_chk(self->colValues_))->size_ }]);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_setAndConsume_chiCont_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ self->rowValues_->size_, self->colValues_->size_ }]);
  for (jint rowIndex = 0; rowIndex < self->rowValues_->size_; rowIndex++) {
    for (jint colIndex = 0; colIndex < self->colValues_->size_; colIndex++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex) = 1.0 * IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex) * IOSIntArray_Get(nil_chk(self->colSum_), colIndex) / self->totalSum_;
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) = (IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex));
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->chiCont_, rowIndex)), colIndex) / IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->expected_, rowIndex)), colIndex);
    }
  }
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_compute(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  jboolean dataLoaded;
  if (self->isRawData_) {
    dataLoaded = GeogebraCommonKernelStatisticsAlgoContingencyTable_loadRawDataValues(self);
  }
  else {
    dataLoaded = GeogebraCommonKernelStatisticsAlgoContingencyTable_loadPreparedDataValues(self);
  }
  if (!dataLoaded) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setUndefined];
    return;
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_parseArgs(self);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_computeChiTestValues(self);
  [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) setLengthWithInt:0];
  GeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(self);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, -1, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Frequency"]), @"colValue", self->lastRow_ == 0);
  if (self->showRowPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"RowPercent"]), @"blank", self->lastRow_ == 1);
  if (self->showColPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ColumnPercent"]), @"blank", self->lastRow_ == 2);
  if (self->showTotalPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"TotalPercent"]), @"blank", self->lastRow_ == 3);
  if (self->showExpected_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ExpectedCount"]), @"blank", self->lastRow_ == 4);
  if (self->showChi_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(self, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"ChiSquaredContribution"]), @"blank", self->lastRow_ == 5);
  for (jint rowIndex = 0; rowIndex < ((IOSObjectArray *) nil_chk(self->rowValues_))->size_; rowIndex++) {
    GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, IOSObjectArray_Get(self->rowValues_, rowIndex), @"count", self->lastRow_ == 0);
    if (self->showRowPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"_", self->lastRow_ == 1);
    if (self->showColPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"|", self->lastRow_ == 2);
    if (self->showTotalPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"+", self->lastRow_ == 3);
    if (self->showExpected_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"e", self->lastRow_ == 4);
    if (self->showChi_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, rowIndex, nil, @"k", self->lastRow_ == 5);
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, -1, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Total"], @"tableFooter", !self->showRowPercent_);
  if (self->showRowPercent_) GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(self, self->tableSb_, 0, nil, @"rowPercentFooter", YES);
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(self, self->tableSb_);
  if (self->showTest_) {
    GeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(self, self->tableSb_);
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->table_)) setTextStringWithNSString:[self->tableSb_ description]];
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_endTableWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb2) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    [((JavaLangStringBuilder *) nil_chk(sb2)) appendWithNSString:@"}"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb2)) appendWithNSString:@"\\end{array}"];
  }
  GeogebraCommonMainApp_debugWithNSString_([((JavaLangStringBuilder *) nil_chk(sb2)) description]);
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_addChiTestWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb) {
  GeogebraCommonKernelStatisticsAlgoChiSquaredTest *test;
  if (self->isRawData_) {
    test = [new_GeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self->cons_, [((GeogebraCommonKernelStatisticsAlgoFrequency *) nil_chk(self->freq_)) getResult], nil) autorelease];
  }
  else {
    test = [new_GeogebraCommonKernelStatisticsAlgoChiSquaredTest_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self->cons_, self->freqMatrix_, nil) autorelease];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:test];
  GeogebraCommonKernelGeosGeoList *result = [((GeogebraCommonKernelStatisticsAlgoChiSquaredTest *) nil_chk(test)) getResult];
  NSString *split = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet] ? @"}\\ggbtdl{" : @"&";
  NSString *rowHeader = JreStrcat("$$CC$$", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"DegreesOfFreedom.short"], split, GeogebraCommonUtilUnicode_chi, GeogebraCommonUtilUnicode_Superscript_2, split, [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"PValue"]);
  NSString *degFreedom = [self->kernel_ formatWithDouble:(((IOSObjectArray *) nil_chk(self->rowValues_))->size_ - 1) * (((IOSObjectArray *) nil_chk(self->colValues_))->size_ - 1) withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()];
  NSString *secondRow = JreStrcat("$$$$$", degFreedom, split, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(result)) getWithInt:1])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()], split, [((GeogebraCommonKernelGeosGeoElement *) nil_chk([result getWithInt:0])) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]);
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\\\ \\text{"];
  [sb appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"ChiSquaredTest"]];
  [sb appendWithNSString:@"}\\\\"];
  if ([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) isHTML5Applet]) {
    [sb appendWithNSString:@"\\ggbtable{\\ggbtrl{\\ggbtdl{"];
    [sb appendWithNSString:rowHeader];
    [sb appendWithNSString:@"}}\\ggbtrl{\\ggbtdl{"];
    [sb appendWithNSString:secondRow];
    [sb appendWithNSString:@"}}}"];
  }
  else {
    [sb appendWithNSString:@"\\begin{array}{|l|l|l|l|}"];
    [sb appendWithNSString:@" \\\\ \\hline "];
    [sb appendWithNSString:rowHeader];
    [sb appendWithNSString:@"\\\\"];
    [sb appendWithNSString:@"\\hline "];
    [sb appendWithNSString:secondRow];
    [sb appendWithNSString:@"\\\\"];
    [sb appendWithNSString:@"\\hline "];
    [sb appendWithNSString:@"\\end{array}"];
  }
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_beginTable(GeogebraCommonKernelStatisticsAlgoContingencyTable *self) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\ggbtable{"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\begin{array}{|l"];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->colValues_))->size_ - 1; i++) {
      [self->tableSb_ appendWithNSString:@"|l"];
    }
    [self->tableSb_ appendWithNSString:@"|l||l|}"];
    [self->tableSb_ appendWithNSString:@" \\\\ "];
  }
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_addTableRowWithJavaLangStringBuilder_withInt_withNSString_withNSString_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jint rowIndex, NSString *header, NSString *type, jboolean lineBelow) {
  jdouble x;
  GeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(self, sb, lineBelow, rowIndex == -1);
  if (header == nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:header];
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
  for (jint colIndex = 0; colIndex < ((IOSObjectArray *) nil_chk(self->colValues_))->size_; colIndex++) {
    if ([((NSString *) nil_chk(type)) isEqual:@"blank"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
    }
    else if ([type isEqual:@"colValue"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:IOSObjectArray_Get(self->colValues_, colIndex)];
    }
    else if ([type isEqual:@"count"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex)];
    }
    else if ([type isEqual:@"_"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex);
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"|"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / IOSIntArray_Get(nil_chk(self->colSum_), colIndex);
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"+"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->freqValues_), rowIndex)), colIndex) / self->totalSum_;
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"e"]) {
      x = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->expected_), rowIndex)), colIndex);
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"k"]) {
      x = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(self->chiCont_), rowIndex)), colIndex);
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    else if ([type isEqual:@"tableFooter"]) {
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(self->colSum_), colIndex)];
    }
    else if ([type isEqual:@"rowPercentFooter"]) {
      x = 100.0 * IOSIntArray_Get(nil_chk(self->colSum_), colIndex) / self->totalSum_;
      [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
    }
    GeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(self, sb);
  }
  if ([((NSString *) nil_chk(type)) isEqual:@"count"]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex)];
  }
  else if ([type isEqual:@"colValue"]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getMenuWithNSString:@"Total"]];
  }
  else if ([type isEqual:@"|"]) {
    x = 100.0 * IOSIntArray_Get(nil_chk(self->rowSum_), rowIndex) / self->totalSum_;
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) formatWithDouble:x withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()]];
  }
  else if ([type isEqual:@"tableFooter"]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithInt:self->totalSum_];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\;"];
  }
  GeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(self, sb, lineBelow);
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_startRowWithJavaLangStringBuilder_withBoolean_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow, jboolean lineAbove) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:lineBelow ? (lineAbove ? @"\\ggbtrl{" : @"\\ggbtrlb{") : (lineAbove ? @"\\ggbtrlt{" : @"\\ggbtr{")];
    [sb appendWithNSString:@"\\ggbtdl{"];
  }
  else if (lineAbove) {
    [((JavaLangStringBuilder *) nil_chk(self->tableSb_)) appendWithNSString:@"\\hline "];
  }
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_endRowWithJavaLangStringBuilder_withBoolean_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb, jboolean lineBelow) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"}}"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\\\\"];
    if (lineBelow) {
      [sb appendWithNSString:@"\\hline "];
    }
  }
}

void GeogebraCommonKernelStatisticsAlgoContingencyTable_endCellWithJavaLangStringBuilder_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, JavaLangStringBuilder *sb) {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"}\\ggbtdl{"];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"&"];
  }
}

NSString *GeogebraCommonKernelStatisticsAlgoContingencyTable_handleSpecialCharWithNSString_(GeogebraCommonKernelStatisticsAlgoContingencyTable *self, NSString *s) {
  return [((NSString *) nil_chk(s)) replaceAll:@" " withReplacement:@"\\\\;"];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoContingencyTable)
