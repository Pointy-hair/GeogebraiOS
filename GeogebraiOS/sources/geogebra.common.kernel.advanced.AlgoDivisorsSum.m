//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoDivisorsSum.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/advanced/AlgoDivisorsSum.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoPrimeFactorization.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedAlgoDivisorsSum () {
 @public
  id<GeogebraCommonKernelArithmeticNumberValue> number_;
  GeogebraCommonKernelCasAlgoPrimeFactorization *factors_;
  GeogebraCommonKernelGeosGeoList *factorList_;
  jboolean sum_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsSum, number_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsSum, factors_, GeogebraCommonKernelCasAlgoPrimeFactorization *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivisorsSum, factorList_, GeogebraCommonKernelGeosGeoList *)

@implementation GeogebraCommonKernelAdvancedAlgoDivisorsSum

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)number
                                             withBoolean:(jboolean)sum {
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, c, label, number, sum);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(factorList_)) isDefined] || !GeogebraCommonKernelKernel_isIntegerWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(number_)) getDouble])) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    return;
  }
  jlong res = 1;
  for (jint i = 0; i < [factorList_ size]; i++) {
    GeogebraCommonKernelGeosGeoList *pair = (GeogebraCommonKernelGeosGeoList *) check_class_cast([factorList_ getWithInt:i], [GeogebraCommonKernelGeosGeoList class]);
    jdouble exp = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(pair)) getWithInt:1], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (sum_) {
      jdouble prime = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([pair getWithInt:0], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      GeogebraCommonUtilDebugLog_debugWithId_(JavaLangDouble_valueOfWithDouble_(prime));
      res = res * JavaLangMath_roundWithDouble_((JavaLangMath_powWithDouble_withDouble_(prime, exp + 1) - 1) / (prime - 1.0));
    }
    else {
      res = res * JavaLangMath_roundWithDouble_(exp + 1);
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setValueWithDouble:res];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  if (sum_) return GeogebraCommonKernelCommandsCommandsEnum_get_DivisorsSum();
  return GeogebraCommonKernelCommandsCommandsEnum_get_Divisors();
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(number_);
  RELEASE_(factors_);
  RELEASE_(factorList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withBoolean:", "AlgoDivisorsSum", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "result_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "factors_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoPrimeFactorization;", NULL, NULL,  },
    { "factorList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sum_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoDivisorsSum = { 2, "AlgoDivisorsSum", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoDivisorsSum;
}

@end

void GeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(GeogebraCommonKernelAdvancedAlgoDivisorsSum *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, jboolean sum) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_set_number_(self, number);
  self->sum_ = sum;
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_setAndConsume_factors_(self, new_GeogebraCommonKernelCasAlgoPrimeFactorization_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticNumberValue_(c, number));
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_set_factorList_(self, [self->factors_ getResult]);
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoDivisorsSum *new_GeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> number, jboolean sum) {
  GeogebraCommonKernelAdvancedAlgoDivisorsSum *self = [GeogebraCommonKernelAdvancedAlgoDivisorsSum alloc];
  GeogebraCommonKernelAdvancedAlgoDivisorsSum_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withBoolean_(self, c, label, number, sum);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoDivisorsSum)
