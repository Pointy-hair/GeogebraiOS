//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyhedron3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/PolygonTriangulation.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyhedron3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DSurfaces.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrush.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Textures.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPoints.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPrism.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolyhedronPointsPyramid.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D () {
 @public
  jboolean isPreview_;
  jint previewMode_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *drawPolygon3D_;
  JavaUtilArrayList *selectedPoints_;
  JavaUtilArrayList *selectedPolygons_;
  IOSObjectArray *vertices_;
  GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *pt_;
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *previewAlgo_;
  jboolean previewBasisIsFinished__;
}

- (void)updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer;

+ (void)drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush
                                withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)seg;

- (void)drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, drawPolygon3D_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, selectedPoints_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, selectedPolygons_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, vertices_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, pt_, GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D, previewAlgo_, GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush, id<GeogebraCommonKernelKernelNDGeoSegmentND> seg);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonKernelGeosGeoPolygon *polygon);

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                     withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:(GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *)poly {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, a_view3D, poly);
  return self;
}

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPolygons
                                                                   withInt:(jint)mode {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, a_view3D, selectedPoints, selectedPolygons, mode);
  return self;
}

- (void)drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getGeometryIndex]];
  [renderer setLayerWithFloat:0];
}

- (void)drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  if ([self isVisible]) {
    [self setHighlightingColor];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLTextures *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getTextures])) setDashFromLineTypeWithInt:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoElement])) getLineType]];
    [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  [self drawTracesOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer withBoolean:NO];
}

- (void)drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
              withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum *)type {
  if (type == GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()) {
    [self drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  }
  else {
    if ([self getAlpha] > 0) {
      [self drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
    }
  }
}

- (void)drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) setLayerWithFloat:[self getLayer]];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([renderer getGeometryManager])) drawWithInt:[self getSurfaceIndex]];
  [renderer setLayerWithFloat:0];
}

- (jint)getPickOrder {
  return GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_PICK_ORDER_SURFACE;
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
}

- (void)removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)lists {
  [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CLOSED_SURFACES_NOT_CURVED];
  [self removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:lists withInt:GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D_DRAW_TYPE_CURVES];
}

- (jboolean)updateForItSelf {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
  jint index = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) startPolygonsWithInt:[self getReusableSurfaceIndex]];
  for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])))) getPolygonsLinked])) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_(self, renderer, p);
  }
  for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])))) getPolygons])) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_(self, renderer, p);
  }
  [renderer endPolygons];
  [self setSurfaceIndexWithInt:index];
  return YES;
}

- (void)updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
}

+ (void)drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *)brush
                                withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)seg {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withGeogebraCommonKernelKernelNDGeoSegmentND_(brush, seg);
}

- (void)drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                                  withGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)polygon {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_(self, renderer, polygon);
}

- (void)updateForView {
  if ([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) viewChangedByZoom]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getRenderer];
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(self, renderer);
    [self recordTrace];
  }
}

- (void)updatePreview {
  if (previewBasisIsFinished__) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D])) updateCascade];
    return;
  }
  if ([((JavaUtilArrayList *) nil_chk(selectedPolygons_)) size] == 1) {
    previewBasisIsFinished__ = YES;
    GeogebraCommonKernelConstruction *cons = [((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel])) getConstruction];
    switch (previewMode_) {
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_previewAlgo_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(cons, nil, [selectedPolygons_ getWithInt:0], [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D]));
      break;
      case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_previewAlgo_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonKernelKernelNDGeoPointND_(cons, nil, [selectedPolygons_ getWithInt:0], [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D]));
      break;
    }
    [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *) nil_chk(previewAlgo_)) removeOutputFromAlgebraView];
    [previewAlgo_ removeOutputFromPicking];
    [previewAlgo_ setOutputPointsEuclidianVisibleWithBoolean:NO];
    [previewAlgo_ notifyUpdateOutputPoints];
    [previewAlgo_ setOutputOtherEuclidianVisibleWithBoolean:YES];
    [previewAlgo_ notifyUpdateOutputOther];
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *) nil_chk(drawPolygon3D_)) updatePreview];
  }
}

- (void)disposePreview {
  [super disposePreview];
  if (previewBasisIsFinished__) {
    previewBasisIsFinished__ = NO;
    if (previewAlgo_ != nil) {
      [previewAlgo_ remove];
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_set_previewAlgo_(self, nil);
    }
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *) nil_chk(drawPolygon3D_)) disposePreview];
  }
}

- (void)updateMousePosWithDouble:(jdouble)x
                      withDouble:(jdouble)y {
}

- (void)previewBasisIsFinished {
  previewBasisIsFinished__ = YES;
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D *) nil_chk(drawPolygon3D_)) disposePreview];
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selectedPoints_)) size] + 1 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  for (jint i = 0; i < [selectedPoints_ size]; i++) {
    IOSObjectArray_Set(points, i, [selectedPoints_ getWithInt:i]);
  }
  IOSObjectArray_Set(points, [selectedPoints_ size], [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getCursor3D]);
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getKernel])) getConstruction];
  switch (previewMode_) {
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PYRAMID:
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_previewAlgo_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPyramid_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil, points));
    break;
    case GeogebraCommonEuclidianEuclidianConstants_MODE_PRISM:
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_previewAlgo_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPointsPrism_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons, nil, points));
    break;
  }
  [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolyhedronPoints *) nil_chk(previewAlgo_)) removeOutputFromAlgebraView];
  [previewAlgo_ removeOutputFromPicking];
  [previewAlgo_ setOutputPointsEuclidianVisibleWithBoolean:NO];
  [previewAlgo_ notifyUpdateOutputPoints];
  [previewAlgo_ setOutputOtherEuclidianVisibleWithBoolean:YES];
  [previewAlgo_ notifyUpdateOutputOther];
}

- (void)dealloc {
  RELEASE_(drawPolygon3D_);
  RELEASE_(selectedPoints_);
  RELEASE_(selectedPolygons_);
  RELEASE_(vertices_);
  RELEASE_(pt_);
  RELEASE_(previewAlgo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron:", "DrawPolyhedron3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withJavaUtilArrayList:withJavaUtilArrayList:withInt:", "DrawPolyhedron3D", NULL, 0x1, NULL, NULL },
    { "drawGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometry", "V", 0x1, NULL, NULL },
    { "drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawOutline", "V", 0x1, NULL, NULL },
    { "drawGeometryHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHiding", "V", 0x1, NULL, NULL },
    { "drawGeometryHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawGeometryHidden", "V", 0x1, NULL, NULL },
    { "drawGeometryForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:", "drawGeometryForPicking", "V", 0x4, NULL, NULL },
    { "drawSurfaceGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfaceGeometry", "V", 0x4, NULL, NULL },
    { "getPickOrder", NULL, "I", 0x1, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "removeFromDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists:", "removeFromDrawable3DLists", "V", 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "updateOutline", "V", 0x2, NULL, NULL },
    { "drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush:withGeogebraCommonKernelKernelNDGeoSegmentND:", "drawSegment", "V", 0xa, NULL, NULL },
    { "drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonKernelGeosGeoPolygon:", "drawPolygon", "V", 0x2, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "updatePreview", NULL, "V", 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x1, NULL, NULL },
    { "previewBasisIsFinished", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "isPreview_", NULL, 0x2, "Z", NULL, NULL,  },
    { "previewMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "drawPolygon3D_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawPolygon3D;", NULL, NULL,  },
    { "selectedPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "selectedPolygons_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoPolygon;>;",  },
    { "vertices_", NULL, 0x2, "[Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "pt_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.PolygonTriangulation;", NULL, NULL,  },
    { "previewAlgo_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoPolyhedronPoints;", NULL, NULL,  },
    { "previewBasisIsFinished__", "previewBasisIsFinished", 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D = { 2, "DrawPolyhedron3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 20, methods, 9, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *poly) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, a_view3D, poly);
  self->isPreview_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelMatrixCoords_class_()]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_pt_(self, new_GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_init());
  self->previewBasisIsFinished__ = NO;
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *poly) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, a_view3D, poly);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints, JavaUtilArrayList *selectedPolygons, jint mode) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DSurfaces_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, a_view3D);
  self->isPreview_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:0 type:GeogebraCommonKernelMatrixCoords_class_()]);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_pt_(self, new_GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_init());
  self->previewBasisIsFinished__ = NO;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_drawPolygon3D_(self, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(a_view3D, selectedPoints));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_set_selectedPoints_(self, selectedPoints);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_set_selectedPolygons_(self, selectedPolygons);
  self->isPreview_ = YES;
  self->previewMode_ = mode;
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, JavaUtilArrayList *selectedPoints, JavaUtilArrayList *selectedPolygons, jint mode) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, a_view3D, selectedPoints, selectedPolygons, mode);
  return self;
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_updateOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *poly = (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class]);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManager *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) getGeometryManager])) getBrush];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) startWithInt:[self getReusableGeometryIndex]];
  [brush setThicknessWithInt:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(poly)) getLineThickness] withFloat:(jfloat) [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getScale]];
  for (GeogebraCommonKernelGeosGeoPolygon * __strong p in nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])))) getPolygonsLinked])) {
    if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isEuclidianVisible] && ![p isLabelSet]) {
      {
        IOSObjectArray *a__ = [p getSegments];
        id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
          GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withGeogebraCommonKernelKernelNDGeoSegmentND_(brush, seg);
        }
      }
    }
  }
  {
    IOSObjectArray *a__ = [poly getSegments];
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    id<GeogebraCommonKernelKernelNDGeoSegmentND> const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = *b__++;
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withGeogebraCommonKernelKernelNDGeoSegmentND_(brush, seg);
    }
  }
  [self setGeometryIndexWithInt:[brush end]];
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawSegmentWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush_withGeogebraCommonKernelKernelNDGeoSegmentND_(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *brush, id<GeogebraCommonKernelKernelNDGeoSegmentND> seg) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initialize();
  if (![((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isEuclidianVisible] || [seg isLabelSet]) {
    return;
  }
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrush *) nil_chk(brush)) setAffineTextureWithFloat:0.5f withFloat:0.25f];
  [brush segmentWithGeogebraCommonKernelMatrixCoords:[seg getStartInhomCoords] withGeogebraCommonKernelMatrixCoords:[seg getEndInhomCoords]];
}

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonKernelGeosGeoPolygon *polygon) {
  if (![((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(polygon)) isEuclidianVisible] || [polygon isLabelSet]) {
    return;
  }
  jint pointLength = [polygon getPointsLength];
  if (pointLength < 3) {
    return;
  }
  if (((IOSObjectArray *) nil_chk(self->vertices_))->size_ < pointLength) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_setAndConsume_vertices_(self, [IOSObjectArray newArrayWithLength:pointLength type:GeogebraCommonKernelMatrixCoords_class_()]);
    for (jint i = 0; i < pointLength; i++) {
      IOSObjectArray_SetAndConsume(self->vertices_, i, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
    }
  }
  for (jint i = 0; i < pointLength; i++) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(IOSObjectArray_Get(self->vertices_, i))) setValuesWithGeogebraCommonKernelMatrixCoords:[polygon getPoint3DWithInt:i] withInt:3];
  }
  [((GeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation *) nil_chk(self->pt_)) setPolygonWithGeogebraCommonKernelGeosGeoPolygon:polygon];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_drawPolygonWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonKernelGeosGeoPolygon_withGeogebraCommonGeogebra3DEuclidian3DPolygonTriangulation_withGeogebraCommonKernelMatrixCoordsArray_withInt_(renderer, polygon, self->pt_, self->vertices_, [polygon getPointsLength]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D)
