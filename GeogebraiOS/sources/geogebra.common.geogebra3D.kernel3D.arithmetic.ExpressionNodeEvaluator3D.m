//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/arithmetic/ExpressionNodeEvaluator3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/arithmetic/ExpressionNodeEvaluator3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/Geo3DVec.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeEvaluator.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/VectorNDValue.h"
#include "geogebra/common/kernel/arithmetic/VectorValue.h"
#include "geogebra/common/kernel/arithmetic3D/Vector3DValue.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/Geo3DVec.h"
#include "geogebra/common/kernel/kernelND/GeoVecInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"

@implementation GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D

- (instancetype)initWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)l10n
                        withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_(self, l10n, kernel);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)handleOpWithGeogebraCommonPluginOperationEnum:(GeogebraCommonPluginOperationEnum *)op
                                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)lt
                                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)rt
                                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)left
                                                 withGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)right
                                                            withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl
                                                                                       withBoolean:(jboolean)holdsLaTeX {
  GeogebraCommonKernelArithmeticMyDouble *num;
  switch ([op ordinal]) {
    case GeogebraCommonPluginOperation_PLUS:
    if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:lt]) {
      if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:rt]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_addWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]), vec3D);
        return vec3D;
      }
      else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_addWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonKernelGeosGeoVec2D_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector], vec3D);
        return vec3D;
      }
    }
    else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:rt]) {
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_addWithGeogebraCommonKernelGeosGeoVec2D_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_([((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector], vec3D, vec3D);
      return vec3D;
    }
    break;
    case GeogebraCommonPluginOperation_MINUS:
    if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:lt]) {
      if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:rt]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_subWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]), vec3D);
        return vec3D;
      }
      else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_subWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonKernelGeosGeoVec2D_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, [((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector], vec3D);
        return vec3D;
      }
    }
    else if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:lt] && [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:rt]) {
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_subWithGeogebraCommonKernelGeosGeoVec2D_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_([((id<GeogebraCommonKernelArithmeticVectorValue>) nil_chk(((id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmeticVectorValue))))) getVector], vec3D, vec3D);
      return vec3D;
    }
    break;
    case GeogebraCommonPluginOperation_DIVIDE:
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
      if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:lt]) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_divWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withDouble_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble], vec3D);
        return vec3D;
      }
    }
    break;
    case GeogebraCommonPluginOperation_POWER:
    if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:lt] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:rt]) {
      num = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getNumber];
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(lt, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
      if ([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] == 2.0) {
        GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_innerWithGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelArithmeticMyDouble_(vec3D, vec3D, num);
      }
      else {
        [num setWithDouble:JavaLangDouble_NaN];
      }
      return num;
    }
    break;
  }
  return [super handleOpWithGeogebraCommonPluginOperationEnum:op withGeogebraCommonKernelArithmeticExpressionValue:lt withGeogebraCommonKernelArithmeticExpressionValue:rt withGeogebraCommonKernelArithmeticExpressionValue:left withGeogebraCommonKernelArithmeticExpressionValue:right withGeogebraCommonKernelStringTemplate:tpl withBoolean:holdsLaTeX];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)multiplyWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)en
                                                           withGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)ev {
  if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = (GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *) check_class_cast([((id<GeogebraCommonKernelArithmetic3DVector3DValue>) nil_chk(((id<GeogebraCommonKernelArithmetic3DVector3DValue>) check_protocol_cast(ev, @protocol(GeogebraCommonKernelArithmetic3DVector3DValue))))) getVector], [GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec class]);
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_multWithGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_withDouble_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_(vec3D, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(en)) getDouble], vec3D);
    return vec3D;
  }
  return [super multiplyWithGeogebraCommonKernelArithmeticNumberValue:en withGeogebraCommonKernelArithmeticVectorNDValue:ev];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)innerProductWithGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)ev1
                                                                 withGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)ev2
                                                                                  withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev1] || [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev2]) {
    GeogebraCommonKernelArithmeticMyDouble *num = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_innerWithGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelArithmeticMyDouble_([((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(ev1)) getVector], [((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(ev2)) getVector], num);
    return num;
  }
  return [super innerProductWithGeogebraCommonKernelArithmeticVectorNDValue:ev1 withGeogebraCommonKernelArithmeticVectorNDValue:ev2 withGeogebraCommonKernelKernel:kernel];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)complexMultWithGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)ev1
                                                                withGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)ev2
                                                                                 withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  if ([GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev1] || [GeogebraCommonKernelArithmetic3DVector3DValue_class_() isInstance:ev2]) {
    GeogebraCommonKernelGeosGeoVec2D *vec = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_complexMultiplyWithGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelGeosGeoVec2D_([((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(ev1)) getVector], [((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(ev2)) getVector], vec);
    return vec;
  }
  return [super complexMultWithGeogebraCommonKernelArithmeticVectorNDValue:ev1 withGeogebraCommonKernelArithmeticVectorNDValue:ev2 withGeogebraCommonKernelKernel:kernel];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)vectorProductWithGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)v1
                                                                  withGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)v2 {
  if ([((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(v1)) getMode] == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D || [v1 getMode] == GeogebraCommonKernelKernel_COORD_SPHERICAL || [((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(v2)) getMode] == GeogebraCommonKernelKernel_COORD_CARTESIAN_3D || [v2 getMode] == GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *vec3D = [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_vectorProductWithGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonKernelKernelNDGeoVecInterface_withGeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_([v1 getVector], [((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(v2)) getVector], vec3D);
    return vec3D;
  }
  return [super vectorProductWithGeogebraCommonKernelArithmeticVectorNDValue:v1 withGeogebraCommonKernelArithmeticVectorNDValue:v2];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)multiplyWithGeogebraCommonKernelArithmeticMyList:(GeogebraCommonKernelArithmeticMyList *)myList
                                                      withGeogebraCommonKernelArithmeticVectorNDValue:(id<GeogebraCommonKernelArithmeticVectorNDValue>)rt {
  if (![((GeogebraCommonKernelArithmeticMyList *) nil_chk(myList)) isMatrix]) {
    return nil;
  }
  jint rows = [myList getMatrixRows];
  jint cols = [myList getMatrixCols];
  if ([((id<GeogebraCommonKernelArithmeticVectorNDValue>) nil_chk(rt)) getMode] != GeogebraCommonKernelKernel_COORD_CARTESIAN_3D && [rt getMode] != GeogebraCommonKernelKernel_COORD_SPHERICAL) {
    if (rows == 3 && cols == 2) {
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *myVec = [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      [myVec multiplyMatrix3x2WithGeogebraCommonKernelArithmeticMyList:myList withGeogebraCommonKernelArithmeticVectorNDValue:rt];
      return myVec;
    }
    if ([GeogebraCommonKernelArithmeticVectorValue_class_() isInstance:rt]) {
      return [self multiply2DWithGeogebraCommonKernelArithmeticMyList:myList withInt:rows withInt:cols withGeogebraCommonKernelArithmeticVectorValue:(id<GeogebraCommonKernelArithmeticVectorValue>) check_protocol_cast(rt, @protocol(GeogebraCommonKernelArithmeticVectorValue))];
    }
    GeogebraCommonKernelGeosGeoVec2D *myVec = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    return [self multiply2DWithGeogebraCommonKernelArithmeticMyList:myList withInt:rows withInt:cols withGeogebraCommonKernelArithmeticVectorNDValue:rt withGeogebraCommonKernelGeosGeoVec2D:myVec];
  }
  if (cols == 3) {
    if (rows == 3) {
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *myVec = [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      [myVec multiplyMatrix3x3WithGeogebraCommonKernelArithmeticMyList:myList withGeogebraCommonKernelArithmeticVectorNDValue:rt];
      return myVec;
    }
    if (rows == 2) {
      GeogebraCommonKernelGeosGeoVec2D *myVec = [new_GeogebraCommonKernelGeosGeoVec2D_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_multiplyMatrixWithGeogebraCommonKernelArithmeticMyList_withGeogebraCommonKernelArithmeticVectorNDValue_withGeogebraCommonKernelGeosGeoVec2D_(myList, rt, myVec);
      return myVec;
    }
  }
  else if (cols == 4) {
    if (rows == 4) {
      GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec *myVec = [new_GeogebraCommonGeogebra3DKernel3DGeosGeo3DVec_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
      [myVec multiplyMatrix4x4WithGeogebraCommonKernelArithmeticMyList:myList withGeogebraCommonKernelArithmeticVectorNDValue:rt];
      return myVec;
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainLocalization:withGeogebraCommonKernelKernel:", "ExpressionNodeEvaluator3D", NULL, 0x1, NULL, NULL },
    { "handleOpWithGeogebraCommonPluginOperationEnum:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelStringTemplate:withBoolean:", "handleOp", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticVectorNDValue:", "multiply", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "innerProductWithGeogebraCommonKernelArithmeticVectorNDValue:withGeogebraCommonKernelArithmeticVectorNDValue:withGeogebraCommonKernelKernel:", "innerProduct", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "complexMultWithGeogebraCommonKernelArithmeticVectorNDValue:withGeogebraCommonKernelArithmeticVectorNDValue:withGeogebraCommonKernelKernel:", "complexMult", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "vectorProductWithGeogebraCommonKernelArithmeticVectorNDValue:withGeogebraCommonKernelArithmeticVectorNDValue:", "vectorProduct", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
    { "multiplyWithGeogebraCommonKernelArithmeticMyList:withGeogebraCommonKernelArithmeticVectorNDValue:", "multiply", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D = { 2, "ExpressionNodeEvaluator3D", "geogebra.common.geogebra3D.kernel3D.arithmetic", NULL, 0x1, 7, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D *self, GeogebraCommonMainLocalization *l10n, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticExpressionNodeEvaluator_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_(self, l10n, kernel);
}

GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D *new_GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_(GeogebraCommonMainLocalization *l10n, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D *self = [GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D alloc];
  GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D_initWithGeogebraCommonMainLocalization_withGeogebraCommonKernelKernel_(self, l10n, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DArithmeticExpressionNodeEvaluator3D)
