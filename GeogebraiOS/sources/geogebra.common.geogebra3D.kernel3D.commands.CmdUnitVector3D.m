//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdUnitVector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoUnitVector.h"
#include "geogebra/common/kernel/algos/CmdUnitVector.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processNotLineNotVectorWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c
                                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)arg {
  if ([GeogebraCommonKernelKernelNDGeoDirectionND_class_() isInstance:arg]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getLabel], (id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(arg, @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))) autorelease];
    IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getVector], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return ret;
  }
  return [super processNotLineNotVectorWithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElement:arg];
}

- (GeogebraCommonKernelAlgosAlgoUnitVector *)algoWithNSString:(NSString *)label
                    withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(line)) isGeoElement3D]) {
    return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, line) autorelease];
  }
  return [super algoWithNSString:label withGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (GeogebraCommonKernelAlgosAlgoUnitVector *)algoWithNSString:(NSString *)label
                  withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  if ([((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D]) {
    return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(cons_, label, v) autorelease];
  }
  return [super algoWithNSString:label withGeogebraCommonKernelKernelNDGeoVectorND:v];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdUnitVector3D", NULL, 0x1, NULL, NULL },
    { "processNotLineNotVectorWithGeogebraCommonKernelArithmeticCommand:withGeogebraCommonKernelGeosGeoElement:", "processNotLineNotVector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, "Lgeogebra.common.main.MyError;", NULL },
    { "algoWithNSString:withGeogebraCommonKernelKernelNDGeoLineND:", "algo", "Lgeogebra.common.kernel.algos.AlgoUnitVector;", 0x4, NULL, NULL },
    { "algoWithNSString:withGeogebraCommonKernelKernelNDGeoVectorND:", "algo", "Lgeogebra.common.kernel.algos.AlgoUnitVector;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D = { 2, "CmdUnitVector3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelAlgosCmdUnitVector_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdUnitVector3D)
