//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMidpoint.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/algos/AlgoMidpoint.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/AlgoMidpointND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "geogebra/common/kernel/prover/polynomial/Variable.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoMidpoint () {
 @public
  IOSObjectArray *polynomials_;
  IOSObjectArray *botanaPolynomials_;
  IOSObjectArray *botanaVars_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpoint, polynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpoint, botanaPolynomials_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMidpoint, botanaVars_, IOSObjectArray *)

@implementation GeogebraCommonKernelAlgosAlgoMidpoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)Q {
  GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, P, Q);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelGeosGeoPoint *)getPoint {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([super getPoint], [GeogebraCommonKernelGeosGeoPoint class]);
}

- (void)copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPoint])) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (GeogebraCommonKernelGeosGeoPoint *)getP {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([super getP], [GeogebraCommonKernelGeosGeoPoint class]);
}

- (GeogebraCommonKernelGeosGeoPoint *)getQ {
  return (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([super getQ], [GeogebraCommonKernelGeosGeoPoint class]);
}

- (void)computeMidCoords {
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPoint])) setCoordsWithDouble:(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P))->inhomX_ + ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(Q))->inhomX_) / 2.0 withDouble:(P->inhomY_ + Q->inhomY_) / 2.0 withDouble:1.0];
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  if (P != nil && Q != nil) {
    [P getFreeVariablesWithJavaUtilHashSet:variables];
    [Q getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  if (P != nil && Q != nil) {
    IOSIntArray *degreeP = [P getDegrees];
    IOSIntArray *degreeQ = [Q getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degreeP), 0) + IOSIntArray_Get(nil_chk(degreeQ), 2), IOSIntArray_Get(degreeQ, 0) + IOSIntArray_Get(degreeP, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degreeP, 1) + IOSIntArray_Get(degreeQ, 2), IOSIntArray_Get(degreeQ, 1) + IOSIntArray_Get(degreeP, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degreeP, 2) + IOSIntArray_Get(degreeQ, 2);
    return result;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  if (P != nil && Q != nil) {
    IOSObjectArray *pP = [P getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *pQ = [Q getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(coords, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(pP), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(pQ), 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pQ, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(coords, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pP, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pQ, 2)])) addWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pQ, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(coords, 2, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(pP, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(pQ, 2)])) multiplyWithJavaMathBigInteger:JavaMathBigInteger_valueOfWithLong_(2)]);
    return coords;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  if (P != nil && Q != nil) {
    IOSObjectArray *pP = [P getPolynomials];
    IOSObjectArray *pQ = [Q getPolynomials];
    GeogebraCommonKernelAlgosAlgoMidpoint_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(pP), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(pQ), 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pQ, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(polynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pP, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pQ, 2)])) addWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pQ, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pP, 2)]]);
    IOSObjectArray_Set(polynomials_, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(pP, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(pQ, 2)])) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:[new_GeogebraCommonKernelProverPolynomialPolynomial_initWithInt_(2) autorelease]]);
    return polynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return botanaVars_;
}

- (IOSObjectArray *)getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (botanaPolynomials_ != nil) {
    return botanaPolynomials_;
  }
  GeogebraCommonKernelGeosGeoPoint *P = [self getP];
  GeogebraCommonKernelGeosGeoPoint *Q = [self getQ];
  if (P == nil || Q == nil) @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
  if (botanaVars_ == nil) {
    GeogebraCommonKernelAlgosAlgoMidpoint_setAndConsume_botanaVars_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelProverPolynomialVariable_class_()]);
    IOSObjectArray_SetAndConsume(botanaVars_, 0, new_GeogebraCommonKernelProverPolynomialVariable_init());
    IOSObjectArray_SetAndConsume(botanaVars_, 1, new_GeogebraCommonKernelProverPolynomialVariable_init());
  }
  GeogebraCommonKernelAlgosAlgoMidpoint_set_botanaPolynomials_(self, GeogebraCommonKernelAlgosSymbolicParameters_botanaPolynomialsMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelProverPolynomialVariableArray_(P, Q, botanaVars_));
  return botanaPolynomials_;
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnMidpointWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(polynomials_);
  RELEASE_(botanaPolynomials_);
  RELEASE_(botanaVars_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoMidpoint", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "AlgoMidpoint", NULL, 0x1, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "copyCoordsWithGeogebraCommonKernelKernelNDGeoPointND:", "copyCoords", "V", 0x4, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "computeMidCoords", NULL, "V", 0x4, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getBotanaVarsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaVars", "[Lgeogebra.common.kernel.prover.polynomial.Variable;", 0x1, NULL, NULL },
    { "getBotanaPolynomialsWithGeogebraCommonKernelGeosGeoElement:", "getBotanaPolynomials", "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaPolynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
    { "botanaVars_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Variable;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMidpoint = { 2, "AlgoMidpoint", "geogebra.common.kernel.algos", NULL, 0x1, 17, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMidpoint;
}

@end

void GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoMidpoint *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, P, Q);
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getPoint])) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMidpoint *new_GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoMidpoint *self = [GeogebraCommonKernelAlgosAlgoMidpoint alloc];
  GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, label, P, Q);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoMidpoint *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelKernelNDAlgoMidpointND_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, P, Q);
}

GeogebraCommonKernelAlgosAlgoMidpoint *new_GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoPoint *P, GeogebraCommonKernelGeosGeoPoint *Q) {
  GeogebraCommonKernelAlgosAlgoMidpoint *self = [GeogebraCommonKernelAlgosAlgoMidpoint alloc];
  GeogebraCommonKernelAlgosAlgoMidpoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, cons, P, Q);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMidpoint)
