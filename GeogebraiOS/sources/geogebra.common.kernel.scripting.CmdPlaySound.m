//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdPlaySound.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/scripting/CmdPlaySound.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/sound/SoundManager.h"

@implementation GeogebraCommonKernelScriptingCmdPlaySound

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdPlaySound_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  id<GeogebraCommonSoundSoundManager> sm = [((GeogebraCommonMainApp *) nil_chk(app_)) getSoundManager];
  if (sm == nil) {
    GeogebraCommonMainApp_debugWithNSString_(@"no sound manager available");
    return;
  }
  switch (n) {
    case 1:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoText]) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playFileWithNSString:([((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()])];
      return;
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoBoolean]) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) pauseResumeSoundWithBoolean:([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoBoolean class])))) getBoolean])];
      return;
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
    }
    case 2:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoNumeric])) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playSequenceNoteWithInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]) withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withInt:0 withInt:127];
      return;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoText]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoNumeric])) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playSequenceFromStringWithNSString:([((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoText class])))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]) withInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble])];
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg_)];
    case 3:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 2) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 2))) isGeoNumeric])) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playSequenceNoteWithInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]) withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 2), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]) withInt:127];
      return;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoFunction]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 2) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 2))) isGeoNumeric])) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playFunctionWithGeogebraCommonKernelGeosGeoFunction:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoFunction class])))) threadSafeCopy] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 2), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]];
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg_)];
    case 5:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoFunction]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 2) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 2))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 3) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 3))) isGeoNumeric]) && (*IOSBooleanArray_GetRef(ok, 4) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 4))) isGeoNumeric])) {
      [((id<GeogebraCommonSoundSoundManager>) nil_chk(sm)) playFunctionWithGeogebraCommonKernelGeosGeoFunction:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoFunction class])))) threadSafeCopy] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 2), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 3), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]) withInt:J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 4), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble])];
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg_)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPlaySound", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdPlaySound = { 2, "CmdPlaySound", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdPlaySound;
}

@end

void GeogebraCommonKernelScriptingCmdPlaySound_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdPlaySound *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdPlaySound *new_GeogebraCommonKernelScriptingCmdPlaySound_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdPlaySound *self = [GeogebraCommonKernelScriptingCmdPlaySound alloc];
  GeogebraCommonKernelScriptingCmdPlaySound_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdPlaySound)
