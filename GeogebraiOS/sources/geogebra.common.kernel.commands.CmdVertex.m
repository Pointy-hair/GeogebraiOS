//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdVertex.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoDrawingPadCorner.h"
#include "geogebra/common/kernel/algos/AlgoImageCorner.h"
#include "geogebra/common/kernel/algos/AlgoTextCorner.h"
#include "geogebra/common/kernel/algos/AlgoVertexConic.h"
#include "geogebra/common/kernel/algos/AlgoVertexIneq.h"
#include "geogebra/common/kernel/algos/AlgoVertexPolygon.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdVertex.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdVertex

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdVertex_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 1:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoConic]) {
      GeogebraCommonKernelAlgosAlgoVertexConic *algo = [self newAlgoVertexConicWithGeogebraCommonKernelConstruction:cons_ withNSStringArray:[c getLabels] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class])];
      return (IOSObjectArray *) check_class_cast([((GeogebraCommonKernelAlgosAlgoVertexConic *) nil_chk(algo)) getVertex], [IOSObjectArray class]);
    }
    if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
      GeogebraCommonKernelAlgosAlgoVertexPolygon *algo = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getAlgoDispatcher])) newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:cons_ withNSStringArray:[c getLabels] withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoPoly))];
      return [((GeogebraCommonKernelAlgosAlgoVertexPolygon *) nil_chk(algo)) getVertex];
    }
    if ([IOSObjectArray_Get(arg, 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunctionNVar class]]) {
      GeogebraCommonKernelAlgosAlgoVertexIneq *algo = [new_GeogebraCommonKernelAlgosAlgoVertexIneq_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoFunctionNVar_(cons_, [c getLabels], (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunctionNVar class])) autorelease];
      return [algo getVertex];
    }
    else if ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 0)]) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self cornerOfDrawingPadWithNSString:[c getLabel] withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue)) withGeogebraCommonKernelArithmeticNumberValue:nil], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
    }
    case 2:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:IOSObjectArray_Get(nil_chk(arg), 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      GeogebraCommonKernelAlgosAlgoVertexPolygon *algo = [self newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:cons_ withNSString:[c getLabel] withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoPoly)) withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelAlgosAlgoVertexPolygon *) nil_chk(algo)) getOneVertex], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoImage])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      GeogebraCommonKernelAlgosAlgoImageCorner *algo = [new_GeogebraCommonKernelAlgosAlgoImageCorner_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoImage_withGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], (GeogebraCommonKernelGeosGeoImage *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoImage class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getCorner] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoText])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      GeogebraCommonKernelAlgosAlgoTextCorner *algo = [new_GeogebraCommonKernelAlgosAlgoTextCorner_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelArithmeticNumberValue_(cons_, [c getLabel], (GeogebraCommonKernelGeosGeoText *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoText class]), (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue))) autorelease];
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getCorner] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 0)])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self cornerOfDrawingPadWithNSString:[c getLabel] withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)) withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue))], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    }
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)cornerOfDrawingPadWithNSString:(NSString *)label
                               withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)number
                               withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)ev {
  GeogebraCommonKernelAlgosAlgoDrawingPadCorner *algo = [new_GeogebraCommonKernelAlgosAlgoDrawingPadCorner_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, label, number, ev) autorelease];
  return [algo getCorner];
}

- (GeogebraCommonKernelAlgosAlgoVertexPolygon *)newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                            withNSString:(NSString *)label
                                                                     withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>)p
                                                              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)v {
  return [new_GeogebraCommonKernelAlgosAlgoVertexPolygon_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoly_withGeogebraCommonKernelArithmeticNumberValue_(cons, label, p, v) autorelease];
}

- (GeogebraCommonKernelAlgosAlgoVertexConic *)newAlgoVertexConicWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                                                   withNSStringArray:(IOSObjectArray *)labels
                                                          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  return [new_GeogebraCommonKernelAlgosAlgoVertexConic_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoConicND_(cons, labels, conic) autorelease];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdVertex", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "cornerOfDrawingPadWithNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "cornerOfDrawingPad", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "newAlgoVertexPolygonWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoPoly:withGeogebraCommonKernelGeosGeoNumberValue:", "newAlgoVertexPolygon", "Lgeogebra.common.kernel.algos.AlgoVertexPolygon;", 0x4, NULL, NULL },
    { "newAlgoVertexConicWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoConicND:", "newAlgoVertexConic", "Lgeogebra.common.kernel.algos.AlgoVertexConic;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdVertex = { 2, "CmdVertex", "geogebra.common.kernel.commands", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdVertex;
}

@end

void GeogebraCommonKernelCommandsCmdVertex_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdVertex *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdVertex *new_GeogebraCommonKernelCommandsCmdVertex_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdVertex *self = [GeogebraCommonKernelCommandsCmdVertex alloc];
  GeogebraCommonKernelCommandsCmdVertex_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdVertex)
