//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCurveCartesian3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoCurvatureVectorCurve3D.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> A_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f_, *f1_, *f2_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *v_;
  IOSDoubleArray *f1eval_;
  IOSDoubleArray *f2eval_;
  GeogebraCommonKernelCasAlgoDerivative *algoCAS_, *algoCAS2_;
  GeogebraCommonKernelGeosGeoConic *gc_;
}

- (void)cas;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, A_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f_, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f1_, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f2_, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, v_, GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f1eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, f2eval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, algoCAS_, GeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, algoCAS2_, GeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D, gc_, GeogebraCommonKernelGeosGeoConic *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self);

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self);

@implementation GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)arg
withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)arg2 {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, label, arg, arg2);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *)f {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, A, f);
  return self;
}

- (void)cas {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CurvatureVector();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  if (gc_ != nil) {
    IOSObjectArray_Set(input_, 1, gc_);
  }
  else {
    IOSObjectArray_Set(input_, 1, f_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:v_];
  [self setDependencies];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *)getVector {
  return v_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(self);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(f_)) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS_];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
  [f_ removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:algoCAS2_];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(f_);
  RELEASE_(f1_);
  RELEASE_(f2_);
  RELEASE_(v_);
  RELEASE_(f1eval_);
  RELEASE_(f2eval_);
  RELEASE_(algoCAS_);
  RELEASE_(algoCAS2_);
  RELEASE_(gc_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "AlgoCurvatureVectorCurve3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D:", "AlgoCurvatureVectorCurve3D", NULL, 0x0, NULL, NULL },
    { "cas", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "f1_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "f2_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoCurveCartesian3D;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoVector3D;", NULL, NULL,  },
    { "f1eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "f2eval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "algoCAS_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "algoCAS2_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "gc_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D = { 2, "AlgoCurvatureVectorCurve3D", "geogebra.common.kernel.advanced", NULL, 0x1, 8, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D;
}

@end

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *arg, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *arg2) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, arg, arg2);
  if (label != nil) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setLabelWithNSString:label];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setLabelWithNSString:@"cv"];
  }
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *arg, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *arg2) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, label, arg, arg2);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_setAndConsume_f1eval_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_setAndConsume_f2eval_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_set_A_(self, A);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_set_f_(self, f);
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_setAndConsume_v_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(cons));
  @try {
    [self->v_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:A];
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(self);
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(self);
}

GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *new_GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> A, GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *f) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self = [GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D alloc];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D_(self, cons, A, f);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_cas(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self) {
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_setAndConsume_algoCAS_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f_, YES));
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_set_f1_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([self->algoCAS_ getResult], [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]));
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_setAndConsume_algoCAS2_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->f1_, YES));
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoCAS2_];
  GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_set_f2_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) check_class_cast([self->algoCAS2_ getResult], [GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D class]));
}

void GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D_compute(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D *self) {
  @try {
    jdouble tvalue;
    tvalue = [self->f_ getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:self->A_ withDouble:[((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f_)) getMinParameter]];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f1_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f1eval_];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoCurveCartesian3D *) nil_chk(self->f2_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->f2eval_];
    IOSDoubleArray *w = [IOSDoubleArray arrayWithLength:3];
    IOSDoubleArray *w2 = [IOSDoubleArray arrayWithLength:3];
    IOSDoubleArray *w3 = [IOSDoubleArray arrayWithLength:4];
    GeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(self->f1eval_, self->f2eval_, w);
    GeogebraCommonKernelGeosGeoVec3D_crossWithDoubleArray_withDoubleArray_withDoubleArray_(w, self->f1eval_, w2);
    jdouble d = JavaLangMath_sqrtWithDouble_(IOSDoubleArray_Get(w2, 0) * IOSDoubleArray_Get(w2, 0) + IOSDoubleArray_Get(w2, 1) * IOSDoubleArray_Get(w2, 1) + IOSDoubleArray_Get(w2, 2) * IOSDoubleArray_Get(w2, 2));
    *IOSDoubleArray_GetRef(w2, 0) /= d;
    *IOSDoubleArray_GetRef(w2, 1) /= d;
    *IOSDoubleArray_GetRef(w2, 2) /= d;
    jdouble curvature = [self->f_ evaluateCurvatureWithDouble:tvalue];
    *IOSDoubleArray_GetRef(w3, 0) = IOSDoubleArray_Get(w2, 0) * curvature;
    *IOSDoubleArray_GetRef(w3, 1) = IOSDoubleArray_Get(w2, 1) * curvature;
    *IOSDoubleArray_GetRef(w3, 2) = IOSDoubleArray_Get(w2, 2) * curvature;
    *IOSDoubleArray_GetRef(w3, 3) = 0;
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setCoordsWithDoubleArray:w3];
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoCurvatureVectorCurve3D)
