//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePlanes.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePlanes.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAnglePoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p_, *q_;
  GeogebraCommonKernelGeosGeoAngle *angle_;
  GeogebraCommonKernelMatrixCoords *vn_, *o_, *v1_, *v2_;
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p
                    withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)q;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, p_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, q_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, angle_, GeogebraCommonKernelGeosGeoAngle *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, vn_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, o_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, v1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes, v2_, GeogebraCommonKernelMatrixCoords *)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_newGeoAngleWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonKernelConstruction *cons);

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q);

__attribute__((unused)) static GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self);

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)q {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, p, q);
  return self;
}

- (GeogebraCommonKernelGeosGeoAngle *)newGeoAngleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_newGeoAngleWithGeogebraCommonKernelConstruction_(self, cons);
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p
                    withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)q {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, p, q);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)p
      withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)q {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, label, p, q);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(p_)) copy__], [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(q_)) copy__]) autorelease];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, p_);
  IOSObjectArray_Set(input_, 1, q_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:angle_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoAngle *)getAngle {
  return angle_;
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenAB" withNSString:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(p_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(q_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)initCoords {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_setAndConsume_o_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_compute(self);
}

- (jboolean)updateDrawInfoWithDoubleArray:(IOSDoubleArray *)m
                          withDoubleArray:(IOSDoubleArray *)firstVec
 withGeogebraCommonEuclidianDrawDrawAngle:(GeogebraCommonEuclidianDrawDrawAngle *)drawable {
  return NO;
}

- (GeogebraCommonKernelMatrixCoords *)getVn {
  return vn_;
}

- (jboolean)getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)drawCoords {
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(o_)) isDefined]) {
    return NO;
  }
  IOSObjectArray_Set(nil_chk(drawCoords), 0, o_);
  IOSObjectArray_Set(drawCoords, 1, v2_);
  IOSObjectArray_Set(drawCoords, 2, v1_);
  return YES;
}

- (void)dealloc {
  RELEASE_(p_);
  RELEASE_(q_);
  RELEASE_(angle_);
  RELEASE_(vn_);
  RELEASE_(o_);
  RELEASE_(v1_);
  RELEASE_(v2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAnglePlanes", NULL, 0x0, NULL, NULL },
    { "newGeoAngleWithGeogebraCommonKernelConstruction:", "newGeoAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x14, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAnglePlanes", NULL, 0x2, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:", "AlgoAnglePlanes", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.geogebra3D.kernel3D.algos.AlgoAnglePlanes;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getAngle", NULL, "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initCoords", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateDrawInfoWithDoubleArray:withDoubleArray:withGeogebraCommonEuclidianDrawDrawAngle:", "updateDrawInfo", "Z", 0x1, NULL, NULL },
    { "getVn", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsInD3WithGeogebraCommonKernelMatrixCoordsArray:", "getCoordsInD3", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
    { "q_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "vn_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "o_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "v1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "v2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes = { 2, "AlgoAnglePlanes", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 13, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_p_(self, p);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_q_(self, q);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_angle_(self, GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_newGeoAngleWithGeogebraCommonKernelConstruction_(self, cons));
  [self setInputOutput];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_compute(self);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonKernelConstruction *cons, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, p, q);
  return self;
}

GeogebraCommonKernelGeosGeoAngle *GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_newGeoAngleWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelGeosGeoAngle *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [ret setDrawableWithBoolean:YES];
  return ret;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonKernelAlgosAlgoAngle_initWithGeogebraCommonKernelConstruction_withBoolean_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(p)) getConstruction], NO);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_p_(self, p);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_q_(self, q);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, p, q);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, p, q);
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *p, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *q) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, cons, label, p, q);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_compute(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes *self) {
  GeogebraCommonKernelMatrixCoords *vn1 = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->p_)) getDirectionInD3];
  GeogebraCommonKernelMatrixCoords *vn2 = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(self->q_)) getDirectionInD3];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_vn_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn1)) crossProduct4WithGeogebraCommonKernelMatrixCoords:vn2])) normalize]);
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(self->vn_)) isZero]) {
    [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:0];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_o_(self, GeogebraCommonKernelMatrixCoords_get_UNDEFINED_());
    return;
  }
  [((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) setValueWithDouble:GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePoints3D_acosWithDouble_([vn1 dotproductWithGeogebraCommonKernelMatrixCoords:vn2])];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_v2_(self, [vn1 crossProduct4WithGeogebraCommonKernelMatrixCoords:self->vn_]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes_set_v1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(vn2)) crossProduct4WithGeogebraCommonKernelMatrixCoords:self->vn_]);
  [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self->p_ getCoordSys])) getMatrixOrthonormal])) getOrigin])) projectPlaneThruVWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordSys *) nil_chk([self->q_ getCoordSys])) getMatrixOrthonormal] withGeogebraCommonKernelMatrixCoords:self->v2_ withGeogebraCommonKernelMatrixCoords:self->o_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAnglePlanes)
