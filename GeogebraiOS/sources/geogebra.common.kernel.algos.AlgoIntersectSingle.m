//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectSingle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoIntersectConics.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLineConic.h"
#include "geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectSingle () {
 @public
  GeogebraCommonKernelAlgosAlgoIntersect *algo_;
  id<GeogebraCommonKernelGeosGeoNumberValue> index_;
  GeogebraCommonKernelGeosGeoPoint *refPoint_;
  GeogebraCommonKernelGeosGeoPoint *point_;
  IOSObjectArray *parentOutput_;
  jint idx_;
}

- (void)addIncidence;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectSingle, algo_, GeogebraCommonKernelAlgosAlgoIntersect *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectSingle, index_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectSingle, refPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectSingle, point_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectSingle, parentOutput_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(GeogebraCommonKernelAlgosAlgoIntersectSingle *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(GeogebraCommonKernelAlgosAlgoIntersectSingle *self);

@implementation GeogebraCommonKernelAlgosAlgoIntersectSingle

- (instancetype)initWithNSString:(NSString *)label
withGeogebraCommonKernelAlgosAlgoIntersect:(GeogebraCommonKernelAlgosAlgoIntersect *)algo
withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)refPoint {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(self, label, algo, refPoint);
  return self;
}

- (instancetype)initWithNSString:(NSString *)label
withGeogebraCommonKernelAlgosAlgoIntersect:(GeogebraCommonKernelAlgosAlgoIntersect *)algo
withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)index {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, index);
  return self;
}

- (instancetype)initWithNSString:(NSString *)label
withGeogebraCommonKernelAlgosAlgoIntersect:(GeogebraCommonKernelAlgosAlgoIntersect *)algo
                         withInt:(jint)index {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(self, label, algo, index);
  return self;
}

- (void)addIncidence {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

- (jboolean)showUndefinedPointsInAlgebraView {
  return YES;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  if (refPoint_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_))->input_, 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(algo_->input_, 1));
    IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(index_)) toGeoElement]);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, IOSObjectArray_Get(((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_))->input_, 0));
    IOSObjectArray_Set(input_, 1, IOSObjectArray_Get(algo_->input_, 1));
    IOSObjectArray_Set(input_, 2, refPoint_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:point_];
  [self setDependencies];
}

- (GeogebraCommonKernelAlgosAlgoIntersect *)getAlgo {
  return self->algo_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getPoint {
  return point_;
}

- (IOSObjectArray *)getIntersectionPoints {
  return (IOSObjectArray *) check_class_cast([super getOutput], [IOSObjectArray class]);
}

- (IOSObjectArray *)getLastDefinedIntersectionPoints {
  return nil;
}

- (jboolean)isNearToAlgorithm {
  return YES;
}

- (void)initForNearToRelationship {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
}

- (void)compute {
  if (index_ != nil) idx_ = JavaLangMath_maxWithInt_withInt_(0, J2ObjCFpToInt([index_ getDouble]) - 1);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_parentOutput_(self, [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_)) getIntersectionPoints]);
  if (point_ != nil) {
    if ([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getLoadingMode] && point_->hasUpdatePrevilege_) {
      [algo_ setIntersectionPointWithInt:idx_ withGeogebraCommonKernelKernelNDGeoPointND:point_];
      point_->hasUpdatePrevilege_ = NO;
    }
  }
  if (refPoint_ != nil) if ([refPoint_ isDefined]) idx_ = [algo_ getClosestPointIndexWithGeogebraCommonKernelGeosGeoPoint:refPoint_];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined] && idx_ < ((IOSObjectArray *) nil_chk(parentOutput_))->size_) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point_)) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(parentOutput_, idx_)];
    if ([point_ getIncidenceList] != nil) {
      for (jint i = 0; i < parentOutput_->size_; ++i) {
        if (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(parentOutput_, idx_))) containsWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(parentOutput_, i)]) [((JavaUtilArrayList *) nil_chk([point_ getIncidenceList])) removeWithId:IOSObjectArray_Get(parentOutput_, i)];
      }
    }
    [point_ addIncidenceWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(parentOutput_, idx_) withBoolean:NO];
  }
  else {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point_)) setUndefined];
    JavaUtilArrayList *al = [point_ getIncidenceList];
    if (al != nil) for (jint i = 0; i < ((IOSObjectArray *) nil_chk(parentOutput_))->size_; ++i) {
      [al removeWithId:IOSObjectArray_Get(parentOutput_, i)];
    }
  }
}

- (void)remove {
  [super remove];
  [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo_)) removeUser];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (refPoint_ == nil) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfABNearC" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 2))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnIntersectSingleWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)dealloc {
  RELEASE_(algo_);
  RELEASE_(index_);
  RELEASE_(refPoint_);
  RELEASE_(point_);
  RELEASE_(parentOutput_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withGeogebraCommonKernelAlgosAlgoIntersect:withGeogebraCommonKernelGeosGeoPoint:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withGeogebraCommonKernelAlgosAlgoIntersect:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "initWithNSString:withGeogebraCommonKernelAlgosAlgoIntersect:withInt:", "AlgoIntersectSingle", NULL, 0x1, NULL, NULL },
    { "addIncidence", NULL, "V", 0x2, NULL, NULL },
    { "showUndefinedPointsInAlgebraView", NULL, "Z", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getAlgo", NULL, "Lgeogebra.common.kernel.algos.AlgoIntersect;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getIntersectionPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getLastDefinedIntersectionPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x4, NULL, NULL },
    { "isNearToAlgorithm", NULL, "Z", 0x1, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoIntersect;", NULL, NULL,  },
    { "index_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "refPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "parentOutput_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "idx_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectSingle = { 2, "AlgoIntersectSingle", "geogebra.common.kernel.algos", NULL, 0x1, 19, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectSingle;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, GeogebraCommonKernelGeosGeoPoint *refPoint) {
  GeogebraCommonKernelAlgosAlgoIntersect_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo))->cons_);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_algo_(self, algo);
  [algo addUser];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_refPoint_(self, refPoint);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_setAndConsume_point_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(algo->cons_));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

GeogebraCommonKernelAlgosAlgoIntersectSingle *new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, GeogebraCommonKernelGeosGeoPoint *refPoint) {
  GeogebraCommonKernelAlgosAlgoIntersectSingle *self = [GeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoPoint_(self, label, algo, refPoint);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  GeogebraCommonKernelAlgosAlgoIntersect_initWithGeogebraCommonKernelConstruction_(self, ((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo))->cons_);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_algo_(self, algo);
  [algo addUser];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_index_(self, index);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_refPoint_(self, nil);
  GeogebraCommonKernelAlgosAlgoIntersectSingle_setAndConsume_point_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(algo->cons_));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(self);
  [self compute];
  [self->point_ setLabelWithNSString:label];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(self);
}

GeogebraCommonKernelAlgosAlgoIntersectSingle *new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, id<GeogebraCommonKernelGeosGeoNumberValue> index) {
  GeogebraCommonKernelAlgosAlgoIntersectSingle *self = [GeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, index);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(GeogebraCommonKernelAlgosAlgoIntersectSingle *self, NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, jint index) {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelGeosGeoNumberValue_(self, label, algo, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(algo)) getConstruction], index + 1) autorelease]);
}

GeogebraCommonKernelAlgosAlgoIntersectSingle *new_GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(NSString *label, GeogebraCommonKernelAlgosAlgoIntersect *algo, jint index) {
  GeogebraCommonKernelAlgosAlgoIntersectSingle *self = [GeogebraCommonKernelAlgosAlgoIntersectSingle alloc];
  GeogebraCommonKernelAlgosAlgoIntersectSingle_initWithNSString_withGeogebraCommonKernelAlgosAlgoIntersect_withInt_(self, label, algo, index);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectSingle_addIncidence(GeogebraCommonKernelAlgosAlgoIntersectSingle *self) {
  if ([self->algo_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntersectConics class]]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(((GeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(self->algo_, [GeogebraCommonKernelAlgosAlgoIntersectConics class])))) getA] withBoolean:NO];
    [self->point_ addIncidenceWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectConics *) nil_chk(((GeogebraCommonKernelAlgosAlgoIntersectConics *) check_class_cast(self->algo_, [GeogebraCommonKernelAlgosAlgoIntersectConics class])))) getB] withBoolean:NO];
  }
  else if ([self->algo_ isKindOfClass:[GeogebraCommonKernelAlgosAlgoIntersectLineConic class]]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) addIncidenceWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(self->algo_, [GeogebraCommonKernelAlgosAlgoIntersectLineConic class])))) getLine] withBoolean:NO];
    [self->point_ addIncidenceWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) nil_chk(((GeogebraCommonKernelAlgosAlgoIntersectLineConic *) check_class_cast(self->algo_, [GeogebraCommonKernelAlgosAlgoIntersectLineConic class])))) getConic] withBoolean:NO];
  }
}

void GeogebraCommonKernelAlgosAlgoIntersectSingle_initForNearToRelationship(GeogebraCommonKernelAlgosAlgoIntersectSingle *self) {
  GeogebraCommonKernelAlgosAlgoIntersectSingle_set_parentOutput_(self, [((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk(self->algo_)) getIntersectionPoints]);
  [self->algo_ initForNearToRelationship];
  [self->algo_ setIntersectionPointWithInt:self->idx_ withGeogebraCommonKernelKernelNDGeoPointND:self->point_];
  [self->algo_ compute];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectSingle)
