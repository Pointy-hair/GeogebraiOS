//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/CmdNormalize.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/statistics/AlgoNormalize.h"
#include "geogebra/common/kernel/statistics/AlgoNormalizePoints.h"
#include "geogebra/common/kernel/statistics/CmdNormalize.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"

@implementation GeogebraCommonKernelStatisticsCmdNormalize

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelStatisticsCmdNormalize_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:1];
  switch (n) {
    case 1:
    if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoList])) {
      GeogebraCommonKernelGeosGeoList *l = (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]);
      {
        GeogebraCommonKernelStatisticsAlgoNormalize *algo1;
        IOSObjectArray *ret1;
        GeogebraCommonKernelStatisticsAlgoNormalizePoints *algo2;
        IOSObjectArray *ret2;
        switch ([[((GeogebraCommonKernelGeosGeoList *) nil_chk(l)) getElementType] ordinal]) {
          case GeogebraCommonPluginGeoClass_NUMERIC:
          algo1 = [new_GeogebraCommonKernelStatisticsAlgoNormalize_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(cons_, [c getLabel], l) autorelease];
          ret1 = [IOSObjectArray arrayWithObjects:(id[]){ [algo1 getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret1;
          case GeogebraCommonPluginGeoClass_POINT:
          algo2 = [new_GeogebraCommonKernelStatisticsAlgoNormalizePoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(cons_, [c getLabel], l) autorelease];
          ret2 = [IOSObjectArray arrayWithObjects:(id[]){ [algo2 getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
          return ret2;
        }
      }
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, arg)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdNormalize", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsCmdNormalize = { 2, "CmdNormalize", "geogebra.common.kernel.statistics", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsCmdNormalize;
}

@end

void GeogebraCommonKernelStatisticsCmdNormalize_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelStatisticsCmdNormalize *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelStatisticsCmdNormalize *new_GeogebraCommonKernelStatisticsCmdNormalize_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelStatisticsCmdNormalize *self = [GeogebraCommonKernelStatisticsCmdNormalize alloc];
  GeogebraCommonKernelStatisticsCmdNormalize_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsCmdNormalize)
