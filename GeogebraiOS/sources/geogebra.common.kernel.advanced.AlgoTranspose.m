//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoTranspose.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoTranspose.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"

@interface GeogebraCommonKernelAdvancedAlgoTranspose () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoList *outputList_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTranspose, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoTranspose, outputList_, GeogebraCommonKernelGeosGeoList *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoTranspose_compute(GeogebraCommonKernelAdvancedAlgoTranspose *self);

@implementation GeogebraCommonKernelAdvancedAlgoTranspose

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAdvancedAlgoTranspose_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Transpose();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoTranspose_compute(self);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoTranspose", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoTranspose = { 2, "AlgoTranspose", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoTranspose;
}

@end

void GeogebraCommonKernelAdvancedAlgoTranspose_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedAlgoTranspose *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoTranspose_set_inputList_(self, inputList);
  GeogebraCommonKernelAdvancedAlgoTranspose_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoTranspose_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoTranspose *new_GeogebraCommonKernelAdvancedAlgoTranspose_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAdvancedAlgoTranspose *self = [GeogebraCommonKernelAdvancedAlgoTranspose alloc];
  GeogebraCommonKernelAdvancedAlgoTranspose_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoTranspose_compute(GeogebraCommonKernelAdvancedAlgoTranspose *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined] || ([self->inputList_ size] > 0 && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:0])) isGeoList])) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) clear];
  if ([self->inputList_ size] == 0) {
    return;
  }
  jint cols = [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([self->inputList_ getWithInt:0], [GeogebraCommonKernelGeosGeoList class])))) size];
  for (jint i = 1; i < [self->inputList_ size]; i++) {
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->inputList_ getWithInt:i])) isGeoList] || [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([self->inputList_ getWithInt:i], [GeogebraCommonKernelGeosGeoList class])))) size] != cols) {
      [self->outputList_ setUndefined];
      return;
    }
  }
  for (jint i = 0; i < cols; i++) {
    GeogebraCommonKernelGeosGeoList *column = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    for (jint j = 0; j < [self->inputList_ size]; j++) {
      [column addWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast([self->inputList_ getWithInt:j], [GeogebraCommonKernelGeosGeoList class])))) getWithInt:i])) copy__]];
    }
    [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:column];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoTranspose)
