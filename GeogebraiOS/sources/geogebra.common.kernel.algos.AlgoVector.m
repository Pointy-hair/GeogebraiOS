//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoVector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoVector.h"
#include "geogebra/common/kernel/algos/SymbolicParameters.h"
#include "geogebra/common/kernel/algos/SymbolicParametersAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/kernel/prover/NoSymbolicParametersException.h"
#include "geogebra/common/kernel/prover/polynomial/Polynomial.h"
#include "java/lang/Math.h"
#include "java/math/BigInteger.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@interface GeogebraCommonKernelAlgosAlgoVector () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> P_, Q_;
  id<GeogebraCommonKernelKernelNDGeoVectorND> v_;
  IOSObjectArray *polynomials_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoVector, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoVector, Q_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoVector, v_, id<GeogebraCommonKernelKernelNDGeoVectorND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoVector, polynomials_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoVector_compute(GeogebraCommonKernelAlgosAlgoVector *self);

@implementation GeogebraCommonKernelAlgosAlgoVector

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, P, Q);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createNewVector {
  return [new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)newStartPoint {
  return [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Vector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_VECTOR;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(Q_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(v_, [GeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)getVector {
  return v_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getQ {
  return Q_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoVector_compute(self);
}

- (void)setCoords {
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v_)) setCoordsWithDoubleArray:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) vectorToWithGeogebraCommonKernelKernelNDGeoPointND:Q_]];
}

- (GeogebraCommonKernelAlgosSymbolicParameters *)getSymbolicParameters {
  return [new_GeogebraCommonKernelAlgosSymbolicParameters_initWithGeogebraCommonKernelAlgosSymbolicParametersAlgo_(self) autorelease];
}

- (void)getFreeVariablesWithJavaUtilHashSet:(JavaUtilHashSet *)variables {
  if (P_ != nil && Q_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getFreeVariablesWithJavaUtilHashSet:variables];
    return;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSIntArray *)getDegrees {
  if (P_ != nil && Q_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSIntArray *degree1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
    IOSIntArray *degree2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getDegrees];
    IOSIntArray *result = [IOSIntArray arrayWithLength:3];
    *IOSIntArray_GetRef(result, 0) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(nil_chk(degree1), 0) + IOSIntArray_Get(nil_chk(degree2), 2), IOSIntArray_Get(degree2, 0) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 1) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(degree1, 1) + IOSIntArray_Get(degree2, 2), IOSIntArray_Get(degree2, 1) + IOSIntArray_Get(degree1, 2));
    *IOSIntArray_GetRef(result, 2) = IOSIntArray_Get(degree2, 2) + IOSIntArray_Get(degree1, 2);
    return result;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (IOSObjectArray *)getExactCoordinatesWithJavaUtilHashMap:(JavaUtilHashMap *)values {
  if (P_ != nil && Q_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSObjectArray *coords1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *coords2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getExactCoordinatesWithJavaUtilHashMap:values];
    IOSObjectArray *result = [IOSObjectArray arrayWithLength:3 type:JavaMathBigInteger_class_()];
    IOSObjectArray_Set(result, 0, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(nil_chk(coords2), 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(nil_chk(coords1), 2)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]]);
    IOSObjectArray_Set(result, 1, [((JavaMathBigInteger *) nil_chk([((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords1, 2)])) subtractWithJavaMathBigInteger:[((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]]);
    IOSObjectArray_Set(result, 2, [((JavaMathBigInteger *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithJavaMathBigInteger:IOSObjectArray_Get(coords2, 2)]);
    return GeogebraCommonKernelAlgosSymbolicParameters_reduceWithJavaMathBigIntegerArray_(result);
  }
  return nil;
}

- (IOSObjectArray *)getPolynomials {
  if (polynomials_ != nil) {
    return polynomials_;
  }
  if (P_ != nil && Q_ != nil && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:P_] && [GeogebraCommonKernelAlgosSymbolicParametersAlgo_class_() isInstance:Q_]) {
    IOSObjectArray *coords1 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(P_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
    IOSObjectArray *coords2 = [((id<GeogebraCommonKernelAlgosSymbolicParametersAlgo>) check_protocol_cast(Q_, @protocol(GeogebraCommonKernelAlgosSymbolicParametersAlgo))) getPolynomials];
    GeogebraCommonKernelAlgosAlgoVector_setAndConsume_polynomials_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelProverPolynomialPolynomial_class_()]);
    IOSObjectArray_Set(polynomials_, 0, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(nil_chk(coords2), 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(nil_chk(coords1), 2)])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 0))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]]);
    IOSObjectArray_Set(polynomials_, 1, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk([((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords2, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords1, 2)])) subtractWithGeogebraCommonKernelProverPolynomialPolynomial:[((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 1))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]]);
    IOSObjectArray_Set(polynomials_, 2, [((GeogebraCommonKernelProverPolynomialPolynomial *) nil_chk(IOSObjectArray_Get(coords1, 2))) multiplyWithGeogebraCommonKernelProverPolynomialPolynomial:IOSObjectArray_Get(coords2, 2)]);
    return polynomials_;
  }
  @throw [new_GeogebraCommonKernelProverNoSymbolicParametersException_init() autorelease];
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(Q_);
  RELEASE_(v_);
  RELEASE_(polynomials_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoVector", NULL, 0x1, NULL, NULL },
    { "createNewVector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "newStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getQ", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCoords", NULL, "V", 0x4, NULL, NULL },
    { "getSymbolicParameters", NULL, "Lgeogebra.common.kernel.algos.SymbolicParameters;", 0x1, NULL, NULL },
    { "getFreeVariablesWithJavaUtilHashSet:", "getFreeVariables", "V", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getDegrees", NULL, "[I", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getExactCoordinatesWithJavaUtilHashMap:", "getExactCoordinates", "[Ljava.math.BigInteger;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
    { "getPolynomials", NULL, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", 0x1, "Lgeogebra.common.kernel.prover.NoSymbolicParametersException;", NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "Q_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoVectorND;", NULL, NULL,  },
    { "polynomials_", NULL, 0x2, "[Lgeogebra.common.kernel.prover.polynomial.Polynomial;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoVector = { 2, "AlgoVector", "geogebra.common.kernel.algos", NULL, 0x1, 16, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoVector;
}

@end

void GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoVector *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoVector_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoVector_set_Q_(self, Q);
  GeogebraCommonKernelAlgosAlgoVector_set_v_(self, [self createNewVector]);
  [self setInputOutput];
  @try {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isLabelSet]) [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:P];
    else {
      id<GeogebraCommonKernelKernelNDGeoPointND> startPoint = [self newStartPoint];
      [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(startPoint)) setWithGeogebraCommonKernelKernelNDGeoPointND:P];
      [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:startPoint];
    }
  }
  @catch (GeogebraCommonKernelCircularDefinitionException *e) {
  }
  GeogebraCommonKernelAlgosAlgoVector_compute(self);
  [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoVector *new_GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, id<GeogebraCommonKernelKernelNDGeoPointND> Q) {
  GeogebraCommonKernelAlgosAlgoVector *self = [GeogebraCommonKernelAlgosAlgoVector alloc];
  GeogebraCommonKernelAlgosAlgoVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, P, Q);
  return self;
}

void GeogebraCommonKernelAlgosAlgoVector_compute(GeogebraCommonKernelAlgosAlgoVector *self) {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isFinite] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->Q_)) isFinite]) {
    [self setCoords];
    id<GeogebraCommonKernelKernelNDGeoPointND> startPoint = [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) getStartPoint];
    if (startPoint != nil) if (![startPoint isLabelSet]) {
      [startPoint setWithGeogebraCommonKernelKernelNDGeoPointND:self->P_];
    }
  }
  else {
    [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(self->v_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoVector)
