//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/functioninspector/FunctionInspectorModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/gui/view/functioninspector/FunctionInspectorModel.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/advanced/AlgoCurvature.h"
#include "geogebra/common/kernel/advanced/AlgoOsculatingCircle.h"
#include "geogebra/common/kernel/algos/AlgoDependentFunction.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/AlgoRootsPolynomial.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyVecNode.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/cas/AlgoIntegralDefinite.h"
#include "geogebra/common/kernel/cas/AlgoLengthFunction.h"
#include "geogebra/common/kernel/cas/AlgoTangentFunctionPoint.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoElementSpreadsheet.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/optimization/ExtremumFinder.h"
#include "geogebra/common/kernel/roots/RealRootFunction.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoGebraColorConstants.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/SpreadsheetTableModel.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"

#define GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE 0
#define GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE2 1
#define GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DIFFERENCE 2
#define GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_CURVATURE 3

@interface GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel () {
 @public
  GeogebraCommonMainApp *app_;
  GeogebraCommonKernelKernel *kernel_;
  GeogebraCommonKernelConstruction *cons_;
  GeogebraCommonEuclidianEuclidianView *activeEV_;
  id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener> listener_;
  JavaUtilArrayList *extraColumnList_;
  GeogebraCommonKernelGeosGeoElement *tangentLine_, *oscCircle_, *xSegment_, *ySegment_;
  GeogebraCommonKernelGeosGeoElement *functionInterval_, *integralGeo_, *lengthGeo_, *areaGeo_;
  GeogebraCommonKernelGeosGeoFunction *derivative_, *derivative2_, *selectedGeo_;
  GeogebraCommonKernelGeosGeoPoint *testPoint_, *lowPoint_, *highPoint_, *minPoint_, *maxPoint_;
  GeogebraCommonKernelGeosGeoList *pts_;
  JavaUtilArrayList *intervalTabGeoList_, *pointTabGeoList_, *hiddenGeoList_;
  IOSObjectArray *rootGeos_;
  JavaUtilArrayList *xyTableCopyList_;
  jdouble xMin_, xMax_, start_, step_;
  jint pointCount_;
  JavaUtilArrayList *property_;
  JavaUtilArrayList *value_;
  JavaUtilArrayList *value2_;
  IOSObjectArray *columnNames_;
  jint printFigures_;
  jint printDecimals_;
}

- (void)updateExtraColumnsWithInt:(jint)rowCount;

- (jdouble)getStartX;

- (void)defineDisplayGeos;

+ (void)processCellGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withInt:(jint)column
                                                     withInt:(jint)row;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, kernel_, GeogebraCommonKernelKernel *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, cons_, GeogebraCommonKernelConstruction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, activeEV_, GeogebraCommonEuclidianEuclidianView *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, listener_, id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, extraColumnList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, tangentLine_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, oscCircle_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, xSegment_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, ySegment_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, functionInterval_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, integralGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, lengthGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, areaGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, derivative_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, derivative2_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, selectedGeo_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, testPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, lowPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, highPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, minPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, maxPoint_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, pts_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, intervalTabGeoList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, pointTabGeoList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, hiddenGeoList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, rootGeos_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, xyTableCopyList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, property_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, value_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, value2_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, columnNames_, IOSObjectArray *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, COL_DERIVATIVE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, COL_DERIVATIVE2, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, COL_DIFFERENCE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel, COL_CURVATURE, jint)

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_updateExtraColumnsWithInt_(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self, jint rowCount);

__attribute__((unused)) static jdouble GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_getStartX(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self);

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_defineDisplayGeos(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self);

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(GeogebraCommonKernelGeosGeoElement *geo, jint column, jint row);

@interface GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener : NSObject
@end

__attribute__((unused)) static void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@implementation GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
      withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)selectedGeo
withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener:(id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>)listener {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener_(self, app, selectedGeo, listener);
  return self;
}

- (void)setColumnNames {
  IOSObjectArray_Set(nil_chk(columnNames_), GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE, [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"fncInspector.Derivative"]);
  IOSObjectArray_Set(columnNames_, GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE2, [loc_ getPlainWithNSString:@"fncInspector.Derivative2"]);
  IOSObjectArray_Set(columnNames_, GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_CURVATURE, [loc_ getPlainWithNSString:@"fncInspector.Curvature"]);
  IOSObjectArray_Set(columnNames_, GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DIFFERENCE, [loc_ getPlainWithNSString:@"fncInspector.Difference"]);
}

- (NSString *)getColumnNameWithInt:(jint)col {
  return col < ((IOSObjectArray *) nil_chk(columnNames_))->size_ ? IOSObjectArray_Get(columnNames_, col) : @"-";
}

- (NSString *)getColumnNameForCopyWithInt:(jint)col {
  if (col == 0) {
    return @"x";
  }
  else if (col == 1) {
    return @"y(x)";
  }
  else {
    col = [((JavaLangInteger *) nil_chk([((JavaUtilArrayList *) nil_chk(extraColumnList_)) getWithInt:col - 2])) intValue];
    return col < ((IOSObjectArray *) nil_chk(columnNames_))->size_ ? IOSObjectArray_Get(columnNames_, col) : @"-";
  }
}

- (NSString *)getTitleString {
  if (selectedGeo_ == nil) return [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getMenuWithNSString:@"SelectObject"];
  return [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) getAlgebraDescriptionDefault];
}

- (void)updatePointsWithBoolean:(jboolean)isTangent
                    withBoolean:(jboolean)isOscCircle
                    withBoolean:(jboolean)isXYSegments
                    withBoolean:(jboolean)isTable {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(tangentLine_)) setEuclidianVisibleWithBoolean:isTangent];
  [tangentLine_ update];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oscCircle_)) setEuclidianVisibleWithBoolean:isOscCircle];
  [oscCircle_ update];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(xSegment_)) setEuclidianVisibleWithBoolean:isXYSegments];
  [xSegment_ update];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ySegment_)) setEuclidianVisibleWithBoolean:isXYSegments];
  [ySegment_ update];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(pts_)) setEuclidianVisibleWithBoolean:isTable];
  [pts_ updateRepaint];
  [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) setStepVisibleWithBoolean:isTable];
  [listener_ updateXYTableWithBoolean:isTable];
}

- (void)updateGeosWithBoolean:(jboolean)isInterval {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(intervalTabGeoList_)) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:isInterval];
    [geo update];
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(pointTabGeoList_)) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:!isInterval];
    [geo update];
  }
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(activeEV_)) repaint];
}

- (GeogebraCommonKernelGeosGeoPoint *)getLowPoint {
  return lowPoint_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getHighPoint {
  return highPoint_;
}

- (void)updateIntervalTable {
  [((JavaUtilArrayList *) nil_chk(property_)) clear];
  [((JavaUtilArrayList *) nil_chk(value_)) clear];
  [((JavaUtilArrayList *) nil_chk(value2_)) clear];
  IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:3];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) getCoordsWithDoubleArray:coords];
  xMin_ = IOSDoubleArray_Get(coords, 0);
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) getCoordsWithDoubleArray:coords];
  xMax_ = IOSDoubleArray_Get(coords, 0);
  GeogebraCommonKernelOptimizationExtremumFinder *ef = [new_GeogebraCommonKernelOptimizationExtremumFinder_init() autorelease];
  id<GeogebraCommonKernelRootsRealRootFunction> fun = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) getRealRootFunctionY];
  jdouble integral = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(integralGeo_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  jdouble area = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(areaGeo_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  jdouble mean = integral / (xMax_ - xMin_);
  jdouble length = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(lengthGeo_, [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  jdouble yMin = [selectedGeo_ evaluateWithDouble:xMin_];
  jdouble yMax = [selectedGeo_ evaluateWithDouble:xMax_];
  jdouble xMinInt = [ef findMinimumWithDouble:xMin_ withDouble:xMax_ withGeogebraCommonKernelRootsRealRootFunction:fun withDouble:5.0E-8];
  jdouble xMaxInt = [ef findMaximumWithDouble:xMin_ withDouble:xMax_ withGeogebraCommonKernelRootsRealRootFunction:fun withDouble:5.0E-8];
  jdouble yMinInt = [selectedGeo_ evaluateWithDouble:xMinInt];
  jdouble yMaxInt = [selectedGeo_ evaluateWithDouble:xMaxInt];
  if (yMin < yMinInt) {
    yMinInt = yMin;
    xMinInt = xMin_;
  }
  if (yMax > yMaxInt) {
    yMaxInt = yMax;
    xMaxInt = xMax_;
  }
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(minPoint_)) setCoordsWithDouble:xMinInt withDouble:yMinInt withDouble:1.0];
  [minPoint_ update];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(maxPoint_)) setCoordsWithDouble:xMaxInt withDouble:yMaxInt withDouble:1.0];
  [maxPoint_ update];
  [property_ addWithId:[((GeogebraCommonMainLocalization *) nil_chk(loc_)) getCommandWithNSString:@"Min"]];
  [value_ addWithId:JreStrcat("C$$$C", '(', [self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(xMinInt)], @" , ", [self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(yMinInt)], ')')];
  IOSObjectArray *min = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(xMinInt), JavaLangDouble_valueOfWithDouble_(yMinInt) } count:2 type:JavaLangDouble_class_()];
  [value2_ addWithId:min];
  [property_ addWithId:[loc_ getCommandWithNSString:@"Max"]];
  [value_ addWithId:JreStrcat("C$$$C", '(', [self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(xMaxInt)], @" , ", [self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(yMaxInt)], ')')];
  IOSObjectArray *max = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(xMaxInt), JavaLangDouble_valueOfWithDouble_(yMaxInt) } count:2 type:JavaLangDouble_class_()];
  [value2_ addWithId:max];
  [property_ addWithId:nil];
  [value_ addWithId:nil];
  [value2_ addWithId:nil];
  GeogebraCommonKernelArithmeticExpressionNode *low = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, lowPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *high = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, highPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelAlgosAlgoDependentNumber *xLow = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, low, NO) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xLow];
  GeogebraCommonKernelAlgosAlgoDependentNumber *xHigh = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(cons_, high, NO) autorelease];
  [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xHigh];
  GeogebraCommonKernelAlgosAlgoElement *roots;
  if ([selectedGeo_ isPolynomialFunctionWithBoolean:NO]) {
    roots = [new_GeogebraCommonKernelAlgosAlgoRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_(cons_, selectedGeo_) autorelease];
  }
  else {
    roots = [new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, selectedGeo_, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]), (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
  }
  [cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:roots];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_rootGeos_(self, [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(roots)) getGeoElements]);
  [property_ addWithId:[loc_ getCommandWithNSString:@"Root"]];
  jint count = 0;
  jdouble root = JavaLangDouble_NaN;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rootGeos_))->size_; i++) {
    GeogebraCommonKernelGeosGeoPoint *p = ((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(rootGeos_, i), [GeogebraCommonKernelGeosGeoPoint class]));
    if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) isDefined]) {
      jdouble rt = p->inhomX_;
      if (GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(rt, xMin_) && GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(xMax_, rt)) {
        root = rt;
        count++;
      }
    }
  }
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_defaultTemplate_();
  {
    IOSObjectArray *r;
    switch (count) {
      case 0:
      [value_ addWithId:[loc_ getPlainWithNSString:@"fncInspector.NoRoots"]];
      [value2_ addWithId:nil];
      break;
      case 1:
      [value_ addWithId:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:root withGeogebraCommonKernelStringTemplate:tpl]];
      r = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(root) } count:1 type:JavaLangDouble_class_()];
      [value2_ addWithId:r];
      break;
      default:
      [value_ addWithId:[loc_ getPlainWithNSString:@"fncInspector.MultipleRoots"]];
      [value2_ addWithId:nil];
    }
  }
  [property_ addWithId:nil];
  [value_ addWithId:nil];
  [value2_ addWithId:nil];
  [property_ addWithId:[loc_ getCommandWithNSString:@"Integral"]];
  [value_ addWithId:[self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(integral)]];
  IOSObjectArray *in = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(integral) } count:1 type:JavaLangDouble_class_()];
  [value2_ addWithId:in];
  [property_ addWithId:[loc_ getCommandWithNSString:@"Area"]];
  [value_ addWithId:[self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(area)]];
  IOSObjectArray *a = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(area) } count:1 type:JavaLangDouble_class_()];
  [value2_ addWithId:a];
  [property_ addWithId:[loc_ getCommandWithNSString:@"Mean"]];
  [value_ addWithId:[self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(mean)]];
  IOSObjectArray *m = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(mean) } count:1 type:JavaLangDouble_class_()];
  [value2_ addWithId:m];
  [property_ addWithId:[loc_ getCommandWithNSString:@"Length"]];
  [value_ addWithId:[self formatWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(length)]];
  IOSObjectArray *l = [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(length) } count:1 type:JavaLangDouble_class_()];
  [value2_ addWithId:l];
  [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) updateIntervalWithJavaUtilArrayList:property_ withJavaUtilArrayList:value_];
}

- (NSString *)formatWithJavaLangDouble:(JavaLangDouble *)x {
  if (x == nil) {
    return @"";
  }
  GeogebraCommonKernelStringTemplate *highPrecision;
  if ([self getPrintDecimals] >= 0) highPrecision = GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), [self getPrintDecimals], NO);
  else highPrecision = GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), [self getPrintFigures], NO);
  if (highPrecision == nil) {
    return @"";
  }
  NSString *result = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) formatWithDouble:[((JavaLangDouble *) nil_chk(x)) doubleValue] withGeogebraCommonKernelStringTemplate:highPrecision];
  return result;
}

- (void)updateXYTableWithInt:(jint)rowCount
                 withBoolean:(jboolean)isTable {
  GeogebraCommonKernelGeosGeoFunction *f = selectedGeo_;
  [((JavaUtilArrayList *) nil_chk(xyTableCopyList_)) clear];
  IOSObjectArray *xArray = [IOSObjectArray arrayWithLength:rowCount type:JavaLangDouble_class_()];
  IOSObjectArray *yArray = [IOSObjectArray arrayWithLength:rowCount type:JavaLangDouble_class_()];
  if (isTable) {
    jdouble x = start_ - step_ * (pointCount_ - 1) / 2;
    jdouble y;
    for (jint i = 0; i < rowCount; i++) {
      y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:x];
      [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(x) withInt:i withInt:0];
      [listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(y) withInt:i withInt:1];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(pts_)) getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:x withDouble:y withDouble:1];
      IOSObjectArray_Set(xArray, i, JavaLangDouble_valueOfWithDouble_(x));
      IOSObjectArray_Set(yArray, i, JavaLangDouble_valueOfWithDouble_(y));
      x = x + step_;
    }
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(pts_)) updateRepaint];
  }
  else {
    jdouble x = start_;
    jdouble y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) evaluateWithDouble:x];
    [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(x) withInt:0 withInt:0];
    [listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(y) withInt:0 withInt:1];
    IOSObjectArray_Set(xArray, 0, JavaLangDouble_valueOfWithDouble_(x));
    IOSObjectArray_Set(yArray, 0, JavaLangDouble_valueOfWithDouble_(y));
  }
  [xyTableCopyList_ addWithId:xArray];
  [xyTableCopyList_ addWithId:yArray];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_updateExtraColumnsWithInt_(self, rowCount);
}

- (void)updateExtraColumnsWithInt:(jint)rowCount {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_updateExtraColumnsWithInt_(self, rowCount);
}

- (void)addColumnWithInt:(jint)columnType {
  [((JavaUtilArrayList *) nil_chk(extraColumnList_)) addWithId:JavaLangInteger_valueOfWithInt_(columnType)];
  [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) addTableColumnWithNSString:[self getColumnNameWithInt:columnType]];
}

- (void)removeColumn {
  [extraColumnList_ removeWithInt:[((JavaUtilArrayList *) nil_chk(extraColumnList_)) size] - 1];
}

- (void)applyStepWithDouble:(jdouble)value {
  step_ = value;
}

- (void)applyHighWithDouble:(jdouble)value {
  jdouble y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) evaluateWithDouble:value];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) setCoordsWithDouble:value withDouble:y withDouble:1];
  [highPoint_ updateCascade];
  [highPoint_ updateRepaint];
}

- (void)applyLowWithDouble:(jdouble)value {
  jdouble y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) evaluateWithDouble:value];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) setCoordsWithDouble:value withDouble:y withDouble:1];
  [lowPoint_ updateCascade];
  [lowPoint_ updateRepaint];
}

- (jboolean)isValid {
  return !(selectedGeo_ == nil || testPoint_ == nil || lowPoint_ == nil || highPoint_ == nil);
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                         withBoolean:(jboolean)isPoints {
  if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) isEqual:geo]) {
    [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) setGeoNameWithNSString:[selectedGeo_ toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  else if (isPoints && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(testPoint_)) isEqual:geo]) {
    IOSDoubleArray *coords = [IOSDoubleArray arrayWithLength:3];
    [testPoint_ getCoordsWithDoubleArray:coords];
    self->start_ = IOSDoubleArray_Get(coords, 0);
    [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) changeTableSelection];
    return;
  }
  else if (!isPoints && ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) isEqual:geo] || [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) isEqual:geo])) {
    [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) updateHighAndLowWithBoolean:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_))->x_ > ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_))->x_ withBoolean:[lowPoint_ isEqual:geo]];
    return;
  }
}

- (jdouble)getStartX {
  return GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_getStartX(self);
}

- (void)insertGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self clearGeoList];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_selectedGeo_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class]));
  [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) setGeoNameWithNSString:[self getTitleString]];
  start_ = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_getStartX(self);
  step_ = 0.25 * IOSDoubleArray_Get(nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getActiveEuclidianView])) getGridDistances]), 0);
  [listener_ setStepTextWithNSString:JreStrcat("D", step_)];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_defineDisplayGeos(self);
  jdouble x = [self getInitialX] - 4 * step_;
  jdouble y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) evaluateWithDouble:x];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(lowPoint_)) setCoordsWithDouble:x withDouble:y withDouble:1];
  x = [self getInitialX] + 4 * step_;
  y = [selectedGeo_ evaluateWithDouble:x];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(highPoint_)) setCoordsWithDouble:x withDouble:y withDouble:1];
  [lowPoint_ updateCascade];
  [highPoint_ updateCascade];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_activeEV_(self, (GeogebraCommonEuclidianEuclidianView *) check_class_cast([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView], [GeogebraCommonEuclidianEuclidianView class]));
}

- (void)stepStartForward {
  start_ += step_;
}

- (void)stepStartBackward {
  start_ -= step_;
}

- (void)defineDisplayGeos {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_defineDisplayGeos(self);
}

- (void)updateTestPoint {
  if (testPoint_ == nil) return;
  jint row = [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) getSelectedXYRow];
  if (row >= 0) {
    NSString *str = (NSString *) check_class_cast([listener_ getXYValueAtWithInt:row withInt:0], [NSString class]);
    if (![@"" isEqual:str]) {
      jdouble x = JavaLangDouble_parseDoubleWithNSString_(str);
      jdouble y = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(selectedGeo_)) evaluateWithDouble:x];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(testPoint_)) setCoordsWithDouble:x withDouble:y withDouble:1];
      [testPoint_ updateRepaint];
    }
  }
}

- (void)clearGeoList {
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(intervalTabGeoList_)) {
    if (geo != nil) {
      [geo remove];
    }
  }
  [intervalTabGeoList_ clear];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(pointTabGeoList_)) {
    if (geo != nil) {
      [geo remove];
    }
  }
  [pointTabGeoList_ clear];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(hiddenGeoList_)) {
    if (geo != nil) {
      [geo remove];
    }
  }
  [hiddenGeoList_ clear];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_rootGeos_(self, nil);
}

- (void)updateIntervalGeoVisiblity {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(minPoint_)) setEuclidianVisibleWithBoolean:NO];
  [minPoint_ update];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(maxPoint_)) setEuclidianVisibleWithBoolean:NO];
  [maxPoint_ update];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(areaGeo_)) setEuclidianVisibleWithBoolean:NO];
  [areaGeo_ update];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(integralGeo_)) setEuclidianVisibleWithBoolean:YES];
  [integralGeo_ update];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(activeEV_)) repaint];
}

- (void)copyPointsToSpreadsheetWithInt:(jint)colCount
                               withInt:(jint)rowCount {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  jint targetColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk([app_ getSpreadsheetTableModel])) getHighestUsedColumn];
  for (jint c = 0; c < colCount; c++) {
    targetColumn++;
    for (jint row = 0; row < rowCount + 1; row++) {
      if (row == 0) {
        geo = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(cons, [self getColumnNameForCopyWithInt:c]) autorelease];
        GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(geo, targetColumn, row);
      }
      else if (IOSObjectArray_Get(nil_chk([((JavaUtilArrayList *) nil_chk(xyTableCopyList_)) getWithInt:c]), row - 1) != nil) {
        geo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, [((JavaLangDouble *) nil_chk(IOSObjectArray_Get(nil_chk([xyTableCopyList_ getWithInt:c]), row - 1))) doubleValue]) autorelease];
        GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(geo, targetColumn, row);
      }
    }
  }
}

- (void)copyIntervalsToSpreadsheetWithInt:(jint)colCount
                                  withInt:(jint)rowCount {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction];
  GeogebraCommonKernelGeosGeoElement *geo = nil;
  jint targetColumn = [((GeogebraCommonMainSpreadsheetTableModel *) nil_chk([app_ getSpreadsheetTableModel])) getHighestUsedColumn];
  for (jint c = 0; c < colCount; c++) {
    targetColumn++;
    for (jint row = 0; row < rowCount; row++) {
      if (c == 0 && [((JavaUtilArrayList *) nil_chk(property_)) getWithInt:row] != nil) {
        geo = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_withNSString_(cons, [property_ getWithInt:row]) autorelease];
        GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(geo, targetColumn, row);
      }
      else if ([((JavaUtilArrayList *) nil_chk(value2_)) getWithInt:row] != nil) {
        for (jint k = 0; k < ((IOSObjectArray *) nil_chk([value2_ getWithInt:row]))->size_; k++) if (IOSObjectArray_Get(nil_chk([value2_ getWithInt:row]), k) != nil) {
          geo = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, [((JavaLangDouble *) nil_chk(IOSObjectArray_Get(nil_chk([value2_ getWithInt:row]), k))) doubleValue]) autorelease];
          GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(geo, targetColumn + k, row);
        }
      }
    }
  }
}

+ (void)processCellGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                     withInt:(jint)column
                                                     withInt:(jint)row {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(geo, column, row);
}

- (void)setStartWithDouble:(jdouble)value {
  start_ = value;
}

- (IOSObjectArray *)getColumnNames {
  [self setColumnNames];
  return columnNames_;
}

- (IOSObjectArray *)getIntervalColumnNames {
  IOSObjectArray *names = [IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonMainLocalization *) nil_chk(loc_)) getPlainWithNSString:@"fncInspector.Property"], [loc_ getPlainWithNSString:@"fncInspector.Value"] } count:2 type:NSString_class_()];
  return names;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setPrintFiguresWithInt:(jint)printFigures {
  self->printFigures_ = printFigures;
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals {
  self->printDecimals_ = printDecimals;
}

- (void)applyDecimalPlacesWithInt:(jint)index {
  if (index < 8) {
    printDecimals_ = IOSIntArray_Get(nil_chk(GeogebraCommonMainApp_get_roundingMenuLookup_()), index);
    printFigures_ = -1;
  }
  else {
    printDecimals_ = -1;
    printFigures_ = IOSIntArray_Get(nil_chk(GeogebraCommonMainApp_get_roundingMenuLookup_()), index);
  }
  [((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(listener_)) changedNumberFormat];
}

- (jdouble)getInitialX {
  return GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_getStartX(self);
}

- (void)dealloc {
  RELEASE_(app_);
  RELEASE_(kernel_);
  RELEASE_(cons_);
  RELEASE_(activeEV_);
  RELEASE_(listener_);
  RELEASE_(loc_);
  RELEASE_(extraColumnList_);
  RELEASE_(tangentLine_);
  RELEASE_(oscCircle_);
  RELEASE_(xSegment_);
  RELEASE_(ySegment_);
  RELEASE_(functionInterval_);
  RELEASE_(integralGeo_);
  RELEASE_(lengthGeo_);
  RELEASE_(areaGeo_);
  RELEASE_(derivative_);
  RELEASE_(derivative2_);
  RELEASE_(selectedGeo_);
  RELEASE_(testPoint_);
  RELEASE_(lowPoint_);
  RELEASE_(highPoint_);
  RELEASE_(minPoint_);
  RELEASE_(maxPoint_);
  RELEASE_(pts_);
  RELEASE_(intervalTabGeoList_);
  RELEASE_(pointTabGeoList_);
  RELEASE_(hiddenGeoList_);
  RELEASE_(rootGeos_);
  RELEASE_(xyTableCopyList_);
  RELEASE_(property_);
  RELEASE_(value_);
  RELEASE_(value2_);
  RELEASE_(columnNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener:", "FunctionInspectorModel", NULL, 0x1, NULL, NULL },
    { "setColumnNames", NULL, "V", 0x1, NULL, NULL },
    { "getColumnNameWithInt:", "getColumnName", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getColumnNameForCopyWithInt:", "getColumnNameForCopy", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTitleString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updatePointsWithBoolean:withBoolean:withBoolean:withBoolean:", "updatePoints", "V", 0x1, NULL, NULL },
    { "updateGeosWithBoolean:", "updateGeos", "V", 0x1, NULL, NULL },
    { "getLowPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getHighPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "updateIntervalTable", NULL, "V", 0x1, NULL, NULL },
    { "formatWithJavaLangDouble:", "format", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "updateXYTableWithInt:withBoolean:", "updateXYTable", "V", 0x1, NULL, NULL },
    { "updateExtraColumnsWithInt:", "updateExtraColumns", "V", 0x2, NULL, NULL },
    { "addColumnWithInt:", "addColumn", "V", 0x1, NULL, NULL },
    { "removeColumn", NULL, "V", 0x1, NULL, NULL },
    { "applyStepWithDouble:", "applyStep", "V", 0x1, NULL, NULL },
    { "applyHighWithDouble:", "applyHigh", "V", 0x1, NULL, NULL },
    { "applyLowWithDouble:", "applyLow", "V", 0x1, NULL, NULL },
    { "isValid", NULL, "Z", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "update", "V", 0x1, NULL, NULL },
    { "getStartX", NULL, "D", 0x2, NULL, NULL },
    { "insertGeoElementWithGeogebraCommonKernelGeosGeoElement:", "insertGeoElement", "V", 0x1, NULL, NULL },
    { "stepStartForward", NULL, "V", 0x1, NULL, NULL },
    { "stepStartBackward", NULL, "V", 0x1, NULL, NULL },
    { "defineDisplayGeos", NULL, "V", 0x2, NULL, NULL },
    { "updateTestPoint", NULL, "V", 0x1, NULL, NULL },
    { "clearGeoList", NULL, "V", 0x1, NULL, NULL },
    { "updateIntervalGeoVisiblity", NULL, "V", 0x1, NULL, NULL },
    { "copyPointsToSpreadsheetWithInt:withInt:", "copyPointsToSpreadsheet", "V", 0x1, NULL, NULL },
    { "copyIntervalsToSpreadsheetWithInt:withInt:", "copyIntervalsToSpreadsheet", "V", 0x1, NULL, NULL },
    { "processCellGeoWithGeogebraCommonKernelGeosGeoElement:withInt:withInt:", "processCellGeo", "V", 0xa, NULL, NULL },
    { "setStartWithDouble:", "setStart", "V", 0x1, NULL, NULL },
    { "getColumnNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getIntervalColumnNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "setPrintDecimalsWithInt:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "applyDecimalPlacesWithInt:", "applyDecimalPlaces", "V", 0x1, NULL, NULL },
    { "getInitialX", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "cons_", NULL, 0x2, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "activeEV_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$IFunctionInspectorListener;", NULL, NULL,  },
    { "loc_", NULL, 0x14, "Lgeogebra.common.main.Localization;", NULL, NULL,  },
    { "COL_DERIVATIVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE },
    { "COL_DERIVATIVE2_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE2 },
    { "COL_DIFFERENCE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DIFFERENCE },
    { "COL_CURVATURE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_CURVATURE },
    { "extraColumnList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Integer;>;",  },
    { "tangentLine_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "oscCircle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "xSegment_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "ySegment_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "functionInterval_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "integralGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "lengthGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "areaGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "derivative_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "derivative2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "selectedGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "testPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "lowPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "highPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "minPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "maxPoint_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pts_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "intervalTabGeoList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "pointTabGeoList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "hiddenGeoList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "rootGeos_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "xyTableCopyList_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<L[Ljava/lang/Double;;>;",  },
    { "xMin_", NULL, 0x2, "D", NULL, NULL,  },
    { "xMax_", NULL, 0x2, "D", NULL, NULL,  },
    { "start_", NULL, 0x2, "D", NULL, NULL,  },
    { "step_", NULL, 0x2, "D", NULL, NULL,  },
    { "pointCount_", NULL, 0x2, "I", NULL, NULL,  },
    { "property_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "value_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "value2_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<L[Ljava/lang/Double;;>;",  },
    { "columnNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$IFunctionInspectorListener;", "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel = { 2, "FunctionInspectorModel", "geogebra.common.gui.view.functioninspector", NULL, 0x1, 40, methods, 44, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel;
}

@end

void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener_(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self, GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoFunction *selectedGeo, id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener> listener) {
  NSObject_init(self);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_xyTableCopyList_(self, new_JavaUtilArrayList_init());
  self->start_ = -1;
  self->step_ = 0.1;
  self->pointCount_ = 9;
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_property_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_value_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_value2_(self, new_JavaUtilArrayList_init());
  self->printFigures_ = -1;
  self->printDecimals_ = 4;
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_app_(self, app);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_loc_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getLocalization]);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_kernel_(self, [app getKernel]);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_listener_(self, listener);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_cons_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getConstruction]);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_extraColumnList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_intervalTabGeoList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_pointTabGeoList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_hiddenGeoList_(self, new_JavaUtilArrayList_init());
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_activeEV_(self, (GeogebraCommonEuclidianEuclidianView *) check_class_cast([app getActiveEuclidianView], [GeogebraCommonEuclidianEuclidianView class]));
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_selectedGeo_(self, selectedGeo);
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_columnNames_(self, [IOSObjectArray newArrayWithLength:4 type:NSString_class_()]);
  [self setColumnNames];
}

GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener_(GeogebraCommonMainApp *app, GeogebraCommonKernelGeosGeoFunction *selectedGeo, id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener> listener) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self = [GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel alloc];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initWithGeogebraCommonMainApp_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener_(self, app, selectedGeo, listener);
  return self;
}

void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_updateExtraColumnsWithInt_(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self, jint rowCount) {
  if ([((JavaUtilArrayList *) nil_chk(self->extraColumnList_)) size] == 0) return;
  for (jint column = 2; column < [self->extraColumnList_ size] + 2; column++) {
    IOSObjectArray *copyArray = [IOSObjectArray arrayWithLength:rowCount type:JavaLangDouble_class_()];
    jint columnType = [((JavaLangInteger *) nil_chk([self->extraColumnList_ getWithInt:column - 2])) intValue];
    switch (columnType) {
      case GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE:
      for (jint row = 0; row < rowCount; row++) {
        NSString *str = (NSString *) check_class_cast([((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(self->listener_)) getXYValueAtWithInt:row withInt:0], [NSString class]);
        if (![@"" isEqual:str]) {
          jdouble x = JavaLangDouble_parseDoubleWithNSString_(str);
          jdouble d = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->derivative_)) evaluateWithDouble:x];
          [self->listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(d) withInt:row withInt:column];
          IOSObjectArray_Set(copyArray, row, JavaLangDouble_valueOfWithDouble_(d));
        }
      }
      break;
      case GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DERIVATIVE2:
      for (jint row = 0; row < rowCount; row++) {
        NSString *str = (NSString *) check_class_cast([((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(self->listener_)) getXYValueAtWithInt:row withInt:0], [NSString class]);
        if (![@"" isEqual:str]) {
          jdouble x = JavaLangDouble_parseDoubleWithNSString_(str);
          jdouble d2 = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->derivative2_)) evaluateWithDouble:x];
          [self->listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(d2) withInt:row withInt:column];
          IOSObjectArray_Set(copyArray, row, JavaLangDouble_valueOfWithDouble_(d2));
        }
      }
      break;
      case GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_CURVATURE:
      for (jint row = 0; row < rowCount; row++) {
        NSString *str1 = (NSString *) check_class_cast([((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(self->listener_)) getXYValueAtWithInt:row withInt:0], [NSString class]);
        NSString *str2 = (NSString *) check_class_cast([self->listener_ getXYValueAtWithInt:row withInt:1], [NSString class]);
        if (![@"" isEqual:str1] && ![@"" isEqual:str2]) {
          jdouble x = JavaLangDouble_parseDoubleWithNSString_(str1);
          jdouble y = JavaLangDouble_parseDoubleWithNSString_(str2);
          GeogebraCommonKernelArithmeticMyVecNode *vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, x) autorelease], [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, y) autorelease]) autorelease];
          GeogebraCommonKernelArithmeticExpressionNode *point = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
          [point setForcePoint];
          GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, point, NO) autorelease];
          [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
          GeogebraCommonKernelAdvancedAlgoCurvature *curvature = [new_GeogebraCommonKernelAdvancedAlgoCurvature_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self->cons_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]), self->selectedGeo_) autorelease];
          [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:curvature];
          jdouble c = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([curvature getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
          [self->listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(c) withInt:row withInt:column];
          IOSObjectArray_Set(copyArray, row, JavaLangDouble_valueOfWithDouble_(c));
        }
      }
      break;
      case GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_COL_DIFFERENCE:
      for (jint row = 1; row < rowCount; row++) {
        NSString *prevValue = (NSString *) check_class_cast([((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(self->listener_)) getXYValueAtWithInt:row - 1 withInt:column - 1], [NSString class]);
        NSString *xValue = (NSString *) check_class_cast([self->listener_ getXYValueAtWithInt:row withInt:column - 1], [NSString class]);
        if (![((NSString *) nil_chk(prevValue)) isEmpty] && ![((NSString *) nil_chk(xValue)) isEmpty]) {
          jdouble prev = JavaLangDouble_parseDoubleWithNSString_(prevValue);
          jdouble x = JavaLangDouble_parseDoubleWithNSString_(xValue);
          [self->listener_ setXYValueAtWithJavaLangDouble:JavaLangDouble_valueOfWithDouble_(x - prev) withInt:row withInt:column];
          IOSObjectArray_Set(copyArray, row, JavaLangDouble_valueOfWithDouble_(x - prev));
        }
        else {
          [self->listener_ setXYValueAtWithJavaLangDouble:nil withInt:row withInt:column];
          IOSObjectArray_Set(copyArray, row, nil);
        }
      }
      break;
    }
    [((JavaUtilArrayList *) nil_chk(self->xyTableCopyList_)) addWithId:copyArray];
  }
}

jdouble GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_getStartX(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self) {
  GeogebraCommonAwtGPoint *mouse = [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->activeEV_)) getEuclidianController])) getMouseLoc];
  jint mouseX = mouse == nil ? [self->activeEV_ getWidth] / 2 : [((GeogebraCommonAwtGPoint *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self->activeEV_ getEuclidianController])) getMouseLoc])) getX];
  return [self->activeEV_ toRealWorldCoordXWithDouble:mouseX];
}

void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_defineDisplayGeos(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel *self) {
  [self clearGeoList];
  GeogebraCommonKernelGeosGeoFunction *f = self->selectedGeo_;
  GeogebraCommonKernelAlgosAlgoPointOnPath *pAlgo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_(self->cons_, f, ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->activeEV_)) getXmin] + [self->activeEV_ getXmax]) / 2, 0) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pAlgo];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_testPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->testPoint_)) setObjColorWithGeogebraCommonAwtGColor:[((id<GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener>) nil_chk(self->listener_)) getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->testPoint_ setPointSizeWithInt:4];
  [self->testPoint_ setLayerWithInt:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(f)) getLayer] + 1];
  [((JavaUtilArrayList *) nil_chk(self->pointTabGeoList_)) addWithId:self->testPoint_];
  GeogebraCommonKernelArithmeticExpressionNode *xcoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->testPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticMyVecNode *vec = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, xcoord, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease]) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *point = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, vec, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
  [point setForcePoint];
  GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, point, NO) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgo];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *seg1 = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self->cons_, self->testPoint_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:seg1];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_xSegment_(self, IOSObjectArray_Get(nil_chk([seg1 getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->xSegment_)) setSelectionAllowedWithBoolean:NO];
  [self->xSegment_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->xSegment_ setLineThicknessWithInt:3];
  [self->xSegment_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self->xSegment_ setEuclidianVisibleWithBoolean:YES];
  [self->xSegment_ setFixedWithBoolean:YES];
  [self->pointTabGeoList_ addWithId:self->xSegment_];
  GeogebraCommonKernelArithmeticExpressionNode *ycoord = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->testPoint_, GeogebraCommonPluginOperationEnum_get_YCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticMyVecNode *vecy = [new_GeogebraCommonKernelArithmeticMyVecNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0.0) autorelease], ycoord) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *pointy = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, vecy, GeogebraCommonPluginOperationEnum_get_NO_OPERATION(), nil) autorelease];
  [pointy setForcePoint];
  GeogebraCommonKernelAlgosAlgoDependentPoint *pointAlgoy = [new_GeogebraCommonKernelAlgosAlgoDependentPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, pointy, NO) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pointAlgoy];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *seg2 = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPolygon_(self->cons_, self->testPoint_, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pointAlgoy getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]), nil) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:seg2];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_ySegment_(self, IOSObjectArray_Get(nil_chk([seg2 getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->ySegment_)) setSelectionAllowedWithBoolean:NO];
  [self->ySegment_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->ySegment_ setLineThicknessWithInt:3];
  [self->ySegment_ setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_SHORT];
  [self->ySegment_ setEuclidianVisibleWithBoolean:YES];
  [self->ySegment_ setFixedWithBoolean:YES];
  [self->pointTabGeoList_ addWithId:self->ySegment_];
  GeogebraCommonKernelCasAlgoTangentFunctionPoint *tangent = [new_GeogebraCommonKernelCasAlgoTangentFunctionPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoFunction_(self->cons_, self->testPoint_, f) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:tangent];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_tangentLine_(self, IOSObjectArray_Get(nil_chk([tangent getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->tangentLine_)) setSelectionAllowedWithBoolean:NO];
  [self->tangentLine_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->tangentLine_ setEuclidianVisibleWithBoolean:NO];
  [self->pointTabGeoList_ addWithId:self->tangentLine_];
  GeogebraCommonKernelAdvancedAlgoOsculatingCircle *oc = [new_GeogebraCommonKernelAdvancedAlgoOsculatingCircle_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoFunction_(self->cons_, self->testPoint_, f) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:oc];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_oscCircle_(self, IOSObjectArray_Get(nil_chk([oc getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->oscCircle_)) setSelectionAllowedWithBoolean:NO];
  [self->oscCircle_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->oscCircle_ setEuclidianVisibleWithBoolean:NO];
  [self->pointTabGeoList_ addWithId:self->oscCircle_];
  GeogebraCommonKernelCasAlgoDerivative *deriv = [new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, f, YES) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:deriv];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_derivative_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([deriv getGeoElements]), 0), [GeogebraCommonKernelGeosGeoFunction class]));
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->derivative_)) setEuclidianVisibleWithBoolean:NO];
  [((JavaUtilArrayList *) nil_chk(self->hiddenGeoList_)) addWithId:self->derivative_];
  GeogebraCommonKernelCasAlgoDerivative *deriv2 = [new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(self->cons_, self->derivative_, YES) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:deriv2];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_derivative2_(self, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([deriv2 getGeoElements]), 0), [GeogebraCommonKernelGeosGeoFunction class]));
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->derivative2_)) setEuclidianVisibleWithBoolean:NO];
  [self->hiddenGeoList_ addWithId:self->derivative2_];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_pts_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->pts_ setEuclidianVisibleWithBoolean:YES];
  [self->pts_ setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonMainGeoGebraColorConstants_get_DARKGRAY_()];
  [self->pts_ setPointSizeWithInt:3];
  [self->pts_ setLayerWithInt:[f getLayer] + 1];
  [self->pts_ setSelectionAllowedWithBoolean:NO];
  for (jint i = 0; i < self->pointCount_; i++) {
    [self->pts_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease]];
  }
  [self->pointTabGeoList_ addWithId:self->pts_];
  GeogebraCommonKernelAlgosAlgoPointOnPath *pxAlgo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_(self->cons_, f, (2 * [self->activeEV_ getXmin] + [self->activeEV_ getXmax]) / 3, 0) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pxAlgo];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_lowPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pxAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->lowPoint_)) setEuclidianVisibleWithBoolean:NO];
  [self->lowPoint_ setPointSizeWithInt:4];
  [self->lowPoint_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->lowPoint_ setLayerWithInt:[f getLayer] + 1];
  [((JavaUtilArrayList *) nil_chk(self->intervalTabGeoList_)) addWithId:self->lowPoint_];
  GeogebraCommonKernelAlgosAlgoPointOnPath *pyAlgo = [new_GeogebraCommonKernelAlgosAlgoPointOnPath_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withDouble_withDouble_(self->cons_, f, ([self->activeEV_ getXmin] + 2 * [self->activeEV_ getXmax]) / 3, 0) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:pyAlgo];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_highPoint_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([pyAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoPoint class]));
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->highPoint_)) setEuclidianVisibleWithBoolean:NO];
  [self->highPoint_ setPointSizeWithInt:4];
  [self->highPoint_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->highPoint_ setLayerWithInt:[f getLayer] + 1];
  [self->intervalTabGeoList_ addWithId:self->highPoint_];
  GeogebraCommonKernelArithmeticExpressionNode *low = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->lowPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *high = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->highPoint_, GeogebraCommonPluginOperationEnum_get_XCOORD(), nil) autorelease];
  GeogebraCommonKernelArithmeticFunctionVariable *x = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *fx = [x wrap];
  GeogebraCommonKernelArithmeticExpressionNode *expr = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(fx)) applyWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_LESS_EQUAL() withGeogebraCommonKernelArithmeticExpressionValue:high])) applyWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_AND() withGeogebraCommonKernelArithmeticExpressionValue:[fx applyWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_GREATER_EQUAL() withGeogebraCommonKernelArithmeticExpressionValue:low]])) applyWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_IF() withGeogebraCommonKernelArithmeticExpressionValue:[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([f wrap])) applyWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_FUNCTION() withGeogebraCommonKernelArithmeticExpressionValue:x]];
  GeogebraCommonKernelAlgosAlgoDependentNumber *xLow = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, low, NO) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xLow];
  GeogebraCommonKernelAlgosAlgoDependentNumber *xHigh = [new_GeogebraCommonKernelAlgosAlgoDependentNumber_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticExpressionNode_withBoolean_(self->cons_, high, NO) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:xHigh];
  GeogebraCommonKernelAlgosAlgoDependentFunction *interval = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(self->cons_, [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, x) autorelease]) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:interval];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_functionInterval_(self, IOSObjectArray_Get(nil_chk([interval getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->functionInterval_)) setSelectionAllowedWithBoolean:NO];
  [self->functionInterval_ setEuclidianVisibleWithBoolean:NO];
  [self->functionInterval_ setLineThicknessWithInt:[((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->selectedGeo_)) getLineThickness] + 5];
  [self->functionInterval_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->functionInterval_ setLayerWithInt:[f getLayer] + 1];
  [self->intervalTabGeoList_ addWithId:self->functionInterval_];
  GeogebraCommonKernelCasAlgoIntegralDefinite *inte = [new_GeogebraCommonKernelCasAlgoIntegralDefinite_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self->cons_, self->selectedGeo_, (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil, NO) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:inte];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_integralGeo_(self, IOSObjectArray_Get(nil_chk([inte getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->integralGeo_)) setSelectionAllowedWithBoolean:NO];
  [self->integralGeo_ setEuclidianVisibleWithBoolean:NO];
  [self->integralGeo_ setObjColorWithGeogebraCommonAwtGColor:[self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()]];
  [self->intervalTabGeoList_ addWithId:self->integralGeo_];
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->selectedGeo_, GeogebraCommonPluginOperationEnum_get_ABS(), nil) autorelease];
  GeogebraCommonKernelAlgosAlgoDependentFunction *funAlgo = [new_GeogebraCommonKernelAlgosAlgoDependentFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_(self->cons_, (GeogebraCommonKernelArithmeticFunction *) check_class_cast([en evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], [GeogebraCommonKernelArithmeticFunction class])) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:funAlgo];
  GeogebraCommonKernelCasAlgoIntegralDefinite *area = [new_GeogebraCommonKernelCasAlgoIntegralDefinite_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_withBoolean_(self->cons_, (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(nil_chk([funAlgo getGeoElements]), 0), [GeogebraCommonKernelGeosGeoFunction class]), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue)), nil, YES) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:area];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_areaGeo_(self, IOSObjectArray_Get(nil_chk([area getGeoElements]), 0));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->areaGeo_)) setSelectionAllowedWithBoolean:NO];
  [self->areaGeo_ setEuclidianVisibleWithBoolean:NO];
  [self->intervalTabGeoList_ addWithId:self->areaGeo_];
  GeogebraCommonKernelCasAlgoLengthFunction *len = [new_GeogebraCommonKernelCasAlgoLengthFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self->cons_, self->selectedGeo_, (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xLow getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class]), (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([xHigh getGeoElements]), 0), [GeogebraCommonKernelGeosGeoNumeric class])) autorelease];
  [self->cons_ removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:len];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_set_lengthGeo_(self, IOSObjectArray_Get(nil_chk([len getGeoElements]), 0));
  [self->hiddenGeoList_ addWithId:self->lengthGeo_];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_minPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->minPoint_ setEuclidianVisibleWithBoolean:NO];
  [self->minPoint_ setPointSizeWithInt:4];
  [self->minPoint_ setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND];
  [self->minPoint_ setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonAwtGColor *) nil_chk([self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()])) darker]];
  [self->minPoint_ setLayerWithInt:[f getLayer] + 1];
  [self->minPoint_ setFixedWithBoolean:YES];
  [self->intervalTabGeoList_ addWithId:self->minPoint_];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_setAndConsume_maxPoint_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self->maxPoint_ setEuclidianVisibleWithBoolean:NO];
  [self->maxPoint_ setPointSizeWithInt:4];
  [self->maxPoint_ setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_FILLED_DIAMOND];
  [self->maxPoint_ setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonAwtGColor *) nil_chk([self->listener_ getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_get_GEO()])) darker]];
  [self->maxPoint_ setLayerWithInt:[f getLayer] + 1];
  [self->maxPoint_ setFixedWithBoolean:YES];
  [self->intervalTabGeoList_ addWithId:self->maxPoint_];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in self->intervalTabGeoList_) {
    [self->activeEV_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:GeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR];
    [geo setTooltipModeWithInt:GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF];
    [geo update];
  }
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in self->pointTabGeoList_) {
    [self->activeEV_ addWithGeogebraCommonKernelGeosGeoElement:geo];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) addViewWithInt:GeogebraCommonMainApp_VIEW_FUNCTION_INSPECTOR];
    [geo setTooltipModeWithInt:GeogebraCommonKernelGeosGeoElement_TOOLTIP_OFF];
    [geo update];
  }
  [self updateTestPoint];
  [self->activeEV_ repaint];
}

void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_processCellGeoWithGeogebraCommonKernelGeosGeoElement_withInt_withInt_(GeogebraCommonKernelGeosGeoElement *geo, jint column, jint row) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_initialize();
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelWithNSString:GeogebraCommonKernelGeosGeoElementSpreadsheet_getSpreadsheetCellNameWithInt_withInt_(column, row)];
  [geo setEuclidianVisibleWithBoolean:NO];
  [geo setAuxiliaryObjectWithBoolean:YES];
  [geo update];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel)

@implementation GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateXYTableWithBoolean:", "updateXYTable", "V", 0x401, NULL, NULL },
    { "updateIntervalWithJavaUtilArrayList:withJavaUtilArrayList:", "updateInterval", "V", 0x401, NULL, NULL },
    { "setXYValueAtWithJavaLangDouble:withInt:withInt:", "setXYValueAt", "V", 0x401, NULL, NULL },
    { "getXYValueAtWithInt:withInt:", "getXYValueAt", "Ljava.lang.Object;", 0x401, NULL, NULL },
    { "addTableColumnWithNSString:", "addTableColumn", "V", 0x401, NULL, NULL },
    { "setGeoNameWithNSString:", "setGeoName", "V", 0x401, NULL, NULL },
    { "changeTableSelection", NULL, "V", 0x401, NULL, NULL },
    { "updateHighAndLowWithBoolean:withBoolean:", "updateHighAndLow", "V", 0x401, NULL, NULL },
    { "setStepTextWithNSString:", "setStepText", "V", 0x401, NULL, NULL },
    { "setStepVisibleWithBoolean:", "setStepVisible", "V", 0x401, NULL, NULL },
    { "getColorWithGeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum:", "getColor", "Lgeogebra.common.awt.GColor;", 0x401, NULL, NULL },
    { "getSelectedXYRow", NULL, "I", 0x401, NULL, NULL },
    { "changedNumberFormat", NULL, "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener = { 2, "IFunctionInspectorListener", "geogebra.common.gui.view.functioninspector", "FunctionInspectorModel", 0x609, 13, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_IFunctionInspectorListener)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum)

GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_values_[4];

@implementation GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_values() {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_values_ count:4 type:GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_values();
}

+ (GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_valueOfWithNSString_(name);
}

GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initialize();
  for (int i = 0; i < 4; i++) {
    GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *e = GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum class]) {
    GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GEO = new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(@"GEO", 0);
    GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GEO2 = new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(@"GEO2", 1);
    GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_EVEN_ROW = new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(@"EVEN_ROW", 2);
    GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GRID = new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(@"GRID", 3);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "GEO", "GEO", 0x4019, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;", &GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GEO, NULL,  },
    { "GEO2", "GEO2", 0x4019, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;", &GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GEO2, NULL,  },
    { "EVEN_ROW", "EVEN_ROW", 0x4019, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;", &GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_EVEN_ROW, NULL,  },
    { "GRID", "GRID", 0x4019, "Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;", &GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_GRID, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.gui.view.functioninspector.FunctionInspectorModel$Colors;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum = { 2, "Colors", "geogebra.common.gui.view.functioninspector", "FunctionInspectorModel", 0x4019, 0, NULL, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/gui/view/functioninspector/FunctionInspectorModel$Colors;>;" };
  return &_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum;
}

@end

void GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *new_GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum *self = [GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum alloc];
  GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewFunctioninspectorFunctionInspectorModel_ColorsEnum)
