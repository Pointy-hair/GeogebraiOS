//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoAxis.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelGeosGeoAxis () {
 @public
  GeogebraCommonKernelGeosGeoPoint *origin_;
  jint type_;
  NSString *axisLabel_;
  jint ticksize_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoAxis, origin_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoAxis, axisLabel_, NSString *)

@implementation GeogebraCommonKernelGeosGeoAxis

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                 withInt:(jint)type {
  GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  return self;
}

- (jint)getType {
  return type_;
}

- (jboolean)isAvailableAtConstructionStepWithInt:(jint)step {
  return YES;
}

- (NSString *)getLabelWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:label_];
  }
  return label_;
}

- (jboolean)equalsLabelWithNSString:(NSString *)str {
  if (str == nil) return NO;
  return [((NSString *) nil_chk(str)) isEqual:label_] || [str isEqual:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:label_]];
}

- (NSString *)getTypeString {
  return @"Line";
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_AXIS();
}

- (NSString *)getUnitLabel {
  return @"";
}

- (jint)getTickStyle {
  return 0;
}

- (jboolean)getShowNumbers {
  return YES;
}

- (jint)getTickSize {
  return ticksize_;
}

- (jboolean)isLabelSet {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  if (type_ == GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS) return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(1, 0, 0, 0) autorelease];
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 1, 0, 0) autorelease];
}

- (jboolean)isAxis {
  return YES;
}

- (jboolean)isRenameable {
  return NO;
}

- (void)dealloc {
  RELEASE_(origin_);
  RELEASE_(axisLabel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoAxis", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "isAvailableAtConstructionStepWithInt:", "isAvailableAtConstructionStep", "Z", 0x1, NULL, NULL },
    { "getLabelWithGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "equalsLabelWithNSString:", "equalsLabel", "Z", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getUnitLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTickStyle", NULL, "I", 0x1, NULL, NULL },
    { "getShowNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "getTickSize", NULL, "I", 0x1, NULL, NULL },
    { "isLabelSet", NULL, "Z", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isAxis", NULL, "Z", 0x1, NULL, NULL },
    { "isRenameable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "origin_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "axisLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "ticksize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoAxis = { 2, "GeoAxis", "geogebra.common.kernel.geos", NULL, 0x1, 15, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoAxis;
}

@end

void GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelGeosGeoAxis *self, GeogebraCommonKernelConstruction *cons, jint type) {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->ticksize_ = 5;
  self->type_ = type;
  GeogebraCommonKernelGeosGeoAxis_setAndConsume_origin_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self->origin_ setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [self setStartPointWithGeogebraCommonKernelGeosGeoPoint:self->origin_];
  switch (type) {
    case GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS:
    [self setCoordsWithDouble:0 withDouble:1 withDouble:0];
    GeogebraCommonKernelGeosGeoElement_set_label_(self, @"xAxis");
    [self setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:255 withInt:0 withInt:0]];
    break;
    case GeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS:
    [self setCoordsWithDouble:-1 withDouble:0 withDouble:0];
    GeogebraCommonKernelGeosGeoElement_set_label_(self, @"yAxis");
    [self setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithFloat:0 withFloat:0.5f withFloat:0]];
    break;
  }
  self->labelSet_ = YES;
  [self setFixedWithBoolean:YES];
  [self setLabelVisibleWithBoolean:NO];
}

GeogebraCommonKernelGeosGeoAxis *new_GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *cons, jint type) {
  GeogebraCommonKernelGeosGeoAxis *self = [GeogebraCommonKernelGeosGeoAxis alloc];
  GeogebraCommonKernelGeosGeoAxis_initWithGeogebraCommonKernelConstruction_withInt_(self, cons, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoAxis)
