//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolatingFunction.h"
#include "org/apache/commons/math/analysis/interpolation/BicubicSplineInterpolator.h"
#include "org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolatingFunction.h"
#include "org/apache/commons/math/analysis/interpolation/TricubicSplineInterpolator.h"
#include "org/apache/commons/math/exception/DimensionMismatchException.h"
#include "org/apache/commons/math/exception/NoDataException.h"
#include "org/apache/commons/math/util/MathUtils.h"

@interface OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator ()

- (jint)nextIndexWithInt:(jint)i
                 withInt:(jint)max;

- (jint)previousIndexWithInt:(jint)i;

@end

__attribute__((unused)) static jint OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self, jint i, jint max);

__attribute__((unused)) static jint OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self, jint i);

@implementation OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator

- (OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolatingFunction *)interpolateWithDoubleArray:(IOSDoubleArray *)xval
                                                                                             withDoubleArray:(IOSDoubleArray *)yval
                                                                                             withDoubleArray:(IOSDoubleArray *)zval
                                                                                            withDoubleArray3:(IOSObjectArray *)fval {
  if (((IOSDoubleArray *) nil_chk(xval))->size_ == 0 || ((IOSDoubleArray *) nil_chk(yval))->size_ == 0 || ((IOSDoubleArray *) nil_chk(zval))->size_ == 0 || ((IOSObjectArray *) nil_chk(fval))->size_ == 0) {
    @throw [new_OrgApacheCommonsMathExceptionNoDataException_init() autorelease];
  }
  if (xval->size_ != ((IOSObjectArray *) nil_chk(fval))->size_) {
    @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(xval->size_, fval->size_) autorelease];
  }
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(xval);
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(yval);
  OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(zval);
  jint xLen = xval->size_;
  jint yLen = ((IOSDoubleArray *) nil_chk(yval))->size_;
  jint zLen = ((IOSDoubleArray *) nil_chk(zval))->size_;
  IOSObjectArray *fvalXY = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ zLen, xLen, yLen }];
  IOSObjectArray *fvalZX = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ yLen, zLen, xLen }];
  for (jint i = 0; i < xLen; i++) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(fval, i)))->size_ != yLen) {
      @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(fval, i)))->size_, yLen) autorelease];
    }
    for (jint j = 0; j < yLen; j++) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, i)), j)))->size_ != zLen) {
        @throw [new_OrgApacheCommonsMathExceptionDimensionMismatchException_initWithInt_withInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, i)), j)))->size_, zLen) autorelease];
      }
      for (jint k = 0; k < zLen; k++) {
        jdouble v = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, i)), j)), k);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fvalXY, k)), i)), j) = v;
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fvalZX, j)), k)), i) = v;
      }
    }
  }
  OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolator *bsi = [new_OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolator_init() autorelease];
  IOSObjectArray *xSplineYZ = [IOSObjectArray arrayWithLength:xLen type:OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction_class_()];
  for (jint i = 0; i < xLen; i++) {
    IOSObjectArray_Set(xSplineYZ, i, [bsi interpolateWithDoubleArray:yval withDoubleArray:zval withDoubleArray2:IOSObjectArray_Get(fval, i)]);
  }
  IOSObjectArray *ySplineZX = [IOSObjectArray arrayWithLength:yLen type:OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction_class_()];
  for (jint j = 0; j < yLen; j++) {
    IOSObjectArray_Set(ySplineZX, j, [bsi interpolateWithDoubleArray:zval withDoubleArray:xval withDoubleArray2:IOSObjectArray_Get(fvalZX, j)]);
  }
  IOSObjectArray *zSplineXY = [IOSObjectArray arrayWithLength:zLen type:OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction_class_()];
  for (jint k = 0; k < zLen; k++) {
    IOSObjectArray_Set(zSplineXY, k, [bsi interpolateWithDoubleArray:xval withDoubleArray:yval withDoubleArray2:IOSObjectArray_Get(fvalXY, k)]);
  }
  IOSObjectArray *dFdX = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  IOSObjectArray *dFdY = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  IOSObjectArray *d2FdXdY = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  for (jint k = 0; k < zLen; k++) {
    OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *f = IOSObjectArray_Get(zSplineXY, k);
    for (jint i = 0; i < xLen; i++) {
      jdouble x = IOSDoubleArray_Get(xval, i);
      for (jint j = 0; j < yLen; j++) {
        jdouble y = IOSDoubleArray_Get(yval, j);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(dFdX, i)), j)), k) = [((OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *) nil_chk(f)) partialDerivativeXWithDouble:x withDouble:y];
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(dFdY, i)), j)), k) = [f partialDerivativeYWithDouble:x withDouble:y];
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(d2FdXdY, i)), j)), k) = [f partialDerivativeXYWithDouble:x withDouble:y];
      }
    }
  }
  IOSObjectArray *dFdZ = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  IOSObjectArray *d2FdYdZ = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  for (jint i = 0; i < xLen; i++) {
    OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *f = IOSObjectArray_Get(xSplineYZ, i);
    for (jint j = 0; j < yLen; j++) {
      jdouble y = IOSDoubleArray_Get(yval, j);
      for (jint k = 0; k < zLen; k++) {
        jdouble z = IOSDoubleArray_Get(zval, k);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(dFdZ, i)), j)), k) = [((OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *) nil_chk(f)) partialDerivativeYWithDouble:y withDouble:z];
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(d2FdYdZ, i)), j)), k) = [f partialDerivativeXYWithDouble:y withDouble:z];
      }
    }
  }
  IOSObjectArray *d2FdZdX = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  for (jint j = 0; j < yLen; j++) {
    OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *f = IOSObjectArray_Get(ySplineZX, j);
    for (jint k = 0; k < zLen; k++) {
      jdouble z = IOSDoubleArray_Get(zval, k);
      for (jint i = 0; i < xLen; i++) {
        jdouble x = IOSDoubleArray_Get(xval, i);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(d2FdZdX, i)), j)), k) = [((OrgApacheCommonsMathAnalysisInterpolationBicubicSplineInterpolatingFunction *) nil_chk(f)) partialDerivativeXYWithDouble:z withDouble:x];
      }
    }
  }
  IOSObjectArray *d3FdXdYdZ = [IOSDoubleArray arrayWithDimensions:3 lengths:(jint[]){ xLen, yLen, zLen }];
  for (jint i = 0; i < xLen; i++) {
    jint nI = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(self, i, xLen);
    jint pI = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(self, i);
    for (jint j = 0; j < yLen; j++) {
      jint nJ = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(self, j, yLen);
      jint pJ = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(self, j);
      for (jint k = 0; k < zLen; k++) {
        jint nK = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(self, k, zLen);
        jint pK = OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(self, k);
        *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(d3FdXdYdZ, i)), j)), k) = (IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, nI)), nJ)), nK) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, nI)), pJ)), nK) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, pI)), nJ)), nK) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, pI)), pJ)), nK) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, nI)), nJ)), pK) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, nI)), pJ)), pK) + IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, pI)), nJ)), pK) - IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(fval, pI)), pJ)), pK)) / ((IOSDoubleArray_Get(xval, nI) - IOSDoubleArray_Get(xval, pI)) * (IOSDoubleArray_Get(yval, nJ) - IOSDoubleArray_Get(yval, pJ)) * (IOSDoubleArray_Get(zval, nK) - IOSDoubleArray_Get(zval, pK)));
      }
    }
  }
  return [new_OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolatingFunction_initWithDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray3_withDoubleArray3_withDoubleArray3_withDoubleArray3_withDoubleArray3_withDoubleArray3_withDoubleArray3_withDoubleArray3_(xval, yval, zval, fval, dFdX, dFdY, dFdZ, d2FdXdY, d2FdZdX, d2FdYdZ, d3FdXdYdZ) autorelease];
}

- (jint)nextIndexWithInt:(jint)i
                 withInt:(jint)max {
  return OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(self, i, max);
}

- (jint)previousIndexWithInt:(jint)i {
  return OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(self, i);
}

- (instancetype)init {
  OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "interpolateWithDoubleArray:withDoubleArray:withDoubleArray:withDoubleArray3:", "interpolate", "Lorg.apache.commons.math.analysis.interpolation.TricubicSplineInterpolatingFunction;", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "nextIndexWithInt:withInt:", "nextIndex", "I", 0x2, NULL, NULL },
    { "previousIndexWithInt:", "previousIndex", "I", 0x2, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator = { 2, "TricubicSplineInterpolator", "org.apache.commons.math.analysis.interpolation", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator;
}

@end

jint OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_nextIndexWithInt_withInt_(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self, jint i, jint max) {
  jint index = i + 1;
  return index < max ? index : index - 1;
}

jint OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_previousIndexWithInt_(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self, jint i) {
  jint index = i - 1;
  return index >= 0 ? index : 0;
}

void OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_init(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self) {
  NSObject_init(self);
}

OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *new_OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_init() {
  OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator *self = [OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator alloc];
  OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathAnalysisInterpolationTricubicSplineInterpolator)
