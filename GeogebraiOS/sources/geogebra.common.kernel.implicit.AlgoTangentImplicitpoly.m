//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/AlgoTangentImplicitpoly.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/AlgoImplicitPolyTangentCurve.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolys.h"
#include "geogebra/common/kernel/implicit/AlgoTangentImplicitpoly.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelImplicitAlgoTangentImplicitpoly () {
 @public
  GeogebraCommonKernelImplicitGeoImplicitPoly *p_;
  id<GeogebraCommonKernelKernelNDGeoPointND> R_;
  id<GeogebraCommonKernelKernelNDGeoLineND> g_;
  IOSObjectArray *ip_;
  GeogebraCommonKernelAlgosAlgoElement_OutputHandler *tangents_;
  jboolean pointOnPath_;
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *algoIntersect_;
  IOSObjectArray *labels_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, p_, GeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, R_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, g_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, ip_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, tangents_, GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, algoIntersect_, GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly, labels_, IOSObjectArray *)

@interface GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *this$0_;
}

- (GeogebraCommonKernelGeosGeoLine *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly:(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1, this$0_, GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *)

__attribute__((unused)) static void GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 *self, GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *outer$);

__attribute__((unused)) static GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 *new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1)

@implementation GeogebraCommonKernelImplicitAlgoTangentImplicitpoly

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_(self, c, labels, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)R {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, p, R);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 1, p_);
  if (g_ != nil) IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]));
  else IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(R_, [GeogebraCommonKernelGeosGeoElement class]));
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_setAndConsume_tangents_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(self) autorelease]));
  [tangents_ setLabelsWithNSStringArray:labels_];
  [self setDependencies];
}

- (void)compute {
  if (R_ == nil) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) adjustOutputSizeWithInt:0];
    return;
  }
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(R_)) isDefined]) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) adjustOutputSizeWithInt:0];
    return;
  }
  if ([R_ isGeoElement3D] && !GeogebraCommonKernelKernel_isZeroWithDouble_([R_ getInhomZ])) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) adjustOutputSizeWithInt:0];
    return;
  }
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) adjustOutputSizeWithInt:0];
  jint n = 0;
  if ([((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(p_)) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:R_]) {
    [tangents_ adjustOutputSizeWithInt:n + 1];
    jdouble dfdx = [self->p_ evalDiffXPolyAtWithDouble:[R_ getInhomX] withDouble:[R_ getInhomY]];
    jdouble dfdy = [self->p_ evalDiffYPolyAtWithDouble:[R_ getInhomX] withDouble:[R_ getInhomY]];
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(dfdx, 0, 1E-5) || !GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(dfdy, 0, 1E-5)) {
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk([tangents_ getElementWithInt:n])) setCoordsWithDouble:dfdx withDouble:dfdy withDouble:-dfdx * [R_ getInhomX] - dfdy * [R_ getInhomY]];
      n++;
    }
  }
  if (pointOnPath_) {
    return;
  }
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_set_ip_(self, [((GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys *) nil_chk(algoIntersect_)) getIntersectionPoints]);
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(ip_))->size_; i++) {
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomX_, [R_ getInhomX], 1E-2) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomY_, [R_ getInhomY], 1E-2)) continue;
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(0, [self->p_ evalDiffXPolyAtWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomX_ withDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomY_], GeogebraCommonKernelKernel_STANDARD_PRECISION_SQRT) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(0, [self->p_ evalDiffXPolyAtWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomX_ withDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i)))->inhomY_], GeogebraCommonKernelKernel_STANDARD_PRECISION_SQRT)) continue;
    [tangents_ adjustOutputSizeWithInt:n + 1];
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk([tangents_ getElementWithInt:n])) setCoordsWithDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i))) getY] - [self->R_ getInhomY] withDouble:[self->R_ getInhomX] - [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i))) getX] withDouble:[((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i))) getX] * [self->R_ getInhomY] - [self->R_ getInhomX] * [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i))) getY]];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(ip_, i))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:[tangents_ getElementWithInt:n] withBoolean:NO];
    n++;
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (IOSObjectArray *)getTangents {
  return [tangents_ getOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithLength:[((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) size] type:GeogebraCommonKernelGeosGeoLine_class_()]];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(tangents_)) setLabelsWithNSStringArray:labels];
  [self update];
}

- (IOSObjectArray *)getTangentPoints {
  return ip_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (geo == p_ && line == g_ && R_ != nil && pointOnPath_) {
    return R_;
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(p_);
  RELEASE_(R_);
  RELEASE_(g_);
  RELEASE_(ip_);
  RELEASE_(tangents_);
  RELEASE_(algoIntersect_);
  RELEASE_(labels_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:", "AlgoTangentImplicitpoly", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoTangentImplicitpoly", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getTangents", NULL, "[Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x1, NULL, NULL },
    { "getTangentPoints", NULL, "[Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "p_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "R_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "ip_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "tangents_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoLine;>;",  },
    { "pointOnPath_", NULL, 0x2, "Z", NULL, NULL,  },
    { "algoIntersect_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.AlgoIntersectImplicitpolys;", NULL, NULL,  },
    { "labels_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoTangentImplicitpoly = { 2, "AlgoTangentImplicitpoly", "geogebra.common.kernel.implicit", NULL, 0x1, 10, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly;
}

@end

void GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelImplicitGeoImplicitPoly *p) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_set_labels_(self, labels);
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_set_p_(self, p);
}

GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelImplicitGeoImplicitPoly *p) {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *self = [GeogebraCommonKernelImplicitAlgoTangentImplicitpoly alloc];
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_(self, c, labels, p);
  return self;
}

void GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, id<GeogebraCommonKernelKernelNDGeoPointND> R) {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_(self, c, labels, p);
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_set_R_(self, R);
  self->pointOnPath_ = NO;
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(R)) getParentAlgorithm] != nil) {
    if ([[R getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]]) {
      GeogebraCommonKernelAlgosAlgoPointOnPath *a = (GeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast([R getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPointOnPath class]);
      if ([((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(a)) getPath] == p) {
        self->pointOnPath_ = YES;
      }
    }
  }
  if (!self->pointOnPath_) {
    GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve *algoTangentPoly = [new_GeogebraCommonKernelImplicitAlgoImplicitPolyTangentCurve_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_withNSString_withBoolean_withBoolean_(c, p, R, nil, NO, NO) autorelease];
    GeogebraCommonKernelImplicitGeoImplicitPoly *tangentCurve = [algoTangentPoly getTangentCurve];
    GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_setAndConsume_algoIntersect_(self, new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolys_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelImplicitGeoImplicitPoly_(self->cons_, p, tangentCurve));
    [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->algoIntersect_];
    GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_set_ip_(self, [self->algoIntersect_ getIntersectionPoints]);
  }
  [self setInputOutput];
}

GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, id<GeogebraCommonKernelKernelNDGeoPointND> R) {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *self = [GeogebraCommonKernelImplicitAlgoTangentImplicitpoly alloc];
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelKernelNDGeoPointND_(self, c, labels, p, R);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly)

@implementation GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1

- (GeogebraCommonKernelGeosGeoLine *)newElement {
  GeogebraCommonKernelGeosGeoLine *g1 = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_([this$0_ getConstruction]) autorelease];
  [g1 setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return g1;
}

- (instancetype)initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly:(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *)outer$ {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.implicit.AlgoTangentImplicitpoly;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelImplicitAlgoTangentImplicitpoly", "setInputOutput" };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 = { 2, "", "geogebra.common.kernel.implicit", "AlgoTangentImplicitpoly", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoLine;>;" };
  return &_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1;
}

@end

void GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 *self, GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *outer$) {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 *new_GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *outer$) {
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 *self = [GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1 alloc];
  GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1_initWithGeogebraCommonKernelImplicitAlgoTangentImplicitpoly_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoTangentImplicitpoly_$1)
