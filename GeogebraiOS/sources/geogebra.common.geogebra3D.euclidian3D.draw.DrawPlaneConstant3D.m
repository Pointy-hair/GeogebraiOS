//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/DrawPlaneConstant3D.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPlane3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPlaneConstant3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D () {
 @public
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis_, *yAxis_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D, xAxis_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D, yAxis_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)a_view3D
                        withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)a_plane3D
                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)xAxis
                     withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)yAxis {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(self, a_view3D, a_plane3D, xAxis, yAxis);
  return self;
}

- (jboolean)updateForItSelf {
  IOSDoubleArray *xMinMax = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(xAxis_)) getDrawMinMax];
  IOSDoubleArray *yMinMax = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(yAxis_)) getDrawMinMax];
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *geo = (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(geo)) setGridCornersWithDouble:IOSDoubleArray_Get(nil_chk(xMinMax), 0) withDouble:IOSDoubleArray_Get(nil_chk(yMinMax), 0) withDouble:IOSDoubleArray_Get(xMinMax, 1) withDouble:IOSDoubleArray_Get(yMinMax, 1)];
  [geo setGridDistancesWithDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getGridDistancesWithInt:0] withDouble:[((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk([self getView3D])) getGridDistancesWithInt:1]];
  [super updateGeometry];
  return YES;
}

- (void)updateForView {
}

- (void)setMinMax {
}

- (jboolean)isGridVisible {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast([self getGeoElement], [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])))) isGridVisible];
}

- (void)dealloc {
  RELEASE_(xAxis_);
  RELEASE_(yAxis_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D:", "DrawPlaneConstant3D", NULL, 0x1, NULL, NULL },
    { "updateForItSelf", NULL, "Z", 0x4, NULL, NULL },
    { "updateForView", NULL, "V", 0x4, NULL, NULL },
    { "setMinMax", NULL, "V", 0x4, NULL, NULL },
    { "isGridVisible", NULL, "Z", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "xAxis_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", NULL, NULL,  },
    { "yAxis_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D = { 2, "DrawPlaneConstant3D", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *a_plane3D, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *yAxis) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, a_view3D, a_plane3D);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_set_xAxis_(self, xAxis);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_set_yAxis_(self, yAxis);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *a_view3D, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *a_plane3D, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *xAxis, GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *yAxis) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(self, a_view3D, a_plane3D, xAxis, yAxis);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D)
