//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMirror.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMirror.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/ConicMirrorable.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/geos/Mirrorable.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/util/MyMath.h"

@interface GeogebraCommonKernelAlgosAlgoMirror () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> mirrorLine_;
  GeogebraCommonKernelGeosGeoConic *mirrorConic_;
  GeogebraCommonKernelGeosGeoPoint *transformedPoint_AlgoMirror_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMirror, mirrorLine_, id<GeogebraCommonKernelKernelNDGeoLineND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMirror, mirrorConic_, GeogebraCommonKernelGeosGeoConic *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMirror, transformedPoint_AlgoMirror_, GeogebraCommonKernelGeosGeoPoint *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMirror_compute(GeogebraCommonKernelAlgosAlgoMirror *self);

@implementation GeogebraCommonKernelAlgosAlgoMirror

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, inArg, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, inArg, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, inArg, g);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (void)endOfConstructionWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)inArg
                       withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)mirror {
  GeogebraCommonKernelAlgosAlgoMirror_set_mirror_(self, mirror);
  GeogebraCommonKernelAlgosAlgoMirror_set_inGeo_(self, inArg);
  GeogebraCommonKernelAlgosAlgoMirror_set_outGeo_(self, [self getResultTemplateWithGeogebraCommonKernelGeosGeoElement:inGeo_]);
  if ([GeogebraCommonKernelGeosMirrorable_class_() isInstance:outGeo_]) GeogebraCommonKernelAlgosAlgoMirror_set_out_(self, (id<GeogebraCommonKernelGeosMirrorable>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelGeosMirrorable)));
  [self setInputOutput];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
  GeogebraCommonKernelAlgosAlgoMirror_setAndConsume_transformedPoint_AlgoMirror_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAlgosAlgoMirror_compute(self);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) isGeoFunction]) [cons registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Mirror();
}

- (jint)getRelatedModeID {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) isGeoLine]) {
    return GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_LINE;
  }
  else if ([mirror_ isGeoPoint]) {
    return GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_POINT;
  }
  else {
    return GeogebraCommonEuclidianEuclidianConstants_MODE_MIRROR_AT_CIRCLE;
  }
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inGeo_);
  IOSObjectArray_Set(input_, 1, mirror_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outGeo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return outGeo_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoMirror_compute(self);
}

- (void)computeRegardingMirror {
  if (mirror_ == mirrorLine_) {
    if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(mirrorLine_)) getStartPoint] == nil) {
      [mirrorLine_ setStandardStartPoint];
    }
    [((id<GeogebraCommonKernelGeosMirrorable>) nil_chk(out_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:mirrorLine_];
  }
  else if (mirror_ == mirrorPoint_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) isGeoFunction]) {
      [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(outGeo_, [GeogebraCommonKernelGeosGeoFunction class])) mirrorWithGeogebraCommonKernelMatrixCoords:[self getMirrorCoords]];
    }
    else {
      [((id<GeogebraCommonKernelGeosMirrorable>) nil_chk(out_)) mirrorWithGeogebraCommonKernelMatrixCoords:[self getMirrorCoords]];
    }
  }
  else [((id<GeogebraCommonKernelGeosConicMirrorable>) nil_chk(((id<GeogebraCommonKernelGeosConicMirrorable>) check_protocol_cast(out_, @protocol(GeogebraCommonKernelGeosConicMirrorable))))) mirrorWithGeogebraCommonKernelGeosGeoConic:mirrorConic_];
}

- (void)setOutGeo {
  if ([mirror_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(inGeo_, [GeogebraCommonKernelGeosGeoLine class])))) toGeoConicWithGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *) check_class_cast(outGeo_, [GeogebraCommonKernelGeosGeoConic class])];
  }
  else if ([mirror_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [outGeo_ isKindOfClass:[GeogebraCommonKernelImplicitGeoImplicitPoly class]]) {
    [((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(inGeo_, [GeogebraCommonKernelGeosGeoConic class])))) toGeoImplicitPolyWithGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *) check_class_cast(outGeo_, [GeogebraCommonKernelImplicitGeoImplicitPoly class])];
  }
  else if ([inGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && mirror_ != mirrorPoint_) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(inGeo_, [GeogebraCommonKernelGeosGeoFunction class])))) toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(outGeo_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:inGeo_] && mirror_ == mirrorConic_) {
    [((id<GeogebraCommonKernelGeosGeoPoly>) nil_chk(((id<GeogebraCommonKernelGeosGeoPoly>) check_protocol_cast(inGeo_, @protocol(GeogebraCommonKernelGeosGeoPoly))))) toGeoCurveCartesianWithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast(outGeo_, [GeogebraCommonKernelGeosGeoCurveCartesian class])];
  }
  else [((GeogebraCommonKernelGeosGeoElement *) nil_chk(outGeo_)) setWithGeogebraCommonKernelGeosGeoElement:inGeo_];
}

- (GeogebraCommonKernelMatrixCoords *)getMirrorCoords {
  return [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(mirrorPoint_)) getInhomCoords];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AMirroredAtB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(inGeo_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(mirror_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)g2 {
  GeogebraCommonKernelAlgosAlgoMirror_set_inGeo_(self, g);
  GeogebraCommonKernelAlgosAlgoMirror_set_outGeo_(self, g2);
  if (!([outGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoList class]])) GeogebraCommonKernelAlgosAlgoMirror_set_out_(self, (id<GeogebraCommonKernelGeosMirrorable>) check_protocol_cast(outGeo_, @protocol(GeogebraCommonKernelGeosMirrorable)));
}

- (GeogebraCommonKernelGeosGeoElement *)getResultTemplateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo]) && mirror_ == mirrorConic_) return [new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  if (([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) && mirror_ != mirrorPoint_) return [new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isLimitedPath] && mirror_ == mirrorConic_) return [new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(cons_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_ARC) autorelease];
  if ([mirror_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [geo isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
    return [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  }
  if ([mirror_ isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && [geo isKindOfClass:[GeogebraCommonKernelGeosGeoConic class]] && (![((GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoConic class])) isCircle] || ![((GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoConic class])) keepsType])) return [new_GeogebraCommonKernelImplicitGeoImplicitPoly_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  if ([GeogebraCommonKernelGeosGeoPoly_class_() isInstance:geo] || ([geo isLimitedPath] && mirror_ != mirrorConic_)) return [self copyInternalWithGeogebraCommonKernelConstruction:cons_ withGeogebraCommonKernelGeosGeoElement:geo];
  if ([geo isGeoList]) return [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  return [self copy__WithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                            withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b {
  if (mirror_ != mirrorConic_) {
    [super transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
    return;
  }
  GeogebraCommonKernelGeosGeoConicPart *arc = (GeogebraCommonKernelGeosGeoConicPart *) check_class_cast(b, [GeogebraCommonKernelGeosGeoConicPart class]);
  [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(arc)) setParametersWithDouble:0 withDouble:6.28 withBoolean:YES];
  if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoRay class]]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(transformedPoint_AlgoMirror_)) removePath];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoRay *) nil_chk(((GeogebraCommonKernelGeosGeoRay *) check_class_cast(a, [GeogebraCommonKernelGeosGeoRay class])))) getStartPoint] withGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    GeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [arc pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble d = [((GeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [transformedPoint_AlgoMirror_ removePath];
    [transformedPoint_AlgoMirror_ setCoordsWithGeogebraCommonKernelGeosGeoVec2D:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector]];
    [arc pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble e = [((GeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:d * GeogebraCommonKernelKernel_PI_2 withDouble:e * GeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:[arc getPointParamWithDouble:0.5] withGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    GeogebraCommonKernelAlgosAlgoMirror_compute(self);
    if (![((GeogebraCommonKernelGeosGeoRay *) nil_chk(((GeogebraCommonKernelGeosGeoRay *) check_class_cast(a, [GeogebraCommonKernelGeosGeoRay class])))) isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_ withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) [arc setParametersWithDouble:d * GeogebraCommonKernelKernel_PI_2 withDouble:e * GeogebraCommonKernelKernel_PI_2 withBoolean:NO];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  }
  else if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) {
    [arc setParametersWithDouble:0 withDouble:GeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(transformedPoint_AlgoMirror_)) removePath];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(a, [GeogebraCommonKernelGeosGeoSegment class])))) getStartPoint] withGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    GeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [transformedPoint_AlgoMirror_ removePath];
    [arc pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble d = [((GeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:0 withDouble:GeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(a, [GeogebraCommonKernelGeosGeoSegment class])))) getEndPoint] withGeogebraCommonKernelGeosGeoElement:transformedPoint_AlgoMirror_];
    GeogebraCommonKernelAlgosAlgoMirror_compute(self);
    [arc pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_];
    jdouble e = [((GeogebraCommonKernelPathParameter *) nil_chk([transformedPoint_AlgoMirror_ getPathParameter])) getT];
    [arc setParametersWithDouble:d * GeogebraCommonKernelKernel_PI_2 withDouble:e * GeogebraCommonKernelKernel_PI_2 withBoolean:YES];
    [transformedPoint_AlgoMirror_ removePath];
    [transformedPoint_AlgoMirror_ setCoordsWithGeogebraCommonKernelGeosGeoVec2D:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector]];
    if ([arc isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:transformedPoint_AlgoMirror_ withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) [arc setParametersWithDouble:d * GeogebraCommonKernelKernel_PI_2 withDouble:e * GeogebraCommonKernelKernel_PI_2 withBoolean:NO];
    [self setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  }
  if ([a isKindOfClass:[GeogebraCommonKernelGeosGeoConicPart class]]) {
    [self transformLimitedConicWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b];
  }
}

- (jboolean)swapOrientationWithGeogebraCommonKernelGeosGeoConicPart:(GeogebraCommonKernelGeosGeoConicPart *)arc {
  if (arc == nil) {
    return YES;
  }
  else if (mirror_ != mirrorConic_) {
    return [arc positiveOrientation];
  }
  GeogebraCommonKernelGeosGeoVec2D *arcCentre = [((GeogebraCommonKernelGeosGeoConicPart *) nil_chk(arc)) getTranslationVector];
  GeogebraCommonKernelGeosGeoVec2D *mirrorCentre = [((GeogebraCommonKernelGeosGeoConic *) nil_chk(mirrorConic_)) getTranslationVector];
  jdouble dist = GeogebraCommonUtilMyMath_lengthWithDouble_withDouble_([((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(arcCentre)) getX] - [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(mirrorCentre)) getX], [arcCentre getY] - [mirrorCentre getY]);
  return !GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(dist, IOSDoubleArray_Get(nil_chk(arc->halfAxes_), 0));
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnMirrorWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (jdouble)getAreaScaleFactor {
  return -1;
}

- (void)dealloc {
  RELEASE_(out_);
  RELEASE_(inGeo_);
  RELEASE_(outGeo_);
  RELEASE_(mirrorLine_);
  RELEASE_(mirrorPoint_);
  RELEASE_(mirrorConic_);
  RELEASE_(mirror_);
  RELEASE_(transformedPoint_AlgoMirror_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMirror", NULL, 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoConic:", "AlgoMirror", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoConic:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoMirror", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoLineND:", "AlgoMirror", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoMirror", NULL, 0x4, NULL, NULL },
    { "endOfConstructionWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "endOfConstruction", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "computeRegardingMirror", NULL, "V", 0x4, NULL, NULL },
    { "setOutGeo", NULL, "V", 0x4, NULL, NULL },
    { "getMirrorCoords", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setTransformedObjectWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setTransformedObject", "V", 0x4, NULL, NULL },
    { "getResultTemplateWithGeogebraCommonKernelGeosGeoElement:", "getResultTemplate", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "transformLimitedPath", "V", 0x4, NULL, NULL },
    { "swapOrientationWithGeogebraCommonKernelGeosGeoConicPart:", "swapOrientation", "Z", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "getAreaScaleFactor", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "out_", NULL, 0x4, "Lgeogebra.common.kernel.geos.Mirrorable;", NULL, NULL,  },
    { "inGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "outGeo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "mirrorLine_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "mirrorPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "mirrorConic_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoConic;", NULL, NULL,  },
    { "mirror_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "transformedPoint_AlgoMirror_", "transformedPoint", 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMirror = { 2, "AlgoMirror", "geogebra.common.kernel.algos", NULL, 0x1, 24, methods, 8, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMirror;
}

@end

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoPointND> p) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoPointND> p) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, inArg, p);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoPointND> p) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMirror_set_mirrorPoint_(self, p);
  [self endOfConstructionWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:inArg withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoPointND> p) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, inArg, p);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, inArg, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMirror_set_mirrorConic_(self, c);
  [self endOfConstructionWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:inArg withGeogebraCommonKernelGeosGeoElement:c];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoConic_(self, cons, inArg, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, label, inArg, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMirror_set_mirrorLine_(self, g);
  [self endOfConstructionWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelGeosGeoElement:inArg withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(g, [GeogebraCommonKernelGeosGeoElement class])];
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *inArg, id<GeogebraCommonKernelKernelNDGeoLineND> g) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoLineND_(self, cons, inArg, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoMirror *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoTransformation_initWithGeogebraCommonKernelConstruction_(self, cons);
}

GeogebraCommonKernelAlgosAlgoMirror *new_GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelAlgosAlgoMirror *self = [GeogebraCommonKernelAlgosAlgoMirror alloc];
  GeogebraCommonKernelAlgosAlgoMirror_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMirror_compute(GeogebraCommonKernelAlgosAlgoMirror *self) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->mirror_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) setUndefined];
    return;
  }
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->inGeo_)) isGeoList]) {
    [self transformListWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->inGeo_, [GeogebraCommonKernelGeosGeoList class]) withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *) check_class_cast(self->outGeo_, [GeogebraCommonKernelGeosGeoList class])];
    return;
  }
  [self setOutGeo];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->outGeo_)) isDefined]) {
    return;
  }
  if ([self->inGeo_ isRegion] && self->mirror_ == self->mirrorConic_) {
    GeogebraCommonKernelGeosGeoVec2D *v = [((GeogebraCommonKernelGeosGeoConic *) nil_chk(self->mirrorConic_)) getTranslationVector];
    [self->outGeo_ setInverseFillWithBoolean:[((id<GeogebraCommonKernelRegion>) check_protocol_cast(self->inGeo_, @protocol(GeogebraCommonKernelRegion))) isInRegionWithDouble:[((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(v)) getX] withDouble:[v getY]] ^ [self->inGeo_ isInverseFill]];
  }
  [self computeRegardingMirror];
  if ([self->inGeo_ isLimitedPath]) [self transformLimitedPathWithGeogebraCommonKernelGeosGeoElement:self->inGeo_ withGeogebraCommonKernelGeosGeoElement:self->outGeo_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMirror)
