//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdZoomOut.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/scripting/CmdZoomOut.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdZoomOut

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdZoomOut_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  {
    jboolean ok0;
    switch (n) {
      case 1:
      GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoNumeric]) {
        GeogebraCommonKernelGeosGeoNumeric *numGeo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoNumeric class]);
        id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
        jdouble px = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim>) nil_chk(ev)) getWidth] / 2.0;
        jdouble py = [ev getHeight] / 2.0;
        jdouble factor = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(numGeo)) getDouble];
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(factor)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
        [ev zoomWithDouble:px withDouble:py withDouble:1 / factor withInt:4 withBoolean:YES];
        [app_ setUnsaved];
        return;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
      case 2:
      GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
      if ((ok0 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoNumeric]) && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 1))) isGeoPoint]) {
        GeogebraCommonKernelGeosGeoNumeric *numGeo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoNumeric class]);
        GeogebraCommonKernelGeosGeoPoint *p = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(arg_, 1), [GeogebraCommonKernelGeosGeoPoint class]);
        id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView];
        jdouble px = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(ev)) toScreenCoordXdWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_];
        jdouble py = [ev toScreenCoordYdWithDouble:p->inhomY_];
        jdouble factor = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(numGeo)) getDouble];
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(factor)) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
        [ev zoomWithDouble:px withDouble:py withDouble:1 / factor withInt:4 withBoolean:YES];
        [app_ setUnsaved];
        return;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:ok0 ? IOSObjectArray_Get(arg_, 1) : IOSObjectArray_Get(arg_, 0)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdZoomOut", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdZoomOut = { 2, "CmdZoomOut", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdZoomOut;
}

@end

void GeogebraCommonKernelScriptingCmdZoomOut_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdZoomOut *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdZoomOut *new_GeogebraCommonKernelScriptingCmdZoomOut_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdZoomOut *self = [GeogebraCommonKernelScriptingCmdZoomOut alloc];
  GeogebraCommonKernelScriptingCmdZoomOut_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdZoomOut)
