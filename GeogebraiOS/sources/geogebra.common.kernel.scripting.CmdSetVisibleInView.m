//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetVisibleInView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/scripting/CmdSetVisibleInView.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdSetVisibleInView

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetVisibleInView_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  switch (n) {
    case 3:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 1)])) @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 2))) isGeoBoolean]) {
      GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(arg_, 0);
      jint viewNo = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
      id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = nil;
      switch (viewNo) {
        case 1:
        ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1];
        break;
        case 2:
        if (![((GeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView2WithInt:1]) break;
        ev = [app_ getEuclidianView2WithInt:1];
        break;
        case -1:
        if (![((GeogebraCommonMainApp *) nil_chk(app_)) hasEuclidianView3D]) break;
        ev = [app_ getEuclidianView3D];
        break;
        default:
        ;
      }
      if (ev != nil) {
        jboolean show = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(IOSObjectArray_Get(arg_, 2), [GeogebraCommonKernelGeosGeoBoolean class])))) getBoolean];
        if (show) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:YES];
          [geo addViewWithInt:[ev getViewID]];
          [ev addWithGeogebraCommonKernelGeosGeoElement:geo];
        }
        else {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeViewWithInt:[ev getViewID]];
          [ev removeWithGeogebraCommonKernelGeosGeoElement:geo];
        }
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
      }
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 2)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetVisibleInView", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetVisibleInView = { 2, "CmdSetVisibleInView", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetVisibleInView;
}

@end

void GeogebraCommonKernelScriptingCmdSetVisibleInView_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetVisibleInView *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetVisibleInView *new_GeogebraCommonKernelScriptingCmdSetVisibleInView_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetVisibleInView *self = [GeogebraCommonKernelScriptingCmdSetVisibleInView alloc];
  GeogebraCommonKernelScriptingCmdSetVisibleInView_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetVisibleInView)
