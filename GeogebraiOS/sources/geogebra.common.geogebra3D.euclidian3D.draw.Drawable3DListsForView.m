//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawList3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/geos/GeoElement.h"

@interface GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView () {
 @public
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *listForPicking_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView, view3D_, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView, listForPicking_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *)

@implementation GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  return self;
}

- (void)addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  [super addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:drawable];
  if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(drawable)) getGeoElement] != nil && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([drawable getGeoElement])) isPickable]) {
    [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) addOneGeoToPick];
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) addWithId:drawable];
  }
}

- (void)removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)drawable {
  [super removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:drawable];
  if (drawable != nil) {
    if ([drawable getGeoElement] != nil && [((GeogebraCommonKernelGeosGeoElement *) nil_chk([drawable getGeoElement])) isPickable]) {
      if ([drawable isKindOfClass:[GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class]]) {
        [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D *) check_class_cast(drawable, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D class])) removeAllGeosToPick];
      }
      else {
        [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) removeOneGeoToPick];
      }
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) removeWithId:drawable];
    }
  }
}

- (void)clear {
  [super clear];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *) nil_chk(listForPicking_)) clear];
}

- (void)drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
}

- (void)drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  [super drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) disableCulling];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D_)) drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer];
  [renderer enableCulling];
  [renderer setCullFaceBack];
}

- (void)drawLabelForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(listForPicking_)) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer)) pickLabelWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
  }
}

- (void)enlargeBoundsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)min
                     withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)max {
  {
    IOSObjectArray *a__ = lists_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList *l = *b__++;
      for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk(l)) {
        if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) isVisible]) {
          [d enlargeBoundsWithGeogebraCommonKernelMatrixCoords:min withGeogebraCommonKernelMatrixCoords:max];
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(view3D_);
  RELEASE_(listForPicking_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "Drawable3DListsForView", NULL, 0x1, NULL, NULL },
    { "addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "add", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "remove", "V", 0x4, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "drawHiddenTexturedWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiddenTextured", "V", 0x1, NULL, NULL },
    { "drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "drawSurfacesForHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawSurfacesForHiding", "V", 0x1, NULL, NULL },
    { "drawForPickingPointsAndCurvesWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawForPickingPointsAndCurves", "V", 0x1, NULL, NULL },
    { "drawLabelForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabelForPicking", "V", 0x1, NULL, NULL },
    { "enlargeBoundsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "enlargeBounds", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "view3D_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.EuclidianView3D;", NULL, NULL,  },
    { "listForPicking_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists$Drawable3DList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView = { 2, "Drawable3DListsForView", "geogebra.common.geogebra3D.euclidian3D.draw", NULL, 0x1, 12, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_init(self);
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_setAndConsume_listForPicking_(self, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_Drawable3DList_initWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists_(self));
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_set_view3D_(self, view3D);
}

GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *self = [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView alloc];
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, view3D);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView)
