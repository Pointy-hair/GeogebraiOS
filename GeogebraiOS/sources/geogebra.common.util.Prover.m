//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/Prover.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPoints.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/prover/AbstractProverReciosMethod.h"
#include "geogebra/common/kernel/prover/ProverBotanasMethod.h"
#include "geogebra/common/kernel/prover/ProverPureSymbolicMethod.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/util/Prover.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Comparator.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonUtilProver () {
 @public
  GeogebraCommonUtilProver_ProverEngineEnum *engine_;
  JavaUtilHashSet *ndgConditions_;
  jboolean returnExtraNDGs_;
  id<JavaUtilList> proveAutoOrder_;
  id<JavaUtilList> proveDetailsAutoOrder_;
}

- (GeogebraCommonUtilProver_ProofResultEnum *)overrideWithGeogebraCommonUtilProver_ProofResultEnum:(GeogebraCommonUtilProver_ProofResultEnum *)pr;

- (void)callEngineWithGeogebraCommonUtilProver_ProverEngineEnum:(GeogebraCommonUtilProver_ProverEngineEnum *)currentEngine;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonUtilProver, engine_, GeogebraCommonUtilProver_ProverEngineEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonUtilProver, ndgConditions_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonUtilProver, proveAutoOrder_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(GeogebraCommonUtilProver, proveDetailsAutoOrder_, id<JavaUtilList>)

__attribute__((unused)) static GeogebraCommonUtilProver_ProofResultEnum *GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(GeogebraCommonUtilProver *self, GeogebraCommonUtilProver_ProofResultEnum *pr);

__attribute__((unused)) static void GeogebraCommonUtilProver_callEngineWithGeogebraCommonUtilProver_ProverEngineEnum_(GeogebraCommonUtilProver *self, GeogebraCommonUtilProver_ProverEngineEnum *currentEngine);

__attribute__((unused)) static void GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(GeogebraCommonUtilProver_ProverEngineEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonUtilProver_ProverEngineEnum *new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static void GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(GeogebraCommonUtilProver_ProofResultEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonUtilProver_ProofResultEnum *new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface GeogebraCommonUtilProver_NDGCondition ()

+ (GeogebraCommonKernelGeosGeoLine *)lineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P1
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P2
                                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons;

+ (GeogebraCommonKernelGeosGeoSegment *)segmentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P1
                                               withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P2
                                               withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons;

- (void)sortGeos;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoLine *GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoPoint *P1, GeogebraCommonKernelGeosGeoPoint *P2, GeogebraCommonKernelConstruction *cons);

__attribute__((unused)) static GeogebraCommonKernelGeosGeoSegment *GeogebraCommonUtilProver_NDGCondition_segmentWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoPoint *P1, GeogebraCommonKernelGeosGeoPoint *P2, GeogebraCommonKernelConstruction *cons);

__attribute__((unused)) static void GeogebraCommonUtilProver_NDGCondition_sortGeos(GeogebraCommonUtilProver_NDGCondition *self);

@interface GeogebraCommonUtilProver_NDGCondition_$1 : NSObject < JavaUtilComparator >

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoElement *)g1
               withId:(GeogebraCommonKernelGeosGeoElement *)g2;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonUtilProver_NDGCondition_$1)

__attribute__((unused)) static void GeogebraCommonUtilProver_NDGCondition_$1_init(GeogebraCommonUtilProver_NDGCondition_$1 *self);

__attribute__((unused)) static GeogebraCommonUtilProver_NDGCondition_$1 *new_GeogebraCommonUtilProver_NDGCondition_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonUtilProver_NDGCondition_$1)

GeogebraCommonKernelProverAbstractProverReciosMethod *GeogebraCommonUtilProver_reciosProver_;

@implementation GeogebraCommonUtilProver

- (GeogebraCommonKernelGeosGeoElement *)getStatement {
  return statement_;
}

- (instancetype)init {
  GeogebraCommonUtilProver_init(self);
  return self;
}

- (void)setTimeoutWithInt:(jint)timeout {
  self->timeout_ = timeout;
}

- (void)setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:(GeogebraCommonUtilProver_ProverEngineEnum *)engine {
  GeogebraCommonUtilProver_set_engine_(self, engine);
}

- (void)setConstructionWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)construction {
  GeogebraCommonUtilProver_set_construction_(self, construction);
}

- (void)setStatementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)root {
  GeogebraCommonUtilProver_set_statement_(self, root);
}

- (void)addNDGconditionWithGeogebraCommonUtilProver_NDGCondition:(GeogebraCommonUtilProver_NDGCondition *)ndgc {
  [((JavaUtilHashSet *) nil_chk(ndgConditions_)) addWithId:ndgc];
}

- (void)decideStatement {
  if (statement_ == nil) {
    GeogebraCommonMainApp_errorWithNSString_(@"No statement to prove");
    GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN());
    return;
  }
  GeogebraCommonKernelAlgosAlgoElement *algoParent = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(statement_)) getParentAlgorithm];
  if (algoParent == nil) {
    if ([((NSString *) nil_chk([statement_ getValueForInputBar])) isEqual:@"true"]) GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_ProofResultEnum_get_TRUE());
    else if ([((NSString *) nil_chk([statement_ getValueForInputBar])) isEqual:@"false"]) GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_ProofResultEnum_get_FALSE());
    else GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN());
    return;
  }
  if (engine_ != GeogebraCommonUtilProver_ProverEngineEnum_get_AUTO()) {
    GeogebraCommonUtilProver_callEngineWithGeogebraCommonUtilProver_ProverEngineEnum_(self, engine_);
    return;
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Using ", engine_));
  id<JavaUtilIterator> it;
  if ([self isReturnExtraNDGs]) it = [((id<JavaUtilList>) nil_chk(proveDetailsAutoOrder_)) iterator];
  else it = [((id<JavaUtilList>) nil_chk(proveAutoOrder_)) iterator];
  GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN());
  while ((result_ == GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN() || result_ == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE_NDG_UNREADABLE()) && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonUtilProver_ProverEngineEnum *pe = [((id<JavaUtilIterator>) nil_chk(it)) next];
    GeogebraCommonUtilProver_callEngineWithGeogebraCommonUtilProver_ProverEngineEnum_(self, pe);
  }
}

- (GeogebraCommonUtilProver_ProofResultEnum *)overrideWithGeogebraCommonUtilProver_ProofResultEnum:(GeogebraCommonUtilProver_ProofResultEnum *)pr {
  return GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(self, pr);
}

- (void)callEngineWithGeogebraCommonUtilProver_ProverEngineEnum:(GeogebraCommonUtilProver_ProverEngineEnum *)currentEngine {
  GeogebraCommonUtilProver_callEngineWithGeogebraCommonUtilProver_ProverEngineEnum_(self, currentEngine);
}

- (JavaUtilHashSet *)getNDGConditions {
  return ndgConditions_;
}

- (GeogebraCommonUtilProver_ProofResultEnum *)getProofResult {
  return result_;
}

- (JavaLangBoolean *)getYesNoAnswer {
  if (result_ != nil) {
    if (result_ == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE() || result_ == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE_NDG_UNREADABLE()) return JavaLangBoolean_valueOfWithBoolean_(YES);
    if (result_ == GeogebraCommonUtilProver_ProofResultEnum_get_FALSE()) return JavaLangBoolean_valueOfWithBoolean_(NO);
  }
  return nil;
}

+ (NSString *)simplifiedXMLWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                         withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)statement {
  return GeogebraCommonUtilProver_simplifiedXMLWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(cons, statement);
}

- (void)compute {
}

- (GeogebraCommonUtilProver_ProofResultEnum *)openGeoProverWithGeogebraCommonUtilProver_ProverEngineEnum:(GeogebraCommonUtilProver_ProverEngineEnum *)pe {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isReturnExtraNDGs {
  return returnExtraNDGs_;
}

- (void)setReturnExtraNDGsWithBoolean:(jboolean)returnExtraNDGs {
  self->returnExtraNDGs_ = returnExtraNDGs;
}

- (void)dealloc {
  RELEASE_(engine_);
  RELEASE_(construction_);
  RELEASE_(statement_);
  RELEASE_(ndgConditions_);
  RELEASE_(result_);
  RELEASE_(proveAutoOrder_);
  RELEASE_(proveDetailsAutoOrder_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getStatement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "init", "Prover", NULL, 0x1, NULL, NULL },
    { "setTimeoutWithInt:", "setTimeout", "V", 0x1, NULL, NULL },
    { "setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:", "setProverEngine", "V", 0x1, NULL, NULL },
    { "setConstructionWithGeogebraCommonKernelConstruction:", "setConstruction", "V", 0x1, NULL, NULL },
    { "setStatementWithGeogebraCommonKernelGeosGeoElement:", "setStatement", "V", 0x1, NULL, NULL },
    { "addNDGconditionWithGeogebraCommonUtilProver_NDGCondition:", "addNDGcondition", "V", 0x1, NULL, NULL },
    { "decideStatement", NULL, "V", 0x1, NULL, NULL },
    { "overrideWithGeogebraCommonUtilProver_ProofResultEnum:", "override", "Lgeogebra.common.util.Prover$ProofResult;", 0x2, NULL, NULL },
    { "callEngineWithGeogebraCommonUtilProver_ProverEngineEnum:", "callEngine", "V", 0x2, NULL, NULL },
    { "getNDGConditions", NULL, "Ljava.util.HashSet;", 0x1, NULL, NULL },
    { "getProofResult", NULL, "Lgeogebra.common.util.Prover$ProofResult;", 0x1, NULL, NULL },
    { "getYesNoAnswer", NULL, "Ljava.lang.Boolean;", 0x1, NULL, NULL },
    { "simplifiedXMLWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:", "simplifiedXML", "Ljava.lang.String;", 0xc, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "openGeoProverWithGeogebraCommonUtilProver_ProverEngineEnum:", "openGeoProver", "Lgeogebra.common.util.Prover$ProofResult;", 0x404, NULL, NULL },
    { "isReturnExtraNDGs", NULL, "Z", 0x1, NULL, NULL },
    { "setReturnExtraNDGsWithBoolean:", "setReturnExtraNDGs", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "timeout_", NULL, 0x4, "I", NULL, NULL,  },
    { "engine_", NULL, 0x2, "Lgeogebra.common.util.Prover$ProverEngine;", NULL, NULL,  },
    { "construction_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "statement_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "reciosProver_", NULL, 0xc, "Lgeogebra.common.kernel.prover.AbstractProverReciosMethod;", &GeogebraCommonUtilProver_reciosProver_, NULL,  },
    { "ndgConditions_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/util/Prover$NDGCondition;>;",  },
    { "result_", NULL, 0x4, "Lgeogebra.common.util.Prover$ProofResult;", NULL, NULL,  },
    { "returnExtraNDGs_", NULL, 0x2, "Z", NULL, NULL,  },
    { "proveAutoOrder_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lgeogebra/common/util/Prover$ProverEngine;>;",  },
    { "proveDetailsAutoOrder_", NULL, 0x2, "Ljava.util.List;", NULL, "Ljava/util/List<Lgeogebra/common/util/Prover$ProverEngine;>;",  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.util.Prover$ProverEngine;", "Lgeogebra.common.util.Prover$ProofResult;", "Lgeogebra.common.util.Prover$NDGCondition;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilProver = { 2, "Prover", "geogebra.common.util", NULL, 0x401, 18, methods, 10, fields, 0, NULL, 3, inner_classes, NULL, NULL };
  return &_GeogebraCommonUtilProver;
}

@end

void GeogebraCommonUtilProver_init(GeogebraCommonUtilProver *self) {
  NSObject_init(self);
  self->timeout_ = 5;
  GeogebraCommonUtilProver_set_engine_(self, GeogebraCommonUtilProver_ProverEngineEnum_get_AUTO());
  GeogebraCommonUtilProver_setAndConsume_ndgConditions_(self, new_JavaUtilHashSet_init());
  GeogebraCommonUtilProver_setAndConsume_proveAutoOrder_(self, new_JavaUtilArrayList_init());
  [self->proveAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()];
  [self->proveAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  [self->proveAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
  [self->proveAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()];
  GeogebraCommonUtilProver_setAndConsume_proveDetailsAutoOrder_(self, new_JavaUtilArrayList_init());
  [self->proveDetailsAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  [self->proveDetailsAutoOrder_ addWithId:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
}

GeogebraCommonUtilProver_ProofResultEnum *GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(GeogebraCommonUtilProver *self, GeogebraCommonUtilProver_ProofResultEnum *pr) {
  if (self->result_ == nil || pr != GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN()) {
    return pr;
  }
  return self->result_;
}

void GeogebraCommonUtilProver_callEngineWithGeogebraCommonUtilProver_ProverEngineEnum_(GeogebraCommonUtilProver *self, GeogebraCommonUtilProver_ProverEngineEnum *currentEngine) {
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Using ", currentEngine));
  GeogebraCommonUtilProver_setAndConsume_ndgConditions_(self, new_JavaUtilHashSet_init());
  if (currentEngine == GeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()) {
    GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(self, GeogebraCommonKernelProverProverBotanasMethod_proveWithGeogebraCommonUtilProver_(self)));
    return;
  }
  else if (currentEngine == GeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()) {
    GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(self, [((GeogebraCommonKernelProverAbstractProverReciosMethod *) nil_chk(GeogebraCommonUtilProver_reciosProver_)) proveWithGeogebraCommonUtilProver:self]));
    return;
  }
  else if (currentEngine == GeogebraCommonUtilProver_ProverEngineEnum_get_PURE_SYMBOLIC_PROVER()) {
    GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(self, GeogebraCommonKernelProverProverPureSymbolicMethod_proveWithGeogebraCommonUtilProver_(self)));
    return;
  }
  else if (currentEngine == GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU() || currentEngine == GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()) {
    GeogebraCommonUtilProver_set_result_(self, GeogebraCommonUtilProver_overrideWithGeogebraCommonUtilProver_ProofResultEnum_(self, [self openGeoProverWithGeogebraCommonUtilProver_ProverEngineEnum:currentEngine]));
    return;
  }
}

NSString *GeogebraCommonUtilProver_simplifiedXMLWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoElement *statement) {
  GeogebraCommonUtilProver_initialize();
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getConstructionElementsXML_OGPWithJavaLangStringBuilder:sb withGeogebraCommonKernelGeosGeoElement:statement];
  return JreStrcat("$$$", @"<construction>\n", [sb description], @"</construction>");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilProver)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonUtilProver_ProverEngineEnum)

GeogebraCommonUtilProver_ProverEngineEnum *GeogebraCommonUtilProver_ProverEngineEnum_values_[6];

@implementation GeogebraCommonUtilProver_ProverEngineEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonUtilProver_ProverEngineEnum_values() {
  GeogebraCommonUtilProver_ProverEngineEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonUtilProver_ProverEngineEnum_values_ count:6 type:GeogebraCommonUtilProver_ProverEngineEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonUtilProver_ProverEngineEnum_values();
}

+ (GeogebraCommonUtilProver_ProverEngineEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonUtilProver_ProverEngineEnum_valueOfWithNSString_(name);
}

GeogebraCommonUtilProver_ProverEngineEnum *GeogebraCommonUtilProver_ProverEngineEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonUtilProver_ProverEngineEnum_initialize();
  for (int i = 0; i < 6; i++) {
    GeogebraCommonUtilProver_ProverEngineEnum *e = GeogebraCommonUtilProver_ProverEngineEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonUtilProver_ProverEngineEnum class]) {
    GeogebraCommonUtilProver_ProverEngineEnum_RECIOS_PROVER = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"RECIOS_PROVER", 0);
    GeogebraCommonUtilProver_ProverEngineEnum_BOTANAS_PROVER = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"BOTANAS_PROVER", 1);
    GeogebraCommonUtilProver_ProverEngineEnum_OPENGEOPROVER_WU = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"OPENGEOPROVER_WU", 2);
    GeogebraCommonUtilProver_ProverEngineEnum_OPENGEOPROVER_AREA = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"OPENGEOPROVER_AREA", 3);
    GeogebraCommonUtilProver_ProverEngineEnum_PURE_SYMBOLIC_PROVER = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"PURE_SYMBOLIC_PROVER", 4);
    GeogebraCommonUtilProver_ProverEngineEnum_AUTO = new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(@"AUTO", 5);
    J2OBJC_SET_INITIALIZED(GeogebraCommonUtilProver_ProverEngineEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "RECIOS_PROVER", "RECIOS_PROVER", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_RECIOS_PROVER, NULL,  },
    { "BOTANAS_PROVER", "BOTANAS_PROVER", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_BOTANAS_PROVER, NULL,  },
    { "OPENGEOPROVER_WU", "OPENGEOPROVER_WU", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_OPENGEOPROVER_WU, NULL,  },
    { "OPENGEOPROVER_AREA", "OPENGEOPROVER_AREA", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_OPENGEOPROVER_AREA, NULL,  },
    { "PURE_SYMBOLIC_PROVER", "PURE_SYMBOLIC_PROVER", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_PURE_SYMBOLIC_PROVER, NULL,  },
    { "AUTO", "AUTO", 0x4019, "Lgeogebra.common.util.Prover$ProverEngine;", &GeogebraCommonUtilProver_ProverEngineEnum_AUTO, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.util.Prover$ProverEngine;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilProver_ProverEngineEnum = { 2, "ProverEngine", "geogebra.common.util", "Prover", 0x4019, 0, NULL, 6, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/util/Prover$ProverEngine;>;" };
  return &_GeogebraCommonUtilProver_ProverEngineEnum;
}

@end

void GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(GeogebraCommonUtilProver_ProverEngineEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonUtilProver_ProverEngineEnum *new_GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonUtilProver_ProverEngineEnum *self = [GeogebraCommonUtilProver_ProverEngineEnum alloc];
  GeogebraCommonUtilProver_ProverEngineEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilProver_ProverEngineEnum)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonUtilProver_ProofResultEnum)

GeogebraCommonUtilProver_ProofResultEnum *GeogebraCommonUtilProver_ProofResultEnum_values_[5];

@implementation GeogebraCommonUtilProver_ProofResultEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonUtilProver_ProofResultEnum_values() {
  GeogebraCommonUtilProver_ProofResultEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonUtilProver_ProofResultEnum_values_ count:5 type:GeogebraCommonUtilProver_ProofResultEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonUtilProver_ProofResultEnum_values();
}

+ (GeogebraCommonUtilProver_ProofResultEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonUtilProver_ProofResultEnum_valueOfWithNSString_(name);
}

GeogebraCommonUtilProver_ProofResultEnum *GeogebraCommonUtilProver_ProofResultEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonUtilProver_ProofResultEnum_initialize();
  for (int i = 0; i < 5; i++) {
    GeogebraCommonUtilProver_ProofResultEnum *e = GeogebraCommonUtilProver_ProofResultEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonUtilProver_ProofResultEnum class]) {
    GeogebraCommonUtilProver_ProofResultEnum_TRUE = new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(@"TRUE", 0);
    GeogebraCommonUtilProver_ProofResultEnum_TRUE_NDG_UNREADABLE = new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(@"TRUE_NDG_UNREADABLE", 1);
    GeogebraCommonUtilProver_ProofResultEnum_FALSE = new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(@"FALSE", 2);
    GeogebraCommonUtilProver_ProofResultEnum_UNKNOWN = new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(@"UNKNOWN", 3);
    GeogebraCommonUtilProver_ProofResultEnum_PROCESSING = new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(@"PROCESSING", 4);
    J2OBJC_SET_INITIALIZED(GeogebraCommonUtilProver_ProofResultEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "TRUE", 0x4019, "Lgeogebra.common.util.Prover$ProofResult;", &GeogebraCommonUtilProver_ProofResultEnum_TRUE, NULL,  },
    { "TRUE_NDG_UNREADABLE", "TRUE_NDG_UNREADABLE", 0x4019, "Lgeogebra.common.util.Prover$ProofResult;", &GeogebraCommonUtilProver_ProofResultEnum_TRUE_NDG_UNREADABLE, NULL,  },
    { "FALSE", "FALSE", 0x4019, "Lgeogebra.common.util.Prover$ProofResult;", &GeogebraCommonUtilProver_ProofResultEnum_FALSE, NULL,  },
    { "UNKNOWN", "UNKNOWN", 0x4019, "Lgeogebra.common.util.Prover$ProofResult;", &GeogebraCommonUtilProver_ProofResultEnum_UNKNOWN, NULL,  },
    { "PROCESSING", "PROCESSING", 0x4019, "Lgeogebra.common.util.Prover$ProofResult;", &GeogebraCommonUtilProver_ProofResultEnum_PROCESSING, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.util.Prover$ProofResult;"};
  static const J2ObjcClassInfo _GeogebraCommonUtilProver_ProofResultEnum = { 2, "ProofResult", "geogebra.common.util", "Prover", 0x4019, 0, NULL, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/util/Prover$ProofResult;>;" };
  return &_GeogebraCommonUtilProver_ProofResultEnum;
}

@end

void GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(GeogebraCommonUtilProver_ProofResultEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonUtilProver_ProofResultEnum *new_GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonUtilProver_ProofResultEnum *self = [GeogebraCommonUtilProver_ProofResultEnum alloc];
  GeogebraCommonUtilProver_ProofResultEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilProver_ProofResultEnum)

@implementation GeogebraCommonUtilProver_NDGCondition

- (jdouble)getReadability {
  return readability_;
}

- (void)setReadabilityWithDouble:(jdouble)readability {
  self->readability_ = readability;
}

- (NSString *)getCondition {
  return condition_;
}

- (void)setConditionWithNSString:(NSString *)condition {
  GeogebraCommonUtilProver_NDGCondition_set_condition_(self, condition);
}

- (IOSObjectArray *)getGeos {
  return geos_;
}

- (void)setGeosWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)object {
  GeogebraCommonUtilProver_NDGCondition_set_geos_(self, object);
}

- (NSUInteger)hash {
  jint result = ((jint) [((NSString *) nil_chk(condition_)) hash]);
  if (geos_ != nil) {
    {
      IOSObjectArray *a__ = geos_;
      GeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
      GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        GeogebraCommonKernelGeosGeoElement *geo = *b__++;
        if (geo != nil) {
          result += ((jint) [geo hash]);
        }
      }
    }
  }
  return result;
}

- (jboolean)isEqual:(id)obj {
  if (obj == nil) return NO;
  if (obj == self) return YES;
  if ([nil_chk(obj) getClass] != [self getClass]) return NO;
  return ((jint) [self hash]) == ((jint) [obj hash]);
}

+ (GeogebraCommonKernelGeosGeoLine *)lineWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P1
                                         withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P2
                                         withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P1, P2, cons);
}

+ (GeogebraCommonKernelGeosGeoSegment *)segmentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P1
                                               withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)P2
                                               withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonUtilProver_NDGCondition_segmentWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P1, P2, cons);
}

- (void)sortGeos {
  GeogebraCommonUtilProver_NDGCondition_sortGeos(self);
}

- (void)rewriteWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  NSString *cond = [self getCondition];
  if ([@"ArePerpendicular" isEqual:cond] && ((IOSObjectArray *) nil_chk(self->geos_))->size_ == 3) {
    GeogebraCommonKernelGeosGeoPoint *P1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 0), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *P2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 1), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *P3 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 2), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoLine *l1 = GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P1, P3, cons);
    GeogebraCommonKernelGeosGeoLine *l2 = GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P3, P2, cons);
    if (l1 != nil && l2 != nil) {
      GeogebraCommonUtilProver_NDGCondition_setAndConsume_geos_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(geos_, 0, l1);
      IOSObjectArray_Set(geos_, 1, l2);
      GeogebraCommonUtilProver_NDGCondition_sortGeos(self);
    }
  }
  else if (([@"AreEqual" isEqual:cond] || [@"ArePerpendicular" isEqual:cond] || [@"AreParallel" isEqual:cond])) {
    if (((IOSObjectArray *) nil_chk(self->geos_))->size_ == 4) {
      GeogebraCommonKernelGeosGeoPoint *P1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 0), [GeogebraCommonKernelGeosGeoPoint class]);
      GeogebraCommonKernelGeosGeoPoint *P2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 1), [GeogebraCommonKernelGeosGeoPoint class]);
      GeogebraCommonKernelGeosGeoLine *l1 = GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P1, P2, cons);
      GeogebraCommonKernelGeosGeoPoint *P3 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 2), [GeogebraCommonKernelGeosGeoPoint class]);
      GeogebraCommonKernelGeosGeoPoint *P4 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 3), [GeogebraCommonKernelGeosGeoPoint class]);
      GeogebraCommonKernelGeosGeoLine *l2 = GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P3, P4, cons);
      if (l1 != nil && l2 != nil) {
        GeogebraCommonUtilProver_NDGCondition_setAndConsume_geos_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
        IOSObjectArray_Set(geos_, 0, l1);
        IOSObjectArray_Set(geos_, 1, l2);
        GeogebraCommonUtilProver_NDGCondition_sortGeos(self);
      }
    }
    else if (self->geos_->size_ == 2) {
      GeogebraCommonUtilProver_NDGCondition_sortGeos(self);
    }
  }
  else if ([@"IsIsoscelesTriangle" isEqual:cond]) {
    GeogebraCommonKernelGeosGeoPoint *P1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk(self->geos_), 0), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *P2 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 1), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoPoint *P3 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(self->geos_, 2), [GeogebraCommonKernelGeosGeoPoint class]);
    GeogebraCommonKernelGeosGeoSegment *l1 = GeogebraCommonUtilProver_NDGCondition_segmentWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P1, P2, cons);
    GeogebraCommonKernelGeosGeoSegment *l2 = GeogebraCommonUtilProver_NDGCondition_segmentWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(P2, P3, cons);
    if (l1 != nil && l2 != nil) {
      GeogebraCommonUtilProver_NDGCondition_setAndConsume_geos_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
      IOSObjectArray_Set(geos_, 0, l1);
      IOSObjectArray_Set(geos_, 1, l2);
      GeogebraCommonUtilProver_NDGCondition_sortGeos(self);
      [self setConditionWithNSString:@"AreEqual"];
    }
  }
}

- (instancetype)init {
  GeogebraCommonUtilProver_NDGCondition_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(condition_);
  RELEASE_(geos_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getReadability", NULL, "D", 0x1, NULL, NULL },
    { "setReadabilityWithDouble:", "setReadability", "V", 0x1, NULL, NULL },
    { "getCondition", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setConditionWithNSString:", "setCondition", "V", 0x1, NULL, NULL },
    { "getGeos", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeosWithGeogebraCommonKernelGeosGeoElementArray:", "setGeos", "V", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "lineWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelConstruction:", "line", "Lgeogebra.common.kernel.geos.GeoLine;", 0xa, NULL, NULL },
    { "segmentWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelConstruction:", "segment", "Lgeogebra.common.kernel.geos.GeoSegment;", 0xa, NULL, NULL },
    { "sortGeos", NULL, "V", 0x2, NULL, NULL },
    { "rewriteWithGeogebraCommonKernelConstruction:", "rewrite", "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "condition_", NULL, 0x0, "Ljava.lang.String;", NULL, NULL,  },
    { "readability_", NULL, 0x0, "D", NULL, NULL,  },
    { "geos_", NULL, 0x0, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilProver_NDGCondition = { 2, "NDGCondition", "geogebra.common.util", "Prover", 0x9, 13, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilProver_NDGCondition;
}

@end

GeogebraCommonKernelGeosGeoLine *GeogebraCommonUtilProver_NDGCondition_lineWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoPoint *P1, GeogebraCommonKernelGeosGeoPoint *P2, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonUtilProver_NDGCondition_initialize();
  JavaUtilTreeSet *ges = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getGeoSetConstructionOrder];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(ges)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *ge = [it next];
    if ([ge isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]]) {
      GeogebraCommonKernelGeosGeoPoint *Q1 = [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoLine class])))) getStartPoint];
      GeogebraCommonKernelGeosGeoPoint *Q2 = [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoLine class])))) getEndPoint];
      if ((Q1 != nil && Q2 != nil) && (([Q1 isEqual:P1] && [Q2 isEqual:P2]) || ([Q1 isEqual:P2] && [Q2 isEqual:P1]))) {
        return (GeogebraCommonKernelGeosGeoLine *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoLine class]);
      }
    }
  }
  jboolean oldMacroMode = [cons isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:NO];
  GeogebraCommonKernelAlgosAlgoJoinPoints *ajp = [new_GeogebraCommonKernelAlgosAlgoJoinPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, nil, P1, P2) autorelease];
  GeogebraCommonKernelGeosGeoLine *line = [ajp getLine];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line)) setEuclidianVisibleWithBoolean:YES];
  [line setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG];
  [line setLabelVisibleWithBoolean:YES];
  [line updateVisualStyle];
  [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  return line;
}

GeogebraCommonKernelGeosGeoSegment *GeogebraCommonUtilProver_NDGCondition_segmentWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoPoint *P1, GeogebraCommonKernelGeosGeoPoint *P2, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonUtilProver_NDGCondition_initialize();
  JavaUtilTreeSet *ges = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getGeoSetConstructionOrder];
  id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk(ges)) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *ge = [it next];
    if ([ge isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) {
      GeogebraCommonKernelGeosGeoPoint *Q1 = ((GeogebraCommonKernelGeosGeoPoint *) [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoSegment class])))) getStartPoint]);
      GeogebraCommonKernelGeosGeoPoint *Q2 = ((GeogebraCommonKernelGeosGeoPoint *) [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(((GeogebraCommonKernelGeosGeoSegment *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoSegment class])))) getEndPoint]);
      if ((Q1 != nil && Q2 != nil) && (([Q1 isEqual:P1] && [Q2 isEqual:P2]) || ([Q1 isEqual:P2] && [Q2 isEqual:P1]))) {
        return (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(ge, [GeogebraCommonKernelGeosGeoSegment class]);
      }
    }
  }
  jboolean oldMacroMode = [cons isSuppressLabelsActive];
  [cons setSuppressLabelCreationWithBoolean:NO];
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *ajp = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons, nil, P1, P2) autorelease];
  GeogebraCommonKernelGeosGeoSegment *segment = [ajp getSegment];
  [((GeogebraCommonKernelGeosGeoSegment *) nil_chk(segment)) setEuclidianVisibleWithBoolean:YES];
  [segment setLineTypeWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_DASHED_LONG];
  [segment setLabelVisibleWithBoolean:YES];
  [segment updateVisualStyle];
  [cons setSuppressLabelCreationWithBoolean:oldMacroMode];
  return segment;
}

void GeogebraCommonUtilProver_NDGCondition_sortGeos(GeogebraCommonUtilProver_NDGCondition *self) {
  JavaUtilArrays_sortWithNSObjectArray_withJavaUtilComparator_(self->geos_, [new_GeogebraCommonUtilProver_NDGCondition_$1_init() autorelease]);
}

void GeogebraCommonUtilProver_NDGCondition_init(GeogebraCommonUtilProver_NDGCondition *self) {
  NSObject_init(self);
  self->readability_ = 1.0;
}

GeogebraCommonUtilProver_NDGCondition *new_GeogebraCommonUtilProver_NDGCondition_init() {
  GeogebraCommonUtilProver_NDGCondition *self = [GeogebraCommonUtilProver_NDGCondition alloc];
  GeogebraCommonUtilProver_NDGCondition_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilProver_NDGCondition)

@implementation GeogebraCommonUtilProver_NDGCondition_$1

- (jint)compareWithId:(GeogebraCommonKernelGeosGeoElement *)g1
               withId:(GeogebraCommonKernelGeosGeoElement *)g2 {
  return [((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(g1)) getLabelSimple])) compareToWithId:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(g2)) getLabelSimple]];
}

- (instancetype)init {
  GeogebraCommonUtilProver_NDGCondition_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "compareWithId:withId:", "compare", "I", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonUtilProver_NDGCondition", "sortGeos" };
  static const J2ObjcClassInfo _GeogebraCommonUtilProver_NDGCondition_$1 = { 2, "", "geogebra.common.util", "Prover$NDGCondition", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Ljava/util/Comparator<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonUtilProver_NDGCondition_$1;
}

@end

void GeogebraCommonUtilProver_NDGCondition_$1_init(GeogebraCommonUtilProver_NDGCondition_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonUtilProver_NDGCondition_$1 *new_GeogebraCommonUtilProver_NDGCondition_$1_init() {
  GeogebraCommonUtilProver_NDGCondition_$1 *self = [GeogebraCommonUtilProver_NDGCondition_$1 alloc];
  GeogebraCommonUtilProver_NDGCondition_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilProver_NDGCondition_$1)
