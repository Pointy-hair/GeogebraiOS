//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/index/sweepline/SweepLineIndex.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/index/sweepline/SweepLineEvent.h"
#include "com/vividsolutions/jts/index/sweepline/SweepLineIndex.h"
#include "com/vividsolutions/jts/index/sweepline/SweepLineInterval.h"
#include "com/vividsolutions/jts/index/sweepline/SweepLineOverlapAction.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsIndexSweeplineSweepLineIndex () {
 @public
  jboolean indexBuilt_;
  jint nOverlaps_;
}

- (void)buildIndex;

- (void)processOverlapsWithInt:(jint)start
                       withInt:(jint)end
withComVividsolutionsJtsIndexSweeplineSweepLineInterval:(ComVividsolutionsJtsIndexSweeplineSweepLineInterval *)s0
withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction:(id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction>)action;

@end

__attribute__((unused)) static void ComVividsolutionsJtsIndexSweeplineSweepLineIndex_buildIndex(ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self);

__attribute__((unused)) static void ComVividsolutionsJtsIndexSweeplineSweepLineIndex_processOverlapsWithInt_withInt_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction_(ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self, jint start, jint end, ComVividsolutionsJtsIndexSweeplineSweepLineInterval *s0, id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction> action);

@implementation ComVividsolutionsJtsIndexSweeplineSweepLineIndex

- (instancetype)init {
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_init(self);
  return self;
}

- (void)addWithComVividsolutionsJtsIndexSweeplineSweepLineInterval:(ComVividsolutionsJtsIndexSweeplineSweepLineInterval *)sweepInt {
  ComVividsolutionsJtsIndexSweeplineSweepLineEvent *insertEvent = [new_ComVividsolutionsJtsIndexSweeplineSweepLineEvent_initWithDouble_withComVividsolutionsJtsIndexSweeplineSweepLineEvent_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_([((ComVividsolutionsJtsIndexSweeplineSweepLineInterval *) nil_chk(sweepInt)) getMin], nil, sweepInt) autorelease];
  [((id<JavaUtilList>) nil_chk(events_)) addWithId:insertEvent];
  [events_ addWithId:[new_ComVividsolutionsJtsIndexSweeplineSweepLineEvent_initWithDouble_withComVividsolutionsJtsIndexSweeplineSweepLineEvent_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_([sweepInt getMax], insertEvent, sweepInt) autorelease]];
}

- (void)buildIndex {
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_buildIndex(self);
}

- (void)computeOverlapsWithComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction:(id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction>)action {
  nOverlaps_ = 0;
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_buildIndex(self);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(events_)) size]; i++) {
    ComVividsolutionsJtsIndexSweeplineSweepLineEvent *ev = (ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) check_class_cast([events_ getWithInt:i], [ComVividsolutionsJtsIndexSweeplineSweepLineEvent class]);
    if ([((ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) nil_chk(ev)) isInsert]) {
      ComVividsolutionsJtsIndexSweeplineSweepLineIndex_processOverlapsWithInt_withInt_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction_(self, i, [ev getDeleteEventIndex], [ev getInterval], action);
    }
  }
}

- (void)processOverlapsWithInt:(jint)start
                       withInt:(jint)end
withComVividsolutionsJtsIndexSweeplineSweepLineInterval:(ComVividsolutionsJtsIndexSweeplineSweepLineInterval *)s0
withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction:(id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction>)action {
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_processOverlapsWithInt_withInt_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction_(self, start, end, s0, action);
}

- (void)dealloc {
  RELEASE_(events_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "SweepLineIndex", NULL, 0x1, NULL, NULL },
    { "addWithComVividsolutionsJtsIndexSweeplineSweepLineInterval:", "add", "V", 0x1, NULL, NULL },
    { "buildIndex", NULL, "V", 0x2, NULL, NULL },
    { "computeOverlapsWithComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction:", "computeOverlaps", "V", 0x1, NULL, NULL },
    { "processOverlapsWithInt:withInt:withComVividsolutionsJtsIndexSweeplineSweepLineInterval:withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction:", "processOverlaps", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "events_", NULL, 0x0, "Ljava.util.List;", NULL, NULL,  },
    { "indexBuilt_", NULL, 0x2, "Z", NULL, NULL,  },
    { "nOverlaps_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsIndexSweeplineSweepLineIndex = { 2, "SweepLineIndex", "com.vividsolutions.jts.index.sweepline", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsIndexSweeplineSweepLineIndex;
}

@end

void ComVividsolutionsJtsIndexSweeplineSweepLineIndex_init(ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self) {
  NSObject_init(self);
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_setAndConsume_events_(self, new_JavaUtilArrayList_init());
}

ComVividsolutionsJtsIndexSweeplineSweepLineIndex *new_ComVividsolutionsJtsIndexSweeplineSweepLineIndex_init() {
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self = [ComVividsolutionsJtsIndexSweeplineSweepLineIndex alloc];
  ComVividsolutionsJtsIndexSweeplineSweepLineIndex_init(self);
  return self;
}

void ComVividsolutionsJtsIndexSweeplineSweepLineIndex_buildIndex(ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self) {
  if (self->indexBuilt_) return;
  JavaUtilCollections_sortWithJavaUtilList_(self->events_);
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->events_)) size]; i++) {
    ComVividsolutionsJtsIndexSweeplineSweepLineEvent *ev = (ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) check_class_cast([self->events_ getWithInt:i], [ComVividsolutionsJtsIndexSweeplineSweepLineEvent class]);
    if ([((ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) nil_chk(ev)) isDelete]) {
      [((ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) nil_chk([ev getInsertEvent])) setDeleteEventIndexWithInt:i];
    }
  }
  self->indexBuilt_ = YES;
}

void ComVividsolutionsJtsIndexSweeplineSweepLineIndex_processOverlapsWithInt_withInt_withComVividsolutionsJtsIndexSweeplineSweepLineInterval_withComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction_(ComVividsolutionsJtsIndexSweeplineSweepLineIndex *self, jint start, jint end, ComVividsolutionsJtsIndexSweeplineSweepLineInterval *s0, id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction> action) {
  for (jint i = start; i < end; i++) {
    ComVividsolutionsJtsIndexSweeplineSweepLineEvent *ev = (ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) check_class_cast([((id<JavaUtilList>) nil_chk(self->events_)) getWithInt:i], [ComVividsolutionsJtsIndexSweeplineSweepLineEvent class]);
    if ([((ComVividsolutionsJtsIndexSweeplineSweepLineEvent *) nil_chk(ev)) isInsert]) {
      ComVividsolutionsJtsIndexSweeplineSweepLineInterval *s1 = [ev getInterval];
      [((id<ComVividsolutionsJtsIndexSweeplineSweepLineOverlapAction>) nil_chk(action)) overlapWithComVividsolutionsJtsIndexSweeplineSweepLineInterval:s0 withComVividsolutionsJtsIndexSweeplineSweepLineInterval:s1];
      self->nOverlaps_++;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsIndexSweeplineSweepLineIndex)
