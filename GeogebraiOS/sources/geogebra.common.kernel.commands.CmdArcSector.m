//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdArcSector.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoConicPartConicParameters.h"
#include "geogebra/common/kernel/algos/AlgoConicPartConicPoints.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdArcSector.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdArcSector

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                           withInt:(jint)type {
  GeogebraCommonKernelCommandsCmdArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  IOSObjectArray *arg;
  switch (n) {
    case 3:
    arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)])) && (*IOSBooleanArray_GetRef(ok, 2) = ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 2)]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self arcSectorWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoNumberValue)) withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelGeosGeoNumberValue))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else if ((*IOSBooleanArray_GetRef(ok, 0) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoConic])) && (*IOSBooleanArray_GetRef(ok, 1) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoPoint])) && (*IOSBooleanArray_GetRef(ok, 2) = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 2))) isGeoPoint]))) {
      IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [self arcSectorWithNSString:[c getLabel] withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(arg, 2), @protocol(GeogebraCommonKernelKernelNDGeoPointND))] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      return ret;
    }
    else {
      if (!IOSBooleanArray_Get(ok, 0)) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      }
      else if (!IOSBooleanArray_Get(ok, 1)) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 1)];
      }
      else {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 2)];
      }
    }
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)arcSectorWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                   withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)start
                   withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)end {
  GeogebraCommonKernelAlgosAlgoConicPartConicParameters *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicParameters_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_withInt_(cons_, label, conic, start, end, type_) autorelease];
  return [algo getConicPart];
}

- (GeogebraCommonKernelGeosGeoElement *)arcSectorWithNSString:(NSString *)label
                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)start
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)end {
  GeogebraCommonKernelAlgosAlgoConicPartConicPoints *algo = [new_GeogebraCommonKernelAlgosAlgoConicPartConicPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withInt_(cons_, label, conic, start, end, type_) autorelease];
  return [algo getConicPart];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:withInt:", "CmdArcSector", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "arcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoNumberValue:", "arcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "arcSectorWithNSString:withGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "arcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdArcSector = { 2, "CmdArcSector", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdArcSector;
}

@end

void GeogebraCommonKernelCommandsCmdArcSector_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelCommandsCmdArcSector *self, GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
  self->type_ = type;
}

GeogebraCommonKernelCommandsCmdArcSector *new_GeogebraCommonKernelCommandsCmdArcSector_initWithGeogebraCommonKernelKernel_withInt_(GeogebraCommonKernelKernel *kernel, jint type) {
  GeogebraCommonKernelCommandsCmdArcSector *self = [GeogebraCommonKernelCommandsCmdArcSector alloc];
  GeogebraCommonKernelCommandsCmdArcSector_initWithGeogebraCommonKernelKernel_withInt_(self, kernel, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdArcSector)
