//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoTableText.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/google/gwt/regexp/shared/MatchResult.h"
#include "com/google/gwt/regexp/shared/RegExp.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoTableText.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/TextProperties.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelAlgosAlgoTableText () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList_;
  GeogebraCommonKernelGeosGeoText *text_;
  GeogebraCommonKernelGeosGeoText *args_;
  IOSObjectArray *geoLists_;
  JavaLangStringBuffer *sb_;
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *alignment_;
  jboolean verticalLines_, horizontalLines_;
  JavaLangStringBuilder *verticalLinesArray_, *horizontalLinesArray_;
  jboolean verticalLinesJustEdges_, horizontalLinesJustEdges_;
  NSString *justification_, *openBracket_, *closeBracket_, *openString_, *closeString_;
  jint columns_;
  jint rows_;
}

- (void)parseArgs;

+ (jchar)charAtWithId:(id)o
              withInt:(jint)i;

- (void)mathmlWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)latexWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (jchar)getJustificationWithInt:(jint)c;

- (void)latexMQWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)addCellLaTeXWithInt:(jint)c
                    withInt:(jint)r
                withBoolean:(jboolean)finalCell
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

- (void)addCellMathMLWithInt:(jint)c
                     withInt:(jint)r
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, geoList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, args_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, geoLists_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, sb_, JavaLangStringBuffer *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, alignment_, GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, verticalLinesArray_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, horizontalLinesArray_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, justification_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, openBracket_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, closeBracket_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, openString_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoTableText, closeString_, NSString *)

static ComGoogleGwtRegexpSharedRegExp *GeogebraCommonKernelAlgosAlgoTableText_matchLRC_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelAlgosAlgoTableText, matchLRC_, ComGoogleGwtRegexpSharedRegExp *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_parseArgs(GeogebraCommonKernelAlgosAlgoTableText *self);

__attribute__((unused)) static jchar GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(id o, jint i);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_compute(GeogebraCommonKernelAlgosAlgoTableText *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_mathmlWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_latexWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static jchar GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_latexMQWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c, jint r, jboolean finalCell, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_addCellMathMLWithInt_withInt_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c, jint r, GeogebraCommonKernelStringTemplate *tpl);

@interface GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum ()

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values();

+ (GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *new_GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelAlgosAlgoTableText)

@implementation GeogebraCommonKernelAlgosAlgoTableText

- (GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *)getAlignment {
  return alignment_;
}

- (jboolean)isVerticalLines {
  return verticalLines_;
}

- (jboolean)isHorizontalLines {
  return horizontalLines_;
}

- (NSString *)getJustification {
  return JreStrcat("C", [((NSString *) nil_chk(justification_)) charAtWithInt:0]);
}

- (NSString *)getOpenSymbol {
  return openString_;
}

- (NSString *)getCloseSymbol {
  return closeString_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args {
  GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, args);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)args {
  GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, geoList, args);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TableText();
}

- (void)setInputOutput {
  if (args_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList_);
    IOSObjectArray_Set(input_, 1, args_);
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)parseArgs {
  GeogebraCommonKernelAlgosAlgoTableText_parseArgs(self);
}

+ (jchar)charAtWithId:(id)o
              withInt:(jint)i {
  return GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(o, i);
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoTableText_compute(self);
}

- (void)mathmlWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoTableText_mathmlWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)latexWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoTableText_latexWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (jchar)getJustificationWithInt:(jint)c {
  return GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(self, c);
}

- (void)latexMQWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoTableText_latexMQWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (void)addCellLaTeXWithInt:(jint)c
                    withInt:(jint)r
                withBoolean:(jboolean)finalCell
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(self, c, r, finalCell, tpl);
}

- (void)addCellMathMLWithInt:(jint)c
                     withInt:(jint)r
withGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  GeogebraCommonKernelAlgosAlgoTableText_addCellMathMLWithInt_withInt_withGeogebraCommonKernelStringTemplate_(self, c, r, tpl);
}

- (jboolean)isLaTeXTextCommand {
  return YES;
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(text_);
  RELEASE_(args_);
  RELEASE_(geoLists_);
  RELEASE_(sb_);
  RELEASE_(alignment_);
  RELEASE_(verticalLinesArray_);
  RELEASE_(horizontalLinesArray_);
  RELEASE_(justification_);
  RELEASE_(openBracket_);
  RELEASE_(closeBracket_);
  RELEASE_(openString_);
  RELEASE_(closeString_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelAlgosAlgoTableText class]) {
    JreStrongAssign(&GeogebraCommonKernelAlgosAlgoTableText_matchLRC_, nil, ComGoogleGwtRegexpSharedRegExp_compileWithNSString_(@"([^lrc]*)([lrc]*)([^lrc]*)"));
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelAlgosAlgoTableText)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getAlignment", NULL, "Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;", 0x1, NULL, NULL },
    { "isVerticalLines", NULL, "Z", 0x1, NULL, NULL },
    { "isHorizontalLines", NULL, "Z", 0x1, NULL, NULL },
    { "getJustification", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getOpenSymbol", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCloseSymbol", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:", "AlgoTableText", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoText:", "AlgoTableText", NULL, 0x0, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "parseArgs", NULL, "V", 0x2, NULL, NULL },
    { "charAtWithId:withInt:", "charAt", "C", 0xa, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "mathmlWithGeogebraCommonKernelStringTemplate:", "mathml", "V", 0x2, NULL, NULL },
    { "latexWithGeogebraCommonKernelStringTemplate:", "latex", "V", 0x2, NULL, NULL },
    { "getJustificationWithInt:", "getJustification", "C", 0x2, NULL, NULL },
    { "latexMQWithGeogebraCommonKernelStringTemplate:", "latexMQ", "V", 0x2, NULL, NULL },
    { "addCellLaTeXWithInt:withInt:withBoolean:withGeogebraCommonKernelStringTemplate:", "addCellLaTeX", "V", 0x2, NULL, NULL },
    { "addCellMathMLWithInt:withInt:withGeogebraCommonKernelStringTemplate:", "addCellMathML", "V", 0x2, NULL, NULL },
    { "isLaTeXTextCommand", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "args_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "geoLists_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuffer;", NULL, NULL,  },
    { "alignment_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;", NULL, NULL,  },
    { "verticalLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "horizontalLines_", NULL, 0x2, "Z", NULL, NULL,  },
    { "verticalLinesArray_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "horizontalLinesArray_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "verticalLinesJustEdges_", NULL, 0x2, "Z", NULL, NULL,  },
    { "horizontalLinesJustEdges_", NULL, 0x2, "Z", NULL, NULL,  },
    { "justification_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "openBracket_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "closeBracket_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "openString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "closeString_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "columns_", NULL, 0x2, "I", NULL, NULL,  },
    { "rows_", NULL, 0x2, "I", NULL, NULL,  },
    { "matchLRC_", NULL, 0x1a, "Lcom.google.gwt.regexp.shared.RegExp;", &GeogebraCommonKernelAlgosAlgoTableText_matchLRC_, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTableText = { 2, "AlgoTableText", "geogebra.common.kernel.algos", NULL, 0x1, 21, methods, 20, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoTableText;
}

@end

void GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, geoList, args);
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoTableText *new_GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoTableText *self = [GeogebraCommonKernelAlgosAlgoTableText alloc];
  GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, label, geoList, args);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoTableText_setAndConsume_sb_(self, new_JavaLangStringBuffer_init());
  GeogebraCommonKernelAlgosAlgoTableText_set_verticalLinesArray_(self, nil);
  GeogebraCommonKernelAlgosAlgoTableText_set_horizontalLinesArray_(self, nil);
  GeogebraCommonKernelAlgosAlgoTableText_set_geoList_(self, geoList);
  GeogebraCommonKernelAlgosAlgoTableText_set_args_(self, args);
  GeogebraCommonKernelAlgosAlgoTableText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setAbsoluteScreenLocWithInt:0 withInt:0];
  [self->text_ setAbsoluteScreenLocActiveWithBoolean:YES];
  [self->text_ setFormulaTypeWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_LATEX()];
  [self->text_ setLaTeXWithBoolean:YES withBoolean:NO];
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoTableText_compute(self);
  [self->text_ setSerifFontWithBoolean:NO];
}

GeogebraCommonKernelAlgosAlgoTableText *new_GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geoList, GeogebraCommonKernelGeosGeoText *args) {
  GeogebraCommonKernelAlgosAlgoTableText *self = [GeogebraCommonKernelAlgosAlgoTableText alloc];
  GeogebraCommonKernelAlgosAlgoTableText_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoText_(self, cons, geoList, args);
  return self;
}

void GeogebraCommonKernelAlgosAlgoTableText_parseArgs(GeogebraCommonKernelAlgosAlgoTableText *self) {
  jint tableColumns = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  GeogebraCommonKernelAlgosAlgoTableText_set_alignment_(self, GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_HORIZONTAL());
  self->verticalLines_ = NO;
  self->horizontalLines_ = NO;
  GeogebraCommonKernelAlgosAlgoTableText_set_justification_(self, @"l");
  GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left.");
  GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right.");
  if (self->args_ != nil) {
    NSString *optionsStr = [self->args_ getTextString];
    if ([((NSString *) nil_chk(optionsStr)) indexOfString:@"v"] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_alignment_(self, GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_VERTICAL());
    }
    jint pos;
    if ((pos = [optionsStr indexOfString:@"|"]) > -1 && [optionsStr indexOfString:@"||"] == -1) {
      self->verticalLines_ = YES;
      GeogebraCommonKernelAlgosAlgoTableText_setAndConsume_verticalLinesArray_(self, new_JavaLangStringBuilder_init());
      for (jint i = pos + 1; i < ((jint) [optionsStr length]); i++) {
        jchar ch = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(optionsStr, i);
        if (ch == '0' || ch == '1') {
          [self->verticalLinesArray_ appendWithChar:ch];
        }
        else {
          break;
        }
      }
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"verticalLinesArray = ", [self->verticalLinesArray_ description]));
    }
    if ((pos = [optionsStr indexOfString:@"_"]) > -1) {
      self->horizontalLines_ = YES;
      GeogebraCommonKernelAlgosAlgoTableText_setAndConsume_horizontalLinesArray_(self, new_JavaLangStringBuilder_init());
      for (jint i = pos + 1; i < ((jint) [optionsStr length]); i++) {
        jchar ch = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(optionsStr, i);
        if (ch == '0' || ch == '1') {
          [self->horizontalLinesArray_ appendWithChar:ch];
        }
        else {
          break;
        }
      }
      GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"horizontalLinesArray = ", [self->horizontalLinesArray_ description]));
    }
    self->verticalLinesJustEdges_ = ([optionsStr indexOfString:@"/"] > -1);
    self->horizontalLinesJustEdges_ = ([optionsStr indexOfString:@"-"] > -1);
    ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelAlgosAlgoTableText_matchLRC_)) execWithNSString:optionsStr];
    GeogebraCommonKernelAlgosAlgoTableText_set_justification_(self, [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:2]);
    if ([@"" isEqual:self->justification_]) {
      GeogebraCommonKernelAlgosAlgoTableText_set_justification_(self, @"l");
    }
    if ([optionsStr indexOfString:@"||||"] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left| \\left|");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right| \\right|");
      GeogebraCommonKernelAlgosAlgoTableText_set_openString_(self, @"||");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeString_(self, @"||");
    }
    else if ([optionsStr indexOfString:@"||"] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left|");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right|");
      GeogebraCommonKernelAlgosAlgoTableText_set_openString_(self, @"|");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeString_(self, @"|");
    }
    else if ([optionsStr indexOf:'('] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left(");
      GeogebraCommonKernelAlgosAlgoTableText_set_openString_(self, @"(");
    }
    else if ([optionsStr indexOf:'['] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left[");
      GeogebraCommonKernelAlgosAlgoTableText_set_openString_(self, @"[");
    }
    else if ([optionsStr indexOf:'{'] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"\\left\\{");
      GeogebraCommonKernelAlgosAlgoTableText_set_openString_(self, @"{");
    }
    if ([optionsStr indexOf:')'] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right)");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeString_(self, @")");
    }
    else if ([optionsStr indexOf:']'] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right]");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeString_(self, @"]");
    }
    else if ([optionsStr indexOf:'}'] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"\\right\\}");
      GeogebraCommonKernelAlgosAlgoTableText_set_closeString_(self, @"}");
    }
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:tableColumns - 1])) isGeoText]) {
    GeogebraCommonKernelGeosGeoText *options = (GeogebraCommonKernelGeosGeoText *) check_class_cast([self->geoList_ getWithInt:tableColumns - 1], [GeogebraCommonKernelGeosGeoText class]);
    NSString *optionsStr = [((GeogebraCommonKernelGeosGeoText *) nil_chk(options)) getTextString];
    if ([((NSString *) nil_chk(optionsStr)) indexOfString:@"h"] > -1) {
      GeogebraCommonKernelAlgosAlgoTableText_set_alignment_(self, GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_HORIZONTAL());
    }
    ComGoogleGwtRegexpSharedMatchResult *matcher = [((ComGoogleGwtRegexpSharedRegExp *) nil_chk(GeogebraCommonKernelAlgosAlgoTableText_matchLRC_)) execWithNSString:optionsStr];
    GeogebraCommonKernelAlgosAlgoTableText_set_justification_(self, [((ComGoogleGwtRegexpSharedMatchResult *) nil_chk(matcher)) getGroupWithInt:2]);
    if ([@"" isEqual:self->justification_]) {
      GeogebraCommonKernelAlgosAlgoTableText_set_justification_(self, @"l");
    }
  }
  if ([self->openBracket_ isEqual:@"\\left."] && [self->closeBracket_ isEqual:@"\\right."]) {
    GeogebraCommonKernelAlgosAlgoTableText_set_openBracket_(self, @"");
    GeogebraCommonKernelAlgosAlgoTableText_set_closeBracket_(self, @"");
  }
}

jchar GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(id o, jint i) {
  GeogebraCommonKernelAlgosAlgoTableText_initialize();
  if (o == nil) {
    return '1';
  }
  NSString *str = [nil_chk(o) description];
  if (i < 0 || i >= ((jint) [((NSString *) nil_chk(str)) length])) {
    return '1';
  }
  return [((NSString *) nil_chk(str)) charAtWithInt:i];
}

void GeogebraCommonKernelAlgosAlgoTableText_compute(GeogebraCommonKernelAlgosAlgoTableText *self) {
  self->columns_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) size];
  if (![self->geoList_ isDefined] || self->columns_ == 0) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
    return;
  }
  GeogebraCommonKernelAlgosAlgoTableText_parseArgs(self);
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->geoList_ getWithInt:self->columns_ - 1])) isGeoText]) {
    self->columns_--;
  }
  if (self->columns_ == 0) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
    return;
  }
  if (self->geoLists_ == nil || self->geoLists_->size_ < self->columns_) {
    GeogebraCommonKernelAlgosAlgoTableText_setAndConsume_geoLists_(self, [IOSObjectArray newArrayWithLength:self->columns_ type:GeogebraCommonKernelGeosGeoList_class_()]);
  }
  self->rows_ = 0;
  for (jint c = 0; c < self->columns_; c++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->geoList_ getWithInt:c];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoList]) {
      [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
      return;
    }
    IOSObjectArray_Set(nil_chk(self->geoLists_), c, (GeogebraCommonKernelGeosGeoList *) check_class_cast([self->geoList_ getWithInt:c], [GeogebraCommonKernelGeosGeoList class]));
    if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(self->geoLists_, c))) size] > self->rows_) self->rows_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(self->geoLists_, c))) size];
  }
  if (self->rows_ == 0) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) setTextStringWithNSString:@""];
    return;
  }
  [((JavaLangStringBuffer *) nil_chk(self->sb_)) setLengthWithInt:0];
  GeogebraCommonKernelStringTemplate *tpl = [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getStringTemplate];
  if ([((GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum *) nil_chk([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) getStringType])) isEqual:GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_MATHML()]) {
    GeogebraCommonKernelAlgosAlgoTableText_mathmlWithGeogebraCommonKernelStringTemplate_(self, tpl);
  }
  else {
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) isHTML5Applet]) {
      GeogebraCommonKernelAlgosAlgoTableText_latexMQWithGeogebraCommonKernelStringTemplate_(self, tpl);
    }
    else {
      GeogebraCommonKernelAlgosAlgoTableText_latexWithGeogebraCommonKernelStringTemplate_(self, tpl);
    }
  }
  [self->text_ setTextStringWithNSString:[self->sb_ description]];
}

void GeogebraCommonKernelAlgosAlgoTableText_mathmlWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl) {
  if (self->alignment_ == GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_VERTICAL()) {
    [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"<matrix>"];
    for (jint r = 0; r < self->rows_; r++) {
      [self->sb_ appendWithNSString:@"<matrixrow>"];
      for (jint c = 0; c < self->columns_; c++) {
        GeogebraCommonKernelAlgosAlgoTableText_addCellMathMLWithInt_withInt_withGeogebraCommonKernelStringTemplate_(self, c, r, tpl);
      }
      [self->sb_ appendWithNSString:@"</matrixrow>"];
    }
    [self->sb_ appendWithNSString:@"</matrix>"];
  }
  else {
    [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"<matrix>"];
    for (jint c = 0; c < self->columns_; c++) {
      [self->sb_ appendWithNSString:@"<matrixrow>"];
      for (jint r = 0; r < self->rows_; r++) {
        GeogebraCommonKernelAlgosAlgoTableText_addCellMathMLWithInt_withInt_withGeogebraCommonKernelStringTemplate_(self, c, r, tpl);
      }
      [self->sb_ appendWithNSString:@"</matrixrow>"];
    }
    [self->sb_ appendWithNSString:@"</matrix>"];
  }
}

void GeogebraCommonKernelAlgosAlgoTableText_latexWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithChar:'{'];
  [self->sb_ appendWithNSString:self->openBracket_];
  [self->sb_ appendWithNSString:@"\\begin{array}{"];
  if (self->alignment_ == GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_VERTICAL()) {
    for (jint c = 0; c < self->columns_; c++) {
      if (self->verticalLines_ && (!self->verticalLinesJustEdges_ || c == 0) && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, c) == '1') {
        [self->sb_ appendWithNSString:@"|"];
      }
      [self->sb_ appendWithChar:GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(self, c)];
    }
    if (self->verticalLines_ && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, self->columns_) == '1') {
      [self->sb_ appendWithNSString:@"|"];
    }
    [self->sb_ appendWithNSString:@"}"];
    if (self->horizontalLines_ && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, 0) == '1') {
      [self->sb_ appendWithNSString:@"\\hline "];
    }
    for (jint r = 0; r < self->rows_; r++) {
      for (jint c = 0; c < self->columns_; c++) {
        jboolean finalCell = c == self->columns_ - 1;
        GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(self, c, r, finalCell, tpl);
      }
      [self->sb_ appendWithNSString:@" \\\\ "];
      if (self->horizontalLines_ && (!self->horizontalLinesJustEdges_ || r + 1 == self->rows_) && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, r + 1) == '1') {
        [self->sb_ appendWithNSString:@"\\hline "];
      }
    }
  }
  else {
    for (jint c = 0; c < self->rows_; c++) {
      if (self->verticalLines_ && (!self->verticalLinesJustEdges_ || c == 0) && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, c) == '1') {
        [self->sb_ appendWithNSString:@"|"];
      }
      [self->sb_ appendWithChar:GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(self, c)];
    }
    if (self->verticalLines_ && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, self->rows_) == '1') {
      [self->sb_ appendWithNSString:@"|"];
    }
    [self->sb_ appendWithNSString:@"}"];
    if (self->horizontalLines_ && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, 0) == '1') {
      [self->sb_ appendWithNSString:@"\\hline "];
    }
    for (jint c = 0; c < self->columns_; c++) {
      for (jint r = 0; r < self->rows_; r++) {
        jboolean finalCell = r == self->rows_ - 1;
        GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(self, c, r, finalCell, tpl);
      }
      [self->sb_ appendWithNSString:@" \\\\ "];
      if (self->horizontalLines_ && (!self->horizontalLinesJustEdges_ || c + 1 == self->columns_) && GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, c + 1) == '1') {
        [self->sb_ appendWithNSString:@"\\hline "];
      }
    }
  }
  [self->sb_ appendWithNSString:@"\\end{array}"];
  [self->sb_ appendWithNSString:self->closeBracket_];
  [self->sb_ appendWithChar:'}'];
}

jchar GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c) {
  if (c < 0 || c >= ((jint) [((NSString *) nil_chk(self->justification_)) length])) {
    return [((NSString *) nil_chk(self->justification_)) charAtWithInt:0];
  }
  return [((NSString *) nil_chk(self->justification_)) charAtWithInt:c];
}

void GeogebraCommonKernelAlgosAlgoTableText_latexMQWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, GeogebraCommonKernelStringTemplate *tpl) {
  [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithChar:'{'];
  jint closingSignsNeeded = 0;
  if (![@"" isEqual:self->openBracket_]) {
    if (![@"\\left." isEqual:self->openBracket_]) {
      if ([@"||" isEqual:self->openString_]) {
        [self->sb_ appendWithNSString:@" \\opendoubleonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"|" isEqual:self->openString_]) {
        [self->sb_ appendWithNSString:@" \\openlineonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"(" isEqual:self->openString_]) {
        [self->sb_ appendWithNSString:@" \\openparenonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"[" isEqual:self->openString_]) {
        [self->sb_ appendWithNSString:@" \\openbracketonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"{" isEqual:self->openString_]) {
        [self->sb_ appendWithNSString:@" \\openbraceonly{ "];
        closingSignsNeeded++;
      }
    }
    if (![@"\\right." isEqual:self->closeBracket_]) {
      if ([@"||" isEqual:self->closeString_]) {
        [self->sb_ appendWithNSString:@" \\closedoubleonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"|" isEqual:self->closeString_]) {
        [self->sb_ appendWithNSString:@" \\closelineonly{ "];
        closingSignsNeeded++;
      }
      else if ([@")" isEqual:self->closeString_]) {
        [self->sb_ appendWithNSString:@" \\closeparenonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"]" isEqual:self->closeString_]) {
        [self->sb_ appendWithNSString:@" \\closebracketonly{ "];
        closingSignsNeeded++;
      }
      else if ([@"}" isEqual:self->closeString_]) {
        [self->sb_ appendWithNSString:@" \\closebraceonly{ "];
        closingSignsNeeded++;
      }
    }
  }
  [self->sb_ appendWithNSString:@" \\ggbtable{ "];
  if (self->alignment_ == GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_get_VERTICAL()) {
    for (jint r = 0; r < self->rows_; r++) {
      jchar c0 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, r);
      jchar c1 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, r + 1);
      if (!self->horizontalLines_) {
        [self->sb_ appendWithNSString:@"\\ggbtr{"];
      }
      else if (self->rows_ == 1 && (self->horizontalLinesJustEdges_ || c0 == '1' || c1 == '1')) {
        if (self->verticalLinesJustEdges_ || (c0 == '1' && c1 == '1')) {
          [self->sb_ appendWithNSString:@"\\ggbtrl{"];
        }
        else if (c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
        }
        else if (c1 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
      }
      else if (r == 0 && (self->horizontalLinesJustEdges_ || c0 == '1')) {
        [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
      }
      else if (r == self->rows_ - 1) {
        if (self->horizontalLinesJustEdges_) {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
        else if (c1 == '1' && c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrl{"];
        }
        else if (c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
        }
        else if (c1 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
        else {
          [self->sb_ appendWithNSString:@"\\ggbtr{"];
        }
      }
      else if (!self->horizontalLinesJustEdges_ && c0 == '1') {
        [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
      }
      else {
        [self->sb_ appendWithNSString:@"\\ggbtr{"];
      }
      for (jint c = 0; c < self->columns_; c++) {
        c0 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, c);
        c1 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, c + 1);
        NSString *jc = [((NSString *) nil_chk(NSString_valueOfChar_(GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(self, c)))) uppercaseString];
        if ([@"C" isEqual:jc]) {
          jc = @"";
        }
        if (!self->verticalLines_) {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
        }
        else if (self->columns_ == 1 && (self->verticalLinesJustEdges_ || c0 == '1' || c1 == '1')) {
          if (self->verticalLinesJustEdges_ || (c0 == '1' && c1 == '1')) {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdl", jc, '{')];
          }
          else if (c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
          }
          else if (c1 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
        }
        else if (c == 0 && (self->verticalLinesJustEdges_ || c0 == '1')) {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
        }
        else if (c == self->columns_ - 1) {
          if (self->verticalLinesJustEdges_) {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
          else if (c1 == '1' && c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdl", jc, '{')];
          }
          else if (c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
          }
          else if (c1 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
          else {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
          }
        }
        else if (!self->verticalLinesJustEdges_ && c0 == '1') {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
        }
        else {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
        }
        GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(self, c, r, YES, tpl);
        [self->sb_ appendWithNSString:@"}"];
      }
      [self->sb_ appendWithNSString:@"}"];
    }
  }
  else {
    for (jint c = 0; c < self->columns_; c++) {
      jchar c0 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, c);
      jchar c1 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->horizontalLinesArray_, c + 1);
      if (!self->horizontalLines_) {
        [self->sb_ appendWithNSString:@"\\ggbtr{"];
      }
      else if (self->columns_ == 1 && (self->horizontalLinesJustEdges_ || c0 == '1' || c1 == '1')) {
        if (self->horizontalLinesJustEdges_ || (c0 == '1' && c1 == '1')) {
          [self->sb_ appendWithNSString:@"\\ggbtrl{"];
        }
        else if (c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
        }
        else if (c1 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
      }
      else if (c == 0 && (self->horizontalLinesJustEdges_ || c0 == '1')) {
        [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
      }
      else if (c == self->columns_ - 1) {
        if (self->horizontalLinesJustEdges_) {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
        else if (c1 == '1' && c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrl{"];
        }
        else if (c0 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
        }
        else if (c1 == '1') {
          [self->sb_ appendWithNSString:@"\\ggbtrlb{"];
        }
        else {
          [self->sb_ appendWithNSString:@"\\ggbtr{"];
        }
      }
      else if (!self->horizontalLinesJustEdges_ && c0 == '1') {
        [self->sb_ appendWithNSString:@"\\ggbtrlt{"];
      }
      else {
        [self->sb_ appendWithNSString:@"\\ggbtr{"];
      }
      for (jint r = 0; r < self->rows_; r++) {
        c0 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, r);
        c1 = GeogebraCommonKernelAlgosAlgoTableText_charAtWithId_withInt_(self->verticalLinesArray_, r + 1);
        NSString *jc = [((NSString *) nil_chk(NSString_valueOfChar_(GeogebraCommonKernelAlgosAlgoTableText_getJustificationWithInt_(self, r)))) uppercaseString];
        if ([@"C" isEqual:jc]) {
          jc = @"";
        }
        if (!self->verticalLines_) {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
        }
        else if (self->rows_ == 1 && (self->verticalLinesJustEdges_ || c0 == '1' || c1 == '1')) {
          if (self->verticalLinesJustEdges_ || (c0 == '1' && c1 == '1')) {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdl", jc, '{')];
          }
          else if (c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
          }
          else if (c1 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
        }
        else if (r == 0 && (self->verticalLinesJustEdges_ || c0 == '1')) {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
        }
        else if (r == self->rows_ - 1) {
          if (self->verticalLinesJustEdges_) {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
          else if (c1 == '1' && c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdl", jc, '{')];
          }
          else if (c0 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
          }
          else if (c1 == '1') {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdlr", jc, '{')];
          }
          else {
            [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
          }
        }
        else if (!self->verticalLinesJustEdges_ && c0 == '1') {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtdll", jc, '{')];
        }
        else {
          [self->sb_ appendWithNSString:JreStrcat("$$C", @"\\ggbtd", jc, '{')];
        }
        GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(self, c, r, YES, tpl);
        [self->sb_ appendWithNSString:@"}"];
      }
      [self->sb_ appendWithNSString:@"}"];
    }
  }
  [self->sb_ appendWithNSString:@"} "];
  while (closingSignsNeeded > 0) {
    [self->sb_ appendWithNSString:@"} "];
    closingSignsNeeded--;
  }
  [self->sb_ appendWithChar:'}'];
}

void GeogebraCommonKernelAlgosAlgoTableText_addCellLaTeXWithInt_withInt_withBoolean_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c, jint r, jboolean finalCell, GeogebraCommonKernelStringTemplate *tpl) {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(nil_chk(self->geoLists_), c))) size] > r) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(self->geoLists_, c))) getWithInt:r];
    GeogebraCommonAwtGColor *col = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getObjectColor];
    if ([((GeogebraCommonAwtGColor *) nil_chk(GeogebraCommonAwtGColor_get_black_())) isEqual:col] || ![geo1 isLabelSet]) {
      col = nil;
    }
    if (col != nil) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"\\textcolor{#"];
      [self->sb_ appendWithNSString:GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_(col)];
      [self->sb_ appendWithNSString:@"}{"];
    }
    NSString *text1 = [geo1 toLaTeXStringWithBoolean:NO withGeogebraCommonKernelStringTemplate:tpl];
    if ([@" " isEqual:text1] || [@"" isEqual:text1]) {
      text1 = @"\\;";
    }
    if ((([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo1] && ![((id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosTextProperties))) isLaTeXTextCommand]) && (!([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) || ![((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoText class])) isLaTeX])) && [((NSString *) nil_chk(text1)) indexOfString:@" "] > -1 && [text1 indexOfString:@"^"] == -1 && [text1 indexOfString:@"{"] == -1 && [text1 indexOfString:@"}"] == -1 && [text1 indexOfString:@"+"] == -1 && [text1 indexOfString:@"-"] == -1 && [text1 indexOfString:@"\\"] == -1) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"\\text{"];
      [self->sb_ appendWithNSString:text1];
      [self->sb_ appendWithNSString:@"}"];
    }
    else {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:text1];
    }
    if (col != nil) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithChar:'}'];
    }
  }
  if (!finalCell) [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"&"];
}

void GeogebraCommonKernelAlgosAlgoTableText_addCellMathMLWithInt_withInt_withGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelAlgosAlgoTableText *self, jint c, jint r, GeogebraCommonKernelStringTemplate *tpl) {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(nil_chk(self->geoLists_), c))) size] > r) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [((GeogebraCommonKernelGeosGeoList *) nil_chk(IOSObjectArray_Get(self->geoLists_, c))) getWithInt:r];
    NSString *textGeo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) toLaTeXStringWithBoolean:NO withGeogebraCommonKernelStringTemplate:tpl];
    if ([((NSString *) nil_chk(textGeo)) hasPrefix:@"<apply>"]) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:textGeo];
    }
    else if (GeogebraCommonUtilStringUtil_isNumberWithNSString_(textGeo)) {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"<cn>"];
      [self->sb_ appendWithNSString:textGeo];
      [self->sb_ appendWithNSString:@"</cn>"];
    }
    else {
      [((JavaLangStringBuffer *) nil_chk(self->sb_)) appendWithNSString:@"<ci>"];
      [self->sb_ appendWithNSString:textGeo];
      [self->sb_ appendWithNSString:@"</ci>"];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTableText)

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum)

GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values_[2];

@implementation GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum

- (instancetype)initWithNSString:(NSString *)__name
                         withInt:(jint)__ordinal {
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

IOSObjectArray *GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values() {
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initialize();
  return [IOSObjectArray arrayWithObjects:GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values_ count:2 type:GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_class_()];
}

+ (IOSObjectArray *)values {
  return GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values();
}

+ (GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *)valueOfWithNSString:(NSString *)name {
  return GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_valueOfWithNSString_(name);
}

GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_valueOfWithNSString_(NSString *name) {
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initialize();
  for (int i = 0; i < 2; i++) {
    GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *e = GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw [[[JavaLangIllegalArgumentException alloc] initWithNSString:name] autorelease];
  return nil;
}

- (id)copyWithZone:(NSZone *)zone {
  return [self retain];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum class]) {
    GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_VERTICAL = new_GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(@"VERTICAL", 0);
    GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_HORIZONTAL = new_GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(@"HORIZONTAL", 1);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "VERTICAL", "VERTICAL", 0x4019, "Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;", &GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_VERTICAL, NULL,  },
    { "HORIZONTAL", "HORIZONTAL", 0x4019, "Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;", &GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_HORIZONTAL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.algos.AlgoTableText$Alignment;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum = { 2, "Alignment", "geogebra.common.kernel.algos", "AlgoTableText", 0x401a, 0, NULL, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/lang/Enum<Lgeogebra/common/kernel/algos/AlgoTableText$Alignment;>;" };
  return &_GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum;
}

@end

void GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *new_GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum *self = [GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum alloc];
  GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum_initWithNSString_withInt_(self, __name, __ordinal);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoTableText_AlignmentEnum)
