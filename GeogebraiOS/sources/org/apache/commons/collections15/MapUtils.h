//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/MapUtils.java
//

#ifndef _OrgApacheCommonsCollections15MapUtils_H_
#define _OrgApacheCommonsCollections15MapUtils_H_

#include "J2ObjC_header.h"

@class IOSClass;
@class JavaIoPrintStream;
@class JavaLangBoolean;
@class JavaLangByte;
@class JavaLangDouble;
@class JavaLangException;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaLangShort;
@class JavaUtilProperties;
@class JavaUtilResourceBundle;
@protocol JavaUtilMap;
@protocol JavaUtilSortedMap;
@protocol OrgApacheCommonsCollections15Factory;
@protocol OrgApacheCommonsCollections15Predicate;
@protocol OrgApacheCommonsCollections15Transformer;

@interface OrgApacheCommonsCollections15MapUtils : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)debugPrintWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                                 withId:(id)label
                        withJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)fixedSizeMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilSortedMap>)fixedSizeSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

+ (JavaLangBoolean *)getBooleanWithJavaUtilMap:(id<JavaUtilMap>)map
                                        withId:(id)key;

+ (JavaLangBoolean *)getBooleanWithJavaUtilMap:(id<JavaUtilMap>)map
                                        withId:(id)key
                           withJavaLangBoolean:(JavaLangBoolean *)defaultValue;

+ (jboolean)getBooleanValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key;

+ (jboolean)getBooleanValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key
                               withBoolean:(jboolean)defaultValue;

+ (JavaLangByte *)getByteWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key;

+ (JavaLangByte *)getByteWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key
                        withJavaLangByte:(JavaLangByte *)defaultValue;

+ (jbyte)getByteValueWithJavaUtilMap:(id<JavaUtilMap>)map
                              withId:(id)key;

+ (jbyte)getByteValueWithJavaUtilMap:(id<JavaUtilMap>)map
                              withId:(id)key
                            withByte:(jbyte)defaultValue;

+ (JavaLangDouble *)getDoubleWithJavaUtilMap:(id<JavaUtilMap>)map
                                      withId:(id)key;

+ (JavaLangDouble *)getDoubleWithJavaUtilMap:(id<JavaUtilMap>)map
                                      withId:(id)key
                          withJavaLangDouble:(JavaLangDouble *)defaultValue;

+ (jdouble)getDoubleValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key;

+ (jdouble)getDoubleValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key
                              withDouble:(jdouble)defaultValue;

+ (JavaLangFloat *)getFloatWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key;

+ (JavaLangFloat *)getFloatWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key
                         withJavaLangFloat:(JavaLangFloat *)defaultValue;

+ (jfloat)getFloatValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key;

+ (jfloat)getFloatValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key
                             withFloat:(jfloat)defaultValue;

+ (JavaLangInteger *)getIntegerWithJavaUtilMap:(id<JavaUtilMap>)map
                                        withId:(id)key;

+ (JavaLangInteger *)getIntegerWithJavaUtilMap:(id<JavaUtilMap>)map
                                        withId:(id)key
                           withJavaLangInteger:(JavaLangInteger *)defaultValue;

+ (jint)getIntValueWithJavaUtilMap:(id<JavaUtilMap>)map
                            withId:(id)key;

+ (jint)getIntValueWithJavaUtilMap:(id<JavaUtilMap>)map
                            withId:(id)key
                           withInt:(jint)defaultValue;

+ (JavaLangLong *)getLongWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key;

+ (JavaLangLong *)getLongWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key
                        withJavaLangLong:(JavaLangLong *)defaultValue;

+ (jlong)getLongValueWithJavaUtilMap:(id<JavaUtilMap>)map
                              withId:(id)key;

+ (jlong)getLongValueWithJavaUtilMap:(id<JavaUtilMap>)map
                              withId:(id)key
                            withLong:(jlong)defaultValue;

+ (id<JavaUtilMap>)getMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key;

+ (id<JavaUtilMap>)getMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                  withId:(id)key
                         withJavaUtilMap:(id<JavaUtilMap>)defaultValue;

+ (NSNumber *)getNumberWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key;

+ (NSNumber *)getNumberWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key
                          withNSNumber:(NSNumber *)defaultValue;

+ (id)getObjectWithJavaUtilMap:(id<JavaUtilMap>)map
                        withId:(id)key;

+ (id)getObjectWithJavaUtilMap:(id<JavaUtilMap>)map
                        withId:(id)key
                        withId:(id)defaultValue;

+ (JavaLangShort *)getShortWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key;

+ (JavaLangShort *)getShortWithJavaUtilMap:(id<JavaUtilMap>)map
                                    withId:(id)key
                         withJavaLangShort:(JavaLangShort *)defaultValue;

+ (jshort)getShortValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key;

+ (jshort)getShortValueWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key
                             withShort:(jshort)defaultValue;

+ (NSString *)getStringWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key
                          withNSString:(NSString *)defaultValue;

+ (NSString *)getStringWithJavaUtilMap:(id<JavaUtilMap>)map
                                withId:(id)key;

+ (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)lazyMapWithJavaUtilMap:(id<JavaUtilMap>)map
 withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)factory;

+ (id<JavaUtilSortedMap>)lazySortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                   withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)factory;

+ (id<JavaUtilMap>)orderedMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)predicatedMapWithJavaUtilMap:(id<JavaUtilMap>)map
     withOrgApacheCommonsCollections15Predicate:(id<OrgApacheCommonsCollections15Predicate>)keyPred
     withOrgApacheCommonsCollections15Predicate:(id<OrgApacheCommonsCollections15Predicate>)valuePred;

+ (id<JavaUtilSortedMap>)predicatedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                       withOrgApacheCommonsCollections15Predicate:(id<OrgApacheCommonsCollections15Predicate>)keyPred
                       withOrgApacheCommonsCollections15Predicate:(id<OrgApacheCommonsCollections15Predicate>)valuePred;

+ (void)safeAddToMapWithJavaUtilMap:(id<JavaUtilMap>)map
                             withId:(id)key
                             withId:(id)value;

+ (id<JavaUtilMap>)synchronizedMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)synchronizedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

+ (id<JavaUtilMap>)toMapWithJavaUtilResourceBundle:(JavaUtilResourceBundle *)resourceBundle;

+ (JavaUtilProperties *)toPropertiesWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)transformedMapWithJavaUtilMap:(id<JavaUtilMap>)map
    withOrgApacheCommonsCollections15Transformer:(id<OrgApacheCommonsCollections15Transformer>)keyTransformer
    withOrgApacheCommonsCollections15Transformer:(id<OrgApacheCommonsCollections15Transformer>)valueTransformer;

+ (id<JavaUtilSortedMap>)transformedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                      withOrgApacheCommonsCollections15Transformer:(id<OrgApacheCommonsCollections15Transformer>)keyTransformer
                      withOrgApacheCommonsCollections15Transformer:(id<OrgApacheCommonsCollections15Transformer>)valueTransformer;

+ (id<JavaUtilMap>)typedMapWithJavaUtilMap:(id<JavaUtilMap>)map
                              withIOSClass:(IOSClass *)keyType
                              withIOSClass:(IOSClass *)valueType;

+ (id<JavaUtilSortedMap>)typedSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map
                                                withIOSClass:(IOSClass *)keyType
                                                withIOSClass:(IOSClass *)valueType;

+ (id<JavaUtilMap>)unmodifiableMapWithJavaUtilMap:(id<JavaUtilMap>)map;

+ (id<JavaUtilMap>)unmodifiableSortedMapWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)map;

+ (void)verbosePrintWithJavaIoPrintStream:(JavaIoPrintStream *)outArg
                                   withId:(id)label
                          withJavaUtilMap:(id<JavaUtilMap>)map;

#pragma mark Protected

+ (void)logInfoWithJavaLangException:(JavaLangException *)ex;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsCollections15MapUtils)

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_EMPTY_MAP_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapUtils, EMPTY_MAP_, id<JavaUtilMap>)

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_EMPTY_SORTED_MAP_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15MapUtils, EMPTY_SORTED_MAP_, id<JavaUtilSortedMap>)

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapUtils_init(OrgApacheCommonsCollections15MapUtils *self);

FOUNDATION_EXPORT OrgApacheCommonsCollections15MapUtils *new_OrgApacheCommonsCollections15MapUtils_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT id OrgApacheCommonsCollections15MapUtils_getObjectWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT NSString *OrgApacheCommonsCollections15MapUtils_getStringWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangBoolean *OrgApacheCommonsCollections15MapUtils_getBooleanWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT NSNumber *OrgApacheCommonsCollections15MapUtils_getNumberWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangByte *OrgApacheCommonsCollections15MapUtils_getByteWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangShort *OrgApacheCommonsCollections15MapUtils_getShortWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangInteger *OrgApacheCommonsCollections15MapUtils_getIntegerWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangLong *OrgApacheCommonsCollections15MapUtils_getLongWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangFloat *OrgApacheCommonsCollections15MapUtils_getFloatWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT JavaLangDouble *OrgApacheCommonsCollections15MapUtils_getDoubleWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_getMapWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT id OrgApacheCommonsCollections15MapUtils_getObjectWithJavaUtilMap_withId_withId_(id<JavaUtilMap> map, id key, id defaultValue);

FOUNDATION_EXPORT NSString *OrgApacheCommonsCollections15MapUtils_getStringWithJavaUtilMap_withId_withNSString_(id<JavaUtilMap> map, id key, NSString *defaultValue);

FOUNDATION_EXPORT JavaLangBoolean *OrgApacheCommonsCollections15MapUtils_getBooleanWithJavaUtilMap_withId_withJavaLangBoolean_(id<JavaUtilMap> map, id key, JavaLangBoolean *defaultValue);

FOUNDATION_EXPORT NSNumber *OrgApacheCommonsCollections15MapUtils_getNumberWithJavaUtilMap_withId_withNSNumber_(id<JavaUtilMap> map, id key, NSNumber *defaultValue);

FOUNDATION_EXPORT JavaLangByte *OrgApacheCommonsCollections15MapUtils_getByteWithJavaUtilMap_withId_withJavaLangByte_(id<JavaUtilMap> map, id key, JavaLangByte *defaultValue);

FOUNDATION_EXPORT JavaLangShort *OrgApacheCommonsCollections15MapUtils_getShortWithJavaUtilMap_withId_withJavaLangShort_(id<JavaUtilMap> map, id key, JavaLangShort *defaultValue);

FOUNDATION_EXPORT JavaLangInteger *OrgApacheCommonsCollections15MapUtils_getIntegerWithJavaUtilMap_withId_withJavaLangInteger_(id<JavaUtilMap> map, id key, JavaLangInteger *defaultValue);

FOUNDATION_EXPORT JavaLangLong *OrgApacheCommonsCollections15MapUtils_getLongWithJavaUtilMap_withId_withJavaLangLong_(id<JavaUtilMap> map, id key, JavaLangLong *defaultValue);

FOUNDATION_EXPORT JavaLangFloat *OrgApacheCommonsCollections15MapUtils_getFloatWithJavaUtilMap_withId_withJavaLangFloat_(id<JavaUtilMap> map, id key, JavaLangFloat *defaultValue);

FOUNDATION_EXPORT JavaLangDouble *OrgApacheCommonsCollections15MapUtils_getDoubleWithJavaUtilMap_withId_withJavaLangDouble_(id<JavaUtilMap> map, id key, JavaLangDouble *defaultValue);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_getMapWithJavaUtilMap_withId_withJavaUtilMap_(id<JavaUtilMap> map, id key, id<JavaUtilMap> defaultValue);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCollections15MapUtils_getBooleanValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jbyte OrgApacheCommonsCollections15MapUtils_getByteValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jshort OrgApacheCommonsCollections15MapUtils_getShortValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jint OrgApacheCommonsCollections15MapUtils_getIntValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jlong OrgApacheCommonsCollections15MapUtils_getLongValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jfloat OrgApacheCommonsCollections15MapUtils_getFloatValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jdouble OrgApacheCommonsCollections15MapUtils_getDoubleValueWithJavaUtilMap_withId_(id<JavaUtilMap> map, id key);

FOUNDATION_EXPORT jboolean OrgApacheCommonsCollections15MapUtils_getBooleanValueWithJavaUtilMap_withId_withBoolean_(id<JavaUtilMap> map, id key, jboolean defaultValue);

FOUNDATION_EXPORT jbyte OrgApacheCommonsCollections15MapUtils_getByteValueWithJavaUtilMap_withId_withByte_(id<JavaUtilMap> map, id key, jbyte defaultValue);

FOUNDATION_EXPORT jshort OrgApacheCommonsCollections15MapUtils_getShortValueWithJavaUtilMap_withId_withShort_(id<JavaUtilMap> map, id key, jshort defaultValue);

FOUNDATION_EXPORT jint OrgApacheCommonsCollections15MapUtils_getIntValueWithJavaUtilMap_withId_withInt_(id<JavaUtilMap> map, id key, jint defaultValue);

FOUNDATION_EXPORT jlong OrgApacheCommonsCollections15MapUtils_getLongValueWithJavaUtilMap_withId_withLong_(id<JavaUtilMap> map, id key, jlong defaultValue);

FOUNDATION_EXPORT jfloat OrgApacheCommonsCollections15MapUtils_getFloatValueWithJavaUtilMap_withId_withFloat_(id<JavaUtilMap> map, id key, jfloat defaultValue);

FOUNDATION_EXPORT jdouble OrgApacheCommonsCollections15MapUtils_getDoubleValueWithJavaUtilMap_withId_withDouble_(id<JavaUtilMap> map, id key, jdouble defaultValue);

FOUNDATION_EXPORT JavaUtilProperties *OrgApacheCommonsCollections15MapUtils_toPropertiesWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_toMapWithJavaUtilResourceBundle_(JavaUtilResourceBundle *resourceBundle);

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapUtils_verbosePrintWithJavaIoPrintStream_withId_withJavaUtilMap_(JavaIoPrintStream *outArg, id label, id<JavaUtilMap> map);

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapUtils_debugPrintWithJavaIoPrintStream_withId_withJavaUtilMap_(JavaIoPrintStream *outArg, id label, id<JavaUtilMap> map);

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapUtils_logInfoWithJavaLangException_(JavaLangException *ex);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_invertMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT void OrgApacheCommonsCollections15MapUtils_safeAddToMapWithJavaUtilMap_withId_withId_(id<JavaUtilMap> map, id key, id value);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_synchronizedMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_unmodifiableMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_predicatedMapWithJavaUtilMap_withOrgApacheCommonsCollections15Predicate_withOrgApacheCommonsCollections15Predicate_(id<JavaUtilMap> map, id<OrgApacheCommonsCollections15Predicate> keyPred, id<OrgApacheCommonsCollections15Predicate> valuePred);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_typedMapWithJavaUtilMap_withIOSClass_withIOSClass_(id<JavaUtilMap> map, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_transformedMapWithJavaUtilMap_withOrgApacheCommonsCollections15Transformer_withOrgApacheCommonsCollections15Transformer_(id<JavaUtilMap> map, id<OrgApacheCommonsCollections15Transformer> keyTransformer, id<OrgApacheCommonsCollections15Transformer> valueTransformer);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_fixedSizeMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_lazyMapWithJavaUtilMap_withOrgApacheCommonsCollections15Factory_(id<JavaUtilMap> map, id<OrgApacheCommonsCollections15Factory> factory);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_orderedMapWithJavaUtilMap_(id<JavaUtilMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_synchronizedSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilMap> OrgApacheCommonsCollections15MapUtils_unmodifiableSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_predicatedSortedMapWithJavaUtilSortedMap_withOrgApacheCommonsCollections15Predicate_withOrgApacheCommonsCollections15Predicate_(id<JavaUtilSortedMap> map, id<OrgApacheCommonsCollections15Predicate> keyPred, id<OrgApacheCommonsCollections15Predicate> valuePred);

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_typedSortedMapWithJavaUtilSortedMap_withIOSClass_withIOSClass_(id<JavaUtilSortedMap> map, IOSClass *keyType, IOSClass *valueType);

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_transformedSortedMapWithJavaUtilSortedMap_withOrgApacheCommonsCollections15Transformer_withOrgApacheCommonsCollections15Transformer_(id<JavaUtilSortedMap> map, id<OrgApacheCommonsCollections15Transformer> keyTransformer, id<OrgApacheCommonsCollections15Transformer> valueTransformer);

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_fixedSizeSortedMapWithJavaUtilSortedMap_(id<JavaUtilSortedMap> map);

FOUNDATION_EXPORT id<JavaUtilSortedMap> OrgApacheCommonsCollections15MapUtils_lazySortedMapWithJavaUtilSortedMap_withOrgApacheCommonsCollections15Factory_(id<JavaUtilSortedMap> map, id<OrgApacheCommonsCollections15Factory> factory);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCollections15MapUtils)

#endif // _OrgApacheCommonsCollections15MapUtils_H_
