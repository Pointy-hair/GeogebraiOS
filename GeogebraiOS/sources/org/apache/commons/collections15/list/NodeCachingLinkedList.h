//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/collections15/list/NodeCachingLinkedList.java
//

#ifndef _OrgApacheCommonsCollections15ListNodeCachingLinkedList_H_
#define _OrgApacheCommonsCollections15ListNodeCachingLinkedList_H_

#include "J2ObjC_header.h"
#include "java/io/Serializable.h"
#include "org/apache/commons/collections15/list/AbstractLinkedList.h"

@protocol JavaUtilCollection;

#define OrgApacheCommonsCollections15ListNodeCachingLinkedList_serialVersionUID 6897789178562232073LL
#define OrgApacheCommonsCollections15ListNodeCachingLinkedList_DEFAULT_MAXIMUM_CACHE_SIZE 20

@interface OrgApacheCommonsCollections15ListNodeCachingLinkedList : OrgApacheCommonsCollections15ListAbstractLinkedList < JavaIoSerializable > {
 @public
  OrgApacheCommonsCollections15ListAbstractLinkedList_Node *firstCachedNode_;
  jint cacheSize_;
  jint maximumCacheSize_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)coll;

- (instancetype)initWithInt:(jint)maximumCacheSize;

#pragma mark Protected

- (void)addNodeToCacheWithOrgApacheCommonsCollections15ListAbstractLinkedList_Node:(OrgApacheCommonsCollections15ListAbstractLinkedList_Node *)node;

- (OrgApacheCommonsCollections15ListAbstractLinkedList_Node *)createNodeWithId:(id)value;

- (jint)getMaximumCacheSize;

- (OrgApacheCommonsCollections15ListAbstractLinkedList_Node *)getNodeFromCache;

- (jboolean)isCacheFull;

- (void)removeAllNodes;

- (void)removeNodeWithOrgApacheCommonsCollections15ListAbstractLinkedList_Node:(OrgApacheCommonsCollections15ListAbstractLinkedList_Node *)node;

- (void)setMaximumCacheSizeWithInt:(jint)maximumCacheSize;

- (void)shrinkCacheToMaximumSize;

#pragma mark Package-Private


@end

J2OBJC_EMPTY_STATIC_INIT(OrgApacheCommonsCollections15ListNodeCachingLinkedList)

J2OBJC_FIELD_SETTER(OrgApacheCommonsCollections15ListNodeCachingLinkedList, firstCachedNode_, OrgApacheCommonsCollections15ListAbstractLinkedList_Node *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15ListNodeCachingLinkedList, serialVersionUID, jlong)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsCollections15ListNodeCachingLinkedList, DEFAULT_MAXIMUM_CACHE_SIZE, jint)

FOUNDATION_EXPORT void OrgApacheCommonsCollections15ListNodeCachingLinkedList_init(OrgApacheCommonsCollections15ListNodeCachingLinkedList *self);

FOUNDATION_EXPORT OrgApacheCommonsCollections15ListNodeCachingLinkedList *new_OrgApacheCommonsCollections15ListNodeCachingLinkedList_init() NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15ListNodeCachingLinkedList_initWithJavaUtilCollection_(OrgApacheCommonsCollections15ListNodeCachingLinkedList *self, id<JavaUtilCollection> coll);

FOUNDATION_EXPORT OrgApacheCommonsCollections15ListNodeCachingLinkedList *new_OrgApacheCommonsCollections15ListNodeCachingLinkedList_initWithJavaUtilCollection_(id<JavaUtilCollection> coll) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT void OrgApacheCommonsCollections15ListNodeCachingLinkedList_initWithInt_(OrgApacheCommonsCollections15ListNodeCachingLinkedList *self, jint maximumCacheSize);

FOUNDATION_EXPORT OrgApacheCommonsCollections15ListNodeCachingLinkedList *new_OrgApacheCommonsCollections15ListNodeCachingLinkedList_initWithInt_(jint maximumCacheSize) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsCollections15ListNodeCachingLinkedList)

#endif // _OrgApacheCommonsCollections15ListNodeCachingLinkedList_H_
