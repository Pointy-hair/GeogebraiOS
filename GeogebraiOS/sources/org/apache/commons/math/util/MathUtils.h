//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/util/MathUtils.java
//

#ifndef _OrgApacheCommonsMathUtilMathUtils_H_
#define _OrgApacheCommonsMathUtilMathUtils_H_

#include "J2ObjC_header.h"
#include "java/lang/Enum.h"

@class IOSDoubleArray;
@class IOSFloatArray;
@class IOSIntArray;
@class JavaMathBigInteger;
@class OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum;

#define OrgApacheCommonsMathUtilMathUtils_EPSILON 1.1102230246251565E-16
#define OrgApacheCommonsMathUtilMathUtils_SAFE_MIN __DBL_MIN__
#define OrgApacheCommonsMathUtilMathUtils_TWO_PI 6.283185307179586

@interface OrgApacheCommonsMathUtilMathUtils : NSObject

#pragma mark Public

+ (jint)addAndCheckWithInt:(jint)x
                   withInt:(jint)y;

+ (jlong)addAndCheckWithLong:(jlong)a
                    withLong:(jlong)b;

+ (jlong)binomialCoefficientWithInt:(jint)n
                            withInt:(jint)k;

+ (jdouble)binomialCoefficientDoubleWithInt:(jint)n
                                    withInt:(jint)k;

+ (jdouble)binomialCoefficientLogWithInt:(jint)n
                                 withInt:(jint)k;

+ (void)checkOrderWithDoubleArray:(IOSDoubleArray *)val;

+ (void)checkOrderWithDoubleArray:(IOSDoubleArray *)val
                          withInt:(jint)dir
                      withBoolean:(jboolean)strict;

+ (void)checkOrderWithDoubleArray:(IOSDoubleArray *)val
withOrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum:(OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum *)dir
                      withBoolean:(jboolean)strict;

+ (jint)compareToWithDouble:(jdouble)x
                 withDouble:(jdouble)y
                 withDouble:(jdouble)eps;

+ (jdouble)coshWithDouble:(jdouble)x;

+ (jdouble)distanceWithDoubleArray:(IOSDoubleArray *)p1
                   withDoubleArray:(IOSDoubleArray *)p2;

+ (jdouble)distanceWithIntArray:(IOSIntArray *)p1
                   withIntArray:(IOSIntArray *)p2;

+ (jdouble)distance1WithDoubleArray:(IOSDoubleArray *)p1
                    withDoubleArray:(IOSDoubleArray *)p2;

+ (jint)distance1WithIntArray:(IOSIntArray *)p1
                 withIntArray:(IOSIntArray *)p2;

+ (jdouble)distanceInfWithDoubleArray:(IOSDoubleArray *)p1
                      withDoubleArray:(IOSDoubleArray *)p2;

+ (jint)distanceInfWithIntArray:(IOSIntArray *)p1
                   withIntArray:(IOSIntArray *)p2;

+ (jboolean)equalsWithDouble:(jdouble)x
                  withDouble:(jdouble)y;

+ (jboolean)equalsWithDouble:(jdouble)x
                  withDouble:(jdouble)y
                  withDouble:(jdouble)eps;

+ (jboolean)equalsWithDouble:(jdouble)x
                  withDouble:(jdouble)y
                     withInt:(jint)maxUlps;

+ (jboolean)equalsWithDoubleArray:(IOSDoubleArray *)x
                  withDoubleArray:(IOSDoubleArray *)y;

+ (jboolean)equalsWithFloat:(jfloat)x
                  withFloat:(jfloat)y;

+ (jboolean)equalsWithFloat:(jfloat)x
                  withFloat:(jfloat)y
                  withFloat:(jfloat)eps;

+ (jboolean)equalsWithFloat:(jfloat)x
                  withFloat:(jfloat)y
                    withInt:(jint)maxUlps;

+ (jboolean)equalsWithFloatArray:(IOSFloatArray *)x
                  withFloatArray:(IOSFloatArray *)y;

+ (jboolean)equalsIncludingNaNWithDouble:(jdouble)x
                              withDouble:(jdouble)y;

+ (jboolean)equalsIncludingNaNWithDouble:(jdouble)x
                              withDouble:(jdouble)y
                              withDouble:(jdouble)eps;

+ (jboolean)equalsIncludingNaNWithDouble:(jdouble)x
                              withDouble:(jdouble)y
                                 withInt:(jint)maxUlps;

+ (jboolean)equalsIncludingNaNWithDoubleArray:(IOSDoubleArray *)x
                              withDoubleArray:(IOSDoubleArray *)y;

+ (jboolean)equalsIncludingNaNWithFloat:(jfloat)x
                              withFloat:(jfloat)y;

+ (jboolean)equalsIncludingNaNWithFloat:(jfloat)x
                              withFloat:(jfloat)y
                              withFloat:(jfloat)eps;

+ (jboolean)equalsIncludingNaNWithFloat:(jfloat)x
                              withFloat:(jfloat)y
                                withInt:(jint)maxUlps;

+ (jboolean)equalsIncludingNaNWithFloatArray:(IOSFloatArray *)x
                              withFloatArray:(IOSFloatArray *)y;

+ (jlong)factorialWithInt:(jint)n;

+ (jdouble)factorialDoubleWithInt:(jint)n;

+ (jdouble)factorialLogWithInt:(jint)n;

+ (jint)gcdWithInt:(jint)p
           withInt:(jint)q;

+ (jlong)gcdWithLong:(jlong)p
            withLong:(jlong)q;

+ (jint)hash__WithDouble:(jdouble)value;

+ (jint)hash__WithDoubleArray:(IOSDoubleArray *)value;

+ (jbyte)indicatorWithByte:(jbyte)x;

+ (jdouble)indicatorWithDouble:(jdouble)x;

+ (jfloat)indicatorWithFloat:(jfloat)x;

+ (jint)indicatorWithInt:(jint)x;

+ (jlong)indicatorWithLong:(jlong)x;

+ (jshort)indicatorWithShort:(jshort)x;

+ (jint)lcmWithInt:(jint)a
           withInt:(jint)b;

+ (jlong)lcmWithLong:(jlong)a
            withLong:(jlong)b;

+ (jdouble)logWithDouble:(jdouble)base
              withDouble:(jdouble)x;

+ (jint)mulAndCheckWithInt:(jint)x
                   withInt:(jint)y;

+ (jlong)mulAndCheckWithLong:(jlong)a
                    withLong:(jlong)b;

+ (jdouble)nextAfterWithDouble:(jdouble)d
                    withDouble:(jdouble)direction;

+ (jdouble)normalizeAngleWithDouble:(jdouble)a
                         withDouble:(jdouble)center;

+ (IOSDoubleArray *)normalizeArrayWithDoubleArray:(IOSDoubleArray *)values
                                       withDouble:(jdouble)normalizedSum;

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)k
                           withJavaMathBigInteger:(JavaMathBigInteger *)e;

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                          withInt:(jint)e;

+ (JavaMathBigInteger *)powWithJavaMathBigInteger:(JavaMathBigInteger *)k
                                         withLong:(jlong)e;

+ (jint)powWithInt:(jint)k
           withInt:(jint)e;

+ (jint)powWithInt:(jint)k
          withLong:(jlong)e;

+ (jlong)powWithLong:(jlong)k
             withInt:(jint)e;

+ (jlong)powWithLong:(jlong)k
            withLong:(jlong)e;

+ (jdouble)roundWithDouble:(jdouble)x
                   withInt:(jint)scale_;

+ (jdouble)roundWithDouble:(jdouble)x
                   withInt:(jint)scale_
                   withInt:(jint)roundingMethod;

+ (jfloat)roundWithFloat:(jfloat)x
                 withInt:(jint)scale_;

+ (jfloat)roundWithFloat:(jfloat)x
                 withInt:(jint)scale_
                 withInt:(jint)roundingMethod;

+ (jdouble)safeNormWithDoubleArray:(IOSDoubleArray *)v;

+ (jdouble)scalbWithDouble:(jdouble)d
                   withInt:(jint)scaleFactor;

+ (jbyte)signWithByte:(jbyte)x;

+ (jdouble)signWithDouble:(jdouble)x;

+ (jfloat)signWithFloat:(jfloat)x;

+ (jint)signWithInt:(jint)x;

+ (jlong)signWithLong:(jlong)x;

+ (jshort)signWithShort:(jshort)x;

+ (jdouble)sinhWithDouble:(jdouble)x;

+ (jint)subAndCheckWithInt:(jint)x
                   withInt:(jint)y;

+ (jlong)subAndCheckWithLong:(jlong)a
                    withLong:(jlong)b;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsMathUtilMathUtils)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilMathUtils, EPSILON, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilMathUtils, SAFE_MIN, jdouble)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilMathUtils, TWO_PI, jdouble)

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_addAndCheckWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_addAndCheckWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_binomialCoefficientWithInt_withInt_(jint n, jint k);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_binomialCoefficientDoubleWithInt_withInt_(jint n, jint k);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_binomialCoefficientLogWithInt_withInt_(jint n, jint k);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_compareToWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble eps);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_coshWithDouble_(jdouble x);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithFloat_withFloat_(jfloat x, jfloat y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithFloat_withFloat_(jfloat x, jfloat y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat eps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithFloat_withFloat_withFloat_(jfloat x, jfloat y, jfloat eps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithFloat_withFloat_withInt_(jfloat x, jfloat y, jint maxUlps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithFloat_withFloat_withInt_(jfloat x, jfloat y, jint maxUlps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithFloatArray_withFloatArray_(IOSFloatArray *x, IOSFloatArray *y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithDouble_withDouble_(jdouble x, jdouble y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithDouble_withDouble_(jdouble x, jdouble y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble eps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble eps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithDouble_withDouble_withInt_(jdouble x, jdouble y, jint maxUlps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithDouble_withDouble_withInt_(jdouble x, jdouble y, jint maxUlps);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsWithDoubleArray_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y);

FOUNDATION_EXPORT jboolean OrgApacheCommonsMathUtilMathUtils_equalsIncludingNaNWithDoubleArray_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_factorialWithInt_(jint n);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_factorialDoubleWithInt_(jint n);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_factorialLogWithInt_(jint n);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_gcdWithInt_withInt_(jint p, jint q);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_gcdWithLong_withLong_(jlong p, jlong q);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_hash__WithDouble_(jdouble value);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_hash__WithDoubleArray_(IOSDoubleArray *value);

FOUNDATION_EXPORT jbyte OrgApacheCommonsMathUtilMathUtils_indicatorWithByte_(jbyte x);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_indicatorWithDouble_(jdouble x);

FOUNDATION_EXPORT jfloat OrgApacheCommonsMathUtilMathUtils_indicatorWithFloat_(jfloat x);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_indicatorWithInt_(jint x);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_indicatorWithLong_(jlong x);

FOUNDATION_EXPORT jshort OrgApacheCommonsMathUtilMathUtils_indicatorWithShort_(jshort x);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_lcmWithInt_withInt_(jint a, jint b);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_lcmWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_logWithDouble_withDouble_(jdouble base, jdouble x);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_mulAndCheckWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_nextAfterWithDouble_withDouble_(jdouble d, jdouble direction);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_scalbWithDouble_withInt_(jdouble d, jint scaleFactor);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_normalizeAngleWithDouble_withDouble_(jdouble a, jdouble center);

FOUNDATION_EXPORT IOSDoubleArray *OrgApacheCommonsMathUtilMathUtils_normalizeArrayWithDoubleArray_withDouble_(IOSDoubleArray *values, jdouble normalizedSum);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_roundWithDouble_withInt_(jdouble x, jint scale_);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_roundWithDouble_withInt_withInt_(jdouble x, jint scale_, jint roundingMethod);

FOUNDATION_EXPORT jfloat OrgApacheCommonsMathUtilMathUtils_roundWithFloat_withInt_(jfloat x, jint scale_);

FOUNDATION_EXPORT jfloat OrgApacheCommonsMathUtilMathUtils_roundWithFloat_withInt_withInt_(jfloat x, jint scale_, jint roundingMethod);

FOUNDATION_EXPORT jbyte OrgApacheCommonsMathUtilMathUtils_signWithByte_(jbyte x);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_signWithDouble_(jdouble x);

FOUNDATION_EXPORT jfloat OrgApacheCommonsMathUtilMathUtils_signWithFloat_(jfloat x);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_signWithInt_(jint x);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_signWithLong_(jlong x);

FOUNDATION_EXPORT jshort OrgApacheCommonsMathUtilMathUtils_signWithShort_(jshort x);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_sinhWithDouble_(jdouble x);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_subAndCheckWithInt_withInt_(jint x, jint y);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_subAndCheckWithLong_withLong_(jlong a, jlong b);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_powWithInt_withInt_(jint k, jint e);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_powWithInt_withLong_(jint k, jlong e);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_powWithLong_withInt_(jlong k, jint e);

FOUNDATION_EXPORT jlong OrgApacheCommonsMathUtilMathUtils_powWithLong_withLong_(jlong k, jlong e);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withInt_(JavaMathBigInteger *k, jint e);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withLong_(JavaMathBigInteger *k, jlong e);

FOUNDATION_EXPORT JavaMathBigInteger *OrgApacheCommonsMathUtilMathUtils_powWithJavaMathBigInteger_withJavaMathBigInteger_(JavaMathBigInteger *k, JavaMathBigInteger *e);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_distance1WithDoubleArray_withDoubleArray_(IOSDoubleArray *p1, IOSDoubleArray *p2);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_distance1WithIntArray_withIntArray_(IOSIntArray *p1, IOSIntArray *p2);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_distanceWithDoubleArray_withDoubleArray_(IOSDoubleArray *p1, IOSDoubleArray *p2);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_distanceWithIntArray_withIntArray_(IOSIntArray *p1, IOSIntArray *p2);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_distanceInfWithDoubleArray_withDoubleArray_(IOSDoubleArray *p1, IOSDoubleArray *p2);

FOUNDATION_EXPORT jint OrgApacheCommonsMathUtilMathUtils_distanceInfWithIntArray_withIntArray_(IOSIntArray *p1, IOSIntArray *p2);

FOUNDATION_EXPORT void OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_withOrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_withBoolean_(IOSDoubleArray *val, OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum *dir, jboolean strict);

FOUNDATION_EXPORT void OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_(IOSDoubleArray *val);

FOUNDATION_EXPORT void OrgApacheCommonsMathUtilMathUtils_checkOrderWithDoubleArray_withInt_withBoolean_(IOSDoubleArray *val, jint dir, jboolean strict);

FOUNDATION_EXPORT jdouble OrgApacheCommonsMathUtilMathUtils_safeNormWithDoubleArray_(IOSDoubleArray *v);

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathUtilMathUtils)

typedef NS_ENUM(NSUInteger, OrgApacheCommonsMathUtilMathUtils_OrderDirection) {
  OrgApacheCommonsMathUtilMathUtils_OrderDirection_INCREASING = 0,
  OrgApacheCommonsMathUtilMathUtils_OrderDirection_DECREASING = 1,
};

@interface OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum : JavaLangEnum < NSCopying >

#pragma mark Package-Private

+ (IOSObjectArray *)values;
FOUNDATION_EXPORT IOSObjectArray *OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_values();

+ (OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum *)valueOfWithNSString:(NSString *)name;
FOUNDATION_EXPORT OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum *OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_valueOfWithNSString_(NSString *name);

- (id)copyWithZone:(NSZone *)zone;

@end

J2OBJC_STATIC_INIT(OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum)

FOUNDATION_EXPORT OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum *OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_values_[];

#define OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_INCREASING OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_values_[OrgApacheCommonsMathUtilMathUtils_OrderDirection_INCREASING]
J2OBJC_ENUM_CONSTANT_GETTER(OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum, INCREASING)

#define OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_DECREASING OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum_values_[OrgApacheCommonsMathUtilMathUtils_OrderDirection_DECREASING]
J2OBJC_ENUM_CONSTANT_GETTER(OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum, DECREASING)

J2OBJC_TYPE_LITERAL_HEADER(OrgApacheCommonsMathUtilMathUtils_OrderDirectionEnum)

#endif // _OrgApacheCommonsMathUtilMathUtils_H_
