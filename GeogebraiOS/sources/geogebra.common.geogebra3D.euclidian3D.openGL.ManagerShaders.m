//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/openGL/ManagerShaders.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/GLBuffer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/GLFactory.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Manager.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/ManagerShaders.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/RendererShadersInterface.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Stack.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders () {
 @public
  JavaUtilArrayList *vertices__, *normals_, *textures_, *colors_;
  jint verticesLength_, verticesSize_, normalsLength_, normalsSize_, texturesLength_, texturesSize_, colorsLength_, colorsSize_;
  jint geometriesSetMaxIndex_;
  JavaUtilStack *indicesRemoved_;
  jint currentOld_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, vertices__, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, normals_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, textures_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, colors_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders, indicesRemoved_, JavaUtilStack *)

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry () {
 @public
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *type_;
  id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer> v_, n_, t_, c_;
  jint length_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry, type_, GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry, v_, id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry, n_, id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry, t_, id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry, c_, id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet () {
 @public
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *this$0_;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *currentGeometry_;
  jint currentGeometryIndex_;
  jint geometriesLength_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet, this$0_, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet, currentGeometry_, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *)

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer
                   withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *)view3D {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, renderer, view3D);
  return self;
}

- (void)initGeometriesList {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_geometriesSetList_(self, new_JavaUtilTreeMap_init());
  geometriesSetMaxIndex_ = -1;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_indicesRemoved_(self, new_JavaUtilStack_init());
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_vertices__(self, new_JavaUtilArrayList_init());
  verticesSize_ = 0;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_normals_(self, new_JavaUtilArrayList_init());
  normalsSize_ = 0;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_textures_(self, new_JavaUtilArrayList_init());
  texturesSize_ = 0;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_colors_(self, new_JavaUtilArrayList_init());
  colorsSize_ = 0;
}

- (void)setRendererWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_set_renderer_(self, renderer);
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)getRenderer {
  return renderer_;
}

- (jint)startNewListWithInt:(jint)old {
  currentOld_ = old;
  if (currentOld_ >= 0) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_set_currentGeometriesSet_(self, [((JavaUtilTreeMap *) nil_chk(geometriesSetList_)) getWithId:JavaLangInteger_valueOfWithInt_(old)]);
  }
  else {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_set_currentGeometriesSet_(self, nil);
  }
  jint index = currentOld_;
  if (currentGeometriesSet_ == nil) {
    currentOld_ = -1;
    if ([((JavaUtilStack *) nil_chk(indicesRemoved_)) empty]) {
      geometriesSetMaxIndex_++;
      index = geometriesSetMaxIndex_;
    }
    else {
      index = [((JavaLangInteger *) nil_chk([indicesRemoved_ pop])) intValue];
    }
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_setAndConsume_currentGeometriesSet_(self, new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(self));
    [((JavaUtilTreeMap *) nil_chk(geometriesSetList_)) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:currentGeometriesSet_];
  }
  else {
    [currentGeometriesSet_ reset];
  }
  return index;
}

- (void)endList {
}

- (void)startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:type];
  verticesLength_ = 0;
  normalsLength_ = 0;
  texturesLength_ = 0;
  colorsLength_ = 0;
}

- (void)endGeometry {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) setVerticesWithJavaUtilArrayList:vertices__ withInt:verticesLength_];
  [currentGeometriesSet_ setNormalsWithJavaUtilArrayList:normals_ withInt:normalsLength_];
  [currentGeometriesSet_ setTexturesWithJavaUtilArrayList:textures_ withInt:texturesLength_];
  [currentGeometriesSet_ setColorsWithJavaUtilArrayList:colors_ withInt:colorsLength_];
}

- (jint)startPolygonsWithInt:(jint)old {
  jint index = [self startNewListWithInt:old];
  return index;
}

- (void)drawPolygonWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)n
              withGeogebraCommonKernelMatrixCoordsArray:(IOSObjectArray *)v {
  [self startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_get_TRIANGLES()];
  [self normalWithGeogebraCommonKernelMatrixCoords:n];
  for (jint i = 0; i < 3; i++) {
    [self vertexWithGeogebraCommonKernelMatrixCoords:IOSObjectArray_Get(nil_chk(v), i)];
  }
  [self endGeometry];
}

- (void)endPolygons {
  [self endList];
}

- (void)removeWithInt:(jint)index {
  if (index >= 0 && index != currentOld_) {
    [((JavaUtilStack *) nil_chk(indicesRemoved_)) pushWithId:JavaLangInteger_valueOfWithInt_(index)];
    [((JavaUtilTreeMap *) nil_chk(geometriesSetList_)) removeWithId:JavaLangInteger_valueOfWithInt_(index)];
  }
  currentOld_ = -1;
}

- (void)drawWithInt:(jint)index {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_set_currentGeometriesSet_(self, [((JavaUtilTreeMap *) nil_chk(geometriesSetList_)) getWithId:JavaLangInteger_valueOfWithInt_(index)]);
  if (currentGeometriesSet_ != nil) {
    for (jint i = 0; i < [currentGeometriesSet_ getGeometriesLength]; i++) {
      GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *geometry = [currentGeometriesSet_ getWithInt:i];
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadVertexBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(geometry)) getVertices] withInt:[geometry getLength]];
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadNormalBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[geometry getNormals] withInt:[geometry getLength]];
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadColorBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[geometry getColors] withInt:[geometry getLength]];
      if ([((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) areTexturesEnabled]) {
        [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadTextureBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[geometry getTextures] withInt:[geometry getLength]];
      }
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:[geometry getType] withInt:[geometry getLength]];
    }
  }
}

- (void)drawLabelWithInt:(jint)index {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_set_currentGeometriesSet_(self, [((JavaUtilTreeMap *) nil_chk(geometriesSetList_)) getWithId:JavaLangInteger_valueOfWithInt_(index)]);
  if (currentGeometriesSet_ != nil) {
    for (jint i = 0; i < [currentGeometriesSet_ getGeometriesLength]; i++) {
      GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *geometry = [currentGeometriesSet_ getWithInt:i];
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadVertexBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(geometry)) getVertices] withInt:[geometry getLength]];
      if ([((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) areTexturesEnabled]) {
        [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) loadTextureBufferWithGeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer:[geometry getTextures] withInt:[geometry getLength]];
      }
      [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) nil_chk(((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface>) check_protocol_cast(renderer_, @protocol(GeogebraCommonGeogebra3DEuclidian3DOpenGLRendererShadersInterface))))) drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:[geometry getType] withInt:[geometry getLength]];
    }
  }
}

- (void)textureWithDouble:(jdouble)x
               withDouble:(jdouble)y {
  if (texturesLength_ == texturesSize_) {
    [((JavaUtilArrayList *) nil_chk(textures_)) addWithId:JavaLangDouble_valueOfWithDouble_(x)];
    [textures_ addWithId:JavaLangDouble_valueOfWithDouble_(y)];
    texturesSize_ += 2;
  }
  else {
    [((JavaUtilArrayList *) nil_chk(textures_)) setWithInt:texturesLength_ withId:JavaLangDouble_valueOfWithDouble_(x)];
    [textures_ setWithInt:texturesLength_ + 1 withId:JavaLangDouble_valueOfWithDouble_(y)];
  }
  texturesLength_ += 2;
}

- (void)setDummyTexture {
}

- (void)normalWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)z {
  if (normalsLength_ == normalsSize_) {
    [((JavaUtilArrayList *) nil_chk(normals_)) addWithId:JavaLangDouble_valueOfWithDouble_(x)];
    [normals_ addWithId:JavaLangDouble_valueOfWithDouble_(y)];
    [normals_ addWithId:JavaLangDouble_valueOfWithDouble_(z)];
    normalsSize_ += 3;
  }
  else {
    [((JavaUtilArrayList *) nil_chk(normals_)) setWithInt:normalsLength_ withId:JavaLangDouble_valueOfWithDouble_(x)];
    [normals_ setWithInt:normalsLength_ + 1 withId:JavaLangDouble_valueOfWithDouble_(y)];
    [normals_ setWithInt:normalsLength_ + 2 withId:JavaLangDouble_valueOfWithDouble_(z)];
  }
  normalsLength_ += 3;
}

- (void)vertexWithDouble:(jdouble)x
              withDouble:(jdouble)y
              withDouble:(jdouble)z {
  if (verticesLength_ == verticesSize_) {
    [((JavaUtilArrayList *) nil_chk(vertices__)) addWithId:JavaLangDouble_valueOfWithDouble_(x)];
    [vertices__ addWithId:JavaLangDouble_valueOfWithDouble_(y)];
    [vertices__ addWithId:JavaLangDouble_valueOfWithDouble_(z)];
    verticesSize_ += 3;
  }
  else {
    [((JavaUtilArrayList *) nil_chk(vertices__)) setWithInt:verticesLength_ withId:JavaLangDouble_valueOfWithDouble_(x)];
    [vertices__ setWithInt:verticesLength_ + 1 withId:JavaLangDouble_valueOfWithDouble_(y)];
    [vertices__ setWithInt:verticesLength_ + 2 withId:JavaLangDouble_valueOfWithDouble_(z)];
  }
  verticesLength_ += 3;
}

- (void)vertexIntWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)z {
  [self vertexWithDouble:x withDouble:y withDouble:z];
}

- (void)colorWithDouble:(jdouble)r
             withDouble:(jdouble)g
             withDouble:(jdouble)b {
  [self colorWithDouble:r withDouble:g withDouble:b withDouble:1.0f];
}

- (void)colorWithDouble:(jdouble)r
             withDouble:(jdouble)g
             withDouble:(jdouble)b
             withDouble:(jdouble)a {
  if (colorsLength_ == colorsSize_) {
    [((JavaUtilArrayList *) nil_chk(colors_)) addWithId:JavaLangDouble_valueOfWithDouble_(r)];
    [colors_ addWithId:JavaLangDouble_valueOfWithDouble_(g)];
    [colors_ addWithId:JavaLangDouble_valueOfWithDouble_(b)];
    [colors_ addWithId:JavaLangDouble_valueOfWithDouble_(a)];
    colorsSize_ += 4;
  }
  else {
    [((JavaUtilArrayList *) nil_chk(colors_)) setWithInt:colorsLength_ withId:JavaLangDouble_valueOfWithDouble_(r)];
    [colors_ setWithInt:colorsLength_ + 1 withId:JavaLangDouble_valueOfWithDouble_(g)];
    [colors_ setWithInt:colorsLength_ + 2 withId:JavaLangDouble_valueOfWithDouble_(b)];
    [colors_ setWithInt:colorsLength_ + 3 withId:JavaLangDouble_valueOfWithDouble_(a)];
  }
  colorsLength_ += 4;
}

- (void)pointSizeWithDouble:(jdouble)size {
}

- (void)verticesWithDoubleArray:(IOSDoubleArray *)vertices {
}

- (void)rectangleGeometryWithInt:(jint)x
                         withInt:(jint)y
                         withInt:(jint)z
                         withInt:(jint)width
                         withInt:(jint)height {
  [self startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_get_TRIANGLE_STRIP()];
  [self textureWithDouble:0 withDouble:0];
  [self vertexIntWithInt:x withInt:y withInt:z];
  [self textureWithDouble:1 withDouble:0];
  [self vertexIntWithInt:x + width withInt:y withInt:z];
  [self textureWithDouble:0 withDouble:1];
  [self vertexIntWithInt:x withInt:y + height withInt:z];
  [self textureWithDouble:1 withDouble:1];
  [self vertexIntWithInt:x + width withInt:y + height withInt:z];
  [self endGeometry];
}

- (void)startGeometryDirectWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type
                                                                                 withInt:(jint)size {
  [self startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:type];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) allocateWithInt:size];
}

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) vertexDirectWithDouble:x withDouble:y withDouble:z];
}

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) normalDirectWithDouble:x withDouble:y withDouble:z];
}

- (void)endGeometryDirect {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *) nil_chk(currentGeometriesSet_)) endGeometry];
}

- (void)dealloc {
  RELEASE_(renderer_);
  RELEASE_(vertices__);
  RELEASE_(normals_);
  RELEASE_(textures_);
  RELEASE_(colors_);
  RELEASE_(geometriesSetList_);
  RELEASE_(currentGeometriesSet_);
  RELEASE_(indicesRemoved_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:", "ManagerShaders", NULL, 0x1, NULL, NULL },
    { "initGeometriesList", NULL, "V", 0x4, NULL, NULL },
    { "setRendererWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "setRenderer", "V", 0x4, NULL, NULL },
    { "getRenderer", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer;", 0x4, NULL, NULL },
    { "startNewListWithInt:", "startNewList", "I", 0x1, NULL, NULL },
    { "endList", NULL, "V", 0x1, NULL, NULL },
    { "startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:", "startGeometry", "V", 0x1, NULL, NULL },
    { "endGeometry", NULL, "V", 0x1, NULL, NULL },
    { "startPolygonsWithInt:", "startPolygons", "I", 0x1, NULL, NULL },
    { "drawPolygonWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoordsArray:", "drawPolygon", "V", 0x1, NULL, NULL },
    { "endPolygons", NULL, "V", 0x1, NULL, NULL },
    { "removeWithInt:", "remove", "V", 0x1, NULL, NULL },
    { "drawWithInt:", "draw", "V", 0x1, NULL, NULL },
    { "drawLabelWithInt:", "drawLabel", "V", 0x1, NULL, NULL },
    { "textureWithDouble:withDouble:", "texture", "V", 0x4, NULL, NULL },
    { "setDummyTexture", NULL, "V", 0x4, NULL, NULL },
    { "normalWithDouble:withDouble:withDouble:", "normal", "V", 0x4, NULL, NULL },
    { "vertexWithDouble:withDouble:withDouble:", "vertex", "V", 0x4, NULL, NULL },
    { "vertexIntWithInt:withInt:withInt:", "vertexInt", "V", 0x4, NULL, NULL },
    { "colorWithDouble:withDouble:withDouble:", "color", "V", 0x4, NULL, NULL },
    { "colorWithDouble:withDouble:withDouble:withDouble:", "color", "V", 0x4, NULL, NULL },
    { "pointSizeWithDouble:", "pointSize", "V", 0x4, NULL, NULL },
    { "verticesWithDoubleArray:", "vertices", "V", 0x4, NULL, NULL },
    { "rectangleGeometryWithInt:withInt:withInt:withInt:withInt:", "rectangleGeometry", "V", 0x1, NULL, NULL },
    { "startGeometryDirectWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:withInt:", "startGeometryDirect", "V", 0x1, NULL, NULL },
    { "vertexDirectWithDouble:withDouble:withDouble:", "vertexDirect", "V", 0x4, NULL, NULL },
    { "normalDirectWithDouble:withDouble:withDouble:", "normalDirect", "V", 0x4, NULL, NULL },
    { "endGeometryDirect", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "renderer_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer;", NULL, NULL,  },
    { "vertices__", "vertices", 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "normals_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "textures_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "colors_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/Double;>;",  },
    { "verticesLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "verticesSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "normalsLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "normalsSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "texturesLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "texturesSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "colorsLength_", NULL, 0x2, "I", NULL, NULL,  },
    { "colorsSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "geometriesSetList_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Integer;Lgeogebra/common/geogebra3D/euclidian3D/openGL/ManagerShaders$GeometriesSet;>;",  },
    { "geometriesSetMaxIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "currentGeometriesSet_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders$GeometriesSet;", NULL, NULL,  },
    { "indicesRemoved_", NULL, 0x2, "Ljava.util.Stack;", NULL, "Ljava/util/Stack<Ljava/lang/Integer;>;",  },
    { "currentOld_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders$Geometry;", "Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders$GeometriesSet;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders = { 2, "ManagerShaders", "geogebra.common.geogebra3D.euclidian3D.openGL", NULL, 0x1, 28, methods, 18, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, renderer, view3D);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *renderer, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_withGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self, renderer, view3D);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders)

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *)outer$
                  withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(self, outer$, type);
  return self;
}

- (void)setTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_type_(self, type);
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->v_)) setEmpty];
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->n_)) setEmpty];
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->t_)) setEmpty];
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->c_)) setEmpty];
}

- (void)allocateBuffersWithInt:(jint)size {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(v_)) allocateWithInt:size * 3];
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(n_)) allocateWithInt:size * 3];
  length_ = 0;
}

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(v_)) putWithDouble:x];
  [v_ putWithDouble:y];
  [v_ putWithDouble:z];
  length_++;
}

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(n_)) putWithDouble:x];
  [n_ putWithDouble:y];
  [n_ putWithDouble:z];
}

- (void)end {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(v_)) setLimitWithInt:length_ * 3];
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(n_)) setLimitWithInt:length_ * 3];
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)getType {
  return type_;
}

- (void)setVerticesWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                 withInt:(jint)length {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->v_)) setWithJavaUtilArrayList:array withInt:length];
}

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getVertices {
  return v_;
}

- (void)setNormalsWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                withInt:(jint)length {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->n_)) setWithJavaUtilArrayList:array withInt:length];
}

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getNormals {
  return n_;
}

- (void)setTexturesWithJavaUtilArrayList:(JavaUtilArrayList *)array
                                 withInt:(jint)length {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->t_)) setWithJavaUtilArrayList:array withInt:length];
}

- (void)setTexturesEmpty {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->t_)) setEmpty];
}

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getTextures {
  return t_;
}

- (void)setColorsWithJavaUtilArrayList:(JavaUtilArrayList *)array
                               withInt:(jint)length {
  [((id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>) nil_chk(self->c_)) setWithJavaUtilArrayList:array withInt:length];
}

- (id<GeogebraCommonGeogebra3DEuclidian3DOpenGLGLBuffer>)getColors {
  return c_;
}

- (void)setLengthWithInt:(jint)l {
  self->length_ = l;
}

- (jint)getLength {
  return length_;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(v_);
  RELEASE_(n_);
  RELEASE_(t_);
  RELEASE_(c_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:", "Geometry", NULL, 0x1, NULL, NULL },
    { "setTypeWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:", "setType", "V", 0x1, NULL, NULL },
    { "allocateBuffersWithInt:", "allocateBuffers", "V", 0x1, NULL, NULL },
    { "vertexDirectWithDouble:withDouble:withDouble:", "vertexDirect", "V", 0x1, NULL, NULL },
    { "normalDirectWithDouble:withDouble:withDouble:", "normalDirect", "V", 0x1, NULL, NULL },
    { "end", NULL, "V", 0x1, NULL, NULL },
    { "getType", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Manager$Type;", 0x1, NULL, NULL },
    { "setVerticesWithJavaUtilArrayList:withInt:", "setVertices", "V", 0x1, NULL, NULL },
    { "getVertices", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", 0x1, NULL, NULL },
    { "setNormalsWithJavaUtilArrayList:withInt:", "setNormals", "V", 0x1, NULL, NULL },
    { "getNormals", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", 0x1, NULL, NULL },
    { "setTexturesWithJavaUtilArrayList:withInt:", "setTextures", "V", 0x1, NULL, NULL },
    { "setTexturesEmpty", NULL, "V", 0x1, NULL, NULL },
    { "getTextures", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", 0x1, NULL, NULL },
    { "setColorsWithJavaUtilArrayList:withInt:", "setColors", "V", 0x1, NULL, NULL },
    { "getColors", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", 0x1, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Manager$Type;", NULL, NULL,  },
    { "v_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", NULL, NULL,  },
    { "t_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", NULL, NULL,  },
    { "c_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.GLBuffer;", NULL, NULL,  },
    { "length_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry = { 2, "Geometry", "geogebra.common.geogebra3D.euclidian3D.openGL", "ManagerShaders", 0x4, 18, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$, GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *type) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_type_(self, type);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_v_(self, [((GeogebraCommonGeogebra3DEuclidian3DOpenGLGLFactory *) nil_chk(GeogebraCommonGeogebra3DEuclidian3DOpenGLGLFactory_get_prototype_())) newBuffer]);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_n_(self, [GeogebraCommonGeogebra3DEuclidian3DOpenGLGLFactory_get_prototype_() newBuffer]);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_t_(self, [GeogebraCommonGeogebra3DEuclidian3DOpenGLGLFactory_get_prototype_() newBuffer]);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_set_c_(self, [GeogebraCommonGeogebra3DEuclidian3DOpenGLGLFactory_get_prototype_() newBuffer]);
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$, GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *type) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(self, outer$, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry)

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *)outer$ {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(self, outer$);
  return self;
}

- (void)reset {
  currentGeometryIndex_ = 0;
  geometriesLength_ = 0;
}

- (jint)getGeometriesLength {
  return geometriesLength_;
}

- (void)startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:(GeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum *)type {
  if (currentGeometryIndex_ < [self size]) {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_set_currentGeometry_(self, [self getWithInt:currentGeometryIndex_]);
  }
  else {
    GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_setAndConsume_currentGeometry_(self, new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_withGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum_(this$0_, type));
    [self addWithId:currentGeometry_];
  }
  currentGeometryIndex_++;
  geometriesLength_++;
}

- (void)allocateWithInt:(jint)size {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) allocateBuffersWithInt:size];
}

- (void)vertexDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) vertexDirectWithDouble:x withDouble:y withDouble:z];
}

- (void)normalDirectWithDouble:(jdouble)x
                    withDouble:(jdouble)y
                    withDouble:(jdouble)z {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) normalDirectWithDouble:x withDouble:y withDouble:z];
}

- (void)endGeometry {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) end];
}

- (void)setVerticesWithJavaUtilArrayList:(JavaUtilArrayList *)vertices
                                 withInt:(jint)length {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) setVerticesWithJavaUtilArrayList:vertices withInt:length];
  [currentGeometry_ setLengthWithInt:length / 3];
}

- (void)setNormalsWithJavaUtilArrayList:(JavaUtilArrayList *)normals
                                withInt:(jint)length {
  if (length == 3) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) setNormalsWithJavaUtilArrayList:normals withInt:length];
  }
  else if (length == 3 * [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) getLength]) {
    [currentGeometry_ setNormalsWithJavaUtilArrayList:normals withInt:length];
  }
}

- (void)setTexturesWithJavaUtilArrayList:(JavaUtilArrayList *)textures
                                 withInt:(jint)length {
  if (length == 2 * [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) getLength]) {
    [currentGeometry_ setTexturesWithJavaUtilArrayList:textures withInt:length];
  }
  else {
    [currentGeometry_ setTexturesEmpty];
  }
}

- (void)setColorsWithJavaUtilArrayList:(JavaUtilArrayList *)colors
                               withInt:(jint)length {
  if (length == 4 * [((GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_Geometry *) nil_chk(currentGeometry_)) getLength]) {
    [currentGeometry_ setColorsWithJavaUtilArrayList:colors withInt:length];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(currentGeometry_);
  [super dealloc];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders:", "GeometriesSet", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "getGeometriesLength", NULL, "I", 0x1, NULL, NULL },
    { "startGeometryWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManager_TypeEnum:", "startGeometry", "V", 0x1, NULL, NULL },
    { "allocateWithInt:", "allocate", "V", 0x1, NULL, NULL },
    { "vertexDirectWithDouble:withDouble:withDouble:", "vertexDirect", "V", 0x1, NULL, NULL },
    { "normalDirectWithDouble:withDouble:withDouble:", "normalDirect", "V", 0x1, NULL, NULL },
    { "endGeometry", NULL, "V", 0x1, NULL, NULL },
    { "setVerticesWithJavaUtilArrayList:withInt:", "setVertices", "V", 0x1, NULL, NULL },
    { "setNormalsWithJavaUtilArrayList:withInt:", "setNormals", "V", 0x1, NULL, NULL },
    { "setTexturesWithJavaUtilArrayList:withInt:", "setTextures", "V", 0x1, NULL, NULL },
    { "setColorsWithJavaUtilArrayList:withInt:", "setColors", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders;", NULL, NULL,  },
    { "currentGeometry_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders$Geometry;", NULL, NULL,  },
    { "currentGeometryIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "geometriesLength_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.euclidian3D.openGL.ManagerShaders$Geometry;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet = { 2, "GeometriesSet", "geogebra.common.geogebra3D.euclidian3D.openGL", "ManagerShaders", 0x4, 12, methods, 4, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lgeogebra/common/geogebra3D/euclidian3D/openGL/ManagerShaders$Geometry;>;" };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *self, GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_set_this$0_(self, outer$);
  JavaUtilArrayList_init(self);
  [self reset];
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders *outer$) {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet_initWithGeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLManagerShaders_GeometriesSet)
