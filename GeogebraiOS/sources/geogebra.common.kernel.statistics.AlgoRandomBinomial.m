//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoRandomBinomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoTwoNumFunction.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoRandomBinomial.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelStatisticsAlgoRandomBinomial ()

- (jint)randomBinomialWithDouble:(jdouble)n
                      withDouble:(jdouble)p;

@end

static jdouble GeogebraCommonKernelStatisticsAlgoRandomBinomial_halflog2pi_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoRandomBinomial, halflog2pi_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoRandomBinomial, halflog2pi_, jdouble)

static IOSDoubleArray *GeogebraCommonKernelStatisticsAlgoRandomBinomial_logtable_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoRandomBinomial, logtable_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoRandomBinomial, logtable_, IOSDoubleArray *)

__attribute__((unused)) static jint GeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoRandomBinomial *self, jdouble n, jdouble p);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelStatisticsAlgoRandomBinomial)

@implementation GeogebraCommonKernelStatisticsAlgoRandomBinomial

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)a
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)b {
  GeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_RandomBinomial();
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    if ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(b_)) getDouble] < 0) [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:GeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(self, J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble]), [b_ getDouble])];
    }
  }
  else [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setUndefined];
}

- (void)setRandomValueWithDouble:(jdouble)d {
  d = JavaLangMath_roundWithDouble_(GeogebraCommonKernelKernel_checkIntegerWithDouble_(d));
  if (d >= 0 && d <= [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(a_)) getDouble]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:d];
    [num_ updateRepaint];
  }
}

- (jint)randomBinomialWithDouble:(jdouble)n
                      withDouble:(jdouble)p {
  return GeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(self, n, p);
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelStatisticsAlgoRandomBinomial class]) {
    GeogebraCommonKernelStatisticsAlgoRandomBinomial_halflog2pi_ = 0.5 * JavaLangMath_logWithDouble_(2 * JavaLangMath_PI);
    JreStrongAssignAndConsume(&GeogebraCommonKernelStatisticsAlgoRandomBinomial_logtable_, nil, [IOSDoubleArray newArrayWithLength:10]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelStatisticsAlgoRandomBinomial)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoRandomBinomial", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setRandomValueWithDouble:", "setRandomValue", "V", 0x1, NULL, NULL },
    { "randomBinomialWithDouble:withDouble:", "randomBinomial", "I", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "halflog2pi_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoRandomBinomial_halflog2pi_, NULL,  },
    { "logtable_", NULL, 0xa, "[D", &GeogebraCommonKernelStatisticsAlgoRandomBinomial_logtable_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoRandomBinomial = { 2, "AlgoRandomBinomial", "geogebra.common.kernel.statistics", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoRandomBinomial;
}

@end

void GeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelStatisticsAlgoRandomBinomial *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelAlgosAlgoTwoNumFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addRandomGeoWithGeogebraCommonKernelGeosGeoElement:self->num_];
}

GeogebraCommonKernelStatisticsAlgoRandomBinomial *new_GeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticNumberValue> a, id<GeogebraCommonKernelArithmeticNumberValue> b) {
  GeogebraCommonKernelStatisticsAlgoRandomBinomial *self = [GeogebraCommonKernelStatisticsAlgoRandomBinomial alloc];
  GeogebraCommonKernelStatisticsAlgoRandomBinomial_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, a, b);
  return self;
}

jint GeogebraCommonKernelStatisticsAlgoRandomBinomial_randomBinomialWithDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoRandomBinomial *self, jdouble n, jdouble p) {
  jint count = 0;
  for (jint i = 0; i < n; i++) {
    if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getRandomNumber] < p) count++;
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoRandomBinomial)
