//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdTurtleCommand.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoTurtle.h"
#include "geogebra/common/kernel/scripting/CmdTurtleCommand.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdTurtleCommand

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdTurtleCommand_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (GeogebraCommonKernelGeosGeoTurtle *)getTurtleWithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  return (GeogebraCommonKernelGeosGeoTurtle *) check_class_cast(IOSObjectArray_Get(nil_chk(args), 0), [GeogebraCommonKernelGeosGeoTurtle class]);
}

- (jdouble)getNumArgWithNSString:(NSString *)cname
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  if (((IOSObjectArray *) nil_chk(args))->size_ != 2) {
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:cname withInt:args->size_];
  }
  if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(args, 1)])) {
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:cname withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 1)];
  }
  return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(args, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
}

- (void)performTurtleCommandWithNSString:(NSString *)cname
withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  if (n < 1) {
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
  IOSObjectArray *args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isGeoTurtle]) {
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(args, 0)];
  }
  [self performTurtleCommandWithNSString:[c getName] withGeogebraCommonKernelGeosGeoElementArray:args];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdTurtleCommand", NULL, 0x1, NULL, NULL },
    { "getTurtleWithGeogebraCommonKernelGeosGeoElementArray:", "getTurtle", "Lgeogebra.common.kernel.geos.GeoTurtle;", 0x14, NULL, NULL },
    { "getNumArgWithNSString:withGeogebraCommonKernelGeosGeoElementArray:", "getNumArg", "D", 0x14, "Lgeogebra.common.main.MyError;", NULL },
    { "performTurtleCommandWithNSString:withGeogebraCommonKernelGeosGeoElementArray:", "performTurtleCommand", "V", 0x404, "Lgeogebra.common.main.MyError;", NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x11, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdTurtleCommand = { 2, "CmdTurtleCommand", "geogebra.common.kernel.scripting", NULL, 0x401, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdTurtleCommand;
}

@end

void GeogebraCommonKernelScriptingCmdTurtleCommand_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdTurtleCommand *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdTurtleCommand)
