//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolygonRegularND.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/LocusEquation.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegmentInterface.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/algos/EquationScopeInterface.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonKernelAlgosAlgoPolygonRegularND () {
 @public
  jboolean labelsNeedIniting_;
  jdouble alpha_;
  jint n_;
}

- (void)updateOutputWithInt:(jint)n;

- (void)removePointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldPoint;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoPolygon *GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_computeWithInt_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, jint nd);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_updateOutputWithInt_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, jint n);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_removePointWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, GeogebraCommonKernelGeosGeoElement *oldPoint);

@interface GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoPolygonRegularND *this$0_;
}

- (GeogebraCommonKernelGeosGeoPolygon *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1, this$0_, GeogebraCommonKernelAlgosAlgoPolygonRegularND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1)

@interface GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoPolygonRegularND *this$0_;
}

- (GeogebraCommonKernelGeosGeoElement *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2, this$0_, GeogebraCommonKernelAlgosAlgoPolygonRegularND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2)

@interface GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoPolygonRegularND *this$0_;
}

- (GeogebraCommonKernelGeosGeoElement *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3, this$0_, GeogebraCommonKernelAlgosAlgoPolygonRegularND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3)

@implementation GeogebraCommonKernelAlgosAlgoPolygonRegularND

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A1
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B1
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, c, labels, A1, B1, num, direction);
  return self;
}

- (GeogebraCommonKernelGeosGeoPolygon *)newGeoPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (GeogebraCommonKernelGeosGeoElement *)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Polygon();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_REGULAR_POLYGON;
}

- (GeogebraCommonKernelGeosGeoPolygon *)getPoly {
  return GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self);
}

- (void)compute {
  jdouble nd = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) getDouble];
  if (JavaLangDouble_isNaNWithDouble_(nd)) nd = 2;
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_computeWithInt_(self, (jint) JavaLangMath_roundWithDouble_(nd));
}

- (void)setCenterPointWithInt:(jint)n
                   withDouble:(jdouble)beta {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)rotatePointsWithInt:(jint)n
                 withDouble:(jdouble)alpha {
  for (jint k = 0; k < n - 2; k++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) getElementWithInt:k])) setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class])];
    [((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(rotAngle_)) setWithDouble:(k + 2) * alpha];
    [self rotateWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([outputPoints_ getElementWithInt:k], @protocol(GeogebraCommonKernelKernelNDGeoPointND))];
  }
}

- (void)rotateWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)checkUnDefinedWithInt:(jint)n {
  if (n < 3 || ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) isDefined] || ![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self))) setUndefined];
    numOld_ = n;
    return YES;
  }
  return NO;
}

- (void)computeWithInt:(jint)nd {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_computeWithInt_(self, nd);
}

- (jint)getCurrentPointsLength {
  return numOld_;
}

- (void)updateOutputWithInt:(jint)n {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_updateOutputWithInt_(self, n);
}

- (void)removePointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldPoint {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_removePointWithGeogebraCommonKernelGeosGeoElement_(self, oldPoint);
}

- (void)removeOutputExceptWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)keepGeo {
  for (jint i = 0; i < [super getOutputLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [super getOutputWithInt:i];
    if (geo != keepGeo) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
        GeogebraCommonKernelAlgosAlgoPolygonRegularND_removePointWithGeogebraCommonKernelGeosGeoElement_(self, geo);
      }
      else {
        [geo doRemove];
      }
    }
  }
}

- (jboolean)isLocusEquable {
  return YES;
}

- (id<GeogebraCommonKernelAlgosEquationElementInterface>)buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                                      withGeogebraCommonKernelAlgosEquationScopeInterface:(id<GeogebraCommonKernelAlgosEquationScopeInterface>)scope {
  return GeogebraCommonKernelLocusEquation_eqnPolygonRegularWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosEquationScopeInterface_(geo, self, scope);
}

- (void)calcArea {
  if ([A_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [B_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]] && [centerPoint_ isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
    jdouble area = GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoPoint class]));
    area += GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->centerPoint_, [GeogebraCommonKernelGeosGeoPoint class]));
    area += GeogebraCommonKernelGeosGeoPoint_detWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->centerPoint_, [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoPoint class]));
    area = area * self->n_ / 2;
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self))) setAreaWithDouble:area];
    return;
  }
  jdouble radius = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) distanceWithGeogebraCommonKernelKernelNDGeoPointND:centerPoint_];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self))) setAreaWithDouble:n_ * radius * radius * JavaLangMath_sinWithDouble_(alpha_) / 2.0];
}

- (void)dealloc {
  RELEASE_(A_);
  RELEASE_(B_);
  RELEASE_(num_);
  RELEASE_(outputPolygon_);
  RELEASE_(outputPoints_);
  RELEASE_(outputSegments_);
  RELEASE_(centerPoint_);
  RELEASE_(rotAngle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoPolygonRegularND", NULL, 0x1, NULL, NULL },
    { "newGeoPolygonWithGeogebraCommonKernelConstruction:", "newGeoPolygon", "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x404, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x404, NULL, NULL },
    { "setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:", "setDirection", "V", 0x404, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getPoly", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setCenterPointWithInt:withDouble:", "setCenterPoint", "V", 0x404, NULL, NULL },
    { "rotatePointsWithInt:withDouble:", "rotatePoints", "V", 0x4, NULL, NULL },
    { "rotateWithGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x404, NULL, NULL },
    { "checkUnDefinedWithInt:", "checkUnDefined", "Z", 0x4, NULL, NULL },
    { "computeWithInt:", "compute", "V", 0x11, NULL, NULL },
    { "getCurrentPointsLength", NULL, "I", 0x1, NULL, NULL },
    { "updateOutputWithInt:", "updateOutput", "V", 0x2, NULL, NULL },
    { "removePointWithGeogebraCommonKernelGeosGeoElement:", "removePoint", "V", 0x2, NULL, NULL },
    { "removeOutputExceptWithGeogebraCommonKernelGeosGeoElement:", "removeOutputExcept", "V", 0x1, NULL, NULL },
    { "isLocusEquable", NULL, "Z", 0x1, NULL, NULL },
    { "buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosEquationScopeInterface:", "buildEquationElementForGeo", "Lgeogebra.common.kernel.algos.EquationElementInterface;", 0x1, NULL, NULL },
    { "calcArea", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "A_", NULL, 0x14, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "B_", NULL, 0x14, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "num_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "numOld_", NULL, 0x4, "I", NULL, NULL,  },
    { "outputPolygon_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoPolygon;>;",  },
    { "outputPoints_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "outputSegments_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "centerPoint_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "rotAngle_", NULL, 0x4, "Lgeogebra.common.kernel.arithmetic.MyDouble;", NULL, NULL,  },
    { "labelPointsAndSegments_", NULL, 0x4, "Z", NULL, NULL,  },
    { "showNewSegmentsLabels_", NULL, 0x0, "Z", NULL, NULL,  },
    { "showNewPointsLabels_", NULL, 0x0, "Z", NULL, NULL,  },
    { "labelsNeedIniting_", NULL, 0x2, "Z", NULL, NULL,  },
    { "alpha_", NULL, 0x2, "D", NULL, NULL,  },
    { "n_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonRegularND = { 2, "AlgoPolygonRegularND", "geogebra.common.kernel.algos", NULL, 0x401, 20, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolygonRegularND;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> A1, id<GeogebraCommonKernelKernelNDGeoPointND> B1, id<GeogebraCommonKernelArithmeticNumberValue> num, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->numOld_ = 2;
  self->labelsNeedIniting_ = YES;
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_set_A_(self, A1);
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_set_B_(self, B1);
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_set_num_(self, num);
  [self setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:direction];
  jint labelsLength = labels == nil ? 0 : labels->size_;
  self->labelPointsAndSegments_ = ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->A_)) isLabelSet] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->B_)) isLabelSet] || labelsLength > 1);
  self->showNewSegmentsLabels_ = NO;
  self->showNewPointsLabels_ = NO;
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_set_centerPoint_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self newGeoPointWithGeogebraCommonKernelConstruction:c], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_setAndConsume_rotAngle_(self, new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_(self->kernel_));
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_setAndConsume_outputPolygon_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self) autorelease]));
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_setAndConsume_outputSegments_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self) autorelease]));
  if (!self->labelPointsAndSegments_) [self->outputSegments_ removeFromHandler];
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_setAndConsume_outputPoints_(self, new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self) autorelease]));
  if (!self->labelPointsAndSegments_) [self->outputPoints_ removeFromHandler];
  [self->outputPolygon_ adjustOutputSizeWithInt:1];
  [self->outputSegments_ augmentOutputSizeWithInt:2 withBoolean:NO];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputSegments_ getElementWithInt:0])) setAuxiliaryObjectWithBoolean:NO];
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([self->outputSegments_ getElementWithInt:1], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))))) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:self->B_ withGeogebraCommonKernelKernelNDGeoPointND:self->A_];
  [self setInputOutput];
  GeogebraCommonKernelGeosGeoPolygon *poly = GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self);
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) setNotFixedPointsLengthWithBoolean:YES];
  if (labelsLength > 1) {
    GeogebraCommonKernelAlgosAlgoPolygonRegularND_computeWithInt_(self, (labelsLength + 1) / 2);
    [poly setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
    jint d = 1;
    for (jint i = 0; i < [self->outputSegments_ size]; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputSegments_ getElementWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels, d + i)];
    d += [self->outputSegments_ size];
    for (jint i = 0; i < [self->outputPoints_ size]; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputPoints_ getElementWithInt:i])) setLabelWithNSString:IOSObjectArray_Get(labels, d + i)];
  }
  else if (labelsLength == 1) {
    [poly setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  }
  else {
    [poly setLabelWithNSString:nil];
  }
  self->labelsNeedIniting_ = NO;
  [self update];
}

GeogebraCommonKernelGeosGeoPolygon *GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self) {
  return [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPolygon_)) getElementWithInt:0];
}

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_computeWithInt_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, jint nd) {
  GeogebraCommonKernelGeosGeoPolygon *poly = GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self);
  self->n_ = JavaLangMath_maxWithInt_withInt_(2, nd);
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_updateOutputWithInt_(self, self->n_);
  if ([self checkUnDefinedWithInt:self->n_]) {
    return;
  }
  self->alpha_ = GeogebraCommonKernelKernel_PI_2 / self->n_;
  jdouble beta = (JavaLangMath_PI - self->alpha_) / 2;
  [self setCenterPointWithInt:self->n_ withDouble:beta];
  [self rotatePointsWithInt:self->n_ withDouble:self->alpha_];
  IOSObjectArray *points = [IOSObjectArray arrayWithLength:self->n_ type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
  IOSObjectArray_Set(points, 0, self->A_);
  IOSObjectArray_Set(points, 1, self->B_);
  for (jint i = 2; i < self->n_; i++) IOSObjectArray_Set(points, i, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) getElementWithInt:i - 2], @protocol(GeogebraCommonKernelKernelNDGeoPointND)));
  for (jint i = self->numOld_ - 1; i < self->n_; i++) {
    [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) getElementWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))))) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, i) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, (i + 1) % self->n_)];
  }
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly)) setPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points withGeogebraCommonKernelMatrixCoordSys:nil withBoolean:NO];
  IOSObjectArray *segments = [IOSObjectArray arrayWithLength:self->n_ type:GeogebraCommonKernelKernelNDGeoSegmentND_class_()];
  for (jint i = 0; i < self->n_; i++) {
    IOSObjectArray_Set(segments, i, (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) getElementWithInt:i], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND)));
  }
  [poly setSegmentsWithGeogebraCommonKernelKernelNDGeoSegmentNDArray:segments];
  [self calcArea];
  [poly updateRegionCSWithFirstPoints];
  self->numOld_ = self->n_;
}

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_updateOutputWithInt_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, jint n) {
  jint nOld = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputPoints_)) size] + 2;
  if (nOld == n) return;
  if (n > nOld) {
    self->showNewPointsLabels_ = (self->labelPointsAndSegments_ && (([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->A_)) isEuclidianVisible] && [self->A_ isLabelVisible]) || ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->B_)) isEuclidianVisible] && [self->B_ isLabelVisible])));
    [self->outputPoints_ augmentOutputSizeWithInt:n - nOld withBoolean:NO];
    if (self->labelPointsAndSegments_ && !self->labelsNeedIniting_) [self->outputPoints_ updateLabels];
    self->showNewSegmentsLabels_ = NO;
    for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) size]; i++) self->showNewSegmentsLabels_ = (self->showNewSegmentsLabels_ || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputSegments_ getElementWithInt:i])) isLabelVisible]);
    [self->outputSegments_ augmentOutputSizeWithInt:n - nOld withBoolean:NO];
    if (self->labelPointsAndSegments_ && !self->labelsNeedIniting_) [self->outputSegments_ updateLabels];
  }
  else {
    for (jint i = n; i < nOld; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->outputPoints_ getElementWithInt:i - 2])) setUndefined];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) getElementWithInt:i])) setUndefined];
    }
    if (n > 2) [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) getElementWithInt:n - 1], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))))) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([self->outputPoints_ getElementWithInt:n - 3], @protocol(GeogebraCommonKernelKernelNDGeoPointND)) withGeogebraCommonKernelKernelNDGeoPointND:self->A_];
    else [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->outputSegments_)) getElementWithInt:n - 1], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))))) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:self->B_ withGeogebraCommonKernelKernelNDGeoPointND:self->A_];
  }
}

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_removePointWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *self, GeogebraCommonKernelGeosGeoElement *oldPoint) {
  JavaUtilArrayList *algoList = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldPoint)) getAlgorithmList];
  for (jint k = 0; k < [((JavaUtilArrayList *) nil_chk(algoList)) size]; k++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    for (jint j = 0; j < ((IOSObjectArray *) nil_chk(self->input_))->size_; j++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(self->input_, j))) removeFromUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algo];
  }
  [oldPoint setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:nil];
  GeogebraCommonKernelGeosGeoPolygon *poly = GeogebraCommonKernelAlgosAlgoPolygonRegularND_getPoly(self);
  for (jint k = 0; k < [algoList size]; k++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = [algoList getWithInt:k];
    if ([GeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface_class_() isInstance:algo] && [((id<GeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface>) nil_chk(((id<GeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface>) check_protocol_cast(algo, @protocol(GeogebraCommonKernelAlgosAlgoJoinPointsSegmentInterface))))) getPoly] == poly) {
      continue;
    }
    [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algo)) remove];
  }
  [algoList clear];
  [oldPoint doRemove];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonRegularND)

@implementation GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1

- (GeogebraCommonKernelGeosGeoPolygon *)newElement {
  GeogebraCommonKernelGeosGeoPolygon *p = [this$0_ newGeoPolygonWithGeogebraCommonKernelConstruction:this$0_->cons_];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$ {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoPolygonRegularND;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoPolygonRegularND", "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoPolygonRegularND", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoPolygon;>;" };
  return &_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 *self = [GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1 alloc];
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$1)

@implementation GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2

- (GeogebraCommonKernelGeosGeoElement *)newElement {
  GeogebraCommonKernelGeosGeoElement *segment = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputPolygon_)) getElementWithInt:0])) createSegmentWithGeogebraCommonKernelKernelNDGeoPointND:this$0_->A_ withGeogebraCommonKernelKernelNDGeoPointND:this$0_->B_ withBoolean:YES], [GeogebraCommonKernelGeosGeoElement class]);
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(segment)) setAuxiliaryObjectWithBoolean:YES];
  jboolean segmentsVisible = NO;
  jint size = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(this$0_->outputSegments_)) size];
  if (size > 0) {
    for (jint i = 0; i < size && !segmentsVisible; i++) {
      segmentsVisible = (segmentsVisible || [((GeogebraCommonKernelGeosGeoElement *) nil_chk([this$0_->outputSegments_ getElementWithInt:i])) isEuclidianVisible]);
    }
  }
  else {
    segmentsVisible = YES;
  }
  [segment setEuclidianVisibleWithBoolean:segmentsVisible];
  [segment setLabelVisibleWithBoolean:this$0_->showNewSegmentsLabels_];
  [segment setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->A_, [GeogebraCommonKernelGeosGeoElement class])))) getViewSet]];
  [segment setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->A_, [GeogebraCommonKernelGeosGeoElement class])];
  return segment;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$ {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoPolygonRegularND;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoPolygonRegularND", "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 = { 2, "", "geogebra.common.kernel.algos", "AlgoPolygonRegularND", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 *self = [GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2 alloc];
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$2)

@implementation GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3

- (GeogebraCommonKernelGeosGeoElement *)newElement {
  GeogebraCommonKernelGeosGeoElement *newPoint = [this$0_ newGeoPointWithGeogebraCommonKernelConstruction:this$0_->cons_];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newPoint)) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  [newPoint setAuxiliaryObjectWithBoolean:YES];
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(newPoint, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) setPointSizeWithInt:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(this$0_->A_)) getPointSize]];
  [newPoint setEuclidianVisibleWithBoolean:[this$0_->A_ isEuclidianVisible] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(this$0_->B_)) isEuclidianVisible]];
  [newPoint setAuxiliaryObjectWithBoolean:YES];
  [newPoint setLabelVisibleWithBoolean:this$0_->showNewPointsLabels_];
  [newPoint setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->A_, [GeogebraCommonKernelGeosGeoElement class])) getViewSet]];
  [newPoint setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->A_, [GeogebraCommonKernelGeosGeoElement class])];
  GeogebraCommonKernelGeosGeoBoolean *conditionToShow = [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->A_, [GeogebraCommonKernelGeosGeoElement class])) getShowObjectCondition];
  if (conditionToShow == nil) conditionToShow = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(this$0_->B_, [GeogebraCommonKernelGeosGeoElement class])))) getShowObjectCondition];
  if (conditionToShow != nil) {
    @try {
      [newPoint setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:conditionToShow];
    }
    @catch (JavaLangException *e) {
    }
  }
  return newPoint;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:(GeogebraCommonKernelAlgosAlgoPolygonRegularND *)outer$ {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoPolygonRegularND;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoPolygonRegularND", "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 = { 2, "", "geogebra.common.kernel.algos", "AlgoPolygonRegularND", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3;
}

@end

void GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 *self, GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 *new_GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(GeogebraCommonKernelAlgosAlgoPolygonRegularND *outer$) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 *self = [GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3 alloc];
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3_initWithGeogebraCommonKernelAlgosAlgoPolygonRegularND_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolygonRegularND_$3)
