//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/scripting/CmdSetSpinSpeed.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/kernel3D/scripting/CmdSetSpinSpeed.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  switch (n) {
    case 1:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ([GeogebraCommonKernelGeosGeoNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(arg_), 0)]) {
      id<GeogebraCommonKernelGeosGeoNumberValue> v = (id<GeogebraCommonKernelGeosGeoNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 0), @protocol(GeogebraCommonKernelGeosGeoNumberValue));
      GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *view3D = (GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView3D], [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class]);
      [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(view3D)) setRotContinueAnimationWithLong:0 withDouble:[((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(v)) getDouble] * 0.01];
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetSpinSpeed", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed = { 2, "CmdSetSpinSpeed", "geogebra.common.geogebra3D.kernel3D.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed;
}

@end

void GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed *new_GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed *self = [GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed alloc];
  GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DScriptingCmdSetSpinSpeed)
