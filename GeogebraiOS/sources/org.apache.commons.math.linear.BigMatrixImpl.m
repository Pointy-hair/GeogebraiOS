//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/BigMatrixImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/math/BigDecimal.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/BigMatrix.h"
#include "org/apache/commons/math/linear/BigMatrixImpl.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/NonSquareMatrixException.h"
#include "org/apache/commons/math/linear/SingularMatrixException.h"

#define OrgApacheCommonsMathLinearBigMatrixImpl_serialVersionUID -1011428905656140431LL

@interface OrgApacheCommonsMathLinearBigMatrixImpl () {
 @public
  jint roundingMode_;
  jint scale__;
}

- (IOSObjectArray *)copyOut OBJC_METHOD_FAMILY_NONE;

- (void)copyInWithJavaMathBigDecimalArray2:(IOSObjectArray *)inArg OBJC_METHOD_FAMILY_NONE;

- (void)copyInWithDoubleArray2:(IOSObjectArray *)inArg OBJC_METHOD_FAMILY_NONE;

- (void)copyInWithNSStringArray2:(IOSObjectArray *)inArg OBJC_METHOD_FAMILY_NONE;

@end

static JavaMathBigDecimal *OrgApacheCommonsMathLinearBigMatrixImpl_TOO_SMALL_;
J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBigMatrixImpl, TOO_SMALL_, JavaMathBigDecimal *)

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearBigMatrixImpl, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsMathLinearBigMatrixImpl_copyOut(OrgApacheCommonsMathLinearBigMatrixImpl *self);

__attribute__((unused)) static void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithJavaMathBigDecimalArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg);

__attribute__((unused)) static void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithDoubleArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg);

__attribute__((unused)) static void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithNSStringArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg);

J2OBJC_INITIALIZED_DEFN(OrgApacheCommonsMathLinearBigMatrixImpl)

JavaMathBigDecimal *OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
JavaMathBigDecimal *OrgApacheCommonsMathLinearBigMatrixImpl_ONE_;

@implementation OrgApacheCommonsMathLinearBigMatrixImpl

- (instancetype)init {
  OrgApacheCommonsMathLinearBigMatrixImpl_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)rowDimension
                    withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

- (instancetype)initWithJavaMathBigDecimalArray2:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(self, d);
  return self;
}

- (instancetype)initWithJavaMathBigDecimalArray2:(IOSObjectArray *)d
                                     withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(self, d, copyArray);
  return self;
}

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(self, d);
  return self;
}

- (instancetype)initWithNSStringArray2:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(self, d);
  return self;
}

- (instancetype)initWithJavaMathBigDecimalArray:(IOSObjectArray *)v {
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(self, v);
  return self;
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)copy__ {
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(OrgApacheCommonsMathLinearBigMatrixImpl_copyOut(self), NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)addWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearBigMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    jint rowCount = [self getRowDimension];
    jint columnCount = [self getColumnDimension];
    IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
    for (jint row = 0; row < rowCount; row++) {
      IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
      IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
      for (jint col = 0; col < columnCount; col++) {
        IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) addWithJavaMathBigDecimal:[((id<OrgApacheCommonsMathLinearBigMatrix>) nil_chk(m)) getEntryWithInt:row withInt:col]]);
      }
    }
    return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
  }
}

- (OrgApacheCommonsMathLinearBigMatrixImpl *)addWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBigMatrixImpl *) nil_chk(m))->data_, row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) addWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(mRow), col)]);
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)subtractWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearBigMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    jint rowCount = [self getRowDimension];
    jint columnCount = [self getColumnDimension];
    IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
    for (jint row = 0; row < rowCount; row++) {
      IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
      IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
      for (jint col = 0; col < columnCount; col++) {
        IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) subtractWithJavaMathBigDecimal:[self getEntryWithInt:row withInt:col]]);
      }
    }
    return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
  }
}

- (OrgApacheCommonsMathLinearBigMatrixImpl *)subtractWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearBigMatrixImpl *) nil_chk(m))->data_, row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) subtractWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(mRow), col)]);
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)scalarAddWithJavaMathBigDecimal:(JavaMathBigDecimal *)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) addWithJavaMathBigDecimal:d]);
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)scalarMultiplyWithJavaMathBigDecimal:(JavaMathBigDecimal *)d {
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < rowCount; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      IOSObjectArray_Set(nil_chk(outDataRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) multiplyWithJavaMathBigDecimal:d]);
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)multiplyWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearBigMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
    jint nRows = [self getRowDimension];
    jint nCols = [((id<OrgApacheCommonsMathLinearBigMatrix>) nil_chk(m)) getColumnDimension];
    jint nSum = [self getColumnDimension];
    IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nRows, nCols } type:JavaMathBigDecimal_class_()];
    for (jint row = 0; row < nRows; row++) {
      IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
      IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
      for (jint col = 0; col < nCols; col++) {
        JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
        for (jint i = 0; i < nSum; i++) {
          sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), i))) multiplyWithJavaMathBigDecimal:[m getEntryWithInt:i withInt:col]]];
        }
        IOSObjectArray_Set(nil_chk(outDataRow), col, sum);
      }
    }
    return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
  }
}

- (OrgApacheCommonsMathLinearBigMatrixImpl *)multiplyWithOrgApacheCommonsMathLinearBigMatrixImpl:(OrgApacheCommonsMathLinearBigMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint nRows = [self getRowDimension];
  jint nCols = [((OrgApacheCommonsMathLinearBigMatrixImpl *) nil_chk(m)) getColumnDimension];
  jint nSum = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nRows, nCols } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSObjectArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < nCols; col++) {
      JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
      for (jint i = 0; i < nSum; i++) {
        sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(m->data_, i)), col)]];
      }
      IOSObjectArray_Set(nil_chk(outDataRow), col, sum);
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)preMultiplyWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)m {
  return [((id<OrgApacheCommonsMathLinearBigMatrix>) nil_chk(m)) multiplyWithOrgApacheCommonsMathLinearBigMatrix:self];
}

- (IOSObjectArray *)getData {
  return OrgApacheCommonsMathLinearBigMatrixImpl_copyOut(self);
}

- (IOSObjectArray *)getDataAsDoubleArray {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  IOSObjectArray *d = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ nRows, nCols }];
  for (jint i = 0; i < nRows; i++) {
    for (jint j = 0; j < nCols; j++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(d, i)), j) = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j))) doubleValue];
    }
  }
  return d;
}

- (IOSObjectArray *)getDataRef {
  return data_;
}

- (jint)getRoundingMode {
  return roundingMode_;
}

- (void)setRoundingModeWithInt:(jint)roundingMode {
  self->roundingMode_ = roundingMode;
}

- (jint)getScale {
  return scale__;
}

- (void)setScaleWithInt:(jint)scale_ {
  self->scale__ = scale_;
}

- (JavaMathBigDecimal *)getNorm {
  JavaMathBigDecimal *maxColSum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
  for (jint col = 0; col < [self getColumnDimension]; col++) {
    JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
    for (jint row = 0; row < [self getRowDimension]; row++) {
      sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), col))) abs]];
    }
    maxColSum = [((JavaMathBigDecimal *) nil_chk(maxColSum)) maxWithJavaMathBigDecimal:sum];
  }
  return maxColSum;
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)getSubMatrixWithInt:(jint)startRow
                                                       withInt:(jint)endRow
                                                       withInt:(jint)startColumn
                                                       withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, startRow);
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, endRow);
  if (startRow > endRow) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INITIAL_ROW_AFTER_FINAL_ROW(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(startRow), JavaLangInteger_valueOfWithInt_(endRow) } count:2 type:NSObject_class_()]) autorelease];
  }
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, startColumn);
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, endColumn);
  if (startColumn > endColumn) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INITIAL_COLUMN_AFTER_FINAL_COLUMN(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(startColumn), JavaLangInteger_valueOfWithInt_(endColumn) } count:2 type:NSObject_class_()]) autorelease];
  }
  IOSObjectArray *subMatrixData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ endRow - startRow + 1, endColumn - startColumn + 1 } type:JavaMathBigDecimal_class_()];
  for (jint i = startRow; i <= endRow; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(data_), i), startColumn, IOSObjectArray_Get(subMatrixData, i - startRow), 0, endColumn - startColumn + 1);
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(subMatrixData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)getSubMatrixWithIntArray:(IOSIntArray *)selectedRows
                                                       withIntArray:(IOSIntArray *)selectedColumns {
  if (((IOSIntArray *) nil_chk(selectedRows))->size_ * ((IOSIntArray *) nil_chk(selectedColumns))->size_ == 0) {
    if (selectedRows->size_ == 0) {
      @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_SELECTED_ROW_INDEX_ARRAY(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
    }
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EMPTY_SELECTED_COLUMN_INDEX_ARRAY(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]) autorelease];
  }
  IOSObjectArray *subMatrixData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ selectedRows->size_, selectedColumns->size_ } type:JavaMathBigDecimal_class_()];
  @try {
    for (jint i = 0; i < selectedRows->size_; i++) {
      IOSObjectArray *subI = IOSObjectArray_Get(subMatrixData, i);
      IOSObjectArray *dataSelectedI = IOSObjectArray_Get(nil_chk(data_), IOSIntArray_Get(selectedRows, i));
      for (jint j = 0; j < selectedColumns->size_; j++) {
        IOSObjectArray_Set(nil_chk(subI), j, IOSObjectArray_Get(nil_chk(dataSelectedI), IOSIntArray_Get(selectedColumns, j)));
      }
    }
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    {
      IOSIntArray *a__ = selectedRows;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint row = *b__++;
        OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
      }
    }
    {
      IOSIntArray *a__ = selectedColumns;
      jint const *b__ = a__->buffer_;
      jint const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jint column = *b__++;
        OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
      }
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(subMatrixData, NO) autorelease];
}

- (void)setSubMatrixWithJavaMathBigDecimalArray2:(IOSObjectArray *)subMatrix
                                         withInt:(jint)row
                                         withInt:(jint)column {
  jint nRows = ((IOSObjectArray *) nil_chk(subMatrix))->size_;
  if (nRows == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, 0)))->size_;
  if (nCols == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  for (jint r = 1; r < nRows; r++) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_ != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(subMatrix, r)))->size_) } count:2 type:NSObject_class_()]);
    }
  }
  if (data_ == nil) {
    if (row > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_ROWS_NOT_INITIALIZED_YET(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row) } count:1 type:NSObject_class_()]);
    }
    if (column > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_COLUMNS_NOT_INITIALIZED_YET(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(column) } count:1 type:NSObject_class_()]);
    }
    OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ nRows, nCols } type:JavaMathBigDecimal_class_()]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(subMatrix, 0, data_, 0, subMatrix->size_);
  }
  else {
    OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
    OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
    OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, nRows + row - 1);
    OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, nCols + column - 1);
  }
  for (jint i = 0; i < nRows; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(subMatrix, i), 0, IOSObjectArray_Get(nil_chk(data_), row + i), column, nCols);
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)getRowMatrixWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint ncols = [self getColumnDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ 1, ncols } type:JavaMathBigDecimal_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(data_), row), 0, IOSObjectArray_Get(out, 0), 0, ncols);
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(out, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)getColumnMatrixWithInt:(jint)column {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, column);
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nRows, 1 } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(out, row)), 0, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column));
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(out, NO) autorelease];
}

- (IOSObjectArray *)getRowWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint ncols = [self getColumnDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:ncols type:JavaMathBigDecimal_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(data_), row), 0, out, 0, ncols);
  return out;
}

- (IOSDoubleArray *)getRowAsDoubleArrayWithInt:(jint)row {
  OrgApacheCommonsMathLinearMatrixUtils_checkRowIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, row);
  jint ncols = [self getColumnDimension];
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:ncols];
  for (jint i = 0; i < ncols; i++) {
    *IOSDoubleArray_GetRef(out, i) = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), i))) doubleValue];
  }
  return out;
}

- (IOSObjectArray *)getColumnWithInt:(jint)col {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, col);
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:nRows type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < nRows; i++) {
    IOSObjectArray_Set(out, i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), col));
  }
  return out;
}

- (IOSDoubleArray *)getColumnAsDoubleArrayWithInt:(jint)col {
  OrgApacheCommonsMathLinearMatrixUtils_checkColumnIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_(self, col);
  jint nrows = [self getRowDimension];
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:nrows];
  for (jint i = 0; i < nrows; i++) {
    *IOSDoubleArray_GetRef(out, i) = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), col))) doubleValue];
  }
  return out;
}

- (JavaMathBigDecimal *)getEntryWithInt:(jint)row
                                withInt:(jint)column {
  @try {
    return IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (jdouble)getEntryAsDoubleWithInt:(jint)row
                           withInt:(jint)column {
  return [((JavaMathBigDecimal *) nil_chk([self getEntryWithInt:row withInt:column])) doubleValue];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)transpose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  IOSObjectArray *outData = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nCols, nRows } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    for (jint col = 0; col < nCols; col++) {
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(outData, col)), row, IOSObjectArray_Get(nil_chk(dataRow), col));
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)inverse {
  return [self solveWithOrgApacheCommonsMathLinearBigMatrix:OrgApacheCommonsMathLinearMatrixUtils_createBigIdentityMatrixWithInt_([self getRowDimension])];
}

- (JavaMathBigDecimal *)getDeterminant {
  if (![self isSquare]) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_([self getRowDimension], [self getColumnDimension]) autorelease];
  }
  if ([self isSingular]) {
    return OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
  }
  else {
    JavaMathBigDecimal *det = (parity_ == 1) ? OrgApacheCommonsMathLinearBigMatrixImpl_ONE_ : [((JavaMathBigDecimal *) nil_chk(OrgApacheCommonsMathLinearBigMatrixImpl_ONE_)) negate];
    for (jint i = 0; i < [self getRowDimension]; i++) {
      det = [det multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lu_), i)), i)];
    }
    return det;
  }
}

- (jboolean)isSquare {
  return [self getColumnDimension] == [self getRowDimension];
}

- (jboolean)isSingular {
  if (lu_ == nil) {
    @try {
      [self luDecompose];
      return NO;
    }
    @catch (OrgApacheCommonsMathLinearInvalidMatrixException *ex) {
      return YES;
    }
  }
  else {
    return NO;
  }
}

- (jint)getRowDimension {
  return ((IOSObjectArray *) nil_chk(data_))->size_;
}

- (jint)getColumnDimension {
  return ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(nil_chk(data_), 0)))->size_;
}

- (JavaMathBigDecimal *)getTrace {
  if (![self isSquare]) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_([self getRowDimension], [self getColumnDimension]) autorelease];
  }
  JavaMathBigDecimal *trace = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), 0)), 0);
  for (jint i = 1; i < [self getRowDimension]; i++) {
    trace = [((JavaMathBigDecimal *) nil_chk(trace)) addWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data_, i)), i)];
  }
  return trace;
}

- (IOSObjectArray *)operateWithJavaMathBigDecimalArray:(IOSObjectArray *)v {
  if (((IOSObjectArray *) nil_chk(v))->size_ != [self getColumnDimension]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:2 type:NSObject_class_()]);
  }
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:nRows type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRows; row++) {
    JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
    for (jint i = 0; i < nCols; i++) {
      sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(v, i)]];
    }
    IOSObjectArray_Set(out, row, sum);
  }
  return out;
}

- (IOSObjectArray *)operateWithDoubleArray:(IOSDoubleArray *)v {
  IOSObjectArray *bd = [IOSObjectArray arrayWithLength:((IOSDoubleArray *) nil_chk(v))->size_ type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < bd->size_; i++) {
    IOSObjectArray_SetAndConsume(bd, i, new_JavaMathBigDecimal_initWithDouble_(IOSDoubleArray_Get(v, i)));
  }
  return [self operateWithJavaMathBigDecimalArray:bd];
}

- (IOSObjectArray *)preMultiplyWithJavaMathBigDecimalArray:(IOSObjectArray *)v {
  jint nRows = [self getRowDimension];
  if (((IOSObjectArray *) nil_chk(v))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  jint nCols = [self getColumnDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:nCols type:JavaMathBigDecimal_class_()];
  for (jint col = 0; col < nCols; col++) {
    JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
    for (jint i = 0; i < nRows; i++) {
      sum = [((JavaMathBigDecimal *) nil_chk(sum)) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), col))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(v, i)]];
    }
    IOSObjectArray_Set(out, col, sum);
  }
  return out;
}

- (IOSObjectArray *)solveWithJavaMathBigDecimalArray:(IOSObjectArray *)b {
  jint nRows = [self getRowDimension];
  if (((IOSObjectArray *) nil_chk(b))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(b->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  id<OrgApacheCommonsMathLinearBigMatrix> bMatrix = [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(b) autorelease];
  IOSObjectArray *solution = [((OrgApacheCommonsMathLinearBigMatrixImpl *) nil_chk(((OrgApacheCommonsMathLinearBigMatrixImpl *) check_class_cast(([self solveWithOrgApacheCommonsMathLinearBigMatrix:bMatrix]), [OrgApacheCommonsMathLinearBigMatrixImpl class])))) getDataRef];
  IOSObjectArray *out = [IOSObjectArray arrayWithLength:nRows type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray_Set(out, row, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(solution), row)), 0));
  }
  return out;
}

- (IOSObjectArray *)solveWithDoubleArray:(IOSDoubleArray *)b {
  IOSObjectArray *bd = [IOSObjectArray arrayWithLength:((IOSDoubleArray *) nil_chk(b))->size_ type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < bd->size_; i++) {
    IOSObjectArray_SetAndConsume(bd, i, new_JavaMathBigDecimal_initWithDouble_(IOSDoubleArray_Get(b, i)));
  }
  return [self solveWithJavaMathBigDecimalArray:bd];
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)solveWithOrgApacheCommonsMathLinearBigMatrix:(id<OrgApacheCommonsMathLinearBigMatrix>)b {
  if ([((id<OrgApacheCommonsMathLinearBigMatrix>) nil_chk(b)) getRowDimension] != [self getRowDimension]) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIMENSIONS_MISMATCH_2x2(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_([b getRowDimension]), JavaLangInteger_valueOfWithInt_([b getColumnDimension]), JavaLangInteger_valueOfWithInt_([self getRowDimension]), @"n" } count:4 type:NSObject_class_()]);
  }
  if (![self isSquare]) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_([self getRowDimension], [self getColumnDimension]) autorelease];
  }
  if ([self isSingular]) {
    @throw [new_OrgApacheCommonsMathLinearSingularMatrixException_init() autorelease];
  }
  jint nCol = [self getColumnDimension];
  jint nColB = [b getColumnDimension];
  jint nRowB = [b getRowDimension];
  IOSObjectArray *bp = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nRowB, nColB } type:JavaMathBigDecimal_class_()];
  for (jint row = 0; row < nRowB; row++) {
    IOSObjectArray *bpRow = IOSObjectArray_Get(bp, row);
    for (jint col = 0; col < nColB; col++) {
      IOSObjectArray_Set(nil_chk(bpRow), col, [b getEntryWithInt:IOSIntArray_Get(nil_chk(permutation_), row) withInt:col]);
    }
  }
  for (jint col = 0; col < nCol; col++) {
    for (jint i = col + 1; i < nCol; i++) {
      IOSObjectArray *bpI = IOSObjectArray_Get(bp, i);
      IOSObjectArray *luI = IOSObjectArray_Get(nil_chk(lu_), i);
      for (jint j = 0; j < nColB; j++) {
        IOSObjectArray_Set(nil_chk(bpI), j, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(bpI, j))) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(bp, col)), j))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(luI), col)]]);
      }
    }
  }
  for (jint col = nCol - 1; col >= 0; col--) {
    IOSObjectArray *bpCol = IOSObjectArray_Get(bp, col);
    JavaMathBigDecimal *luDiag = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lu_), col)), col);
    for (jint j = 0; j < nColB; j++) {
      IOSObjectArray_Set(nil_chk(bpCol), j, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(bpCol, j))) divideWithJavaMathBigDecimal:luDiag withInt:scale__ withInt:roundingMode_]);
    }
    for (jint i = 0; i < col; i++) {
      IOSObjectArray *bpI = IOSObjectArray_Get(bp, i);
      IOSObjectArray *luI = IOSObjectArray_Get(lu_, i);
      for (jint j = 0; j < nColB; j++) {
        IOSObjectArray_Set(nil_chk(bpI), j, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(bpI, j))) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(bp, col)), j))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(luI), col)]]);
      }
    }
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(bp, NO) autorelease];
}

- (void)luDecompose {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (nRows != nCols) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_([self getRowDimension], [self getColumnDimension]) autorelease];
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, [self getData]);
  OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_permutation_(self, [IOSIntArray newArrayWithLength:nRows]);
  for (jint row = 0; row < nRows; row++) {
    *IOSIntArray_GetRef(permutation_, row) = row;
  }
  parity_ = 1;
  for (jint col = 0; col < nCols; col++) {
    JavaMathBigDecimal *sum = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
    for (jint row = 0; row < col; row++) {
      IOSObjectArray *luRow = IOSObjectArray_Get(nil_chk(lu_), row);
      sum = IOSObjectArray_Get(nil_chk(luRow), col);
      for (jint i = 0; i < row; i++) {
        sum = [((JavaMathBigDecimal *) nil_chk(sum)) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(luRow, i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(lu_, i)), col)]];
      }
      IOSObjectArray_Set(luRow, col, sum);
    }
    jint max = col;
    JavaMathBigDecimal *largest = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
    for (jint row = col; row < nRows; row++) {
      IOSObjectArray *luRow = IOSObjectArray_Get(nil_chk(lu_), row);
      sum = IOSObjectArray_Get(nil_chk(luRow), col);
      for (jint i = 0; i < col; i++) {
        sum = [((JavaMathBigDecimal *) nil_chk(sum)) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(luRow, i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(lu_, i)), col)]];
      }
      IOSObjectArray_Set(luRow, col, sum);
      if ([((JavaMathBigDecimal *) nil_chk([((JavaMathBigDecimal *) nil_chk(sum)) abs])) compareToWithId:largest] == 1) {
        largest = [sum abs];
        max = row;
      }
    }
    if ([((JavaMathBigDecimal *) nil_chk([((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lu_), max)), col))) abs])) compareToWithId:OrgApacheCommonsMathLinearBigMatrixImpl_TOO_SMALL_] <= 0) {
      OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
      @throw [new_OrgApacheCommonsMathLinearSingularMatrixException_init() autorelease];
    }
    if (max != col) {
      JavaMathBigDecimal *tmp = OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_;
      for (jint i = 0; i < nCols; i++) {
        tmp = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lu_), max)), i);
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(lu_, max)), i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(lu_, col)), i));
        IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(lu_, col)), i, tmp);
      }
      jint temp = IOSIntArray_Get(permutation_, max);
      *IOSIntArray_GetRef(permutation_, max) = IOSIntArray_Get(permutation_, col);
      *IOSIntArray_GetRef(permutation_, col) = temp;
      parity_ = -parity_;
    }
    JavaMathBigDecimal *luDiag = IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(lu_), col)), col);
    for (jint row = col + 1; row < nRows; row++) {
      IOSObjectArray *luRow = IOSObjectArray_Get(lu_, row);
      IOSObjectArray_Set(nil_chk(luRow), col, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(luRow, col))) divideWithJavaMathBigDecimal:luDiag withInt:scale__ withInt:roundingMode_]);
    }
  }
}

- (NSString *)description {
  JavaLangStringBuilder *res = [new_JavaLangStringBuilder_init() autorelease];
  [res appendWithNSString:@"BigMatrixImpl{"];
  if (data_ != nil) {
    for (jint i = 0; i < data_->size_; i++) {
      if (i > 0) {
        [res appendWithNSString:@","];
      }
      [res appendWithNSString:@"{"];
      for (jint j = 0; j < ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(data_, 0)))->size_; j++) {
        if (j > 0) {
          [res appendWithNSString:@","];
        }
        [res appendWithId:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(data_, i)), j)];
      }
      [res appendWithNSString:@"}"];
    }
  }
  [res appendWithNSString:@"}"];
  return [res description];
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([object isKindOfClass:[OrgApacheCommonsMathLinearBigMatrixImpl class]] == NO) {
    return NO;
  }
  id<OrgApacheCommonsMathLinearBigMatrix> m = (id<OrgApacheCommonsMathLinearBigMatrix>) check_protocol_cast(object, @protocol(OrgApacheCommonsMathLinearBigMatrix));
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if ([((id<OrgApacheCommonsMathLinearBigMatrix>) nil_chk(m)) getColumnDimension] != nCols || [m getRowDimension] != nRows) {
    return NO;
  }
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    for (jint col = 0; col < nCols; col++) {
      if (![((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) isEqual:[m getEntryWithInt:row withInt:col]]) {
        return NO;
      }
    }
  }
  return YES;
}

- (NSUInteger)hash {
  jint ret = 7;
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  ret = ret * 31 + nRows;
  ret = ret * 31 + nCols;
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    for (jint col = 0; col < nCols; col++) {
      ret = ret * 31 + (11 * (row + 1) + 17 * (col + 1)) * ((jint) [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(nil_chk(dataRow), col))) hash]);
    }
  }
  return ret;
}

- (id<OrgApacheCommonsMathLinearBigMatrix>)getLUMatrix {
  if (lu_ == nil) {
    [self luDecompose];
  }
  return [new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(lu_) autorelease];
}

- (IOSIntArray *)getPermutation {
  IOSIntArray *out = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(permutation_))->size_];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(permutation_, 0, out, 0, permutation_->size_);
  return out;
}

- (IOSObjectArray *)copyOut {
  return OrgApacheCommonsMathLinearBigMatrixImpl_copyOut(self);
}

- (void)copyInWithJavaMathBigDecimalArray2:(IOSObjectArray *)inArg {
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithJavaMathBigDecimalArray2_(self, inArg);
}

- (void)copyInWithDoubleArray2:(IOSObjectArray *)inArg {
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithDoubleArray2_(self, inArg);
}

- (void)copyInWithNSStringArray2:(IOSObjectArray *)inArg {
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithNSStringArray2_(self, inArg);
}

- (void)dealloc {
  RELEASE_(data_);
  RELEASE_(lu_);
  RELEASE_(permutation_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [OrgApacheCommonsMathLinearBigMatrixImpl class]) {
    JreStrongAssignAndConsume(&OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_, nil, new_JavaMathBigDecimal_initWithInt_(0));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathLinearBigMatrixImpl_ONE_, nil, new_JavaMathBigDecimal_initWithInt_(1));
    JreStrongAssignAndConsume(&OrgApacheCommonsMathLinearBigMatrixImpl_TOO_SMALL_, nil, new_JavaMathBigDecimal_initWithDouble_(10E-12));
    J2OBJC_SET_INITIALIZED(OrgApacheCommonsMathLinearBigMatrixImpl)
  }
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithJavaMathBigDecimalArray2:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithJavaMathBigDecimalArray2:withBoolean:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray2:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithNSStringArray2:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithJavaMathBigDecimalArray:", "BigMatrixImpl", NULL, 0x1, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearBigMatrix:", "add", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearBigMatrixImpl:", "add", "Lorg.apache.commons.math.linear.BigMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearBigMatrix:", "subtract", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearBigMatrixImpl:", "subtract", "Lorg.apache.commons.math.linear.BigMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "scalarAddWithJavaMathBigDecimal:", "scalarAdd", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, NULL, NULL },
    { "scalarMultiplyWithJavaMathBigDecimal:", "scalarMultiply", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, NULL, NULL },
    { "multiplyWithOrgApacheCommonsMathLinearBigMatrix:", "multiply", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearBigMatrixImpl:", "multiply", "Lorg.apache.commons.math.linear.BigMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithOrgApacheCommonsMathLinearBigMatrix:", "preMultiply", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getDataAsDoubleArray", NULL, "[[D", 0x1, NULL, NULL },
    { "getDataRef", NULL, "[[Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getRoundingMode", NULL, "I", 0x1, NULL, NULL },
    { "setRoundingModeWithInt:", "setRoundingMode", "V", 0x1, NULL, NULL },
    { "getScale", NULL, "I", 0x1, NULL, NULL },
    { "setScaleWithInt:", "setScale", "V", 0x1, NULL, NULL },
    { "getNorm", NULL, "Ljava.math.BigDecimal;", 0x1, NULL, NULL },
    { "getSubMatrixWithInt:withInt:withInt:withInt:", "getSubMatrix", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getSubMatrixWithIntArray:withIntArray:", "getSubMatrix", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setSubMatrixWithJavaMathBigDecimalArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowMatrixWithInt:", "getRowMatrix", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getColumnMatrixWithInt:", "getColumnMatrix", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowWithInt:", "getRow", "[Ljava.math.BigDecimal;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowAsDoubleArrayWithInt:", "getRowAsDoubleArray", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getColumnWithInt:", "getColumn", "[Ljava.math.BigDecimal;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getColumnAsDoubleArrayWithInt:", "getColumnAsDoubleArray", "[D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "Ljava.math.BigDecimal;", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getEntryAsDoubleWithInt:withInt:", "getEntryAsDouble", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "transpose", NULL, "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, NULL, NULL },
    { "inverse", NULL, "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getDeterminant", NULL, "Ljava.math.BigDecimal;", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "isSquare", NULL, "Z", 0x1, NULL, NULL },
    { "isSingular", NULL, "Z", 0x1, NULL, NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "getTrace", NULL, "Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "operateWithJavaMathBigDecimalArray:", "operate", "[Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "operateWithDoubleArray:", "operate", "[Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithJavaMathBigDecimalArray:", "preMultiply", "[Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "solveWithJavaMathBigDecimalArray:", "solve", "[Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "solveWithDoubleArray:", "solve", "[Ljava.math.BigDecimal;", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "solveWithOrgApacheCommonsMathLinearBigMatrix:", "solve", "Lorg.apache.commons.math.linear.BigMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "luDecompose", NULL, "V", 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x1, NULL, NULL },
    { "getLUMatrix", NULL, "Lorg.apache.commons.math.linear.BigMatrix;", 0x4, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getPermutation", NULL, "[I", 0x4, NULL, NULL },
    { "copyOut", NULL, "[[Ljava.math.BigDecimal;", 0x2, NULL, NULL },
    { "copyInWithJavaMathBigDecimalArray2:", "copyIn", "V", 0x2, NULL, NULL },
    { "copyInWithDoubleArray2:", "copyIn", "V", 0x2, NULL, NULL },
    { "copyInWithNSStringArray2:", "copyIn", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ZERO_", NULL, 0x18, "Ljava.math.BigDecimal;", &OrgApacheCommonsMathLinearBigMatrixImpl_ZERO_, NULL,  },
    { "ONE_", NULL, 0x18, "Ljava.math.BigDecimal;", &OrgApacheCommonsMathLinearBigMatrixImpl_ONE_, NULL,  },
    { "TOO_SMALL_", NULL, 0x1a, "Ljava.math.BigDecimal;", &OrgApacheCommonsMathLinearBigMatrixImpl_TOO_SMALL_, NULL,  },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearBigMatrixImpl_serialVersionUID },
    { "data_", NULL, 0x4, "[[Ljava.math.BigDecimal;", NULL, NULL,  },
    { "lu_", NULL, 0x4, "[[Ljava.math.BigDecimal;", NULL, NULL,  },
    { "permutation_", NULL, 0x4, "[I", NULL, NULL,  },
    { "parity_", NULL, 0x4, "I", NULL, NULL,  },
    { "roundingMode_", NULL, 0x2, "I", NULL, NULL,  },
    { "scale__", "scale", 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearBigMatrixImpl = { 2, "BigMatrixImpl", "org.apache.commons.math.linear", NULL, 0x1, 60, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearBigMatrixImpl;
}

@end

void OrgApacheCommonsMathLinearBigMatrixImpl_init(OrgApacheCommonsMathLinearBigMatrixImpl *self) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_init() {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_init(self);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(OrgApacheCommonsMathLinearBigMatrixImpl *self, jint rowDimension, jint columnDimension) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  if (rowDimension < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(rowDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  if (columnDimension < 1) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INSUFFICIENT_DIMENSION(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(columnDimension), JavaLangInteger_valueOfWithInt_(1) } count:2 type:NSObject_class_()]);
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ rowDimension, columnDimension } type:JavaMathBigDecimal_class_()]);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithJavaMathBigDecimalArray2_(self, d);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d, jboolean copyArray) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  if (copyArray) {
    OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithJavaMathBigDecimalArray2_(self, d);
  }
  else {
    if (d == nil) {
      @throw [new_JavaLangNullPointerException_init() autorelease];
    }
    jint nRows = ((IOSObjectArray *) nil_chk(d))->size_;
    if (nRows == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_;
    if (nCols == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    for (jint r = 1; r < nRows; r++) {
      if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_ != nCols) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_) } count:2 type:NSObject_class_()]);
      }
    }
    OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, d);
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray2_withBoolean_(self, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  jint nRows = ((IOSObjectArray *) nil_chk(d))->size_;
  if (nRows == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint nCols = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_;
  if (nCols == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  for (jint row = 1; row < nRows; row++) {
    if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, row)))->size_ != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, row)))->size_) } count:2 type:NSObject_class_()]);
    }
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithDoubleArray2_(self, d);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithDoubleArray2_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *d) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  jint nRows = ((IOSObjectArray *) nil_chk(d))->size_;
  if (nRows == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_;
  if (nCols == 0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
  }
  for (jint row = 1; row < nRows; row++) {
    if (((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, row)))->size_ != nCols) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSObjectArray *) nil_chk(IOSObjectArray_Get(d, row)))->size_) } count:2 type:NSObject_class_()]);
    }
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithNSStringArray2_(self, d);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithNSStringArray2_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *v) {
  NSObject_init(self);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_data_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
  OrgApacheCommonsMathLinearBigMatrixImpl_set_permutation_(self, nil);
  self->parity_ = 1;
  self->roundingMode_ = JavaMathBigDecimal_ROUND_HALF_UP;
  self->scale__ = 64;
  jint nRows = ((IOSObjectArray *) nil_chk(v))->size_;
  OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ nRows, 1 } type:JavaMathBigDecimal_class_()]);
  for (jint row = 0; row < nRows; row++) {
    IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(self->data_, row)), 0, IOSObjectArray_Get(v, row));
  }
}

OrgApacheCommonsMathLinearBigMatrixImpl *new_OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(IOSObjectArray *v) {
  OrgApacheCommonsMathLinearBigMatrixImpl *self = [OrgApacheCommonsMathLinearBigMatrixImpl alloc];
  OrgApacheCommonsMathLinearBigMatrixImpl_initWithJavaMathBigDecimalArray_(self, v);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearBigMatrixImpl_copyOut(OrgApacheCommonsMathLinearBigMatrixImpl *self) {
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = [IOSObjectArray arrayWithDimensions:2 lengths:(jint[]){ nRows, [self getColumnDimension] } type:JavaMathBigDecimal_class_()];
  for (jint i = 0; i < nRows; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(self->data_), i), 0, IOSObjectArray_Get(out, i), 0, ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(self->data_, i)))->size_);
  }
  return out;
}

void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithJavaMathBigDecimalArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg) {
  [self setSubMatrixWithJavaMathBigDecimalArray2:inArg withInt:0 withInt:0];
}

void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithDoubleArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg) {
  jint nRows = ((IOSObjectArray *) nil_chk(inArg))->size_;
  jint nCols = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(inArg, 0)))->size_;
  OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ nRows, nCols } type:JavaMathBigDecimal_class_()]);
  for (jint i = 0; i < nRows; i++) {
    IOSObjectArray *dataI = IOSObjectArray_Get(self->data_, i);
    IOSDoubleArray *inI = IOSObjectArray_Get(inArg, i);
    for (jint j = 0; j < nCols; j++) {
      IOSObjectArray_SetAndConsume(nil_chk(dataI), j, new_JavaMathBigDecimal_initWithDouble_(IOSDoubleArray_Get(nil_chk(inI), j)));
    }
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

void OrgApacheCommonsMathLinearBigMatrixImpl_copyInWithNSStringArray2_(OrgApacheCommonsMathLinearBigMatrixImpl *self, IOSObjectArray *inArg) {
  jint nRows = ((IOSObjectArray *) nil_chk(inArg))->size_;
  jint nCols = ((IOSObjectArray *) nil_chk(IOSObjectArray_Get(inArg, 0)))->size_;
  OrgApacheCommonsMathLinearBigMatrixImpl_setAndConsume_data_(self, [IOSObjectArray newArrayWithDimensions:2 lengths:(jint[]){ nRows, nCols } type:JavaMathBigDecimal_class_()]);
  for (jint i = 0; i < nRows; i++) {
    IOSObjectArray *dataI = IOSObjectArray_Get(self->data_, i);
    IOSObjectArray *inI = IOSObjectArray_Get(inArg, i);
    for (jint j = 0; j < nCols; j++) {
      IOSObjectArray_SetAndConsume(nil_chk(dataI), j, new_JavaMathBigDecimal_initWithNSString_(IOSObjectArray_Get(nil_chk(inI), j)));
    }
  }
  OrgApacheCommonsMathLinearBigMatrixImpl_set_lu_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearBigMatrixImpl)
