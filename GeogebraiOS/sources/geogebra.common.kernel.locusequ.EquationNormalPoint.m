//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/EquationNormalPoint.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationNormalPoint.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/arith/EquationExpression.h"

@implementation GeogebraCommonKernelLocusequEquationNormalPoint

- (instancetype)initWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)point {
  GeogebraCommonKernelLocusequEquationNormalPoint_initWithGeogebraCommonKernelLocusequEquationPoint_(self, point);
  return self;
}

- (jboolean)isIndependent {
  return [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) isIndependent];
}

- (GeogebraCommonKernelLocusequArithEquationExpression *)getXExpression {
  return [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) getYExpression];
}

- (GeogebraCommonKernelLocusequArithEquationExpression *)getYExpression {
  return [((GeogebraCommonKernelLocusequArithEquationExpression *) nil_chk([((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) getXExpression])) getOpposite];
}

- (GeogebraCommonKernelLocusequArithEquationExpression *)getZExpression {
  return [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) getZExpression];
}

- (GeogebraCommonKernelGeosGeoPoint *)getPoint {
  return [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) getPoint];
}

- (void)getIndexesFromWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)newPoint {
}

- (void)fixXWithDouble:(jdouble)value {
  [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) fixYWithDouble:value];
}

- (void)fixYWithDouble:(jdouble)value {
  [((GeogebraCommonKernelLocusequEquationPoint *) nil_chk(self->point_)) fixXWithDouble:-value];
}

- (void)dealloc {
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelLocusequEquationPoint:", "EquationNormalPoint", NULL, 0x1, NULL, NULL },
    { "isIndependent", NULL, "Z", 0x1, NULL, NULL },
    { "getXExpression", NULL, "Lgeogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "getYExpression", NULL, "Lgeogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "getZExpression", NULL, "Lgeogebra.common.kernel.locusequ.arith.EquationExpression;", 0x1, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "getIndexesFromWithGeogebraCommonKernelLocusequEquationPoint:", "getIndexesFrom", "V", 0x1, NULL, NULL },
    { "fixXWithDouble:", "fixX", "V", 0x1, NULL, NULL },
    { "fixYWithDouble:", "fixY", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "point_", NULL, 0x0, "Lgeogebra.common.kernel.locusequ.EquationPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequEquationNormalPoint = { 2, "EquationNormalPoint", "geogebra.common.kernel.locusequ", NULL, 0x1, 9, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequEquationNormalPoint;
}

@end

void GeogebraCommonKernelLocusequEquationNormalPoint_initWithGeogebraCommonKernelLocusequEquationPoint_(GeogebraCommonKernelLocusequEquationNormalPoint *self, GeogebraCommonKernelLocusequEquationPoint *point) {
  GeogebraCommonKernelLocusequEquationPoint_init(self);
  GeogebraCommonKernelLocusequEquationNormalPoint_set_point_(self, point);
}

GeogebraCommonKernelLocusequEquationNormalPoint *new_GeogebraCommonKernelLocusequEquationNormalPoint_initWithGeogebraCommonKernelLocusequEquationPoint_(GeogebraCommonKernelLocusequEquationPoint *point) {
  GeogebraCommonKernelLocusequEquationNormalPoint *self = [GeogebraCommonKernelLocusequEquationNormalPoint alloc];
  GeogebraCommonKernelLocusequEquationNormalPoint_initWithGeogebraCommonKernelLocusequEquationPoint_(self, point);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequEquationNormalPoint)
