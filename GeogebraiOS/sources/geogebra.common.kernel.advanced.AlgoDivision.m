//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoDivision.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoDivision.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelAdvancedAlgoDivision () {
 @public
  id<GeogebraCommonKernelGeosGeoNumberValue> a_, b_;
  GeogebraCommonKernelGeosGeoNumeric *num_, *mod_;
  GeogebraCommonKernelGeosGeoList *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivision, a_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivision, b_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivision, num_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivision, mod_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoDivision, result_, GeogebraCommonKernelGeosGeoList *)

@implementation GeogebraCommonKernelAdvancedAlgoDivision

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)dividend
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)divisor {
  GeogebraCommonKernelAdvancedAlgoDivision_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, dividend, divisor);
  return self;
}

- (void)setInputOutput {
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(a_)) toGeoElement], [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(b_)) toGeoElement] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setDependencies];
}

- (void)compute {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) isDefined] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) isDefined]) {
    jdouble numerator = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(a_)) getDouble];
    jdouble denominator = [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(b_)) getDouble];
    if (JavaLangMath_absWithDouble_(numerator) > GeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_() || JavaLangMath_absWithDouble_(denominator) > GeogebraCommonKernelArithmeticMyDouble_get_LARGEST_INTEGER_()) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setUndefined];
      return;
    }
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setDefinedWithBoolean:YES];
    jdouble m = fmod(numerator, JavaLangMath_absWithDouble_(denominator));
    if (m < 0) m += JavaLangMath_absWithDouble_(denominator);
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(mod_)) setValueWithDouble:m];
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num_)) setValueWithDouble:JavaLangMath_roundWithDouble_((numerator - m) / denominator)];
  }
  else {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(result_)) setUndefined];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Division();
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return result_;
}

- (void)dealloc {
  RELEASE_(a_);
  RELEASE_(b_);
  RELEASE_(num_);
  RELEASE_(mod_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoDivision", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "a_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "b_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "mod_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoDivision = { 2, "AlgoDivision", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoDivision;
}

@end

void GeogebraCommonKernelAdvancedAlgoDivision_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAdvancedAlgoDivision *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> dividend, id<GeogebraCommonKernelGeosGeoNumberValue> divisor) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoDivision_set_a_(self, dividend);
  GeogebraCommonKernelAdvancedAlgoDivision_set_b_(self, divisor);
  GeogebraCommonKernelAdvancedAlgoDivision_setAndConsume_num_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAdvancedAlgoDivision_setAndConsume_mod_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelAdvancedAlgoDivision_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:self->num_];
  [self->result_ addWithGeogebraCommonKernelGeosGeoElement:self->mod_];
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoDivision *new_GeogebraCommonKernelAdvancedAlgoDivision_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosGeoNumberValue> dividend, id<GeogebraCommonKernelGeosGeoNumberValue> divisor) {
  GeogebraCommonKernelAdvancedAlgoDivision *self = [GeogebraCommonKernelAdvancedAlgoDivision alloc];
  GeogebraCommonKernelAdvancedAlgoDivision_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, label, dividend, divisor);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoDivision)
