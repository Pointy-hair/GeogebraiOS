//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoTangentCurve.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/algos/AlgoDependentPoint.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/cas/AlgoDerivative.h"
#include "geogebra/common/kernel/cas/AlgoTangentCurve.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelCasAlgoTangentCurve () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> P_;
  GeogebraCommonKernelGeosGeoCurveCartesian *f_, *df_;
  GeogebraCommonKernelGeosGeoLine *tangent_;
  GeogebraCommonKernelGeosGeoPoint *T_;
  jboolean pointOnCurve_;
  jboolean pointOnCurveSpecial_;
  id<GeogebraCommonKernelArithmeticExpressionValue> pointOnCurveSpecialParam_;
  GeogebraCommonKernelCasAlgoDerivative *algo_;
  IOSDoubleArray *feval_;
  IOSDoubleArray *dfeval_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, f_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, df_, GeogebraCommonKernelGeosGeoCurveCartesian *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, tangent_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, T_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, pointOnCurveSpecialParam_, id<GeogebraCommonKernelArithmeticExpressionValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, algo_, GeogebraCommonKernelCasAlgoDerivative *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, feval_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTangentCurve, dfeval_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelCasAlgoTangentCurve_compute(GeogebraCommonKernelCasAlgoTangentCurve *self);

@implementation GeogebraCommonKernelCasAlgoTangentCurve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
           withGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)f {
  GeogebraCommonKernelCasAlgoTangentCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, P, f);
  return self;
}

- (void)initialize__WithGeogebraCommonKernelGeosGeoCurveCartesian:(GeogebraCommonKernelGeosGeoCurveCartesian *)f1 {
  GeogebraCommonKernelCasAlgoTangentCurve_set_f_(self, f1);
  pointOnCurve_ = NO;
  if ([[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]]) {
    GeogebraCommonKernelAlgosAlgoPointOnPath *algoPOP = (GeogebraCommonKernelAlgosAlgoPointOnPath *) check_class_cast([P_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPointOnPath class]);
    pointOnCurve_ = ([((GeogebraCommonKernelAlgosAlgoPointOnPath *) nil_chk(algoPOP)) getPath] == f_);
  }
  else if ([[P_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentPoint class]]) {
    GeogebraCommonKernelAlgosAlgoDependentPoint *algoDP = (GeogebraCommonKernelAlgosAlgoDependentPoint *) check_class_cast([P_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoDependentPoint class]);
    GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelAlgosAlgoDependentPoint *) nil_chk(algoDP)) getExpressionNode];
    if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation] == GeogebraCommonPluginOperationEnum_get_VEC_FUNCTION() && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getLeft])) unwrap] == f_) {
      pointOnCurveSpecial_ = YES;
      GeogebraCommonKernelCasAlgoTangentCurve_set_pointOnCurveSpecialParam_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([en getRight])) unwrap]);
    }
  }
  if (pointOnCurve_ || pointOnCurveSpecial_) {
    GeogebraCommonKernelCasAlgoTangentCurve_set_T_(self, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class]));
  }
  else {
    GeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_T_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_));
  }
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(tangent_)) setStartPointWithGeogebraCommonKernelGeosGeoPoint:T_];
  GeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_algo_(self, new_GeogebraCommonKernelCasAlgoDerivative_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withBoolean_(cons_, f_, YES));
  GeogebraCommonKernelCasAlgoTangentCurve_set_df_(self, (GeogebraCommonKernelGeosGeoCurveCartesian *) check_class_cast([algo_ getResult], [GeogebraCommonKernelGeosGeoCurveCartesian class]));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algo_];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Tangent();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_TANGENTS;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, f_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:tangent_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLine *)getTangent {
  return tangent_;
}

- (GeogebraCommonKernelGeosGeoCurveCartesian *)getCurve {
  return f_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getPoint {
  return P_;
}

- (GeogebraCommonKernelGeosGeoPoint *)getTangentPoint {
  return T_;
}

- (void)compute {
  GeogebraCommonKernelCasAlgoTangentCurve_compute(self);
}

- (GeogebraCommonKernelGeosGeoPoint *)getTangentPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                        withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line {
  if (geo == f_ && line == tangent_) {
    return [self getTangentPoint];
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(P_);
  RELEASE_(f_);
  RELEASE_(df_);
  RELEASE_(tangent_);
  RELEASE_(T_);
  RELEASE_(pointOnCurveSpecialParam_);
  RELEASE_(algo_);
  RELEASE_(feval_);
  RELEASE_(dfeval_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoCurveCartesian:", "AlgoTangentCurve", NULL, 0x1, NULL, NULL },
    { "initialize__WithGeogebraCommonKernelGeosGeoCurveCartesian:", "initialize", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getTangent", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x1, NULL, NULL },
    { "getCurve", NULL, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", 0x0, NULL, NULL },
    { "getPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x0, NULL, NULL },
    { "getTangentPoint", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getTangentPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoLine:", "getTangentPoint", "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "df_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoCurveCartesian;", NULL, NULL,  },
    { "tangent_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "T_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "pointOnCurve_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointOnCurveSpecial_", NULL, 0x2, "Z", NULL, NULL,  },
    { "pointOnCurveSpecialParam_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.cas.AlgoDerivative;", NULL, NULL,  },
    { "feval_", NULL, 0x2, "[D", NULL, NULL,  },
    { "dfeval_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoTangentCurve = { 2, "AlgoTangentCurve", "geogebra.common.kernel.cas", NULL, 0x1, 11, methods, 11, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoTangentCurve;
}

@end

void GeogebraCommonKernelCasAlgoTangentCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelCasAlgoTangentCurve *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_feval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_dfeval_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelCasAlgoTangentCurve_setAndConsume_tangent_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelCasAlgoTangentCurve_set_P_(self, P);
  [self initialize__WithGeogebraCommonKernelGeosGeoCurveCartesian:f];
  [self setInputOutput];
  GeogebraCommonKernelCasAlgoTangentCurve_compute(self);
  [self->tangent_ setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoTangentCurve *new_GeogebraCommonKernelCasAlgoTangentCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelGeosGeoCurveCartesian *f) {
  GeogebraCommonKernelCasAlgoTangentCurve *self = [GeogebraCommonKernelCasAlgoTangentCurve alloc];
  GeogebraCommonKernelCasAlgoTangentCurve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoCurveCartesian_(self, cons, label, P, f);
  return self;
}

void GeogebraCommonKernelCasAlgoTangentCurve_compute(GeogebraCommonKernelCasAlgoTangentCurve *self) {
  if (!([((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->f_)) isDefined] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) isDefined])) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  if (self->df_ == nil || ![self->df_ isDefined]) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setUndefined];
    return;
  }
  jdouble tvalue;
  if (self->pointOnCurve_) {
    tvalue = ((GeogebraCommonKernelPathParameter *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) getPathParameter]))->t_;
  }
  else if (self->pointOnCurveSpecialParam_ != nil) {
    tvalue = [self->pointOnCurveSpecialParam_ evaluateDouble];
  }
  else {
    tvalue = [self->f_ getClosestParameterWithGeogebraCommonKernelKernelNDGeoPointND:self->P_ withDouble:[self->f_ getMinParameter]];
  }
  [self->f_ evaluateCurveWithDouble:tvalue withDoubleArray:self->feval_];
  [((GeogebraCommonKernelGeosGeoCurveCartesian *) nil_chk(self->df_)) evaluateCurveWithDouble:tvalue withDoubleArray:self->dfeval_];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->tangent_)) setCoordsWithDouble:-IOSDoubleArray_Get(nil_chk(self->dfeval_), 1) withDouble:IOSDoubleArray_Get(self->dfeval_, 0) withDouble:IOSDoubleArray_Get(nil_chk(self->feval_), 0) * IOSDoubleArray_Get(self->dfeval_, 1) - IOSDoubleArray_Get(self->dfeval_, 0) * IOSDoubleArray_Get(self->feval_, 1)];
  if (!self->pointOnCurve_ && !self->pointOnCurveSpecial_) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->T_)) setCoordsWithDouble:IOSDoubleArray_Get(self->feval_, 0) withDouble:IOSDoubleArray_Get(self->feval_, 1) withDouble:1.0];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoTangentCurve)
