//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetValue.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/SetRandomValue.h"
#include "geogebra/common/kernel/algos/AlgoDependentNumber.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/scripting/CmdSetValue.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/Operation.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@implementation GeogebraCommonKernelScriptingCmdSetValue

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetValue_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
  jboolean ok;
  switch (n) {
    case 2:
    GeogebraCommonKernelScriptingCmdSetValue_setValue2WithGeogebraCommonKernelGeosGeoElementArray_(arg_);
    return;
    case 3:
    if ((ok = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoList] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isIndependent])) && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg_, 1)]) {
      jboolean success = GeogebraCommonKernelScriptingCmdSetValue_setValue3WithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoList_withInt_withGeogebraCommonKernelGeosGeoElement_(kernelA_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoList class]), J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg_, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]), IOSObjectArray_Get(arg_, 2));
      if (!success) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 1)];
      }
    }
    else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:ok ? IOSObjectArray_Get(arg_, 1) : IOSObjectArray_Get(arg_, 0)];
    return;
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (jboolean)setValue3WithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list
                                            withInt:(jint)nn
             withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)arg2 {
  return GeogebraCommonKernelScriptingCmdSetValue_setValue3WithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoList_withInt_withGeogebraCommonKernelGeosGeoElement_(kernel, list, nn, arg2);
}

+ (void)setValue2WithGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)arg {
  GeogebraCommonKernelScriptingCmdSetValue_setValue2WithGeogebraCommonKernelGeosGeoElementArray_(arg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetValue", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
    { "setValue3WithGeogebraCommonKernelKernel:withGeogebraCommonKernelGeosGeoList:withInt:withGeogebraCommonKernelGeosGeoElement:", "setValue3", "Z", 0x9, NULL, NULL },
    { "setValue2WithGeogebraCommonKernelGeosGeoElementArray:", "setValue2", "V", 0x9, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetValue = { 2, "CmdSetValue", "geogebra.common.kernel.scripting", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetValue;
}

@end

void GeogebraCommonKernelScriptingCmdSetValue_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetValue *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetValue *new_GeogebraCommonKernelScriptingCmdSetValue_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetValue *self = [GeogebraCommonKernelScriptingCmdSetValue alloc];
  GeogebraCommonKernelScriptingCmdSetValue_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

jboolean GeogebraCommonKernelScriptingCmdSetValue_setValue3WithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoList_withInt_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelKernel *kernel, GeogebraCommonKernelGeosGeoList *list, jint nn, GeogebraCommonKernelGeosGeoElement *arg2) {
  GeogebraCommonKernelScriptingCmdSetValue_initialize();
  if (nn < 1 || nn > [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] + 1) {
    return NO;
  }
  if (nn > [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size]) {
    [list addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(arg2)) deepCopyWithGeogebraCommonKernelKernel:kernel], [GeogebraCommonKernelGeosGeoElement class])];
    [list updateRepaint];
    return YES;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [list getWithInt:nn - 1];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent]) {
    if ([geo isGeoNumeric] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:arg2]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(arg2, @protocol(GeogebraCommonKernelArithmeticNumberValue));
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble]];
    }
    else {
      [geo setWithGeogebraCommonKernelGeosGeoElement:arg2];
    }
  }
  else {
    GeogebraCommonUtilDebugLog_debugWithId_([geo getParentAlgorithm]);
  }
  [geo updateRepaint];
  if (![geo isLabelSet]) {
    id<JavaUtilIterator> it = [((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel)) getConstruction])) getGeoSetConstructionOrder])) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoElement *geo2 = [it next];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) isGeoList]) {
        GeogebraCommonKernelGeosGeoList *gl = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo2, [GeogebraCommonKernelGeosGeoList class]);
        for (jint i = 0; i < [gl size]; i++) {
          if ([gl getWithInt:i] == geo) [gl updateRepaint];
        }
      }
    }
  }
  return YES;
}

void GeogebraCommonKernelScriptingCmdSetValue_setValue2WithGeogebraCommonKernelGeosGeoElementArray_(IOSObjectArray *arg) {
  GeogebraCommonKernelScriptingCmdSetValue_initialize();
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunction] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoFunctionable]) {
    GeogebraCommonKernelGeosGeoFunction *fun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoFunction class]);
    id<GeogebraCommonKernelGeosGeoFunctionable> val = (id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelGeosGeoFunctionable));
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(fun)) setWithGeogebraCommonKernelGeosGeoElement:[((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(val)) getGeoFunction]];
    [fun updateRepaint];
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isNumberValue]) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class])))) setSelectedIndexWithInt:(jint) JavaLangMath_roundWithDouble_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) evaluateDouble]) - 1 withBoolean:YES];
  }
  else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isIndependent] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isMoveable]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoNumeric] && [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)]) {
      id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue));
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoNumeric class])))) setValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble]];
    }
    else {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) isGeoNumeric] && JavaLangDouble_isNaNWithDouble_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 1))) evaluateDouble])) {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) setUndefined];
      }
      else {
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) setWithGeogebraCommonKernelGeosGeoElement:IOSObjectArray_Get(arg, 1)];
      }
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) updateRepaint];
  }
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoNumeric] && [GeogebraCommonKernelSetRandomValue_class_() isInstance:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm]]) {
    id<GeogebraCommonKernelSetRandomValue> algo = (id<GeogebraCommonKernelSetRandomValue>) check_protocol_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm], @protocol(GeogebraCommonKernelSetRandomValue));
    [((id<GeogebraCommonKernelSetRandomValue>) nil_chk(algo)) setRandomValueWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
  }
  else if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(arg, 1)] && [[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentNumber class]]) {
    jdouble val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(arg, 1), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    if (val >= 0 && val <= 1) {
      GeogebraCommonKernelAlgosAlgoDependentNumber *al = (GeogebraCommonKernelAlgosAlgoDependentNumber *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoDependentNumber class]);
      GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelAlgosAlgoDependentNumber *) nil_chk(al)) getExpression];
      if ([((GeogebraCommonPluginOperationEnum *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_RANDOM()]) {
        GeogebraCommonKernelGeosGeoNumeric *num = ((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(nil_chk([al getOutput]), 0), [GeogebraCommonKernelGeosGeoNumeric class]));
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) setValueWithDouble:val];
        [num updateRepaint];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetValue)
