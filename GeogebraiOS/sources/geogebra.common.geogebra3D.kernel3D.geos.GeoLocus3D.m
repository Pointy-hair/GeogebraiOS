//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoLocus3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/MyPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLocus3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSegment3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> changingPoint_;
  GeogebraCommonKernelMatrixCoords *changingCoords_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D, changingPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D, changingCoords_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *)newGeoLocus {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
}

- (void)insertPointWithDouble:(jdouble)x
                   withDouble:(jdouble)y
                   withDouble:(jdouble)z
                  withBoolean:(jboolean)lineTo {
  [((JavaUtilArrayList *) nil_chk(myPointList_)) addWithId:[new_GeogebraCommonGeogebra3DKernel3DMyPoint3D_initWithDouble_withDouble_withDouble_withBoolean_(x, y, z, lineTo) autorelease]];
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3];
  [self setChangingPointWithGeogebraCommonKernelKernelNDGeoPointND:P];
  GeogebraCommonKernelMyPoint *closestPoint = [self getClosestPoint];
  GeogebraCommonKernelPathParameter *pp = [P getPathParameter];
  if (closestPoint != nil) {
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) setXWithDouble:closestPoint->x_];
    [coords setYWithDouble:closestPoint->y_];
    [coords setZWithDouble:[closestPoint getZ]];
    [coords setWWithDouble:1.0];
    ((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ = closestPointIndex_ + closestPointParameter_;
  }
  [P setCoordsWithGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
  [P updateCoords];
}

- (id<GeogebraCommonKernelKernelNDGeoSegmentND>)newGeoSegment {
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *segment = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  return segment;
}

- (void)setChangingPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_set_changingPoint_(self, P);
  GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_set_changingCoords_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getInhomCoordsInD3]);
}

- (jdouble)changingPointDistanceWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *seg = (GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(segment, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class]);
  jdouble t = [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(seg)) getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:changingPoint_];
  if (t < 0) {
    t = 0;
  }
  else if (t > 1) {
    t = 1;
  }
  GeogebraCommonKernelMatrixCoords *project = [seg getPointWithDouble:t];
  GeogebraCommonKernelMatrixCoords *coords = changingCoords_;
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(changingPoint_)) isGeoElement3D]) {
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) hasWillingCoords]) {
      coords = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getWillingCoords];
      if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) hasWillingDirection]) {
        return [((GeogebraCommonKernelMatrixCoords *) nil_chk(project)) distLineWithGeogebraCommonKernelMatrixCoords:coords withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(changingPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])) getWillingDirection]];
      }
    }
  }
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) distanceWithGeogebraCommonKernelMatrixCoords:project];
}

- (jdouble)getChangingPointParameterWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D *) check_class_cast(segment, [GeogebraCommonGeogebra3DKernel3DGeosGeoSegment3D class])))) getParamOnLineWithGeogebraCommonKernelKernelNDGeoPointND:changingPoint_];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_BOUNDARY();
}

- (void)dealloc {
  RELEASE_(changingPoint_);
  RELEASE_(changingCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoLocus3D", NULL, 0x1, NULL, NULL },
    { "newGeoLocus", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoLocus3D;", 0x4, NULL, NULL },
    { "insertPointWithDouble:withDouble:withDouble:withBoolean:", "insertPoint", "V", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "newGeoSegment", NULL, "Lgeogebra.common.kernel.kernelND.GeoSegmentND;", 0x4, NULL, NULL },
    { "setChangingPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setChangingPoint", "V", 0x4, NULL, NULL },
    { "changingPointDistanceWithGeogebraCommonKernelKernelNDGeoSegmentND:", "changingPointDistance", "D", 0x4, NULL, NULL },
    { "getChangingPointParameterWithGeogebraCommonKernelKernelNDGeoSegmentND:", "getChangingPointParameter", "D", 0x4, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "changingPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "changingCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.geogebra3D.kernel3D.MyPoint3D;"};
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D = { 2, "GeoLocus3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 10, methods, 2, fields, 1, superclass_type_args, 0, NULL, NULL, "Lgeogebra/common/kernel/geos/GeoLocusND<Lgeogebra/common/geogebra3D/kernel3D/MyPoint3D;>;" };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoLocusND_initWithGeogebraCommonKernelConstruction_(self, c);
}

GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoLocus3D)
