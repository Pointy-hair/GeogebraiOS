//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawTextField.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawTextField.h"
#include "geogebra/common/euclidian/event/FocusEvent.h"
#include "geogebra/common/euclidian/event/FocusListener.h"
#include "geogebra/common/euclidian/event/KeyEvent.h"
#include "geogebra/common/euclidian/event/KeyHandler.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/factories/SwingFactory.h"
#include "geogebra/common/gui/inputfield/AutoCompleteTextField.h"
#include "geogebra/common/javax/swing/GBox.h"
#include "geogebra/common/javax/swing/GLabel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/Unicode.h"

@interface GeogebraCommonEuclidianDrawDrawTextField () {
 @public
  jboolean isVisible_;
  NSString *oldCaption_;
  GeogebraCommonJavaxSwingGLabel *label_;
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener *ifListener_;
  id<GeogebraCommonEuclidianEventKeyHandler> ifKeyListener_;
  GeogebraCommonJavaxSwingGBox *box_;
  jint oldLength_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField, oldCaption_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField, label_, GeogebraCommonJavaxSwingGLabel *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField, ifListener_, GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField, ifKeyListener_, id<GeogebraCommonEuclidianEventKeyHandler>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField, box_, GeogebraCommonJavaxSwingGBox *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawTextField_update(GeogebraCommonEuclidianDrawDrawTextField *self);

@interface GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener () {
 @public
  GeogebraCommonEuclidianDrawDrawTextField *this$0_;
  NSString *initialText_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener, this$0_, GeogebraCommonEuclidianDrawDrawTextField *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener, initialText_, NSString *)

@interface GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener () {
 @public
  GeogebraCommonEuclidianDrawDrawTextField *this$0_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener, this$0_, GeogebraCommonEuclidianDrawDrawTextField *)

@implementation GeogebraCommonEuclidianDrawDrawTextField

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                    withGeogebraCommonKernelGeosGeoTextField:(GeogebraCommonKernelGeosGeoTextField *)geo {
  GeogebraCommonEuclidianDrawDrawTextField_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTextField_(self, view, geo);
  return self;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeo {
  return geo_;
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawTextField_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (isVisible_) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(label_)) setOpaqueWithBoolean:YES];
      [label_ setBackgroundWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_lightGray_()];
    }
    else {
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(label_)) setOpaqueWithBoolean:NO];
    }
  }
}

- (void)remove {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) removeWithGeogebraCommonJavaxSwingGBox:box_];
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonJavaxSwingGBox *) nil_chk(box_)) getBounds])) containsWithInt:x withInt:y];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonJavaxSwingGBox *) nil_chk(box_)) getBounds])) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return NO;
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)setFocusWithNSString:(NSString *)str {
  [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) requestFocus];
  if (str != nil && ![str isEqual:@"\t"]) {
    [textField_ wrapSetTextWithNSString:str];
  }
}

- (GeogebraCommonJavaxSwingGLabel *)getLabel {
  return label_;
}

- (void)dealloc {
  RELEASE_(geoTextField_);
  RELEASE_(oldCaption_);
  RELEASE_(textField_);
  RELEASE_(label_);
  RELEASE_(ifListener_);
  RELEASE_(ifKeyListener_);
  RELEASE_(box_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoTextField:", "DrawTextField", NULL, 0x1, NULL, NULL },
    { "getGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x0, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "setFocusWithNSString:", "setFocus", "V", 0x1, NULL, NULL },
    { "getLabel", NULL, "Lgeogebra.common.javax.swing.GLabel;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoTextField_", NULL, 0x10, "Lgeogebra.common.kernel.geos.GeoTextField;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldCaption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "textField_", NULL, 0x0, "Lgeogebra.common.gui.inputfield.AutoCompleteTextField;", NULL, NULL,  },
    { "label_", NULL, 0x2, "Lgeogebra.common.javax.swing.GLabel;", NULL, NULL,  },
    { "ifListener_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawTextField$InputFieldListener;", NULL, NULL,  },
    { "ifKeyListener_", NULL, 0x2, "Lgeogebra.common.euclidian.event.KeyHandler;", NULL, NULL,  },
    { "box_", NULL, 0x2, "Lgeogebra.common.javax.swing.GBox;", NULL, NULL,  },
    { "oldLength_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.euclidian.draw.DrawTextField$InputFieldListener;", "Lgeogebra.common.euclidian.draw.DrawTextField$InputFieldKeyListener;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawTextField = { 2, "DrawTextField", "geogebra.common.euclidian.draw", NULL, 0x11, 13, methods, 9, fields, 0, NULL, 2, inner_classes, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawTextField;
}

@end

void GeogebraCommonEuclidianDrawDrawTextField_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTextField_(GeogebraCommonEuclidianDrawDrawTextField *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoTextField *geo) {
  GeogebraCommonEuclidianDrawable_init(self);
  self->oldLength_ = 0;
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawTextField_set_geoTextField_(self, geo);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
  GeogebraCommonEuclidianDrawDrawTextField_set_box_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelGeosGeoTextField *) nil_chk(geo)) getKernel])) getApplication])) getSwingFactory])) createHorizontalBoxWithGeogebraCommonEuclidianEuclidianController:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getEuclidianController]]);
  GeogebraCommonEuclidianDrawDrawTextField_setAndConsume_ifListener_(self, new_GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self));
  GeogebraCommonEuclidianDrawDrawTextField_setAndConsume_ifKeyListener_(self, new_GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self));
  GeogebraCommonEuclidianDrawDrawTextField_set_textField_(self, [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(self->geoTextField_)) getTextFieldWithInt:[view getViewID] withGeogebraCommonEuclidianDrawDrawTextField:self]);
  [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(self->textField_)) setAutoCompleteWithBoolean:NO];
  [self->textField_ enableColoringWithBoolean:NO];
  GeogebraCommonEuclidianDrawDrawTextField_set_label_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([geo getKernel])) getApplication])) getSwingFactory])) newJLabelWithNSString:@"Label" withBoolean:NO]);
  [self->textField_ setVisibleWithBoolean:YES];
  [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setVisibleWithBoolean:YES];
  [self->textField_ addFocusListenerWithGeogebraCommonEuclidianEventFocusListener:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newFocusListenerWithId:self->ifListener_]];
  [self->textField_ addKeyHandlerWithGeogebraCommonEuclidianEventKeyHandler:self->ifKeyListener_];
  [((GeogebraCommonJavaxSwingGBox *) nil_chk(self->box_)) addWithGeogebraCommonJavaxSwingGLabel:self->label_];
  [self->box_ addWithGeogebraCommonGuiInputfieldAutoCompleteTextField:self->textField_];
  [view addWithGeogebraCommonJavaxSwingGBox:self->box_];
  GeogebraCommonEuclidianDrawDrawTextField_update(self);
}

GeogebraCommonEuclidianDrawDrawTextField *new_GeogebraCommonEuclidianDrawDrawTextField_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTextField_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoTextField *geo) {
  GeogebraCommonEuclidianDrawDrawTextField *self = [GeogebraCommonEuclidianDrawDrawTextField alloc];
  GeogebraCommonEuclidianDrawDrawTextField_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoTextField_(self, view, geo);
  return self;
}

void GeogebraCommonEuclidianDrawDrawTextField_update(GeogebraCommonEuclidianDrawDrawTextField *self) {
  self->isVisible_ = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible];
  [((GeogebraCommonJavaxSwingGBox *) nil_chk(self->box_)) setVisibleWithBoolean:self->isVisible_];
  jint length = [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(self->geoTextField_)) getLength];
  if (length != self->oldLength_) {
    [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(self->textField_)) setColumnsWithInt:length];
    [self->textField_ prepareShowSymbolButtonWithBoolean:length > GeogebraCommonEuclidianEuclidianConstants_SHOW_SYMBOLBUTTON_MINLENGTH];
    self->oldLength_ = length;
  }
  if (!self->isVisible_) {
    return;
  }
  if ([self->geo_ isLabelVisible]) {
    NSString *caption = [self->geo_ getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
    if (![((NSString *) nil_chk(caption)) isEqual:self->oldCaption_]) {
      GeogebraCommonEuclidianDrawDrawTextField_set_oldCaption_(self, caption);
      GeogebraCommonEuclidianDrawable_set_labelDesc_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(caption, YES));
    }
    [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setTextWithNSString:self->labelDesc_];
  }
  else {
    [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setTextWithNSString:@""];
  }
  jint fontSize = J2ObjCFpToInt(([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontSize] * [self->geoTextField_ getFontSizeMultiplier]));
  GeogebraCommonMainApp *app = [self->view_ getApplication];
  GeogebraCommonAwtGFont *vFont = [self->view_ getFont];
  GeogebraCommonAwtGFont *font = [((GeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:[((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(self->textField_)) getText] withBoolean:NO withInt:[((GeogebraCommonAwtGFont *) nil_chk(vFont)) getStyle] withInt:fontSize];
  [self->textField_ setOpaqueWithBoolean:YES];
  [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setOpaqueWithBoolean:NO];
  [self->textField_ setFontWithGeogebraCommonAwtGFont:font];
  [self->label_ setFontWithGeogebraCommonAwtGFont:font];
  [self->textField_ setForegroundWithGeogebraCommonAwtGColor:[self->geo_ getObjectColor]];
  [self->label_ setForegroundWithGeogebraCommonAwtGColor:[self->geo_ getObjectColor]];
  GeogebraCommonAwtGColor *bgCol = [self->geo_ getBackgroundColor];
  [self->textField_ setBackgroundWithGeogebraCommonAwtGColor:bgCol != nil ? bgCol : [self->view_ getBackgroundCommon]];
  [self->textField_ setFocusableWithBoolean:YES];
  [self->textField_ setEditableWithBoolean:YES];
  [self->geoTextField_ updateTextWithGeogebraCommonUtilTextObject:self->textField_];
  [self->box_ revalidate];
  self->xLabel_ = self->geo_->labelOffsetX_;
  self->yLabel_ = self->geo_->labelOffsetY_;
  GeogebraCommonAwtGDimension *prefSize = [self->box_ getPreferredSize];
  [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ withInt:[((GeogebraCommonAwtGDimension *) nil_chk(prefSize)) getWidth] withInt:[prefSize getHeight]];
  [self->box_ setBoundsWithGeogebraCommonAwtGRectangle:self->labelRectangle_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawTextField)

@implementation GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener

- (instancetype)initWithGeogebraCommonEuclidianDrawDrawTextField:(GeogebraCommonEuclidianDrawDrawTextField *)outer$ {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self, outer$);
  return self;
}

- (void)focusGainedWithGeogebraCommonEuclidianEventFocusEvent:(GeogebraCommonEuclidianEventFocusEvent *)e {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk([this$0_ getView])) getEuclidianController])) textfieldHasFocusWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_set_initialText_(self, [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(this$0_->textField_)) getText]);
}

- (void)focusLostWithGeogebraCommonEuclidianEventFocusEvent:(GeogebraCommonEuclidianEventFocusEvent *)e {
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk([this$0_ getView])) getEuclidianController])) textfieldHasFocusWithBoolean:NO];
  if (![((NSString *) nil_chk([((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(this$0_->textField_)) getText])) isEqual:initialText_]) {
    [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(this$0_->geoTextField_)) textObjectUpdatedWithGeogebraCommonUtilTextObject:this$0_->textField_];
    [this$0_->geoTextField_ textSubmitted];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(initialText_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianDrawDrawTextField:", "InputFieldListener", NULL, 0x1, NULL, NULL },
    { "focusGainedWithGeogebraCommonEuclidianEventFocusEvent:", "focusGained", "V", 0x1, NULL, NULL },
    { "focusLostWithGeogebraCommonEuclidianEventFocusEvent:", "focusLost", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.draw.DrawTextField;", NULL, NULL,  },
    { "initialText_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener = { 2, "InputFieldListener", "geogebra.common.euclidian.draw", "DrawTextField", 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener;
}

@end

void GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener *self, GeogebraCommonEuclidianDrawDrawTextField *outer$) {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEventFocusListener_init(self);
}

GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener *new_GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(GeogebraCommonEuclidianDrawDrawTextField *outer$) {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener *self = [GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener alloc];
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawTextField_InputFieldListener)

@implementation GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener

- (instancetype)initWithGeogebraCommonEuclidianDrawDrawTextField:(GeogebraCommonEuclidianDrawDrawTextField *)outer$ {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self, outer$);
  return self;
}

- (void)keyReleasedWithGeogebraCommonEuclidianEventKeyEvent:(GeogebraCommonEuclidianEventKeyEvent *)e {
  if ([((GeogebraCommonEuclidianEventKeyEvent *) nil_chk(e)) isEnterKey]) {
    [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(this$0_->textField_)) setFocusWithBoolean:NO];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk([this$0_ getView])) requestFocusInWindow];
  }
  else {
    GeogebraCommonKernelGeosGeoElement *linkedGeo = [((GeogebraCommonKernelGeosGeoTextField *) nil_chk(((GeogebraCommonKernelGeosGeoTextField *) check_class_cast([this$0_ getGeo], [GeogebraCommonKernelGeosGeoTextField class])))) getLinkedGeo];
    if ([linkedGeo isKindOfClass:[GeogebraCommonKernelGeosGeoAngle class]]) {
      NSString *text = [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(this$0_->textField_)) getText];
      for (jint i = 0; i < ((jint) [((NSString *) nil_chk(text)) length]); i++) {
        if (!GeogebraCommonUtilStringUtil_isDigitWithChar_([text charAtWithInt:i])) return;
      }
      jint caretPos = [this$0_->textField_ getCaretPosition];
      [this$0_->textField_ setTextWithNSString:JreStrcat("$$", text, GeogebraCommonUtilUnicode_get_degree_())];
      [this$0_->textField_ setCaretPositionWithInt:caretPos];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianDrawDrawTextField:", "InputFieldKeyListener", NULL, 0x1, NULL, NULL },
    { "keyReleasedWithGeogebraCommonEuclidianEventKeyEvent:", "keyReleased", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.draw.DrawTextField;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener = { 2, "InputFieldKeyListener", "geogebra.common.euclidian.draw", "DrawTextField", 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener;
}

@end

void GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener *self, GeogebraCommonEuclidianDrawDrawTextField *outer$) {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener *new_GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(GeogebraCommonEuclidianDrawDrawTextField *outer$) {
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener *self = [GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener alloc];
  GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener_initWithGeogebraCommonEuclidianDrawDrawTextField_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawTextField_InputFieldKeyListener)
