//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawList.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawList.h"
#include "geogebra/common/euclidian/draw/DrawListArray.h"
#include "geogebra/common/euclidian/event/ActionEvent.h"
#include "geogebra/common/euclidian/event/ActionListener.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/factories/SwingFactory.h"
#include "geogebra/common/javax/swing/AbstractJComboBox.h"
#include "geogebra/common/javax/swing/GBox.h"
#include "geogebra/common/javax/swing/GLabel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/Unicode.h"

@interface GeogebraCommonEuclidianDrawDrawList () {
 @public
  GeogebraCommonEuclidianDrawDrawListArray *drawables_;
  jboolean isVisible_;
  NSString *oldCaption_;
  GeogebraCommonJavaxSwingGLabel *label_;
  GeogebraCommonJavaxSwingGBox *box_;
}

- (void)reset;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawList, drawables_, GeogebraCommonEuclidianDrawDrawListArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawList, oldCaption_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawList, label_, GeogebraCommonJavaxSwingGLabel *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawList, box_, GeogebraCommonJavaxSwingGBox *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawList_reset(GeogebraCommonEuclidianDrawDrawList *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawList_update(GeogebraCommonEuclidianDrawDrawList *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawList_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawList *self, id<GeogebraCommonAwtGGraphics2D> g2);

@interface GeogebraCommonEuclidianDrawDrawList_ActionListener () {
 @public
  GeogebraCommonEuclidianDrawDrawList *this$0_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawList_ActionListener, this$0_, GeogebraCommonEuclidianDrawDrawList *)

@implementation GeogebraCommonEuclidianDrawDrawList

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                         withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList {
  GeogebraCommonEuclidianDrawDrawList_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_(self, view, geoList);
  return self;
}

- (void)reset {
  GeogebraCommonEuclidianDrawDrawList_reset(self);
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawList_update(self);
}

- (void)remove {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) removeWithGeogebraCommonJavaxSwingGBox:box_];
  }
  else {
    for (jint i = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *currentGeo = [((GeogebraCommonEuclidianDrawableND *) nil_chk([drawables_ getWithInt:i])) getGeoElement];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(currentGeo)) isLabelSet]) [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) removeWithGeogebraCommonKernelGeosGeoElement:currentGeo];
    }
    [drawables_ clear];
  }
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawList_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    if (isVisible_) {
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) doHighlighting]) {
        [((GeogebraCommonJavaxSwingGLabel *) nil_chk(label_)) setOpaqueWithBoolean:YES];
        [label_ setBackgroundWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_lightGray_()];
      }
      else {
        [((GeogebraCommonJavaxSwingGLabel *) nil_chk(label_)) setOpaqueWithBoolean:NO];
      }
    }
  }
  else {
    if (isVisible_) {
      jboolean doHighlight = [geoList_ doHighlighting];
      jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size];
      for (jint i = 0; i < size; i++) {
        GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
        if ([self createdByDrawList] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement])) isLabelSet]) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement])) setHighlightedWithBoolean:doHighlight];
          [d drawWithGeogebraCommonAwtGGraphics2D:g2];
        }
      }
    }
  }
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonJavaxSwingGBox *) nil_chk(box_)) getBounds])) containsWithInt:x withInt:y];
  }
  jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
    if ([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) hitWithInt:x withInt:y withInt:hitThreshold]) return YES;
  }
  return NO;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    return [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:labelRectangle_];
  }
  jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
    if (![((GeogebraCommonEuclidianDrawable *) nil_chk(d)) isInsideWithGeogebraCommonAwtGRectangle:rect]) return NO;
  }
  return size > 0;
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    return [((id<GeogebraCommonAwtGRectangle>) nil_chk([((GeogebraCommonJavaxSwingGBox *) nil_chk(box_)) getBounds])) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
  }
  jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
    if ([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) intersectsRectangleWithGeogebraCommonAwtGRectangle:rect]) return YES;
  }
  return NO;
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    return nil;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible]) return nil;
  id<GeogebraCommonAwtGRectangle> result = nil;
  jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size];
  for (jint i = 0; i < size; i++) {
    GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
    id<GeogebraCommonAwtGRectangle> bb = [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getBounds];
    if (bb != nil) {
      if (result == nil) result = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithGeogebraCommonAwtGRectangle:bb];
      [((id<GeogebraCommonAwtGRectangle>) nil_chk(result)) addWithGeogebraCommonAwtGRectangle:bb];
    }
  }
  return result;
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    return NO;
  }
  return [super hitLabelWithInt:x withInt:y];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (void)resetDrawType {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(geoList_)) drawAsComboBox]) {
    for (jint i = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(drawables_)) size] - 1; i >= 0; i--) {
      GeogebraCommonKernelGeosGeoElement *currentGeo = [((GeogebraCommonEuclidianDrawableND *) nil_chk([drawables_ getWithInt:i])) getGeoElement];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(currentGeo)) isLabelSet]) {
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) removeWithGeogebraCommonKernelGeosGeoElement:currentGeo];
      }
    }
    [drawables_ clear];
  }
  else {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) removeWithGeogebraCommonJavaxSwingGBox:box_];
  }
  GeogebraCommonEuclidianDrawDrawList_reset(self);
  GeogebraCommonEuclidianDrawDrawList_update(self);
}

- (void)dealloc {
  RELEASE_(geoList_);
  RELEASE_(drawables_);
  RELEASE_(oldCaption_);
  RELEASE_(comboBox_);
  RELEASE_(label_);
  RELEASE_(box_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoList:", "DrawList", NULL, 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "remove", NULL, "V", 0x11, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x14, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x11, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x11, NULL, NULL },
    { "resetDrawType", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList_", NULL, 0x0, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "drawables_", NULL, 0x2, "Lgeogebra.common.euclidian.draw.DrawListArray;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "oldCaption_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "comboBox_", NULL, 0x0, "Lgeogebra.common.javax.swing.AbstractJComboBox;", NULL, NULL,  },
    { "label_", NULL, 0x2, "Lgeogebra.common.javax.swing.GLabel;", NULL, NULL,  },
    { "box_", NULL, 0x2, "Lgeogebra.common.javax.swing.GBox;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.euclidian.draw.DrawList$ActionListener;"};
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawList = { 2, "DrawList", "geogebra.common.euclidian.draw", NULL, 0x11, 14, methods, 7, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawList;
}

@end

void GeogebraCommonEuclidianDrawDrawList_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonEuclidianDrawDrawList *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawList_set_geoList_(self, geoList);
  GeogebraCommonEuclidianDrawable_set_geo_(self, geoList);
  GeogebraCommonEuclidianDrawDrawList_reset(self);
  GeogebraCommonEuclidianDrawDrawList_update(self);
}

GeogebraCommonEuclidianDrawDrawList *new_GeogebraCommonEuclidianDrawDrawList_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoList *geoList) {
  GeogebraCommonEuclidianDrawDrawList *self = [GeogebraCommonEuclidianDrawDrawList alloc];
  GeogebraCommonEuclidianDrawDrawList_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoList_(self, view, geoList);
  return self;
}

void GeogebraCommonEuclidianDrawDrawList_reset(GeogebraCommonEuclidianDrawDrawList *self) {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) drawAsComboBox]) {
    if (self->label_ == nil) {
      GeogebraCommonEuclidianDrawDrawList_set_label_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getSwingFactory])) newJLabelWithNSString:@"Label" withBoolean:YES]);
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setVisibleWithBoolean:YES];
    }
    if (self->comboBox_ == nil) {
      GeogebraCommonEuclidianDrawDrawList_set_comboBox_(self, [self->geoList_ getComboBoxWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getViewID]]);
      [((GeogebraCommonJavaxSwingAbstractJComboBox *) nil_chk(self->comboBox_)) setVisibleWithBoolean:YES];
      [self->comboBox_ addActionListenerWithGeogebraCommonEuclidianEventActionListener:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newActionListenerWithGeogebraCommonEuclidianEventActionListenerI:[new_GeogebraCommonEuclidianDrawDrawList_ActionListener_initWithGeogebraCommonEuclidianDrawDrawList_(self) autorelease]]];
    }
    if (self->box_ == nil) {
      GeogebraCommonEuclidianDrawDrawList_set_box_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getSwingFactory])) createHorizontalBoxWithGeogebraCommonEuclidianEuclidianController:[self->view_ getEuclidianController]]);
      [((GeogebraCommonJavaxSwingGBox *) nil_chk(self->box_)) addWithGeogebraCommonJavaxSwingGLabel:self->label_];
      [self->box_ addWithGeogebraCommonJavaxSwingAbstractJComboBox:self->comboBox_];
    }
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) addWithGeogebraCommonJavaxSwingGBox:self->box_];
  }
  else {
    if (self->drawables_ == nil) {
      GeogebraCommonEuclidianDrawDrawList_setAndConsume_drawables_(self, new_GeogebraCommonEuclidianDrawDrawListArray_initWithGeogebraCommonEuclidianEuclidianViewInterfaceSlim_(self->view_));
    }
  }
}

void GeogebraCommonEuclidianDrawDrawList_update(GeogebraCommonEuclidianDrawDrawList *self) {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) drawAsComboBox]) {
    self->isVisible_ = ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isEuclidianVisible] && [self->geoList_ size] != 0);
    [((GeogebraCommonJavaxSwingGBox *) nil_chk(self->box_)) setVisibleWithBoolean:self->isVisible_];
    if (!self->isVisible_) {
      return;
    }
    [self->geoList_ rebuildComboxBoxIfNecessaryWithGeogebraCommonJavaxSwingAbstractJComboBox:self->comboBox_];
    if ([self->geo_ getRawCaption] != nil) {
      NSString *caption = [self->geo_ getCaptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (![((NSString *) nil_chk(caption)) isEqual:self->oldCaption_]) {
        GeogebraCommonEuclidianDrawDrawList_set_oldCaption_(self, caption);
        GeogebraCommonEuclidianDrawable_set_labelDesc_(self, GeogebraCommonKernelGeosGeoElement_indicesToHTMLWithNSString_withBoolean_(caption, YES));
      }
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setTextWithNSString:self->labelDesc_];
    }
    else {
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setTextWithNSString:JreStrcat("$$$", GeogebraCommonUtilUnicode_get_NBSP_(), GeogebraCommonUtilUnicode_get_NBSP_(), GeogebraCommonUtilUnicode_get_NBSP_())];
    }
    if (![self->geo_ isLabelVisible]) {
      [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setTextWithNSString:@""];
    }
    jint fontSize = J2ObjCFpToInt(([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontSize] * [self->geoList_ getFontSizeMultiplier]));
    GeogebraCommonMainApp *app = [self->view_ getApplication];
    GeogebraCommonAwtGFont *vFont = [self->view_ getFont];
    GeogebraCommonAwtGFont *font = [((GeogebraCommonMainApp *) nil_chk(app)) getFontCanDisplayWithNSString:[nil_chk([((GeogebraCommonJavaxSwingAbstractJComboBox *) nil_chk(self->comboBox_)) getItemAtWithInt:0]) description] withBoolean:NO withInt:[((GeogebraCommonAwtGFont *) nil_chk(vFont)) getStyle] withInt:fontSize];
    [((GeogebraCommonJavaxSwingGLabel *) nil_chk(self->label_)) setOpaqueWithBoolean:NO];
    [self->comboBox_ setFontWithGeogebraCommonAwtGFont:font];
    [self->label_ setFontWithGeogebraCommonAwtGFont:font];
    [self->comboBox_ setForegroundWithGeogebraCommonAwtGColor:[self->geo_ getObjectColor]];
    [self->label_ setForegroundWithGeogebraCommonAwtGColor:[self->geo_ getObjectColor]];
    GeogebraCommonAwtGColor *bgCol = [self->geo_ getBackgroundColor];
    [self->comboBox_ setBackgroundWithGeogebraCommonAwtGColor:bgCol != nil ? bgCol : [self->view_ getBackgroundCommon]];
    [self->comboBox_ setFocusableWithBoolean:YES];
    [self->comboBox_ setEditableWithBoolean:NO];
    [self->box_ validate];
    self->xLabel_ = self->geo_->labelOffsetX_;
    self->yLabel_ = self->geo_->labelOffsetY_;
    GeogebraCommonAwtGDimension *prefSize = [self->box_ getPreferredSize];
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ withInt:[((GeogebraCommonAwtGDimension *) nil_chk(prefSize)) getWidth] withInt:[prefSize getHeight]];
    [self->box_ setBoundsWithGeogebraCommonAwtGRectangle:self->labelRectangle_];
  }
  else {
    self->isVisible_ = [self->geoList_ isEuclidianVisible];
    if (!self->isVisible_) return;
    jint size = [self->geoList_ size];
    [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(self->drawables_)) ensureCapacityWithInt:size];
    jint oldDrawableSize = [self->drawables_ size];
    jint drawablePos = 0;
    for (jint i = 0; i < size; i++) {
      GeogebraCommonKernelGeosGeoElement *listElement = [self->geoList_ getWithInt:i];
      if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(listElement)) isDrawable]) continue;
      if ([self->drawables_ addToDrawableListWithGeogebraCommonKernelGeosGeoElement:listElement withInt:drawablePos withInt:oldDrawableSize withGeogebraCommonEuclidianDrawableND:self]) drawablePos++;
    }
    for (jint i = [self->drawables_ size] - 1; i >= drawablePos; i--) {
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) removeWithGeogebraCommonKernelGeosGeoElement:[((GeogebraCommonEuclidianDrawableND *) nil_chk([self->drawables_ getWithInt:i])) getGeoElement]];
      [self->drawables_ removeWithInt:i];
    }
    if ([self->geoList_ getTrace]) {
      self->isTracing__ = YES;
      id<GeogebraCommonAwtGGraphics2D> g2 = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getBackgroundGraphics];
      if (g2 != nil) GeogebraCommonEuclidianDrawDrawList_drawTraceWithGeogebraCommonAwtGGraphics2D_(self, g2);
    }
    else {
      if (self->isTracing__) {
        self->isTracing__ = NO;
      }
    }
  }
}

void GeogebraCommonEuclidianDrawDrawList_drawTraceWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawList *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList_)) drawAsComboBox]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getObjectColor]];
    [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
    if (self->isVisible_) {
      jint size = [((GeogebraCommonEuclidianDrawDrawListArray *) nil_chk(self->drawables_)) size];
      for (jint i = 0; i < size; i++) {
        GeogebraCommonEuclidianDrawable *d = (GeogebraCommonEuclidianDrawable *) check_class_cast([self->drawables_ getWithInt:i], [GeogebraCommonEuclidianDrawable class]);
        if ([self createdByDrawList] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonEuclidianDrawable *) nil_chk(d)) getGeoElement])) isLabelSet]) {
          [((GeogebraCommonEuclidianDrawable *) nil_chk(d)) drawWithGeogebraCommonAwtGGraphics2D:g2];
        }
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawList)

@implementation GeogebraCommonEuclidianDrawDrawList_ActionListener

- (void)actionPerformedWithGeogebraCommonEuclidianEventActionEvent:(GeogebraCommonEuclidianEventActionEvent *)e {
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(this$0_->geoList_)) setSelectedIndexWithInt:[((GeogebraCommonJavaxSwingAbstractJComboBox *) nil_chk(this$0_->comboBox_)) getSelectedIndex] withBoolean:YES];
}

- (instancetype)initWithGeogebraCommonEuclidianDrawDrawList:(GeogebraCommonEuclidianDrawDrawList *)outer$ {
  GeogebraCommonEuclidianDrawDrawList_ActionListener_initWithGeogebraCommonEuclidianDrawDrawList_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "actionPerformedWithGeogebraCommonEuclidianEventActionEvent:", "actionPerformed", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianDrawDrawList:", "init", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.euclidian.draw.DrawList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawList_ActionListener = { 2, "ActionListener", "geogebra.common.euclidian.draw", "DrawList", 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawList_ActionListener;
}

@end

void GeogebraCommonEuclidianDrawDrawList_ActionListener_initWithGeogebraCommonEuclidianDrawDrawList_(GeogebraCommonEuclidianDrawDrawList_ActionListener *self, GeogebraCommonEuclidianDrawDrawList *outer$) {
  GeogebraCommonEuclidianDrawDrawList_ActionListener_set_this$0_(self, outer$);
  GeogebraCommonEuclidianEventActionListener_init(self);
}

GeogebraCommonEuclidianDrawDrawList_ActionListener *new_GeogebraCommonEuclidianDrawDrawList_ActionListener_initWithGeogebraCommonEuclidianDrawDrawList_(GeogebraCommonEuclidianDrawDrawList *outer$) {
  GeogebraCommonEuclidianDrawDrawList_ActionListener *self = [GeogebraCommonEuclidianDrawDrawList_ActionListener alloc];
  GeogebraCommonEuclidianDrawDrawList_ActionListener_initWithGeogebraCommonEuclidianDrawDrawList_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawList_ActionListener)
