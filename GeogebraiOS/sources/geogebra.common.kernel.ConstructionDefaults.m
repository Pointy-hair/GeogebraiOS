//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/ConstructionDefaults.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoConicPart.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GeoGebraColorConstants.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/Set.h"

@interface GeogebraCommonKernelConstructionDefaults () {
 @public
  jint lineThickness_;
  jint pointSize_;
  jint angleSize_;
  jfloat filling_;
  jboolean blackWhiteMode_;
}

+ (void)setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                    withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app;

@end

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colLine_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colLine_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colInequality_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colInequality_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colAngle_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colAngle_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colLocus_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colLocus_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colFunction_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colFunction_, GeogebraCommonAwtGColor *)

static GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colList_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionDefaults, colList_, GeogebraCommonAwtGColor *)

__attribute__((unused)) static void GeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonMainApp_(GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonMainApp *app);

__attribute__((unused)) static void GeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonKernelConstructionDefaults *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean isReset, jboolean setEuclidianVisible);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonKernelConstructionDefaults)

GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colPoint_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colDepPoint_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colPathPoint_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colRegionPoint_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colComplexPoint_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colConic_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colPolygon_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colQuadric_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colPreview_;
GeogebraCommonAwtGColor *GeogebraCommonKernelConstructionDefaults_colPreviewFill_;

@implementation GeogebraCommonKernelConstructionDefaults

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons2 {
  GeogebraCommonKernelConstructionDefaults_initWithGeogebraCommonKernelConstruction_(self, cons2);
  return self;
}

- (id<JavaUtilSet>)getDefaultGeos {
  return [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) entrySet];
}

- (void)createDefaultGeoElementsFromScratch {
  GeogebraCommonKernelConstructionDefaults_set_defaultGeoElements_(self, nil);
  [self createDefaultGeoElements];
}

- (void)createDefaultGeoElements {
  if (defaultGeoElements_ == nil) GeogebraCommonKernelConstructionDefaults_setAndConsume_defaultGeoElements_(self, new_JavaUtilHashMap_init());
  GeogebraCommonKernelGeosGeoPoint *freePoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [freePoint setPointSizeWithInt:GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [freePoint setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [freePoint setLocalVariableLabelWithNSString:JreStrcat("$$", @"Point", strFree_)];
  [freePoint setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colPoint_];
  [freePoint setPointSizeWithInt:pointSize_];
  [freePoint setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE];
  [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE) withId:freePoint];
  GeogebraCommonKernelGeosGeoPoint *depPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [depPoint setPointSizeWithInt:GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [depPoint setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [depPoint setLocalVariableLabelWithNSString:JreStrcat("$$", @"Point", strDependent_)];
  [depPoint setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colDepPoint_];
  [depPoint setPointSizeWithInt:pointSize_];
  [depPoint setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT) withId:depPoint];
  GeogebraCommonKernelGeosGeoPoint *pathPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [pathPoint setPointSizeWithInt:GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [pathPoint setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [pathPoint setLocalVariableLabelWithNSString:@"PointOn"];
  [pathPoint setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colPathPoint_];
  [pathPoint setPointSizeWithInt:pointSize_];
  [pathPoint setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH) withId:pathPoint];
  GeogebraCommonKernelGeosGeoPoint *regionPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [regionPoint setPointSizeWithInt:GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [regionPoint setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [regionPoint setLocalVariableLabelWithNSString:@"PointInRegion"];
  [regionPoint setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colRegionPoint_];
  [regionPoint setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION) withId:regionPoint];
  GeogebraCommonKernelGeosGeoPoint *complexPoint = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [complexPoint setPointSizeWithInt:GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE];
  [complexPoint setPointStyleWithInt:GeogebraCommonPluginEuclidianStyleConstants_POINT_STYLE_DOT];
  [complexPoint setLocalVariableLabelWithNSString:@"PointOn"];
  [complexPoint setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colComplexPoint_];
  [complexPoint setPointSizeWithInt:pointSize_];
  [complexPoint setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX) withId:complexPoint];
  GeogebraCommonKernelGeosGeoLine *line = [new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [line setLocalVariableLabelWithNSString:@"Line"];
  [line setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLine_];
  [line setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE];
  [line setModeWithInt:GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE) withId:line];
  GeogebraCommonKernelGeosGeoSegment *seg = [new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [seg setLocalVariableLabelWithNSString:@"Segment"];
  [seg setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLine_];
  [seg setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT) withId:seg];
  GeogebraCommonKernelGeosGeoRay *ray = [new_GeogebraCommonKernelGeosGeoRay_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [ray setLocalVariableLabelWithNSString:@"Segment"];
  [ray setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLine_];
  [ray setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_RAY];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_RAY) withId:ray];
  GeogebraCommonKernelGeosGeoFunctionNVar *inequality = [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [inequality setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colInequality_];
  [inequality setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_ALPHA];
  [inequality setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY) withId:inequality];
  GeogebraCommonKernelGeosGeoFunction *inequality1 = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [inequality1 setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR) withId:inequality1];
  GeogebraCommonKernelGeosGeoFunctionNVar *functionNV = [new_GeogebraCommonKernelGeosGeoFunctionNVar_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [functionNV setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colQuadric_];
  [functionNV setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA];
  [functionNV setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR) withId:functionNV];
  GeogebraCommonKernelGeosGeoVector *vector = [new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [vector setLocalVariableLabelWithNSString:@"Vector"];
  [vector setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLine_];
  [vector setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR) withId:vector];
  GeogebraCommonKernelGeosGeoPolygon *polygon = [new_GeogebraCommonKernelGeosGeoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_(cons_, nil) autorelease];
  [polygon setLocalVariableLabelWithNSString:@"Polygon"];
  [polygon setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colPolygon_];
  [polygon setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA];
  [polygon setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON) withId:polygon];
  GeogebraCommonKernelGeosGeoPolyLine *polyline = [new_GeogebraCommonKernelGeosGeoPolyLine_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [polyline setLocalVariableLabelWithNSString:@"Polyline"];
  [polyline setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLine_];
  [polyline setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE) withId:polyline];
  GeogebraCommonKernelGeosGeoConic *conic = [new_GeogebraCommonKernelGeosGeoConic_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [conic setLocalVariableLabelWithNSString:@"Conic"];
  [conic setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colConic_];
  [conic setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_ALPHA];
  [conic setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC) withId:conic];
  GeogebraCommonKernelGeosGeoConicPart *conicSector = [new_GeogebraCommonKernelGeosGeoConicPart_initWithGeogebraCommonKernelConstruction_withInt_(cons_, GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) autorelease];
  [conicSector setLocalVariableLabelWithNSString:@"Sector"];
  [conicSector setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colPolygon_];
  [conicSector setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA];
  [conicSector setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR) withId:conicSector];
  GeogebraCommonKernelGeosGeoNumeric *number = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [number setLocalVariableLabelWithNSString:@"Numeric"];
  [number setSliderFixedWithBoolean:YES];
  [number setLabelModeWithInt:GeogebraCommonKernelGeosGeoElement_LABEL_NAME_VALUE];
  [number setIntervalMaxWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_MAX_()];
  [number setIntervalMinWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_MIN_()];
  [number setAnimationStepWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_INCREMENT_()];
  [number setAnimationSpeedWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_SPEED_()];
  [number setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER_ALPHA];
  [number setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER];
  [number setLineThicknessWithInt:GeogebraCommonKernelGeosGeoNumeric_DEFAULT_THICKNESS];
  [number setSliderWidthWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_WIDTH_PIXEL_()];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER) withId:number];
  GeogebraCommonKernelGeosGeoAngle *angle = [new_GeogebraCommonKernelGeosGeoAngle_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [angle setLocalVariableLabelWithNSString:@"Angle"];
  [angle setSliderFixedWithBoolean:YES];
  [angle setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colAngle_];
  [angle setAlphaValueWithFloat:GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE_ALPHA];
  [angle setDrawableWithBoolean:YES withBoolean:NO];
  [angle setDrawableWithBoolean:YES withBoolean:NO];
  [angle setArcSizeWithInt:angleSize_];
  [angle setIntervalMaxWithDouble:GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MAX_ANGLE];
  [angle setIntervalMinWithDouble:GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_MIN_ANGLE];
  [angle setAnimationStepWithDouble:GeogebraCommonKernelGeosGeoAngle_DEFAULT_SLIDER_INCREMENT_ANGLE];
  [angle setAnimationSpeedWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_SPEED_()];
  [angle setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE];
  [angle setSliderWidthWithDouble:GeogebraCommonKernelGeosGeoNumeric_get_DEFAULT_SLIDER_WIDTH_PIXEL_ANGLE_()];
  [angle setLineTypeHiddenWithInt:GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_HIDDEN_AS_NOT_HIDDEN];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE) withId:angle];
  GeogebraCommonKernelGeosGeoFunction *function = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [function setLocalVariableLabelWithNSString:@"Function"];
  [function setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colFunction_];
  [function setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION];
  [function remove];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION) withId:function];
  GeogebraCommonKernelGeosGeoLocus *locus = [new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [locus setLocalVariableLabelWithNSString:@"Locus"];
  [locus setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colLocus_];
  [locus setLabelVisibleWithBoolean:NO];
  [locus setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS) withId:locus];
  GeogebraCommonKernelGeosGeoText *text = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [text setLocalVariableLabelWithNSString:@"Text"];
  [text setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT) withId:text];
  GeogebraCommonKernelGeosGeoImage *img = [new_GeogebraCommonKernelGeosGeoImage_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [img setLocalVariableLabelWithNSString:@"Image"];
  [img setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE) withId:img];
  GeogebraCommonKernelGeosGeoBoolean *bool_ = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [bool_ setLocalVariableLabelWithNSString:@"Boolean"];
  [bool_ setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN) withId:bool_];
  GeogebraCommonKernelGeosGeoList *list = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [list setShowAllPropertiesWithBoolean:YES];
  [list setLocalVariableLabelWithNSString:@"List"];
  [list setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonKernelConstructionDefaults_colList_];
  [list setAlphaValueWithFloat:-1];
  [list setDefaultGeoTypeWithInt:GeogebraCommonKernelConstructionDefaults_DEFAULT_LIST];
  [defaultGeoElements_ putWithId:JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelConstructionDefaults_DEFAULT_LIST) withId:list];
}

- (NSString *)getCDXML {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
  [sb appendWithNSString:JreStrcat("$$$", @"<geogebra format=\"", GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">\n")];
  [sb appendWithNSString:@"<construction>\n"];
  for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) {
    [self getXMLWithGeogebraCommonKernelGeosGeoElement:geo withJavaLangStringBuilder:sb];
  }
  [sb appendWithNSString:@"</construction>\n"];
  [sb appendWithNSString:@"</geogebra>\n"];
  return [sb description];
}

- (void)getXMLWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                           withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getXMLWithBoolean:NO withJavaLangStringBuilder:sb];
}

- (GeogebraCommonKernelGeosGeoElement *)getDefaultGeoWithInt:(jint)type {
  return [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) getWithId:JavaLangInteger_valueOfWithInt_(type)];
}

- (void)addDefaultGeoWithJavaLangInteger:(JavaLangInteger *)defaultType
  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) putWithId:defaultType withId:geo];
}

- (jint)getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [self getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonPluginGeoClassEnum:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType]];
}

- (jint)getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                        withGeogebraCommonPluginGeoClassEnum:(GeogebraCommonPluginGeoClassEnum *)geoClass {
  jint type;
  {
    id<GeogebraCommonKernelKernelNDGeoPointND> p;
    id<GeogebraCommonKernelKernelNDGeoConicPartND> conicPart;
    switch ([geoClass ordinal]) {
      case GeogebraCommonPluginGeoClass_POINT:
      p = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND));
      if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getMode] == GeogebraCommonKernelKernel_COORD_COMPLEX) {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX;
      }
      else if ([p isIndependent]) {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE;
      }
      else {
        if ([p hasPath]) type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH;
        else if ([p hasRegion]) type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION;
        else type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT;
      }
      break;
      case GeogebraCommonPluginGeoClass_ANGLE:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE;
      break;
      case GeogebraCommonPluginGeoClass_BOOLEAN:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN;
      break;
      case GeogebraCommonPluginGeoClass_CONIC:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC;
      break;
      case GeogebraCommonPluginGeoClass_CONICPART:
      conicPart = (id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND));
      if ([((id<GeogebraCommonKernelKernelNDGeoConicPartND>) nil_chk(conicPart)) getConicPartType] == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_PART_SECTOR) {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR;
      }
      else {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC;
      }
      break;
      case GeogebraCommonPluginGeoClass_FUNCTION_NVAR:
      if ([((GeogebraCommonKernelGeosGeoFunctionNVar *) nil_chk(((GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunctionNVar class])))) isBooleanFunction]) {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      }
      else {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR;
      }
      break;
      case GeogebraCommonPluginGeoClass_FUNCTION:
      if ([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunction class])))) isBooleanFunction]) {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      }
      else {
        type = GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION;
      }
      break;
      case GeogebraCommonPluginGeoClass_INTERVAL:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY;
      break;
      case GeogebraCommonPluginGeoClass_FUNCTIONCONDITIONAL:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION;
      break;
      case GeogebraCommonPluginGeoClass_IMAGE:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE;
      break;
      case GeogebraCommonPluginGeoClass_LIST:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_LIST;
      break;
      case GeogebraCommonPluginGeoClass_LOCUS:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS;
      break;
      case GeogebraCommonPluginGeoClass_NUMERIC:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER;
      break;
      case GeogebraCommonPluginGeoClass_POLYGON:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON;
      break;
      case GeogebraCommonPluginGeoClass_POLYLINE:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE;
      break;
      case GeogebraCommonPluginGeoClass_TEXT:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT;
      break;
      case GeogebraCommonPluginGeoClass_VECTOR:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR;
      break;
      case GeogebraCommonPluginGeoClass_SEGMENT:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT;
      break;
      case GeogebraCommonPluginGeoClass_RAY:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_RAY;
      break;
      default:
      type = GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE;
    }
  }
  return type;
}

+ (void)setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                    withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonMainApp_(geo, app);
}

- (void)setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                         withBoolean:(jboolean)isReset {
  GeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, isReset, YES);
}

- (void)setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                         withBoolean:(jboolean)isReset
                                                         withBoolean:(jboolean)setEuclidianVisible {
  GeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(self, geo, isReset, setEuclidianVisible);
}

- (void)setBlackWhiteModeWithBoolean:(jboolean)flag {
  blackWhiteMode_ = flag;
}

- (jboolean)getBlackWhiteMode {
  return blackWhiteMode_;
}

- (void)resetDefaults {
  lineThickness_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  pointSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE;
  angleSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_ANGLE_SIZE;
  filling_ = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA;
  [self setDefaultLineThicknessWithInt:lineThickness_];
  [self setDefaultPointSizeWithInt:pointSize_];
  [self setDefaultAngleSizeWithInt:angleSize_];
  [self setDefaultFillingWithFloat:filling_];
}

- (jint)getDefaultLineThickness {
  return lineThickness_;
}

- (jint)getDefaultPointSize {
  return pointSize_;
}

- (jint)getDefaultAngleSize {
  return angleSize_;
}

- (void)setDefaultAngleSizeWithInt:(jint)angleSize0 {
  self->angleSize_ = JavaLangMath_maxWithInt_withInt_(angleSize0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_ANGLE:
      [((GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class])) setArcSizeWithInt:self->angleSize_];
      break;
    }
  }
}

- (void)setDefaultPointSizeWithInt:(jint)pointSize0 {
  self->pointSize_ = JavaLangMath_maxWithInt_withInt_(pointSize0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_POINT:
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) setPointSizeWithInt:self->pointSize_];
      break;
      case GeogebraCommonPluginGeoClass_LIST:
      [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) setPointSizeWithInt:self->pointSize_];
      break;
    }
  }
}

- (void)setDefaultLineThicknessWithInt:(jint)lineThickness0 {
  self->lineThickness_ = JavaLangMath_maxWithInt_withInt_(lineThickness0, 1);
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText] && ![geo isGeoImage]) [geo setLineThicknessWithInt:self->lineThickness_];
    switch ([[geo getGeoClassType] ordinal]) {
      case GeogebraCommonPluginGeoClass_LIST:
      [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) setLineThicknessWithInt:self->lineThickness_];
      break;
    }
  }
}

- (void)setDefaultFillingWithFloat:(jfloat)filling0 {
  self->filling_ = filling0;
  id<JavaUtilIterator> it = [((id<JavaUtilCollection>) nil_chk([((JavaUtilHashMap *) nil_chk(defaultGeoElements_)) values])) iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:filling0];
  }
}

- (void)dealloc {
  RELEASE_(cons_);
  RELEASE_(defaultGeoElements_);
  RELEASE_(strFree_);
  RELEASE_(strDependent_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonKernelConstructionDefaults class]) {
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colPoint_, nil, GeogebraCommonAwtGColor_get_blue_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colDepPoint_, nil, GeogebraCommonAwtGColor_get_darkGray_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colPathPoint_, nil, GeogebraCommonMainGeoGebraColorConstants_get_LIGHTBLUE_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colRegionPoint_, nil, GeogebraCommonKernelConstructionDefaults_colPathPoint_);
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colComplexPoint_, nil, GeogebraCommonKernelConstructionDefaults_colPoint_);
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colLine_, nil, GeogebraCommonAwtGColor_get_black_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colInequality_, nil, GeogebraCommonAwtGColor_get_blue_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colConic_, nil, GeogebraCommonAwtGColor_get_black_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colPolygon_, nil, GeogebraCommonMainGeoGebraColorConstants_get_BROWN_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colAngle_, nil, GeogebraCommonMainGeoGebraColorConstants_get_DARKGREEN_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colLocus_, nil, GeogebraCommonAwtGColor_get_black_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colFunction_, nil, GeogebraCommonAwtGColor_get_black_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colList_, nil, GeogebraCommonMainGeoGebraColorConstants_get_DARKGREEN_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colQuadric_, nil, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:255 withInt:0 withInt:0]);
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colPreview_, nil, GeogebraCommonAwtGColor_get_darkGray_());
    JreStrongAssign(&GeogebraCommonKernelConstructionDefaults_colPreviewFill_, nil, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newColorWithInt:[((GeogebraCommonAwtGColor *) nil_chk(GeogebraCommonKernelConstructionDefaults_colPolygon_)) getRed] withInt:[GeogebraCommonKernelConstructionDefaults_colPolygon_ getGreen] withInt:[GeogebraCommonKernelConstructionDefaults_colPolygon_ getBlue] withInt:J2ObjCFpToInt((GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA * 255))]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonKernelConstructionDefaults)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "ConstructionDefaults", NULL, 0x1, NULL, NULL },
    { "getDefaultGeos", NULL, "Ljava.util.Set;", 0x1, NULL, NULL },
    { "createDefaultGeoElementsFromScratch", NULL, "V", 0x1, NULL, NULL },
    { "createDefaultGeoElements", NULL, "V", 0x1, NULL, NULL },
    { "getCDXML", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getXMLWithGeogebraCommonKernelGeosGeoElement:withJavaLangStringBuilder:", "getXML", "V", 0x4, NULL, NULL },
    { "getDefaultGeoWithInt:", "getDefaultGeo", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "addDefaultGeoWithJavaLangInteger:withGeogebraCommonKernelGeosGeoElement:", "addDefaultGeo", "V", 0x1, NULL, NULL },
    { "getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:", "getDefaultType", "I", 0x1, NULL, NULL },
    { "getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonPluginGeoClassEnum:", "getDefaultType", "I", 0x1, NULL, NULL },
    { "setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonMainApp:", "setMaxLayerUsed", "V", 0xa, NULL, NULL },
    { "setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "setDefaultVisualStyles", "V", 0x11, NULL, NULL },
    { "setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement:withBoolean:withBoolean:", "setDefaultVisualStyles", "V", 0x11, NULL, NULL },
    { "setBlackWhiteModeWithBoolean:", "setBlackWhiteMode", "V", 0x1, NULL, NULL },
    { "getBlackWhiteMode", NULL, "Z", 0x1, NULL, NULL },
    { "resetDefaults", NULL, "V", 0x1, NULL, NULL },
    { "getDefaultLineThickness", NULL, "I", 0x1, NULL, NULL },
    { "getDefaultPointSize", NULL, "I", 0x1, NULL, NULL },
    { "getDefaultAngleSize", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultAngleSizeWithInt:", "setDefaultAngleSize", "V", 0x1, NULL, NULL },
    { "setDefaultPointSizeWithInt:", "setDefaultPointSize", "V", 0x1, NULL, NULL },
    { "setDefaultLineThicknessWithInt:", "setDefaultLineThickness", "V", 0x1, NULL, NULL },
    { "setDefaultFillingWithFloat:", "setDefaultFilling", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_POLYGON_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA },
    { "DEFAULT_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_NONE },
    { "DEFAULT_POINT_FREE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_FREE },
    { "DEFAULT_POINT_DEPENDENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_DEPENDENT },
    { "DEFAULT_POINT_ON_PATH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH },
    { "DEFAULT_POINT_IN_REGION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_IN_REGION },
    { "DEFAULT_POINT_COMPLEX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_COMPLEX },
    { "DEFAULT_LINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_LINE },
    { "DEFAULT_SEGMENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_SEGMENT },
    { "DEFAULT_INEQUALITY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY },
    { "DEFAULT_INEQUALITY_1VAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_1VAR },
    { "DEFAULT_RAY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_RAY },
    { "DEFAULT_VECTOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_VECTOR },
    { "DEFAULT_CONIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC },
    { "DEFAULT_CONIC_SECTOR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_SECTOR },
    { "DEFAULT_NUMBER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER },
    { "DEFAULT_ANGLE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE },
    { "DEFAULT_FUNCTION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION },
    { "DEFAULT_FUNCTION_NVAR_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_FUNCTION_NVAR },
    { "DEFAULT_POLYGON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON },
    { "DEFAULT_POLYLINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYLINE },
    { "DEFAULT_LOCUS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_LOCUS },
    { "DEFAULT_TEXT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_TEXT },
    { "DEFAULT_IMAGE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_IMAGE },
    { "DEFAULT_BOOLEAN_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_BOOLEAN },
    { "DEFAULT_LIST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_DEFAULT_LIST },
    { "colPoint_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colPoint_, NULL,  },
    { "colDepPoint_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colDepPoint_, NULL,  },
    { "colPathPoint_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colPathPoint_, NULL,  },
    { "colRegionPoint_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colRegionPoint_, NULL,  },
    { "colComplexPoint_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colComplexPoint_, NULL,  },
    { "colLine_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colLine_, NULL,  },
    { "colInequality_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colInequality_, NULL,  },
    { "colConic_", NULL, 0x1c, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colConic_, NULL,  },
    { "DEFAULT_CONIC_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_CONIC_ALPHA },
    { "colPolygon_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colPolygon_, NULL,  },
    { "DEFAULT_INEQUALITY_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_INEQUALITY_ALPHA },
    { "colAngle_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colAngle_, NULL,  },
    { "DEFAULT_ANGLE_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_ANGLE_ALPHA },
    { "DEFAULT_NUMBER_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_NUMBER_ALPHA },
    { "colLocus_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colLocus_, NULL,  },
    { "colFunction_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colFunction_, NULL,  },
    { "colList_", NULL, 0x1a, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colList_, NULL,  },
    { "DEFAULT_QUADRIC_ALPHA_", NULL, 0x19, "F", NULL, NULL, .constantValue.asFloat = GeogebraCommonKernelConstructionDefaults_DEFAULT_QUADRIC_ALPHA },
    { "colQuadric_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colQuadric_, NULL,  },
    { "colPreview_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colPreview_, NULL,  },
    { "colPreviewFill_", NULL, 0x19, "Lgeogebra.common.awt.GColor;", &GeogebraCommonKernelConstructionDefaults_colPreviewFill_, NULL,  },
    { "LABEL_VISIBLE_AUTOMATIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_AUTOMATIC },
    { "LABEL_VISIBLE_ALWAYS_ON_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON },
    { "LABEL_VISIBLE_ALWAYS_OFF_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF },
    { "LABEL_VISIBLE_POINTS_ONLY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY },
    { "LABEL_VISIBLE_USE_DEFAULTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS },
    { "DEFAULT_BUTTON_SIZE_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelConstructionDefaults_DEFAULT_BUTTON_SIZE },
    { "cons_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "defaultGeoElements_", NULL, 0x4, "Ljava.util.HashMap;", NULL, "Ljava/util/HashMap<Ljava/lang/Integer;Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "lineThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "pointSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "angleSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "filling_", NULL, 0x2, "F", NULL, NULL,  },
    { "blackWhiteMode_", NULL, 0x2, "Z", NULL, NULL,  },
    { "strFree_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
    { "strDependent_", NULL, 0x4, "Ljava.lang.String;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelConstructionDefaults = { 2, "ConstructionDefaults", "geogebra.common.kernel", NULL, 0x1, 23, methods, 62, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelConstructionDefaults;
}

@end

void GeogebraCommonKernelConstructionDefaults_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstructionDefaults *self, GeogebraCommonKernelConstruction *cons2) {
  NSObject_init(self);
  self->lineThickness_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
  self->pointSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_POINT_SIZE;
  self->angleSize_ = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_ANGLE_SIZE;
  self->filling_ = GeogebraCommonKernelConstructionDefaults_DEFAULT_POLYGON_ALPHA;
  self->blackWhiteMode_ = NO;
  GeogebraCommonKernelConstructionDefaults_set_strFree_(self, @" (free)");
  GeogebraCommonKernelConstructionDefaults_set_strDependent_(self, @" (dependent)");
  GeogebraCommonKernelConstructionDefaults_set_cons_(self, cons2);
  [self createDefaultGeoElements];
}

GeogebraCommonKernelConstructionDefaults *new_GeogebraCommonKernelConstructionDefaults_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons2) {
  GeogebraCommonKernelConstructionDefaults *self = [GeogebraCommonKernelConstructionDefaults alloc];
  GeogebraCommonKernelConstructionDefaults_initWithGeogebraCommonKernelConstruction_(self, cons2);
  return self;
}

void GeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonMainApp_(GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonMainApp *app) {
  GeogebraCommonKernelConstructionDefaults_initialize();
  if (app != nil) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLayerWithInt:[app getMaxLayerUsed]];
  }
}

void GeogebraCommonKernelConstructionDefaults_setDefaultVisualStylesWithGeogebraCommonKernelGeosGeoElement_withBoolean_withBoolean_(GeogebraCommonKernelConstructionDefaults *self, GeogebraCommonKernelGeosGeoElement *geo, jboolean isReset, jboolean setEuclidianVisible) {
  jint type = [self getDefaultTypeWithGeogebraCommonKernelGeosGeoElement:geo];
  GeogebraCommonKernelGeosGeoElement *defaultGeo = [self getDefaultGeoWithInt:type];
  GeogebraCommonMainApp *app = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication];
  if (defaultGeo != nil) {
    if (!setEuclidianVisible || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAllVisualPropertiesExceptEuclidianVisibleWithGeogebraCommonKernelGeosGeoElement:defaultGeo withBoolean:isReset];
    }
    else {
      [geo setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:defaultGeo withBoolean:isReset];
    }
    if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:[defaultGeo getAlphaValue]];
    if (!isReset) {
      GeogebraCommonKernelConstructionDefaults_setMaxLayerUsedWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonMainApp_(geo, app);
    }
  }
  jint labelingStyle = app == nil ? GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS : [app getCurrentLabelingStyle];
  switch (labelingStyle) {
    case GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_ON:
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelVisibleWithBoolean:YES];
    break;
    case GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_ALWAYS_OFF:
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelVisibleWithBoolean:NO];
    break;
    case GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_POINTS_ONLY:
    [geo setLabelVisibleWithBoolean:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint] || [geo isGeoNumeric]];
    break;
    default:
    case GeogebraCommonKernelConstructionDefaults_LABEL_VISIBLE_USE_DEFAULTS:
    break;
  }
  if (self->blackWhiteMode_) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_black_()];
    [geo setAlphaValueWithFloat:0.0f];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelConstructionDefaults)
