//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/commands/CmdPolyLine3D.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/commands/CmdPolyLine.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"

@implementation GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
          withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)pointList {
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(pointList)) size]; i++) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk([pointList getWithInt:i])) isGeoElement3D]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) PolyLine3DWithNSStringArray:labels withGeogebraCommonKernelGeosGeoList:pointList];
    }
  }
  return [super PolyLineWithNSStringArray:labels withGeogebraCommonKernelGeosGeoList:pointList];
}

- (jboolean)checkIs3DWithBoolean:(jboolean)is3D
withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (is3D) {
    return YES;
  }
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D];
}

- (IOSObjectArray *)PolyLineWithNSStringArray:(IOSObjectArray *)labels
withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                  withBoolean:(jboolean)penStroke
                                  withBoolean:(jboolean)is3D {
  if (is3D) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getManager3D])) PolyLine3DWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:points];
  }
  return [((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) PolyLineWithNSStringArray:labels withGeogebraCommonKernelKernelNDGeoPointNDArray:points withBoolean:penStroke];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPolyLine3D", NULL, 0x1, NULL, NULL },
    { "PolyLineWithNSStringArray:withGeogebraCommonKernelGeosGeoList:", "PolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "checkIs3DWithBoolean:withGeogebraCommonKernelGeosGeoElement:", "checkIs3D", "Z", 0x4, NULL, NULL },
    { "PolyLineWithNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withBoolean:", "PolyLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D = { 2, "CmdPolyLine3D", "geogebra.common.geogebra3D.kernel3D.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdPolyLine_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *new_GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D *self = [GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DCommandsCmdPolyLine3D)
