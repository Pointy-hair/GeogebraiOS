//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoFromBase.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoFromBase.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/util/StringUtil.h"

@interface GeogebraCommonKernelAdvancedAlgoFromBase () {
 @public
  id<GeogebraCommonKernelGeosGeoNumberValue> base_;
  GeogebraCommonKernelGeosGeoText *number_;
  GeogebraCommonKernelGeosGeoNumeric *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFromBase, base_, id<GeogebraCommonKernelGeosGeoNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFromBase, number_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoFromBase, result_, GeogebraCommonKernelGeosGeoNumeric *)

@implementation GeogebraCommonKernelAdvancedAlgoFromBase

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)number
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)base {
  GeogebraCommonKernelAdvancedAlgoFromBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, label, number, base);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ number_, [((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(base_)) toGeoElement] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getResult {
  return result_;
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(number_)) isDefined] || ![((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(base_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    return;
  }
  jint b = J2ObjCFpToInt([((id<GeogebraCommonKernelGeosGeoNumberValue>) nil_chk(base_)) getDouble]);
  if (b < 2 || b > 36) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
    return;
  }
  jdouble val = 0;
  NSString *in = [number_ getTextString];
  jint pos = [((NSString *) nil_chk(in)) indexOf:'.'];
  NSString *s = pos > -1 ? GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([in substring:0 endIndex:pos]) : GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_(in);
  for (jint i = 0; i < ((jint) [s length]); i++) {
    jint last = [s charAtWithInt:i] - (jint) 0x30;
    if (last > 9) last -= (jint) 0x30 - 9;
    if (last >= b || last < 0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
      return;
    }
    val = val * b + last;
  }
  if (pos > -1) {
    s = GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([in substring:pos + 1]);
    jdouble power = 1;
    for (jint i = 0; i < ((jint) [((NSString *) nil_chk(s)) length]); i++) {
      jint last = [s charAtWithInt:i] - (jint) 0x30;
      if (last > 9) last -= (jint) 0x30 - 9;
      if (last >= b || last < 0) {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setUndefined];
        return;
      }
      power /= b;
      val += power * last;
    }
  }
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(result_)) setValueWithDouble:val];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FromBase();
}

- (void)dealloc {
  RELEASE_(base_);
  RELEASE_(number_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoText:withGeogebraCommonKernelGeosGeoNumberValue:", "AlgoFromBase", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "base_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
    { "number_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoFromBase = { 2, "AlgoFromBase", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoFromBase;
}

@end

void GeogebraCommonKernelAdvancedAlgoFromBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelAdvancedAlgoFromBase *self, GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoText *number, id<GeogebraCommonKernelGeosGeoNumberValue> base) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAdvancedAlgoFromBase_set_base_(self, base);
  GeogebraCommonKernelAdvancedAlgoFromBase_set_number_(self, number);
  GeogebraCommonKernelAdvancedAlgoFromBase_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoFromBase *new_GeogebraCommonKernelAdvancedAlgoFromBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *c, NSString *label, GeogebraCommonKernelGeosGeoText *number, id<GeogebraCommonKernelGeosGeoNumberValue> base) {
  GeogebraCommonKernelAdvancedAlgoFromBase *self = [GeogebraCommonKernelAdvancedAlgoFromBase alloc];
  GeogebraCommonKernelAdvancedAlgoFromBase_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_withGeogebraCommonKernelGeosGeoNumberValue_(self, c, label, number, base);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoFromBase)
