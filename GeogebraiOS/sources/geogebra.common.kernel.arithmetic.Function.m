//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/Function.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/BooleanValue.h"
#include "geogebra/common/kernel/arithmetic/Equation.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionNVar.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/Inspecting.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/MyList.h"
#include "geogebra/common/kernel/arithmetic/MyNumberPair.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/arithmetic/Polynomial.h"
#include "geogebra/common/kernel/arithmetic/SymbolicPolyFunction.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/roots/RealRootDerivFunction.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Error.h"
#include "java/lang/Exception.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

#define GeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE 10.0

@interface GeogebraCommonKernelArithmeticFunction () {
 @public
  GeogebraCommonKernelArithmeticFunction *derivative__;
  GeogebraCommonKernelArithmeticExpressionNode *factorParentExp_;
  JavaUtilLinkedList *symbolicPolyFactorList_;
  JavaUtilLinkedList *numericPolyFactorList_;
  jboolean symbolicPolyFactorListDefined_;
  GeogebraCommonKernelArithmeticExpressionNode *zeroExpr_;
  GeogebraCommonKernelGeosGeoFunction *geoDeriv_;
}

- (void)translateXWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en
                                                        withDouble:(jdouble)vx;

- (GeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)xShift;

- (void)addNumberWithDouble:(jdouble)n;

- (JavaUtilLinkedList *)getNumericPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification;

- (jboolean)addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                 withJavaUtilList:(id<JavaUtilList>)l
                                                                      withBoolean:(jboolean)symbolic
                                                                      withBoolean:(jboolean)rootFindingSimplification
                                                                      withBoolean:(jboolean)assumeFalseIfCASNeeded;

- (GeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                               withBoolean:(jboolean)symbolic;

- (GeogebraCommonKernelArithmeticExpressionNode *)evaluateToExpressionNodeWithNSString:(NSString *)str;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, derivative__, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, factorParentExp_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, symbolicPolyFactorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, numericPolyFactorList_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, zeroExpr_, GeogebraCommonKernelArithmeticExpressionNode *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction, geoDeriv_, GeogebraCommonKernelGeosGeoFunction *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelArithmeticFunction, MAX_EXPAND_DEGREE, jdouble)

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble x);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble xShift);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunction_translateYWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble vy);

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble n);

__attribute__((unused)) static GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean skipCASfallback);

__attribute__((unused)) static JavaUtilLinkedList *GeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(GeogebraCommonKernelArithmeticFunction *self, jboolean rootFindingSimplification);

__attribute__((unused)) static jboolean GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, id<JavaUtilList> l, jboolean symbolic, jboolean rootFindingSimplification, jboolean assumeFalseIfCASNeeded);

__attribute__((unused)) static GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic);

__attribute__((unused)) static GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(GeogebraCommonKernelArithmeticFunction *self, NSString *str);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean keepFractions, jboolean fast);

@interface GeogebraCommonKernelArithmeticFunction_DerivFunction : NSObject < GeogebraCommonKernelRootsRealRootDerivFunction > {
 @public
  GeogebraCommonKernelArithmeticFunction *fun_, *derivative_;
  IOSDoubleArray *ret_;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)outer$
                    withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                    withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)derivative;

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x;

- (jdouble)evaluateWithDouble:(jdouble)x;

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticFunction_DerivFunction)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction_DerivFunction, fun_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction_DerivFunction, derivative_, GeogebraCommonKernelArithmeticFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticFunction_DerivFunction, ret_, IOSDoubleArray *)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction_DerivFunction *self, GeogebraCommonKernelArithmeticFunction *outer$, GeogebraCommonKernelArithmeticFunction *fun, GeogebraCommonKernelArithmeticFunction *derivative);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction_DerivFunction *new_GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *outer$, GeogebraCommonKernelArithmeticFunction *fun, GeogebraCommonKernelArithmeticFunction *derivative) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticFunction_DerivFunction)

@interface GeogebraCommonKernelArithmeticFunction_$1 : NSObject < GeogebraCommonKernelArithmeticInspecting >

- (jboolean)checkWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelArithmeticFunction_$1)

__attribute__((unused)) static void GeogebraCommonKernelArithmeticFunction_$1_init(GeogebraCommonKernelArithmeticFunction_$1 *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticFunction_$1 *new_GeogebraCommonKernelArithmeticFunction_$1_init() NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelArithmeticFunction_$1)

@implementation GeogebraCommonKernelArithmeticFunction

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)expression {
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
                  withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fVar {
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(self, exp, fVar);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)f
                                withGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)deepCopyWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel1 {
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(self, kernel1) autorelease];
}

- (void)setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)exp
                   withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)var {
  [super setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:exp withGeogebraCommonKernelArithmeticFunctionVariableArray:[IOSObjectArray arrayWithObjects:(id[]){ var } count:1 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]];
  GeogebraCommonKernelArithmeticFunction_set_derivative__(self, nil);
}

- (GeogebraCommonKernelArithmeticFunction *)getFunction {
  return self;
}

- (GeogebraCommonKernelArithmeticFunctionVariable *)getFunctionVariable {
  return IOSObjectArray_Get(nil_chk(fVars_), 0);
}

- (NSString *)getVarStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if (fVars_ == nil) {
    return [((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) printVariableNameWithNSString:@"x"];
  }
  return [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) toStringWithGeogebraCommonKernelStringTemplate:tpl];
}

- (jboolean)initFunction {
  if (fVars_ == nil) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_fVars_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel_) autorelease] } count:1 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]);
  }
  return [super initFunction];
}

- (void)initFunctionVars {
  if (fVars_ == nil) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_fVars_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel_) autorelease] } count:1 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]);
  }
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  if (isBooleanFunction__) {
    return GeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(self, x) ? 1 : 0;
  }
  [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) setWithDouble:x];
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) evaluateDouble];
}

- (jboolean)evaluateBooleanWithDouble:(jdouble)x {
  return GeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(self, x);
}

- (void)translateWithDouble:(jdouble)vx
                 withDouble:(jdouble)vy {
  jboolean isLeaf = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf];
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [expression_ getLeft];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(vx)) {
    if (isLeaf && left == IOSObjectArray_Get(nil_chk(fVars_), 0)) {
      GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx));
    }
    else {
      GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, expression_, vx);
    }
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(vy)) {
    if (isLeaf && left != IOSObjectArray_Get(nil_chk(fVars_), 0)) {
      GeogebraCommonKernelArithmeticMyDouble *c = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) getLeft], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getNumber];
      [c setWithDouble:GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(c)) getDouble] + vy)];
      [expression_ setLeftWithGeogebraCommonKernelArithmeticExpressionValue:c];
    }
    else {
      GeogebraCommonKernelArithmeticFunction_translateYWithDouble_(self, vy);
    }
  }
  if ([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) isLeaf] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([expression_ getLeft])) isExpressionNode]) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast([expression_ getLeft], [GeogebraCommonKernelArithmeticExpressionNode class])));
  }
  else {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelArithmeticExpressionNode_(expression_));
  }
}

- (void)translateXWithGeogebraCommonKernelArithmeticExpressionNode:(GeogebraCommonKernelArithmeticExpressionNode *)en
                                                        withDouble:(jdouble)vx {
  GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, en, vx);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)shiftXnodeWithDouble:(jdouble)xShift {
  return GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, xShift);
}

- (void)translateYWithDouble:(jdouble)vy {
  GeogebraCommonKernelArithmeticFunction_translateYWithDouble_(self, vy);
}

- (void)addNumberWithDouble:(jdouble)n {
  GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, n);
}

- (JavaUtilLinkedList *)getPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification {
  JavaUtilLinkedList *result = [self getSymbolicPolynomialFactorsWithBoolean:rootFindingSimplification withBoolean:NO];
  if (result == nil) {
    result = GeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(self, rootFindingSimplification);
  }
  return result;
}

- (JavaUtilLinkedList *)getSymbolicPolynomialDerivativeFactorsWithInt:(jint)n
                                                          withBoolean:(jboolean)rootFindingSimplification {
  GeogebraCommonKernelArithmeticFunction *deriv = GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, NO);
  if (deriv == nil) return nil;
  return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(deriv)) getSymbolicPolynomialFactorsWithBoolean:rootFindingSimplification withBoolean:NO];
}

- (GeogebraCommonKernelArithmeticPolyFunction *)getNumericPolynomialDerivativeWithInt:(jint)n
                                                                          withBoolean:(jboolean)skipCASfallback {
  return GeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(self, n, skipCASfallback);
}

- (GeogebraCommonKernelArithmeticPolyFunction *)getNumericPolynomialIntegral {
  GeogebraCommonKernelArithmeticPolyFunction *poly = [self expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:expression_ withBoolean:NO withBoolean:YES];
  if (poly != nil) {
    poly = [poly getIntegral];
  }
  return poly;
}

- (JavaUtilLinkedList *)getSymbolicPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification
                                                    withBoolean:(jboolean)assumeFalseIfCASNeeded {
  if (factorParentExp_ != expression_) {
    GeogebraCommonKernelArithmeticFunction_set_factorParentExp_(self, expression_);
    if (symbolicPolyFactorList_ == nil) GeogebraCommonKernelArithmeticFunction_setAndConsume_symbolicPolyFactorList_(self, new_JavaUtilLinkedList_init());
    else [symbolicPolyFactorList_ clear];
    symbolicPolyFactorListDefined_ = GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, expression_, symbolicPolyFactorList_, YES, rootFindingSimplification, assumeFalseIfCASNeeded);
  }
  if (symbolicPolyFactorListDefined_ && [((JavaUtilLinkedList *) nil_chk(symbolicPolyFactorList_)) size] > 0) {
    return symbolicPolyFactorList_;
  }
  return nil;
}

- (JavaUtilLinkedList *)getNumericPolynomialFactorsWithBoolean:(jboolean)rootFindingSimplification {
  return GeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(self, rootFindingSimplification);
}

- (jboolean)addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                 withJavaUtilList:(id<JavaUtilList>)l
                                                                      withBoolean:(jboolean)symbolic
                                                                      withBoolean:(jboolean)rootFindingSimplification
                                                                      withBoolean:(jboolean)assumeFalseIfCASNeeded {
  return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, ev, l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
}

- (GeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                          withBoolean:(jboolean)symbolic
                                                                                                          withBoolean:(jboolean)assumeFalseIfCASNeeded {
  GeogebraCommonKernelArithmeticPolyFunction *polyFunNoCas = GeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ev, symbolic);
  [self initFunction];
  if (polyFunNoCas != nil || assumeFalseIfCASNeeded) return polyFunNoCas;
  GeogebraCommonKernelArithmeticExpressionNode *node;
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
  }
  else {
    node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel_, ev) autorelease];
  }
  NSString *function, *var;
  GeogebraCommonKernelStringTemplate *tpl = GeogebraCommonKernelStringTemplate_get_giacTemplate_();
  @try {
    function = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(node)) getCASstringWithGeogebraCommonKernelStringTemplate:tpl withBoolean:symbolic];
    var = [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(fVars_), 0))) toStringWithGeogebraCommonKernelStringTemplate:tpl];
  }
  @catch (JavaLangNullPointerException *e) {
    return nil;
  }
  @finally {
  }
  IOSObjectArray *strCoeffs = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getPolynomialCoeffsWithNSString:function withNSString:var];
  if (strCoeffs == nil) return nil;
  jint degree = ((IOSObjectArray *) nil_chk(strCoeffs))->size_ - 1;
  if (symbolic) {
    GeogebraCommonKernelArithmeticSymbolicPolyFunction *symbPolyFun = [new_GeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithInt_(degree) autorelease];
    IOSObjectArray *symbCoeffs = [symbPolyFun getSymbolicCoeffs];
    for (jint i = 0; i < strCoeffs->size_; i++) {
      IOSObjectArray_Set(nil_chk(symbCoeffs), degree - i, GeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, IOSObjectArray_Get(strCoeffs, i)));
      if (IOSObjectArray_Get(symbCoeffs, degree - i) == nil) return nil;
      [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(symbCoeffs, degree - i))) simplifyConstantIntegers];
    }
    return symbPolyFun;
  }
  @try {
    GeogebraCommonKernelArithmeticPolyFunction *polyFun = [new_GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(degree) autorelease];
    for (jint i = 0; i < strCoeffs->size_; i++) {
      *IOSDoubleArray_GetRef(nil_chk(polyFun->coeffs_), degree - i) = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(GeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, IOSObjectArray_Get(strCoeffs, i)))) evaluateDouble];
    }
    return polyFun;
  }
  @catch (JavaLangException *e) {
    GeogebraCommonMainApp_debugWithNSString_(@"error in buildPolyFunction:");
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

- (GeogebraCommonKernelArithmeticPolyFunction *)expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)ev
                                                                                                               withBoolean:(jboolean)symbolic {
  return GeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(self, ev, symbolic);
}

- (GeogebraCommonKernelArithmeticExpressionNode *)evaluateToExpressionNodeWithNSString:(NSString *)str {
  return GeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(self, str);
}

- (GeogebraCommonKernelGeosGeoFunction *)getGeoDerivativeWithInt:(jint)n {
  if (geoDeriv_ == nil) GeogebraCommonKernelArithmeticFunction_setAndConsume_geoDeriv_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]));
  GeogebraCommonKernelArithmeticFunction *deriv = GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, NO);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(geoDeriv_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:deriv];
  [geoDeriv_ setDefinedWithBoolean:deriv != nil];
  return geoDeriv_;
}

- (GeogebraCommonKernelArithmeticFunction *)getDerivativeWithInt:(jint)n
                                                     withBoolean:(jboolean)fast {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(self, n, fast);
}

- (GeogebraCommonKernelArithmeticFunction *)getDerivativeNoFractionsWithInt:(jint)n
                                                                withBoolean:(jboolean)fast {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(self, n, fast);
}

- (GeogebraCommonKernelArithmeticFunction *)getDerivativeWithInt:(jint)n
                                                     withBoolean:(jboolean)keepFractions
                                                     withBoolean:(jboolean)fast {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, keepFractions, fast);
}

+ (GeogebraCommonKernelArithmeticFunction *)getDerivativeQuotientWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)funX
                                                                 withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)funY {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeQuotientWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(funX, funY);
}

+ (void)differenceWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)a
                  withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)b
                  withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)c {
  GeogebraCommonKernelArithmeticFunction_differenceWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(a, b, c);
}

+ (void)differenceWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)f
                         withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line
                  withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)c {
  GeogebraCommonKernelArithmeticFunction_differenceWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelArithmeticFunction_(f, line, c);
}

- (id<GeogebraCommonKernelRootsRealRootDerivFunction>)getRealRootDerivFunction {
  GeogebraCommonKernelArithmeticFunction *deriv = GeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(self, 1, YES);
  if (deriv == nil) {
    return nil;
  }
  return [new_GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(self, self, deriv) autorelease];
}

- (jboolean)includesDivisionByVariable {
  if (expression_ == nil) {
    return NO;
  }
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) includesDivisionByWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(fVars_), 0)];
}

- (jboolean)includesNonContinuousIntegral {
  if (expression_ == nil) {
    return NO;
  }
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) includesNonContinuousIntegral];
}

- (GeogebraCommonKernelGeosGeoFunction *)getGeoFunction {
  GeogebraCommonKernelGeosGeoFunction *gf = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
  [gf setFunctionWithGeogebraCommonKernelArithmeticFunction:self];
  return gf;
}

- (GeogebraCommonKernelArithmeticFunction *)getDerivativeNoCASWithInt:(jint)n {
  GeogebraCommonKernelArithmeticExpressionNode *expDeriv = expression_;
  for (jint i = 0; i < n; i++) {
    expDeriv = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fVars_), 0)];
  }
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expDeriv)) simplifyConstantIntegers];
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expDeriv, IOSObjectArray_Get(nil_chk(fVars_), 0)) autorelease];
}

- (GeogebraCommonKernelArithmeticFunction *)getIntegralNoCAS {
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithGeogebraCommonKernelArithmeticFunctionVariable:IOSObjectArray_Get(nil_chk(fVars_), 0)], IOSObjectArray_Get(fVars_, 0)) autorelease];
}

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = [self evaluateWithDouble:x];
  if (isBooleanFunction__) {
    *IOSDoubleArray_GetRef(ret, 1) = JavaLangDouble_NaN;
    return ret;
  }
  if (derivative__ == nil) {
    GeogebraCommonKernelArithmeticFunction_set_derivative__(self, GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, 1, NO, YES));
  }
  *IOSDoubleArray_GetRef(ret, 1) = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(derivative__)) evaluateWithDouble:x];
  return ret;
}

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x {
  if (isBooleanFunction__) {
    return JavaLangDouble_NaN;
  }
  if (derivative__ == nil) {
    GeogebraCommonKernelArithmeticFunction_set_derivative__(self, GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, 1, NO, YES));
  }
  return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(derivative__)) evaluateWithDouble:x];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

- (id<GeogebraCommonKernelArithmeticExpressionValue>)integralWithGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(expression_)) integralWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

- (void)dealloc {
  RELEASE_(derivative__);
  RELEASE_(factorParentExp_);
  RELEASE_(symbolicPolyFactorList_);
  RELEASE_(numericPolyFactorList_);
  RELEASE_(zeroExpr_);
  RELEASE_(geoDeriv_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelArithmeticExpressionNode:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionVariable:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelKernel:", "Function", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelKernel:", "Function", NULL, 0x1, NULL, NULL },
    { "deepCopyWithGeogebraCommonKernelKernel:", "deepCopy", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:withGeogebraCommonKernelArithmeticFunctionVariable:", "setExpression", "V", 0x1, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getFunctionVariable", NULL, "Lgeogebra.common.kernel.arithmetic.FunctionVariable;", 0x1, NULL, NULL },
    { "getVarStringWithGeogebraCommonKernelStringTemplate:", "getVarString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "initFunction", NULL, "Z", 0x1, NULL, NULL },
    { "initFunctionVars", NULL, "V", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateBooleanWithDouble:", "evaluateBoolean", "Z", 0x11, NULL, NULL },
    { "translateWithDouble:withDouble:", "translate", "V", 0x11, NULL, NULL },
    { "translateXWithGeogebraCommonKernelArithmeticExpressionNode:withDouble:", "translateX", "V", 0x12, NULL, NULL },
    { "shiftXnodeWithDouble:", "shiftXnode", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x12, NULL, NULL },
    { "translateYWithDouble:", "translateY", "V", 0x11, NULL, NULL },
    { "addNumberWithDouble:", "addNumber", "V", 0x12, NULL, NULL },
    { "getPolynomialFactorsWithBoolean:", "getPolynomialFactors", "Ljava.util.LinkedList;", 0x11, NULL, NULL },
    { "getSymbolicPolynomialDerivativeFactorsWithInt:withBoolean:", "getSymbolicPolynomialDerivativeFactors", "Ljava.util.LinkedList;", 0x11, NULL, NULL },
    { "getNumericPolynomialDerivativeWithInt:withBoolean:", "getNumericPolynomialDerivative", "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "getNumericPolynomialIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "getSymbolicPolynomialFactorsWithBoolean:withBoolean:", "getSymbolicPolynomialFactors", "Ljava.util.LinkedList;", 0x1, NULL, NULL },
    { "getNumericPolynomialFactorsWithBoolean:", "getNumericPolynomialFactors", "Ljava.util.LinkedList;", 0x2, NULL, NULL },
    { "addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue:withJavaUtilList:withBoolean:withBoolean:withBoolean:", "addPolynomialFactors", "Z", 0x2, NULL, NULL },
    { "expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:withBoolean:", "expandToPolyFunction", "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x1, NULL, NULL },
    { "expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue:withBoolean:", "expandToPolyFunctionNoCas", "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x2, NULL, NULL },
    { "evaluateToExpressionNodeWithNSString:", "evaluateToExpressionNode", "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", 0x2, NULL, NULL },
    { "getGeoDerivativeWithInt:", "getGeoDerivative", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getDerivativeWithInt:withBoolean:", "getDerivative", "Lgeogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getDerivativeNoFractionsWithInt:withBoolean:", "getDerivativeNoFractions", "Lgeogebra.common.kernel.arithmetic.Function;", 0x11, NULL, NULL },
    { "getDerivativeWithInt:withBoolean:withBoolean:", "getDerivative", "Lgeogebra.common.kernel.arithmetic.Function;", 0x10, NULL, NULL },
    { "getDerivativeQuotientWithGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelArithmeticFunction:", "getDerivativeQuotient", "Lgeogebra.common.kernel.arithmetic.Function;", 0x9, NULL, NULL },
    { "differenceWithGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelArithmeticFunction:", "difference", "V", 0x19, NULL, NULL },
    { "differenceWithGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelArithmeticFunction:", "difference", "V", 0x19, NULL, NULL },
    { "getRealRootDerivFunction", NULL, "Lgeogebra.common.kernel.roots.RealRootDerivFunction;", 0x11, NULL, NULL },
    { "includesDivisionByVariable", NULL, "Z", 0x11, NULL, NULL },
    { "includesNonContinuousIntegral", NULL, "Z", 0x11, NULL, NULL },
    { "getGeoFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "getDerivativeNoCASWithInt:", "getDerivativeNoCAS", "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "getIntegralNoCAS", NULL, "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "evaluateDerivFuncWithDouble:", "evaluateDerivFunc", "[D", 0x1, NULL, NULL },
    { "evaluateDerivativeWithDouble:", "evaluateDerivative", "D", 0x1, NULL, NULL },
    { "derivativeWithGeogebraCommonKernelArithmeticFunctionVariable:", "derivative", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
    { "integralWithGeogebraCommonKernelArithmeticFunctionVariable:", "integral", "Lgeogebra.common.kernel.arithmetic.ExpressionValue;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "derivative__", "derivative", 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "MAX_EXPAND_DEGREE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE },
    { "factorParentExp_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "symbolicPolyFactorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/kernel/arithmetic/PolyFunction;>;",  },
    { "numericPolyFactorList_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/kernel/arithmetic/PolyFunction;>;",  },
    { "symbolicPolyFactorListDefined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "zeroExpr_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.ExpressionNode;", NULL, NULL,  },
    { "geoDeriv_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.kernel.arithmetic.Function$DerivFunction;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticFunction = { 2, "Function", "geogebra.common.kernel.arithmetic", NULL, 0x1, 45, methods, 8, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticFunction;
}

@end

void GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelArithmeticExpressionNode *expression) {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  GeogebraCommonKernelArithmeticFunction_setAndConsume_zeroExpr_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]));
}

GeogebraCommonKernelArithmeticFunction *new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_(GeogebraCommonKernelArithmeticExpressionNode *expression) {
  GeogebraCommonKernelArithmeticFunction *self = [GeogebraCommonKernelArithmeticFunction alloc];
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, expression);
  return self;
}

void GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelArithmeticExpressionNode *exp, GeogebraCommonKernelArithmeticFunctionVariable *fVar) {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariableArray_(self, exp, [IOSObjectArray arrayWithObjects:(id[]){ fVar } count:1 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]);
  GeogebraCommonKernelArithmeticFunction_setAndConsume_zeroExpr_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]));
}

GeogebraCommonKernelArithmeticFunction *new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(GeogebraCommonKernelArithmeticExpressionNode *exp, GeogebraCommonKernelArithmeticFunctionVariable *fVar) {
  GeogebraCommonKernelArithmeticFunction *self = [GeogebraCommonKernelArithmeticFunction alloc];
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(self, exp, fVar);
  return self;
}

void GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelKernel_(self, kernel);
  GeogebraCommonKernelArithmeticFunction_setAndConsume_zeroExpr_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]));
  GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_fVars_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelArithmeticFunctionVariable_class_()]);
}

GeogebraCommonKernelArithmeticFunction *new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunction *self = [GeogebraCommonKernelArithmeticFunction alloc];
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

void GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelArithmeticFunction *f, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunctionNVar_initWithGeogebraCommonKernelArithmeticExpressionNode_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->expression_)) getCopyWithGeogebraCommonKernelKernel:kernel]);
  GeogebraCommonKernelArithmeticFunction_setAndConsume_zeroExpr_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]));
  GeogebraCommonKernelArithmeticFunctionNVar_set_fVars_(self, f->fVars_);
  self->isBooleanFunction__ = f->isBooleanFunction__;
  self->isConstantFunction__ = f->isConstantFunction__;
  GeogebraCommonKernelArithmeticFunctionNVar_set_kernel_(self, kernel);
}

GeogebraCommonKernelArithmeticFunction *new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(GeogebraCommonKernelArithmeticFunction *f, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelArithmeticFunction *self = [GeogebraCommonKernelArithmeticFunction alloc];
  GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelKernel_(self, f, kernel);
  return self;
}

jboolean GeogebraCommonKernelArithmeticFunction_evaluateBooleanWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble x) {
  [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) setWithDouble:x];
  return [((id<GeogebraCommonKernelArithmeticBooleanValue>) nil_chk(((id<GeogebraCommonKernelArithmeticBooleanValue>) check_protocol_cast([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) evaluateWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], @protocol(GeogebraCommonKernelArithmeticBooleanValue))))) getBoolean];
}

void GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(GeogebraCommonKernelArithmeticFunction *self, GeogebraCommonKernelArithmeticExpressionNode *en, jdouble vx) {
  id<GeogebraCommonKernelArithmeticExpressionValue> left = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) getLeft];
  id<GeogebraCommonKernelArithmeticExpressionValue> right = [en getRight];
  if (left == IOSObjectArray_Get(nil_chk(self->fVars_), 0)) {
    @try {
      GeogebraCommonKernelArithmeticMyDouble *num = (GeogebraCommonKernelArithmeticMyDouble *) check_class_cast(right, [GeogebraCommonKernelArithmeticMyDouble class]);
      jdouble temp;
      switch ([[en getOperation] ordinal]) {
        case GeogebraCommonPluginOperation_PLUS:
        temp = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vx);
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:en withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, 0)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_MINUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        case GeogebraCommonPluginOperation_MINUS:
        temp = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vx);
        if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
          GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:en withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(self->fVars_, 0)])) wrap]);
        }
        else if (temp < 0) {
          [en setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_PLUS()];
          [num setWithDouble:-temp];
        }
        else {
          [num setWithDouble:temp];
        }
        return;
        default:
        [en setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
      }
    }
    @catch (JavaLangException *e) {
      [en setLeftWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
    }
  }
  else if ([left isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(left, [GeogebraCommonKernelArithmeticExpressionNode class]), vx);
  }
  else if ([left isKindOfClass:[GeogebraCommonKernelArithmeticMyNumberPair class]]) {
    GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyNumberPair class])))) getX])) wrap], vx);
    GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyNumberPair *) nil_chk(((GeogebraCommonKernelArithmeticMyNumberPair *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyNumberPair class])))) getY])) wrap], vx);
  }
  else if ([left isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
    for (jint i = 0; i < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(left, [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])) wrap], vx);
    }
  }
  if (right == IOSObjectArray_Get(self->fVars_, 0)) {
    [en setRightWithGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(self, vx)];
  }
  else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(right, [GeogebraCommonKernelArithmeticExpressionNode class]), vx);
  }
  else if ([right isKindOfClass:[GeogebraCommonKernelArithmeticMyList class]]) {
    for (jint i = 0; i < [((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [GeogebraCommonKernelArithmeticMyList class])))) size]; i++) {
      GeogebraCommonKernelArithmeticFunction_translateXWithGeogebraCommonKernelArithmeticExpressionNode_withDouble_(self, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticMyList *) nil_chk(((GeogebraCommonKernelArithmeticMyList *) check_class_cast(right, [GeogebraCommonKernelArithmeticMyList class])))) getListElementWithInt:i])) wrap], vx);
    }
  }
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunction_shiftXnodeWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble xShift) {
  jdouble vx = xShift;
  vx = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(vx);
  GeogebraCommonKernelArithmeticExpressionNode *node;
  if (vx > 0) {
    node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), 0), GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, vx) autorelease]) autorelease];
  }
  else {
    node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(self->fVars_), 0), GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -vx) autorelease]) autorelease];
  }
  return node;
}

void GeogebraCommonKernelArithmeticFunction_translateYWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble vy) {
  if ([[((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) getRight] isKindOfClass:[GeogebraCommonKernelArithmeticMyDouble class]]) {
    GeogebraCommonKernelArithmeticMyDouble *num = (GeogebraCommonKernelArithmeticMyDouble *) check_class_cast([self->expression_ getRight], [GeogebraCommonKernelArithmeticMyDouble class]);
    if (num == IOSObjectArray_Get(nil_chk(self->fVars_), 0)) {
      GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_(vy));
      return;
    }
    jdouble temp;
    switch ([[self->expression_ getOperation] ordinal]) {
      case GeogebraCommonPluginOperation_PLUS:
      temp = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] + vy);
      if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
        GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [self->expression_ getLeftTree]);
      }
      else if (temp < 0) {
        [self->expression_ setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_MINUS()];
        [num setWithDouble:-temp];
      }
      else {
        [num setWithDouble:temp];
      }
      break;
      case GeogebraCommonPluginOperation_MINUS:
      temp = GeogebraCommonKernelKernel_checkDecimalFractionWithDouble_([((GeogebraCommonKernelArithmeticMyDouble *) nil_chk(num)) getDouble] - vy);
      if (GeogebraCommonKernelKernel_isZeroWithDouble_(temp)) {
        GeogebraCommonKernelArithmeticFunctionNVar_set_expression_(self, [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) getLeftTree]);
      }
      else if (temp < 0) {
        [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(self->expression_)) setOperationWithGeogebraCommonPluginOperationEnum:GeogebraCommonPluginOperationEnum_get_PLUS()];
        [num setWithDouble:-temp];
      }
      else {
        [num setWithDouble:temp];
      }
      break;
      default:
      GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, vy);
    }
  }
  else {
    GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(self, vy);
  }
}

void GeogebraCommonKernelArithmeticFunction_addNumberWithDouble_(GeogebraCommonKernelArithmeticFunction *self, jdouble n) {
  if (n > 0) {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->expression_, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, n) autorelease]));
  }
  else {
    GeogebraCommonKernelArithmeticFunctionNVar_setAndConsume_expression_(self, new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, self->expression_, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, -n) autorelease]));
  }
}

GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean skipCASfallback) {
  GeogebraCommonKernelArithmeticPolyFunction *poly = [self expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:self->expression_ withBoolean:NO withBoolean:skipCASfallback];
  if (poly != nil) {
    for (jint i = 0; i < n; i++) {
      poly = [poly getDerivative];
    }
  }
  return poly;
}

JavaUtilLinkedList *GeogebraCommonKernelArithmeticFunction_getNumericPolynomialFactorsWithBoolean_(GeogebraCommonKernelArithmeticFunction *self, jboolean rootFindingSimplification) {
  if (self->numericPolyFactorList_ == nil) GeogebraCommonKernelArithmeticFunction_setAndConsume_numericPolyFactorList_(self, new_JavaUtilLinkedList_init());
  else [self->numericPolyFactorList_ clear];
  jboolean success = GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, self->expression_, self->numericPolyFactorList_, NO, rootFindingSimplification, NO);
  if (success && [((JavaUtilLinkedList *) nil_chk(self->numericPolyFactorList_)) size] > 0) {
    return self->numericPolyFactorList_;
  }
  return nil;
}

jboolean GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, id<JavaUtilList> l, jboolean symbolic, jboolean rootFindingSimplification, jboolean assumeFalseIfCASNeeded) {
  if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) isExpressionNode]) {
    GeogebraCommonKernelArithmeticExpressionNode *node = (GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(ev, [GeogebraCommonKernelArithmeticExpressionNode class]);
    switch ([[node getOperation] ordinal]) {
      case GeogebraCommonPluginOperation_MULTIPLY:
      return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded) && GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getRight], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
      case GeogebraCommonPluginOperation_POWER:
      case GeogebraCommonPluginOperation_DIVIDE:
      if (!rootFindingSimplification) break;
      if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) containsWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(self->fVars_), 0)]) return NO;
      if (!symbolic || [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) isConstant]) {
        jdouble rightVal;
        @try {
          rightVal = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([node getRight])) evaluateDouble];
        }
        @catch (JavaLangException *e) {
          [((JavaLangException *) nil_chk(e)) printStackTrace];
          return NO;
        }
        if ([((GeogebraCommonPluginOperationEnum *) nil_chk([node getOperation])) isEqual:GeogebraCommonPluginOperationEnum_get_POWER()]) {
          if (GeogebraCommonKernelKernel_isZeroWithDouble_(rightVal)) return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 1) autorelease], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
          else if (rightVal > 0) return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
        }
        else {
          if (GeogebraCommonKernelKernel_isZeroWithDouble_(rightVal)) {
            return NO;
          }
          return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
        }
      }
      break;
      case GeogebraCommonPluginOperation_ABS:
      case GeogebraCommonPluginOperation_SGN:
      case GeogebraCommonPluginOperation_SQRT:
      if (!rootFindingSimplification) break;
      return GeogebraCommonKernelArithmeticFunction_addPolynomialFactorsWithGeogebraCommonKernelArithmeticExpressionValue_withJavaUtilList_withBoolean_withBoolean_withBoolean_(self, [node getLeft], l, symbolic, rootFindingSimplification, assumeFalseIfCASNeeded);
    }
  }
  if (![ev isConstant]) {
    GeogebraCommonKernelArithmeticPolyFunction *factor = [self expandToPolyFunctionWithGeogebraCommonKernelArithmeticExpressionValue:ev withBoolean:symbolic withBoolean:assumeFalseIfCASNeeded];
    if (factor == nil) return NO;
    [((id<JavaUtilList>) nil_chk(l)) addWithId:factor];
  }
  return YES;
}

GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticFunction_expandToPolyFunctionNoCasWithGeogebraCommonKernelArithmeticExpressionValue_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, id<GeogebraCommonKernelArithmeticExpressionValue> ev, jboolean symbolic) {
  GeogebraCommonKernelArithmeticPolyFunction *polyFun = nil;
  GeogebraCommonKernelArithmeticFunctionVariable *xVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_withNSString_(self->kernel_, @"x") autorelease];
  IOSObjectArray *coeff = nil;
  jint terms = -1;
  id<GeogebraCommonKernelArithmeticExpressionValue> evCopy = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(ev)) deepCopyWithGeogebraCommonKernelKernel:self->kernel_];
  GeogebraCommonKernelArithmeticExpressionNode *replaced;
  GeogebraCommonKernelArithmeticTraversing_VariableReplacer *varep = GeogebraCommonKernelArithmeticTraversing_VariableReplacer_getReplacerWithNSString_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelKernel_([((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()], xVar, self->kernel_);
  if ([evCopy isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
    replaced = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(evCopy, [GeogebraCommonKernelArithmeticExpressionNode class])))) traverseWithGeogebraCommonKernelArithmeticTraversing:varep])) wrap];
  }
  else {
    replaced = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([([new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, evCopy) autorelease]) traverseWithGeogebraCommonKernelArithmeticTraversing:varep])) wrap];
  }
  GeogebraCommonKernelArithmeticEquation *equ = [new_GeogebraCommonKernelArithmeticEquation_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, replaced, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, 0) autorelease]) autorelease];
  @try {
    coeff = [((GeogebraCommonKernelArithmeticPolynomial *) nil_chk(GeogebraCommonKernelArithmeticPolynomial_fromNodeWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticEquation_(replaced, equ))) getCoeff];
    terms = ((IOSObjectArray *) nil_chk(coeff))->size_;
  }
  @catch (JavaLangThrowable *t) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("@$", ev, @" couldn't be transformed to polynomial"));
  }
  if (terms == -1 || ![equ isPolynomial]) return nil;
  if (!symbolic) {
    IOSDoubleArray *coeffValues = [IOSDoubleArray arrayWithLength:terms];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff))->size_; i++) {
      if ([IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0) isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]]) {
        *IOSDoubleArray_GetRef(coeffValues, i) = [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0))) evaluateDouble];
      }
      else {
        *IOSDoubleArray_GetRef(coeffValues, i) = [GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0)] ? [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0), @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] : 0;
      }
    }
    polyFun = [new_GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(coeffValues) autorelease];
  }
  else {
    IOSObjectArray *coeffExpr = [IOSObjectArray arrayWithLength:terms type:GeogebraCommonKernelArithmeticExpressionNode_class_()];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(coeff))->size_; i++) {
      IOSObjectArray_Set(coeffExpr, i, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0) == nil ? self->zeroExpr_ : [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), 0)) autorelease]);
    }
    polyFun = [new_GeogebraCommonKernelArithmeticSymbolicPolyFunction_initWithGeogebraCommonKernelArithmeticExpressionNodeArray_(coeffExpr) autorelease];
  }
  return polyFun;
}

GeogebraCommonKernelArithmeticExpressionNode *GeogebraCommonKernelArithmeticFunction_evaluateToExpressionNodeWithNSString_(GeogebraCommonKernelArithmeticFunction *self, NSString *str) {
  @try {
    GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelParserParser *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getParser])) parseExpressionWithNSString:str];
    [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) resolveVariables];
    return en;
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    return nil;
  }
  @catch (JavaLangError *e) {
    GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"error in evaluateToExpressionNode: ", str));
    [((JavaLangError *) nil_chk(e)) printStackTrace];
    return nil;
  }
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast) {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, YES, fast);
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeNoFractionsWithInt_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean fast) {
  return GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(self, n, NO, fast);
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeWithInt_withBoolean_withBoolean_(GeogebraCommonKernelArithmeticFunction *self, jint n, jboolean keepFractions, jboolean fast) {
  GeogebraCommonKernelArithmeticPolyFunction *polyDeriv = GeogebraCommonKernelArithmeticFunction_getNumericPolynomialDerivativeWithInt_withBoolean_(self, n, YES);
  if (polyDeriv != nil) {
    jboolean factor = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([self getExpression])) inspectWithGeogebraCommonKernelArithmeticInspecting:[new_GeogebraCommonKernelArithmeticFunction_$1_init() autorelease]];
    if (factor) {
      return [self getDerivativeNoCASWithInt:n];
    }
    return [polyDeriv getFunctionWithGeogebraCommonKernelKernel:self->kernel_ withGeogebraCommonKernelArithmeticFunctionVariable:[self getFunctionVariable]];
  }
  if (fast || ![((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) useCASforDerivatives]) {
    return [self getDerivativeNoCASWithInt:n];
  }
  NSString *varStr = [((GeogebraCommonKernelArithmeticFunctionVariable *) nil_chk(IOSObjectArray_Get(nil_chk(self->fVars_), 0))) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_prefixedDefault_()];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"Derivative["];
  if (!keepFractions) [sb appendWithNSString:@"Numeric["];
  [sb appendWithNSString:@"%"];
  if (!keepFractions) [sb appendWithNSString:@"]"];
  [sb appendWithNSString:@","];
  [sb appendWithNSString:varStr];
  [sb appendWithNSString:@","];
  [sb appendWithInt:n];
  [sb appendWithNSString:@"]"];
  return (GeogebraCommonKernelArithmeticFunction *) check_class_cast([self evalCasCommandWithNSString:[sb description] withBoolean:YES withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil], [GeogebraCommonKernelArithmeticFunction class]);
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelArithmeticFunction_getDerivativeQuotientWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *funX, GeogebraCommonKernelArithmeticFunction *funY) {
  GeogebraCommonKernelArithmeticFunction_initialize();
  if (((GeogebraCommonKernelArithmeticFunction *) nil_chk(funX))->fVars_ == nil) return nil;
  GeogebraCommonKernelArithmeticFunction *xDashed = [funX getDerivativeNoCASWithInt:1];
  GeogebraCommonKernelArithmeticFunction *yDashed = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(funY)) getDerivativeNoCASWithInt:1];
  GeogebraCommonKernelArithmeticFunctionVariable *fv = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(xDashed)) getFunctionVariable];
  id<GeogebraCommonKernelArithmeticExpressionValue> yDashedEv = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk(yDashed)) getExpression])) replaceWithGeogebraCommonKernelArithmeticExpressionValue:[yDashed getFunctionVariable] withGeogebraCommonKernelArithmeticExpressionValue:fv];
  GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_([funX getKernel], yDashedEv, GeogebraCommonPluginOperationEnum_get_DIVIDE(), [xDashed getExpression]) autorelease];
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
}

void GeogebraCommonKernelArithmeticFunction_differenceWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *a, GeogebraCommonKernelArithmeticFunction *b, GeogebraCommonKernelArithmeticFunction *c) {
  GeogebraCommonKernelArithmeticFunction_initialize();
  GeogebraCommonKernelArithmeticExpressionNode *left = ((GeogebraCommonKernelArithmeticFunction *) nil_chk(a))->expression_;
  GeogebraCommonKernelArithmeticExpressionNode *right = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticFunction *) nil_chk(b))->expression_)) getCopyWithGeogebraCommonKernelKernel:a->kernel_];
  [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(right)) replaceWithGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(nil_chk(b->fVars_), 0) withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(a->fVars_, 0)];
  GeogebraCommonKernelArithmeticExpressionNode *diffExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(a->kernel_, left, GeogebraCommonPluginOperationEnum_get_MINUS(), right) autorelease];
  [((GeogebraCommonKernelArithmeticFunction *) nil_chk(c)) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:diffExp];
  IOSObjectArray_Set(c->fVars_, 0, IOSObjectArray_Get(a->fVars_, 0));
}

void GeogebraCommonKernelArithmeticFunction_differenceWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *f, GeogebraCommonKernelGeosGeoLine *line, GeogebraCommonKernelArithmeticFunction *c) {
  GeogebraCommonKernelArithmeticFunction_initialize();
  jdouble coeffX = [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getX] / [line getY];
  jdouble coeffConst = [line getZ] / [line getY];
  GeogebraCommonKernelArithmeticExpressionNode *temp;
  if (coeffX > 0) {
    temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, f->expression_, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(f->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(f->kernel_, coeffX) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(nil_chk(f->fVars_), 0)) autorelease]) autorelease];
  }
  else {
    temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, f->expression_, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(f->kernel_, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(f->kernel_, -coeffX) autorelease], GeogebraCommonPluginOperationEnum_get_MULTIPLY(), IOSObjectArray_Get(nil_chk(f->fVars_), 0)) autorelease]) autorelease];
  }
  if (coeffConst > 0) {
    temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, temp, GeogebraCommonPluginOperationEnum_get_PLUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(f->kernel_, coeffConst) autorelease]) autorelease];
  }
  else {
    temp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->kernel_, temp, GeogebraCommonPluginOperationEnum_get_MINUS(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(f->kernel_, -coeffConst) autorelease]) autorelease];
  }
  [((GeogebraCommonKernelArithmeticFunction *) nil_chk(c)) setExpressionWithGeogebraCommonKernelArithmeticExpressionNode:temp];
  IOSObjectArray_Set(nil_chk(c->fVars_), 0, IOSObjectArray_Get(((GeogebraCommonKernelArithmeticFunction *) nil_chk(f))->fVars_, 0));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticFunction)

@implementation GeogebraCommonKernelArithmeticFunction_DerivFunction

- (instancetype)initWithGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)outer$
                    withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)fun
                    withGeogebraCommonKernelArithmeticFunction:(GeogebraCommonKernelArithmeticFunction *)derivative {
  GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(self, outer$, fun, derivative);
  return self;
}

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x {
  *IOSDoubleArray_GetRef(nil_chk(ret_), 0) = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:x];
  *IOSDoubleArray_GetRef(ret_, 1) = [((GeogebraCommonKernelArithmeticFunction *) nil_chk(derivative_)) evaluateWithDouble:x];
  return ret_;
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun_)) evaluateWithDouble:x];
}

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x {
  return [((GeogebraCommonKernelArithmeticFunction *) nil_chk(derivative_)) evaluateWithDouble:x];
}

- (void)dealloc {
  RELEASE_(fun_);
  RELEASE_(derivative_);
  RELEASE_(ret_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelArithmeticFunction:withGeogebraCommonKernelArithmeticFunction:", "DerivFunction", NULL, 0x0, NULL, NULL },
    { "evaluateDerivFuncWithDouble:", "evaluateDerivFunc", "[D", 0x1, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x1, NULL, NULL },
    { "evaluateDerivativeWithDouble:", "evaluateDerivative", "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "fun_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "derivative_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.Function;", NULL, NULL,  },
    { "ret_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticFunction_DerivFunction = { 2, "DerivFunction", "geogebra.common.kernel.arithmetic", "Function", 0x2, 4, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticFunction_DerivFunction;
}

@end

void GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction_DerivFunction *self, GeogebraCommonKernelArithmeticFunction *outer$, GeogebraCommonKernelArithmeticFunction *fun, GeogebraCommonKernelArithmeticFunction *derivative) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticFunction_DerivFunction_setAndConsume_ret_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelArithmeticFunction_DerivFunction_set_fun_(self, fun);
  GeogebraCommonKernelArithmeticFunction_DerivFunction_set_derivative_(self, derivative);
}

GeogebraCommonKernelArithmeticFunction_DerivFunction *new_GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(GeogebraCommonKernelArithmeticFunction *outer$, GeogebraCommonKernelArithmeticFunction *fun, GeogebraCommonKernelArithmeticFunction *derivative) {
  GeogebraCommonKernelArithmeticFunction_DerivFunction *self = [GeogebraCommonKernelArithmeticFunction_DerivFunction alloc];
  GeogebraCommonKernelArithmeticFunction_DerivFunction_initWithGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(self, outer$, fun, derivative);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticFunction_DerivFunction)

@implementation GeogebraCommonKernelArithmeticFunction_$1

- (jboolean)checkWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)v {
  if ([v isKindOfClass:[GeogebraCommonKernelArithmeticExpressionNode class]] && [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])))) getOperation] == GeogebraCommonPluginOperationEnum_get_POWER()) {
    if ([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])))) getLeft])) unwrap])) isExpressionNode] && [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(((GeogebraCommonKernelArithmeticExpressionNode *) check_class_cast(v, [GeogebraCommonKernelArithmeticExpressionNode class])))) getRight])) evaluateDouble] > GeogebraCommonKernelArithmeticFunction_MAX_EXPAND_DEGREE) {
      return YES;
    }
  }
  return NO;
}

- (instancetype)init {
  GeogebraCommonKernelArithmeticFunction_$1_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "checkWithGeogebraCommonKernelArithmeticExpressionValue:", "check", "Z", 0x1, NULL, NULL },
    { "init", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelArithmeticFunction", "getDerivativeWithInt:withBoolean:withBoolean:" };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticFunction_$1 = { 2, "", "geogebra.common.kernel.arithmetic", "Function", 0x8008, 2, methods, 0, NULL, 0, NULL, 0, NULL, &enclosing_method, NULL };
  return &_GeogebraCommonKernelArithmeticFunction_$1;
}

@end

void GeogebraCommonKernelArithmeticFunction_$1_init(GeogebraCommonKernelArithmeticFunction_$1 *self) {
  NSObject_init(self);
}

GeogebraCommonKernelArithmeticFunction_$1 *new_GeogebraCommonKernelArithmeticFunction_$1_init() {
  GeogebraCommonKernelArithmeticFunction_$1 *self = [GeogebraCommonKernelArithmeticFunction_$1 alloc];
  GeogebraCommonKernelArithmeticFunction_$1_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticFunction_$1)
