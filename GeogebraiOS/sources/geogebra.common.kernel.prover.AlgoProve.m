//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/AlgoProve.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/factories/UtilFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/prover/AlgoProve.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/ProverSettings.h"
#include "geogebra/common/util/Prover.h"
#include "java/util/Date.h"

@interface GeogebraCommonKernelProverAlgoProve () {
 @public
  GeogebraCommonKernelGeosGeoElement *root_;
  GeogebraCommonKernelGeosGeoBoolean *bool__;
  GeogebraCommonUtilProver_ProofResultEnum *result_;
  jint processing_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProve, root_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProve, bool__, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProve, result_, GeogebraCommonUtilProver_ProofResultEnum *)

__attribute__((unused)) static void GeogebraCommonKernelProverAlgoProve_initialCompute(GeogebraCommonKernelProverAlgoProve *self);

@implementation GeogebraCommonKernelProverAlgoProve

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)root {
  GeogebraCommonKernelProverAlgoProve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Prove();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, root_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:bool__];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoBoolean *)getGeoBoolean {
  return bool__;
}

- (void)initialCompute {
  GeogebraCommonKernelProverAlgoProve_initialCompute(self);
}

- (NSString *)getCommandNameWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return @"Prove";
}

- (void)compute {
  if (processing_ == 1) {
    GeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list undefined (1->2)");
    [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setUndefined];
    processing_ = 2;
    return;
  }
  if (processing_ == 2) {
    GeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list should be created (2->3)");
    processing_ = 3;
    GeogebraCommonKernelProverAlgoProve_initialCompute(self);
  }
  if (result_ != nil) {
    if (result_ == GeogebraCommonUtilProver_ProofResultEnum_get_UNKNOWN()) {
      [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setUndefined];
      return;
    }
    [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(bool__)) setDefined];
    if (result_ == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE()) {
      [bool__ setValueWithBoolean:YES];
    }
    if (result_ == GeogebraCommonUtilProver_ProofResultEnum_get_FALSE()) {
      [bool__ setValueWithBoolean:NO];
    }
  }
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(bool__);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoProve", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoBoolean", NULL, "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "initialCompute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandNameWithGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "bool__", "bool", 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.util.Prover$ProofResult;", NULL, NULL,  },
    { "processing_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverAlgoProve = { 2, "AlgoProve", "geogebra.common.kernel.prover", NULL, 0x1, 7, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelProverAlgoProve;
}

@end

void GeogebraCommonKernelProverAlgoProve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelProverAlgoProve *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->processing_ = 0;
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelProverAlgoProve_set_root_(self, root);
  GeogebraCommonKernelProverAlgoProve_setAndConsume_bool__(self, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelProverAlgoProve_initialCompute(self);
  [self compute];
  [self->bool__ setLabelWithNSString:label];
}

GeogebraCommonKernelProverAlgoProve *new_GeogebraCommonKernelProverAlgoProve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root) {
  GeogebraCommonKernelProverAlgoProve *self = [GeogebraCommonKernelProverAlgoProve alloc];
  GeogebraCommonKernelProverAlgoProve_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

void GeogebraCommonKernelProverAlgoProve_initialCompute(GeogebraCommonKernelProverAlgoProve *self) {
  GeogebraCommonUtilProver *p = [((GeogebraCommonFactoriesUtilFactory *) nil_chk(GeogebraCommonFactoriesUtilFactory_get_prototype_())) newProver];
  if ([@"OpenGeoProver" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) {
    if ([@"Wu" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverMethod_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
    else if ([@"Area" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverMethod_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()];
  }
  else if ([@"Botana" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  else if ([@"Recio" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()];
  else if ([@"PureSymbolic" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_PURE_SYMBOLIC_PROVER()];
  else if ([@"Auto" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_AUTO()];
  [((GeogebraCommonUtilProver *) nil_chk(p)) setTimeoutWithInt:GeogebraCommonMainProverSettings_get_proverTimeout_()];
  [p setConstructionWithGeogebraCommonKernelConstruction:self->cons_];
  [p setStatementWithGeogebraCommonKernelGeosGeoElement:self->root_];
  [p setReturnExtraNDGsWithBoolean:NO];
  JavaUtilDate *date = [new_JavaUtilDate_init() autorelease];
  jlong startTime = [date getTime];
  [p compute];
  date = [new_JavaUtilDate_init() autorelease];
  jlong elapsedTime = [date getTime] - startTime;
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J$", @"Benchmarking: ", elapsedTime, @" ms"));
  GeogebraCommonKernelProverAlgoProve_set_result_(self, [p getProofResult]);
  if ([p getProofResult] == GeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING()) {
    self->processing_ = 1;
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Statement is ", self->result_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverAlgoProve)
