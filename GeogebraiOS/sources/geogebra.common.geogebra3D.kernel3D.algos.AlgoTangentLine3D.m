//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentLine3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineIncludedConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoTangentLineND.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D () {
 @public
  GeogebraCommonKernelMatrixCoords *direction_, *direction3D_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D, direction_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D, direction3D_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

- (void)initDiameterAndDirection {
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_diameter_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_algoIntersect_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, diameter_, c_));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  GeogebraCommonKernelAlgosAlgoTangentLineND_set_tangentPoints_(self, [algoIntersect_ getIntersectionPoints]);
}

- (void)setTangents {
  GeogebraCommonKernelAlgosAlgoTangentLineND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(tangentPoints_), 0)];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 1)];
}

- (void)initForNearToRelationship {
  GeogebraCommonKernelMatrixCoords *firstTangentPoint = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints_), 0))) getInhomCoordsInD3];
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) isOnFullLineWithGeogebraCommonKernelMatrixCoords:firstTangentPoint withDouble:GeogebraCommonKernelKernel_MIN_PRECISION]) {
    [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(algoIntersect_)) initForNearToRelationship];
    [algoIntersect_ setIntersectionPointWithInt:0 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 1)];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(IOSObjectArray_Get(tangentPoints_, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setCoordsWithGeogebraCommonKernelMatrixCoords:firstTangentPoint];
    [algoIntersect_ setIntersectionPointWithInt:1 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 1)];
  }
}

- (jboolean)checkUndefined {
  if ([super checkUndefined]) {
    return YES;
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_set_direction3D_(self, [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getDirectionInD3]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_set_direction_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:direction3D_]), 1));
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) getZ])) {
    return YES;
  }
  return NO;
}

- (void)updateDiameterLine {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) diameterLineWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) getX] withDouble:[direction_ getY] withGeogebraCommonKernelGeosGeoLine:diameter_];
}

- (void)updateTangentWithInt:(jint)index {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), index), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints_), i_))) getInhomCoordsInD3] withGeogebraCommonKernelMatrixCoords:direction3D_];
}

- (void)dealloc {
  RELEASE_(direction_);
  RELEASE_(direction3D_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentLine3D", NULL, 0x1, NULL, NULL },
    { "initDiameterAndDirection", NULL, "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "updateDiameterLine", NULL, "V", 0x4, NULL, NULL },
    { "updateTangentWithInt:", "updateTangent", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction3D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D = { 2, "AlgoTangentLine3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 7, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentLineND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, g, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentLine3D)
