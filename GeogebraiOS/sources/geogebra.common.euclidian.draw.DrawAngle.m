//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/draw/DrawAngle.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GAffineTransform.h"
#include "geogebra/common/awt/GArc2D.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GEllipse2DDouble.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGeneralPath.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GLine2D.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoAngle.h"
#include "geogebra/common/kernel/algos/AlgoAnglePoints.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawDrawAngle () {
 @public
  GeogebraCommonKernelGeosGeoAngle *angle_;
  jboolean isVisible_, labelVisible_, show90degrees_;
  GeogebraCommonKernelAlgosAlgoAngle *algo_;
  id<GeogebraCommonAwtGArc2D> drawArc_;
  id<GeogebraCommonAwtGGeneralPath> polygon_;
  id<GeogebraCommonAwtGEllipse2DDouble> dot90degree_;
  id<GeogebraCommonAwtGShape> shape_DrawAngle_;
  IOSDoubleArray *m_;
  IOSDoubleArray *coords_;
  IOSDoubleArray *firstVec_;
  jboolean drawDot_;
  IOSObjectArray *previewTempPoints_;
  id<GeogebraCommonAwtGShape> shapeArc1_, shapeArc2_;
  id<GeogebraCommonAwtGArc2D> decoArc_;
  IOSObjectArray *tick_;
  IOSDoubleArray *angleTick_;
  id<GeogebraCommonAwtGGeneralPath> square_;
  JavaUtilArrayList *prevPoints_;
  jdouble maxRadius_;
}

- (void)init__ OBJC_METHOD_FAMILY_NONE;

- (void)setNotVisible;

- (void)updateTickWithDouble:(jdouble)angle1
                     withInt:(jint)radius
                     withInt:(jint)id_;

- (void)initPreview OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, angle_, GeogebraCommonKernelGeosGeoAngle *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, algo_, GeogebraCommonKernelAlgosAlgoAngle *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, drawArc_, id<GeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, polygon_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, dot90degree_, id<GeogebraCommonAwtGEllipse2DDouble>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, shape_DrawAngle_, id<GeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, m_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, coords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, firstVec_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, previewTempPoints_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, shapeArc1_, id<GeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, shapeArc2_, id<GeogebraCommonAwtGShape>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, decoArc_, id<GeogebraCommonAwtGArc2D>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, tick_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, angleTick_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, square_, id<GeogebraCommonAwtGGeneralPath>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawDrawAngle, prevPoints_, JavaUtilArrayList *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_init__(GeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(GeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_update(GeogebraCommonEuclidianDrawDrawAngle *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_drawWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawAngle *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(GeogebraCommonEuclidianDrawDrawAngle *self, jdouble angle1, jint radius, jint id_);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawDrawAngle_initPreview(GeogebraCommonEuclidianDrawDrawAngle *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonEuclidianDrawDrawAngle)

jdouble GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;

@implementation GeogebraCommonEuclidianDrawDrawAngle

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                        withGeogebraCommonKernelGeosGeoAngle:(GeogebraCommonKernelGeosGeoAngle *)angle {
  GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view
                                       withJavaUtilArrayList:(JavaUtilArrayList *)points {
  GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

- (void)init__ {
  GeogebraCommonEuclidianDrawDrawAngle_init__(self);
}

- (jboolean)inViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)pt {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInViewWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p {
  return [self getCoordsInViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p)) getInhomCoordsInD3]];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsInViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  return p;
}

- (jdouble)getAngleStartWithDouble:(jdouble)start
                        withDouble:(jdouble)extent {
  return start;
}

- (void)setNotVisible {
  GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
}

- (void)update {
  GeogebraCommonEuclidianDrawDrawAngle_update(self);
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawDrawAngle_drawWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)updateTickWithDouble:(jdouble)angle1
                     withInt:(jint)radius
                     withInt:(jint)id_ {
  GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, angle1, radius, id_);
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  return shape_DrawAngle_ != nil && [shape_DrawAngle_ containsWithInt:x withInt:y];
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return shape_DrawAngle_ != nil && [((id<GeogebraCommonAwtGRectangle>) nil_chk(rect)) containsWithGeogebraCommonAwtGRectangle2D:[shape_DrawAngle_ getBounds]];
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  return shape_DrawAngle_ != nil && [shape_DrawAngle_ intersectsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  return geo_;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonEuclidianDrawable_set_geo_(self, geo);
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isDefined] || shape_DrawAngle_ == nil || ![geo_ isEuclidianVisible]) return nil;
  return [((id<GeogebraCommonAwtGShape>) nil_chk(shape_DrawAngle_)) getBounds];
}

- (void)initPreview {
  GeogebraCommonEuclidianDrawDrawAngle_initPreview(self);
}

- (void)updatePreview {
  if (geo_ == nil || [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] != 2) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(prevPoints_)) size]; i++) {
    GeogebraCommonKernelMatrixCoords *p = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([prevPoints_ getWithInt:i])) getInhomCoordsInD3]];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), i))) setCoordsWithGeogebraCommonKernelMatrixCoords:p withBoolean:YES];
  }
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(previewTempPoints_), 0))) updateCascade];
}

- (void)updateMousePosWithDouble:(jdouble)xRW
                      withDouble:(jdouble)yRW {
  if (isVisible_) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, ((IOSObjectArray *) nil_chk(previewTempPoints_))->size_ - 1))) setCoordsWithDouble:xRW withDouble:yRW withDouble:1.0];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(previewTempPoints_, previewTempPoints_->size_ - 1))) updateCascade];
    GeogebraCommonEuclidianDrawDrawAngle_update(self);
  }
}

- (void)drawPreviewWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  isVisible_ = (geo_ != nil && [((JavaUtilArrayList *) nil_chk(prevPoints_)) size] == 2);
  if (shape_DrawAngle_ != nil) {
    GeogebraCommonEuclidianDrawDrawAngle_drawWithGeogebraCommonAwtGGraphics2D_(self, g2);
  }
}

- (void)disposePreview {
}

- (void)toScreenCoordsWithDoubleArray:(IOSDoubleArray *)vertexScreen {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) toScreenCoordsWithDoubleArray:vertexScreen];
}

- (void)setMaxRadiusWithDouble:(jdouble)d {
  self->maxRadius_ = d;
}

- (void)dealloc {
  RELEASE_(angle_);
  RELEASE_(algo_);
  RELEASE_(drawArc_);
  RELEASE_(polygon_);
  RELEASE_(dot90degree_);
  RELEASE_(shape_DrawAngle_);
  RELEASE_(m_);
  RELEASE_(coords_);
  RELEASE_(firstVec_);
  RELEASE_(previewTempPoints_);
  RELEASE_(shapeArc1_);
  RELEASE_(shapeArc2_);
  RELEASE_(decoArc_);
  RELEASE_(tick_);
  RELEASE_(angleTick_);
  RELEASE_(square_);
  RELEASE_(prevPoints_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonEuclidianDrawDrawAngle class]) {
    GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ = JavaLangMath_toRadiansWithDouble_(15);
    J2OBJC_SET_INITIALIZED(GeogebraCommonEuclidianDrawDrawAngle)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:withGeogebraCommonKernelGeosGeoAngle:", "DrawAngle", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonEuclidianEuclidianView:withJavaUtilArrayList:", "DrawAngle", NULL, 0x1, NULL, NULL },
    { "init__", "init", "V", 0x2, NULL, NULL },
    { "inViewWithGeogebraCommonKernelMatrixCoords:", "inView", "Z", 0x1, NULL, NULL },
    { "getCoordsInViewWithGeogebraCommonKernelKernelNDGeoPointND:", "getCoordsInView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x11, NULL, NULL },
    { "getCoordsInViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsInView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getAngleStartWithDouble:withDouble:", "getAngleStart", "D", 0x4, NULL, NULL },
    { "setNotVisible", NULL, "V", 0x2, NULL, NULL },
    { "update", NULL, "V", 0x11, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x11, NULL, NULL },
    { "updateTickWithDouble:withInt:withInt:", "updateTick", "V", 0x2, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x11, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x11, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x11, NULL, NULL },
    { "initPreview", NULL, "V", 0x2, NULL, NULL },
    { "updatePreview", NULL, "V", 0x11, NULL, NULL },
    { "updateMousePosWithDouble:withDouble:", "updateMousePos", "V", 0x11, NULL, NULL },
    { "drawPreviewWithGeogebraCommonAwtGGraphics2D:", "drawPreview", "V", 0x11, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "toScreenCoordsWithDoubleArray:", "toScreenCoords", "V", 0x1, NULL, NULL },
    { "setMaxRadiusWithDouble:", "setMaxRadius", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "angle_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoAngle;", NULL, NULL,  },
    { "isVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "show90degrees_", NULL, 0x2, "Z", NULL, NULL,  },
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoAngle;", NULL, NULL,  },
    { "drawArc_", NULL, 0x2, "Lgeogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "polygon_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "dot90degree_", NULL, 0x2, "Lgeogebra.common.awt.GEllipse2DDouble;", NULL, NULL,  },
    { "shape_DrawAngle_", "shape", 0x2, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "m_", NULL, 0x2, "[D", NULL, NULL,  },
    { "coords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "firstVec_", NULL, 0x2, "[D", NULL, NULL,  },
    { "drawDot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "previewTempPoints_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "shapeArc1_", NULL, 0x2, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "shapeArc2_", NULL, 0x2, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "decoArc_", NULL, 0x2, "Lgeogebra.common.awt.GArc2D;", NULL, NULL,  },
    { "tick_", NULL, 0x2, "[Lgeogebra.common.awt.GLine2D;", NULL, NULL,  },
    { "angleTick_", NULL, 0x2, "[D", NULL, NULL,  },
    { "MAX_TICK_DISTANCE_", NULL, 0x19, "D", &GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_, NULL,  },
    { "square_", NULL, 0x2, "Lgeogebra.common.awt.GGeneralPath;", NULL, NULL,  },
    { "prevPoints_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/kernelND/GeoPointND;>;",  },
    { "maxRadius_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawDrawAngle = { 2, "DrawAngle", "geogebra.common.euclidian.draw", NULL, 0x1, 24, methods, 23, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawDrawAngle;
}

@end

void GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(GeogebraCommonEuclidianDrawDrawAngle *self, GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoAngle *angle) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawAngle_set_drawArc_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  GeogebraCommonEuclidianDrawDrawAngle_set_polygon_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_set_decoArc_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newArc2D]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_angleTick_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawAngle_set_angle_(self, angle);
  GeogebraCommonEuclidianDrawable_set_geo_(self, angle);
  GeogebraCommonEuclidianDrawDrawAngle_init__(self);
  if (self->algo_ != nil) {
    GeogebraCommonEuclidianDrawDrawAngle_update(self);
  }
}

GeogebraCommonEuclidianDrawDrawAngle *new_GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(GeogebraCommonEuclidianEuclidianView *view, GeogebraCommonKernelGeosGeoAngle *angle) {
  GeogebraCommonEuclidianDrawDrawAngle *self = [GeogebraCommonEuclidianDrawDrawAngle alloc];
  GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(self, view, angle);
  return self;
}

void GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianDrawDrawAngle *self, GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawable_init(self);
  GeogebraCommonEuclidianDrawDrawAngle_set_drawArc_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newArc2D]);
  GeogebraCommonEuclidianDrawDrawAngle_set_polygon_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newGeneralPath]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_coords_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawDrawAngle_set_decoArc_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newArc2D]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_angleTick_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonEuclidianDrawable_set_view_(self, view);
  GeogebraCommonEuclidianDrawDrawAngle_set_prevPoints_(self, points);
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) getKernel])) getConstruction];
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_previewTempPoints_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoPoint_class_()]);
  for (jint i = 0; i < self->previewTempPoints_->size_; i++) {
    IOSObjectArray_SetAndConsume(self->previewTempPoints_, i, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  }
  GeogebraCommonEuclidianDrawDrawAngle_initPreview(self);
}

GeogebraCommonEuclidianDrawDrawAngle *new_GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(GeogebraCommonEuclidianEuclidianView *view, JavaUtilArrayList *points) {
  GeogebraCommonEuclidianDrawDrawAngle *self = [GeogebraCommonEuclidianDrawDrawAngle alloc];
  GeogebraCommonEuclidianDrawDrawAngle_initWithGeogebraCommonEuclidianEuclidianView_withJavaUtilArrayList_(self, view, points);
  return self;
}

void GeogebraCommonEuclidianDrawDrawAngle_init__(GeogebraCommonEuclidianDrawDrawAngle *self) {
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_firstVec_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 0 } count:2]);
  GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_m_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0 } count:2]);
  if ([[((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getDrawAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoAngle class]]) {
    GeogebraCommonEuclidianDrawDrawAngle_set_algo_(self, ((GeogebraCommonKernelAlgosAlgoAngle *) check_class_cast([self->angle_ getDrawAlgorithm], [GeogebraCommonKernelAlgosAlgoAngle class])));
  }
}

void GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(GeogebraCommonEuclidianDrawDrawAngle *self) {
  self->isVisible_ = NO;
  GeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, nil);
  self->labelVisible_ = NO;
}

void GeogebraCommonEuclidianDrawDrawAngle_update(GeogebraCommonEuclidianDrawDrawAngle *self) {
  if (![((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getDrawAlgorithm])) isEqual:[self->geo_ getParentAlgorithm]]) GeogebraCommonEuclidianDrawDrawAngle_init__(self);
  self->isVisible_ = YES;
  if (![self->geo_ isEuclidianVisible] || GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getValue])) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  self->labelVisible_ = [self->geo_ isLabelVisible];
  [self updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:self->angle_];
  self->maxRadius_ = JavaLangDouble_POSITIVE_INFINITY;
  if (self->algo_ == nil) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  if (![((GeogebraCommonKernelAlgosAlgoAngle *) nil_chk(self->algo_)) updateDrawInfoWithDoubleArray:self->m_ withDoubleArray:self->firstVec_ withGeogebraCommonEuclidianDrawDrawAngle:self]) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  jdouble angSt = JavaLangMath_atan2WithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(self->firstVec_), 1), IOSDoubleArray_Get(self->firstVec_, 0));
  if (JavaLangDouble_isNaNWithDouble_(angSt) || JavaLangDouble_isInfiniteWithDouble_(angSt)) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  jdouble angExt = [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getRawAngle];
  angSt = [self getAngleStartWithDouble:angSt withDouble:angExt];
  switch ([[self->angle_ getAngleStyle] ordinal]) {
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_UNBOUNDED:
    GeogebraCommonMainApp_errorWithNSString_(@"shouldn't be drawable");
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_NOTREFLEX:
    if (angExt > JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
    break;
    case GeogebraCommonKernelGeosGeoAngle_AngleStyle_ISREFLEX:
    if (angExt < JavaLangMath_PI) {
      angSt += angExt;
      angExt = 2.0 * JavaLangMath_PI - angExt;
    }
    break;
  }
  jdouble as = JavaLangMath_toDegreesWithDouble_(angSt);
  jdouble ae = JavaLangMath_toDegreesWithDouble_(angExt);
  jint arcSize = JavaLangMath_minWithInt_withInt_(J2ObjCFpToInt(self->maxRadius_), [self->angle_ getArcSize]);
  jdouble r = arcSize * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getInvXscale];
  self->show90degrees_ = ([self->view_ getRightAngleStyle] != GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_NONE && [self->angle_ isEmphasizeRightAngle] && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(angExt, GeogebraCommonKernelKernel_PI_HALF));
  *IOSDoubleArray_GetRef(nil_chk(self->coords_), 0) = IOSDoubleArray_Get(nil_chk(self->m_), 0);
  *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1);
  [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
  self->drawDot_ = NO;
  if (self->show90degrees_) {
    {
      jdouble length;
      jdouble offset;
      jint diameter;
      jdouble radius;
      jdouble labelAngle;
      switch ([self->view_ getRightAngleStyle]) {
        case GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_SQUARE:
        if (self->square_ == nil) GeogebraCommonEuclidianDrawDrawAngle_set_square_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
        else [self->square_ reset];
        length = arcSize * 0.7071067811865;
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->square_)) moveToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + arcSize * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF / 2)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - arcSize * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF / 2) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF) * [self->view_ getScaleRatio])];
        [self->square_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 0) withFloat:(jfloat) IOSDoubleArray_Get(self->coords_, 1)];
        GeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, self->square_);
        break;
        case GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_L:
        if (self->square_ == nil) GeogebraCommonEuclidianDrawDrawAngle_set_square_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newGeneralPath]);
        else [self->square_ reset];
        length = arcSize * 0.7071067811865;
        offset = length * 0.4;
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->square_)) moveToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt) * [self->view_ getScaleRatio] - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF))];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF))];
        [self->square_ lineToWithFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 0) + length * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF) + offset * JavaLangMath_cosWithDouble_(angSt) + offset * JavaLangMath_cosWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF)) withFloat:(jfloat) (IOSDoubleArray_Get(self->coords_, 1) - length * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF) * [self->view_ getScaleRatio] - offset * JavaLangMath_sinWithDouble_(angSt) - offset * JavaLangMath_sinWithDouble_(angSt + GeogebraCommonKernelKernel_PI_HALF))];
        GeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, self->square_);
        break;
        case GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT:
        self->drawDot_ = YES;
        if (self->dot90degree_ == nil) GeogebraCommonEuclidianDrawDrawAngle_set_dot90degree_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newEllipse2DDouble]);
        diameter = 2 * self->geo_->lineThickness_;
        radius = r / 1.7;
        labelAngle = angSt + angExt / 2.0;
        *IOSDoubleArray_GetRef(self->coords_, 0) = IOSDoubleArray_Get(self->m_, 0) + radius * JavaLangMath_cosWithDouble_(labelAngle);
        *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1) + radius * JavaLangMath_sinWithDouble_(labelAngle);
        [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
        [((id<GeogebraCommonAwtGEllipse2DDouble>) nil_chk(self->dot90degree_)) setFrameWithDouble:IOSDoubleArray_Get(self->coords_, 0) - self->geo_->lineThickness_ withDouble:IOSDoubleArray_Get(self->coords_, 1) - self->geo_->lineThickness_ withDouble:diameter withDouble:diameter];
        [((id<GeogebraCommonAwtGArc2D>) nil_chk(self->drawArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:GeogebraCommonAwtGArc2D_PIE];
        GeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, [((id<GeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithGeogebraCommonAwtGShape:self->drawArc_]);
        break;
      }
    }
  }
  else {
    [((id<GeogebraCommonAwtGArc2D>) nil_chk(self->drawArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:GeogebraCommonAwtGArc2D_PIE];
    GeogebraCommonEuclidianDrawDrawAngle_set_shape_DrawAngle_(self, [((id<GeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithGeogebraCommonAwtGShape:self->drawArc_]);
    jdouble rdiff;
    {
      IOSDoubleArray *n2;
      IOSDoubleArray *n;
      IOSDoubleArray *v;
      jdouble rotateangle;
      IOSDoubleArray *p1;
      IOSDoubleArray *p2;
      IOSDoubleArray *p3;
      jdouble size;
      switch (self->geo_->decorationType_) {
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS:
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize - rdiff) * [self->view_ getInvXscale];
        [((id<GeogebraCommonAwtGArc2D>) nil_chk(self->decoArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:GeogebraCommonAwtGArc2D_OPEN];
        GeogebraCommonEuclidianDrawDrawAngle_set_shapeArc1_(self, [((id<GeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithGeogebraCommonAwtGShape:self->decoArc_]);
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS:
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize - rdiff) * [self->view_ getInvXscale];
        [((id<GeogebraCommonAwtGArc2D>) nil_chk(self->decoArc_)) setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:GeogebraCommonAwtGArc2D_OPEN];
        GeogebraCommonEuclidianDrawDrawAngle_set_shapeArc1_(self, [((id<GeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithGeogebraCommonAwtGShape:self->decoArc_]);
        r = (arcSize - 2 * rdiff) * [self->view_ getInvXscale];
        [self->decoArc_ setArcByCenterWithDouble:IOSDoubleArray_Get(self->m_, 0) withDouble:IOSDoubleArray_Get(self->m_, 1) withDouble:r withDouble:-as withDouble:-ae withInt:GeogebraCommonAwtGArc2D_OPEN];
        GeogebraCommonEuclidianDrawDrawAngle_set_shapeArc2_(self, [((id<GeogebraCommonAwtGAffineTransform>) nil_chk([self->view_ getCoordTransform])) createTransformedShapeWithGeogebraCommonAwtGShape:self->decoArc_]);
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - angExt / 2;
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - 2 * angExt / 5;
        *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - 3 * angExt / 5;
        if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->angleTick_, 1) - IOSDoubleArray_Get(self->angleTick_, 0)) > GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_) {
          *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2 - GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ / 2;
          *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - angExt / 2 + GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_ / 2;
        }
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 1), arcSize, 1);
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS:
        *IOSDoubleArray_GetRef(nil_chk(self->angleTick_), 0) = -angSt - 3 * angExt / 8;
        *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - 5 * angExt / 8;
        if (JavaLangMath_absWithDouble_(IOSDoubleArray_Get(self->angleTick_, 1) - IOSDoubleArray_Get(self->angleTick_, 0)) > 2 * GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_) {
          *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2 - GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;
          *IOSDoubleArray_GetRef(self->angleTick_, 1) = -angSt - angExt / 2 + GeogebraCommonEuclidianDrawDrawAngle_MAX_TICK_DISTANCE_;
        }
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 0);
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 1), arcSize, 1);
        *IOSDoubleArray_GetRef(self->angleTick_, 0) = -angSt - angExt / 2;
        GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(self, IOSDoubleArray_Get(self->angleTick_, 0), arcSize, 2);
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE:
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE:
        n2 = [IOSDoubleArray arrayWithLength:2];
        n = [IOSDoubleArray arrayWithLength:2];
        v = [IOSDoubleArray arrayWithLength:2];
        rotateangle = 0.25;
        if (self->geo_->decorationType_ == GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE) {
          *IOSDoubleArray_GetRef(n2, 0) = JavaLangMath_cosWithDouble_(angSt);
          *IOSDoubleArray_GetRef(n2, 1) = JavaLangMath_sinWithDouble_(angSt);
          *IOSDoubleArray_GetRef(n, 0) = JavaLangMath_cosWithDouble_(angSt + rotateangle);
          *IOSDoubleArray_GetRef(n, 1) = JavaLangMath_sinWithDouble_(angSt + rotateangle);
          *IOSDoubleArray_GetRef(v, 0) = -IOSDoubleArray_Get(n, 1);
          *IOSDoubleArray_GetRef(v, 1) = IOSDoubleArray_Get(n, 0);
        }
        else {
          *IOSDoubleArray_GetRef(n2, 0) = JavaLangMath_cosWithDouble_(angExt + angSt);
          *IOSDoubleArray_GetRef(n2, 1) = JavaLangMath_sinWithDouble_(angExt + angSt);
          *IOSDoubleArray_GetRef(n, 0) = JavaLangMath_cosWithDouble_(angExt + angSt - rotateangle);
          *IOSDoubleArray_GetRef(n, 1) = JavaLangMath_sinWithDouble_(angExt + angSt - rotateangle);
          *IOSDoubleArray_GetRef(v, 0) = IOSDoubleArray_Get(n, 1);
          *IOSDoubleArray_GetRef(v, 1) = -IOSDoubleArray_Get(n, 0);
        }
        p1 = [IOSDoubleArray arrayWithLength:2];
        p2 = [IOSDoubleArray arrayWithLength:2];
        p3 = [IOSDoubleArray arrayWithLength:2];
        rdiff = 4 + self->geo_->lineThickness_ / 2.0;
        r = (arcSize) * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p1, 0) = IOSDoubleArray_Get(self->m_, 0) + r * IOSDoubleArray_Get(n2, 0);
        *IOSDoubleArray_GetRef(p1, 1) = IOSDoubleArray_Get(self->m_, 1) + r * IOSDoubleArray_Get(n2, 1);
        size = 4.0 + self->geo_->lineThickness_ / 4.0;
        size = size * 0.9;
        *IOSDoubleArray_GetRef(p2, 0) = IOSDoubleArray_Get(p1, 0) + (1 * IOSDoubleArray_Get(n, 0) + 3 * IOSDoubleArray_Get(v, 0)) * size * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p2, 1) = IOSDoubleArray_Get(p1, 1) + (1 * IOSDoubleArray_Get(n, 1) + 3 * IOSDoubleArray_Get(v, 1)) * size * [self->view_ getInvYscale];
        *IOSDoubleArray_GetRef(p3, 0) = IOSDoubleArray_Get(p1, 0) + (-1 * IOSDoubleArray_Get(n, 0) + 3 * IOSDoubleArray_Get(v, 0)) * size * [self->view_ getInvXscale];
        *IOSDoubleArray_GetRef(p3, 1) = IOSDoubleArray_Get(p1, 1) + (-1 * IOSDoubleArray_Get(n, 1) + 3 * IOSDoubleArray_Get(v, 1)) * size * [self->view_ getInvYscale];
        [self->view_ toScreenCoordsWithDoubleArray:p1];
        [self->view_ toScreenCoordsWithDoubleArray:p2];
        [self->view_ toScreenCoordsWithDoubleArray:p3];
        [((id<GeogebraCommonAwtGGeneralPath>) nil_chk(self->polygon_)) reset];
        [self->polygon_ moveToWithFloat:(jfloat) IOSDoubleArray_Get(p1, 0) withFloat:(jfloat) IOSDoubleArray_Get(p1, 1)];
        [self->polygon_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(p2, 0) withFloat:(jfloat) IOSDoubleArray_Get(p2, 1)];
        [self->polygon_ lineToWithFloat:(jfloat) IOSDoubleArray_Get(p3, 0) withFloat:(jfloat) IOSDoubleArray_Get(p3, 1)];
        [self->polygon_ closePath];
        break;
      }
    }
  }
  if (![((id<GeogebraCommonAwtGShape>) nil_chk(self->shape_DrawAngle_)) intersectsWithInt:0 withInt:0 withInt:[self->view_ getWidth] withInt:[self->view_ getHeight]]) {
    GeogebraCommonEuclidianDrawDrawAngle_setNotVisible(self);
    return;
  }
  if (self->labelVisible_) {
    jdouble radius = r / 1.7;
    jdouble labelAngle = angSt + angExt / 2.0;
    *IOSDoubleArray_GetRef(self->coords_, 0) = IOSDoubleArray_Get(self->m_, 0) + radius * JavaLangMath_cosWithDouble_(labelAngle);
    *IOSDoubleArray_GetRef(self->coords_, 1) = IOSDoubleArray_Get(self->m_, 1) + radius * JavaLangMath_sinWithDouble_(labelAngle);
    [self->view_ toScreenCoordsWithDoubleArray:self->coords_];
    GeogebraCommonEuclidianDrawable_set_labelDesc_(self, [self->angle_ getLabelDescription]);
    self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 0) - 3));
    self->yLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 1) + 5));
    if (![self addLabelOffset] && self->drawDot_) self->xLabel_ = J2ObjCFpToInt((IOSDoubleArray_Get(self->coords_, 0) + 2 * self->geo_->lineThickness_));
  }
}

void GeogebraCommonEuclidianDrawDrawAngle_drawWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawDrawAngle *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (self->isVisible_) {
    if (!self->show90degrees_ || [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getRightAngleStyle] != GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_L) {
      [self fillWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGShape:self->shape_DrawAngle_ withBoolean:NO];
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) doHighlighting]) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getSelColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->selStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:self->shape_DrawAngle_];
    }
    if (self->geo_->lineThickness_ > 0) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getObjectColor]];
      [g2 setStrokeWithGeogebraCommonAwtGBasicStroke:self->objStroke_];
      [g2 drawWithGeogebraCommonAwtGShape:self->shape_DrawAngle_];
    }
    if (self->show90degrees_) {
      switch ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getRightAngleStyle]) {
        case GeogebraCommonPluginEuclidianStyleConstants_RIGHT_ANGLE_STYLE_DOT:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) fillWithGeogebraCommonAwtGShape:self->dot90degree_];
        break;
        default:
        ;
      }
    }
    else {
      switch (self->geo_->decorationType_) {
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_ARCS:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawWithGeogebraCommonAwtGShape:self->shapeArc1_];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_ARCS:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) drawWithGeogebraCommonAwtGShape:self->shapeArc1_];
        [g2 drawWithGeogebraCommonAwtGShape:self->shapeArc2_];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ONE_TICK:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_TWO_TICKS:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 1)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_THREE_TICKS:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(nil_chk(self->tick_), 0)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 1)];
        [g2 drawWithGeogebraCommonAwtGShape:IOSObjectArray_Get(self->tick_, 2)];
        break;
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_ANTICLOCKWISE:
        case GeogebraCommonKernelGeosGeoElement_DECORATION_ANGLE_ARROW_CLOCKWISE:
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setStrokeWithGeogebraCommonAwtGBasicStroke:self->decoStroke_];
        [g2 fillWithGeogebraCommonAwtGShape:self->polygon_];
        break;
      }
    }
    if (self->labelVisible_) {
      [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[((GeogebraCommonKernelGeosGeoAngle *) nil_chk(self->angle_)) getLabelColor]];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontAngle]];
      [self drawLabelWithGeogebraCommonAwtGGraphics2D:g2];
    }
  }
}

void GeogebraCommonEuclidianDrawDrawAngle_updateTickWithDouble_withInt_withInt_(GeogebraCommonEuclidianDrawDrawAngle *self, jdouble angle1, jint radius, jint id_) {
  if (self->tick_ == nil) {
    GeogebraCommonEuclidianDrawDrawAngle_setAndConsume_tick_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonAwtGLine2D_class_()]);
    for (jint i = 0; i < self->tick_->size_; i++) {
      IOSObjectArray_Set(self->tick_, i, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newLine2D]);
    }
  }
  jdouble cos = JavaLangMath_cosWithDouble_(angle1);
  jdouble sin = JavaLangMath_sinWithDouble_(angle1);
  jdouble length = 2.5 + ((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->lineThickness_ / 4.0;
  [((id<GeogebraCommonAwtGLine2D>) nil_chk(IOSObjectArray_Get(nil_chk(self->tick_), id_))) setLineWithDouble:IOSDoubleArray_Get(nil_chk(self->coords_), 0) + (radius - length) * cos withDouble:IOSDoubleArray_Get(self->coords_, 1) + (radius - length) * sin * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getScaleRatio] withDouble:IOSDoubleArray_Get(self->coords_, 0) + (radius + length) * cos withDouble:IOSDoubleArray_Get(self->coords_, 1) + (radius + length) * sin * [self->view_ getScaleRatio]];
}

void GeogebraCommonEuclidianDrawDrawAngle_initPreview(GeogebraCommonEuclidianDrawDrawAngle *self) {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(nil_chk(self->previewTempPoints_), 0))) getConstruction];
  GeogebraCommonKernelAlgosAlgoAnglePoints *algoPreview = [new_GeogebraCommonKernelAlgosAlgoAnglePoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(cons, IOSObjectArray_Get(self->previewTempPoints_, 0), IOSObjectArray_Get(self->previewTempPoints_, 1), IOSObjectArray_Get(self->previewTempPoints_, 2)) autorelease];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoPreview];
  GeogebraCommonEuclidianDrawable_set_geo_(self, [algoPreview getAngle]);
  GeogebraCommonEuclidianDrawDrawAngle_set_angle_(self, (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoAngle class]));
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setEuclidianVisibleWithBoolean:YES];
  GeogebraCommonEuclidianDrawDrawAngle_init__(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawDrawAngle)
