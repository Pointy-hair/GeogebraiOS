//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationIntersectSingleRestriction.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/algos/AlgoIntersect.h"
#include "geogebra/common/kernel/algos/AlgoIntersectSingle.h"
#include "geogebra/common/kernel/algos/EquationElementInterface.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationList.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationRestriction.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/elements/EquationIntersectRestriction.h"
#include "geogebra/common/kernel/locusequ/elements/EquationIntersectSingleRestriction.h"

@interface GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction () {
 @public
  GeogebraCommonKernelLocusequEquationRestriction *internalRestriction_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction, internalRestriction_, GeogebraCommonKernelLocusequEquationRestriction *)

@implementation GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction

- (instancetype)initWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
          withGeogebraCommonKernelAlgosAlgoIntersectSingle:(GeogebraCommonKernelAlgosAlgoIntersectSingle *)algo
             withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectSingle_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

- (void)computeEquationList {
  GeogebraCommonKernelAlgosAlgoIntersectSingle *algo = (GeogebraCommonKernelAlgosAlgoIntersectSingle *) check_class_cast([self getAlgo], [GeogebraCommonKernelAlgosAlgoIntersectSingle class]);
  GeogebraCommonKernelLocusequEquationPoint *actualPoint = [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getPointWithGeogebraCommonKernelGeosGeoPoint:[((GeogebraCommonKernelAlgosAlgoIntersectSingle *) nil_chk(algo)) getPoint]];
  [self setEquationListWithGeogebraCommonKernelLocusequEquationList:[((GeogebraCommonKernelLocusequEquationRestriction *) nil_chk(self->internalRestriction_)) forPointWithGeogebraCommonKernelLocusequEquationPoint:actualPoint]];
}

- (GeogebraCommonKernelLocusequEquationList *)forPointImplWithGeogebraCommonKernelLocusequEquationPoint:(GeogebraCommonKernelLocusequEquationPoint *)p {
  return nil;
}

- (void)dealloc {
  RELEASE_(internalRestriction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelAlgosAlgoIntersectSingle:withGeogebraCommonKernelLocusequEquationScope:", "EquationIntersectSingleRestriction", NULL, 0x1, NULL, NULL },
    { "computeEquationList", NULL, "V", 0x4, NULL, NULL },
    { "forPointImplWithGeogebraCommonKernelLocusequEquationPoint:", "forPointImpl", "Lgeogebra.common.kernel.locusequ.EquationList;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "internalRestriction_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationRestriction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction = { 2, "EquationIntersectSingleRestriction", "geogebra.common.kernel.locusequ.elements", NULL, 0x1, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction;
}

@end

void GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectSingle_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *self, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectSingle *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationIntersectRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersect_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_set_internalRestriction_(self, (GeogebraCommonKernelLocusequEquationRestriction *) check_class_cast([((GeogebraCommonKernelAlgosAlgoIntersect *) nil_chk([((GeogebraCommonKernelAlgosAlgoIntersectSingle *) nil_chk(algo)) getAlgo])) buildEquationElementForGeoWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelAlgosEquationScopeInterface:scope], [GeogebraCommonKernelLocusequEquationRestriction class]));
}

GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *new_GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectSingle_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelAlgosAlgoIntersectSingle *algo, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction *self = [GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction alloc];
  GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelAlgosAlgoIntersectSingle_withGeogebraCommonKernelLocusequEquationScope_(self, geo, algo, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationIntersectSingleRestriction)
