//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoIsInRegion.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Region.h"
#include "geogebra/common/kernel/advanced/AlgoIsInRegion.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonKernelAdvancedAlgoIsInRegion () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> pi_;
  id<GeogebraCommonKernelRegion> region_;
  GeogebraCommonKernelGeosGeoBoolean *result_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoIsInRegion, pi_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoIsInRegion, region_, id<GeogebraCommonKernelRegion>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoIsInRegion, result_, GeogebraCommonKernelGeosGeoBoolean *)

@implementation GeogebraCommonKernelAdvancedAlgoIsInRegion

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)pi
                          withGeogebraCommonKernelRegion:(id<GeogebraCommonKernelRegion>)region {
  GeogebraCommonKernelAdvancedAlgoIsInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelRegion_(self, c, label, pi, region);
  return self;
}

- (void)compute {
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(pi_)) updateCoords2D];
  [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(result_)) setValueWithBoolean:[((id<GeogebraCommonKernelRegion>) nil_chk(region_)) isInRegionWithDouble:[pi_ getX2D] withDouble:[pi_ getY2D]]];
}

- (void)setInputOutput {
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:result_];
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(region_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoBoolean *)getResult {
  return result_;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_IsInRegion();
}

- (void)dealloc {
  RELEASE_(pi_);
  RELEASE_(region_);
  RELEASE_(result_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelRegion:", "AlgoIsInRegion", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "pi_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "region_", NULL, 0x2, "Lgeogebra.common.kernel.Region;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoIsInRegion = { 2, "AlgoIsInRegion", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoIsInRegion;
}

@end

void GeogebraCommonKernelAdvancedAlgoIsInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelRegion_(GeogebraCommonKernelAdvancedAlgoIsInRegion *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> pi, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAdvancedAlgoIsInRegion_set_pi_(self, pi);
  GeogebraCommonKernelAdvancedAlgoIsInRegion_set_region_(self, region);
  GeogebraCommonKernelAdvancedAlgoIsInRegion_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self->cons_));
  [self setInputOutput];
  [self compute];
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoIsInRegion *new_GeogebraCommonKernelAdvancedAlgoIsInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelRegion_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> pi, id<GeogebraCommonKernelRegion> region) {
  GeogebraCommonKernelAdvancedAlgoIsInRegion *self = [GeogebraCommonKernelAdvancedAlgoIsInRegion alloc];
  GeogebraCommonKernelAdvancedAlgoIsInRegion_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelRegion_(self, c, label, pi, region);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoIsInRegion)
