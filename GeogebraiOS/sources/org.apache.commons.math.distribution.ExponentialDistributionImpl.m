//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/distribution/ExponentialDistributionImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/distribution/AbstractContinuousDistribution.h"
#include "org/apache/commons/math/distribution/ExponentialDistributionImpl.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/random/RandomDataImpl.h"
#include "org/apache/commons/math/util/FastMath.h"

#define OrgApacheCommonsMathDistributionExponentialDistributionImpl_serialVersionUID 2401296428283614780LL

@interface OrgApacheCommonsMathDistributionExponentialDistributionImpl () {
 @public
  jdouble mean_;
  jdouble solverAbsoluteAccuracy_ExponentialDistributionImpl_;
}

- (void)setMeanInternalWithDouble:(jdouble)newMean;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathDistributionExponentialDistributionImpl, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathDistributionExponentialDistributionImpl_setMeanInternalWithDouble_(OrgApacheCommonsMathDistributionExponentialDistributionImpl *self, jdouble newMean);

@implementation OrgApacheCommonsMathDistributionExponentialDistributionImpl

- (instancetype)initWithDouble:(jdouble)mean {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_(self, mean);
  return self;
}

- (instancetype)initWithDouble:(jdouble)mean
                    withDouble:(jdouble)inverseCumAccuracy {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_withDouble_(self, mean, inverseCumAccuracy);
  return self;
}

- (void)setMeanWithDouble:(jdouble)mean {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_setMeanInternalWithDouble_(self, mean);
}

- (void)setMeanInternalWithDouble:(jdouble)newMean {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_setMeanInternalWithDouble_(self, newMean);
}

- (jdouble)getMean {
  return mean_;
}

- (jdouble)densityWithId:(JavaLangDouble *)x {
  return [self densityWithDouble:[((JavaLangDouble *) nil_chk(x)) doubleValue]];
}

- (jdouble)densityWithDouble:(jdouble)x {
  if (x < 0) {
    return 0;
  }
  return OrgApacheCommonsMathUtilFastMath_expWithDouble_(-x / mean_) / mean_;
}

- (jdouble)cumulativeProbabilityWithDouble:(jdouble)x {
  jdouble ret;
  if (x <= 0.0) {
    ret = 0.0;
  }
  else {
    ret = 1.0 - OrgApacheCommonsMathUtilFastMath_expWithDouble_(-x / mean_);
  }
  return ret;
}

- (jdouble)inverseCumulativeProbabilityWithDouble:(jdouble)p {
  jdouble ret;
  if (p < 0.0 || p > 1.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_OUT_OF_RANGE_SIMPLE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(p), JavaLangDouble_valueOfWithDouble_(0.0), JavaLangDouble_valueOfWithDouble_(1.0) } count:3 type:NSObject_class_()]);
  }
  else if (p == 1.0) {
    ret = JavaLangDouble_POSITIVE_INFINITY;
  }
  else {
    ret = -mean_ * OrgApacheCommonsMathUtilFastMath_logWithDouble_(1.0 - p);
  }
  return ret;
}

- (jdouble)sample {
  return [((OrgApacheCommonsMathRandomRandomDataImpl *) nil_chk(randomData_)) nextExponentialWithDouble:mean_];
}

- (jdouble)getDomainLowerBoundWithDouble:(jdouble)p {
  return 0;
}

- (jdouble)getDomainUpperBoundWithDouble:(jdouble)p {
  if (p < .5) {
    return mean_;
  }
  else {
    return JavaLangDouble_MAX_VALUE;
  }
}

- (jdouble)getInitialDomainWithDouble:(jdouble)p {
  if (p < .5) {
    return mean_ * .5;
  }
  else {
    return mean_;
  }
}

- (jdouble)getSolverAbsoluteAccuracy {
  return solverAbsoluteAccuracy_ExponentialDistributionImpl_;
}

- (jdouble)getSupportLowerBound {
  return 0;
}

- (jdouble)getSupportUpperBound {
  return JavaLangDouble_POSITIVE_INFINITY;
}

- (jdouble)getNumericalMean {
  return [self getMean];
}

- (jdouble)getNumericalVariance {
  jdouble m = [self getMean];
  return m * m;
}

+ (IOSObjectArray *)__annotations_setMeanWithDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (IOSObjectArray *)__annotations_densityWithJavaLangDouble_ {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithDouble:", "ExponentialDistributionImpl", NULL, 0x1, NULL, NULL },
    { "initWithDouble:withDouble:", "ExponentialDistributionImpl", NULL, 0x1, NULL, NULL },
    { "setMeanWithDouble:", "setMean", "V", 0x1, NULL, NULL },
    { "setMeanInternalWithDouble:", "setMeanInternal", "V", 0x2, NULL, NULL },
    { "getMean", NULL, "D", 0x1, NULL, NULL },
    { "densityWithId:", "density", "D", 0x1, NULL, NULL },
    { "densityWithDouble:", "density", "D", 0x1, NULL, NULL },
    { "cumulativeProbabilityWithDouble:", "cumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "inverseCumulativeProbabilityWithDouble:", "inverseCumulativeProbability", "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "sample", NULL, "D", 0x1, "Lorg.apache.commons.math.MathException;", NULL },
    { "getDomainLowerBoundWithDouble:", "getDomainLowerBound", "D", 0x4, NULL, NULL },
    { "getDomainUpperBoundWithDouble:", "getDomainUpperBound", "D", 0x4, NULL, NULL },
    { "getInitialDomainWithDouble:", "getInitialDomain", "D", 0x4, NULL, NULL },
    { "getSolverAbsoluteAccuracy", NULL, "D", 0x4, NULL, NULL },
    { "getSupportLowerBound", NULL, "D", 0x1, NULL, NULL },
    { "getSupportUpperBound", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalMean", NULL, "D", 0x1, NULL, NULL },
    { "getNumericalVariance", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_INVERSE_ABSOLUTE_ACCURACY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = OrgApacheCommonsMathDistributionExponentialDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathDistributionExponentialDistributionImpl_serialVersionUID },
    { "mean_", NULL, 0x2, "D", NULL, NULL,  },
    { "solverAbsoluteAccuracy_ExponentialDistributionImpl_", "solverAbsoluteAccuracy", 0x12, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathDistributionExponentialDistributionImpl = { 2, "ExponentialDistributionImpl", "org.apache.commons.math.distribution", NULL, 0x1, 18, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathDistributionExponentialDistributionImpl;
}

@end

void OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_(OrgApacheCommonsMathDistributionExponentialDistributionImpl *self, jdouble mean) {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_withDouble_(self, mean, OrgApacheCommonsMathDistributionExponentialDistributionImpl_DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}

OrgApacheCommonsMathDistributionExponentialDistributionImpl *new_OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_(jdouble mean) {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl *self = [OrgApacheCommonsMathDistributionExponentialDistributionImpl alloc];
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_(self, mean);
  return self;
}

void OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_withDouble_(OrgApacheCommonsMathDistributionExponentialDistributionImpl *self, jdouble mean, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionAbstractContinuousDistribution_init(self);
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_setMeanInternalWithDouble_(self, mean);
  self->solverAbsoluteAccuracy_ExponentialDistributionImpl_ = inverseCumAccuracy;
}

OrgApacheCommonsMathDistributionExponentialDistributionImpl *new_OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_withDouble_(jdouble mean, jdouble inverseCumAccuracy) {
  OrgApacheCommonsMathDistributionExponentialDistributionImpl *self = [OrgApacheCommonsMathDistributionExponentialDistributionImpl alloc];
  OrgApacheCommonsMathDistributionExponentialDistributionImpl_initWithDouble_withDouble_(self, mean, inverseCumAccuracy);
  return self;
}

void OrgApacheCommonsMathDistributionExponentialDistributionImpl_setMeanInternalWithDouble_(OrgApacheCommonsMathDistributionExponentialDistributionImpl *self, jdouble newMean) {
  if (newMean <= 0.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NOT_POSITIVE_MEAN(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangDouble_valueOfWithDouble_(newMean) } count:1 type:NSObject_class_()]);
  }
  self->mean_ = newMean;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathDistributionExponentialDistributionImpl)
