//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/cas/AlgoTrigExpand.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoCasBase.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/MyArbitraryConstant.h"
#include "geogebra/common/kernel/cas/AlgoTrigExpand.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/CasEvaluableFunction.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelCasAlgoTrigExpand () {
 @public
  GeogebraCommonKernelGeosGeoFunction *target_;
  GeogebraCommonKernelArithmeticMyArbitraryConstant *arbconst_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTrigExpand, target_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelCasAlgoTrigExpand, arbconst_, GeogebraCommonKernelArithmeticMyArbitraryConstant *)

@implementation GeogebraCommonKernelCasAlgoTrigExpand

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelGeosCasEvaluableFunction:(id<GeogebraCommonKernelGeosCasEvaluableFunction>)f
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)target {
  GeogebraCommonKernelCasAlgoTrigExpand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f, target);
  return self;
}

- (void)setInputOutput {
  if (target_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement], target_ } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  }
  else GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithObjects:(id[]){ [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(f_)) toGeoElement] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:g_];
  [self setDependencies];
}

- (void)applyCasCommandWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
  [sb appendWithNSString:@"TrigExpand[%"];
  if (target_ != nil) {
    [sb appendWithChar:','];
    [sb appendWithNSString:[target_ toValueStringWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  [sb appendWithChar:']'];
  [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(g_)) setUsingCasCommandWithNSString:[sb description] withGeogebraCommonKernelGeosCasEvaluableFunction:f_ withBoolean:YES withGeogebraCommonKernelArithmeticMyArbitraryConstant:arbconst_];
}

- (void)dealloc {
  RELEASE_(target_);
  RELEASE_(arbconst_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosCasEvaluableFunction:withGeogebraCommonKernelGeosGeoFunction:", "AlgoTrigExpand", NULL, 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x1, NULL, NULL },
    { "applyCasCommandWithGeogebraCommonKernelStringTemplate:", "applyCasCommand", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "target_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "arbconst_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.MyArbitraryConstant;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCasAlgoTrigExpand = { 2, "AlgoTrigExpand", "geogebra.common.kernel.cas", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCasAlgoTrigExpand;
}

@end

void GeogebraCommonKernelCasAlgoTrigExpand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelCasAlgoTrigExpand *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoFunction *target) {
  GeogebraCommonKernelAlgosAlgoCasBase_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelCommandsCommandsEnum_(self, cons, f, GeogebraCommonKernelCommandsCommandsEnum_get_TrigExpand());
  GeogebraCommonKernelCasAlgoTrigExpand_setAndConsume_arbconst_(self, new_GeogebraCommonKernelArithmeticMyArbitraryConstant_initWithGeogebraCommonKernelAlgosConstructionElement_(self));
  GeogebraCommonKernelCasAlgoTrigExpand_set_target_(self, target);
  [self setInputOutput];
  [self compute];
  [((id<GeogebraCommonKernelGeosCasEvaluableFunction>) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelCasAlgoTrigExpand *new_GeogebraCommonKernelCasAlgoTrigExpand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelGeosCasEvaluableFunction> f, GeogebraCommonKernelGeosGeoFunction *target) {
  GeogebraCommonKernelCasAlgoTrigExpand *self = [GeogebraCommonKernelCasAlgoTrigExpand alloc];
  GeogebraCommonKernelCasAlgoTrigExpand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosCasEvaluableFunction_withGeogebraCommonKernelGeosGeoFunction_(self, cons, label, f, target);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCasAlgoTrigExpand)
