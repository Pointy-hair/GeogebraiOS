//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/RealMatrixImpl.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/System.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/linear/AbstractRealMatrix.h"
#include "org/apache/commons/math/linear/MatrixIndexException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/MatrixVisitorException.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/RealMatrixChangingVisitor.h"
#include "org/apache/commons/math/linear/RealMatrixImpl.h"
#include "org/apache/commons/math/linear/RealMatrixPreservingVisitor.h"

#define OrgApacheCommonsMathLinearRealMatrixImpl_serialVersionUID -1067294169172445528LL

@interface OrgApacheCommonsMathLinearRealMatrixImpl ()

- (IOSObjectArray *)copyOut OBJC_METHOD_FAMILY_NONE;

- (void)copyInWithDoubleArray2:(IOSObjectArray *)inArg OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathLinearRealMatrixImpl, serialVersionUID, jlong)

__attribute__((unused)) static IOSObjectArray *OrgApacheCommonsMathLinearRealMatrixImpl_copyOut(OrgApacheCommonsMathLinearRealMatrixImpl *self);

__attribute__((unused)) static void OrgApacheCommonsMathLinearRealMatrixImpl_copyInWithDoubleArray2_(OrgApacheCommonsMathLinearRealMatrixImpl *self, IOSObjectArray *inArg);

@implementation OrgApacheCommonsMathLinearRealMatrixImpl

- (instancetype)init {
  OrgApacheCommonsMathLinearRealMatrixImpl_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)rowDimension
                    withInt:(jint)columnDimension {
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)d {
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_(self, d);
  return self;
}

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)d
                         withBoolean:(jboolean)copyArray {
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(self, d, copyArray);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)v {
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray_(self, v);
  return self;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)createMatrixWithInt:(jint)rowDimension
                                                        withInt:(jint)columnDimension {
  return [new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithInt_withInt_(rowDimension, columnDimension) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)copy__ {
  return [new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(OrgApacheCommonsMathLinearRealMatrixImpl_copyOut(self), NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)addWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self addWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearRealMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super addWithOrgApacheCommonsMathLinearRealMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearRealMatrixImpl *)addWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkAdditionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount }];
  for (jint row = 0; row < rowCount; row++) {
    IOSDoubleArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSDoubleArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearRealMatrixImpl *) nil_chk(m))->data_, row);
    IOSDoubleArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      *IOSDoubleArray_GetRef(nil_chk(outDataRow), col) = IOSDoubleArray_Get(nil_chk(dataRow), col) + IOSDoubleArray_Get(nil_chk(mRow), col);
    }
  }
  return [new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)subtractWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self subtractWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearRealMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super subtractWithOrgApacheCommonsMathLinearRealMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearRealMatrixImpl *)subtractWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubtractionCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint rowCount = [self getRowDimension];
  jint columnCount = [self getColumnDimension];
  IOSObjectArray *outData = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ rowCount, columnCount }];
  for (jint row = 0; row < rowCount; row++) {
    IOSDoubleArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSDoubleArray *mRow = IOSObjectArray_Get(((OrgApacheCommonsMathLinearRealMatrixImpl *) nil_chk(m))->data_, row);
    IOSDoubleArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < columnCount; col++) {
      *IOSDoubleArray_GetRef(nil_chk(outDataRow), col) = IOSDoubleArray_Get(nil_chk(dataRow), col) - IOSDoubleArray_Get(nil_chk(mRow), col);
    }
  }
  return [new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(outData, NO) autorelease];
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)multiplyWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)m {
  @try {
    return [self multiplyWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *) check_class_cast(m, [OrgApacheCommonsMathLinearRealMatrixImpl class])];
  }
  @catch (JavaLangClassCastException *cce) {
    return [super multiplyWithOrgApacheCommonsMathLinearRealMatrix:m];
  }
}

- (OrgApacheCommonsMathLinearRealMatrixImpl *)multiplyWithOrgApacheCommonsMathLinearRealMatrixImpl:(OrgApacheCommonsMathLinearRealMatrixImpl *)m {
  OrgApacheCommonsMathLinearMatrixUtils_checkMultiplicationCompatibleWithOrgApacheCommonsMathLinearAnyMatrix_withOrgApacheCommonsMathLinearAnyMatrix_(self, m);
  jint nRows = [self getRowDimension];
  jint nCols = [((OrgApacheCommonsMathLinearRealMatrixImpl *) nil_chk(m)) getColumnDimension];
  jint nSum = [self getColumnDimension];
  IOSObjectArray *outData = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ nRows, nCols }];
  for (jint row = 0; row < nRows; row++) {
    IOSDoubleArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    IOSDoubleArray *outDataRow = IOSObjectArray_Get(outData, row);
    for (jint col = 0; col < nCols; col++) {
      jdouble sum = 0;
      for (jint i = 0; i < nSum; i++) {
        sum += IOSDoubleArray_Get(nil_chk(dataRow), i) * IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(m->data_, i)), col);
      }
      *IOSDoubleArray_GetRef(nil_chk(outDataRow), col) = sum;
    }
  }
  return [new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(outData, NO) autorelease];
}

- (IOSObjectArray *)getData {
  return OrgApacheCommonsMathLinearRealMatrixImpl_copyOut(self);
}

- (IOSObjectArray *)getDataRef {
  return data_;
}

- (void)setSubMatrixWithDoubleArray2:(IOSObjectArray *)subMatrix
                             withInt:(jint)row
                             withInt:(jint)column {
  if (data_ == nil) {
    if (row > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_ROWS_NOT_INITIALIZED_YET(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row) } count:1 type:NSObject_class_()]);
    }
    if (column > 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalStateExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_FIRST_COLUMNS_NOT_INITIALIZED_YET(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(column) } count:1 type:NSObject_class_()]);
    }
    jint nRows = ((IOSObjectArray *) nil_chk(subMatrix))->size_;
    if (nRows == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    jint nCols = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, 0)))->size_;
    if (nCols == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    OrgApacheCommonsMathLinearRealMatrixImpl_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ subMatrix->size_, nCols }]);
    for (jint i = 0; i < data_->size_; ++i) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, i)))->size_ != nCols) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(subMatrix, i)))->size_) } count:2 type:NSObject_class_()]);
      }
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(subMatrix, i), 0, IOSObjectArray_Get(data_, i + row), column, nCols);
    }
  }
  else {
    [super setSubMatrixWithDoubleArray2:subMatrix withInt:row withInt:column];
  }
}

- (jdouble)getEntryWithInt:(jint)row
                   withInt:(jint)column {
  @try {
    return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column);
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)setEntryWithInt:(jint)row
                withInt:(jint)column
             withDouble:(jdouble)value {
  @try {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column) = value;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)addToEntryWithInt:(jint)row
                  withInt:(jint)column
               withDouble:(jdouble)increment {
  @try {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column) += increment;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (void)multiplyEntryWithInt:(jint)row
                     withInt:(jint)column
                  withDouble:(jdouble)factor {
  @try {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(data_), row)), column) *= factor;
  }
  @catch (JavaLangArrayIndexOutOfBoundsException *e) {
    @throw [new_OrgApacheCommonsMathLinearMatrixIndexException_initWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_NO_SUCH_MATRIX_ENTRY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(row), JavaLangInteger_valueOfWithInt_(column), JavaLangInteger_valueOfWithInt_([self getRowDimension]), JavaLangInteger_valueOfWithInt_([self getColumnDimension]) } count:4 type:NSObject_class_()]) autorelease];
  }
}

- (jint)getRowDimension {
  return (data_ == nil) ? 0 : data_->size_;
}

- (jint)getColumnDimension {
  return ((data_ == nil) || (IOSObjectArray_Get(data_, 0) == nil)) ? 0 : ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(data_, 0)))->size_;
}

- (IOSDoubleArray *)operateWithDoubleArray:(IOSDoubleArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(v))->size_ != nCols) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nCols) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:nRows];
  for (jint row = 0; row < nRows; row++) {
    IOSDoubleArray *dataRow = IOSObjectArray_Get(nil_chk(data_), row);
    jdouble sum = 0;
    for (jint i = 0; i < nCols; i++) {
      sum += IOSDoubleArray_Get(nil_chk(dataRow), i) * IOSDoubleArray_Get(v, i);
    }
    *IOSDoubleArray_GetRef(out, row) = sum;
  }
  return out;
}

- (IOSDoubleArray *)preMultiplyWithDoubleArray:(IOSDoubleArray *)v {
  jint nRows = [self getRowDimension];
  jint nCols = [self getColumnDimension];
  if (((IOSDoubleArray *) nil_chk(v))->size_ != nRows) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_VECTOR_LENGTH_MISMATCH(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(v->size_), JavaLangInteger_valueOfWithInt_(nRows) } count:2 type:NSObject_class_()]);
  }
  IOSDoubleArray *out = [IOSDoubleArray arrayWithLength:nCols];
  for (jint col = 0; col < nCols; ++col) {
    jdouble sum = 0;
    for (jint i = 0; i < nRows; ++i) {
      sum += IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), col) * IOSDoubleArray_Get(v, i);
    }
    *IOSDoubleArray_GetRef(out, col) = sum;
  }
  return out;
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint i = 0; i < rows; ++i) {
    IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = 0; j < columns; ++j) {
      *IOSDoubleArray_GetRef(nil_chk(rowI), j) = [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(rowI, j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint i = 0; i < rows; ++i) {
    IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = 0; j < columns; ++j) {
      [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(nil_chk(rowI), j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                         withInt:(jint)startRow
                                                                         withInt:(jint)endRow
                                                                         withInt:(jint)startColumn
                                                                         withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint i = startRow; i <= endRow; ++i) {
    IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = startColumn; j <= endColumn; ++j) {
      *IOSDoubleArray_GetRef(nil_chk(rowI), j) = [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(rowI, j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                           withInt:(jint)startRow
                                                                           withInt:(jint)endRow
                                                                           withInt:(jint)startColumn
                                                                           withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint i = startRow; i <= endRow; ++i) {
    IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
    for (jint j = startColumn; j <= endColumn; ++j) {
      [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(nil_chk(rowI), j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint j = 0; j < columns; ++j) {
    for (jint i = 0; i < rows; ++i) {
      IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
      *IOSDoubleArray_GetRef(nil_chk(rowI), j) = [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(rowI, j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor {
  jint rows = [self getRowDimension];
  jint columns = [self getColumnDimension];
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:rows withInt:columns withInt:0 withInt:rows - 1 withInt:0 withInt:columns - 1];
  for (jint j = 0; j < columns; ++j) {
    for (jint i = 0; i < rows; ++i) {
      [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>)visitor
                                                                            withInt:(jint)startRow
                                                                            withInt:(jint)endRow
                                                                            withInt:(jint)startColumn
                                                                            withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixChangingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint j = startColumn; j <= endColumn; ++j) {
    for (jint i = startRow; i <= endRow; ++i) {
      IOSDoubleArray *rowI = IOSObjectArray_Get(nil_chk(data_), i);
      *IOSDoubleArray_GetRef(nil_chk(rowI), j) = [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(rowI, j)];
    }
  }
  return [visitor end];
}

- (jdouble)walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:(id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>)visitor
                                                                              withInt:(jint)startRow
                                                                              withInt:(jint)endRow
                                                                              withInt:(jint)startColumn
                                                                              withInt:(jint)endColumn {
  OrgApacheCommonsMathLinearMatrixUtils_checkSubMatrixIndexWithOrgApacheCommonsMathLinearAnyMatrix_withInt_withInt_withInt_withInt_(self, startRow, endRow, startColumn, endColumn);
  [((id<OrgApacheCommonsMathLinearRealMatrixPreservingVisitor>) nil_chk(visitor)) startWithInt:[self getRowDimension] withInt:[self getColumnDimension] withInt:startRow withInt:endRow withInt:startColumn withInt:endColumn];
  for (jint j = startColumn; j <= endColumn; ++j) {
    for (jint i = startRow; i <= endRow; ++i) {
      [visitor visitWithInt:i withInt:j withDouble:IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(data_), i)), j)];
    }
  }
  return [visitor end];
}

- (IOSObjectArray *)copyOut {
  return OrgApacheCommonsMathLinearRealMatrixImpl_copyOut(self);
}

- (void)copyInWithDoubleArray2:(IOSObjectArray *)inArg {
  OrgApacheCommonsMathLinearRealMatrixImpl_copyInWithDoubleArray2_(self, inArg);
}

- (void)dealloc {
  RELEASE_(data_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "RealMatrixImpl", NULL, 0x1, NULL, NULL },
    { "initWithInt:withInt:", "RealMatrixImpl", NULL, 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "initWithDoubleArray2:", "RealMatrixImpl", NULL, 0x1, "Ljava.lang.IllegalArgumentException;Ljava.lang.NullPointerException;", NULL },
    { "initWithDoubleArray2:withBoolean:", "RealMatrixImpl", NULL, 0x1, "Ljava.lang.IllegalArgumentException;Ljava.lang.NullPointerException;", NULL },
    { "initWithDoubleArray:", "RealMatrixImpl", NULL, 0x1, NULL, NULL },
    { "createMatrixWithInt:withInt:", "createMatrix", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "addWithOrgApacheCommonsMathLinearRealMatrix:", "add", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "addWithOrgApacheCommonsMathLinearRealMatrixImpl:", "add", "Lorg.apache.commons.math.linear.RealMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealMatrix:", "subtract", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "subtractWithOrgApacheCommonsMathLinearRealMatrixImpl:", "subtract", "Lorg.apache.commons.math.linear.RealMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearRealMatrix:", "multiply", "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "multiplyWithOrgApacheCommonsMathLinearRealMatrixImpl:", "multiply", "Lorg.apache.commons.math.linear.RealMatrixImpl;", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "getData", NULL, "[[D", 0x1, NULL, NULL },
    { "getDataRef", NULL, "[[D", 0x1, NULL, NULL },
    { "setSubMatrixWithDoubleArray2:withInt:withInt:", "setSubMatrix", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getEntryWithInt:withInt:", "getEntry", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "setEntryWithInt:withInt:withDouble:", "setEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "addToEntryWithInt:withInt:withDouble:", "addToEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "multiplyEntryWithInt:withInt:withDouble:", "multiplyEntry", "V", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;", NULL },
    { "getRowDimension", NULL, "I", 0x1, NULL, NULL },
    { "getColumnDimension", NULL, "I", 0x1, NULL, NULL },
    { "operateWithDoubleArray:", "operate", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "preMultiplyWithDoubleArray:", "preMultiply", "[D", 0x1, "Ljava.lang.IllegalArgumentException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInRowOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInRowOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixChangingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "walkInColumnOrderWithOrgApacheCommonsMathLinearRealMatrixPreservingVisitor:withInt:withInt:withInt:withInt:", "walkInColumnOrder", "D", 0x1, "Lorg.apache.commons.math.linear.MatrixIndexException;Lorg.apache.commons.math.linear.MatrixVisitorException;", NULL },
    { "copyOut", NULL, "[[D", 0x2, NULL, NULL },
    { "copyInWithDoubleArray2:", "copyIn", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathLinearRealMatrixImpl_serialVersionUID },
    { "data_", NULL, 0x4, "[[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearRealMatrixImpl = { 2, "RealMatrixImpl", "org.apache.commons.math.linear", NULL, 0x1, 34, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearRealMatrixImpl;
}

@end

void OrgApacheCommonsMathLinearRealMatrixImpl_init(OrgApacheCommonsMathLinearRealMatrixImpl *self) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
}

OrgApacheCommonsMathLinearRealMatrixImpl *new_OrgApacheCommonsMathLinearRealMatrixImpl_init() {
  OrgApacheCommonsMathLinearRealMatrixImpl *self = [OrgApacheCommonsMathLinearRealMatrixImpl alloc];
  OrgApacheCommonsMathLinearRealMatrixImpl_init(self);
  return self;
}

void OrgApacheCommonsMathLinearRealMatrixImpl_initWithInt_withInt_(OrgApacheCommonsMathLinearRealMatrixImpl *self, jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_initWithInt_withInt_(self, rowDimension, columnDimension);
  OrgApacheCommonsMathLinearRealMatrixImpl_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ rowDimension, columnDimension }]);
}

OrgApacheCommonsMathLinearRealMatrixImpl *new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithInt_withInt_(jint rowDimension, jint columnDimension) {
  OrgApacheCommonsMathLinearRealMatrixImpl *self = [OrgApacheCommonsMathLinearRealMatrixImpl alloc];
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithInt_withInt_(self, rowDimension, columnDimension);
  return self;
}

void OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_(OrgApacheCommonsMathLinearRealMatrixImpl *self, IOSObjectArray *d) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
  OrgApacheCommonsMathLinearRealMatrixImpl_copyInWithDoubleArray2_(self, d);
}

OrgApacheCommonsMathLinearRealMatrixImpl *new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_(IOSObjectArray *d) {
  OrgApacheCommonsMathLinearRealMatrixImpl *self = [OrgApacheCommonsMathLinearRealMatrixImpl alloc];
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_(self, d);
  return self;
}

void OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(OrgApacheCommonsMathLinearRealMatrixImpl *self, IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
  if (copyArray) {
    OrgApacheCommonsMathLinearRealMatrixImpl_copyInWithDoubleArray2_(self, d);
  }
  else {
    if (d == nil) {
      @throw [new_JavaLangNullPointerException_init() autorelease];
    }
    jint nRows = ((IOSObjectArray *) nil_chk(d))->size_;
    if (nRows == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_ROW(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    jint nCols = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, 0)))->size_;
    if (nCols == 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_AT_LEAST_ONE_COLUMN(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    for (jint r = 1; r < nRows; r++) {
      if (((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_ != nCols) {
        @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_DIFFERENT_ROWS_LENGTHS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(nCols), JavaLangInteger_valueOfWithInt_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(d, r)))->size_) } count:2 type:NSObject_class_()]);
      }
    }
    OrgApacheCommonsMathLinearRealMatrixImpl_set_data_(self, d);
  }
}

OrgApacheCommonsMathLinearRealMatrixImpl *new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(IOSObjectArray *d, jboolean copyArray) {
  OrgApacheCommonsMathLinearRealMatrixImpl *self = [OrgApacheCommonsMathLinearRealMatrixImpl alloc];
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray2_withBoolean_(self, d, copyArray);
  return self;
}

void OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray_(OrgApacheCommonsMathLinearRealMatrixImpl *self, IOSDoubleArray *v) {
  OrgApacheCommonsMathLinearAbstractRealMatrix_init(self);
  jint nRows = ((IOSDoubleArray *) nil_chk(v))->size_;
  OrgApacheCommonsMathLinearRealMatrixImpl_setAndConsume_data_(self, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ nRows, 1 }]);
  for (jint row = 0; row < nRows; row++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(self->data_, row)), 0) = IOSDoubleArray_Get(v, row);
  }
}

OrgApacheCommonsMathLinearRealMatrixImpl *new_OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray_(IOSDoubleArray *v) {
  OrgApacheCommonsMathLinearRealMatrixImpl *self = [OrgApacheCommonsMathLinearRealMatrixImpl alloc];
  OrgApacheCommonsMathLinearRealMatrixImpl_initWithDoubleArray_(self, v);
  return self;
}

IOSObjectArray *OrgApacheCommonsMathLinearRealMatrixImpl_copyOut(OrgApacheCommonsMathLinearRealMatrixImpl *self) {
  jint nRows = [self getRowDimension];
  IOSObjectArray *out = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ nRows, [self getColumnDimension] }];
  for (jint i = 0; i < nRows; i++) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(IOSObjectArray_Get(nil_chk(self->data_), i), 0, IOSObjectArray_Get(out, i), 0, ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(self->data_, i)))->size_);
  }
  return out;
}

void OrgApacheCommonsMathLinearRealMatrixImpl_copyInWithDoubleArray2_(OrgApacheCommonsMathLinearRealMatrixImpl *self, IOSObjectArray *inArg) {
  [self setSubMatrixWithDoubleArray2:inArg withInt:0 withInt:0];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearRealMatrixImpl)
