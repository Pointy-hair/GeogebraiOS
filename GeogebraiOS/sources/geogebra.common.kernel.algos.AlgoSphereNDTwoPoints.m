//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoSphereNDTwoPoints.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoSphereNDTwoPoints.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"

@interface GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints () {
 @public
  id<GeogebraCommonKernelKernelNDGeoPointND> M_, P_;
  GeogebraCommonKernelKernelNDGeoQuadricND *sphereND_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints, M_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints, P_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints, sphereND_, GeogebraCommonKernelKernelNDGeoQuadricND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_compute(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints *self);

@implementation GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, M, P);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)createSphereNDWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, M, P);
  return self;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(M_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class]));
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:sphereND_];
  [self setDependencies];
}

- (GeogebraCommonKernelKernelNDGeoQuadricND *)getSphereND {
  return sphereND_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getCenter {
  return [self getM];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getM {
  return M_;
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getExternalPoint {
  return [self getP];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_compute(self);
}

- (void)dealloc {
  RELEASE_(M_);
  RELEASE_(P_);
  RELEASE_(sphereND_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoSphereNDTwoPoints", NULL, 0x1, NULL, NULL },
    { "createSphereNDWithGeogebraCommonKernelConstruction:", "createSphereND", "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x404, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoSphereNDTwoPoints", NULL, 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getSphereND", NULL, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", 0x1, NULL, NULL },
    { "getCenter", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getM", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "getExternalPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "M_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "sphereND_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoQuadricND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints = { 2, "AlgoSphereNDTwoPoints", "geogebra.common.kernel.algos", NULL, 0x401, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints;
}

@end

void GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_set_M_(self, M);
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_set_P_(self, P);
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_set_sphereND_(self, [self createSphereNDWithGeogebraCommonKernelConstruction:cons]);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_compute(self);
}

void GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> M, id<GeogebraCommonKernelKernelNDGeoPointND> P) {
  GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, M, P);
  [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setLabelWithNSString:label];
}

void GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints_compute(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints *self) {
  [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(self->sphereND_)) setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:self->M_ withGeogebraCommonKernelKernelNDGeoPointND:self->P_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoSphereNDTwoPoints)
