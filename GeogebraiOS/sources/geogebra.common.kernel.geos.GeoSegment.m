//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoSegment.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/PathMover.h"
#include "geogebra/common/kernel/PathMoverGeneric.h"
#include "geogebra/common/kernel/PathParameter.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoSegment () {
 @public
  jdouble length_;
  jboolean defined_;
  jboolean allowOutlyingIntersections__;
  jboolean keepTypeOnGeometricTransform_;
  JavaLangStringBuilder *sbToString_GeoSegment_;
  jboolean forceSimpleTransform_;
  GeogebraCommonKernelGeosGeoElement *meta_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoSegment, sbToString_GeoSegment_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoSegment, meta_, GeogebraCommonKernelGeosGeoElement *)

__attribute__((unused)) static jdouble GeogebraCommonKernelGeosGeoSegment_getParameterWithDouble_withDouble_(GeogebraCommonKernelGeosGeoSegment *self, jdouble ptx, jdouble pty);

@implementation GeogebraCommonKernelGeosGeoSegment

+ (IOSObjectArray *)getDecoTypes {
  return GeogebraCommonKernelGeosGeoSegment_getDecoTypes();
}

- (void)setDecorationTypeWithInt:(jint)type {
  if (type >= ((IOSObjectArray *) nil_chk(GeogebraCommonKernelGeosGeoSegment_getDecoTypes()))->size_ || type < 0) decorationType_ = GeogebraCommonKernelGeosGeoElement_DECORATION_NONE;
  else decorationType_ = type;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                    withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B {
  GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, c, A, B);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setPointsWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)A
                 withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)B {
  [self setStartPointWithGeogebraCommonKernelGeosGeoPoint:A];
  [self setEndPointWithGeogebraCommonKernelGeosGeoPoint:B];
}

- (void)setTwoPointsInhomCoordsWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)start
                               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)end {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_)) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(start)) getWithInt:1] withDouble:[start getWithInt:2] withDouble:1];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->endPoint_)) setCoordsWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(end)) getWithInt:1] withDouble:[end getWithInt:2] withDouble:1];
  [self setCoordsWithDouble:[start getY] - [end getY] withDouble:[end getX] - [start getX] withDouble:[start getX] * [end getY] - [start getY] * [end getX]];
  [self setPointsWithGeogebraCommonKernelGeosGeoPoint:self->startPoint_ withGeogebraCommonKernelGeosGeoPoint:self->endPoint_];
  [self calcLength];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_SEGMENT();
}

- (GeogebraCommonKernelGeosGeoElement *)copyInternalWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1 {
  GeogebraCommonKernelGeosGeoSegment *seg = [new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons1, (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) copyInternalWithGeogebraCommonKernelConstruction:cons1], [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) copyInternalWithGeogebraCommonKernelConstruction:cons1], [GeogebraCommonKernelGeosGeoPoint class])) autorelease];
  [seg setWithGeogebraCommonKernelGeosGeoElement:self];
  return seg;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setWithGeogebraCommonKernelGeosGeoElement:geo];
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoSegment]) return;
  GeogebraCommonKernelGeosGeoSegment *seg = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoSegment class]);
  length_ = seg->length_;
  defined_ = seg->defined_;
  keepTypeOnGeometricTransform_ = seg->keepTypeOnGeometricTransform_;
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) setWithGeogebraCommonKernelGeosGeoElement:seg->startPoint_];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) setWithGeogebraCommonKernelGeosGeoElement:seg->endPoint_];
}

- (void)setWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)s
           withGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)e
           withGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoVec3D *)line {
  [super setWithGeogebraCommonKernelGeosGeoElement:line];
  [self setStartPointWithGeogebraCommonKernelGeosGeoPoint:s];
  [self setEndPointWithGeogebraCommonKernelGeosGeoPoint:e];
  [self calcLength];
}

- (void)setVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [super setVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoSegment]) {
    GeogebraCommonKernelGeosGeoSegment *seg = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoSegment class]);
    allowOutlyingIntersections__ = seg->allowOutlyingIntersections__;
  }
}

- (void)calcLength {
  defined_ = ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) isFinite] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) isFinite]);
  if (defined_) {
    length_ = [startPoint_ distanceWithGeogebraCommonKernelGeosGeoPoint:endPoint_];
    if (GeogebraCommonKernelKernel_isZeroWithDouble_(length_)) length_ = 0;
  }
  else {
    length_ = JavaLangDouble_NaN;
  }
}

- (jdouble)getLength {
  return length_;
}

- (jboolean)isDefined {
  return defined_;
}

- (void)setUndefined {
  [super setUndefined];
  length_ = JavaLangDouble_NaN;
  defined_ = NO;
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return defined_ && lineThickness_ != 0;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D]) {
    return [geo isEqualWithGeogebraCommonKernelGeosGeoElement:self];
  }
  if (![geo isGeoSegment]) return NO;
  GeogebraCommonKernelGeosGeoSegment *s = (GeogebraCommonKernelGeosGeoSegment *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoSegment class]);
  return (([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) isEqualWithGeogebraCommonKernelGeosGeoElement:s->startPoint_] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) isEqualWithGeogebraCommonKernelGeosGeoElement:s->endPoint_]) || ([startPoint_ isEqualWithGeogebraCommonKernelGeosGeoElement:s->endPoint_] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) isEqualWithGeogebraCommonKernelGeosGeoElement:s->startPoint_]));
}

- (jboolean)isEqualWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)geo {
  return (([((GeogebraCommonKernelGeosGeoPoint *) nil_chk((startPoint_))) isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:[((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(geo)) getStartPoint]] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk((endPoint_))) isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:[geo getEndPoint]]) || ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk((startPoint_))) isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:[geo getEndPoint]] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk((endPoint_))) isEqualPointNDWithGeogebraCommonKernelKernelNDGeoPointND:[geo getStartPoint]]));
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoSegment_)) setLengthWithInt:0];
  [sbToString_GeoSegment_ appendWithNSString:label_];
  [sbToString_GeoSegment_ appendWithNSString:@" = "];
  [sbToString_GeoSegment_ appendWithNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:length_ withGeogebraCommonKernelStringTemplate:tpl]];
  return [sbToString_GeoSegment_ description];
}

- (NSString *)toStringMinimalWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  [((JavaLangStringBuilder *) nil_chk(sbToString_GeoSegment_)) setLengthWithInt:0];
  [sbToString_GeoSegment_ appendWithNSString:[self regrFormatWithDouble:length_]];
  return [sbToString_GeoSegment_ description];
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:length_ withGeogebraCommonKernelStringTemplate:tpl];
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [self getLength]) autorelease];
}

- (jdouble)getDouble {
  return [self getLength];
}

- (jboolean)isConstant {
  return NO;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jboolean)allowOutlyingIntersections {
  return allowOutlyingIntersections__;
}

- (void)setAllowOutlyingIntersectionsWithBoolean:(jboolean)flag {
  allowOutlyingIntersections__ = flag;
}

- (jboolean)keepsTypeOnGeometricTransform {
  return keepTypeOnGeometricTransform_;
}

- (void)setKeepTypeOnGeometricTransformWithBoolean:(jboolean)flag {
  keepTypeOnGeometricTransform_ = flag;
}

- (jboolean)isLimitedPath {
  return YES;
}

- (jboolean)isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p
                                                                 withDouble:(jdouble)eps {
  if (allowOutlyingIntersections__) return [self isOnFullLineWithGeogebraCommonKernelGeosGeoPoint:p withDouble:eps];
  return [self isOnPathWithGeogebraCommonKernelKernelNDGeoPointND:p withDouble:eps];
}

- (GeogebraCommonKernelGeosGeoElement *)getStartPointAsGeoElement {
  return [self getStartPoint];
}

- (GeogebraCommonKernelGeosGeoElement *)getEndPointAsGeoElement {
  return [self getEndPoint];
}

- (jdouble)getPointXWithDouble:(jdouble)parameter {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->inhomX_ + parameter * y_;
}

- (jdouble)getPointYWithDouble:(jdouble)parameter {
  return ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->inhomY_ - parameter * x_;
}

- (void)pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  if (length_ == 0) {
    [P setCoords2DWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->inhomX_ withDouble:startPoint_->inhomY_ withDouble:1];
    [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
    if (!(((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= 0 && pp->t_ <= 1)) {
      pp->t_ = 0.0;
    }
    return;
  }
  [super pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
  if (((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ < 0.0) {
    [P setCoords2DWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->x_ withDouble:startPoint_->y_ withDouble:startPoint_->z_];
    [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
    pp->t_ = 0.0;
  }
  else if (pp->t_ > 1.0) {
    [P setCoords2DWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_))->x_ withDouble:endPoint_->y_ withDouble:endPoint_->z_];
    [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
    pp->t_ = 1.0;
  }
}

- (void)pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
  if (![((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) usePathAndRegionParametersWithGeogebraCommonKernelKernelNDGeoPointND:P]) {
    [self pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:P];
    return;
  }
  GeogebraCommonKernelPathParameter *pp = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) getPathParameter];
  if (length_ == 0) {
    [P setCoords2DWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->inhomX_ withDouble:startPoint_->inhomY_ withDouble:1];
    [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
    if (!(((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ >= 0 && pp->t_ <= 1)) {
      pp->t_ = 0.0;
    }
    return;
  }
  if (((GeogebraCommonKernelPathParameter *) nil_chk(pp))->t_ < 0.0) {
    pp->t_ = 0;
  }
  else if (pp->t_ > 1.0) {
    pp->t_ = 1;
  }
  [P setCoords2DWithDouble:((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_))->inhomX_ + pp->t_ * y_ withDouble:startPoint_->inhomY_ - pp->t_ * x_ withDouble:1];
  [P updateCoordsFrom2DWithBoolean:NO withGeogebraCommonKernelMatrixCoordSys:nil];
}

- (jdouble)getMinParameter {
  return 0;
}

- (jdouble)getMaxParameter {
  return 1;
}

- (id<GeogebraCommonKernelPathMover>)createPathMover {
  return [new_GeogebraCommonKernelPathMoverGeneric_initWithGeogebraCommonKernelPath_(self) autorelease];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<outlyingIntersections val=\""];
  [sb appendWithBoolean:allowOutlyingIntersections__];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<keepTypeOnTransform val=\""];
  [sb appendWithBoolean:keepTypeOnGeometricTransform_];
  [sb appendWithNSString:@"\"/>\n"];
}

- (IOSObjectArray *)createTransformedObjectWithGeogebraCommonKernelTransform:(GeogebraCommonKernelTransform *)t
                                                                withNSString:(NSString *)transformedLabel {
  if (keepTypeOnGeometricTransform_ && [((GeogebraCommonKernelTransform *) nil_chk(t)) isAffine]) {
    IOSObjectArray *points = [IOSObjectArray arrayWithObjects:(id[]){ [self getStartPoint], [self getEndPoint] } count:2 type:GeogebraCommonKernelKernelNDGeoPointND_class_()];
    points = [t transformPointsWithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    GeogebraCommonKernelGeosGeoElement *segment = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) SegmentNDWithNSString:transformedLabel withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(nil_chk(points), 0) withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(points, 1)], [GeogebraCommonKernelGeosGeoElement class]);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(segment)) setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ segment, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 0), [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, 1), [GeogebraCommonKernelGeosGeoElement class]) } count:3 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else if (![((GeogebraCommonKernelTransform *) nil_chk(t)) isAffine]) {
    self->forceSimpleTransform_ = YES;
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ IOSObjectArray_Get(nil_chk([t transformWithGeogebraCommonKernelGeosGeoElement:self withNSString:transformedLabel]), 0) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
  else {
    GeogebraCommonKernelGeosGeoElement *transformedLine = [t getTransformedLineWithGeogebraCommonKernelKernelNDGeoLineND:self];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(transformedLine)) setLabelWithNSString:transformedLabel];
    [transformedLine setVisualStyleForTransformationsWithGeogebraCommonKernelGeosGeoElement:self];
    IOSObjectArray *geos = [IOSObjectArray arrayWithObjects:(id[]){ transformedLine } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
    return geos;
  }
}

- (jboolean)isGeoSegment {
  return YES;
}

- (void)setZero {
  [self setCoordsWithDouble:0 withDouble:1 withDouble:0];
}

- (jboolean)hasDrawable3D {
  return YES;
}

- (GeogebraCommonKernelMatrixCoords *)getLabelPosition {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_([self getPointXWithDouble:0.5], [self getPointYWithDouble:0.5], 0, 1) autorelease];
}

- (jdouble)getParameterWithDouble:(jdouble)ptx
                       withDouble:(jdouble)pty {
  return GeogebraCommonKernelGeosGeoSegment_getParameterWithDouble_withDouble_(self, ptx, pty);
}

- (jdouble)distanceWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  jdouble t = GeogebraCommonKernelGeosGeoSegment_getParameterWithDouble_withDouble_(self, ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p))->inhomX_, p->inhomY_);
  if (t < 0) return [p distanceWithGeogebraCommonKernelGeosGeoPoint:startPoint_];
  if (t > 1) return [p distanceWithGeogebraCommonKernelGeosGeoPoint:endPoint_];
  return [super distanceWithGeogebraCommonKernelGeosGeoPoint:p];
}

- (jdouble)distanceWithDouble:(jdouble)x
                   withDouble:(jdouble)y {
  jdouble t = GeogebraCommonKernelGeosGeoSegment_getParameterWithDouble_withDouble_(self, x, y);
  if (t < 0) return [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) distanceWithDouble:x withDouble:y];
  if (t > 1) return [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) distanceWithDouble:x withDouble:y];
  return [super distanceWithDouble:x withDouble:y];
}

- (jboolean)isOnPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Pnd
                                              withDouble:(jdouble)eps {
  GeogebraCommonKernelMatrixCoords *P2d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  if (![super isOnPathWithGeogebraCommonKernelMatrixCoords:P2d withDouble:eps]) return NO;
  return [self respectLimitedPathWithGeogebraCommonKernelMatrixCoords:P2d withDouble:eps];
}

- (jboolean)respectLimitedPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Pnd
                                                        withDouble:(jdouble)eps {
  GeogebraCommonKernelMatrixCoords *P2d = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Pnd)) getCoordsIn2DView];
  GeogebraCommonKernelPathParameter *pp = [self getTempPathParameter];
  [self doPointChangedWithGeogebraCommonKernelMatrixCoords:P2d withGeogebraCommonKernelPathParameter:pp];
  jdouble t = [((GeogebraCommonKernelPathParameter *) nil_chk(pp)) getT];
  return t >= -eps && t <= 1 + eps;
}

+ (jboolean)checkOnPathWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)segStart
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)segEnd
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
                                                withBoolean:(jboolean)checkOnFullLine
                                                 withDouble:(jdouble)eps {
  return GeogebraCommonKernelGeosGeoSegment_checkOnPathWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withBoolean_withDouble_(segStart, segEnd, point, checkOnFullLine, eps);
}

- (jboolean)isAllEndpointsLabelsSet {
  return !forceSimpleTransform_ && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) isLabelSet] && [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) isLabelSet];
}

- (void)modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                         withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)Q {
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = (GeogebraCommonKernelAlgosAlgoJoinPointsSegment *) check_class_cast([self getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoJoinPointsSegment class]);
  [((GeogebraCommonKernelAlgosAlgoJoinPointsSegment *) nil_chk(algo)) modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P, [GeogebraCommonKernelGeosGeoPoint class]) withGeogebraCommonKernelKernelNDGeoPointND:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(Q, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (jint)getMetasLength {
  if (meta_ == nil) {
    return 0;
  }
  return 1;
}

- (IOSObjectArray *)getMetas {
  return [IOSObjectArray arrayWithObjects:(id[]){ meta_ } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (void)setFromMetaWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)poly {
  GeogebraCommonKernelGeosGeoSegment_set_meta_(self, poly);
}

- (jboolean)respectLimitedPathWithDouble:(jdouble)parameter {
  return GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(parameter, 0) && GeogebraCommonKernelKernel_isGreaterEqualWithDouble_withDouble_(1, parameter);
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  [super dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  [self calcLength];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal {
  [super rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)phiVal
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [super rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelKernelNDGeoPointND:point];
  GeogebraCommonKernelMatrixCoords *sCoords = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoords];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelMatrixCoords:sCoords];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:phiVal withGeogebraCommonKernelMatrixCoords:sCoords];
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [super mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g1 {
  [super mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g1];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g1];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g1];
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [super translateWithGeogebraCommonKernelMatrixCoords:v];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) translateWithGeogebraCommonKernelMatrixCoords:v];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) translateWithGeogebraCommonKernelMatrixCoords:v];
}

- (void)matrixTransformWithDouble:(jdouble)p
                       withDouble:(jdouble)q
                       withDouble:(jdouble)r
                       withDouble:(jdouble)s {
  [super matrixTransformWithDouble:p withDouble:q withDouble:r withDouble:s];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) matrixTransformWithDouble:p withDouble:q withDouble:r withDouble:s];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) matrixTransformWithDouble:p withDouble:q withDouble:r withDouble:s];
  [self calcLength];
}

- (void)matrixTransformWithDouble:(jdouble)a00
                       withDouble:(jdouble)a01
                       withDouble:(jdouble)a02
                       withDouble:(jdouble)a10
                       withDouble:(jdouble)a11
                       withDouble:(jdouble)a12
                       withDouble:(jdouble)a20
                       withDouble:(jdouble)a21
                       withDouble:(jdouble)a22 {
  [super matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) matrixTransformWithDouble:a00 withDouble:a01 withDouble:a02 withDouble:a10 withDouble:a11 withDouble:a12 withDouble:a20 withDouble:a21 withDouble:a22];
  [self calcLength];
}

- (void)setCoordsWithGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)locusPoint
                 withGeogebraCommonKernelMyPoint:(GeogebraCommonKernelMyPoint *)locusPoint2 {
  jdouble x1 = ((GeogebraCommonKernelMyPoint *) nil_chk(locusPoint))->x_;
  jdouble x2 = ((GeogebraCommonKernelMyPoint *) nil_chk(locusPoint2))->x_;
  jdouble y1 = locusPoint->y_;
  jdouble y2 = locusPoint2->y_;
  [self setCoordsWithDouble:y1 - y2 withDouble:x2 - x1 withDouble:x1 * y2 - y1 * x2];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(startPoint_)) setCoordsWithDouble:x1 withDouble:y1 withDouble:1.0];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(endPoint_)) setCoordsWithDouble:x2 withDouble:y2 withDouble:1.0];
}

- (GeogebraCommonKernelGeosGeoElement *)copyFreeSegment {
  GeogebraCommonKernelGeosGeoPoint *startPoint1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getStartPoint])) copyInternalWithGeogebraCommonKernelConstruction:cons_], [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelGeosGeoPoint *endPoint1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self getEndPoint])) copyInternalWithGeogebraCommonKernelConstruction:cons_], [GeogebraCommonKernelGeosGeoPoint class]);
  GeogebraCommonKernelAlgosAlgoJoinPointsSegment *algo = [new_GeogebraCommonKernelAlgosAlgoJoinPointsSegment_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(cons_, nil, startPoint1, endPoint1) autorelease];
  return [algo getSegment];
}

- (void)dealloc {
  RELEASE_(sbToString_GeoSegment_);
  RELEASE_(meta_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDecoTypes", NULL, "[Ljava.lang.Integer;", 0x19, NULL, NULL },
    { "setDecorationTypeWithInt:", "setDecorationType", "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "GeoSegment", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "GeoSegment", NULL, 0x1, NULL, NULL },
    { "setPointsWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:", "setPoints", "V", 0x1, NULL, NULL },
    { "setTwoPointsInhomCoordsWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setTwoPointsInhomCoords", "V", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "copyInternalWithGeogebraCommonKernelConstruction:", "copyInternal", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoPoint:withGeogebraCommonKernelGeosGeoVec3D:", "set", "V", 0x1, NULL, NULL },
    { "setVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setVisualStyle", "V", 0x1, NULL, NULL },
    { "calcLength", NULL, "V", 0x1, NULL, NULL },
    { "getLength", NULL, "D", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelKernelNDGeoSegmentND:", "isEqual", "Z", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringMinimalWithGeogebraCommonKernelStringTemplate:", "toStringMinimal", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x11, NULL, NULL },
    { "isConstant", NULL, "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "allowOutlyingIntersections", NULL, "Z", 0x1, NULL, NULL },
    { "setAllowOutlyingIntersectionsWithBoolean:", "setAllowOutlyingIntersections", "V", 0x1, NULL, NULL },
    { "keepsTypeOnGeometricTransform", NULL, "Z", 0x1, NULL, NULL },
    { "setKeepTypeOnGeometricTransformWithBoolean:", "setKeepTypeOnGeometricTransform", "V", 0x1, NULL, NULL },
    { "isLimitedPath", NULL, "Z", 0x11, NULL, NULL },
    { "isIntersectionPointIncidentWithGeogebraCommonKernelGeosGeoPoint:withDouble:", "isIntersectionPointIncident", "Z", 0x1, NULL, NULL },
    { "getStartPointAsGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getEndPointAsGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPointXWithDouble:", "getPointX", "D", 0x1, NULL, NULL },
    { "getPointYWithDouble:", "getPointY", "D", 0x1, NULL, NULL },
    { "pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pointChanged", "V", 0x1, NULL, NULL },
    { "pathChangedWithGeogebraCommonKernelKernelNDGeoPointND:", "pathChanged", "V", 0x1, NULL, NULL },
    { "getMinParameter", NULL, "D", 0x1, NULL, NULL },
    { "getMaxParameter", NULL, "D", 0x1, NULL, NULL },
    { "createPathMover", NULL, "Lgeogebra.common.kernel.PathMover;", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "createTransformedObjectWithGeogebraCommonKernelTransform:withNSString:", "createTransformedObject", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "isGeoSegment", NULL, "Z", 0x1, NULL, NULL },
    { "setZero", NULL, "V", 0x1, NULL, NULL },
    { "hasDrawable3D", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelPosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getParameterWithDouble:withDouble:", "getParameter", "D", 0x11, NULL, NULL },
    { "distanceWithGeogebraCommonKernelGeosGeoPoint:", "distance", "D", 0x11, NULL, NULL },
    { "distanceWithDouble:withDouble:", "distance", "D", 0x11, NULL, NULL },
    { "isOnPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "isOnPath", "Z", 0x1, NULL, NULL },
    { "respectLimitedPathWithGeogebraCommonKernelMatrixCoords:withDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "checkOnPathWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withBoolean:withDouble:", "checkOnPath", "Z", 0x9, NULL, NULL },
    { "isAllEndpointsLabelsSet", NULL, "Z", 0x1, NULL, NULL },
    { "modifyInputPointsWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "modifyInputPoints", "V", 0x1, NULL, NULL },
    { "getMetasLength", NULL, "I", 0x1, NULL, NULL },
    { "getMetas", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "setFromMetaWithGeogebraCommonKernelGeosGeoElement:", "setFromMeta", "V", 0x1, NULL, NULL },
    { "respectLimitedPathWithDouble:", "respectLimitedPath", "Z", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x11, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x11, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x11, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x11, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x11, NULL, NULL },
    { "matrixTransformWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "matrixTransform", "V", 0x11, NULL, NULL },
    { "setCoordsWithGeogebraCommonKernelMyPoint:withGeogebraCommonKernelMyPoint:", "setCoords", "V", 0x1, NULL, NULL },
    { "copyFreeSegment", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "length_", NULL, 0x2, "D", NULL, NULL,  },
    { "defined_", NULL, 0x2, "Z", NULL, NULL,  },
    { "allowOutlyingIntersections__", "allowOutlyingIntersections", 0x2, "Z", NULL, NULL,  },
    { "keepTypeOnGeometricTransform_", NULL, 0x2, "Z", NULL, NULL,  },
    { "SEGMENT_DECORATION_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_NONE },
    { "SEGMENT_DECORATION_ONE_TICK_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_ONE_TICK },
    { "SEGMENT_DECORATION_TWO_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_TWO_TICKS },
    { "SEGMENT_DECORATION_THREE_TICKS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_THREE_TICKS },
    { "SEGMENT_DECORATION_ONE_ARROW_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_ONE_ARROW },
    { "SEGMENT_DECORATION_TWO_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_TWO_ARROWS },
    { "SEGMENT_DECORATION_THREE_ARROWS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_THREE_ARROWS },
    { "sbToString_GeoSegment_", "sbToString", 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "forceSimpleTransform_", NULL, 0x2, "Z", NULL, NULL,  },
    { "meta_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoSegment = { 2, "GeoSegment", "geogebra.common.kernel.geos", NULL, 0x11, 69, methods, 14, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoSegment;
}

@end

IOSObjectArray *GeogebraCommonKernelGeosGeoSegment_getDecoTypes() {
  GeogebraCommonKernelGeosGeoSegment_initialize();
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [new_JavaLangInteger_initWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_NONE) autorelease], JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_ONE_TICK), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_TWO_TICKS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_THREE_TICKS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_ONE_ARROW), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_TWO_ARROWS), JavaLangInteger_valueOfWithInt_(GeogebraCommonKernelGeosGeoSegment_SEGMENT_DECORATION_THREE_ARROWS) } count:7 type:JavaLangInteger_class_()];
  return ret;
}

void GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelGeosGeoSegment *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B) {
  GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(self, c);
  [self setPointsWithGeogebraCommonKernelGeosGeoPoint:A withGeogebraCommonKernelGeosGeoPoint:B];
}

GeogebraCommonKernelGeosGeoSegment *new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelGeosGeoPoint *A, GeogebraCommonKernelGeosGeoPoint *B) {
  GeogebraCommonKernelGeosGeoSegment *self = [GeogebraCommonKernelGeosGeoSegment alloc];
  GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_(self, c, A, B);
  return self;
}

void GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoSegment *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(self, c);
  self->allowOutlyingIntersections__ = NO;
  self->keepTypeOnGeometricTransform_ = YES;
  GeogebraCommonKernelGeosGeoSegment_setAndConsume_sbToString_GeoSegment_(self, new_JavaLangStringBuilder_initWithInt_(30));
  GeogebraCommonKernelGeosGeoSegment_set_meta_(self, nil);
  [self setConstructionDefaults];
}

GeogebraCommonKernelGeosGeoSegment *new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoSegment *self = [GeogebraCommonKernelGeosGeoSegment alloc];
  GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jdouble GeogebraCommonKernelGeosGeoSegment_getParameterWithDouble_withDouble_(GeogebraCommonKernelGeosGeoSegment *self, jdouble ptx, jdouble pty) {
  jdouble px = ptx;
  jdouble py = pty;
  jdouble t = -(self->z_ + self->x_ * px + self->y_ * py) / (self->x_ * self->x_ + self->y_ * self->y_);
  px += t * self->x_;
  py += t * self->y_;
  if (JavaLangMath_absWithDouble_(self->x_) <= JavaLangMath_absWithDouble_(self->y_)) {
    return (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_))->z_ * px - self->startPoint_->x_) / (self->y_ * self->startPoint_->z_);
  }
  return (((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->startPoint_))->y_ - self->startPoint_->z_ * py) / (self->x_ * self->startPoint_->z_);
}

jboolean GeogebraCommonKernelGeosGeoSegment_checkOnPathWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withBoolean_withDouble_(GeogebraCommonKernelMatrixCoords *segStart, GeogebraCommonKernelMatrixCoords *segEnd, GeogebraCommonKernelMatrixCoords *point, jboolean checkOnFullLine, jdouble eps) {
  GeogebraCommonKernelGeosGeoSegment_initialize();
  if (checkOnFullLine) {
    if ([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(segEnd)) subWithGeogebraCommonKernelMatrixCoords:segStart])) crossProductWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) subWithGeogebraCommonKernelMatrixCoords:segStart]])) equalsForKernelWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_(0, 0, 0) autorelease] withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) return NO;
  }
  jdouble x1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(segStart)) getInhomCoords])) getWithInt:1];
  jdouble x2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(segEnd)) getInhomCoords])) getWithInt:1];
  jdouble x = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) getInhomCoords])) getWithInt:1];
  if (x1 - eps <= x2 && x2 <= x1 + eps) {
    jdouble y1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([segStart getInhomCoords])) getWithInt:2];
    jdouble y2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([segEnd getInhomCoords])) getWithInt:2];
    jdouble y = [((GeogebraCommonKernelMatrixCoords *) nil_chk([point getInhomCoords])) getWithInt:2];
    if (y1 - eps <= y2 && y2 <= y1 + eps) {
      return YES;
    }
    return (y1 - eps <= y && y <= y2 + eps) || (y2 - eps <= y && y <= y1 + eps);
  }
  return (x1 - eps <= x && x <= x2 + eps) || (x2 - eps <= x && x <= x1 + eps);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoSegment)
