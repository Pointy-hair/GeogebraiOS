//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoCurveCartesian.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoCurveCartesian.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoCurveCartesian.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/kernelND/GeoCurveCartesianND.h"

@interface GeogebraCommonKernelAlgosAlgoCurveCartesian () {
 @public
  IOSObjectArray *coords_;
  id<GeogebraCommonKernelArithmeticNumberValue> from_, to_;
  GeogebraCommonKernelGeosGeoNumeric *localVar_;
  GeogebraCommonKernelKernelNDGeoCurveCartesianND *curve_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCurveCartesian, coords_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCurveCartesian, from_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCurveCartesian, to_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCurveCartesian, localVar_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoCurveCartesian, curve_, GeogebraCommonKernelKernelNDGeoCurveCartesianND *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoCurveCartesian_compute(GeogebraCommonKernelAlgosAlgoCurveCartesian *self);

@implementation GeogebraCommonKernelAlgosAlgoCurveCartesian

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
      withGeogebraCommonKernelArithmeticNumberValueArray:(IOSObjectArray *)coords
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)localVar
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)from
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)to {
  GeogebraCommonKernelAlgosAlgoCurveCartesian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, coords, localVar, from, to);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoCurveCartesianND *)createCurveWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                     withGeogebraCommonKernelArithmeticFunctionArray:(IOSObjectArray *)fun {
  return [new_GeogebraCommonKernelGeosGeoCurveCartesian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunction_withGeogebraCommonKernelArithmeticFunction_(cons, IOSObjectArray_Get(nil_chk(fun), 0), IOSObjectArray_Get(fun, 1)) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CurveCartesian();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(coords_))->size_ + 3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  for (jint i = 0; i < coords_->size_; i++) IOSObjectArray_Set(input_, i, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(coords_, i))) toGeoElement]);
  IOSObjectArray_Set(input_, coords_->size_, localVar_);
  IOSObjectArray_Set(input_, coords_->size_ + 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(from_)) toGeoElement]);
  IOSObjectArray_Set(input_, coords_->size_ + 2, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(to_)) toGeoElement]);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:curve_];
  [self setDependencies];
}

- (GeogebraCommonKernelKernelNDGeoCurveCartesianND *)getCurve {
  return curve_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoCurveCartesian_compute(self);
}

- (void)dealloc {
  RELEASE_(coords_);
  RELEASE_(from_);
  RELEASE_(to_);
  RELEASE_(localVar_);
  RELEASE_(curve_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticNumberValueArray:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoCurveCartesian", NULL, 0x1, NULL, NULL },
    { "createCurveWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelArithmeticFunctionArray:", "createCurve", "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getCurve", NULL, "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coords_", NULL, 0x2, "[Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "from_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "to_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "localVar_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "curve_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoCurveCartesianND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoCurveCartesian = { 2, "AlgoCurveCartesian", "geogebra.common.kernel.algos", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoCurveCartesian;
}

@end

void GeogebraCommonKernelAlgosAlgoCurveCartesian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelAlgosAlgoCurveCartesian *self, GeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *coords, GeogebraCommonKernelGeosGeoNumeric *localVar, id<GeogebraCommonKernelArithmeticNumberValue> from, id<GeogebraCommonKernelArithmeticNumberValue> to) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoCurveCartesian_set_coords_(self, coords);
  GeogebraCommonKernelAlgosAlgoCurveCartesian_set_from_(self, from);
  GeogebraCommonKernelAlgosAlgoCurveCartesian_set_to_(self, to);
  GeogebraCommonKernelAlgosAlgoCurveCartesian_set_localVar_(self, localVar);
  GeogebraCommonKernelArithmeticFunctionVariable *funVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  [funVar setVarStringWithNSString:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(localVar)) getLabelSimple]];
  IOSObjectArray *exp = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(coords))->size_ type:GeogebraCommonKernelArithmeticExpressionNode_class_()];
  IOSObjectArray *fun = [IOSObjectArray arrayWithLength:coords->size_ type:GeogebraCommonKernelArithmeticFunction_class_()];
  for (jint i = 0; i < coords->size_; i++) {
    IOSObjectArray_Set(exp, i, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) convertNumberValueToExpressionNodeWithGeogebraCommonKernelGeosGeoElement:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(coords, i))) toGeoElement]]);
    IOSObjectArray_Set(exp, i, [((id<GeogebraCommonKernelArithmeticExpressionValue>) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(IOSObjectArray_Get(exp, i))) replaceWithGeogebraCommonKernelArithmeticExpressionValue:localVar withGeogebraCommonKernelArithmeticExpressionValue:funVar])) wrap]);
    IOSObjectArray_SetAndConsume(fun, i, new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(IOSObjectArray_Get(exp, i), funVar));
  }
  GeogebraCommonKernelAlgosAlgoCurveCartesian_set_curve_(self, [self createCurveWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelArithmeticFunctionArray:fun]);
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoCurveCartesian_compute(self);
  [((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(self->curve_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoCurveCartesian *new_GeogebraCommonKernelAlgosAlgoCurveCartesian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *cons, NSString *label, IOSObjectArray *coords, GeogebraCommonKernelGeosGeoNumeric *localVar, id<GeogebraCommonKernelArithmeticNumberValue> from, id<GeogebraCommonKernelArithmeticNumberValue> to) {
  GeogebraCommonKernelAlgosAlgoCurveCartesian *self = [GeogebraCommonKernelAlgosAlgoCurveCartesian alloc];
  GeogebraCommonKernelAlgosAlgoCurveCartesian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticNumberValueArray_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(self, cons, label, coords, localVar, from, to);
  return self;
}

void GeogebraCommonKernelAlgosAlgoCurveCartesian_compute(GeogebraCommonKernelAlgosAlgoCurveCartesian *self) {
  for (jint i = 0; i <= 1; i++) {
    GeogebraCommonKernelAlgosAlgoElement *algo = nil;
    if ([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(nil_chk(self->coords_), i))) toGeoElement] != nil) algo = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(IOSObjectArray_Get(self->coords_, i))) toGeoElement]))) getParentAlgorithm];
    if (algo != nil) {
      {
        IOSObjectArray *a__ = [algo getInput];
        GeogebraCommonKernelGeosGeoElement * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          GeogebraCommonKernelGeosGeoElement *geo = *b__++;
          if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined]) {
            [((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(self->curve_)) setUndefined];
            return;
          }
        }
      }
    }
  }
  [((GeogebraCommonKernelKernelNDGeoCurveCartesianND *) nil_chk(self->curve_)) setDefinedWithBoolean:YES];
  [self->curve_ setIntervalWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->from_)) getDouble] withDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->to_)) getDouble]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoCurveCartesian)
