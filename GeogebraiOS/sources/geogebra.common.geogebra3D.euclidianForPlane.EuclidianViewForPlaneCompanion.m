//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/draw/DrawAngle.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/DrawAngleFor3D.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/EuclidianViewFor3DCompanion.h"
#include "geogebra/common/geogebra3D/euclidianForPlane/EuclidianViewForPlaneCompanion.h"
#include "geogebra/common/geogebra3D/main/App3DCompanion.h"
#include "geogebra/common/geogebra3D/main/settings/EuclidianSettingsForPlane.h"
#include "geogebra/common/gui/Layout.h"
#include "geogebra/common/gui/layout/DockManager.h"
#include "geogebra/common/gui/layout/DockPanel.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPlaneND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/ViewCreator.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/AppCompanion.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion () {
 @public
  id<GeogebraCommonKernelKernelNDViewCreator> plane_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *transform_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *planeMatrix_, *transformedMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix *inverseTransformedMatrix_;
  jint transformMirror_;
  jint transformRotate_;
  id<GeogebraCommonGuiLayoutDockPanel> panel_;
  jint id__;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, plane_, id<GeogebraCommonKernelKernelNDViewCreator>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, transform_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, tmpCoords_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, planeMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, transformedMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, inverseTransformedMatrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion, panel_, id<GeogebraCommonGuiLayoutDockPanel>)

@implementation GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion

- (instancetype)initWithGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)view {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

- (void)initViewWithGeogebraCommonKernelKernelNDViewCreator:(id<GeogebraCommonKernelKernelNDViewCreator>)plane {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) setShowAxesWithBoolean:NO withBoolean:NO];
  [self setPlaneWithGeogebraCommonKernelKernelNDViewCreator:plane];
  [self updateMatrix];
  [self updateCenterAndOrientationRegardingView];
  [self updateScaleRegardingView];
}

- (void)setPlaneWithGeogebraCommonKernelKernelNDViewCreator:(id<GeogebraCommonKernelKernelNDViewCreator>)plane {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_plane_(self, plane);
}

- (id<GeogebraCommonKernelKernelNDViewCreator>)getPlane {
  return plane_;
}

- (void)updateScaleRegardingView {
  jdouble newScale = [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D])) getXscale];
  jdouble w = [view_ getWidth] / 2;
  jdouble h = [view_ getHeight] / 2;
  jdouble dx = (w - [view_ getxZero]) * newScale / [view_ getXscale];
  jdouble dy = (h - [view_ getyZero]) * newScale / [view_ getYscale];
  [view_ setCoordSystemWithDouble:w - dx withDouble:h - dy withDouble:newScale withDouble:newScale];
}

- (void)updateCenterAndOrientationRegardingView {
  [self setTransformRegardingView];
  [self updateMatrix];
  id<GeogebraCommonEuclidian3DEuclidianView3DInterface> view3D = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D];
  GeogebraCommonKernelMatrixCoords *c = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-[((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk(view3D)) getXZero], -[view3D getYZero], -[view3D getZZero], 1) autorelease];
  [c projectPlaneInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:[self getMatrix] withGeogebraCommonKernelMatrixCoords:tmpCoords_];
  jint x = [view_ toScreenCoordXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) getX]];
  jint y = [view_ toScreenCoordYWithDouble:[tmpCoords_ getY]];
  [view_ setCoordSystemWithDouble:[view_ getWidth] / 2 - x + [view_ getxZero] withDouble:[view_ getHeight] / 2 - y + [view_ getyZero] withDouble:[view_ getXscale] withDouble:[view_ getYscale]];
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getMatrix {
  return transformedMatrix_;
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getInverseMatrix {
  return inverseTransformedMatrix_;
}

- (void)updateMatrix {
  if (![((id<GeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) isDefined]) {
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_planeMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transformedMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_inverseTransformedMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
    return;
  }
  if (transform_ == nil) GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_planeMatrix_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([plane_ getCoordSys])) getDrawingMatrix]);
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transformedMatrix_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(planeMatrix_)) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_inverseTransformedMatrix_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(transformedMatrix_)) inverse]);
}

- (void)setTransformRegardingView {
  GeogebraCommonKernelMatrixCoords *directionView3D = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getEuclidianView3D], [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getViewDirection];
  GeogebraCommonKernelMatrixCoordMatrix *toScreenMatrix = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *) check_class_cast([((GeogebraCommonMainApp *) nil_chk([view_ getApplication])) getEuclidianView3D], [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class])))) getToScreenMatrix];
  jdouble p = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((id<GeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) getCoordSys])) getNormal])) dotproductWithGeogebraCommonKernelMatrixCoords:directionView3D];
  if (p <= 0) {
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
    transformMirror_ = 1;
  }
  else {
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_Y_());
    transformMirror_ = -1;
  }
  GeogebraCommonKernelMatrixCoordMatrix *m = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(toScreenMatrix)) mulWithGeogebraCommonKernelMatrixCoordMatrix:planeMatrix_];
  jdouble vXx = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m)) getWithInt:1 withInt:1];
  jdouble vXy = [m getWithInt:2 withInt:1];
  jdouble vYx = [m getWithInt:1 withInt:2];
  jdouble vYy = [m getWithInt:2 withInt:2];
  transformRotate_ = 0;
  if (JavaLangMath_absWithDouble_(vXy) > JavaLangMath_absWithDouble_(vXx) && JavaLangMath_absWithDouble_(vYx) > JavaLangMath_absWithDouble_(vYy)) {
    if (vYx * transformMirror_ >= 0) {
      GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_90_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
      transformRotate_ = 90;
    }
    else {
      GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_M90_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
      transformRotate_ = -90;
    }
  }
  else if (vXx * transformMirror_ < 0) {
    GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_O_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
    transformRotate_ = 180;
  }
  [self updateMatrix];
  [view_ updateAllDrawablesWithBoolean:YES];
}

- (void)setTransform {
  if (transformMirror_ == 1) GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_());
  else GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_Y_());
  if (transformRotate_ == 90) GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_90_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
  else if (transformRotate_ == -90) GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_ROTATION_OZ_M90_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
  else if (transformRotate_ == 180) GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_transform_(self, [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonKernelMatrixCoordMatrix4x4_get_MIRROR_O_())) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:transform_]);
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml
                            withBoolean:(jboolean)asPreference {
  if (![((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) isShowing]) {
    GeogebraCommonMainApp_debugWithNSString_(@"view is not showing");
    return;
  }
  [view_ startXMLWithJavaLangStringBuilder:sbxml withBoolean:asPreference];
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<transformForPlane "];
  [sbxml appendWithNSString:@"mirror=\""];
  [sbxml appendWithBoolean:transformMirror_ == -1];
  [sbxml appendWithNSString:@"\""];
  [sbxml appendWithNSString:@" rotate=\""];
  [sbxml appendWithInt:transformRotate_];
  [sbxml appendWithNSString:@"\""];
  [sbxml appendWithNSString:@"/>\n"];
  [view_ endXMLWithJavaLangStringBuilder:sbxml];
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  [super settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:settings];
  GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *evs = (GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) check_class_cast(settings, [GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane class]);
  transformMirror_ = 1;
  if ([((GeogebraCommonGeogebra3DMainSettingsEuclidianSettingsForPlane *) nil_chk(evs)) getMirror]) transformMirror_ = -1;
  transformRotate_ = [evs getRotate];
  [self setTransform];
}

- (void)setXYMinMaxForUpdateSize {
  jdouble c = (((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_))->xmin_ + view_->xmax_) / 2;
  jdouble l = [view_ getWidth] * [view_ getInvXscale] / 2;
  view_->xmin_ = c - l;
  view_->xmax_ = c + l;
  c = (view_->ymin_ + view_->ymax_) / 2;
  l = [view_ getHeight] * [view_ getInvYscale] / 2;
  view_->ymax_ = c + l;
  view_->ymin_ = c - l;
}

- (GeogebraCommonEuclidianDrawDrawAngle *)newDrawAngleWithGeogebraCommonKernelGeosGeoAngle:(GeogebraCommonKernelGeosGeoAngle *)geo {
  return [new_GeogebraCommonGeogebra3DEuclidianFor3DDrawAngleFor3D_initWithGeogebraCommonEuclidianEuclidianView_withGeogebraCommonKernelGeosGeoAngle_(view_, geo) autorelease];
}

- (jboolean)isDefault2D {
  return NO;
}

- (void)updateForPlane {
  [self updateMatrix];
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateAllDrawablesWithBoolean:YES];
}

- (jboolean)isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  switch ([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getGeoClassType] ordinal]) {
    case GeogebraCommonPluginGeoClass_POINT:
    case GeogebraCommonPluginGeoClass_POINT3D:
    case GeogebraCommonPluginGeoClass_SEGMENT:
    case GeogebraCommonPluginGeoClass_SEGMENT3D:
    case GeogebraCommonPluginGeoClass_LINE:
    case GeogebraCommonPluginGeoClass_LINE3D:
    case GeogebraCommonPluginGeoClass_RAY:
    case GeogebraCommonPluginGeoClass_RAY3D:
    case GeogebraCommonPluginGeoClass_VECTOR:
    case GeogebraCommonPluginGeoClass_VECTOR3D:
    case GeogebraCommonPluginGeoClass_POLYGON:
    case GeogebraCommonPluginGeoClass_POLYGON3D:
    case GeogebraCommonPluginGeoClass_CONIC:
    case GeogebraCommonPluginGeoClass_CONIC3D:
    case GeogebraCommonPluginGeoClass_CONICSECTION:
    case GeogebraCommonPluginGeoClass_CONICPART:
    case GeogebraCommonPluginGeoClass_ANGLE3D:
    case GeogebraCommonPluginGeoClass_TEXT:
    case GeogebraCommonPluginGeoClass_LOCUS:
    return [geo isVisibleInView3D];
    case GeogebraCommonPluginGeoClass_ANGLE:
    if ([geo isIndependent]) {
      return NO;
    }
    return [geo isVisibleInView3D];
    default:
    return NO;
  }
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsForViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) projectPlaneWithInverseMatrixWithGeogebraCommonKernelMatrixCoordMatrix:[self getInverseMatrix]];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords {
  return [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([self getMatrix])) mulWithGeogebraCommonKernelMatrixCoords:coords];
}

- (GeogebraCommonKernelMatrixCoords *)getCoordsFromViewWithDouble:(jdouble)x
                                                       withDouble:(jdouble)y {
  return [self getCoordsFromViewWithGeogebraCommonKernelMatrixCoords:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x, y, 0, 1) autorelease]];
}

- (NSString *)getFromPlaneString {
  if (plane_ == nil) return @"";
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((id<GeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) toGeoElement])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
}

- (NSString *)getTranslatedFromPlaneString {
  if (plane_ == nil) return @"";
  if ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:plane_]) {
    return [((GeogebraCommonMainLocalization *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getLocalization])) getPlainWithNSString:@"PlaneA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getLocalization])) getPlainWithNSString:@"PlaneFromA" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
}

- (id<GeogebraCommonKernelKernelNDGeoPlaneND>)getPlaneContaining {
  if ([GeogebraCommonKernelKernelNDGeoPlaneND_class_() isInstance:plane_]) {
    return (id<GeogebraCommonKernelKernelNDGeoPlaneND>) check_protocol_cast(plane_, @protocol(GeogebraCommonKernelKernelNDGeoPlaneND));
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) getManager3D])) Plane3DWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane_];
}

- (id<GeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return plane_;
}

- (jboolean)goToZPlusWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  jdouble dot = [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk([self getDirection])) getDirectionInD3]];
  return (dot > 0) ^ (transformMirror_ == -1);
}

- (jboolean)viewOrientationForClockwiseWithBoolean:(jboolean)clockwise {
  if (transformMirror_ == 1) return clockwise;
  return !clockwise;
}

- (jboolean)isMoveableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([self hasForParentWithGeogebraCommonKernelGeosGeoElement:geo]) {
    return NO;
  }
  return [super isMoveableWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (jboolean)hasForParentWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isParentOfWithGeogebraCommonKernelKernelNDGeoElementND:plane_];
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algoParent {
  JavaUtilArrayList *list = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent)) getFreeInputPoints];
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  for (id<GeogebraCommonKernelKernelNDGeoPointND> __strong p in nil_chk(list)) if (![self hasForParentWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(p, [GeogebraCommonKernelGeosGeoElement class])]) [ret addWithId:p];
  return ret;
}

- (void)getXMLidWithJavaLangStringBuilder:(JavaLangStringBuilder *)sbxml {
  [((JavaLangStringBuilder *) nil_chk(sbxml)) appendWithNSString:@"\t<viewId "];
  [sbxml appendWithNSString:@"plane=\""];
  [sbxml appendWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(plane_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelSimple]];
  [sbxml appendWithNSString:@"\""];
  [sbxml appendWithNSString:@"/>\n"];
}

- (void)paintWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  if (![((id<GeogebraCommonKernelKernelNDViewCreator>) nil_chk(plane_)) isDefined]) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_LIGHT_GRAY_()];
    [g2 fillRectWithInt:0 withInt:0 withInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] withInt:[view_ getHeight]];
    return;
  }
  [super paintWithGeogebraCommonAwtGGraphics2D:g2];
}

- (void)addExistingGeos {
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) notifyAddAllWithGeogebraCommonKernelView:view_];
}

- (void)attachView {
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getKernel])) attachWithGeogebraCommonKernelView:view_];
}

- (jboolean)showGridWithBoolean:(jboolean)show {
  GeogebraCommonMainSettingsEuclidianSettings *settings = [((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getSettings])) getEuclidianForPlaneWithNSString:[self getFromPlaneString]];
  if (settings != nil) [settings setShowGridSettingWithBoolean:show];
  return [super showGridWithBoolean:show];
}

- (void)setDockPanelWithGeogebraCommonGuiLayoutDockPanel:(id<GeogebraCommonGuiLayoutDockPanel>)panel {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_set_panel_(self, panel);
  self->id__ = [((id<GeogebraCommonGuiLayoutDockPanel>) nil_chk(panel)) getViewId];
}

- (jint)getId {
  return id__;
}

- (void)doRemove {
  [self removeFromGuiAndKernel];
  [((GeogebraCommonGeogebra3DMainApp3DCompanion *) nil_chk(((GeogebraCommonGeogebra3DMainApp3DCompanion *) check_class_cast([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getCompanion], [GeogebraCommonGeogebra3DMainApp3DCompanion class])))) removeEuclidianViewForPlaneFromListWithGeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion:self];
}

- (void)removeFromGuiAndKernel {
  [((id<GeogebraCommonGuiLayoutDockPanel>) nil_chk(panel_)) closePanel];
  [((GeogebraCommonGuiLayoutDockManager *) nil_chk([((GeogebraCommonGuiLayout *) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication])) getGuiManager])) getLayout])) getDockManager])) unRegisterPanelWithGeogebraCommonGuiLayoutDockPanel:panel_];
  [((GeogebraCommonKernelKernel *) nil_chk([view_ getKernel])) detachWithGeogebraCommonKernelView:view_];
}

- (void)updateAllDrawablesWithBoolean:(jboolean)repaint {
  [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) updateAllDrawablesWithBoolean:repaint];
}

- (void)dealloc {
  RELEASE_(plane_);
  RELEASE_(transform_);
  RELEASE_(tmpCoords_);
  RELEASE_(planeMatrix_);
  RELEASE_(transformedMatrix_);
  RELEASE_(inverseTransformedMatrix_);
  RELEASE_(panel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianView:", "EuclidianViewForPlaneCompanion", NULL, 0x1, NULL, NULL },
    { "initViewWithGeogebraCommonKernelKernelNDViewCreator:", "initView", "V", 0x1, NULL, NULL },
    { "setPlaneWithGeogebraCommonKernelKernelNDViewCreator:", "setPlane", "V", 0x1, NULL, NULL },
    { "getPlane", NULL, "Lgeogebra.common.kernel.kernelND.ViewCreator;", 0x1, NULL, NULL },
    { "updateScaleRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "updateCenterAndOrientationRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "getMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getInverseMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "updateMatrix", NULL, "V", 0x1, NULL, NULL },
    { "setTransformRegardingView", NULL, "V", 0x1, NULL, NULL },
    { "setTransform", NULL, "V", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "setXYMinMaxForUpdateSize", NULL, "V", 0x1, NULL, NULL },
    { "newDrawAngleWithGeogebraCommonKernelGeosGeoAngle:", "newDrawAngle", "Lgeogebra.common.euclidian.draw.DrawAngle;", 0x4, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "updateForPlane", NULL, "V", 0x1, NULL, NULL },
    { "isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:", "isVisibleInThisView", "Z", 0x1, NULL, NULL },
    { "getCoordsForViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsForView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsFromViewWithGeogebraCommonKernelMatrixCoords:", "getCoordsFromView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getCoordsFromViewWithDouble:withDouble:", "getCoordsFromView", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPlaneContaining", NULL, "Lgeogebra.common.kernel.kernelND.GeoPlaneND;", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "goToZPlusWithGeogebraCommonKernelMatrixCoords:", "goToZPlus", "Z", 0x1, NULL, NULL },
    { "viewOrientationForClockwiseWithBoolean:", "viewOrientationForClockwise", "Z", 0x1, NULL, NULL },
    { "isMoveableWithGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "hasForParentWithGeogebraCommonKernelGeosGeoElement:", "hasForParent", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getXMLidWithJavaLangStringBuilder:", "getXMLid", "V", 0x1, NULL, NULL },
    { "paintWithGeogebraCommonAwtGGraphics2D:", "paint", "V", 0x1, NULL, NULL },
    { "addExistingGeos", NULL, "V", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setDockPanelWithGeogebraCommonGuiLayoutDockPanel:", "setDockPanel", "V", 0x1, NULL, NULL },
    { "getId", NULL, "I", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "removeFromGuiAndKernel", NULL, "V", 0x1, NULL, NULL },
    { "updateAllDrawablesWithBoolean:", "updateAllDrawables", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "plane_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.ViewCreator;", NULL, NULL,  },
    { "transform_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "planeMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "transformedMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "inverseTransformedMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "transformMirror_", NULL, 0x2, "I", NULL, NULL,  },
    { "transformRotate_", NULL, 0x2, "I", NULL, NULL,  },
    { "panel_", NULL, 0x2, "Lgeogebra.common.gui.layout.DockPanel;", NULL, NULL,  },
    { "id__", "id", 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion = { 2, "EuclidianViewForPlaneCompanion", "geogebra.common.geogebra3D.euclidianForPlane", NULL, 0x1, 40, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion;
}

@end

void GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *self, GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonGeogebra3DEuclidianFor3DEuclidianViewFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
}

GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *new_GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianView_(GeogebraCommonEuclidianEuclidianView *view) {
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion *self = [GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion alloc];
  GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion_initWithGeogebraCommonEuclidianEuclidianView_(self, view);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidianForPlaneEuclidianViewForPlaneCompanion)
