//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdSetActiveView.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/scripting/CmdSetActiveView.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelScriptingCmdSetActiveView

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdSetActiveView_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  if (![((GeogebraCommonMainApp *) nil_chk(app_)) isUsingFullGui]) return;
  switch (n) {
    case 1:
    GeogebraCommonKernelCommandsCmdScripting_set_arg_(self, [self resArgsWithGeogebraCommonKernelArithmeticCommand:c]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg_), 0))) isGeoNumeric]) {
      GeogebraCommonKernelGeosGeoNumeric *numGeo = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(IOSObjectArray_Get(arg_, 0), [GeogebraCommonKernelGeosGeoNumeric class]);
      jint view = J2ObjCFpToInt([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(numGeo)) getDouble]);
      switch (view) {
        case 1:
        [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
        break;
        case 2:
        [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        break;
        case -1:
        [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
        break;
      }
      return;
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) isGeoText]) {
      NSString *code = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg_, 0))) toValueStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      if (((jint) [((NSString *) nil_chk(code)) length]) == 1) {
        jchar letter = [code charAtWithInt:0];
        switch (letter) {
          case 'G':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
          break;
          case 'D':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
          break;
          case 'T':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          break;
          case 'S':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_SPREADSHEET];
          break;
          case 'A':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_ALGEBRA];
          break;
          case 'C':
          [app_ setActiveViewWithInt:GeogebraCommonMainApp_VIEW_CAS];
          break;
        }
      }
      return;
    }
    @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg_, 0)];
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdSetActiveView", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x14, "Lgeogebra.common.main.MyError;", NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdSetActiveView = { 2, "CmdSetActiveView", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdSetActiveView;
}

@end

void GeogebraCommonKernelScriptingCmdSetActiveView_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdSetActiveView *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdSetActiveView *new_GeogebraCommonKernelScriptingCmdSetActiveView_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdSetActiveView *self = [GeogebraCommonKernelScriptingCmdSetActiveView alloc];
  GeogebraCommonKernelScriptingCmdSetActiveView_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdSetActiveView)
