//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderAxisRadius.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoCylinderAxisRadius.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoElement3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadric.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputer.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoQuadricComputerCylinder.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius () {
 @public
  id<GeogebraCommonKernelKernelNDGeoLineND> axis_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius, axis_, id<GeogebraCommonKernelKernelNDGeoLineND>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)axis
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, axis, r);
  return self;
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(axis_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  GeogebraCommonKernelMatrixCoords *o = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(axis_)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
  GeogebraCommonKernelMatrixCoords *d = [((GeogebraCommonKernelMatrixCoords *) nil_chk([axis_ getPointInDWithInt:3 withDouble:1])) subWithGeogebraCommonKernelMatrixCoords:o];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(d)) equalsForKernelWithDouble:0 withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  jdouble r = [((GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputer *) nil_chk([self getComputer])) getNumberWithDouble:[((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self getNumber], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]];
  if (JavaLangDouble_isNaNWithDouble_(r)) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setUndefined];
    return;
  }
  [d normalize];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setDefined];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setCylinderWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:d withDouble:r];
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(axis_)) getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([axis_ getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension]];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"CylinderWithAxisARadiusB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(axis_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getNumber])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_CylinderInfinite();
}

- (void)dealloc {
  RELEASE_(axis_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelArithmeticNumberValue:", "AlgoCylinderAxisRadius", NULL, 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "axis_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius = { 2, "AlgoCylinderAxisRadius", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius *self, GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> axis, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputer_(self, c, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(axis, [GeogebraCommonKernelGeosGeoElement class]), r, [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoQuadricComputerCylinder_init() autorelease]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_set_axis_(self, axis);
  [self setInputOutputWithGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast(axis, [GeogebraCommonKernelGeosGeoElement class]), (GeogebraCommonKernelGeosGeoElement *) check_class_cast(r, [GeogebraCommonKernelGeosGeoElement class]) } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()] withGeogebraCommonKernelGeosGeoElementArray:[IOSObjectArray arrayWithObjects:(id[]){ [self getQuadric] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()]];
  [self compute];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) nil_chk([self getQuadric])) setLabelWithNSString:label];
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(GeogebraCommonKernelConstruction *c, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> axis, id<GeogebraCommonKernelArithmeticNumberValue> r) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelArithmeticNumberValue_(self, c, label, axis, r);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoCylinderAxisRadius)
