//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoListForCellRange.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoListForCellRange.h"
#include "geogebra/common/kernel/statistics/AlgoCellRange.h"

@interface GeogebraCommonKernelGeosGeoListForCellRange () {
 @public
  GeogebraCommonKernelStatisticsAlgoCellRange *algo_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoListForCellRange, algo_, GeogebraCommonKernelStatisticsAlgoCellRange *)

@implementation GeogebraCommonKernelGeosGeoListForCellRange

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelStatisticsAlgoCellRange:(GeogebraCommonKernelStatisticsAlgoCellRange *)algo {
  GeogebraCommonKernelGeosGeoListForCellRange_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelStatisticsAlgoCellRange_(self, c, algo);
  return self;
}

- (jboolean)addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algorithm {
  jboolean added = [super addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  [((GeogebraCommonKernelStatisticsAlgoCellRange *) nil_chk(algo_)) addToItemsAlgoUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:algorithm];
  return added;
}

- (void)dealloc {
  RELEASE_(algo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelStatisticsAlgoCellRange:", "GeoListForCellRange", NULL, 0x1, NULL, NULL },
    { "addToUpdateSetsWithGeogebraCommonKernelAlgosAlgoElement:", "addToUpdateSets", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "algo_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.AlgoCellRange;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoListForCellRange = { 2, "GeoListForCellRange", "geogebra.common.kernel.geos", NULL, 0x1, 2, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoListForCellRange;
}

@end

void GeogebraCommonKernelGeosGeoListForCellRange_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelStatisticsAlgoCellRange_(GeogebraCommonKernelGeosGeoListForCellRange *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelStatisticsAlgoCellRange *algo) {
  GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoListForCellRange_set_algo_(self, algo);
}

GeogebraCommonKernelGeosGeoListForCellRange *new_GeogebraCommonKernelGeosGeoListForCellRange_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelStatisticsAlgoCellRange_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelStatisticsAlgoCellRange *algo) {
  GeogebraCommonKernelGeosGeoListForCellRange *self = [GeogebraCommonKernelGeosGeoListForCellRange alloc];
  GeogebraCommonKernelGeosGeoListForCellRange_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelStatisticsAlgoCellRange_(self, c, algo);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoListForCellRange)
