//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/com/vividsolutions/jts/operation/overlay/validate/FuzzyPointLocator.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "com/vividsolutions/jts/algorithm/PointLocator.h"
#include "com/vividsolutions/jts/geom/Coordinate.h"
#include "com/vividsolutions/jts/geom/CoordinateSequence.h"
#include "com/vividsolutions/jts/geom/Geometry.h"
#include "com/vividsolutions/jts/geom/GeometryFactory.h"
#include "com/vividsolutions/jts/geom/LineSegment.h"
#include "com/vividsolutions/jts/geom/LineString.h"
#include "com/vividsolutions/jts/geom/Location.h"
#include "com/vividsolutions/jts/geom/MultiLineString.h"
#include "com/vividsolutions/jts/geom/Polygon.h"
#include "com/vividsolutions/jts/operation/overlay/validate/FuzzyPointLocator.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator () {
 @public
  ComVividsolutionsJtsGeomGeometry *g_;
  jdouble boundaryDistanceTolerance_;
  ComVividsolutionsJtsGeomMultiLineString *linework_;
  ComVividsolutionsJtsAlgorithmPointLocator *ptLocator_;
  ComVividsolutionsJtsGeomLineSegment *seg_;
}

- (ComVividsolutionsJtsGeomMultiLineString *)extractLineworkWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g;

- (jboolean)isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt;

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator, g_, ComVividsolutionsJtsGeomGeometry *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator, linework_, ComVividsolutionsJtsGeomMultiLineString *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator, ptLocator_, ComVividsolutionsJtsAlgorithmPointLocator *)
J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator, seg_, ComVividsolutionsJtsGeomLineSegment *)

__attribute__((unused)) static ComVividsolutionsJtsGeomMultiLineString *ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_extractLineworkWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self, ComVividsolutionsJtsGeomGeometry *g);

__attribute__((unused)) static jboolean ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self, ComVividsolutionsJtsGeomCoordinate *pt);

@interface ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter () {
 @public
  id<JavaUtilList> linework_;
}

@end

J2OBJC_FIELD_SETTER(ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter, linework_, id<JavaUtilList>)

@implementation ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator

- (instancetype)initWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g
                                              withDouble:(jdouble)boundaryDistanceTolerance {
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(self, g, boundaryDistanceTolerance);
  return self;
}

- (jint)getLocationWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  if (ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate_(self, pt)) return ComVividsolutionsJtsGeomLocation_BOUNDARY;
  return [((ComVividsolutionsJtsAlgorithmPointLocator *) nil_chk(ptLocator_)) locateWithComVividsolutionsJtsGeomCoordinate:pt withComVividsolutionsJtsGeomGeometry:g_];
}

- (ComVividsolutionsJtsGeomMultiLineString *)extractLineworkWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  return ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_extractLineworkWithComVividsolutionsJtsGeomGeometry_(self, g);
}

- (jboolean)isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate:(ComVividsolutionsJtsGeomCoordinate *)pt {
  return ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate_(self, pt);
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(linework_);
  RELEASE_(ptLocator_);
  RELEASE_(seg_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithComVividsolutionsJtsGeomGeometry:withDouble:", "FuzzyPointLocator", NULL, 0x1, NULL, NULL },
    { "getLocationWithComVividsolutionsJtsGeomCoordinate:", "getLocation", "I", 0x1, NULL, NULL },
    { "extractLineworkWithComVividsolutionsJtsGeomGeometry:", "extractLinework", "Lcom.vividsolutions.jts.geom.MultiLineString;", 0x2, NULL, NULL },
    { "isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate:", "isWithinToleranceOfBoundary", "Z", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.Geometry;", NULL, NULL,  },
    { "boundaryDistanceTolerance_", NULL, 0x2, "D", NULL, NULL,  },
    { "linework_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.MultiLineString;", NULL, NULL,  },
    { "ptLocator_", NULL, 0x2, "Lcom.vividsolutions.jts.algorithm.PointLocator;", NULL, NULL,  },
    { "seg_", NULL, 0x2, "Lcom.vividsolutions.jts.geom.LineSegment;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator = { 2, "FuzzyPointLocator", "com.vividsolutions.jts.operation.overlay.validate", NULL, 0x1, 4, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator;
}

@end

void ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self, ComVividsolutionsJtsGeomGeometry *g, jdouble boundaryDistanceTolerance) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_setAndConsume_ptLocator_(self, new_ComVividsolutionsJtsAlgorithmPointLocator_init());
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_setAndConsume_seg_(self, new_ComVividsolutionsJtsGeomLineSegment_init());
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_set_g_(self, g);
  self->boundaryDistanceTolerance_ = boundaryDistanceTolerance;
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_set_linework_(self, ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_extractLineworkWithComVividsolutionsJtsGeomGeometry_(self, g));
}

ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *new_ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(ComVividsolutionsJtsGeomGeometry *g, jdouble boundaryDistanceTolerance) {
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self = [ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator alloc];
  ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_initWithComVividsolutionsJtsGeomGeometry_withDouble_(self, g, boundaryDistanceTolerance);
  return self;
}

ComVividsolutionsJtsGeomMultiLineString *ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_extractLineworkWithComVividsolutionsJtsGeomGeometry_(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self, ComVividsolutionsJtsGeomGeometry *g) {
  ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter *extracter = [new_ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_init() autorelease];
  [((ComVividsolutionsJtsGeomGeometry *) nil_chk(g)) applyWithComVividsolutionsJtsGeomGeometryFilter:extracter];
  id<JavaUtilList> linework = [extracter getLinework];
  IOSObjectArray *lines = ComVividsolutionsJtsGeomGeometryFactory_toLineStringArrayWithJavaUtilCollection_(linework);
  return [((ComVividsolutionsJtsGeomGeometryFactory *) nil_chk([g getFactory])) createMultiLineStringWithComVividsolutionsJtsGeomLineStringArray:lines];
}

jboolean ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator_isWithinToleranceOfBoundaryWithComVividsolutionsJtsGeomCoordinate_(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator *self, ComVividsolutionsJtsGeomCoordinate *pt) {
  for (jint i = 0; i < [((ComVividsolutionsJtsGeomMultiLineString *) nil_chk(self->linework_)) getNumGeometries]; i++) {
    ComVividsolutionsJtsGeomLineString *line = (ComVividsolutionsJtsGeomLineString *) check_class_cast([self->linework_ getGeometryNWithInt:i], [ComVividsolutionsJtsGeomLineString class]);
    id<ComVividsolutionsJtsGeomCoordinateSequence> seq = [((ComVividsolutionsJtsGeomLineString *) nil_chk(line)) getCoordinateSequence];
    for (jint j = 0; j < [((id<ComVividsolutionsJtsGeomCoordinateSequence>) nil_chk(seq)) size] - 1; j++) {
      [seq getCoordinateWithInt:j withComVividsolutionsJtsGeomCoordinate:((ComVividsolutionsJtsGeomLineSegment *) nil_chk(self->seg_))->p0_];
      [seq getCoordinateWithInt:j + 1 withComVividsolutionsJtsGeomCoordinate:self->seg_->p1_];
      jdouble dist = [self->seg_ distanceWithComVividsolutionsJtsGeomCoordinate:pt];
      if (dist <= self->boundaryDistanceTolerance_) return YES;
    }
  }
  return NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayValidateFuzzyPointLocator)

@implementation ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter

- (instancetype)init {
  ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_init(self);
  return self;
}

- (void)filterWithComVividsolutionsJtsGeomGeometry:(ComVividsolutionsJtsGeomGeometry *)g {
  if ([g isKindOfClass:[ComVividsolutionsJtsGeomPolygon class]]) {
    ComVividsolutionsJtsGeomPolygon *poly = (ComVividsolutionsJtsGeomPolygon *) check_class_cast(g, [ComVividsolutionsJtsGeomPolygon class]);
    [((id<JavaUtilList>) nil_chk(linework_)) addWithId:[((ComVividsolutionsJtsGeomPolygon *) nil_chk(poly)) getExteriorRing]];
    for (jint i = 0; i < [poly getNumInteriorRing]; i++) {
      [linework_ addWithId:[poly getInteriorRingNWithInt:i]];
    }
  }
}

- (id<JavaUtilList>)getLinework {
  return linework_;
}

- (void)dealloc {
  RELEASE_(linework_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PolygonalLineworkExtracter", NULL, 0x1, NULL, NULL },
    { "filterWithComVividsolutionsJtsGeomGeometry:", "filter", "V", 0x1, NULL, NULL },
    { "getLinework", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "linework_", NULL, 0x2, "Ljava.util.List;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter = { 2, "PolygonalLineworkExtracter", "com.vividsolutions.jts.operation.overlay.validate", NULL, 0x0, 3, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter;
}

@end

void ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_init(ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter *self) {
  NSObject_init(self);
  ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_setAndConsume_linework_(self, new_JavaUtilArrayList_init());
}

ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter *new_ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_init() {
  ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter *self = [ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter alloc];
  ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComVividsolutionsJtsOperationOverlayValidatePolygonalLineworkExtracter)
