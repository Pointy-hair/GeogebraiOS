//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitGrowth.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/statistics/AlgoFitGrowth.h"
#include "geogebra/common/kernel/statistics/RegressionMath.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Math.h"

@interface GeogebraCommonKernelStatisticsAlgoFitGrowth () {
 @public
  GeogebraCommonKernelGeosGeoList *geolist_;
  GeogebraCommonKernelGeosGeoFunction *geofunction_;
  GeogebraCommonKernelStatisticsRegressionMath *regMath_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitGrowth, geolist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitGrowth, geofunction_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitGrowth, regMath_, GeogebraCommonKernelStatisticsRegressionMath *)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitGrowth_compute(GeogebraCommonKernelStatisticsAlgoFitGrowth *self);

@implementation GeogebraCommonKernelStatisticsAlgoFitGrowth

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitGrowth();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geolist_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFitGrowth {
  return geofunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitGrowth_compute(self);
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(geofunction_);
  RELEASE_(regMath_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFitGrowth", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFitGrowth", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitGrowth", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geolist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "regMath_", NULL, 0x2, "Lgeogebra.common.kernel.statistics.RegressionMath;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitGrowth = { 2, "AlgoFitGrowth", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitGrowth;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitGrowth *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitGrowth *new_GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitGrowth *self = [GeogebraCommonKernelStatisticsAlgoFitGrowth alloc];
  GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitGrowth *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitGrowth_setAndConsume_regMath_(self, new_GeogebraCommonKernelStatisticsRegressionMath_init());
  GeogebraCommonKernelStatisticsAlgoFitGrowth_set_geolist_(self, geolist);
  GeogebraCommonKernelStatisticsAlgoFitGrowth_setAndConsume_geofunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitGrowth_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitGrowth *new_GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitGrowth *self = [GeogebraCommonKernelStatisticsAlgoFitGrowth alloc];
  GeogebraCommonKernelStatisticsAlgoFitGrowth_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitGrowth_compute(GeogebraCommonKernelStatisticsAlgoFitGrowth *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  jboolean regok = YES;
  jdouble a, b;
  if (![self->geolist_ isDefined] || (size < 2)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
  regok = [((GeogebraCommonKernelStatisticsRegressionMath *) nil_chk(self->regMath_)) doExpWithGeogebraCommonKernelGeosGeoList:self->geolist_];
  if (regok) {
    a = [self->regMath_ getP1];
    b = [self->regMath_ getP2];
    b = JavaLangMath_expWithDouble_(b);
    GeogebraCommonKernelArithmeticMyDouble *A = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, a) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *B = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, b) autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *X = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    id<GeogebraCommonKernelArithmeticExpressionValue> expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, B, GeogebraCommonPluginOperationEnum_get_POWER(), X) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, A, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr) autorelease];
    GeogebraCommonKernelArithmeticFunction *f = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(node, X) autorelease];
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:f];
    [self->geofunction_ setDefinedWithBoolean:YES];
  }
  else {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitGrowth)
