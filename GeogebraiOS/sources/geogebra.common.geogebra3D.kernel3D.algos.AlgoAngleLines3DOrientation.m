//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3DOrientation.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAngleLines3DOrientation.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAngle3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoAngleLinesND.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation () {
 @public
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation, orientation_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, orientation);
  return self;
}

- (void)setInputWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h
           withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  [super setInputWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_set_orientation_(self, orientation);
}

- (GeogebraCommonKernelGeosGeoAngle *)newGeoAngleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons1 {
  return GeogebraCommonGeogebra3DKernel3DGeosGeoAngle3D_newAngle3DWithDefaultIntervalWithGeogebraCommonKernelConstruction_(cons1);
}

- (void)compute {
  [super compute];
  if (orientation_ == [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace]) {
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) isDefined] || GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoAngle *) nil_chk([self getAngle])) getValue])) {
    return;
  }
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn_)) dotproductWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getDirectionInD3]] < 0) {
    GeogebraCommonKernelGeosGeoAngle *a = [self getAngle];
    [a setValueWithDouble:2 * JavaLangMath_PI - [((GeogebraCommonKernelGeosGeoAngle *) nil_chk(a)) getValue]];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D_set_vn_(self, [vn_ mulWithDouble:-1]);
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"AngleBetweenAB" withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self getg])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk([self geth])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self getg], [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast([self geth], [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(orientation_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:[self getAngle]];
  [self setDependencies];
}

- (void)dealloc {
  RELEASE_(orientation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoAngleLines3DOrientation", NULL, 0x0, NULL, NULL },
    { "setInputWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "setInput", "V", 0x4, NULL, NULL },
    { "newGeoAngleWithGeogebraCommonKernelConstruction:", "newGeoAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "orientation_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation = { 2, "AlgoAngleLines3DOrientation", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, orientation);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelKernelNDGeoLineND> h, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, g, h, orientation);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAngleLines3DOrientation)
