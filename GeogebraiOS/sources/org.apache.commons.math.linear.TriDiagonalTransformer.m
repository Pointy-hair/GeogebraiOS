//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/linear/TriDiagonalTransformer.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/linear/InvalidMatrixException.h"
#include "org/apache/commons/math/linear/MatrixUtils.h"
#include "org/apache/commons/math/linear/NonSquareMatrixException.h"
#include "org/apache/commons/math/linear/RealMatrix.h"
#include "org/apache/commons/math/linear/TriDiagonalTransformer.h"
#include "org/apache/commons/math/util/FastMath.h"

@interface OrgApacheCommonsMathLinearTriDiagonalTransformer () {
 @public
  IOSObjectArray *householderVectors_;
  IOSDoubleArray *main_;
  IOSDoubleArray *secondary_;
  id<OrgApacheCommonsMathLinearRealMatrix> cachedQ_;
  id<OrgApacheCommonsMathLinearRealMatrix> cachedQt_;
  id<OrgApacheCommonsMathLinearRealMatrix> cachedT_;
}

- (void)transform;

@end

J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, householderVectors_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, main_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, secondary_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, cachedQ_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, cachedQt_, id<OrgApacheCommonsMathLinearRealMatrix>)
J2OBJC_FIELD_SETTER(OrgApacheCommonsMathLinearTriDiagonalTransformer, cachedT_, id<OrgApacheCommonsMathLinearRealMatrix>)

__attribute__((unused)) static void OrgApacheCommonsMathLinearTriDiagonalTransformer_transform(OrgApacheCommonsMathLinearTriDiagonalTransformer *self);

@implementation OrgApacheCommonsMathLinearTriDiagonalTransformer

- (instancetype)initWithOrgApacheCommonsMathLinearRealMatrix:(id<OrgApacheCommonsMathLinearRealMatrix>)matrix {
  OrgApacheCommonsMathLinearTriDiagonalTransformer_initWithOrgApacheCommonsMathLinearRealMatrix_(self, matrix);
  return self;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getQ {
  if (cachedQ_ == nil) {
    OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedQ_(self, [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk([self getQT])) transpose]);
  }
  return cachedQ_;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getQT {
  if (cachedQt_ == nil) {
    jint m = ((IOSObjectArray *) nil_chk(householderVectors_))->size_;
    OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedQt_(self, OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(m, m));
    for (jint k = m - 1; k >= 1; --k) {
      IOSDoubleArray *hK = IOSObjectArray_Get(householderVectors_, k - 1);
      jdouble inv = 1.0 / (IOSDoubleArray_Get(nil_chk(secondary_), k - 1) * IOSDoubleArray_Get(nil_chk(hK), k));
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(cachedQt_)) setEntryWithInt:k withInt:k withDouble:1];
      if (IOSDoubleArray_Get(hK, k) != 0.0) {
        jdouble beta = 1.0 / IOSDoubleArray_Get(secondary_, k - 1);
        [cachedQt_ setEntryWithInt:k withInt:k withDouble:1 + beta * IOSDoubleArray_Get(hK, k)];
        for (jint i = k + 1; i < m; ++i) {
          [cachedQt_ setEntryWithInt:k withInt:i withDouble:beta * IOSDoubleArray_Get(hK, i)];
        }
        for (jint j = k + 1; j < m; ++j) {
          beta = 0;
          for (jint i = k + 1; i < m; ++i) {
            beta += [cachedQt_ getEntryWithInt:j withInt:i] * IOSDoubleArray_Get(hK, i);
          }
          beta *= inv;
          [cachedQt_ setEntryWithInt:j withInt:k withDouble:beta * IOSDoubleArray_Get(hK, k)];
          for (jint i = k + 1; i < m; ++i) {
            [cachedQt_ addToEntryWithInt:j withInt:i withDouble:beta * IOSDoubleArray_Get(hK, i)];
          }
        }
      }
    }
    [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(cachedQt_)) setEntryWithInt:0 withInt:0 withDouble:1];
  }
  return cachedQt_;
}

- (id<OrgApacheCommonsMathLinearRealMatrix>)getT {
  if (cachedT_ == nil) {
    jint m = ((IOSDoubleArray *) nil_chk(main_))->size_;
    OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedT_(self, OrgApacheCommonsMathLinearMatrixUtils_createRealMatrixWithInt_withInt_(m, m));
    for (jint i = 0; i < m; ++i) {
      [((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(cachedT_)) setEntryWithInt:i withInt:i withDouble:IOSDoubleArray_Get(main_, i)];
      if (i > 0) {
        [cachedT_ setEntryWithInt:i withInt:i - 1 withDouble:IOSDoubleArray_Get(nil_chk(secondary_), i - 1)];
      }
      if (i < main_->size_ - 1) {
        [cachedT_ setEntryWithInt:i withInt:i + 1 withDouble:IOSDoubleArray_Get(nil_chk(secondary_), i)];
      }
    }
  }
  return cachedT_;
}

- (IOSObjectArray *)getHouseholderVectorsRef {
  return householderVectors_;
}

- (IOSDoubleArray *)getMainDiagonalRef {
  return main_;
}

- (IOSDoubleArray *)getSecondaryDiagonalRef {
  return secondary_;
}

- (void)transform {
  OrgApacheCommonsMathLinearTriDiagonalTransformer_transform(self);
}

- (void)dealloc {
  RELEASE_(householderVectors_);
  RELEASE_(main_);
  RELEASE_(secondary_);
  RELEASE_(cachedQ_);
  RELEASE_(cachedQt_);
  RELEASE_(cachedT_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithOrgApacheCommonsMathLinearRealMatrix:", "TriDiagonalTransformer", NULL, 0x1, "Lorg.apache.commons.math.linear.InvalidMatrixException;", NULL },
    { "getQ", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "getQT", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "getT", NULL, "Lorg.apache.commons.math.linear.RealMatrix;", 0x1, NULL, NULL },
    { "getHouseholderVectorsRef", NULL, "[[D", 0x0, NULL, NULL },
    { "getMainDiagonalRef", NULL, "[D", 0x0, NULL, NULL },
    { "getSecondaryDiagonalRef", NULL, "[D", 0x0, NULL, NULL },
    { "transform", NULL, "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "householderVectors_", NULL, 0x12, "[[D", NULL, NULL,  },
    { "main_", NULL, 0x12, "[D", NULL, NULL,  },
    { "secondary_", NULL, 0x12, "[D", NULL, NULL,  },
    { "cachedQ_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "cachedQt_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
    { "cachedT_", NULL, 0x2, "Lorg.apache.commons.math.linear.RealMatrix;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathLinearTriDiagonalTransformer = { 2, "TriDiagonalTransformer", "org.apache.commons.math.linear", NULL, 0x0, 8, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathLinearTriDiagonalTransformer;
}

@end

void OrgApacheCommonsMathLinearTriDiagonalTransformer_initWithOrgApacheCommonsMathLinearRealMatrix_(OrgApacheCommonsMathLinearTriDiagonalTransformer *self, id<OrgApacheCommonsMathLinearRealMatrix> matrix) {
  NSObject_init(self);
  if (![((id<OrgApacheCommonsMathLinearRealMatrix>) nil_chk(matrix)) isSquare]) {
    @throw [new_OrgApacheCommonsMathLinearNonSquareMatrixException_initWithInt_withInt_([matrix getRowDimension], [matrix getColumnDimension]) autorelease];
  }
  jint m = [matrix getRowDimension];
  OrgApacheCommonsMathLinearTriDiagonalTransformer_set_householderVectors_(self, [matrix getData]);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_setAndConsume_main_(self, [IOSDoubleArray newArrayWithLength:m]);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_setAndConsume_secondary_(self, [IOSDoubleArray newArrayWithLength:m - 1]);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedQ_(self, nil);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedQt_(self, nil);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_set_cachedT_(self, nil);
  OrgApacheCommonsMathLinearTriDiagonalTransformer_transform(self);
}

OrgApacheCommonsMathLinearTriDiagonalTransformer *new_OrgApacheCommonsMathLinearTriDiagonalTransformer_initWithOrgApacheCommonsMathLinearRealMatrix_(id<OrgApacheCommonsMathLinearRealMatrix> matrix) {
  OrgApacheCommonsMathLinearTriDiagonalTransformer *self = [OrgApacheCommonsMathLinearTriDiagonalTransformer alloc];
  OrgApacheCommonsMathLinearTriDiagonalTransformer_initWithOrgApacheCommonsMathLinearRealMatrix_(self, matrix);
  return self;
}

void OrgApacheCommonsMathLinearTriDiagonalTransformer_transform(OrgApacheCommonsMathLinearTriDiagonalTransformer *self) {
  jint m = ((IOSObjectArray *) nil_chk(self->householderVectors_))->size_;
  IOSDoubleArray *z = [IOSDoubleArray arrayWithLength:m];
  for (jint k = 0; k < m - 1; k++) {
    IOSDoubleArray *hK = IOSObjectArray_Get(self->householderVectors_, k);
    *IOSDoubleArray_GetRef(nil_chk(self->main_), k) = IOSDoubleArray_Get(nil_chk(hK), k);
    jdouble xNormSqr = 0;
    for (jint j = k + 1; j < m; ++j) {
      jdouble c = IOSDoubleArray_Get(hK, j);
      xNormSqr += c * c;
    }
    jdouble a = (IOSDoubleArray_Get(hK, k + 1) > 0) ? -OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(xNormSqr) : OrgApacheCommonsMathUtilFastMath_sqrtWithDouble_(xNormSqr);
    *IOSDoubleArray_GetRef(nil_chk(self->secondary_), k) = a;
    if (a != 0.0) {
      *IOSDoubleArray_GetRef(hK, k + 1) -= a;
      jdouble beta = -1 / (a * IOSDoubleArray_Get(hK, k + 1));
      JavaUtilArrays_fillWithDoubleArray_withInt_withInt_withDouble_(z, k + 1, m, 0);
      for (jint i = k + 1; i < m; ++i) {
        IOSDoubleArray *hI = IOSObjectArray_Get(self->householderVectors_, i);
        jdouble hKI = IOSDoubleArray_Get(hK, i);
        jdouble zI = IOSDoubleArray_Get(nil_chk(hI), i) * hKI;
        for (jint j = i + 1; j < m; ++j) {
          jdouble hIJ = IOSDoubleArray_Get(hI, j);
          zI += hIJ * IOSDoubleArray_Get(hK, j);
          *IOSDoubleArray_GetRef(z, j) += hIJ * hKI;
        }
        *IOSDoubleArray_GetRef(z, i) = beta * (IOSDoubleArray_Get(z, i) + zI);
      }
      jdouble gamma = 0;
      for (jint i = k + 1; i < m; ++i) {
        gamma += IOSDoubleArray_Get(z, i) * IOSDoubleArray_Get(hK, i);
      }
      gamma *= beta / 2;
      for (jint i = k + 1; i < m; ++i) {
        *IOSDoubleArray_GetRef(z, i) -= gamma * IOSDoubleArray_Get(hK, i);
      }
      for (jint i = k + 1; i < m; ++i) {
        IOSDoubleArray *hI = IOSObjectArray_Get(self->householderVectors_, i);
        for (jint j = i; j < m; ++j) {
          *IOSDoubleArray_GetRef(nil_chk(hI), j) -= IOSDoubleArray_Get(hK, i) * IOSDoubleArray_Get(z, j) + IOSDoubleArray_Get(z, i) * IOSDoubleArray_Get(hK, j);
        }
      }
    }
  }
  *IOSDoubleArray_GetRef(nil_chk(self->main_), m - 1) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(self->householderVectors_, m - 1)), m - 1);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathLinearTriDiagonalTransformer)
