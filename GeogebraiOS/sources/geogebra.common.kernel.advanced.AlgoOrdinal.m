//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoOrdinal.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/advanced/AlgoOrdinal.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"

@implementation GeogebraCommonKernelAdvancedAlgoOrdinal

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)list {
  GeogebraCommonKernelAdvancedAlgoOrdinal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Ordinal();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, n_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)compute {
  if (![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(n_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:@""];
    [text_ setUndefined];
    return;
  }
  jdouble num = [n_ getDouble];
  if (num < 0 || JavaLangDouble_isNaNWithDouble_(num) || JavaLangDouble_isInfiniteWithDouble_(num)) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:@""];
    [text_ setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:[((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getOrdinalNumberWithInt:J2ObjCFpToInt(num)]];
}

- (void)dealloc {
  RELEASE_(n_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoOrdinal", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "n_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "text_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoOrdinal = { 2, "AlgoOrdinal", "geogebra.common.kernel.advanced", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoOrdinal;
}

@end

void GeogebraCommonKernelAdvancedAlgoOrdinal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAdvancedAlgoOrdinal *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *list) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoOrdinal_set_n_(self, list);
  GeogebraCommonKernelAdvancedAlgoOrdinal_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  [self compute];
  [self->text_ setLabelWithNSString:label];
}

GeogebraCommonKernelAdvancedAlgoOrdinal *new_GeogebraCommonKernelAdvancedAlgoOrdinal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *list) {
  GeogebraCommonKernelAdvancedAlgoOrdinal *self = [GeogebraCommonKernelAdvancedAlgoOrdinal alloc];
  GeogebraCommonKernelAdvancedAlgoOrdinal_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, list);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoOrdinal)
