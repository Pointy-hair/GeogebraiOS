//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygonRegular3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygonRegular3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D () {
 @public
  id<GeogebraCommonKernelKernelNDGeoDirectionND> direction_;
  GeogebraCommonKernelMatrixCoords *coordsA_, *coordsB_, *vAB_, *vDirection_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D, direction_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D, coordsA_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D, coordsB_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D, vAB_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D, vDirection_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A1
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B1
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, c, labels, A1, B1, num, direction);
  return self;
}

- (GeogebraCommonKernelGeosGeoPolygon *)newGeoPolygonWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
}

- (GeogebraCommonKernelGeosGeoElement *)newGeoPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *newPoint = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  [newPoint setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  return newPoint;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) toGeoElement]);
  IOSObjectArray_Set(input_, 3, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(direction_, [GeogebraCommonKernelGeosGeoElement class]));
  for (jint i = 0; i < input_->size_; i++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, i))) addAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
  }
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) addToAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getPoly])) setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
}

- (void)setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)direction {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_set_direction_(self, direction);
}

- (void)setCenterPointWithInt:(jint)n
                   withDouble:(jdouble)beta {
  GeogebraCommonKernelMatrixCoords *m = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(coordsA_)) addWithGeogebraCommonKernelMatrixCoords:coordsB_])) mulWithDouble:0.5];
  GeogebraCommonKernelMatrixCoords *vn = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vDirection_)) crossProduct4WithGeogebraCommonKernelMatrixCoords:vAB_];
  jdouble tanBetaHalf = JavaLangMath_tanWithDouble_(beta) / 2;
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(centerPoint_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(m)) addWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) mulWithDouble:tanBetaHalf]]];
}

- (void)rotateWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(point, [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:rotAngle_ withGeogebraCommonKernelKernelNDGeoPointND:centerPoint_ withGeogebraCommonKernelKernelNDGeoDirectionND:direction_];
}

- (jboolean)checkUnDefinedWithInt:(jint)n {
  jboolean ret = [super checkUnDefinedWithInt:n];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_set_coordsA_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getInhomCoordsInD3]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_set_coordsB_(self, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getInhomCoordsInD3]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_set_vAB_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(coordsB_)) subWithGeogebraCommonKernelMatrixCoords:coordsA_]);
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_set_vDirection_(self, [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(direction_)) getDirectionInD3]);
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(vAB_)) dotproductWithGeogebraCommonKernelMatrixCoords:vDirection_])) {
    [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk([self getPoly])) setUndefined];
    for (jint i = 0; i < [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) size]; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:i])) setUndefined];
    }
    numOld_ = 2;
    return YES;
  }
  return ret;
}

- (void)calcCentroidWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
}

- (void)dealloc {
  RELEASE_(direction_);
  RELEASE_(coordsA_);
  RELEASE_(coordsB_);
  RELEASE_(vAB_);
  RELEASE_(vDirection_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoPolygonRegular3D", NULL, 0x1, NULL, NULL },
    { "newGeoPolygonWithGeogebraCommonKernelConstruction:", "newGeoPolygon", "Lgeogebra.common.kernel.geos.GeoPolygon;", 0x4, NULL, NULL },
    { "newGeoPointWithGeogebraCommonKernelConstruction:", "newGeoPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setDirectionWithGeogebraCommonKernelKernelNDGeoDirectionND:", "setDirection", "V", 0x4, NULL, NULL },
    { "setCenterPointWithInt:withDouble:", "setCenterPoint", "V", 0x4, NULL, NULL },
    { "rotateWithGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x4, NULL, NULL },
    { "checkUnDefinedWithInt:", "checkUnDefined", "Z", 0x4, NULL, NULL },
    { "calcCentroidWithGeogebraCommonKernelGeosGeoPoint:", "calcCentroid", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
    { "coordsA_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "coordsB_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vAB_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "vDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D = { 2, "AlgoPolygonRegular3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> A1, id<GeogebraCommonKernelKernelNDGeoPointND> B1, id<GeogebraCommonKernelArithmeticNumberValue> num, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonKernelAlgosAlgoPolygonRegularND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, c, labels, A1, B1, num, direction);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> A1, id<GeogebraCommonKernelKernelNDGeoPointND> B1, id<GeogebraCommonKernelArithmeticNumberValue> num, id<GeogebraCommonKernelKernelNDGeoDirectionND> direction) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, c, labels, A1, B1, num, direction);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygonRegular3D)
