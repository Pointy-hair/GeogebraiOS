//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/ButtonSizeModel.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/ButtonSizeModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "java/lang/Integer.h"

@interface GeogebraCommonGuiDialogOptionsModelButtonSizeModel () {
 @public
  id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener> listener_;
}

- (GeogebraCommonKernelGeosGeoButton *)getButtonAtWithInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelButtonSizeModel, listener_, id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener>)

__attribute__((unused)) static GeogebraCommonKernelGeosGeoButton *GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(GeogebraCommonGuiDialogOptionsModelButtonSizeModel *self, jint index);

@interface GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelButtonSizeModel

- (instancetype)initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener:(id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener>)listener {
  GeogebraCommonGuiDialogOptionsModelButtonSizeModel_initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener_(self, listener);
  return self;
}

- (GeogebraCommonKernelGeosGeoButton *)getButtonAtWithInt:(jint)index {
  return GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(self, index);
}

- (void)updateProperties {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoButton *geo = GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(self, i);
    [((id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener>) nil_chk(listener_)) updateSizesWithInt:[((GeogebraCommonKernelGeosGeoButton *) nil_chk(geo)) getWidth] withInt:[geo getHeight] withBoolean:[geo isFixed]];
  }
}

- (jboolean)isValidAtWithInt:(jint)index {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) isGeoButton] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getGeoAtWithInt:index])) isGeoTextField];
}

- (void)setSizesFromStringWithNSString:(NSString *)strWidth
                          withNSString:(NSString *)strHeight
                           withBoolean:(jboolean)isFixed {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoButton *geo = GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(self, i);
    [((GeogebraCommonKernelGeosGeoButton *) nil_chk(geo)) setFixedSizeWithBoolean:isFixed];
    if (isFixed) {
      [geo setHeightWithInt:JavaLangInteger_parseIntWithNSString_(strHeight)];
      [geo setWidthWithInt:JavaLangInteger_parseIntWithNSString_(strWidth)];
    }
    else {
      [geo setFixedSizeWithBoolean:NO];
    }
  }
}

- (void)applyChangesWithBoolean:(jboolean)isFixed {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoButton *geo = GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(self, i);
    [((GeogebraCommonKernelGeosGeoButton *) nil_chk(geo)) setFixedSizeWithBoolean:isFixed];
    [((id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener>) nil_chk(listener_)) updateSizesWithInt:[geo getWidth] withInt:[geo getHeight] withBoolean:isFixed];
  }
}

- (void)dealloc {
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener:", "ButtonSizeModel", NULL, 0x1, NULL, NULL },
    { "getButtonAtWithInt:", "getButtonAt", "Lgeogebra.common.kernel.geos.GeoButton;", 0x2, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "setSizesFromStringWithNSString:withNSString:withBoolean:", "setSizesFromString", "V", 0x1, NULL, NULL },
    { "applyChangesWithBoolean:", "applyChanges", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.dialog.options.model.ButtonSizeModel$IButtonSizeListener;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.ButtonSizeModel$IButtonSizeListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelButtonSizeModel = { 2, "ButtonSizeModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelButtonSizeModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelButtonSizeModel_initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener_(GeogebraCommonGuiDialogOptionsModelButtonSizeModel *self, id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener> listener) {
  GeogebraCommonGuiDialogOptionsModelOptionsModel_init(self);
  GeogebraCommonGuiDialogOptionsModelButtonSizeModel_set_listener_(self, listener);
}

GeogebraCommonGuiDialogOptionsModelButtonSizeModel *new_GeogebraCommonGuiDialogOptionsModelButtonSizeModel_initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener_(id<GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener> listener) {
  GeogebraCommonGuiDialogOptionsModelButtonSizeModel *self = [GeogebraCommonGuiDialogOptionsModelButtonSizeModel alloc];
  GeogebraCommonGuiDialogOptionsModelButtonSizeModel_initWithGeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener_(self, listener);
  return self;
}

GeogebraCommonKernelGeosGeoButton *GeogebraCommonGuiDialogOptionsModelButtonSizeModel_getButtonAtWithInt_(GeogebraCommonGuiDialogOptionsModelButtonSizeModel *self, jint index) {
  return (GeogebraCommonKernelGeosGeoButton *) check_class_cast([self getObjectAtWithInt:index], [GeogebraCommonKernelGeosGeoButton class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelButtonSizeModel)

@implementation GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "updateSizesWithInt:withInt:withBoolean:", "updateSizes", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener = { 2, "IButtonSizeListener", "geogebra.common.gui.dialog.options.model", "ButtonSizeModel", 0x609, 1, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelButtonSizeModel_IButtonSizeListener)
