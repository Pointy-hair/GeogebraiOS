//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/locusequ/elements/EquationFreeLine.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/locusequ/EquationPoint.h"
#include "geogebra/common/kernel/locusequ/EquationScope.h"
#include "geogebra/common/kernel/locusequ/SymbolicVector.h"
#include "geogebra/common/kernel/locusequ/elements/EquationFreeLine.h"
#include "geogebra/common/kernel/locusequ/elements/EquationGenericLine.h"

@interface GeogebraCommonKernelLocusequElementsEquationFreeLine () {
 @public
  GeogebraCommonKernelGeosGeoPoint *q_;
  GeogebraCommonKernelLocusequEquationPoint *qequ_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationFreeLine, q_, GeogebraCommonKernelGeosGeoPoint *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelLocusequElementsEquationFreeLine, qequ_, GeogebraCommonKernelLocusequEquationPoint *)

@implementation GeogebraCommonKernelLocusequElementsEquationFreeLine

- (instancetype)initWithGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)line
          withGeogebraCommonKernelLocusequEquationScope:(GeogebraCommonKernelLocusequEquationScope *)scope {
  GeogebraCommonKernelLocusequElementsEquationFreeLine_initWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  return self;
}

- (void)dealloc {
  RELEASE_(q_);
  RELEASE_(qequ_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelGeosGeoLine:withGeogebraCommonKernelLocusequEquationScope:", "EquationFreeLine", NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "q_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
    { "qequ_", NULL, 0x2, "Lgeogebra.common.kernel.locusequ.EquationPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelLocusequElementsEquationFreeLine = { 2, "EquationFreeLine", "geogebra.common.kernel.locusequ.elements", NULL, 0x1, 1, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelLocusequElementsEquationFreeLine;
}

@end

void GeogebraCommonKernelLocusequElementsEquationFreeLine_initWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelLocusequElementsEquationFreeLine *self, GeogebraCommonKernelGeosGeoLine *line, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationGenericLine_initWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  GeogebraCommonKernelGeosGeoPoint *start = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelGeosGeoLine *) nil_chk(line)) getConstruction]) autorelease], *end = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([line getConstruction]) autorelease];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_([line getX])) {
    [start setCoordsWithDouble:0 withDouble:-[line getZ] / [line getY] withDouble:1];
    [end setCoordsWithDouble:1 withDouble:-[line getZ] / [line getY] withDouble:1];
  }
  else {
    [start setCoordsWithDouble:-[line getZ] / [line getX] withDouble:0 withDouble:1];
    [end setCoordsWithDouble:(-[line getZ] - [line getY]) / [line getX] withDouble:1 withDouble:1];
  }
  [start update];
  [end update];
  GeogebraCommonKernelLocusequElementsEquationFreeLine_set_q_(self, start);
  GeogebraCommonKernelLocusequElementsEquationFreeLine_set_qequ_(self, [((GeogebraCommonKernelLocusequEquationScope *) nil_chk([self getScope])) getPointWithGeogebraCommonKernelGeosGeoPoint:self->q_]);
  [self setPointWithGeogebraCommonKernelGeosGeoPoint:end];
  [self setVectorWithGeogebraCommonKernelLocusequSymbolicVector:[new_GeogebraCommonKernelLocusequSymbolicVector_initWithGeogebraCommonKernelLocusequEquationPoint_withGeogebraCommonKernelLocusequEquationPoint_([self getEquationPoint], self->qequ_) autorelease]];
}

GeogebraCommonKernelLocusequElementsEquationFreeLine *new_GeogebraCommonKernelLocusequElementsEquationFreeLine_initWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelLocusequEquationScope_(GeogebraCommonKernelGeosGeoLine *line, GeogebraCommonKernelLocusequEquationScope *scope) {
  GeogebraCommonKernelLocusequElementsEquationFreeLine *self = [GeogebraCommonKernelLocusequElementsEquationFreeLine alloc];
  GeogebraCommonKernelLocusequElementsEquationFreeLine_initWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelLocusequEquationScope_(self, line, scope);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelLocusequElementsEquationFreeLine)
