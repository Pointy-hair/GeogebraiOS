//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/barycentric/AlgoBarycenter.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/barycentric/AlgoBarycenter.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"

@interface GeogebraCommonKernelBarycentricAlgoBarycenter () {
 @public
  GeogebraCommonKernelGeosGeoList *poly_;
  GeogebraCommonKernelGeosGeoList *list_;
  GeogebraCommonKernelGeosGeoPoint *point_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoBarycenter, poly_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoBarycenter, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelBarycentricAlgoBarycenter, point_, GeogebraCommonKernelGeosGeoPoint *)

__attribute__((unused)) static void GeogebraCommonKernelBarycentricAlgoBarycenter_compute(GeogebraCommonKernelBarycentricAlgoBarycenter *self);

@implementation GeogebraCommonKernelBarycentricAlgoBarycenter

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)A
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)B {
  GeogebraCommonKernelBarycentricAlgoBarycenter_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, A, B);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Barycenter();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, poly_);
  IOSObjectArray_Set(input_, 1, list_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:point_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoPoint *)getResult {
  return point_;
}

- (void)compute {
  GeogebraCommonKernelBarycentricAlgoBarycenter_compute(self);
}

- (void)dealloc {
  RELEASE_(poly_);
  RELEASE_(list_);
  RELEASE_(point_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoBarycenter", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "poly_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "point_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelBarycentricAlgoBarycenter = { 2, "AlgoBarycenter", "geogebra.common.kernel.barycentric", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelBarycentricAlgoBarycenter;
}

@end

void GeogebraCommonKernelBarycentricAlgoBarycenter_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelBarycentricAlgoBarycenter *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *A, GeogebraCommonKernelGeosGeoList *B) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelBarycentricAlgoBarycenter_set_poly_(self, A);
  GeogebraCommonKernelBarycentricAlgoBarycenter_set_list_(self, B);
  GeogebraCommonKernelBarycentricAlgoBarycenter_setAndConsume_point_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelBarycentricAlgoBarycenter_compute(self);
  [self->point_ setLabelWithNSString:label];
}

GeogebraCommonKernelBarycentricAlgoBarycenter *new_GeogebraCommonKernelBarycentricAlgoBarycenter_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *A, GeogebraCommonKernelGeosGeoList *B) {
  GeogebraCommonKernelBarycentricAlgoBarycenter *self = [GeogebraCommonKernelBarycentricAlgoBarycenter alloc];
  GeogebraCommonKernelBarycentricAlgoBarycenter_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, A, B);
  return self;
}

void GeogebraCommonKernelBarycentricAlgoBarycenter_compute(GeogebraCommonKernelBarycentricAlgoBarycenter *self) {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->list_)) size];
  if (![self->list_ isDefined] || size == 0) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) setUndefined];
    return;
  }
  if ([self->list_ size] != [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->poly_)) size]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) setUndefined];
    return;
  }
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->list_ getGeoElementForPropertiesDialog])) isGeoNumeric] || ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([self->poly_ getGeoElementForPropertiesDialog])) isGeoPoint]) {
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) setUndefined];
    return;
  }
  jint numberOfVertices = [self->poly_ size];
  jdouble x = 0, y = 0, sum = 0;
  for (jint i = 0; i < numberOfVertices; i++) {
    x += ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->poly_ getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]))))->inhomX_ * [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->list_ getWithInt:i]), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    y += ((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->poly_ getWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]))))->inhomY_ * [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->list_ getWithInt:i]), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
    sum += [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(([self->list_ getWithInt:i]), [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble];
  }
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(self->point_)) setCoordsWithDouble:x / sum withDouble:y / sum withDouble:1];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelBarycentricAlgoBarycenter)
