//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoUnitVector3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoVector3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoUnitVector.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, line);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)line {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, line);
  return self;
}

- (id<GeogebraCommonKernelKernelNDGeoVectorND>)createVectorWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *ret = [new_GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D_initWithGeogebraCommonKernelConstruction_(cons) autorelease];
  return ret;
}

- (void)compute {
  GeogebraCommonKernelMatrixCoords *coords = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(((id<GeogebraCommonKernelKernelNDGeoDirectionND>) check_protocol_cast(inputGeo_, @protocol(GeogebraCommonKernelKernelNDGeoDirectionND))))) getDirectionInD3];
  length_ = [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) norm];
  if (GeogebraCommonKernelKernel_isZeroWithDouble_(length_)) {
    [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(u_)) setUndefined];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D *) check_class_cast(u_, [GeogebraCommonGeogebra3DKernel3DGeosGeoVector3D class])))) setCoordsWithGeogebraCommonKernelMatrixCoords:[coords mulWithDouble:1 / length_]];
  }
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getInputStartPoint {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(inputGeo_)) isGeoLine]) {
    return [((id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(inputGeo_, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) getStartPoint];
  }
  if ([inputGeo_ isGeoVector]) {
    return [((id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(inputGeo_, @protocol(GeogebraCommonKernelKernelNDGeoVectorND))) getStartPoint];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoUnitVector3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoDirectionND:", "AlgoUnitVector3D", NULL, 0x1, NULL, NULL },
    { "createVectorWithGeogebraCommonKernelConstruction:", "createVector", "Lgeogebra.common.kernel.kernelND.GeoVectorND;", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getInputStartPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D = { 2, "AlgoUnitVector3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoDirectionND> line) {
  GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoDirectionND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, label, line);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoDirectionND> line) {
  GeogebraCommonKernelAlgosAlgoUnitVector_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_(self, cons, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class]));
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoDirectionND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelKernelNDGeoDirectionND> line) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, line);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoUnitVector3D)
