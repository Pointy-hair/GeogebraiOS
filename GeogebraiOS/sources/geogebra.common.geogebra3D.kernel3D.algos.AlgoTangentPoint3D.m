//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoIntersectLineIncludedConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoTangentPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoTangentPointND.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/kernelND/AlgoIntersectND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D () {
 @public
  IOSDoubleArray *polarCoords_;
  GeogebraCommonKernelMatrixCoords *polarOrigin_, *polarDirection_;
  GeogebraCommonKernelMatrixCoords *coords2D_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarOrigin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, polarDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D, coords2D_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
              withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

- (void)setPolar {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_setAndConsume_polarCoords_(self, [IOSDoubleArray newArrayWithLength:3]);
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_polar_(self, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_algoIntersect_(self, new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoIntersectLineIncludedConic3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelKernelNDGeoConicND_(cons_, polar_, c_));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:algoIntersect_];
  GeogebraCommonKernelAlgosAlgoTangentPointND_set_tangentPoints_(self, [algoIntersect_ getIntersectionPoints]);
}

- (void)setTangentFromPolarWithInt:(jint)i {
  if (i == 0) {
    [((GeogebraCommonKernelGeosGeoLine *) nil_chk(polar_)) getCoordsWithDoubleArray:polarCoords_];
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_set_polarDirection_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getVectorWithDouble:-IOSDoubleArray_Get(nil_chk(polarCoords_), 1) withDouble:IOSDoubleArray_Get(polarCoords_, 0)]);
    if (GeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(polarCoords_, 0))) {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_set_polarOrigin_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:0 withDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 1)]);
    }
    else {
      GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_set_polarOrigin_(self, [((GeogebraCommonKernelMatrixCoordSys *) nil_chk([c_ getCoordSys])) getPointWithDouble:-IOSDoubleArray_Get(polarCoords_, 2) / IOSDoubleArray_Get(polarCoords_, 0) withDouble:0]);
    }
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), i), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelMatrixCoords:polarOrigin_ withGeogebraCommonKernelMatrixCoords:polarDirection_];
}

- (void)setTangents {
  GeogebraCommonKernelAlgosAlgoTangentPointND_setAndConsume_tangents_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_class_()]);
  IOSObjectArray_SetAndConsume(tangents_, 0, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(tangents_, 1, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:P_];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(tangents_, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:P_];
}

- (jboolean)checkUndefined {
  if ([super checkUndefined]) {
    return YES;
  }
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_set_coords2D_(self, IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelMatrixCoordSys *) nil_chk([((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) getCoordSys])) getNormalProjectionWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P_)) getInhomCoordsInD3]]), 1));
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords2D_)) getZ])) {
    return YES;
  }
  [coords2D_ setZWithDouble:1];
  return NO;
}

- (void)updatePolarLine {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) polarLineWithGeogebraCommonKernelMatrixCoords:coords2D_ withGeogebraCommonKernelGeosGeoLine:polar_];
}

- (jboolean)isIntersectionPointIncident {
  return [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c_)) isIntersectionPointIncidentWithGeogebraCommonKernelMatrixCoords:coords2D_ withDouble:GeogebraCommonKernelKernel_MIN_PRECISION];
}

- (void)updateTangents {
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints_), 0))) isDefined]) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(tangents_), 0))) setUndefined];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 0), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelKernelNDGeoPointND:P_ withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 0)];
  }
  if (![((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(tangentPoints_, 1))) isDefined]) {
    [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(IOSObjectArray_Get(nil_chk(tangents_), 1))) setUndefined];
  }
  else {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(tangents_), 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) setCoordWithGeogebraCommonKernelKernelNDGeoPointND:P_ withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints_, 1)];
  }
}

- (void)initForNearToRelationship {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints_, IOSObjectArray_Get(nil_chk(tangents_), 0), algoIntersect_);
}

+ (void)initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)tangentPoints
                                       withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)tangent
                                 withGeogebraCommonKernelKernelNDAlgoIntersectND:(GeogebraCommonKernelKernelNDAlgoIntersectND *)algoIntersect {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(tangentPoints, tangent, algoIntersect);
}

- (void)dealloc {
  RELEASE_(polarCoords_);
  RELEASE_(polarOrigin_);
  RELEASE_(polarDirection_);
  RELEASE_(coords2D_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "AlgoTangentPoint3D", NULL, 0x1, NULL, NULL },
    { "setPolar", NULL, "V", 0x4, NULL, NULL },
    { "setTangentFromPolarWithInt:", "setTangentFromPolar", "V", 0x4, NULL, NULL },
    { "setTangents", NULL, "V", 0x4, NULL, NULL },
    { "checkUndefined", NULL, "Z", 0x4, NULL, NULL },
    { "updatePolarLine", NULL, "V", 0x4, NULL, NULL },
    { "isIntersectionPointIncident", NULL, "Z", 0x4, NULL, NULL },
    { "updateTangents", NULL, "V", 0x4, NULL, NULL },
    { "initForNearToRelationship", NULL, "V", 0x1, NULL, NULL },
    { "initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDAlgoIntersectND:", "initForNearToRelationship", "V", 0x19, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "polarCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "polarOrigin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "polarDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "coords2D_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D = { 2, "AlgoTangentPoint3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonKernelAlgosAlgoTangentPointND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoPointND> P, GeogebraCommonKernelKernelNDGeoConicND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoConicND_(self, cons, labels, P, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initForNearToRelationshipWithGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelKernelNDAlgoIntersectND_(IOSObjectArray *tangentPoints, id<GeogebraCommonKernelKernelNDGeoLineND> tangent, GeogebraCommonKernelKernelNDAlgoIntersectND *algoIntersect) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D_initialize();
  GeogebraCommonKernelMatrixCoords *firstTangentPoint = [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(tangentPoints), 0))) getInhomCoordsInD3];
  if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(tangent, [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class])))) isOnFullLineWithGeogebraCommonKernelMatrixCoords:firstTangentPoint withDouble:GeogebraCommonKernelKernel_MIN_PRECISION]) {
    [((GeogebraCommonKernelKernelNDAlgoIntersectND *) nil_chk(algoIntersect)) initForNearToRelationship];
    [algoIntersect setIntersectionPointWithInt:0 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast(IOSObjectArray_Get(tangentPoints, 1), [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class])))) setCoordsWithGeogebraCommonKernelMatrixCoords:firstTangentPoint];
    [algoIntersect setIntersectionPointWithInt:1 withGeogebraCommonKernelKernelNDGeoPointND:IOSObjectArray_Get(tangentPoints, 1)];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoTangentPoint3D)
