//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoMedian.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoMedian.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Set.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonKernelAlgosAlgoMedian () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_, *freqList_;
  GeogebraCommonKernelGeosGeoNumeric *median_;
  jint size_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMedian, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMedian, freqList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoMedian, median_, GeogebraCommonKernelGeosGeoNumeric *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoMedian_compute(GeogebraCommonKernelAlgosAlgoMedian *self);

@implementation GeogebraCommonKernelAlgosAlgoMedian

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)freqList {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList, freqList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)freqList {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, freqList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Median();
}

- (void)setInputOutput {
  if (freqList_ == nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, inputList_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, inputList_);
    IOSObjectArray_Set(input_, 1, freqList_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:median_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoNumeric *)getMedian {
  return median_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoMedian_compute(self);
}

+ (JavaLangDouble *)getValueAtWithInt:(jint)index
              withJavaLangDoubleArray:(IOSObjectArray *)val
             withJavaLangIntegerArray:(IOSObjectArray *)freq {
  return GeogebraCommonKernelAlgosAlgoMedian_getValueAtWithInt_withJavaLangDoubleArray_withJavaLangIntegerArray_(index, val, freq);
}

+ (IOSObjectArray *)convertValueFreqListToArraysWithGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
                                                withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)freqList {
  return GeogebraCommonKernelAlgosAlgoMedian_convertValueFreqListToArraysWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(inputList, freqList);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(freqList_);
  RELEASE_(median_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoMedian", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoMedian", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoMedian", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "AlgoMedian", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getMedian", NULL, "Lgeogebra.common.kernel.geos.GeoNumeric;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "getValueAtWithInt:withJavaLangDoubleArray:withJavaLangIntegerArray:", "getValueAt", "Ljava.lang.Double;", 0x9, NULL, NULL },
    { "convertValueFreqListToArraysWithGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:", "convertValueFreqListToArrays", "[Ljava.lang.Object;", 0x9, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "freqList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "median_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "size_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoMedian = { 2, "AlgoMedian", "geogebra.common.kernel.algos", NULL, 0x1, 10, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoMedian;
}

@end

void GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMedian *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMedian *new_GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMedian *self = [GeogebraCommonKernelAlgosAlgoMedian alloc];
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMedian *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *freqList) {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, freqList);
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoMedian *new_GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *freqList) {
  GeogebraCommonKernelAlgosAlgoMedian *self = [GeogebraCommonKernelAlgosAlgoMedian alloc];
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList, freqList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMedian *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, nil);
}

GeogebraCommonKernelAlgosAlgoMedian *new_GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoMedian *self = [GeogebraCommonKernelAlgosAlgoMedian alloc];
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoMedian *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *freqList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoMedian_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoMedian_set_freqList_(self, freqList);
  GeogebraCommonKernelAlgosAlgoMedian_setAndConsume_median_(self, new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoMedian_compute(self);
}

GeogebraCommonKernelAlgosAlgoMedian *new_GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *freqList) {
  GeogebraCommonKernelAlgosAlgoMedian *self = [GeogebraCommonKernelAlgosAlgoMedian alloc];
  GeogebraCommonKernelAlgosAlgoMedian_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self, cons, inputList, freqList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoMedian_compute(GeogebraCommonKernelAlgosAlgoMedian *self) {
  self->size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) size];
  if (![self->inputList_ isDefined] || self->size_ == 0) {
    [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
    return;
  }
  if (self->freqList_ == nil) {
    IOSDoubleArray *sortList = [IOSDoubleArray arrayWithLength:self->size_];
    for (jint i = 0; i < self->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
      if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
        id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
        *IOSDoubleArray_GetRef(sortList, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
      }
      else {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
        return;
      }
    }
    JavaUtilArrays_sortWithDoubleArray_(sortList);
    if (JavaLangMath_floorWithDouble_((jdouble) self->size_ / 2) == self->size_ / 2.0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setValueWithDouble:(IOSDoubleArray_Get(sortList, self->size_ / 2) + IOSDoubleArray_Get(sortList, self->size_ / 2 - 1)) / 2];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setValueWithDouble:IOSDoubleArray_Get(sortList, (self->size_ - 1) / 2)];
    }
  }
  else if ([self->inputList_ size] == [self->freqList_ size]) {
    if (![self->freqList_ isDefined] || !([self->inputList_ size] == [self->freqList_ size] || [self->inputList_ size] == [self->freqList_ size] + 1)) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
      return;
    }
    for (jint i = 0; i < [self->freqList_ size]; i++) {
      if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[self->freqList_ getWithInt:i]]) || [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->freqList_ getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble] < 0) {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
        return;
      }
    }
    for (jint i = 0; i < [self->inputList_ size]; i++) {
      if (!([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:[self->inputList_ getWithInt:i]])) {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
        return;
      }
    }
    IOSObjectArray *obj = GeogebraCommonKernelAlgosAlgoMedian_convertValueFreqListToArraysWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(self->inputList_, self->freqList_);
    IOSObjectArray *v = (IOSObjectArray *) check_class_cast(IOSObjectArray_Get(nil_chk(obj), 0), [IOSObjectArray class]);
    IOSObjectArray *f = (IOSObjectArray *) check_class_cast(IOSObjectArray_Get(obj, 1), [IOSObjectArray class]);
    jint n = [((JavaLangInteger *) nil_chk((JavaLangInteger *) check_class_cast(IOSObjectArray_Get(obj, 2), [JavaLangInteger class]))) intValue];
    if (n == 0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
      return;
    }
    if (JavaLangMath_floorWithDouble_((jdouble) n / 2) == n / 2.0) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setValueWithDouble:([((JavaLangDouble *) nil_chk(GeogebraCommonKernelAlgosAlgoMedian_getValueAtWithInt_withJavaLangDoubleArray_withJavaLangIntegerArray_(n / 2, v, f))) doubleValue] + [((JavaLangDouble *) nil_chk(GeogebraCommonKernelAlgosAlgoMedian_getValueAtWithInt_withJavaLangDoubleArray_withJavaLangIntegerArray_(n / 2 - 1, v, f))) doubleValue]) / 2];
    }
    else {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setValueWithDouble:[((JavaLangDouble *) nil_chk(GeogebraCommonKernelAlgosAlgoMedian_getValueAtWithInt_withJavaLangDoubleArray_withJavaLangIntegerArray_((n - 1) / 2, v, f))) doubleValue]];
    }
  }
  else {
    if (![self->freqList_ isDefined] || !([self->inputList_ size] == [self->freqList_ size] || [self->inputList_ size] == [self->freqList_ size] + 1)) {
      [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
      return;
    }
    jdouble n = 0;
    for (jint i = 0; i < [self->freqList_ size]; i++) {
      n += [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->freqList_ getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    }
    jint cf = 0;
    jint f = 0;
    jdouble lowBound, highBound;
    for (jint i = 0; i < [self->freqList_ size]; i++) {
      lowBound = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->inputList_ getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      highBound = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->inputList_ getWithInt:i + 1], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
      f = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->freqList_ getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
      if (f < 0) {
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setUndefined];
        return;
      }
      if (cf + f >= n / 2) {
        jdouble width = highBound - lowBound;
        [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->median_)) setValueWithDouble:lowBound + width * (n / 2 - cf) / f];
        break;
      }
      cf += f;
    }
  }
}

JavaLangDouble *GeogebraCommonKernelAlgosAlgoMedian_getValueAtWithInt_withJavaLangDoubleArray_withJavaLangIntegerArray_(jint index, IOSObjectArray *val, IOSObjectArray *freq) {
  GeogebraCommonKernelAlgosAlgoMedian_initialize();
  jint cf = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(val))->size_; i++) {
    cf += [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(freq), i))) intValue];
    if (index < cf) {
      return IOSObjectArray_Get(val, i);
    }
  }
  return nil;
}

IOSObjectArray *GeogebraCommonKernelAlgosAlgoMedian_convertValueFreqListToArraysWithGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelGeosGeoList *inputList, GeogebraCommonKernelGeosGeoList *freqList) {
  GeogebraCommonKernelAlgosAlgoMedian_initialize();
  jdouble val;
  jint freq;
  JavaUtilTreeMap *tm = [new_JavaUtilTreeMap_init() autorelease];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(freqList)) size]; i++) {
    val = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList)) getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    freq = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([freqList getWithInt:i], @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble]);
    if ([tm containsKeyWithId:JavaLangDouble_valueOfWithDouble_(val)]) {
      freq += [((JavaLangInteger *) nil_chk([tm getWithId:JavaLangDouble_valueOfWithDouble_(val)])) intValue];
    }
    [tm putWithId:JavaLangDouble_valueOfWithDouble_(val) withId:JavaLangInteger_valueOfWithInt_(freq)];
  }
  IOSObjectArray *v = [((id<JavaUtilSet>) nil_chk([tm keySet])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[tm size] type:JavaLangDouble_class_()]];
  IOSObjectArray *f = [((id<JavaUtilCollection>) nil_chk([tm values])) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[tm size] type:JavaLangInteger_class_()]];
  jint n = 0;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(f))->size_; i++) {
    n += [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(f, i))) intValue];
  }
  IOSObjectArray *obj = [IOSObjectArray arrayWithObjects:(id[]){ v, f, JavaLangInteger_valueOfWithInt_(n) } count:3 type:NSObject_class_()];
  return obj;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoMedian)
