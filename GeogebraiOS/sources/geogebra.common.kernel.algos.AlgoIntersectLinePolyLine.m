//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectLinePolyLine.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPoly.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoVec3D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine () {
 @public
  JavaUtilTreeMap *newCoords_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine, newCoords_, JavaUtilTreeMap *)

@interface GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *this$0_;
}

- (GeogebraCommonKernelGeosGeoPoint *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1, this$0_, GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)

@implementation GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                     withGeogebraCommonKernelGeosGeoPoly:(id<GeogebraCommonKernelGeosGeoPoly>)p {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(self, c, labels, g, p);
  return self;
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) setLabelsWithNSStringArray:labels];
    [outputPoints_ setIndexLabelsWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:0])) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  }
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputPoints {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self) autorelease]) autorelease];
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [GeogebraCommonKernelGeosGeoElement class]));
  [self setDependencies];
}

- (void)intersectionsCoordsWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                             withGeogebraCommonKernelGeosGeoPolyLine:(GeogebraCommonKernelGeosGeoPolyLine *)p
                                                 withJavaUtilTreeMap:(JavaUtilTreeMap *)newCoords {
  jdouble min = [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) getMinParameter];
  jdouble max = [g getMaxParameter];
  GeogebraCommonKernelMatrixCoords *gCoords = [((GeogebraCommonKernelGeosGeoVec3D *) check_class_cast(g, [GeogebraCommonKernelGeosGeoVec3D class])) getCoords];
  for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoPolyLine *) nil_chk(p)) getNumPoints] - 1; i++) {
    GeogebraCommonKernelMatrixCoords *segStart = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([p getPointWithInt:i])) getCoords];
    GeogebraCommonKernelMatrixCoords *segEnd = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([p getPointWithInt:i + 1])) getCoords];
    GeogebraCommonKernelMatrixCoords *coords = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(segStart)) crossProductWithGeogebraCommonKernelMatrixCoords:segEnd])) crossProductWithGeogebraCommonKernelMatrixCoords:gCoords];
    if (GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getLast])) {
      if ([((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class])) isOnPathWithGeogebraCommonKernelMatrixCoords:segStart withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION] && [((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class])) isOnPathWithGeogebraCommonKernelMatrixCoords:segEnd withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithGeogebraCommonKernelMatrixCoords:segStart]) withId:segStart];
        [newCoords putWithId:JavaLangDouble_valueOfWithDouble_([((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithGeogebraCommonKernelMatrixCoords:segEnd]) withId:segEnd];
      }
    }
    else if (GeogebraCommonKernelGeosGeoSegment_checkOnPathWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withBoolean_withDouble_(segStart, segEnd, coords, NO, GeogebraCommonKernelKernel_STANDARD_PRECISION)) {
      jdouble t = [((GeogebraCommonKernelGeosGeoLine *) check_class_cast(g, [GeogebraCommonKernelGeosGeoLine class])) getPossibleParameterWithGeogebraCommonKernelMatrixCoords:coords];
      if (t >= min && t <= max) [((JavaUtilTreeMap *) nil_chk(newCoords)) putWithId:JavaLangDouble_valueOfWithDouble_(t) withId:coords];
    }
  }
}

- (void)compute {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) clear];
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_p_(self, (GeogebraCommonKernelGeosGeoPolyLine *) check_class_cast([((id<GeogebraCommonKernelGeosGeoPoly>) nil_chk(pi_)) getBoundary], [GeogebraCommonKernelGeosGeoPolyLine class]));
  [self intersectionsCoordsWithGeogebraCommonKernelKernelNDGeoLineND:g_ withGeogebraCommonKernelGeosGeoPolyLine:p_ withJavaUtilTreeMap:newCoords_];
  [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputPoints_)) adjustOutputSizeWithInt:[newCoords_ size] > 0 ? [newCoords_ size] : 1];
  jint index = 0;
  for (GeogebraCommonKernelMatrixCoords * __strong coords in nil_chk([newCoords_ values])) {
    id<GeogebraCommonKernelKernelNDGeoPointND> point = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast([outputPoints_ getElementWithInt:index], @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) setCoordsWithGeogebraCommonKernelMatrixCoords:coords withBoolean:NO];
    [point updateCoords];
    index++;
  }
  for (; index < [outputPoints_ size]; index++) {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputPoints_ getElementWithInt:index])) setUndefined];
  }
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionPointOfAB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(pi_, [GeogebraCommonKernelGeosGeoElement class])))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(p_);
  RELEASE_(pi_);
  RELEASE_(outputPoints_);
  RELEASE_(newCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelGeosGeoPoly:", "AlgoIntersectLinePolyLine", NULL, 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
    { "createOutputPoints", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "intersectionsCoordsWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelGeosGeoPolyLine:withJavaUtilTreeMap:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "p_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolyLine;", NULL, NULL,  },
    { "pi_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPoly;", NULL, NULL,  },
    { "outputPoints_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "newCoords_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lgeogebra/common/kernel/Matrix/Coords;>;",  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine = { 2, "AlgoIntersectLinePolyLine", "geogebra.common.kernel.algos", NULL, 0x1, 9, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelGeosGeoPoly> p) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_outputPoints_(self, [self createOutputPoints]);
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_set_pi_(self, p);
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_setAndConsume_newCoords_(self, new_JavaUtilTreeMap_initWithJavaUtilComparator_(GeogebraCommonKernelKernel_DoubleComparatorWithDouble_(GeogebraCommonKernelKernel_STANDARD_PRECISION)));
  [self compute];
  [self setInputOutput];
  [self setLabelsWithNSStringArray:labels];
  [self update];
}

GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, id<GeogebraCommonKernelKernelNDGeoLineND> g, id<GeogebraCommonKernelGeosGeoPoly> p) {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *self = [GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine alloc];
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoLineND_withGeogebraCommonKernelGeosGeoPoly_(self, c, labels, g, p);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine)

@implementation GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1

- (GeogebraCommonKernelGeosGeoPoint *)newElement {
  GeogebraCommonKernelGeosGeoPoint *p = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [p setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [p setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  return p;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *)outer$ {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoPoint;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoIntersectLinePolyLine;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine", "createOutputPoints" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoIntersectLinePolyLine", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 *self = [GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1 alloc];
  GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectLinePolyLine_$1)
