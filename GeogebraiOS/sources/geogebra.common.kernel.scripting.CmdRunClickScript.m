//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/scripting/CmdRunClickScript.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdScripting.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/scripting/CmdRunClickScript.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/EventType.h"
#include "geogebra/common/plugin/script/Script.h"

@implementation GeogebraCommonKernelScriptingCmdRunClickScript

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelScriptingCmdRunClickScript_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (void)performWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *args;
  switch (n) {
    case 1:
    args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) getScriptWithGeogebraCommonPluginEventTypeEnum:GeogebraCommonPluginEventTypeEnum_get_CLICK()] == nil) {
      return;
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(args, 0))) runClickScriptsWithNSString:nil];
    break;
    default:
    @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdRunClickScript", NULL, 0x1, NULL, NULL },
    { "performWithGeogebraCommonKernelArithmeticCommand:", "perform", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelScriptingCmdRunClickScript = { 2, "CmdRunClickScript", "geogebra.common.kernel.scripting", NULL, 0x1, 2, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelScriptingCmdRunClickScript;
}

@end

void GeogebraCommonKernelScriptingCmdRunClickScript_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelScriptingCmdRunClickScript *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdScripting_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelScriptingCmdRunClickScript *new_GeogebraCommonKernelScriptingCmdRunClickScript_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelScriptingCmdRunClickScript *self = [GeogebraCommonKernelScriptingCmdRunClickScript alloc];
  GeogebraCommonKernelScriptingCmdRunClickScript_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelScriptingCmdRunClickScript)
