//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoIntersectPathLinePolygon.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoRay.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/main/Localization.h"
#include "java/lang/Double.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/Comparator.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"

@interface GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon () {
 @public
  jboolean hasLabels_;
  GeogebraCommonKernelMatrixCoords *project1_, *project2_;
  IOSDoubleArray *lineCoords_, *tmp_;
  GeogebraCommonKernelMatrixCoords *project_;
  IOSDoubleArray *parameters_;
}

+ (jboolean)onSegmentWithDouble:(jdouble)t;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, lineCoords_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, tmp_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, project_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon, parameters_, IOSDoubleArray *)

__attribute__((unused)) static jboolean GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(jdouble t);

@interface GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 : NSObject < GeogebraCommonKernelAlgosAlgoElement_elementFactory > {
 @public
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *this$0_;
}

- (GeogebraCommonKernelGeosGeoSegment *)newElement OBJC_METHOD_FAMILY_NONE;

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)outer$;

@end

J2OBJC_EMPTY_STATIC_INIT(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1, this$0_, GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$);

__attribute__((unused)) static GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) NS_RETURNS_RETAINED;

J2OBJC_TYPE_LITERAL_HEADER(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)

@implementation GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)p {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, c, labels, geo, p);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setFirstInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_g_(self, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND)));
}

- (GeogebraCommonKernelGeosGeoElement *)getFirstInput {
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast(g_, [GeogebraCommonKernelGeosGeoElement class]);
}

- (void)setSecondInputWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_p_(self, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class]));
}

- (GeogebraCommonKernelGeosGeoElement *)getSecondInput {
  return p_;
}

- (GeogebraCommonKernelAlgosAlgoElement_OutputHandler *)createOutputSegments {
  return [new_GeogebraCommonKernelAlgosAlgoElement_OutputHandler_initWithGeogebraCommonKernelAlgosAlgoElement_withGeogebraCommonKernelAlgosAlgoElement_elementFactory_(self, [new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self) autorelease]) autorelease];
}

- (void)setSegmentVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)segment {
  if ([((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) size] > 0) {
    GeogebraCommonKernelGeosGeoElement *seg0 = [outputSegments_ getElementWithInt:0];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(segment)) setAllVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:seg0 withBoolean:NO];
    [segment setViewFlagsWithJavaUtilList:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(seg0)) getViewSet]];
    [segment setVisibleInView3DWithGeogebraCommonKernelGeosGeoElement:seg0];
  }
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_IntersectPath();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECTION_CURVE;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [self getFirstInput]);
  IOSObjectArray_Set(input_, 1, [self getSecondInput]);
  [self setDependencies];
}

- (void)setIntersectionLine {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_o1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension]);
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_d1_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([g_ getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o1_]);
}

- (jboolean)checkParameterWithDouble:(jdouble)t1 {
  return [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) respectLimitedPathWithDouble:t1];
}

- (void)intersectionsCoordsWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) getSegments]))->size_; i++) {
    id<GeogebraCommonKernelKernelNDGeoSegmentND> seg = IOSObjectArray_Get(nil_chk([p getSegments]), i);
    if ([((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) isDefined]) {
      GeogebraCommonKernelMatrixCoords *o2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:0])) getInhomCoordsInSameDimension];
      GeogebraCommonKernelMatrixCoords *d2 = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([seg getPointInDWithInt:3 withDouble:1])) getInhomCoordsInSameDimension])) subWithGeogebraCommonKernelMatrixCoords:o2];
      if (project1_ == nil) {
        GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_project1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
        GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_project2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
        GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_lineCoords_(self, [IOSDoubleArray newArrayWithLength:2]);
        GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_tmp_(self, [IOSDoubleArray newArrayWithLength:4]);
      }
      GeogebraCommonKernelMatrixCoordMatrixUtil_nearestPointsFromTwoLinesWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withDoubleArray_withDoubleArray_withDoubleArray_withDoubleArray_(o1_, d1_, o2, d2, ((GeogebraCommonKernelMatrixCoords *) nil_chk(project1_))->val_, ((GeogebraCommonKernelMatrixCoords *) nil_chk(project2_))->val_, lineCoords_, tmp_);
      if (!JavaLangDouble_isNaNWithDouble_(IOSDoubleArray_Get(nil_chk(lineCoords_), 0)) && [project1_ equalsForKernelWithGeogebraCommonKernelMatrixCoords:project2_ withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        jdouble t1 = IOSDoubleArray_Get(lineCoords_, 0);
        jdouble t2 = IOSDoubleArray_Get(lineCoords_, 1);
        if ([self checkParameterWithDouble:t1] && GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(t2)) [self addCoordsWithDouble:t1 withGeogebraCommonKernelMatrixCoords:project1_ withGeogebraCommonKernelKernelNDGeoElementND:seg];
      }
    }
  }
}

+ (jboolean)onSegmentWithDouble:(jdouble)t {
  return GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(t);
}

- (jboolean)checkMidpointWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p
                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)a
                           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)b {
  GeogebraCommonKernelMatrixCoords *midpoint = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(a)) addWithGeogebraCommonKernelMatrixCoords:b])) mulWithDouble:0.5];
  return [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isInRegionWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(midpoint)) getX] withDouble:[midpoint getY]];
}

- (void)addStartEndPoints {
  if ([g_ isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]]) {
    [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getStartPoint])) getInhomCoordsInD2]];
    [newCoords_ putWithId:JavaLangDouble_valueOfWithDouble_(1.0) withId:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([g_ getEndPoint])) getInhomCoordsInD2]];
  }
  else if ([g_ isKindOfClass:[GeogebraCommonKernelGeosGeoRay class]]) [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(0.0) withId:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g_)) getStartPoint])) getInhomCoordsInD2]];
}

- (void)addPolygonPoints {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p_)) getPoints]))->size_; i++) {
    id<GeogebraCommonKernelKernelNDGeoPointND> geoPoint = IOSObjectArray_Get(nil_chk([p_ getPointsND]), i);
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geoPoint)) isDefined]) {
      GeogebraCommonKernelMatrixCoords *point = [geoPoint getInhomCoordsInD3];
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) projectLineWithGeogebraCommonKernelMatrixCoords:o1_ withGeogebraCommonKernelMatrixCoords:d1_ withGeogebraCommonKernelMatrixCoords:project_ withDoubleArray:parameters_];
      if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(project_)) equalsForKernelWithGeogebraCommonKernelMatrixCoords:point withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
        jdouble t1 = IOSDoubleArray_Get(nil_chk(parameters_), 0);
        if ([self checkParameterWithDouble:t1]) [self addCoordsWithDouble:t1 withGeogebraCommonKernelMatrixCoords:project_ withGeogebraCommonKernelKernelNDGeoElementND:geoPoint];
      }
    }
  }
}

- (void)addCoordsWithDouble:(jdouble)parameter
withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)coords
withGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)parent {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) putWithId:JavaLangDouble_valueOfWithDouble_(parameter) withId:[new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY]) autorelease]];
}

- (void)setNewCoords {
  [((JavaUtilTreeMap *) nil_chk(newCoords_)) clear];
  [self setIntersectionLine];
  [self addStartEndPoints];
  [self addPolygonPoints];
  [self intersectionsCoordsWithGeogebraCommonKernelGeosGeoPolygon:p_];
}

- (void)compute {
  [self setNewCoords];
  if ([((JavaUtilTreeMap *) nil_chk(newCoords_)) size] < 2) {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:1];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputSegments_ getElementWithInt:0])) setUndefined];
  }
  else {
    JavaUtilArrayList *segmentList = [new_JavaUtilArrayList_init() autorelease];
    IOSObjectArray *points = [IOSObjectArray arrayWithLength:[newCoords_ size] type:GeogebraCommonKernelMatrixCoords_class_()];
    [((id<JavaUtilCollection>) nil_chk([newCoords_ values])) toArrayWithNSObjectArray:points];
    GeogebraCommonKernelMatrixCoords *b = IOSObjectArray_Get(points, 0);
    GeogebraCommonKernelMatrixCoords *startSegment = nil;
    GeogebraCommonKernelMatrixCoords *endSegment = nil;
    for (jint i = 1; i < [newCoords_ size]; i++) {
      GeogebraCommonKernelMatrixCoords *a = b;
      b = IOSObjectArray_Get(points, i);
      if ([self checkMidpointWithGeogebraCommonKernelGeosGeoPolygon:p_ withGeogebraCommonKernelMatrixCoords:a withGeogebraCommonKernelMatrixCoords:b]) {
        if (startSegment == nil) startSegment = a;
        endSegment = b;
      }
      else {
        if (startSegment != nil) {
          [segmentList addWithId:[IOSObjectArray arrayWithObjects:(id[]){ startSegment, endSegment } count:2 type:GeogebraCommonKernelMatrixCoords_class_()]];
          startSegment = nil;
        }
      }
    }
    if (startSegment != nil) [segmentList addWithId:[IOSObjectArray arrayWithObjects:(id[]){ startSegment, endSegment } count:2 type:GeogebraCommonKernelMatrixCoords_class_()]];
    if ([segmentList size] == 0) {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:1];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([outputSegments_ getElementWithInt:0])) setUndefined];
    }
    else {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) adjustOutputSizeWithInt:[segmentList size]];
      if (hasLabels_) {
        [outputSegments_ updateLabels];
      }
      jint indexSegment = 0;
      for (IOSObjectArray * __strong seg in segmentList) {
        id<GeogebraCommonKernelKernelNDGeoSegmentND> segment = (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast([outputSegments_ getElementWithInt:indexSegment], @protocol(GeogebraCommonKernelKernelNDGeoSegmentND));
        GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(segment, IOSObjectArray_Get(nil_chk(seg), 0), IOSObjectArray_Get(seg, 1));
        indexSegment++;
      }
    }
  }
}

+ (void)setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)seg
                          withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)start
                          withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)end {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(seg, start, end);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"IntersectionOfAandB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getFirstInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk([self getSecondInput])) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)setLabelsWithNSStringArray:(IOSObjectArray *)labels {
  if (labels != nil && labels->size_ == 1 && [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) size] > 1 && IOSObjectArray_Get(labels, 0) != nil && ![((NSString *) nil_chk(IOSObjectArray_Get(labels, 0))) isEqual:@""]) {
    [outputSegments_ setIndexLabelsWithNSString:IOSObjectArray_Get(labels, 0)];
  }
  else {
    [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(outputSegments_)) setLabelsWithNSStringArray:labels];
  }
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(p_);
  RELEASE_(outputSegments_);
  RELEASE_(newCoords_);
  RELEASE_(o1_);
  RELEASE_(d1_);
  RELEASE_(project1_);
  RELEASE_(project2_);
  RELEASE_(lineCoords_);
  RELEASE_(tmp_);
  RELEASE_(project_);
  RELEASE_(parameters_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:", "AlgoIntersectPathLinePolygon", NULL, 0x1, NULL, NULL },
    { "setFirstInputWithGeogebraCommonKernelGeosGeoElement:", "setFirstInput", "V", 0x4, NULL, NULL },
    { "getFirstInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "setSecondInputWithGeogebraCommonKernelGeosGeoElement:", "setSecondInput", "V", 0x4, NULL, NULL },
    { "getSecondInput", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createOutputSegments", NULL, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", 0x4, NULL, NULL },
    { "setSegmentVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:", "setSegmentVisualProperties", "V", 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "setIntersectionLine", NULL, "V", 0x4, NULL, NULL },
    { "checkParameterWithDouble:", "checkParameter", "Z", 0x4, NULL, NULL },
    { "intersectionsCoordsWithGeogebraCommonKernelGeosGeoPolygon:", "intersectionsCoords", "V", 0x4, NULL, NULL },
    { "onSegmentWithDouble:", "onSegment", "Z", 0x1a, NULL, NULL },
    { "checkMidpointWithGeogebraCommonKernelGeosGeoPolygon:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "checkMidpoint", "Z", 0x4, NULL, NULL },
    { "addStartEndPoints", NULL, "V", 0x4, NULL, NULL },
    { "addPolygonPoints", NULL, "V", 0x4, NULL, NULL },
    { "addCoordsWithDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelKernelNDGeoElementND:", "addCoords", "V", 0x4, NULL, NULL },
    { "setNewCoords", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setSegment", "V", 0x1c, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setLabelsWithNSStringArray:", "setLabels", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoLineND;", NULL, NULL,  },
    { "p_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoPolygon;", NULL, NULL,  },
    { "outputSegments_", NULL, 0x4, "Lgeogebra.common.kernel.algos.AlgoElement$OutputHandler;", NULL, "Lgeogebra/common/kernel/algos/AlgoElement$OutputHandler<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "newCoords_", NULL, 0x4, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Ljava/lang/Double;Lgeogebra/common/kernel/Matrix/Coords;>;",  },
    { "hasLabels_", NULL, 0x2, "Z", NULL, NULL,  },
    { "o1_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "d1_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "project2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "lineCoords_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tmp_", NULL, 0x2, "[D", NULL, NULL,  },
    { "project_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon = { 2, "AlgoIntersectPathLinePolygon", "geogebra.common.kernel.algos", NULL, 0x1, 25, methods, 13, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_ = NO;
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_outputSegments_(self, [self createOutputSegments]);
  [self setFirstInputWithGeogebraCommonKernelGeosGeoElement:geo];
  [self setSecondInputWithGeogebraCommonKernelGeosGeoElement:p];
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_newCoords_(self, new_JavaUtilTreeMap_initWithJavaUtilComparator_(GeogebraCommonKernelKernel_DoubleComparatorWithDouble_(GeogebraCommonKernelKernel_STANDARD_PRECISION)));
  [self setInputOutput];
}

GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, c, geo, p);
  if (![((GeogebraCommonKernelConstruction *) nil_chk(c)) isSuppressLabelsActive]) {
    [self setLabelsWithNSStringArray:labels];
    self->hasLabels_ = YES;
  }
  [self update];
}

GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoElement *geo, GeogebraCommonKernelGeosGeoElement *p) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(self, c, labels, geo, p);
  return self;
}

void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->hasLabels_ = NO;
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_set_project_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
}

GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *self = [GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

jboolean GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_onSegmentWithDouble_(jdouble t) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initialize();
  return GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(t, 0) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_(1, t);
}

void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_setSegmentWithGeogebraCommonKernelKernelNDGeoSegmentND_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(id<GeogebraCommonKernelKernelNDGeoSegmentND> seg, GeogebraCommonKernelMatrixCoords *start, GeogebraCommonKernelMatrixCoords *end) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_initialize();
  [((id<GeogebraCommonKernelKernelNDGeoSegmentND>) nil_chk(seg)) setTwoPointsInhomCoordsWithGeogebraCommonKernelMatrixCoords:start withGeogebraCommonKernelMatrixCoords:end];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon)

@implementation GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1

- (GeogebraCommonKernelGeosGeoSegment *)newElement {
  GeogebraCommonKernelGeosGeoSegment *a = [new_GeogebraCommonKernelGeosGeoSegment_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  GeogebraCommonKernelGeosGeoPoint *aS = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [aS setCoordsWithDouble:0 withDouble:0 withDouble:1];
  GeogebraCommonKernelGeosGeoPoint *aE = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(this$0_->cons_) autorelease];
  [aE setCoordsWithDouble:0 withDouble:0 withDouble:1];
  [a setPointsWithGeogebraCommonKernelGeosGeoPoint:aS withGeogebraCommonKernelGeosGeoPoint:aE];
  [a setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:this$0_];
  [this$0_ setSegmentVisualPropertiesWithGeogebraCommonKernelGeosGeoElement:a];
  return a;
}

- (instancetype)initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *)outer$ {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "newElement", NULL, "Lgeogebra.common.kernel.geos.GeoSegment;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon:", "", NULL, 0x0, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", NULL, 0x1012, "Lgeogebra.common.kernel.algos.AlgoIntersectPathLinePolygon;", NULL, NULL,  },
  };
  static const J2ObjCEnclosingMethodInfo enclosing_method = { "GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon", "createOutputSegments" };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 = { 2, "", "geogebra.common.kernel.algos", "AlgoIntersectPathLinePolygon", 0x8008, 2, methods, 1, fields, 0, NULL, 0, NULL, &enclosing_method, "Ljava/lang/Object;Lgeogebra/common/kernel/algos/AlgoElement$elementFactory<Lgeogebra/common/kernel/geos/GeoElement;>;" };
  return &_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1;
}

@end

void GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self, GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_set_this$0_(self, outer$);
  NSObject_init(self);
}

GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *new_GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon *outer$) {
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 *self = [GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1 alloc];
  GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1_initWithGeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_(self, outer$);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoIntersectPathLinePolygon_$1)
