//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoFunctionFreehand.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoFunctionFreehand.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelAlgosAlgoFunctionFreehand () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoFunction *g_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFunctionFreehand, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoFunctionFreehand, g_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(GeogebraCommonKernelAlgosAlgoFunctionFreehand *self);

@implementation GeogebraCommonKernelAlgosAlgoFunctionFreehand

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)f {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)f {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, f);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Function();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFunction {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([((GeogebraCommonKernelGeosGeoList *) nil_chk(inputList_)) size] < 4 || ![((GeogebraCommonPluginGeoClassEnum *) nil_chk([inputList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()]) return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"Undefined"];
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"FreehandFunctionOnIntervalAB" withNSString:[((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([inputList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withGeogebraCommonKernelStringTemplate:tpl] withNSString:[kernel_ formatWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([inputList_ getWithInt:1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withGeogebraCommonKernelStringTemplate:tpl]];
}

- (GeogebraCommonKernelGeosGeoList *)getList {
  return inputList_;
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFunctionFreehand", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFunctionFreehand", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFunction", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoFunctionFreehand = { 2, "AlgoFunctionFreehand", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoFunctionFreehand;
}

@end

void GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoFunctionFreehand *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *f) {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, f);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoFunctionFreehand *new_GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *f) {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand *self = [GeogebraCommonKernelAlgosAlgoFunctionFreehand alloc];
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, f);
  return self;
}

void GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoFunctionFreehand *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *f) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_set_inputList_(self, f);
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelArithmeticFunctionVariable *X = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, X, GeogebraCommonPluginOperationEnum_get_SIN(), nil) autorelease];
  GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, X) autorelease];
  [self->g_ setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
  [self->g_ setDefinedWithBoolean:NO];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(self);
}

GeogebraCommonKernelAlgosAlgoFunctionFreehand *new_GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *f) {
  GeogebraCommonKernelAlgosAlgoFunctionFreehand *self = [GeogebraCommonKernelAlgosAlgoFunctionFreehand alloc];
  GeogebraCommonKernelAlgosAlgoFunctionFreehand_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, f);
  return self;
}

void GeogebraCommonKernelAlgosAlgoFunctionFreehand_compute(GeogebraCommonKernelAlgosAlgoFunctionFreehand *self) {
  if (!([((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined]) || ![((GeogebraCommonPluginGeoClassEnum *) nil_chk([self->inputList_ getElementType])) isEqual:GeogebraCommonPluginGeoClassEnum_get_NUMERIC()] || [self->inputList_ size] < 4) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticFunctionVariable *X = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, X, GeogebraCommonPluginOperationEnum_get_FREEHAND(), self->inputList_) autorelease];
  GeogebraCommonKernelArithmeticFunction *fun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(expr, X) autorelease];
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:fun];
  [self->g_ setDefinedWithBoolean:YES];
  [self->g_ setIntervalWithDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->inputList_ getWithInt:0], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble] withDouble:[((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->inputList_ getWithInt:1], [GeogebraCommonKernelGeosGeoNumeric class])))) getDouble]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoFunctionFreehand)
