//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/IndexHTMLBuilder.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/util/IndexHTMLBuilder.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonUtilIndexHTMLBuilder () {
 @public
  JavaLangStringBuilder *sb_;
  jboolean needsTag_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonUtilIndexHTMLBuilder, sb_, JavaLangStringBuilder *)

@implementation GeogebraCommonUtilIndexHTMLBuilder

- (instancetype)initWithBoolean:(jboolean)addTag {
  GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(self, addTag);
  return self;
}

- (void)appendWithNSString:(NSString *)s {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:s];
}

- (void)startIndex {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:@"<sub><font size=\"-1\">"];
}

- (void)endIndex {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:@"</font></sub>"];
}

- (NSString *)description {
  if (needsTag_) {
    needsTag_ = NO;
    [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:@"</html>"];
  }
  return [((JavaLangStringBuilder *) nil_chk(sb_)) description];
}

- (void)clear {
  [((JavaLangStringBuilder *) nil_chk(sb_)) setLengthWithInt:needsTag_ ? ((jint) [@"<html>" length]) : 0];
}

- (jboolean)canAppendRawHtml {
  return YES;
}

- (void)appendHTMLWithNSString:(NSString *)str {
  [((JavaLangStringBuilder *) nil_chk(sb_)) appendWithNSString:GeogebraCommonUtilStringUtil_toHTMLStringWithNSString_(str)];
}

- (void)dealloc {
  RELEASE_(sb_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithBoolean:", "IndexHTMLBuilder", NULL, 0x1, NULL, NULL },
    { "appendWithNSString:", "append", "V", 0x1, NULL, NULL },
    { "startIndex", NULL, "V", 0x1, NULL, NULL },
    { "endIndex", NULL, "V", 0x1, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "clear", NULL, "V", 0x1, NULL, NULL },
    { "canAppendRawHtml", NULL, "Z", 0x1, NULL, NULL },
    { "appendHTMLWithNSString:", "appendHTML", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "sb_", NULL, 0x2, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "needsTag_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilIndexHTMLBuilder = { 2, "IndexHTMLBuilder", "geogebra.common.util", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilIndexHTMLBuilder;
}

@end

void GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(GeogebraCommonUtilIndexHTMLBuilder *self, jboolean addTag) {
  NSObject_init(self);
  GeogebraCommonUtilIndexHTMLBuilder_setAndConsume_sb_(self, new_JavaLangStringBuilder_init());
  if (addTag) {
    self->needsTag_ = YES;
    [self->sb_ appendWithNSString:@"<html>"];
  }
}

GeogebraCommonUtilIndexHTMLBuilder *new_GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(jboolean addTag) {
  GeogebraCommonUtilIndexHTMLBuilder *self = [GeogebraCommonUtilIndexHTMLBuilder alloc];
  GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(self, addTag);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilIndexHTMLBuilder)
