//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/main/RandomUtil.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/main/RandomUtil.h"
#include "geogebra/common/util/MyMath2.h"
#include "java/lang/Math.h"
#include "java/util/Random.h"

@interface GeogebraCommonMainRandomUtil ()

+ (jint)randomPoissonWithDouble:(jdouble)lambda;

+ (jdouble)logOfKFactorialWithInt:(jint)k;

@end

static JavaUtilRandom *GeogebraCommonMainRandomUtil_random_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonMainRandomUtil, random_, JavaUtilRandom *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonMainRandomUtil, random_, JavaUtilRandom *)

static jdouble GeogebraCommonMainRandomUtil_halflog2pi_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonMainRandomUtil, halflog2pi_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonMainRandomUtil, halflog2pi_, jdouble)

static IOSDoubleArray *GeogebraCommonMainRandomUtil_logtable_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonMainRandomUtil, logtable_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonMainRandomUtil, logtable_, IOSDoubleArray *)

__attribute__((unused)) static jint GeogebraCommonMainRandomUtil_randomPoissonWithDouble_(jdouble lambda);

__attribute__((unused)) static jdouble GeogebraCommonMainRandomUtil_logOfKFactorialWithInt_(jint k);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonMainRandomUtil)

@implementation GeogebraCommonMainRandomUtil

+ (jdouble)getRandomNumber {
  return GeogebraCommonMainRandomUtil_getRandomNumber();
}

- (void)setRandomSeedWithInt:(jint)seed {
  JreStrongAssignAndConsume(&GeogebraCommonMainRandomUtil_random_, nil, new_JavaUtilRandom_initWithLong_(seed));
}

+ (jint)getRandomIntegerBetweenWithDouble:(jdouble)low
                               withDouble:(jdouble)high {
  return GeogebraCommonMainRandomUtil_getRandomIntegerBetweenWithDouble_withDouble_(low, high);
}

+ (jdouble)randomUniformWithDouble:(jdouble)a
                        withDouble:(jdouble)b {
  return GeogebraCommonMainRandomUtil_randomUniformWithDouble_withDouble_(a, b);
}

+ (jint)randomBinomialWithDouble:(jdouble)n
                      withDouble:(jdouble)p {
  return GeogebraCommonMainRandomUtil_randomBinomialWithDouble_withDouble_(n, p);
}

+ (jdouble)randomNormalWithDouble:(jdouble)mean
                       withDouble:(jdouble)sd {
  return GeogebraCommonMainRandomUtil_randomNormalWithDouble_withDouble_(mean, sd);
}

+ (jint)randomPoissonWithDouble:(jdouble)lambda {
  return GeogebraCommonMainRandomUtil_randomPoissonWithDouble_(lambda);
}

+ (jint)randomPoissonTRSWithDouble:(jdouble)mu {
  return GeogebraCommonMainRandomUtil_randomPoissonTRSWithDouble_(mu);
}

+ (jdouble)logOfKFactorialWithInt:(jint)k {
  return GeogebraCommonMainRandomUtil_logOfKFactorialWithInt_(k);
}

- (instancetype)init {
  GeogebraCommonMainRandomUtil_init(self);
  return self;
}

+ (void)initialize {
  if (self == [GeogebraCommonMainRandomUtil class]) {
    JreStrongAssignAndConsume(&GeogebraCommonMainRandomUtil_random_, nil, new_JavaUtilRandom_init());
    GeogebraCommonMainRandomUtil_halflog2pi_ = 0.5 * JavaLangMath_logWithDouble_(2 * JavaLangMath_PI);
    JreStrongAssignAndConsume(&GeogebraCommonMainRandomUtil_logtable_, nil, [IOSDoubleArray newArrayWithLength:10]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonMainRandomUtil)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getRandomNumber", NULL, "D", 0x9, NULL, NULL },
    { "setRandomSeedWithInt:", "setRandomSeed", "V", 0x1, NULL, NULL },
    { "getRandomIntegerBetweenWithDouble:withDouble:", "getRandomIntegerBetween", "I", 0x9, NULL, NULL },
    { "randomUniformWithDouble:withDouble:", "randomUniform", "D", 0x9, NULL, NULL },
    { "randomBinomialWithDouble:withDouble:", "randomBinomial", "I", 0x9, NULL, NULL },
    { "randomNormalWithDouble:withDouble:", "randomNormal", "D", 0x9, NULL, NULL },
    { "randomPoissonWithDouble:", "randomPoisson", "I", 0xa, NULL, NULL },
    { "randomPoissonTRSWithDouble:", "randomPoissonTRS", "I", 0x9, NULL, NULL },
    { "logOfKFactorialWithInt:", "logOfKFactorial", "D", 0xa, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "random_", NULL, 0xa, "Ljava.util.Random;", &GeogebraCommonMainRandomUtil_random_, NULL,  },
    { "halflog2pi_", NULL, 0xa, "D", &GeogebraCommonMainRandomUtil_halflog2pi_, NULL,  },
    { "logtable_", NULL, 0xa, "[D", &GeogebraCommonMainRandomUtil_logtable_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonMainRandomUtil = { 2, "RandomUtil", "geogebra.common.main", NULL, 0x1, 10, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonMainRandomUtil;
}

@end

jdouble GeogebraCommonMainRandomUtil_getRandomNumber() {
  GeogebraCommonMainRandomUtil_initialize();
  return [((JavaUtilRandom *) nil_chk(GeogebraCommonMainRandomUtil_random_)) nextDouble];
}

jint GeogebraCommonMainRandomUtil_getRandomIntegerBetweenWithDouble_withDouble_(jdouble low, jdouble high) {
  GeogebraCommonMainRandomUtil_initialize();
  jdouble a = GeogebraCommonKernelKernel_checkIntegerWithDouble_(low);
  jdouble b = GeogebraCommonKernelKernel_checkIntegerWithDouble_(high);
  jint min = J2ObjCFpToInt(JavaLangMath_ceilWithDouble_(JavaLangMath_minWithDouble_withDouble_(a, b)));
  jint max = J2ObjCFpToInt(JavaLangMath_floorWithDouble_(JavaLangMath_maxWithDouble_withDouble_(a, b)));
  return [((JavaUtilRandom *) nil_chk(GeogebraCommonMainRandomUtil_random_)) nextIntWithInt:max - min + 1] + min;
}

jdouble GeogebraCommonMainRandomUtil_randomUniformWithDouble_withDouble_(jdouble a, jdouble b) {
  GeogebraCommonMainRandomUtil_initialize();
  return a + GeogebraCommonMainRandomUtil_getRandomNumber() * (b - a);
}

jint GeogebraCommonMainRandomUtil_randomBinomialWithDouble_withDouble_(jdouble n, jdouble p) {
  GeogebraCommonMainRandomUtil_initialize();
  jint count = 0;
  for (jint i = 0; i < n; i++) {
    if (GeogebraCommonMainRandomUtil_getRandomNumber() < p) count++;
  }
  return count;
}

jdouble GeogebraCommonMainRandomUtil_randomNormalWithDouble_withDouble_(jdouble mean, jdouble sd) {
  GeogebraCommonMainRandomUtil_initialize();
  jdouble fac, rsq, v1, v2;
  do {
    v1 = 2.0 * GeogebraCommonMainRandomUtil_getRandomNumber() - 1;
    v2 = 2.0 * GeogebraCommonMainRandomUtil_getRandomNumber() - 1;
    rsq = v1 * v1 + v2 * v2;
  }
  while (rsq >= 1.0 || rsq == 0.0);
  fac = JavaLangMath_sqrtWithDouble_(-2.0 * JavaLangMath_logWithDouble_(rsq) / rsq);
  return v1 * fac * sd + mean;
}

jint GeogebraCommonMainRandomUtil_randomPoissonWithDouble_(jdouble lambda) {
  GeogebraCommonMainRandomUtil_initialize();
  jdouble L = JavaLangMath_expWithDouble_(-lambda);
  jdouble p = 1;
  jint k = 0;
  do {
    k++;
    p *= GeogebraCommonMainRandomUtil_getRandomNumber();
  }
  while (p >= L);
  return k - 1;
}

jint GeogebraCommonMainRandomUtil_randomPoissonTRSWithDouble_(jdouble mu) {
  GeogebraCommonMainRandomUtil_initialize();
  if (mu < 10) return GeogebraCommonMainRandomUtil_randomPoissonWithDouble_(mu);
  jdouble b = 0.931 + +2.53 * JavaLangMath_sqrtWithDouble_(mu);
  jdouble a = -0.059 + 0.02438 * b;
  jdouble v_r = 0.9277 - 3.6224 / (b - 2);
  jdouble us = 0;
  jdouble v = 1;
  while (YES) {
    jint k = -1;
    while (k < 0 || (us < 0.013 && v > us)) {
      jdouble u = GeogebraCommonMainRandomUtil_getRandomNumber() - 0.5;
      v = GeogebraCommonMainRandomUtil_getRandomNumber();
      us = 0.5 - JavaLangMath_absWithDouble_(u);
      k = J2ObjCFpToInt(JavaLangMath_floorWithDouble_((2 * a / us + b) * u + mu + 0.43));
      if (us >= 0.07 && v < v_r) return k;
    }
    jdouble alpha = 1.1239 + 1.1328 / (b - 3.4);
    jdouble lnmu = JavaLangMath_logWithDouble_(mu);
    v = v * alpha / (a / (us * us) + b);
    if (JavaLangMath_logWithDouble_(v * alpha / (a / us / us + b)) <= -mu + k * lnmu - GeogebraCommonMainRandomUtil_logOfKFactorialWithInt_(k)) return k;
  }
}

jdouble GeogebraCommonMainRandomUtil_logOfKFactorialWithInt_(jint k) {
  GeogebraCommonMainRandomUtil_initialize();
  if (k < 10) {
    if (IOSDoubleArray_Get(nil_chk(GeogebraCommonMainRandomUtil_logtable_), k) == 0) *IOSDoubleArray_GetRef(GeogebraCommonMainRandomUtil_logtable_, k) = JavaLangMath_logWithDouble_(GeogebraCommonUtilMyMath2_factorialWithDouble_(k));
    return IOSDoubleArray_Get(GeogebraCommonMainRandomUtil_logtable_, k);
  }
  return GeogebraCommonMainRandomUtil_halflog2pi_ + (k + 0.5) * JavaLangMath_logWithDouble_(k + 1) - (k + 1) + (1 / 12.0 - (1 / 360.0 - 1 / 1260.0 / (k + 1) / (k + 1)) / (k + 1) / (k + 1)) / (k + 1);
}

void GeogebraCommonMainRandomUtil_init(GeogebraCommonMainRandomUtil *self) {
  NSObject_init(self);
}

GeogebraCommonMainRandomUtil *new_GeogebraCommonMainRandomUtil_init() {
  GeogebraCommonMainRandomUtil *self = [GeogebraCommonMainRandomUtil alloc];
  GeogebraCommonMainRandomUtil_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonMainRandomUtil)
