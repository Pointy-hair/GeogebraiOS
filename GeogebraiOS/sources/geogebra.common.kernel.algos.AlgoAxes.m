//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoAxes.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoAxes.h"
#include "geogebra/common/kernel/algos/AlgoAxesQuadricND.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVec2D.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"

@interface GeogebraCommonKernelAlgosAlgoAxes () {
 @public
  GeogebraCommonKernelGeosGeoPoint *P_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoAxes, P_, GeogebraCommonKernelGeosGeoPoint *)

@implementation GeogebraCommonKernelAlgosAlgoAxes

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
                    withGeogebraCommonKernelGeosGeoConic:(GeogebraCommonKernelGeosGeoConic *)c {
  GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoConic_(self, cons, labels, c);
  return self;
}

- (void)createInput {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_setAndConsume_axes_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoLine_class_()]);
  IOSObjectArray_SetAndConsume(axes_, 0, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  IOSObjectArray_SetAndConsume(axes_, 1, new_GeogebraCommonKernelGeosGeoLine_initWithGeogebraCommonKernelConstruction_(cons_));
  GeogebraCommonKernelAlgosAlgoAxes_setAndConsume_P_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_));
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(axes_, 0), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:P_];
  [((GeogebraCommonKernelGeosGeoLine *) nil_chk(((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(axes_, 1), [GeogebraCommonKernelGeosGeoLine class])))) setStartPointWithGeogebraCommonKernelGeosGeoPoint:P_];
}

- (void)compute {
  [super compute];
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(P_)) setCoordsWithDouble:[((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->b_)) getX] withDouble:[((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->b_ getY] withDouble:1.0];
}

- (void)setAxisCoordsWithInt:(jint)i {
  GeogebraCommonKernelGeosGeoLine *axis = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk(axes_), i), [GeogebraCommonKernelGeosGeoLine class]);
  ((GeogebraCommonKernelGeosGeoLine *) nil_chk(axis))->x_ = -[((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(nil_chk(((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->eigenvec_), i))) getY];
  axis->y_ = [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(IOSObjectArray_Get(((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->eigenvec_, i))) getX];
  axis->z_ = -(axis->x_ * [((GeogebraCommonKernelGeosGeoVec2D *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->b_)) getX] + axis->y_ * [((GeogebraCommonKernelGeosGeoConic *) nil_chk(((GeogebraCommonKernelGeosGeoConic *) check_class_cast(c_, [GeogebraCommonKernelGeosGeoConic class]))))->b_ getY]);
}

- (void)dealloc {
  RELEASE_(P_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoConic:", "AlgoAxes", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelGeosGeoConic:", "AlgoAxes", NULL, 0x1, NULL, NULL },
    { "createInput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setAxisCoordsWithInt:", "setAxisCoords", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "P_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoAxes = { 2, "AlgoAxes", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoAxes;
}

@end

void GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoAxes *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, c);
}

GeogebraCommonKernelAlgosAlgoAxes *new_GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoAxes *self = [GeogebraCommonKernelAlgosAlgoAxes alloc];
  GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoConic_(self, cons, label, c);
  return self;
}

void GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelAlgosAlgoAxes *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, c);
}

GeogebraCommonKernelAlgosAlgoAxes *new_GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoConic_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelGeosGeoConic *c) {
  GeogebraCommonKernelAlgosAlgoAxes *self = [GeogebraCommonKernelAlgosAlgoAxes alloc];
  GeogebraCommonKernelAlgosAlgoAxes_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelGeosGeoConic_(self, cons, labels, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoAxes)
