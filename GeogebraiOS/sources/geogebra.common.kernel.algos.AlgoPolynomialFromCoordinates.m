//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.java
//


#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/math/BigDecimal.h"

@interface GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoFunction *g_;
}

+ (void)polcoeWithDoubleArray:(IOSDoubleArray *)x
              withDoubleArray:(IOSDoubleArray *)y
                      withInt:(jint)n
              withDoubleArray:(IOSDoubleArray *)cof;

+ (void)polcoeBigWithDoubleArray:(IOSDoubleArray *)xx
                 withDoubleArray:(IOSDoubleArray *)yy
                         withInt:(jint)n
                 withDoubleArray:(IOSDoubleArray *)coff;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates, g_, GeogebraCommonKernelGeosGeoFunction *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_compute(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y, jint n, IOSDoubleArray *cof);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeBigWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(IOSDoubleArray *xx, IOSDoubleArray *yy, jint n, IOSDoubleArray *coff);

@implementation GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Polynomial();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:g_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getPolynomial {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_compute(self);
}

+ (GeogebraCommonKernelArithmeticFunction *)buildPolyFunctionExpressionWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                                                                      withDoubleArray:(IOSDoubleArray *)cof {
  return GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithGeogebraCommonKernelKernel_withDoubleArray_(kernel, cof);
}

+ (void)polcoeWithDoubleArray:(IOSDoubleArray *)x
              withDoubleArray:(IOSDoubleArray *)y
                      withInt:(jint)n
              withDoubleArray:(IOSDoubleArray *)cof {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(x, y, n, cof);
}

+ (void)polcoeBigWithDoubleArray:(IOSDoubleArray *)xx
                 withDoubleArray:(IOSDoubleArray *)yy
                         withInt:(jint)n
                 withDoubleArray:(IOSDoubleArray *)coff {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeBigWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(xx, yy, n, coff);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(g_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoPolynomialFromCoordinates", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getPolynomial", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "buildPolyFunctionExpressionWithGeogebraCommonKernelKernel:withDoubleArray:", "buildPolyFunctionExpression", "Lgeogebra.common.kernel.arithmetic.Function;", 0x9, NULL, NULL },
    { "polcoeWithDoubleArray:withDoubleArray:withInt:withDoubleArray:", "polcoe", "V", 0xa, NULL, NULL },
    { "polcoeBigWithDoubleArray:withDoubleArray:withInt:withDoubleArray:", "polcoeBig", "V", 0xa, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates = { 2, "AlgoPolynomialFromCoordinates", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates;
}

@end

void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_set_inputList_(self, inputList);
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_setAndConsume_g_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_compute(self);
  [self->g_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *new_GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *self = [GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates alloc];
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, inputList);
  return self;
}

void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_compute(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *self) {
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined]) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  jint n = [self->inputList_ size];
  if (n < 2) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  IOSDoubleArray *x = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *y = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
  for (jint i = 0; i < n; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self->inputList_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      GeogebraCommonKernelGeosGeoPoint *listElement = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast([self->inputList_ getCachedWithInt:i], [GeogebraCommonKernelGeosGeoPoint class]);
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(listElement)) getInhomCoordsWithDoubleArray:xy];
      *IOSDoubleArray_GetRef(x, i) = IOSDoubleArray_Get(xy, 0);
      *IOSDoubleArray_GetRef(y, i) = IOSDoubleArray_Get(xy, 1);
    }
    else {
      [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
      return;
    }
  }
  IOSBooleanArray *remove = [IOSBooleanArray arrayWithLength:n];
  for (jint i = 0; i < n - 1; i++) *IOSBooleanArray_GetRef(remove, i) = NO;
  for (jint i = 0; i < n - 1; i++) for (jint j = i + 1; j < n; j++) {
    if (IOSDoubleArray_Get(x, i) == IOSDoubleArray_Get(x, j)) {
      if (IOSDoubleArray_Get(y, i) == IOSDoubleArray_Get(y, j)) {
        *IOSBooleanArray_GetRef(remove, j) = YES;
      }
      else {
        [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
        return;
      }
    }
  }
  while (IOSBooleanArray_Get(remove, n - 1) == YES) n--;
  if (n > 2) for (jint i = n - 2; i > 0; i--) {
    if (IOSBooleanArray_Get(remove, i)) {
      *IOSDoubleArray_GetRef(x, i) = IOSDoubleArray_Get(x, n - 1);
      *IOSDoubleArray_GetRef(y, i) = IOSDoubleArray_Get(y, n - 1);
      n--;
    }
  }
  IOSDoubleArray *cof = [IOSDoubleArray arrayWithLength:n];
  @try {
    if (n < 15) GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(x, y, n, cof);
    else GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeBigWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(x, y, n, cof);
  }
  @catch (JavaLangException *e) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  GeogebraCommonKernelArithmeticFunction *polyFun = GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithGeogebraCommonKernelKernel_withDoubleArray_(self->kernel_, cof);
  if (polyFun == nil) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setUndefined];
    return;
  }
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->g_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:polyFun];
  [self->g_ setDefinedWithBoolean:YES];
}

GeogebraCommonKernelArithmeticFunction *GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_buildPolyFunctionExpressionWithGeogebraCommonKernelKernel_withDoubleArray_(GeogebraCommonKernelKernel *kernel, IOSDoubleArray *cof) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initialize();
  jint n = ((IOSDoubleArray *) nil_chk(cof))->size_;
  GeogebraCommonKernelArithmeticExpressionNode *poly = nil;
  GeogebraCommonKernelArithmeticFunctionVariable *fVar = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
  jdouble coeff;
  for (jint k = n - 1; k >= 0; k--) {
    coeff = IOSDoubleArray_Get(cof, k);
    if (JavaLangDouble_isNaNWithDouble_(coeff) || JavaLangDouble_isInfiniteWithDouble_(coeff)) {
      return nil;
    }
    else if (coeff == 0) continue;
    jboolean negativeCoeff = coeff < 0;
    id<GeogebraCommonKernelArithmeticExpressionValue> powerExp;
    switch (k) {
      case 0:
      powerExp = nil;
      break;
      case 1:
      powerExp = fVar;
      break;
      default:
      powerExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, fVar, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, k) autorelease]) autorelease];
    }
    id<GeogebraCommonKernelArithmeticExpressionValue> partExp;
    GeogebraCommonKernelArithmeticMyDouble *coeffMyDouble = nil;
    if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(coeff, 1.0)) {
      if (powerExp == nil) partExp = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 1.0) autorelease];
      else partExp = powerExp;
    }
    else {
      coeffMyDouble = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, coeff) autorelease];
      if (powerExp == nil) partExp = coeffMyDouble;
      else partExp = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, coeffMyDouble, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), powerExp) autorelease];
    }
    if (poly == nil) {
      poly = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, partExp) autorelease];
    }
    else {
      if (negativeCoeff) {
        if (coeffMyDouble != nil) [coeffMyDouble setWithDouble:-coeff];
        poly = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, poly, GeogebraCommonPluginOperationEnum_get_MINUS(), partExp) autorelease];
      }
      else {
        poly = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, poly, GeogebraCommonPluginOperationEnum_get_PLUS(), partExp) autorelease];
      }
    }
  }
  if (poly == nil) {
    poly = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease]) autorelease];
  }
  GeogebraCommonKernelArithmeticFunction *polyFun = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(poly, fVar) autorelease];
  return polyFun;
}

void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(IOSDoubleArray *x, IOSDoubleArray *y, jint n, IOSDoubleArray *cof) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initialize();
  jint k, j, i;
  jdouble phi, ff, b;
  IOSDoubleArray *s = [IOSDoubleArray arrayWithLength:n];
  for (i = 0; i < n; i++) *IOSDoubleArray_GetRef(s, i) = *IOSDoubleArray_GetRef(nil_chk(cof), i) = 0.0;
  *IOSDoubleArray_GetRef(s, n - 1) = -IOSDoubleArray_Get(nil_chk(x), 0);
  for (i = 1; i < n; i++) {
    for (j = n - 1 - i; j < n - 1; j++) *IOSDoubleArray_GetRef(s, j) -= IOSDoubleArray_Get(x, i) * IOSDoubleArray_Get(s, j + 1);
    *IOSDoubleArray_GetRef(s, n - 1) -= IOSDoubleArray_Get(x, i);
  }
  for (j = 0; j < n; j++) {
    phi = n;
    for (k = n - 1; k > 0; k--) phi = k * IOSDoubleArray_Get(s, k) + IOSDoubleArray_Get(x, j) * phi;
    ff = IOSDoubleArray_Get(nil_chk(y), j) / phi;
    b = 1.0;
    for (k = n - 1; k >= 0; k--) {
      *IOSDoubleArray_GetRef(nil_chk(cof), k) += b * ff;
      b = IOSDoubleArray_Get(s, k) + IOSDoubleArray_Get(x, j) * b;
    }
  }
}

void GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_polcoeBigWithDoubleArray_withDoubleArray_withInt_withDoubleArray_(IOSDoubleArray *xx, IOSDoubleArray *yy, jint n, IOSDoubleArray *coff) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initialize();
  IOSObjectArray *x = [IOSObjectArray arrayWithLength:n type:JavaMathBigDecimal_class_()];
  IOSObjectArray *y = [IOSObjectArray arrayWithLength:n type:JavaMathBigDecimal_class_()];
  IOSObjectArray *cof = [IOSObjectArray arrayWithLength:n type:JavaMathBigDecimal_class_()];
  IOSObjectArray *s = [IOSObjectArray arrayWithLength:n type:JavaMathBigDecimal_class_()];
  jint k, j, i;
  JavaMathBigDecimal *minusone = [new_JavaMathBigDecimal_initWithDouble_(-1.0) autorelease];
  JavaMathBigDecimal *phi, *ff, *b;
  for (i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(x, i, new_JavaMathBigDecimal_initWithDouble_(IOSDoubleArray_Get(nil_chk(xx), i)));
    IOSObjectArray_SetAndConsume(y, i, new_JavaMathBigDecimal_initWithDouble_(IOSDoubleArray_Get(nil_chk(yy), i)));
  }
  for (i = 0; i < n; i++) IOSObjectArray_Set(s, i, IOSObjectArray_SetAndConsume(cof, i, new_JavaMathBigDecimal_initWithDouble_(0.0)));
  IOSObjectArray_Set(s, n - 1, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(x, 0))) multiplyWithJavaMathBigDecimal:minusone]);
  for (i = 1; i < n; i++) {
    for (j = n - 1 - i; j < n - 1; j++) IOSObjectArray_Set(s, j, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(s, j))) subtractWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(x, i))) multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(s, j + 1)]]);
    IOSObjectArray_Set(s, n - 1, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(s, n - 1))) subtractWithJavaMathBigDecimal:IOSObjectArray_Get(x, i)]);
  }
  for (j = 0; j < n; j++) {
    phi = [new_JavaMathBigDecimal_initWithDouble_((jdouble) n) autorelease];
    for (k = n - 1; k > 0; k--) {
      JavaMathBigDecimal *kk = [new_JavaMathBigDecimal_initWithDouble_((jdouble) k) autorelease];
      phi = [((JavaMathBigDecimal *) nil_chk(([kk multiplyWithJavaMathBigDecimal:IOSObjectArray_Get(s, k)]))) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(x, j))) multiplyWithJavaMathBigDecimal:phi]];
    }
    ff = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(y, j))) divideWithJavaMathBigDecimal:phi withInt:50 withInt:JavaMathBigDecimal_ROUND_HALF_UP];
    b = [new_JavaMathBigDecimal_initWithDouble_(1.0) autorelease];
    for (k = n - 1; k >= 0; k--) {
      IOSObjectArray_Set(cof, k, [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(cof, k))) addWithJavaMathBigDecimal:[b multiplyWithJavaMathBigDecimal:ff]]);
      b = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(s, k))) addWithJavaMathBigDecimal:[((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(x, j))) multiplyWithJavaMathBigDecimal:b]];
    }
  }
  for (i = 0; i < n; i++) *IOSDoubleArray_GetRef(nil_chk(coff), i) = [((JavaMathBigDecimal *) nil_chk(IOSObjectArray_Get(cof, i))) doubleValue];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates)
