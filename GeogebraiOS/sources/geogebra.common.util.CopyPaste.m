//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/CopyPaste.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian3D/EuclidianView3DInterface.h"
#include "geogebra/common/io/MyXMLio.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Macro.h"
#include "geogebra/common/kernel/UndoManager.h"
#include "geogebra/common/kernel/algos/AlgoCirclePointRadius.h"
#include "geogebra/common/kernel/algos/AlgoCircleThreePoints.h"
#include "geogebra/common/kernel/algos/AlgoCircleTwoPoints.h"
#include "geogebra/common/kernel/algos/AlgoConicFivePoints.h"
#include "geogebra/common/kernel/algos/AlgoDependentList.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoEllipseHyperbolaFociPoint.h"
#include "geogebra/common/kernel/algos/AlgoJoinPoints.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsRay.h"
#include "geogebra/common/kernel/algos/AlgoJoinPointsSegment.h"
#include "geogebra/common/kernel/algos/AlgoMacro.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/algos/AlgoPolygonRegularND.h"
#include "geogebra/common/kernel/algos/AlgoTextfield.h"
#include "geogebra/common/kernel/algos/AlgoVector.h"
#include "geogebra/common/kernel/algos/Algos.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/algos/GetCommand.h"
#include "geogebra/common/kernel/algos/GetPointsAlgo.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoAxis.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolyLine.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/plugin/GgbAPI.h"
#include "geogebra/common/util/CopyPaste.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/TreeSet.h"

NSString *GeogebraCommonUtilCopyPaste_labelPrefix_ = @"CLIPBOARDmagicSTRING";
GeogebraCommonUtilCopyPaste *GeogebraCommonUtilCopyPaste_INSTANCE_ = nil;

@implementation GeogebraCommonUtilCopyPaste

- (instancetype)init {
  GeogebraCommonUtilCopyPaste_init(self);
  return self;
}

- (jboolean)isEmpty {
  if (copiedXML_ == nil) return YES;
  return [((JavaLangStringBuilder *) nil_chk(copiedXML_)) length] == 0;
}

- (void)removeFixedSlidersWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) if ([((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) isSliderFixed]) {
      [geos removeWithId:geo];
    }
  }
}

- (void)removeDependentFromAxesWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                           withGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  GeogebraCommonKernelAlgosConstructionElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = [geos getWithInt:i];
    if ([((JavaUtilTreeSet *) nil_chk([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) getXAxis]]) {
      [geos removeWithInt:i];
    }
    else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getYAxis]]) {
      [geos removeWithInt:i];
    }
    else if ([app is3D]) {
      if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getXAxis3D]]) {
        [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getYAxis3D]]) {
        [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getZAxis3D]]) {
        [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getXOYPlane]]) {
        [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getClippingCube]]) {
        [geos removeWithInt:i];
      }
      else if ([((JavaUtilTreeSet *) nil_chk([geo getAllIndependentPredecessors])) containsWithId:[((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getSpace]]) {
        [geos removeWithInt:i];
      }
    }
  }
}

- (void)removeHavingMacroPredecessorsWithJavaUtilArrayList:(JavaUtilArrayList *)geos
                                               withBoolean:(jboolean)copymacro {
  GeogebraCommonKernelGeosGeoElement *geo, *geo2;
  id<JavaUtilIterator> it;
  jboolean found = NO;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([geos getWithInt:i])) isGeoElement]) {
      geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
      found = NO;
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] != nil) {
        if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:GeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro()]) {
          found = YES;
          if (copymacro) {
            [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((GeogebraCommonKernelAlgosAlgoMacro *) nil_chk(((GeogebraCommonKernelAlgosAlgoMacro *) check_class_cast([geo getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoMacro class])))) getMacro]];
          }
        }
      }
      if (!found) {
        it = [((JavaUtilTreeSet *) nil_chk([geo getAllPredecessors])) iterator];
        while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
          geo2 = [it next];
          if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getParentAlgorithm] != nil) {
            if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo2 getParentAlgorithm])) getClassName])) isEqual:GeogebraCommonKernelAlgosAlgosEnum_get_AlgoMacro()]) {
              found = YES;
              if (copymacro) {
                [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((GeogebraCommonKernelAlgosAlgoMacro *) nil_chk(((GeogebraCommonKernelAlgosAlgoMacro *) check_class_cast([geo2 getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoMacro class])))) getMacro]];
              }
              break;
            }
          }
        }
      }
      if (found && !copymacro) {
        [geos removeWithInt:i];
      }
    }
  }
}

- (void)addSubGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos)) size] - 1; i >= 0; i--) {
    geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] == nil) continue;
    if (![geo isGeoElement3D]) {
      if (([geo isGeoLine] && [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoJoinPoints class]]) || ([geo isGeoSegment] && [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoJoinPointsSegment class]]) || ([geo isGeoRay] && [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoJoinPointsRay class]]) || ([geo isGeoVector] && [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoVector class]])) {
        if (![geos containsWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 0)]) {
          [geos addWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 0)];
        }
        if (![geos containsWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 1)]) {
          [geos addWithId:IOSObjectArray_Get(nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput]), 1)];
        }
      }
      else if ([geo isGeoPolygon]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygon class]]) {
          IOSObjectArray *points = [((GeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast(([geo getParentAlgorithm]), [GeogebraCommonKernelAlgosAlgoPolygon class])))) getPoints];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(points))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(points, j)]) {
              [geos addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(points, j), [GeogebraCommonKernelGeosGeoElement class])];
            }
          }
          IOSObjectArray *ogeos = [((GeogebraCommonKernelAlgosAlgoPolygon *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolygon *) check_class_cast(([geo getParentAlgorithm]), [GeogebraCommonKernelAlgosAlgoPolygon class])))) getOutput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(ogeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(ogeos, j)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoSegment]) {
              [geos addWithId:IOSObjectArray_Get(ogeos, j)];
            }
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolygonRegularND class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk((([geo getParentAlgorithm])))) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)] && [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, j))) isGeoPoint]) {
              [geos addWithId:IOSObjectArray_Get(pgeos, j)];
            }
          }
          IOSObjectArray *ogeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk((([geo getParentAlgorithm])))) getOutput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(ogeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(ogeos, j)] && ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoSegment] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(ogeos, j))) isGeoPoint])) {
              [geos addWithId:IOSObjectArray_Get(ogeos, j)];
            }
          }
        }
      }
      else if ([geo isKindOfClass:[GeogebraCommonKernelGeosGeoPolyLine class]]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPolyLine class]]) {
          IOSObjectArray *pgeos = [((id<GeogebraCommonKernelAlgosGetPointsAlgo>) nil_chk(((id<GeogebraCommonKernelAlgosGetPointsAlgo>) check_protocol_cast(([geo getParentAlgorithm]), @protocol(GeogebraCommonKernelAlgosGetPointsAlgo))))) getPoints];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) {
              [geos addWithId:IOSObjectArray_Get(pgeos, j)];
            }
          }
        }
      }
      else if ([geo isGeoConic]) {
        if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoCircleTwoPoints class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 1)]) [geos addWithId:IOSObjectArray_Get(pgeos, 1)];
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoCircleThreePoints class]] || [[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoEllipseHyperbolaFociPoint class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 1)]) [geos addWithId:IOSObjectArray_Get(pgeos, 1)];
          if (![geos containsWithId:IOSObjectArray_Get(pgeos, 2)]) [geos addWithId:IOSObjectArray_Get(pgeos, 2)];
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoConicFivePoints class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) [geos addWithId:IOSObjectArray_Get(pgeos, j)];
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoCirclePointRadius class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (![geos containsWithId:IOSObjectArray_Get(nil_chk(pgeos), 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
        }
      }
      else if ([geo isGeoList]) {
        if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_Sequence()]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (((IOSObjectArray *) nil_chk(pgeos))->size_ > 1) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, 0)]) [geos addWithId:IOSObjectArray_Get(pgeos, 0)];
          }
        }
        else if ([[geo getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoDependentList class]]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          for (jint j = 0; j < ((IOSObjectArray *) nil_chk(pgeos))->size_; j++) {
            if (![geos containsWithId:IOSObjectArray_Get(pgeos, j)]) [geos addWithId:IOSObjectArray_Get(pgeos, j)];
          }
        }
      }
    }
  }
}

- (JavaUtilArrayList *)addPredecessorGeosWithJavaUtilArrayList:(JavaUtilArrayList *)geos {
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  GeogebraCommonKernelGeosGeoElement *geo, *geo2;
  JavaUtilTreeSet *ts;
  id<JavaUtilIterator> it;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(geos)) size]; i++) {
    geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([geos getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
    ts = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAllPredecessors];
    it = [((JavaUtilTreeSet *) nil_chk(ts)) iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      geo2 = [it next];
      if (![ret containsWithId:geo2] && ![geos containsWithId:geo2] && !([GeogebraCommonKernelKernelNDGeoAxisND_class_() isInstance:geo2]) && (geo2 != [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo2)) getKernel])) getXOYPlane]) && (geo2 != [((GeogebraCommonKernelKernel *) nil_chk([geo2 getKernel])) getClippingCube]) && (geo2 != [((GeogebraCommonKernelKernel *) nil_chk([geo2 getKernel])) getSpace])) {
        [ret addWithId:geo2];
      }
    }
  }
  [geos addAllWithJavaUtilCollection:ret];
  return ret;
}

- (JavaUtilArrayList *)addAlgosDependentFromInsideWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                                                            withBoolean:(jboolean)putdown
                                                            withBoolean:(jboolean)copymacro {
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  GeogebraCommonKernelGeosGeoElement *geo;
  JavaUtilArrayList *geoal;
  GeogebraCommonKernelAlgosAlgoElement *ale;
  JavaUtilArrayList *ac;
  IOSObjectArray *geos;
  for (jint i = [((JavaUtilArrayList *) nil_chk(conels)) size] - 1; i >= 0; i--) {
    geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([conels getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
    if (([[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoTextfield class]]) && (![ret containsWithId:[geo getParentAlgorithm]]) && (![conels containsWithId:[geo getParentAlgorithm]])) {
      [ret addWithId:[geo getParentAlgorithm]];
    }
    geoal = [geo getAlgorithmList];
    for (jint j = 0; j < [((JavaUtilArrayList *) nil_chk(geoal)) size]; j++) {
      ale = [geoal getWithInt:j];
      if (!([ale isKindOfClass:[GeogebraCommonKernelAlgosAlgoMacro class]]) || putdown || copymacro) {
        ac = [new_JavaUtilArrayList_init() autorelease];
        [ac addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(ale)) getInput])];
        if ([conels containsAllWithJavaUtilCollection:ac] && ![conels containsWithId:ale]) {
          if (([ale isKindOfClass:[GeogebraCommonKernelAlgosAlgoMacro class]]) && copymacro) {
            [((JavaUtilHashSet *) nil_chk(copiedMacros_)) addWithId:[((GeogebraCommonKernelAlgosAlgoMacro *) check_class_cast(ale, [GeogebraCommonKernelAlgosAlgoMacro class])) getMacro]];
          }
          [conels addWithId:ale];
          geos = [ale getOutput];
          if (geos != nil) {
            for (jint k = 0; k < geos->size_; k++) {
              if (![ret containsWithId:IOSObjectArray_Get(geos, k)] && ![conels containsWithId:IOSObjectArray_Get(geos, k)]) {
                [ret addWithId:IOSObjectArray_Get(geos, k)];
              }
            }
          }
        }
      }
    }
  }
  [conels addAllWithJavaUtilCollection:ret];
  return ret;
}

- (JavaUtilArrayList *)removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                                                       withJavaUtilArrayList:(JavaUtilArrayList *)selected {
  JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
  [ret addAllWithJavaUtilCollection:conels];
  GeogebraCommonKernelGeosGeoElement *geo;
  for (jint i = [ret size] - 1; i >= 0; i--) {
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([ret getWithInt:i])) isGeoElement]) {
      geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast([ret getWithInt:i], [GeogebraCommonKernelGeosGeoElement class]);
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric] && [geo isIndependent] && ![((JavaUtilArrayList *) nil_chk(selected)) containsWithId:geo]) {
        [ret removeWithInt:i];
      }
    }
  }
  return ret;
}

- (void)beforeSavingToXMLWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                         withJavaUtilArrayList:(JavaUtilArrayList *)geostohide
                                   withBoolean:(jboolean)samewindow
                                   withBoolean:(jboolean)putdown {
  if (samewindow) GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabelsforSameWindow_(self, new_JavaUtilArrayList_init());
  else GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabels_(self, new_JavaUtilArrayList_init());
  GeogebraCommonKernelAlgosConstructionElement *geo;
  NSString *label;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(conels)) size]; i++) {
    geo = [conels getWithInt:i];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      label = [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) getLabelSimple];
      if (label != nil) {
        [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:JreStrcat("$$", GeogebraCommonUtilCopyPaste_labelPrefix_, label)];
        if (samewindow) [((JavaUtilArrayList *) nil_chk(copiedXMLlabelsforSameWindow_)) addWithId:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) getLabelSimple]];
        else [((JavaUtilArrayList *) nil_chk(copiedXMLlabels_)) addWithId:[((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) getLabelSimple]];
        if (putdown) {
          [((GeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:label withNSString:JreStrcat("$$", GeogebraCommonUtilCopyPaste_labelPrefix_, label)];
        }
      }
    }
  }
  for (jint j = [((JavaUtilArrayList *) nil_chk(geostohide)) size] - 1; j >= 0; j--) {
    geo = [geostohide getWithInt:j];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement] && [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) isEuclidianVisible]) {
      [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) setEuclidianVisibleWithBoolean:NO];
    }
    else {
      [geostohide removeWithId:geo];
    }
  }
}

- (void)afterSavingToXMLWithJavaUtilArrayList:(JavaUtilArrayList *)conels
                        withJavaUtilArrayList:(JavaUtilArrayList *)geostoshow
                                  withBoolean:(jboolean)putdown {
  GeogebraCommonKernelAlgosConstructionElement *geo;
  NSString *label;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(conels)) size]; i++) {
    geo = [conels getWithInt:i];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      label = [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) getLabelSimple];
      if (label != nil && ((jint) [label length]) >= ((jint) [((NSString *) nil_chk(GeogebraCommonUtilCopyPaste_labelPrefix_)) length])) {
        if ([((NSString *) nil_chk([label substring:0 endIndex:((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])])) isEqual:GeogebraCommonUtilCopyPaste_labelPrefix_]) {
          @try {
            [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) setLabelSimpleWithNSString:[label substring:((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
            if (putdown) {
              [((GeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:label withNSString:[label substring:((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
            }
          }
          @catch (JavaLangException *e) {
            [((JavaLangException *) nil_chk(e)) printStackTrace];
          }
        }
      }
    }
  }
  for (jint j = [((JavaUtilArrayList *) nil_chk(geostoshow)) size] - 1; j >= 0; j--) {
    geo = [geostoshow getWithInt:j];
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(geo)) isGeoElement]) {
      [((GeogebraCommonKernelGeosGeoElement *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoElement class])) setEuclidianVisibleWithBoolean:YES];
    }
  }
}

- (void)copyToXMLWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                     withJavaUtilArrayList:(JavaUtilArrayList *)geos
                               withBoolean:(jboolean)putdown {
  jboolean copyMacrosPresume = YES;
  if ([((JavaUtilArrayList *) nil_chk(geos)) isEmpty]) return;
  jboolean scriptsBlocked = [((GeogebraCommonMainApp *) nil_chk(app)) isBlockUpdateScripts];
  [app setBlockUpdateScriptsWithBoolean:YES];
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXML_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabels_(self, new_JavaUtilArrayList_init());
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLforSameWindow_(self, new_JavaLangStringBuilder_init());
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabelsforSameWindow_(self, new_JavaUtilArrayList_init());
  GeogebraCommonUtilCopyPaste_set_copySource_(self, [app getActiveEuclidianView]);
  GeogebraCommonUtilCopyPaste_set_copyObject_(self, [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo]);
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedMacros_(self, new_JavaUtilHashSet_init());
  JavaUtilArrayList *geoslocal = [new_JavaUtilArrayList_init() autorelease];
  [geoslocal addAllWithJavaUtilCollection:geos];
  if (!putdown) {
    [self removeFixedSlidersWithJavaUtilArrayList:geoslocal];
  }
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  [self removeDependentFromAxesWithJavaUtilArrayList:geoslocal withGeogebraCommonMainApp:app];
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  if (!putdown) {
    [self removeHavingMacroPredecessorsWithJavaUtilArrayList:geoslocal withBoolean:copyMacrosPresume];
    if ([geoslocal isEmpty]) {
      [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
      return;
    }
  }
  [self addSubGeosWithJavaUtilArrayList:geoslocal];
  if ([geoslocal isEmpty]) {
    [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
    return;
  }
  JavaUtilArrayList *geostohide = [self addPredecessorGeosWithJavaUtilArrayList:geoslocal];
  [((JavaUtilArrayList *) nil_chk(geostohide)) addAllWithJavaUtilCollection:[self addAlgosDependentFromInsideWithJavaUtilArrayList:geoslocal withBoolean:putdown withBoolean:copyMacrosPresume]];
  JavaUtilArrayList *geoslocalsw = [self removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geos];
  JavaUtilArrayList *geostohidesw = [self removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:geostohide withJavaUtilArrayList:geos];
  GeogebraCommonKernelKernel *kernel = [app getKernel];
  [self beforeSavingToXMLWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geostohide withBoolean:NO withBoolean:putdown];
  jboolean saveScriptsToXML = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) getSaveScriptsToXML];
  if (!putdown) {
    [kernel setSaveScriptsToXMLWithBoolean:NO];
  }
  @try {
    GeogebraCommonUtilCopyPaste_setAndConsume_copiedXML_(self, new_JavaLangStringBuilder_init());
    GeogebraCommonKernelAlgosConstructionElement *ce;
    GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction];
    for (jint i = 0; i < [((GeogebraCommonKernelConstruction *) nil_chk(cons)) steps]; ++i) {
      ce = [cons getConstructionElementWithInt:i];
      if ([geoslocal containsWithId:ce]) [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXMLWithBoolean:NO withJavaLangStringBuilder:copiedXML_];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
    GeogebraCommonUtilCopyPaste_setAndConsume_copiedXML_(self, new_JavaLangStringBuilder_init());
  }
  if (!putdown) {
    [kernel setSaveScriptsToXMLWithBoolean:saveScriptsToXML];
  }
  [self afterSavingToXMLWithJavaUtilArrayList:geoslocal withJavaUtilArrayList:geostohide withBoolean:putdown];
  if (!putdown) {
    [self beforeSavingToXMLWithJavaUtilArrayList:geoslocalsw withJavaUtilArrayList:geostohidesw withBoolean:YES withBoolean:putdown];
    [kernel setSaveScriptsToXMLWithBoolean:NO];
    @try {
      GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLforSameWindow_(self, new_JavaLangStringBuilder_init());
      GeogebraCommonKernelAlgosConstructionElement *ce;
      GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction];
      for (jint i = 0; i < [((GeogebraCommonKernelConstruction *) nil_chk(cons)) steps]; ++i) {
        ce = [cons getConstructionElementWithInt:i];
        if ([((JavaUtilArrayList *) nil_chk(geoslocalsw)) containsWithId:ce]) [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getXMLWithBoolean:NO withJavaLangStringBuilder:copiedXMLforSameWindow_];
      }
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
      GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLforSameWindow_(self, new_JavaLangStringBuilder_init());
    }
    [kernel setSaveScriptsToXMLWithBoolean:saveScriptsToXML];
    [self afterSavingToXMLWithJavaUtilArrayList:geoslocalsw withJavaUtilArrayList:geostohidesw withBoolean:putdown];
  }
  [app setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) setSelectionRectangleWithGeogebraCommonAwtGRectangle:nil];
  [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
}

- (void)clearClipboard {
  GeogebraCommonUtilCopyPaste_set_copiedXML_(self, nil);
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabels_(self, new_JavaUtilArrayList_init());
  GeogebraCommonUtilCopyPaste_set_copiedXMLforSameWindow_(self, nil);
  GeogebraCommonUtilCopyPaste_setAndConsume_copiedXMLlabelsforSameWindow_(self, new_JavaUtilArrayList_init());
  GeogebraCommonUtilCopyPaste_set_copySource_(self, nil);
  GeogebraCommonUtilCopyPaste_set_copyObject_(self, nil);
  GeogebraCommonUtilCopyPaste_set_copyObject2_(self, nil);
  GeogebraCommonUtilCopyPaste_set_copiedMacros_(self, nil);
}

- (void)handleLabelsWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                        withJavaUtilArrayList:(JavaUtilArrayList *)labels
                                  withBoolean:(jboolean)putdown {
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonMainApp *) nil_chk(app)) getKernel];
  GeogebraCommonKernelGeosGeoElement *geo;
  NSString *oldLabel;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(labels)) size]; i++) {
    NSString *ll = [labels getWithInt:i];
    geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel)) lookupLabelWithNSString:ll];
    if (geo != nil) {
      if ([app getActiveEuclidianView] == [app getEuclidianView1]) {
        [app addToEuclidianViewWithGeogebraCommonKernelGeosGeoElement:geo];
        if ([app hasEuclidianView2WithInt:1]) {
          [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
          [((GeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) removeWithGeogebraCommonKernelGeosGeoElement:geo];
        }
        if ([app getEuclidianView3D] != nil) {
          [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) removeWithGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      else if ([app getActiveEuclidianView] == [app getEuclidianView3D]) {
        [app removeFromEuclidianViewWithGeogebraCommonKernelGeosGeoElement:geo];
        if ([app getEuclidianView3D] != nil) {
          [geo addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) addWithGeogebraCommonKernelGeosGeoElement:geo];
        }
        if ([app hasEuclidianView2WithInt:1]) {
          [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
          [((GeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) removeWithGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      else {
        [app removeFromEuclidianViewWithGeogebraCommonKernelGeosGeoElement:geo];
        [geo addViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
        [((GeogebraCommonEuclidianEuclidianView *) nil_chk([app getEuclidianView2WithInt:1])) addWithGeogebraCommonKernelGeosGeoElement:geo];
        if ([app getEuclidianView3D] != nil) {
          [geo removeViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
          [((id<GeogebraCommonEuclidian3DEuclidianView3DInterface>) nil_chk([app getEuclidianView3D])) removeWithGeogebraCommonKernelGeosGeoElement:geo];
        }
      }
      oldLabel = [geo getLabelSimple];
      [geo setLabelWithNSString:[geo getIndexLabelWithNSString:[((NSString *) nil_chk([geo getLabelSimple])) substring:((jint) [((NSString *) nil_chk(GeogebraCommonUtilCopyPaste_labelPrefix_)) length])]]];
      if (putdown) {
        [((GeogebraCommonKernelKernel *) nil_chk([geo getKernel])) renameLabelInScriptsWithNSString:oldLabel withNSString:[geo getLabelSimple]];
      }
      [((GeogebraCommonMainSelectionManager *) nil_chk([app getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:geo];
      if ([geo getParentAlgorithm] != nil) {
        if ([((id<GeogebraCommonKernelAlgosGetCommand>) nil_chk([((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getClassName])) isEqual:GeogebraCommonKernelCommandsCommandsEnum_get_Sequence()]) {
          IOSObjectArray *pgeos = [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getInput];
          if (((IOSObjectArray *) nil_chk(pgeos))->size_ > 1 && ((jint) [((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) length]) > ((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])) if ([((NSString *) nil_chk([((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) substring:0 endIndex:((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])])) isEqual:GeogebraCommonUtilCopyPaste_labelPrefix_]) [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) setLabelSimpleWithNSString:[((NSString *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(pgeos, 1))) getLabelSimple])) substring:((jint) [GeogebraCommonUtilCopyPaste_labelPrefix_ length])]];
        }
      }
    }
  }
}

- (jboolean)pasteFastWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  if ([((GeogebraCommonMainApp *) nil_chk(app)) getActiveEuclidianView] != copySource_) return NO;
  if (copyObject_ != copyObject2_) return NO;
  return YES;
}

- (void)pasteFromXMLWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
                                  withBoolean:(jboolean)putdown {
  if (copiedXML_ == nil) return;
  if ([((JavaLangStringBuilder *) nil_chk(copiedXML_)) length] == 0) return;
  if (![((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getActiveEuclidianView])) getEuclidianController])) mayPaste]) return;
  [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) notifyPaste];
  GeogebraCommonUtilCopyPaste_set_copyObject2_(self, [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo]);
  if ([self pasteFastWithGeogebraCommonMainApp:app] && !putdown) {
    if (copiedXMLforSameWindow_ == nil) return;
    if ([((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) length] == 0) return;
  }
  jboolean scriptsBlocked = [app isBlockUpdateScripts];
  [app setBlockUpdateScriptsWithBoolean:YES];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) clearSelectionsWithBoolean:YES withBoolean:NO];
  [app updateSelectionWithBoolean:NO];
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) setPastePreviewSelected];
  if ([self pasteFastWithGeogebraCommonMainApp:app] && !putdown) {
    id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [app getActiveEuclidianView];
    if (ev == [app getEuclidianView1]) {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
    }
    else if (ev == [app getEuclidianView3D]) {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    else {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[((JavaLangStringBuilder *) nil_chk(copiedXMLforSameWindow_)) description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    [self handleLabelsWithGeogebraCommonMainApp:app withJavaUtilArrayList:copiedXMLlabelsforSameWindow_ withBoolean:putdown];
  }
  else {
    if (![((JavaUtilHashSet *) nil_chk(copiedMacros_)) isEmpty]) {
      @try {
        [app addMacroXMLWithNSString:[((GeogebraCommonIoMyXMLio *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk(copySource_)) getApplication])) getXMLio])) getFullMacroXMLWithJavaUtilArrayList:[new_JavaUtilArrayList_initWithJavaUtilCollection_(copiedMacros_) autorelease]]];
      }
      @catch (JavaLangException *ex) {
        GeogebraCommonMainApp_debugWithNSString_(@"Could not load any macros at \"Paste from XML\"");
        [((JavaLangException *) nil_chk(ex)) printStackTrace];
      }
    }
    id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon> ev = [app getActiveEuclidianView];
    if (ev == [app getEuclidianView1]) {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN];
    }
    else if (ev == [app getEuclidianView3D]) {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN3D];
    }
    else {
      [((GeogebraCommonPluginGgbAPI *) nil_chk([app getGgbApi])) evalXMLWithNSString:[copiedXML_ description]];
      [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) getConstruction])) updateConstruction];
      [app setActiveViewWithInt:GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
    }
    [self handleLabelsWithGeogebraCommonMainApp:app withJavaUtilArrayList:copiedXMLlabels_ withBoolean:putdown];
  }
  [app setBlockUpdateScriptsWithBoolean:scriptsBlocked];
  if (!putdown) {
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app getActiveEuclidianView])) getEuclidianController])) setPastePreviewSelected];
  }
  [app setModeWithInt:GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE];
  [((GeogebraCommonKernelKernel *) nil_chk([app getKernel])) notifyPasteComplete];
}

- (void)pastePutDownCallbackWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app {
  if ([self pasteFastWithGeogebraCommonMainApp:app]) {
    GeogebraCommonUtilCopyPaste_set_copyObject_(self, [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getKernel])) getConstruction])) getUndoManager])) getCurrentUndoInfo]);
    GeogebraCommonUtilCopyPaste_set_copyObject2_(self, nil);
  }
}

- (void)dealloc {
  RELEASE_(copiedMacros_);
  RELEASE_(copiedXML_);
  RELEASE_(copiedXMLlabels_);
  RELEASE_(copiedXMLforSameWindow_);
  RELEASE_(copiedXMLlabelsforSameWindow_);
  RELEASE_(copySource_);
  RELEASE_(copyObject_);
  RELEASE_(copyObject2_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "CopyPaste", NULL, 0x1, NULL, NULL },
    { "isEmpty", NULL, "Z", 0x1, NULL, NULL },
    { "removeFixedSlidersWithJavaUtilArrayList:", "removeFixedSliders", "V", 0x4, NULL, NULL },
    { "removeDependentFromAxesWithJavaUtilArrayList:withGeogebraCommonMainApp:", "removeDependentFromAxes", "V", 0x4, NULL, NULL },
    { "removeHavingMacroPredecessorsWithJavaUtilArrayList:withBoolean:", "removeHavingMacroPredecessors", "V", 0x4, NULL, NULL },
    { "addSubGeosWithJavaUtilArrayList:", "addSubGeos", "V", 0x4, NULL, NULL },
    { "addPredecessorGeosWithJavaUtilArrayList:", "addPredecessorGeos", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "addAlgosDependentFromInsideWithJavaUtilArrayList:withBoolean:withBoolean:", "addAlgosDependentFromInside", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "removeFreeNonselectedGeoNumericsWithJavaUtilArrayList:withJavaUtilArrayList:", "removeFreeNonselectedGeoNumerics", "Ljava.util.ArrayList;", 0x4, NULL, NULL },
    { "beforeSavingToXMLWithJavaUtilArrayList:withJavaUtilArrayList:withBoolean:withBoolean:", "beforeSavingToXML", "V", 0x4, NULL, NULL },
    { "afterSavingToXMLWithJavaUtilArrayList:withJavaUtilArrayList:withBoolean:", "afterSavingToXML", "V", 0x4, NULL, NULL },
    { "copyToXMLWithGeogebraCommonMainApp:withJavaUtilArrayList:withBoolean:", "copyToXML", "V", 0x1, NULL, NULL },
    { "clearClipboard", NULL, "V", 0x1, NULL, NULL },
    { "handleLabelsWithGeogebraCommonMainApp:withJavaUtilArrayList:withBoolean:", "handleLabels", "V", 0x4, NULL, NULL },
    { "pasteFastWithGeogebraCommonMainApp:", "pasteFast", "Z", 0x1, NULL, NULL },
    { "pasteFromXMLWithGeogebraCommonMainApp:withBoolean:", "pasteFromXML", "V", 0x1, NULL, NULL },
    { "pastePutDownCallbackWithGeogebraCommonMainApp:", "pastePutDownCallback", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "labelPrefix_", NULL, 0x19, "Ljava.lang.String;", &GeogebraCommonUtilCopyPaste_labelPrefix_, NULL,  },
    { "INSTANCE_", NULL, 0x9, "Lgeogebra.common.util.CopyPaste;", &GeogebraCommonUtilCopyPaste_INSTANCE_, NULL,  },
    { "copiedMacros_", NULL, 0x4, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/kernel/Macro;>;",  },
    { "copiedXML_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "copiedXMLlabels_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "copiedXMLforSameWindow_", NULL, 0x4, "Ljava.lang.StringBuilder;", NULL, NULL,  },
    { "copiedXMLlabelsforSameWindow_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Ljava/lang/String;>;",  },
    { "copySource_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianViewInterfaceCommon;", NULL, NULL,  },
    { "copyObject_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
    { "copyObject2_", NULL, 0x4, "Ljava.lang.Object;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilCopyPaste = { 2, "CopyPaste", "geogebra.common.util", NULL, 0x1, 17, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilCopyPaste;
}

@end

void GeogebraCommonUtilCopyPaste_init(GeogebraCommonUtilCopyPaste *self) {
  NSObject_init(self);
}

GeogebraCommonUtilCopyPaste *new_GeogebraCommonUtilCopyPaste_init() {
  GeogebraCommonUtilCopyPaste *self = [GeogebraCommonUtilCopyPaste alloc];
  GeogebraCommonUtilCopyPaste_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilCopyPaste)
