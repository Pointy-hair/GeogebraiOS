//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/euclidian/Drawable.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GArea.h"
#include "geogebra/common/awt/GBasicStroke.h"
#include "geogebra/common/awt/GBufferedImage.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GDimension.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPaint.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/awt/GShape.h"
#include "geogebra/common/euclidian/DrawEquation.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/HatchingHandler.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/kernelND/GeoElementND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonEuclidianDrawable () {
 @public
  jboolean forceNoFill_;
  jint lineThickness_;
  jint lineType_;
  NSString *oldLabelDesc_;
  jboolean labelHasIndex_;
  id<GeogebraCommonAwtGArea> shape_;
  jint lastFontSize_;
  JavaUtilArrayList *hatchPaint_;
  jboolean forcedLineType_;
  GeogebraCommonEuclidianHatchingHandler *hatchingHandler_;
}

- (void)ensureLabelDrawsOnScreenWithDouble:(jdouble)Xmultiplier
                                withDouble:(jdouble)Ymultiplier;

- (GeogebraCommonEuclidianHatchingHandler *)getHatchingHandler;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawable, oldLabelDesc_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawable, shape_, id<GeogebraCommonAwtGArea>)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawable, hatchPaint_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonEuclidianDrawable, hatchingHandler_, GeogebraCommonEuclidianHatchingHandler *)

__attribute__((unused)) static void GeogebraCommonEuclidianDrawable_drawLabelWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawable *self, id<GeogebraCommonAwtGGraphics2D> g2);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(GeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier);

__attribute__((unused)) static jboolean GeogebraCommonEuclidianDrawable_isSerif(GeogebraCommonEuclidianDrawable *self);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(GeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier);

__attribute__((unused)) static void GeogebraCommonEuclidianDrawable_updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND_withInt_(GeogebraCommonEuclidianDrawable *self, id<GeogebraCommonKernelKernelNDGeoElementND> fromGeo, jint minThickness);

__attribute__((unused)) static GeogebraCommonEuclidianHatchingHandler *GeogebraCommonEuclidianDrawable_getHatchingHandler(GeogebraCommonEuclidianDrawable *self);

@implementation GeogebraCommonEuclidianDrawable

- (void)update {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)drawWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jboolean)hitWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)hitThreshold {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isInsideWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)intersectsRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)rect {
  id<GeogebraCommonAwtGArea> s = [self getShape];
  if (s == nil) {
    return NO;
  }
  if ([self isFilled]) {
    return [((id<GeogebraCommonAwtGArea>) nil_chk(s)) intersectsWithGeogebraCommonAwtGRectangle2D:rect];
  }
  return [((id<GeogebraCommonAwtGArea>) nil_chk(s)) intersectsWithGeogebraCommonAwtGRectangle2D:rect] && ![s containsWithGeogebraCommonAwtGRectangle2D:rect];
}

- (GeogebraCommonKernelGeosGeoElement *)getGeoElement {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setGeoElementWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getxLabel {
  return xLabel_;
}

- (jdouble)getyLabel {
  return yLabel_;
}

- (void)updateFontSize {
}

- (id<GeogebraCommonAwtGRectangle>)getBounds {
  return nil;
}

- (void)drawLabelWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
  GeogebraCommonEuclidianDrawable_drawLabelWithGeogebraCommonAwtGGraphics2D_(self, g2);
}

- (void)ensureLabelDrawsOnScreenWithDouble:(jdouble)Xmultiplier
                                withDouble:(jdouble)Ymultiplier {
  GeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

- (void)drawMultilineLaTeXWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                                withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)font
                               withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)fgColor
                               withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgColor {
  [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithGeogebraCommonAwtGRectangle:GeogebraCommonEuclidianEuclidianStatic_drawMultilineLaTeXWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGFont_withGeogebraCommonAwtGColor_withGeogebraCommonAwtGColor_withNSString_withInt_withInt_withBoolean_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], [view_ getTempGraphics2DWithGeogebraCommonAwtGFont:font], geo_, g2, font, fgColor, bgColor, labelDesc_, xLabel_, yLabel_, GeogebraCommonEuclidianDrawable_isSerif(self))];
}

- (jboolean)isSerif {
  return GeogebraCommonEuclidianDrawable_isSerif(self);
}

- (void)drawMultilineTextWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                               withGeogebraCommonAwtGFont:(GeogebraCommonAwtGFont *)textFont {
  if (labelDesc_ == nil) return;
  if (oldLabelDesc_ == labelDesc_ && !labelHasIndex_) {
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithGeogebraCommonAwtGRectangle:GeogebraCommonEuclidianEuclidianStatic_drawMultiLineTextWithGeogebraCommonMainApp_withNSString_withInt_withInt_withGeogebraCommonAwtGGraphics2D_withBoolean_withGeogebraCommonAwtGFont_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], labelDesc_, xLabel_, yLabel_, g2, GeogebraCommonEuclidianDrawable_isSerif(self), textFont)];
  }
  else {
    jint lines = 0;
    jint fontSize = [((GeogebraCommonAwtGFont *) nil_chk(textFont)) getSize];
    jfloat lineSpread = fontSize * 1.5f;
    jint xoffset = 0, yoffset = 0;
    GeogebraCommonEuclidianDrawable_set_oldLabelDesc_(self, labelDesc_);
    jint lineBegin = 0;
    jint length = ((jint) [((NSString *) nil_chk(labelDesc_)) length]);
    xoffset = 0;
    yoffset = 0;
    for (jint i = 0; i < length - 1; i++) {
      if ([labelDesc_ charAtWithInt:i] == 0x000a) {
        [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:textFont];
        GeogebraCommonAwtGPoint *p = GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], g2, [labelDesc_ substring:lineBegin endIndex:i], xLabel_, yLabel_ + lines * lineSpread, GeogebraCommonEuclidianDrawable_isSerif(self), YES);
        if (((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ > xoffset) xoffset = p->x_;
        if (p->y_ > yoffset) yoffset = p->y_;
        lines++;
        lineBegin = i + 1;
      }
    }
    jfloat ypos = yLabel_ + lines * lineSpread;
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setFontWithGeogebraCommonAwtGFont:textFont];
    GeogebraCommonAwtGPoint *p = GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getApplication], g2, [labelDesc_ substring:lineBegin], xLabel_, ypos, GeogebraCommonEuclidianDrawable_isSerif(self), YES);
    if (((GeogebraCommonAwtGPoint *) nil_chk(p))->x_ > xoffset) xoffset = p->x_;
    if (p->y_ > yoffset) yoffset = p->y_;
    labelHasIndex_ = (yoffset > 0);
    jint height = J2ObjCFpToInt(((lines + 1) * lineSpread));
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) setBoundsWithInt:xLabel_ - 3 withInt:yLabel_ - fontSize - 3 withInt:xoffset + 6 withInt:height + 6];
  }
}

- (jboolean)addLabelOffset {
  if (((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_))->labelOffsetX_ == 0 && geo_->labelOffsetY_ == 0) return NO;
  jint x = xLabel_ + geo_->labelOffsetX_;
  jint y = yLabel_ + geo_->labelOffsetY_;
  jint xmax = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(view_)) getWidth] - 15;
  jint ymax = [view_ getHeight] - 5;
  if (x < 5 || x > xmax) return NO;
  if (y < 15 || y > ymax) return NO;
  xLabel_ = x;
  yLabel_ = y;
  return YES;
}

- (void)addLabelOffsetEnsureOnScreen {
  GeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(self, 1.0, 1.0);
}

- (void)addLabelOffsetEnsureOnScreenWithDouble:(jdouble)Xmultiplier
                                    withDouble:(jdouble)Ymultiplier {
  GeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

- (jboolean)hitLabelWithInt:(jint)x
                    withInt:(jint)y {
  return [((id<GeogebraCommonAwtGRectangle>) nil_chk(labelRectangle_)) containsWithInt:x withInt:y];
}

- (void)forceLineTypeWithInt:(jint)type {
  forcedLineType_ = YES;
  lineType_ = type;
}

- (void)updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)fromGeo {
  GeogebraCommonEuclidianDrawable_updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND_withInt_(self, fromGeo, 0);
}

- (void)updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:(id<GeogebraCommonKernelKernelNDGeoElementND>)fromGeo
                                                          withInt:(jint)minThickness {
  GeogebraCommonEuclidianDrawable_updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND_withInt_(self, fromGeo, minThickness);
}

- (void)updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)fromGeo {
  GeogebraCommonEuclidianDrawable_set_strokedShape_(self, nil);
  GeogebraCommonEuclidianDrawable_set_strokedShape2_(self, nil);
  if (lineThickness_ != ((GeogebraCommonKernelGeosGeoElement *) nil_chk(fromGeo))->lineThickness_) {
    lineThickness_ = fromGeo->lineThickness_;
    jfloat width = lineThickness_ / 2.0f;
    GeogebraCommonEuclidianDrawable_set_objStroke_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newBasicStrokeWithFloat:width withInt:[((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[objStroke_ getDashArray] withFloat:0.0f]);
    GeogebraCommonEuclidianDrawable_set_decoStroke_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:width withInt:[((id<GeogebraCommonAwtGBasicStroke>) nil_chk(objStroke_)) getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[((id<GeogebraCommonAwtGBasicStroke>) nil_chk(decoStroke_)) getDashArray] withFloat:0.0f]);
    GeogebraCommonEuclidianDrawable_set_selStroke_(self, [GeogebraCommonFactoriesAwtFactory_get_prototype_() newBasicStrokeWithFloat:width + GeogebraCommonPluginEuclidianStyleConstants_SELECTION_ADD withInt:[objStroke_ getEndCap] withInt:[objStroke_ getLineJoin] withFloat:[objStroke_ getMiterLimit] withFloatArray:[((id<GeogebraCommonAwtGBasicStroke>) nil_chk(selStroke_)) getDashArray] withFloat:0.0f]);
  }
}

- (void)fillWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2
                 withGeogebraCommonAwtGShape:(id<GeogebraCommonAwtGShape>)fillShape
                                 withBoolean:(jboolean)usePureStroke {
  if ([self isForceNoFill]) return;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isHatchingEnabled]) {
    if (hatchPaint_ == nil) {
      GeogebraCommonEuclidianDrawable_setAndConsume_hatchPaint_(self, new_JavaUtilArrayList_init());
    }
    id<GeogebraCommonAwtGPaint> gpaint = [((GeogebraCommonEuclidianHatchingHandler *) nil_chk(GeogebraCommonEuclidianDrawable_getHatchingHandler(self))) setHatchingWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonAwtGBasicStroke:decoStroke_ withGeogebraCommonAwtGColor:[geo_ getObjectColor] withGeogebraCommonAwtGColor:[geo_ getBackgroundColor] withFloat:[geo_ getAlphaValue] withDouble:[geo_ getHatchingDistance] withDouble:[geo_ getHatchingAngle] withGeogebraCommonKernelGeosGeoElement_FillTypeEnum:[geo_ getFillType] withNSString:[geo_ getFillSymbol] withGeogebraCommonMainApp:[((GeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication]];
    if (![((JavaUtilArrayList *) nil_chk(hatchPaint_)) containsWithId:gpaint]) {
      [hatchPaint_ addWithId:gpaint];
    }
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[hatchPaint_ getWithInt:[hatchPaint_ size] - 1]];
    if (![((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication])) isHTML5Applet]) {
      if (usePureStroke) [g2 fillWithValueStrokePureWithGeogebraCommonAwtGShape:fillShape];
      else [g2 fillWithGeogebraCommonAwtGShape:fillShape];
    }
    else {
      GeogebraCommonEuclidianEuclidianStatic_fillAfterImageLoadedWithGeogebraCommonAwtGShape_withGeogebraCommonAwtGGraphics2D_withGeogebraCommonAwtGBufferedImage_withGeogebraCommonMainApp_(fillShape, g2, [((GeogebraCommonEuclidianHatchingHandler *) nil_chk(GeogebraCommonEuclidianDrawable_getHatchingHandler(self))) getSubImage], [((GeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getApplication]);
    }
  }
  else if ([geo_ getFillType] == GeogebraCommonKernelGeosGeoElement_FillTypeEnum_get_IMAGE()) {
    [((GeogebraCommonEuclidianHatchingHandler *) nil_chk(GeogebraCommonEuclidianDrawable_getHatchingHandler(self))) setTextureWithGeogebraCommonAwtGGraphics2D:g2 withGeogebraCommonKernelGeosGeoElement:geo_ withFloat:[geo_ getAlphaValue]];
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) fillWithGeogebraCommonAwtGShape:fillShape];
  }
  else if ([geo_ getAlphaValue] > 0.0f) {
    [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) setPaintWithGeogebraCommonAwtGPaint:[geo_ getFillColor]];
    [g2 fillWithGeogebraCommonAwtGShape:fillShape];
  }
}

- (GeogebraCommonEuclidianHatchingHandler *)getHatchingHandler {
  return GeogebraCommonEuclidianDrawable_getHatchingHandler(self);
}

- (void)setForceNoFillWithBoolean:(jboolean)forceNoFill {
  self->forceNoFill_ = forceNoFill;
}

- (jboolean)isForceNoFill {
  return forceNoFill_;
}

- (void)setShapeWithGeogebraCommonAwtGArea:(id<GeogebraCommonAwtGArea>)shape {
  GeogebraCommonEuclidianDrawable_set_shape_(self, shape);
}

- (id<GeogebraCommonAwtGArea>)getShape {
  return shape_;
}

- (jboolean)isTracing {
  return isTracing__;
}

- (void)drawTraceWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
}

- (jboolean)isFilled {
  return ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getAlphaValue] > 0.0f || [geo_ isHatchingEnabled]);
}

- (GeogebraCommonEuclidianEuclidianView *)getView {
  return view_;
}

- (void)resetHatch {
  GeogebraCommonEuclidianDrawable_set_hatchPaint_(self, nil);
}

- (jboolean)isEuclidianVisible {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isEuclidianVisible];
}

- (GeogebraCommonAwtGColor *)getObjectColor {
  GeogebraCommonAwtGColor *color = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getObjectColor];
  if ([geo_ hasLineOpacity]) {
    color = [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:[((GeogebraCommonAwtGColor *) nil_chk(color)) getRed] withInt:[color getGreen] withInt:[color getBlue] withInt:[geo_ getLineOpacity]];
  }
  return color;
}

- (instancetype)init {
  GeogebraCommonEuclidianDrawable_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(objStroke_);
  RELEASE_(selStroke_);
  RELEASE_(decoStroke_);
  RELEASE_(view_);
  RELEASE_(geo_);
  RELEASE_(labelDesc_);
  RELEASE_(oldLabelDesc_);
  RELEASE_(labelRectangle_);
  RELEASE_(strokedShape_);
  RELEASE_(strokedShape2_);
  RELEASE_(shape_);
  RELEASE_(hatchPaint_);
  RELEASE_(hatchingHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "update", NULL, "V", 0x401, NULL, NULL },
    { "drawWithGeogebraCommonAwtGGraphics2D:", "draw", "V", 0x401, NULL, NULL },
    { "hitWithInt:withInt:withInt:", "hit", "Z", 0x401, NULL, NULL },
    { "isInsideWithGeogebraCommonAwtGRectangle:", "isInside", "Z", 0x401, NULL, NULL },
    { "intersectsRectangleWithGeogebraCommonAwtGRectangle:", "intersectsRectangle", "Z", 0x1, NULL, NULL },
    { "getGeoElement", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x401, NULL, NULL },
    { "setGeoElementWithGeogebraCommonKernelGeosGeoElement:", "setGeoElement", "V", 0x401, NULL, NULL },
    { "getxLabel", NULL, "D", 0x1, NULL, NULL },
    { "getyLabel", NULL, "D", 0x1, NULL, NULL },
    { "updateFontSize", NULL, "V", 0x1, NULL, NULL },
    { "getBounds", NULL, "Lgeogebra.common.awt.GRectangle;", 0x1, NULL, NULL },
    { "drawLabelWithGeogebraCommonAwtGGraphics2D:", "drawLabel", "V", 0x11, NULL, NULL },
    { "ensureLabelDrawsOnScreenWithDouble:withDouble:", "ensureLabelDrawsOnScreen", "V", 0x2, NULL, NULL },
    { "drawMultilineLaTeXWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGFont:withGeogebraCommonAwtGColor:withGeogebraCommonAwtGColor:", "drawMultilineLaTeX", "V", 0x11, NULL, NULL },
    { "isSerif", NULL, "Z", 0x10, NULL, NULL },
    { "drawMultilineTextWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGFont:", "drawMultilineText", "V", 0x14, NULL, NULL },
    { "addLabelOffset", NULL, "Z", 0x14, NULL, NULL },
    { "addLabelOffsetEnsureOnScreen", NULL, "V", 0x11, NULL, NULL },
    { "addLabelOffsetEnsureOnScreenWithDouble:withDouble:", "addLabelOffsetEnsureOnScreen", "V", 0x11, NULL, NULL },
    { "hitLabelWithInt:withInt:", "hitLabel", "Z", 0x1, NULL, NULL },
    { "forceLineTypeWithInt:", "forceLineType", "V", 0x11, NULL, NULL },
    { "updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:", "updateStrokes", "V", 0x11, NULL, NULL },
    { "updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND:withInt:", "updateStrokes", "V", 0x11, NULL, NULL },
    { "updateStrokesJustLineThicknessWithGeogebraCommonKernelGeosGeoElement:", "updateStrokesJustLineThickness", "V", 0x11, NULL, NULL },
    { "fillWithGeogebraCommonAwtGGraphics2D:withGeogebraCommonAwtGShape:withBoolean:", "fill", "V", 0x4, NULL, NULL },
    { "getHatchingHandler", NULL, "Lgeogebra.common.euclidian.HatchingHandler;", 0x2, NULL, NULL },
    { "setForceNoFillWithBoolean:", "setForceNoFill", "V", 0x1, NULL, NULL },
    { "isForceNoFill", NULL, "Z", 0x1, NULL, NULL },
    { "setShapeWithGeogebraCommonAwtGArea:", "setShape", "V", 0x1, NULL, NULL },
    { "getShape", NULL, "Lgeogebra.common.awt.GArea;", 0x1, NULL, NULL },
    { "isTracing", NULL, "Z", 0x1, NULL, NULL },
    { "drawTraceWithGeogebraCommonAwtGGraphics2D:", "drawTrace", "V", 0x4, NULL, NULL },
    { "isFilled", NULL, "Z", 0x1, NULL, NULL },
    { "getView", NULL, "Lgeogebra.common.euclidian.EuclidianView;", 0x1, NULL, NULL },
    { "resetHatch", NULL, "V", 0x1, NULL, NULL },
    { "isEuclidianVisible", NULL, "Z", 0x1, NULL, NULL },
    { "getObjectColor", NULL, "Lgeogebra.common.awt.GColor;", 0x4, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "forceNoFill_", NULL, 0x2, "Z", NULL, NULL,  },
    { "objStroke_", NULL, 0x4, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "selStroke_", NULL, 0x4, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "decoStroke_", NULL, 0x4, "Lgeogebra.common.awt.GBasicStroke;", NULL, NULL,  },
    { "lineThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "lineType_", NULL, 0x2, "I", NULL, NULL,  },
    { "view_", NULL, 0x4, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
    { "geo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "xLabel_", NULL, 0x1, "I", NULL, NULL,  },
    { "yLabel_", NULL, 0x1, "I", NULL, NULL,  },
    { "mouseX_", NULL, 0x0, "I", NULL, NULL,  },
    { "mouseY_", NULL, 0x0, "I", NULL, NULL,  },
    { "labelDesc_", NULL, 0x1, "Ljava.lang.String;", NULL, NULL,  },
    { "oldLabelDesc_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "labelHasIndex_", NULL, 0x2, "Z", NULL, NULL,  },
    { "labelRectangle_", NULL, 0x4, "Lgeogebra.common.awt.GRectangle;", NULL, NULL,  },
    { "strokedShape_", NULL, 0x4, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "strokedShape2_", NULL, 0x4, "Lgeogebra.common.awt.GShape;", NULL, NULL,  },
    { "shape_", NULL, 0x2, "Lgeogebra.common.awt.GArea;", NULL, NULL,  },
    { "lastFontSize_", NULL, 0x2, "I", NULL, NULL,  },
    { "isTracing__", "isTracing", 0x4, "Z", NULL, NULL,  },
    { "hatchPaint_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/awt/GPaint;>;",  },
    { "forcedLineType_", NULL, 0x2, "Z", NULL, NULL,  },
    { "hatchingHandler_", NULL, 0x2, "Lgeogebra.common.euclidian.HatchingHandler;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonEuclidianDrawable = { 2, "Drawable", "geogebra.common.euclidian", NULL, 0x401, 38, methods, 24, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonEuclidianDrawable;
}

@end

void GeogebraCommonEuclidianDrawable_drawLabelWithGeogebraCommonAwtGGraphics2D_(GeogebraCommonEuclidianDrawable *self, id<GeogebraCommonAwtGGraphics2D> g2) {
  if (self->labelDesc_ == nil) return;
  NSString *label = self->labelDesc_;
  jint ind = [((NSString *) nil_chk(label)) indexOfString:@"%style="];
  if (ind > -1) {
    label = [label substring:0 endIndex:ind];
  }
  GeogebraCommonAwtGFont *oldFont = nil;
  if (([((NSString *) nil_chk(label)) charAtWithInt:0] == '$') && [label hasSuffix:@"$"] && ((jint) [label length]) > 1) {
    jboolean serif = YES;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoText]) serif = [((GeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoText class])) isSerifFont];
    jint offsetY = 10 + [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getFontSize];
    GeogebraCommonMainApp *app = [self->view_ getApplication];
    GeogebraCommonAwtGDimension *dim = [((GeogebraCommonEuclidianDrawEquation *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app)) getDrawEquation])) drawEquationWithGeogebraCommonMainApp:[((GeogebraCommonKernelKernel *) nil_chk([self->geo_ getKernel])) getApplication] withGeogebraCommonKernelGeosGeoElement:self->geo_ withGeogebraCommonAwtGGraphics2D:g2 withInt:self->xLabel_ withInt:self->yLabel_ - offsetY withNSString:[label substring:1 endIndex:((jint) [label length]) - 1] withGeogebraCommonAwtGFont:[((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont] withBoolean:serif withGeogebraCommonAwtGColor:[g2 getColor] withGeogebraCommonAwtGColor:[g2 getBackground] withBoolean:YES withBoolean:NO];
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ - offsetY withInt:[((GeogebraCommonAwtGDimension *) nil_chk(dim)) getWidth] withInt:[dim getHeight]];
    return;
  }
  if (self->oldLabelDesc_ != self->labelDesc_ || ([((NSString *) nil_chk(self->labelDesc_)) charAtWithInt:0] == '<')) {
    jboolean italic = NO;
    if ([label hasPrefix:@"<i>"] && [label hasSuffix:@"</i>"]) {
      oldFont = [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getFontCommonWithBoolean:YES withInt:[((GeogebraCommonAwtGFont *) nil_chk(oldFont)) getStyle] | GeogebraCommonAwtGFont_ITALIC withInt:[oldFont getSize]]];
      label = [label substring:3 endIndex:((jint) [label length]) - 4];
      italic = YES;
    }
    if ([((NSString *) nil_chk(label)) hasPrefix:@"<b>"] && [label hasSuffix:@"</b>"]) {
      oldFont = [((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont];
      [g2 setFontWithGeogebraCommonAwtGFont:[((GeogebraCommonAwtGFont *) nil_chk([g2 getFont])) deriveFontWithInt:GeogebraCommonAwtGFont_BOLD + (italic ? GeogebraCommonAwtGFont_ITALIC : 0)]];
      label = [label substring:3 endIndex:((jint) [label length]) - 4];
    }
  }
  jint fontSize = [((GeogebraCommonAwtGFont *) nil_chk([((id<GeogebraCommonAwtGGraphics2D>) nil_chk(g2)) getFont])) getSize];
  if (self->oldLabelDesc_ == self->labelDesc_ && !self->labelHasIndex_ && self->lastFontSize_ == fontSize) {
    [g2 drawStringWithNSString:label withInt:self->xLabel_ withInt:self->yLabel_];
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setLocationWithInt:self->xLabel_ withInt:self->yLabel_ - fontSize];
  }
  else {
    GeogebraCommonEuclidianDrawable_set_oldLabelDesc_(self, self->labelDesc_);
    GeogebraCommonAwtGPoint *p = GeogebraCommonEuclidianEuclidianStatic_drawIndexedStringWithGeogebraCommonMainApp_withGeogebraCommonAwtGGraphics2D_withNSString_withFloat_withFloat_withBoolean_withBoolean_([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication], g2, label, self->xLabel_, self->yLabel_, GeogebraCommonEuclidianDrawable_isSerif(self), NO);
    self->labelHasIndex_ = (((GeogebraCommonAwtGPoint *) nil_chk(p))->y_ > 0);
    [((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) setBoundsWithInt:self->xLabel_ withInt:self->yLabel_ - fontSize withInt:p->x_ withInt:fontSize + p->y_];
    self->lastFontSize_ = fontSize;
  }
  if (oldFont != nil) [g2 setFontWithGeogebraCommonAwtGFont:oldFont];
}

void GeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(GeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier) {
  jint widthEstimate = J2ObjCFpToInt([((id<GeogebraCommonAwtGRectangle>) nil_chk(self->labelRectangle_)) getWidth]);
  jint heightEstimate = J2ObjCFpToInt([self->labelRectangle_ getHeight]);
  GeogebraCommonAwtGFont *font = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->view_)) getApplication])) getPlainFontCommon];
  if (self->oldLabelDesc_ != self->labelDesc_ || self->lastFontSize_ != [((GeogebraCommonAwtGFont *) nil_chk(font)) getSize]) {
    if ([((NSString *) nil_chk(self->labelDesc_)) hasPrefix:@"$"]) {
      GeogebraCommonEuclidianDrawable_drawLabelWithGeogebraCommonAwtGGraphics2D_(self, [self->view_ getTempGraphics2DWithGeogebraCommonAwtGFont:font]);
      widthEstimate = J2ObjCFpToInt([self->labelRectangle_ getWidth]);
      heightEstimate = J2ObjCFpToInt([self->labelRectangle_ getHeight]);
    }
    else {
      heightEstimate = J2ObjCFpToInt((GeogebraCommonUtilStringUtil_estimateHeightWithNSString_withGeogebraCommonAwtGFont_(self->labelDesc_, font) * Ymultiplier));
      widthEstimate = J2ObjCFpToInt((GeogebraCommonUtilStringUtil_estimateLengthHTMLWithNSString_withGeogebraCommonAwtGFont_(self->labelDesc_, font) * Xmultiplier));
    }
  }
  if (self->xLabel_ < 3) self->xLabel_ = 3;
  else self->xLabel_ = JavaLangMath_minWithInt_withInt_(self->xLabel_, [self->view_ getWidth] - widthEstimate - 3);
  if (self->yLabel_ < heightEstimate) self->yLabel_ = heightEstimate;
  else self->yLabel_ = JavaLangMath_minWithInt_withInt_(self->yLabel_, [self->view_ getHeight] - 3);
  [self->labelRectangle_ setLocationWithInt:self->xLabel_ withInt:self->yLabel_ - [self->view_ getFontSize]];
}

jboolean GeogebraCommonEuclidianDrawable_isSerif(GeogebraCommonEuclidianDrawable *self) {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) isGeoText] ? [((GeogebraCommonKernelGeosGeoText *) check_class_cast(self->geo_, [GeogebraCommonKernelGeosGeoText class])) isSerifFont] : NO;
}

void GeogebraCommonEuclidianDrawable_addLabelOffsetEnsureOnScreenWithDouble_withDouble_(GeogebraCommonEuclidianDrawable *self, jdouble Xmultiplier, jdouble Ymultiplier) {
  self->xLabel_ += ((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_))->labelOffsetX_;
  self->yLabel_ += self->geo_->labelOffsetY_;
  GeogebraCommonEuclidianDrawable_ensureLabelDrawsOnScreenWithDouble_withDouble_(self, Xmultiplier, Ymultiplier);
}

void GeogebraCommonEuclidianDrawable_updateStrokesWithGeogebraCommonKernelKernelNDGeoElementND_withInt_(GeogebraCommonEuclidianDrawable *self, id<GeogebraCommonKernelKernelNDGeoElementND> fromGeo, jint minThickness) {
  GeogebraCommonEuclidianDrawable_set_strokedShape_(self, nil);
  GeogebraCommonEuclidianDrawable_set_strokedShape2_(self, nil);
  if (self->lineThickness_ != [((id<GeogebraCommonKernelKernelNDGeoElementND>) nil_chk(fromGeo)) getLineThickness]) {
    self->lineThickness_ = JavaLangMath_maxWithInt_withInt_(minThickness, [fromGeo getLineThickness]);
    if (!self->forcedLineType_) self->lineType_ = [fromGeo getLineType];
    jfloat width = self->lineThickness_ / 2.0f;
    GeogebraCommonEuclidianDrawable_set_objStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, self->lineType_));
    GeogebraCommonEuclidianDrawable_set_decoStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL));
    GeogebraCommonEuclidianDrawable_set_selStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width + GeogebraCommonPluginEuclidianStyleConstants_SELECTION_ADD, GeogebraCommonPluginEuclidianStyleConstants_LINE_TYPE_FULL));
  }
  else if (self->lineType_ != [fromGeo getLineType]) {
    if (!self->forcedLineType_) self->lineType_ = [fromGeo getLineType];
    jfloat width = self->lineThickness_ / 2.0f;
    GeogebraCommonEuclidianDrawable_set_objStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getStrokeWithFloat_withInt_(width, self->lineType_));
  }
}

GeogebraCommonEuclidianHatchingHandler *GeogebraCommonEuclidianDrawable_getHatchingHandler(GeogebraCommonEuclidianDrawable *self) {
  if (self->hatchingHandler_ == nil) {
    GeogebraCommonEuclidianDrawable_setAndConsume_hatchingHandler_(self, new_GeogebraCommonEuclidianHatchingHandler_init());
  }
  return self->hatchingHandler_;
}

void GeogebraCommonEuclidianDrawable_init(GeogebraCommonEuclidianDrawable *self) {
  GeogebraCommonEuclidianDrawableND_init(self);
  GeogebraCommonEuclidianDrawable_set_objStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getDefaultStroke());
  GeogebraCommonEuclidianDrawable_set_selStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getDefaultSelectionStroke());
  GeogebraCommonEuclidianDrawable_set_decoStroke_(self, GeogebraCommonEuclidianEuclidianStatic_getDefaultStroke());
  self->lineThickness_ = -1;
  self->lineType_ = -1;
  self->labelHasIndex_ = NO;
  GeogebraCommonEuclidianDrawable_set_labelRectangle_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newRectangleWithInt:0 withInt:0]);
  self->lastFontSize_ = -1;
  self->isTracing__ = NO;
  GeogebraCommonEuclidianDrawable_set_hatchPaint_(self, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonEuclidianDrawable)
