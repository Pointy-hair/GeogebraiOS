//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoCoordSys1D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D () {
 @public
  jint type_;
  jint ticksize_;
}

@end

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

- (jint)getType {
  return type_;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                                 withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_withInt_(self, c, type);
  return self;
}

- (jboolean)isAvailableAtConstructionStepWithInt:(jint)step {
  return YES;
}

- (jboolean)isDefined {
  return YES;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_AXIS3D();
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return label_;
}

- (jboolean)isLabelSet {
  return YES;
}

- (NSString *)getUnitLabel {
  return @"";
}

- (jint)getTickStyle {
  return 0;
}

- (jboolean)getShowNumbers {
  return YES;
}

- (jint)getTickSize {
  return ticksize_;
}

- (GeogebraCommonKernelMatrixCoords *)getDirectionInD3 {
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 1, 0) autorelease];
}

- (jboolean)isAxis {
  return YES;
}

- (NSString *)getLabelWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([((GeogebraCommonKernelStringTemplate *) nil_chk(tpl)) isPrintLocalizedCommandNames]) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:label_];
  }
  return label_;
}

- (jboolean)isTraceable {
  return NO;
}

- (void)getCoordsXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
}

- (jboolean)isRenameable {
  return NO;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoAxis3D", NULL, 0x1, NULL, NULL },
    { "getType", NULL, "I", 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:", "GeoAxis3D", NULL, 0x1, NULL, NULL },
    { "isAvailableAtConstructionStepWithInt:", "isAvailableAtConstructionStep", "Z", 0x1, NULL, NULL },
    { "isDefined", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isLabelSet", NULL, "Z", 0x1, NULL, NULL },
    { "getUnitLabel", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTickStyle", NULL, "I", 0x1, NULL, NULL },
    { "getShowNumbers", NULL, "Z", 0x1, NULL, NULL },
    { "getTickSize", NULL, "I", 0x1, NULL, NULL },
    { "getDirectionInD3", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "isAxis", NULL, "Z", 0x1, NULL, NULL },
    { "getLabelWithGeogebraCommonKernelStringTemplate:", "getLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isTraceable", NULL, "Z", 0x1, NULL, NULL },
    { "getCoordsXMLWithJavaLangStringBuilder:", "getCoordsXML", "V", 0x14, NULL, NULL },
    { "isRenameable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "type_", NULL, 0x2, "I", NULL, NULL,  },
    { "ticksize_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D = { 2, "GeoAxis3D", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 18, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *self, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->ticksize_ = 5;
}

GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(self, cons);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *self, GeogebraCommonKernelConstruction *c, jint type) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_(self, c);
  self->type_ = type;
  switch (type) {
    case GeogebraCommonKernelKernelNDGeoAxisND_X_AXIS_3D:
    [self setCoordWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_O_() withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VX_()];
    GeogebraCommonKernelGeosGeoElement_set_label_(self, @"xAxis3D");
    [self setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_RED_()];
    break;
    case GeogebraCommonKernelKernelNDGeoAxisND_Y_AXIS_3D:
    [self setCoordWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_O_() withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VY_()];
    GeogebraCommonKernelGeosGeoElement_set_label_(self, @"yAxis3D");
    [self setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_darkGreen_()];
    break;
    case GeogebraCommonKernelKernelNDGeoAxisND_Z_AXIS_3D:
    [self setCoordWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_O_() withGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_()];
    GeogebraCommonKernelGeosGeoElement_set_label_(self, @"zAxis");
    [self setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_BLUE_()];
    break;
  }
  self->labelSet_ = YES;
  [self setFixedWithBoolean:YES];
  [self setLabelVisibleWithBoolean:NO];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *new_GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_withInt_(GeogebraCommonKernelConstruction *c, jint type) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D_initWithGeogebraCommonKernelConstruction_withInt_(self, c, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoAxis3D)
