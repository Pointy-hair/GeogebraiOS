//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConic3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/geogebra3D/kernel3D/transform/MirrorableAtPlane.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited () {
 @public
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *side_;
  GeogebraCommonKernelKernelNDGeoConicND *bottom_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *top_;
  jdouble bottomParameter_, topParameter_;
  GeogebraCommonKernelMatrixCoords *direction_;
  GeogebraCommonKernelMatrixCoords *origin_;
  jdouble radius_;
  jdouble volume_;
  jboolean silentTop_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited, side_, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited, bottom_, GeogebraCommonKernelKernelNDGeoConicND *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited, top_, GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited, direction_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited, origin_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (void)setBottomTopWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)bottom2
            withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)top {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_bottom_(self, bottom2);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_top_(self, top);
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) addMetaWithGeogebraCommonKernelGeosGeoElement:self];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top)) addMetaWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)setSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)side {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_side_(self, side);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side)) setFromMetaWithGeogebraCommonKernelGeosGeoElement:self];
}

- (void)remove {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) removeMetaWithGeogebraCommonKernelGeosGeoElement:self];
  [super remove];
}

- (instancetype)initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *)quadric {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self, quadric);
  return self;
}

- (GeogebraCommonKernelKernelNDGeoConicND *)getBottom {
  return bottom_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *)getTop {
  return top_;
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *)getSide {
  return side_;
}

- (void)updatePartsVisualStyle {
  [self setObjColorWithGeogebraCommonAwtGColor:[self getObjectColor]];
  [self setLineThicknessWithInt:[self getLineThickness]];
  [self setAlphaValueWithFloat:[self getAlphaValue]];
  [self setEuclidianVisibleWithBoolean:[self isEuclidianVisible]];
}

- (void)initLabelsIncludingBottomWithNSStringArray:(IOSObjectArray *)labels {
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  if (labels == nil || labels->size_ == 0) {
    labels = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
  }
  [self setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  if (labels->size_ < 3) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLabelWithNSString:nil];
    if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLabelWithNSString:nil];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setLabelWithNSString:nil];
    return;
  }
  else if (labels->size_ == 3) {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLabelWithNSString:IOSObjectArray_Get(labels, 1)];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setLabelWithNSString:IOSObjectArray_Get(labels, 2)];
  }
  else {
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLabelWithNSString:IOSObjectArray_Get(labels, 1)];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLabelWithNSString:IOSObjectArray_Get(labels, 2)];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setLabelWithNSString:IOSObjectArray_Get(labels, 3)];
  }
}

- (void)initLabelsNoBottomWithNSStringArray:(IOSObjectArray *)labels {
  if ([((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive]) {
    return;
  }
  if (labels == nil || labels->size_ == 0) {
    labels = [IOSObjectArray arrayWithLength:1 type:NSString_class_()];
  }
  [self setLabelWithNSString:IOSObjectArray_Get(nil_chk(labels), 0)];
  if (labels->size_ < 3) {
    if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLabelWithNSString:nil];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setLabelWithNSString:nil];
    return;
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLabelWithNSString:IOSObjectArray_Get(labels, 1)];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setLabelWithNSString:IOSObjectArray_Get(labels, 2)];
}

- (jdouble)getBottomParameter {
  return bottomParameter_;
}

- (jdouble)getTopParameter {
  return topParameter_;
}

- (GeogebraCommonKernelMatrixCoords *)getDirection {
  return direction_;
}

- (GeogebraCommonKernelMatrixCoords *)getOrigin {
  return origin_;
}

- (void)setCylinderWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
                   withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                             withDouble:(jdouble)r
                                             withDouble:(jdouble)bottomParameter
                                             withDouble:(jdouble)topParameter {
  [self setLimitsWithDouble:bottomParameter withDouble:topParameter];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, origin);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, direction);
  self->radius_ = r;
  [self setTypeWithInt:GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER];
}

- (void)setLimitsWithDouble:(jdouble)bottomParameter
                 withDouble:(jdouble)topParameter {
  self->bottomParameter_ = bottomParameter;
  self->topParameter_ = topParameter;
}

- (jdouble)getRadius {
  return radius_;
}

- (void)setConeWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
               withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                         withDouble:(jdouble)r
                                         withDouble:(jdouble)bottomParameter
                                         withDouble:(jdouble)topParameter {
  [self setLimitsWithDouble:bottomParameter withDouble:topParameter];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, origin);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, direction);
  self->radius_ = r;
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE;
}

- (void)setWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)origin
           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)direction
                                     withDouble:(jdouble)r
                                     withDouble:(jdouble)min
                                     withDouble:(jdouble)max {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    [self setCylinderWithGeogebraCommonKernelMatrixCoords:origin withGeogebraCommonKernelMatrixCoords:direction withDouble:r withDouble:min withDouble:max];
    break;
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    [self setConeWithGeogebraCommonKernelMatrixCoords:origin withGeogebraCommonKernelMatrixCoords:direction withDouble:r withDouble:min withDouble:max];
    break;
  }
}

- (void)setObjColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)color {
  [super setObjColorWithGeogebraCommonAwtGColor:color];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setObjColorWithGeogebraCommonAwtGColor:color];
  if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setObjColorWithGeogebraCommonAwtGColor:color];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setObjColorWithGeogebraCommonAwtGColor:color];
}

- (void)setTraceWithBoolean:(jboolean)trace {
  [super setTraceWithBoolean:trace];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setTraceWithBoolean:trace];
  if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setTraceWithBoolean:trace];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setTraceWithBoolean:trace];
}

- (jboolean)isFillable {
  return YES;
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  [super setEuclidianVisibleWithBoolean:visible];
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setEuclidianVisibleWithBoolean:visible];
  if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setEuclidianVisibleWithBoolean:visible];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setEuclidianVisibleWithBoolean:visible];
}

- (void)setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)cond {
  [super setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:cond];
}

- (void)updateVisualStyle {
  [super updateVisualStyle];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) updateVisualStyle];
  if (!silentTop_) [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) updateVisualStyle];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) updateVisualStyle];
}

- (void)setLineTypeWithInt:(jint)type {
  [super setLineTypeWithInt:type];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLineTypeWithInt:type];
  [bottom_ update];
  if (!silentTop_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLineTypeWithInt:type];
    [top_ update];
  }
}

- (void)setLineTypeHiddenWithInt:(jint)type {
  [super setLineTypeHiddenWithInt:type];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLineTypeHiddenWithInt:type];
  [bottom_ update];
  if (!silentTop_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLineTypeHiddenWithInt:type];
    [top_ update];
  }
}

- (void)setLineThicknessWithInt:(jint)th {
  [super setLineThicknessWithInt:th];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setLineThicknessWithInt:th];
  [bottom_ update];
  if (!silentTop_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setLineThicknessWithInt:th];
    [top_ update];
  }
}

- (void)setAlphaValueWithFloat:(jfloat)alpha {
  [super setAlphaValueWithFloat:alpha];
  if (bottom_ == nil) return;
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setAlphaValueWithFloat:alpha];
  [bottom_ updateVisualStyle];
  if (!silentTop_) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setAlphaValueWithFloat:alpha];
    [top_ updateVisualStyle];
  }
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setAlphaValueWithFloat:alpha];
  [side_ updateVisualStyle];
  [((GeogebraCommonKernelKernel *) nil_chk([self getKernel])) notifyRepaint];
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self) autorelease];
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_QUADRIC_LIMITED();
}

- (NSString *)getTypeString {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getQuadricTypeString];
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)Geo {
  return NO;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([geo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]]) {
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric = (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class]);
    bottomParameter_ = ((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(quadric))->bottomParameter_;
    topParameter_ = quadric->topParameter_;
    volume_ = quadric->volume_;
    [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) setWithGeogebraCommonKernelGeosGeoElement:quadric->bottom_];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) setWithGeogebraCommonKernelGeosGeoElement:quadric->top_];
    silentTop_ = quadric->silentTop_;
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) setWithGeogebraCommonKernelGeosGeoElement:quadric->side_];
    toStringMode_ = quadric->toStringMode_;
    type_ = quadric->type_;
    radius_ = [quadric getRadius];
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
    GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
    defined_ = quadric->defined_;
    [super setWithGeogebraCommonKernelGeosGeoElement:geo];
  }
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)showInEuclidianView {
  return YES;
}

- (void)calcVolume {
  if (bottom_ == nil) {
    volume_ = JavaLangDouble_NaN;
    return;
  }
  {
    jdouble h;
    jdouble r;
    switch (type_) {
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
      volume_ = radius_ * radius_ * JavaLangMath_PI * JavaLangMath_absWithDouble_(topParameter_ - bottomParameter_);
      break;
      case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
      h = JavaLangMath_absWithDouble_(topParameter_ - bottomParameter_);
      r = radius_ * h;
      volume_ = r * r * JavaLangMath_PI * h / 3;
      break;
    }
  }
}

- (jdouble)getVolume {
  if (defined_) return volume_;
  return JavaLangDouble_NaN;
}

- (jboolean)hasFiniteVolume {
  return YES;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  switch (type_) {
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CYLINDER:
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_CONE:
    return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:volume_ withGeogebraCommonKernelStringTemplate:tpl];
    case GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_EMPTY:
    return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:0 withGeogebraCommonKernelStringTemplate:tpl];
  }
  return @"todo-GeoQuadric3DLimited";
}

- (JavaLangStringBuilder *)buildValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [new_JavaLangStringBuilder_initWithNSString_([self toValueStringWithGeogebraCommonKernelStringTemplate:tpl]) autorelease];
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                 withGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
}

- (void)setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)M
                   withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P {
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [self getDouble]) autorelease];
}

- (jdouble)getDouble {
  return [self getVolume];
}

- (jboolean)isNumberValue {
  return YES;
}

- (void)setSilentTop {
  silentTop_ = YES;
}

- (jdouble)getOrientedHeight {
  return topParameter_ - bottomParameter_;
}

- (jboolean)isGeoElement3D {
  return YES;
}

- (void)setColorVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  [self setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getObjectColor]];
  [self setAlphaValueWithFloat:[geo getAlphaValue]];
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)S
             withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(bottom_, [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoPointND:S withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)rotateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)r
                  withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) check_class_cast(bottom_, [GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D class])))) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoLineND:line];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoLineND:line];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) rotateWithGeogebraCommonKernelArithmeticNumberValue:r withGeogebraCommonKernelKernelNDGeoLineND:line];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (jboolean)isTranslateable {
  return YES;
}

- (void)translateWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) translateWithGeogebraCommonKernelMatrixCoords:v];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) translateWithGeogebraCommonKernelMatrixCoords:v];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) translateWithGeogebraCommonKernelMatrixCoords:v];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
}

- (void)mirrorWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Q {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) mirrorWithGeogebraCommonKernelMatrixCoords:Q];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) mirrorWithGeogebraCommonKernelKernelNDGeoLineND:g];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:(id<GeogebraCommonKernelKernelNDGeoCoordSys2D>)plane {
  [((id<GeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane>) nil_chk(((id<GeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane>) check_protocol_cast(bottom_, @protocol(GeogebraCommonGeogebra3DKernel3DTransformMirrorableAtPlane))))) mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:plane];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)dilateWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)rval
                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)S {
  [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(bottom_)) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D *) nil_chk(top_)) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) dilateWithGeogebraCommonKernelArithmeticNumberValue:rval withGeogebraCommonKernelMatrixCoords:S];
  jdouble r = JavaLangMath_absWithDouble_([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(rval)) getDouble]);
  volume_ *= r * r * r;
  bottomParameter_ *= r;
  topParameter_ *= r;
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_origin_(self, [side_ getMidpoint3D]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_set_direction_(self, [side_ getEigenvec3DWithInt:2]);
}

- (void)singlePoint {
  type_ = GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SINGLE_POINT;
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint2D {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getMidpoint2D];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getMidpoint];
}

- (GeogebraCommonKernelMatrixCoords *)getMidpoint3D {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getMidpoint3D];
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getSymetricMatrix {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getSymetricMatrix];
}

- (jdouble)getHalfAxisWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getHalfAxisWithInt:i];
}

- (jint)getDimension {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getDimension];
}

- (GeogebraCommonKernelMatrixCoords *)getEigenvec3DWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getEigenvec3DWithInt:i];
}

- (IOSDoubleArray *)getFlatMatrix {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk(side_)) getFlatMatrix];
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (void)dealloc {
  RELEASE_(side_);
  RELEASE_(bottom_);
  RELEASE_(top_);
  RELEASE_(direction_);
  RELEASE_(origin_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoQuadric3DLimited", NULL, 0x1, NULL, NULL },
    { "setBottomTopWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonGeogebra3DKernel3DGeosGeoConic3D:", "setBottomTop", "V", 0x1, NULL, NULL },
    { "setSideWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart:", "setSide", "V", 0x1, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
    { "initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited:", "GeoQuadric3DLimited", NULL, 0x1, NULL, NULL },
    { "getBottom", NULL, "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x1, NULL, NULL },
    { "getTop", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", 0x1, NULL, NULL },
    { "getSide", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", 0x1, NULL, NULL },
    { "updatePartsVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "initLabelsIncludingBottomWithNSStringArray:", "initLabelsIncludingBottom", "V", 0x1, NULL, NULL },
    { "initLabelsNoBottomWithNSStringArray:", "initLabelsNoBottom", "V", 0x1, NULL, NULL },
    { "getBottomParameter", NULL, "D", 0x1, NULL, NULL },
    { "getTopParameter", NULL, "D", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getOrigin", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setCylinderWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "setCylinder", "V", 0x1, NULL, NULL },
    { "setLimitsWithDouble:withDouble:", "setLimits", "V", 0x1, NULL, NULL },
    { "getRadius", NULL, "D", 0x1, NULL, NULL },
    { "setConeWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "setCone", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withDouble:withDouble:withDouble:", "set", "V", 0x1, NULL, NULL },
    { "setObjColorWithGeogebraCommonAwtGColor:", "setObjColor", "V", 0x1, NULL, NULL },
    { "setTraceWithBoolean:", "setTrace", "V", 0x1, NULL, NULL },
    { "isFillable", NULL, "Z", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "setShowObjectConditionWithGeogebraCommonKernelGeosGeoBoolean:", "setShowObjectCondition", "V", 0x1, "Lgeogebra.common.kernel.CircularDefinitionException;", NULL },
    { "updateVisualStyle", NULL, "V", 0x1, NULL, NULL },
    { "setLineTypeWithInt:", "setLineType", "V", 0x1, NULL, NULL },
    { "setLineTypeHiddenWithInt:", "setLineTypeHidden", "V", 0x1, NULL, NULL },
    { "setLineThicknessWithInt:", "setLineThickness", "V", 0x1, NULL, NULL },
    { "setAlphaValueWithFloat:", "setAlphaValue", "V", 0x1, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "getTypeString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x4, NULL, NULL },
    { "calcVolume", NULL, "V", 0x1, NULL, NULL },
    { "getVolume", NULL, "D", 0x1, NULL, NULL },
    { "hasFiniteVolume", NULL, "Z", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "buildValueStringWithGeogebraCommonKernelStringTemplate:", "buildValueString", "Ljava.lang.StringBuilder;", 0x4, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoSegmentND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "setSphereNDWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "setSphereND", "V", 0x1, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "setSilentTop", NULL, "V", 0x1, NULL, NULL },
    { "getOrientedHeight", NULL, "D", 0x1, NULL, NULL },
    { "isGeoElement3D", NULL, "Z", 0x1, NULL, NULL },
    { "setColorVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "setColorVisualStyle", "V", 0x4, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:", "rotate", "V", 0x1, NULL, NULL },
    { "rotateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoLineND:", "rotate", "V", 0x1, NULL, NULL },
    { "isTranslateable", NULL, "Z", 0x11, NULL, NULL },
    { "translateWithGeogebraCommonKernelMatrixCoords:", "translate", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelMatrixCoords:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoLineND:", "mirror", "V", 0x1, NULL, NULL },
    { "mirrorWithGeogebraCommonKernelKernelNDGeoCoordSys2D:", "mirror", "V", 0x1, NULL, NULL },
    { "dilateWithGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelMatrixCoords:", "dilate", "V", 0x1, NULL, NULL },
    { "singlePoint", NULL, "V", 0x14, NULL, NULL },
    { "getMidpoint2D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpoint", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMidpoint3D", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getSymetricMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "getHalfAxisWithInt:", "getHalfAxis", "D", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "getEigenvec3DWithInt:", "getEigenvec3D", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getFlatMatrix", NULL, "[D", 0x1, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "side_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoQuadric3DPart;", NULL, NULL,  },
    { "bottom_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoConicND;", NULL, NULL,  },
    { "top_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoConic3D;", NULL, NULL,  },
    { "bottomParameter_", NULL, 0x2, "D", NULL, NULL,  },
    { "topParameter_", NULL, 0x2, "D", NULL, NULL,  },
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "origin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "radius_", NULL, 0x2, "D", NULL, NULL,  },
    { "volume_", NULL, 0x2, "D", NULL, NULL,  },
    { "silentTop_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited = { 2, "GeoQuadric3DLimited", "geogebra.common.geogebra3D.kernel3D.geos", NULL, 0x1, 71, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited;
}

@end

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelKernelNDGeoQuadricND_initWithGeogebraCommonKernelConstruction_(self, c);
  self->silentTop_ = NO;
  [self setConstructionDefaults];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *self, GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonKernelConstruction_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) nil_chk(quadric)) getConstruction]);
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_setAndConsume_bottom_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_([quadric getConstruction]));
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_setAndConsume_top_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoConic3D_initWithGeogebraCommonKernelConstruction_([quadric getConstruction]));
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_setAndConsume_side_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_initWithGeogebraCommonKernelConstruction_([quadric getConstruction]));
  [self setWithGeogebraCommonKernelGeosGeoElement:quadric];
}

GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *new_GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *quadric) {
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *self = [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited alloc];
  GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_initWithGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self, quadric);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited)
