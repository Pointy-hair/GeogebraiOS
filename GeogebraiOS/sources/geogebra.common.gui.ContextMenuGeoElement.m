//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/ContextMenuGeoElement.java
//


#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStyleBarStatic.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/gui/ContextMenuGeoElement.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/UndoManager.h"
#include "geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoConic.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoSegment.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoUserInputElement.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/DialogManager.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/OptionType.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/main/SpreadsheetTraceManager.h"
#include "java/util/ArrayList.h"

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGuiContextMenuGeoElement)

IOSDoubleArray *GeogebraCommonGuiContextMenuGeoElement_zoomFactors_;
IOSDoubleArray *GeogebraCommonGuiContextMenuGeoElement_axesRatios_;

@implementation GeogebraCommonGuiContextMenuGeoElement

- (NSString *)getDescriptionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                                                       withBoolean:(jboolean)addHTMLtag {
  NSString *title = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLongDescriptionHTMLWithBoolean:NO withBoolean:addHTMLtag];
  if (((jint) [((NSString *) nil_chk(title)) length]) > 80) title = [geo getNameDescriptionHTMLWithBoolean:NO withBoolean:addHTMLtag];
  return title;
}

- (void)cartesianCoordsCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
      GeogebraCommonKernelGeosGeoPoint *point1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoPoint class]);
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point1)) setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
      [point1 updateRepaint];
    }
  }
  [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getUndoManager])) storeUndoInfoWithBoolean:YES];
}

- (void)polarCoorsCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
      GeogebraCommonKernelGeosGeoPoint *point1 = (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoPoint class]);
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(point1)) setModeWithInt:GeogebraCommonKernelKernel_COORD_POLAR];
      [point1 updateRepaint];
    }
  }
  [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getUndoManager])) storeUndoInfoWithBoolean:YES];
}

- (void)equationImplicitEquationCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] && !([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]])) {
      GeogebraCommonKernelGeosGeoLine *line1 = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoLine class]);
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line1)) setModeWithInt:GeogebraCommonKernelGeosGeoLine_EQUATION_IMPLICIT];
      [line1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)equationExplicitEquationCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] && !([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]])) {
      GeogebraCommonKernelGeosGeoLine *line1 = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoLine class]);
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line1)) setModeWithInt:GeogebraCommonKernelGeosGeoLine_EQUATION_EXPLICIT];
      [line1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)parametricFormCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoLine class]] && !([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoSegment class]])) {
      GeogebraCommonKernelGeosGeoLine *line1 = (GeogebraCommonKernelGeosGeoLine *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoLine class]);
      [((GeogebraCommonKernelGeosGeoLine *) nil_chk(line1)) setModeWithInt:GeogebraCommonKernelGeosGeoLine_PARAMETRIC];
      [line1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)cartesianCoordsForVectorItemsCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
      GeogebraCommonKernelGeosGeoVector *vector1 = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoVector class]);
      [((GeogebraCommonKernelGeosGeoVector *) nil_chk(vector1)) setModeWithInt:GeogebraCommonKernelKernel_COORD_CARTESIAN];
      [vector1 updateRepaint];
    }
  }
  [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getUndoManager])) storeUndoInfoWithBoolean:YES];
}

- (void)polarCoordsForVectorItemsCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([geo1 isKindOfClass:[GeogebraCommonKernelGeosGeoVector class]]) {
      GeogebraCommonKernelGeosGeoVector *vector1 = (GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoVector class]);
      [((GeogebraCommonKernelGeosGeoVector *) nil_chk(vector1)) setModeWithInt:GeogebraCommonKernelKernel_COORD_POLAR];
      [vector1 updateRepaint];
    }
  }
  [((GeogebraCommonKernelUndoManager *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getConstruction])) getUndoManager])) storeUndoInfoWithBoolean:YES];
}

- (void)implicitConicEquationCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getClass] == GeogebraCommonKernelGeosGeoConic_class_()) {
      GeogebraCommonKernelGeosGeoConic *conic1 = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoConic class]);
      [conic1 setToImplicit];
      [conic1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)equationConicEqnCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getClass] == GeogebraCommonKernelGeosGeoConic_class_()) {
      GeogebraCommonKernelGeosGeoConic *conic1 = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoConic class]);
      [conic1 setToSpecific];
      [conic1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)equationExplicitConicEquationCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) getClass] == GeogebraCommonKernelGeosGeoConic_class_()) {
      GeogebraCommonKernelGeosGeoConic *conic1 = (GeogebraCommonKernelGeosGeoConic *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoConic class]);
      [conic1 setToExplicit];
      [conic1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)extendedFormCmdWithGeogebraCommonKernelGeosGeoUserInputElement:(GeogebraCommonKernelGeosGeoUserInputElement *)inputElement {
  [((GeogebraCommonKernelGeosGeoUserInputElement *) nil_chk(inputElement)) setExtendedForm];
  [inputElement updateRepaint];
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)deleteCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) removeOrSetUndefinedIfHasFixedDescendent];
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (JavaUtilArrayList *)checkOneGeo {
  if (justOneGeo_) {
    JavaUtilArrayList *ret = [new_JavaUtilArrayList_init() autorelease];
    [ret addWithId:geo_];
    return ret;
  }
  return geos_;
}

- (void)editCmd {
  [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showTextDialogWithGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *) check_class_cast(geo_, [GeogebraCommonKernelGeosGeoText class])];
}

- (void)renameCmd {
  [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showRenameDialogWithGeogebraCommonKernelGeosGeoElement:geo_ withBoolean:YES withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) getLabelSimple] withBoolean:YES];
}

- (void)fixObjectNumericCmdWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoNumeric]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoNumeric class])) setSliderFixedWithBoolean:![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) isSliderFixed]];
      [geo1 updateRepaint];
    }
    else {
      [geo1 setFixedWithBoolean:![((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) isSliderFixed]];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)fixObjectCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoNumeric]) {
      [((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo1, [GeogebraCommonKernelGeosGeoNumeric class])) setSliderFixedWithBoolean:![geo1 isFixed]];
      [geo1 updateRepaint];
    }
    else {
      if ([geo1 isFixable]) {
        [geo1 setFixedWithBoolean:![geo1 isFixed]];
        [geo1 updateRepaint];
      }
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)fixCheckboxCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoBoolean *geo1 = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast([geos2 getWithInt:i], [GeogebraCommonKernelGeosGeoBoolean class]);
    [geo1 setCheckboxFixedWithBoolean:![((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(geo1)) isCheckboxFixed]];
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)showLabelCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    [geo1 setLabelVisibleWithBoolean:![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isLabelVisible]];
    [geo1 updateRepaint];
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)showObjectCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  jboolean newVisibility = ![((GeogebraCommonKernelGeosGeoElement *) nil_chk([((JavaUtilArrayList *) nil_chk(geos2)) getWithInt:0])) isSetEuclidianVisible];
  for (jint i = [geos2 size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) setEuclidianVisibleWithBoolean:newVisibility];
    [geo1 updateRepaint];
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)showObjectAuxiliaryCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isAlgebraShowable]) {
      [geo1 setAuxiliaryObjectWithBoolean:![geo1 isAuxiliaryObject]];
      [geo1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)openPropertiesDialogCmd {
  [((GeogebraCommonMainDialogManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getDialogManager])) showPropertiesDialogWithGeogebraCommonMainOptionTypeEnum:GeogebraCommonMainOptionTypeEnum_get_OBJECTS() withJavaUtilArrayList:[self checkOneGeo]];
}

- (void)inputFormCmdWithGeogebraCommonKernelGeosGeoUserInputElement:(GeogebraCommonKernelGeosGeoUserInputElement *)inputElement {
  [((GeogebraCommonKernelGeosGeoUserInputElement *) nil_chk(inputElement)) setInputForm];
  [inputElement updateRepaint];
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)traceCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isTraceable]) {
      [((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosTraceable))) setTraceWithBoolean:![((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosTraceable))) getTrace]];
      [geo1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)animationCmd {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isAnimatable]) {
      [geo1 setAnimatingWithBoolean:!([geo1 isAnimating] && [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) getAnimatonManager])) isRunning])];
      [geo1 updateRepaint];
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
  [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app_ getActiveEuclidianView])) repaint];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isAnimating]) [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([geo_ getKernel])) getAnimatonManager])) startAnimation];
}

- (void)pinCmdWithBoolean:(jboolean)isSelected {
  JavaUtilArrayList *geos2 = [self checkOneGeo];
  for (jint i = [((JavaUtilArrayList *) nil_chk(geos2)) size] - 1; i >= 0; i--) {
    GeogebraCommonKernelGeosGeoElement *geo1 = [geos2 getWithInt:i];
    if ([GeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:geo1] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo1)) isGeoList]) {
      id<GeogebraCommonKernelGeosAbsoluteScreenLocateable> geoText = (id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(geo1, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable));
      jboolean flag = ![geoText isAbsoluteScreenLocActive];
      if (flag) {
        jint x = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) toScreenCoordXWithDouble:[geoText getRealWorldLocX]];
        jint y = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app_ getActiveEuclidianView])) toScreenCoordYWithDouble:[geoText getRealWorldLocY]];
        [geoText setAbsoluteScreenLocWithInt:x withInt:y];
      }
      else {
        jdouble x = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) toRealWorldCoordXWithDouble:[geoText getAbsoluteScreenLocX]];
        jdouble y = [((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([app_ getActiveEuclidianView])) toRealWorldCoordYWithDouble:[geoText getAbsoluteScreenLocY]];
        [geoText setRealWorldLocWithDouble:x withDouble:y];
      }
      [geoText setAbsoluteScreenLocActiveWithBoolean:flag];
      [geoText updateRepaint];
    }
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) isPinnable]) {
      GeogebraCommonEuclidianEuclidianStyleBarStatic_applyFixPositionWithJavaUtilArrayList_withBoolean_withGeogebraCommonEuclidianEuclidianViewInterfaceCommon_(geos2, isSelected, [((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView]);
    }
  }
  [((GeogebraCommonMainApp *) nil_chk(app_)) storeUndoInfo];
}

- (void)geoActionCmdWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)cmdGeo
                                     withJavaUtilArrayList:(JavaUtilArrayList *)sGeos
                                     withJavaUtilArrayList:(JavaUtilArrayList *)gs
                  withGeogebraCommonEuclidianEuclidianView:(GeogebraCommonEuclidianEuclidianView *)v
                               withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)l {
  if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(v)) getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_MOVE) {
    [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) clearSelectedGeosWithBoolean:NO];
    [((GeogebraCommonMainSelectionManager *) nil_chk([app_ getSelectionManager])) addSelectedGeoWithGeogebraCommonKernelGeosGeoElement:cmdGeo];
    [((JavaUtilArrayList *) nil_chk(sGeos)) clear];
    [sGeos addWithId:cmdGeo];
    if ([app_ getGuiManager] != nil) {
      [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) showPopupChooseGeoWithJavaUtilArrayList:sGeos withJavaUtilArrayList:gs withGeogebraCommonEuclidianEuclidianViewInterfaceCommon:v withGeogebraCommonAwtGPoint:l];
    }
  }
  else {
    GeogebraCommonEuclidianHits *hits = [new_GeogebraCommonEuclidianHits_init() autorelease];
    [hits addWithId:cmdGeo];
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([v getEuclidianController])) processModeWithGeogebraCommonEuclidianHits:hits withBoolean:NO];
  }
}

- (void)recordToSpreadSheetCmd {
  GeogebraCommonMainSpreadsheetTraceManager *traceManager = [((GeogebraCommonMainApp *) nil_chk(app_)) getTraceManager];
  if (![((GeogebraCommonMainSpreadsheetTraceManager *) nil_chk(traceManager)) isTraceGeoWithGeogebraCommonKernelGeosGeoElement:geo_]) {
    [traceManager addSpreadsheetTraceGeoWithGeogebraCommonKernelGeosGeoElement:geo_];
  }
}

- (instancetype)init {
  GeogebraCommonGuiContextMenuGeoElement_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(geos_);
  RELEASE_(geo_);
  RELEASE_(app_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGuiContextMenuGeoElement class]) {
    JreStrongAssignAndConsume(&GeogebraCommonGuiContextMenuGeoElement_zoomFactors_, nil, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 4.0, 2.0, 1.5, 1.25, 1.0 / 1.25, 1.0 / 1.5, 0.5, 0.25 } count:8]);
    JreStrongAssignAndConsume(&GeogebraCommonGuiContextMenuGeoElement_axesRatios_, nil, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1.0 / 1000.0, 1.0 / 500.0, 1.0 / 200.0, 1.0 / 100.0, 1.0 / 50.0, 1.0 / 20.0, 1.0 / 10.0, 1.0 / 5.0, 1.0 / 2.0, 1, 2, 5, 10, 20, 50, 100, 200, 500, 1000 } count:19]);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGuiContextMenuGeoElement)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getDescriptionWithGeogebraCommonKernelGeosGeoElement:withBoolean:", "getDescription", "Ljava.lang.String;", 0x4, NULL, NULL },
    { "cartesianCoordsCmd", NULL, "V", 0x1, NULL, NULL },
    { "polarCoorsCmd", NULL, "V", 0x1, NULL, NULL },
    { "equationImplicitEquationCmd", NULL, "V", 0x1, NULL, NULL },
    { "equationExplicitEquationCmd", NULL, "V", 0x1, NULL, NULL },
    { "parametricFormCmd", NULL, "V", 0x1, NULL, NULL },
    { "cartesianCoordsForVectorItemsCmd", NULL, "V", 0x1, NULL, NULL },
    { "polarCoordsForVectorItemsCmd", NULL, "V", 0x1, NULL, NULL },
    { "implicitConicEquationCmd", NULL, "V", 0x1, NULL, NULL },
    { "equationConicEqnCmd", NULL, "V", 0x1, NULL, NULL },
    { "equationExplicitConicEquationCmd", NULL, "V", 0x1, NULL, NULL },
    { "extendedFormCmdWithGeogebraCommonKernelGeosGeoUserInputElement:", "extendedFormCmd", "V", 0x1, NULL, NULL },
    { "deleteCmd", NULL, "V", 0x1, NULL, NULL },
    { "checkOneGeo", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "editCmd", NULL, "V", 0x1, NULL, NULL },
    { "renameCmd", NULL, "V", 0x1, NULL, NULL },
    { "fixObjectNumericCmdWithGeogebraCommonKernelGeosGeoNumeric:", "fixObjectNumericCmd", "V", 0x1, NULL, NULL },
    { "fixObjectCmd", NULL, "V", 0x1, NULL, NULL },
    { "fixCheckboxCmd", NULL, "V", 0x1, NULL, NULL },
    { "showLabelCmd", NULL, "V", 0x1, NULL, NULL },
    { "showObjectCmd", NULL, "V", 0x1, NULL, NULL },
    { "showObjectAuxiliaryCmd", NULL, "V", 0x1, NULL, NULL },
    { "openPropertiesDialogCmd", NULL, "V", 0x1, NULL, NULL },
    { "inputFormCmdWithGeogebraCommonKernelGeosGeoUserInputElement:", "inputFormCmd", "V", 0x1, NULL, NULL },
    { "traceCmd", NULL, "V", 0x1, NULL, NULL },
    { "animationCmd", NULL, "V", 0x1, NULL, NULL },
    { "pinCmdWithBoolean:", "pinCmd", "V", 0x1, NULL, NULL },
    { "geoActionCmdWithGeogebraCommonKernelGeosGeoElement:withJavaUtilArrayList:withJavaUtilArrayList:withGeogebraCommonEuclidianEuclidianView:withGeogebraCommonAwtGPoint:", "geoActionCmd", "V", 0x1, NULL, NULL },
    { "recordToSpreadSheetCmd", NULL, "V", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "zoomFactors_", NULL, 0xc, "[D", &GeogebraCommonGuiContextMenuGeoElement_zoomFactors_, NULL,  },
    { "axesRatios_", NULL, 0xc, "[D", &GeogebraCommonGuiContextMenuGeoElement_axesRatios_, NULL,  },
    { "geos_", NULL, 0x4, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "geo_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "app_", NULL, 0x1, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "justOneGeo_", NULL, 0x4, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiContextMenuGeoElement = { 2, "ContextMenuGeoElement", "geogebra.common.gui", NULL, 0x401, 30, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiContextMenuGeoElement;
}

@end

void GeogebraCommonGuiContextMenuGeoElement_init(GeogebraCommonGuiContextMenuGeoElement *self) {
  NSObject_init(self);
  self->justOneGeo_ = NO;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiContextMenuGeoElement)
