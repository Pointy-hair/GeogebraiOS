//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdKeepIf.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoKeepIf.h"
#include "geogebra/common/kernel/algos/AlgoKeepIf3.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/MyStringBuffer.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/CmdKeepIf.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/parser/ParseException.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/main/MyError.h"

@implementation GeogebraCommonKernelCommandsCmdKeepIf

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdKeepIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSBooleanArray *ok = [IOSBooleanArray arrayWithLength:n];
  GeogebraCommonKernelGeosGeoElement *arg;
  IOSObjectArray *args;
  NSString *arg1Str;
  {
    IOSObjectArray *vars;
    IOSObjectArray *over;
    jboolean oldval;
    switch (n) {
      case 3:
      arg1Str = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([c getArgumentWithInt:1])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
      @try {
        if (![((NSString *) nil_chk(arg1Str)) isEqual:[((GeogebraCommonKernelParserParser *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernelA_)) getParser])) parseLabelWithNSString:arg1Str]]) {
          @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, arg1Str) autorelease]];
        }
      }
      @catch (GeogebraCommonKernelParserParseException *e) {
        @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyStringBuffer_initWithGeogebraCommonKernelKernel_withNSString_(kernelA_, arg1Str) autorelease]];
      }
      vars = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
      over = [IOSObjectArray arrayWithLength:1 type:GeogebraCommonKernelGeosGeoList_class_()];
      oldval = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) isSuppressLabelsActive];
      @try {
        [cons_ setSuppressLabelCreationWithBoolean:YES];
        arg = [self resArgsForZipWithGeogebraCommonKernelArithmeticCommand:c withGeogebraCommonKernelGeosGeoElementArray:vars withGeogebraCommonKernelGeosGeoListArray:over];
      }
      @finally {
        {
          IOSObjectArray *a__ = vars;
          GeogebraCommonKernelGeosGeoElement * const *b__ = a__->buffer_;
          GeogebraCommonKernelGeosGeoElement * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            GeogebraCommonKernelGeosGeoElement *localVar = *b__++;
            if (localVar != nil) [cons_ removeLocalVariableWithNSString:[localVar getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
          }
        }
        [cons_ setSuppressLabelCreationWithBoolean:oldval];
      }
      if ([arg isKindOfClass:[GeogebraCommonKernelGeosGeoBoolean class]]) {
        IOSObjectArray *ret = [self getResult3WithGeogebraCommonKernelArithmeticValidExpression:c withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(arg, [GeogebraCommonKernelGeosGeoBoolean class]) withGeogebraCommonKernelGeosGeoElementArray:vars withGeogebraCommonKernelGeosGeoListArray:over];
        return ret;
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:arg];
      case 2:
      args = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
      if ((*IOSBooleanArray_GetRef(ok, 0) = [IOSObjectArray_Get(nil_chk(args), 0) isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(args, 1))) isGeoList])) {
        GeogebraCommonKernelGeosGeoFunction *booleanFun = (GeogebraCommonKernelGeosGeoFunction *) check_class_cast(IOSObjectArray_Get(args, 0), [GeogebraCommonKernelGeosGeoFunction class]);
        if ((*IOSBooleanArray_GetRef(ok, 0) = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(booleanFun)) isBooleanFunction]) && (*IOSBooleanArray_GetRef(ok, 1) = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(args, 1))) isGeoList])) {
          IOSObjectArray *ret2 = [self getResult2WithGeogebraCommonKernelArithmeticValidExpression:c withGeogebraCommonKernelGeosGeoFunction:booleanFun withGeogebraCommonKernelGeosGeoElementArray:args];
          return ret2;
        }
      }
      @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:GeogebraCommonKernelCommandsCommandProcessor_getBadArgWithBooleanArray_withGeogebraCommonKernelGeosGeoElementArray_(ok, args)];
      default:
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (IOSObjectArray *)getResult2WithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)c
                                        withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)booleanFun
                                    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)args {
  GeogebraCommonKernelAlgosAlgoKeepIf *algo = [new_GeogebraCommonKernelAlgosAlgoKeepIf_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoList_(cons_, [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], booleanFun, ((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(nil_chk(args), 1), [GeogebraCommonKernelGeosGeoList class]))) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

- (IOSObjectArray *)getResult3WithGeogebraCommonKernelArithmeticValidExpression:(GeogebraCommonKernelArithmeticValidExpression *)c
                                         withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)arg
                                    withGeogebraCommonKernelGeosGeoElementArray:(IOSObjectArray *)vars
                                       withGeogebraCommonKernelGeosGeoListArray:(IOSObjectArray *)over {
  GeogebraCommonKernelAlgosAlgoKeepIf3 *algo = [new_GeogebraCommonKernelAlgosAlgoKeepIf3_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(cons_, [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk(c)) getLabel], arg, IOSObjectArray_Get(nil_chk(vars), 0), IOSObjectArray_Get(nil_chk(over), 0)) autorelease];
  IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getResult] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
  return ret;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdKeepIf", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, "Lgeogebra.common.main.MyError;", NULL },
    { "getResult2WithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelGeosGeoFunction:withGeogebraCommonKernelGeosGeoElementArray:", "getResult2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "getResult3WithGeogebraCommonKernelArithmeticValidExpression:withGeogebraCommonKernelGeosGeoBoolean:withGeogebraCommonKernelGeosGeoElementArray:withGeogebraCommonKernelGeosGeoListArray:", "getResult3", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdKeepIf = { 2, "CmdKeepIf", "geogebra.common.kernel.commands", NULL, 0x1, 4, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdKeepIf;
}

@end

void GeogebraCommonKernelCommandsCmdKeepIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdKeepIf *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdKeepIf *new_GeogebraCommonKernelCommandsCmdKeepIf_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdKeepIf *self = [GeogebraCommonKernelCommandsCmdKeepIf alloc];
  GeogebraCommonKernelCommandsCmdKeepIf_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdKeepIf)
