//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/awt/GGraphics2D.h"
#include "geogebra/common/awt/GPoint.h"
#include "geogebra/common/awt/GRectangle.h"
#include "geogebra/common/euclidian/Drawable.h"
#include "geogebra/common/euclidian/DrawableND.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianStatic.h"
#include "geogebra/common/euclidian/EuclidianStyleBar.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewCompanion.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/euclidian/Hits.h"
#include "geogebra/common/euclidian/Previewable.h"
#include "geogebra/common/euclidian/event/PointerEventType.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianController3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/EuclidianView3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/Hits3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawAngle3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawAxis3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawClippingCube3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConic3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConicPart3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConicSection3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawConify3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawCurve3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawExtrusion3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLine3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawList3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawLocus3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPlane3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPlaneConstant3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPoint3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPointDecorations.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyLine3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolygon3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawPolyhedron3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawQuadric3DPart.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawRay3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawSegment3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawSurface3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawText3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/DrawVector3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3D.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DLists.h"
#include "geogebra/common/geogebra3D/euclidian3D/draw/Drawable3DListsForView.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterCursor.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/Renderer.h"
#include "geogebra/common/geogebra3D/kernel3D/Kernel3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoAxis3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoClippingCube3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoConicSection.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPlane3DConstant.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolyhedron.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DLimited.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoQuadric3DPart.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoSurfaceCartesian3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix4x4.h"
#include "geogebra/common/kernel/Matrix/CoordMatrixUtil.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunctionNVar.h"
#include "geogebra/common/kernel/geos/GeoImage.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoLocusND.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/kernel/kernelND/CurveEvaluable.h"
#include "geogebra/common/kernel/kernelND/GeoAxisND.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoRayND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/settings/AbstractSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/EuclidianSettings3D.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/NumberFormatAdapter.h"
#include "geogebra/common/util/debug/Log.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"
#include "java/util/TreeSet.h"

#pragma clang diagnostic ignored "-Wprotocol"

#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT 0
#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DRAG 1
#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_MOVE 2
#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_HIT 3
#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT 2500
#define GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_ANGLE_SPEED_SURFACE 20.0

@interface GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D () {
 @public
  GeogebraCommonGeogebra3DKernel3DKernel3D *kernel3D_;
  jboolean waitForUpdate_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *drawable3DLists_;
  JavaUtilLinkedList *drawable3DListToBeAdded_;
  JavaUtilLinkedList *drawable3DListToBeRemoved_;
  JavaUtilTreeSet *geosToBeAdded_;
  JavaUtilTreeMap *drawable3DMap_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *m_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *mInv_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *mInvTranspose_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *undoRotationMatrix_;
  jdouble a_;
  jdouble b_;
  jdouble aNew_, bNew_;
  GeogebraCommonKernelMatrixCoords *viewDirection_;
  GeogebraCommonKernelMatrixCoords *eyePosition_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *xOyPlane_;
  IOSObjectArray *axis_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *clippingCube_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *xOyPlaneDrawable_;
  IOSObjectArray *axisDrawable_;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *pointDecorations_;
  jboolean decorationVisible_;
  id<GeogebraCommonEuclidianPreviewable> previewDrawable_EuclidianView3D_;
  GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *cursor3D_, *cursorOnXOYPlane_;
  jint cursor3DType_;
  jint cursor_;
  jboolean animatedScale_;
  jdouble animatedScaleStart_, animatedScaleEnd_;
  jdouble animatedScaleTimeFactor_;
  jlong animatedScaleTimeStart_;
  jdouble animatedScaleStartX_;
  jdouble animatedScaleStartY_;
  jdouble animatedScaleStartZ_;
  jdouble animatedScaleEndX_;
  jdouble animatedScaleEndY_;
  jdouble animatedScaleEndZ_;
  jboolean animatedContinueRot_;
  jdouble animatedRotSpeed_;
  jlong animatedRotTimeStart_;
  jboolean animatedRot_;
  jboolean isFrozen_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *scaleMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *undoScaleMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *translationMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *undoTranslationMatrix_;
  GeogebraCommonKernelMatrixCoordMatrix *rotationMatrix_;
  GeogebraCommonKernelMatrixCoords *viewDirectionPersp_;
  GeogebraCommonKernelMatrixCoords *tmpCoordsLength3_;
  jint intersectionThickness_;
  id<GeogebraCommonKernelKernelNDGeoPointND> intersectionPoint_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_;
  GeogebraCommonKernelMatrixCoordMatrix4x4 *tmpMatrix4x4_2_;
  GeogebraCommonKernelMatrixCoords *tmpCoords1_, *tmpCoords2_;
  jboolean defaultCursorWillBeHitCursor_;
  IOSDoubleArray *parameters_;
  jboolean viewChangedByZoom__;
  jboolean viewChangedByTranslate__;
  jboolean viewChangedByRotate__;
  jint pointStyle_;
  jint projection_;
  jdouble projectionPerspectiveEyeDistance_;
  jboolean isGlassesGrayScaled__;
  jboolean isGlassesShutDownGreen__;
  jdouble eyeSep_;
  jdouble eyesHeight_;
  jdouble eyesSide_;
  jdouble projectionObliqueAngle_;
  jdouble projectionObliqueFactor_;
  GeogebraCommonKernelMatrixCoords *boundsMin_, *boundsMax_;
}

- (void)start;

- (void)addNowWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo;

+ (void)changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)mat
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vInOut;

- (void)updateRotationMatrix;

- (void)updateScaleMatrix;

- (void)updateEye;

- (void)updateUseClippingCube;

- (void)setAnimatedCoordSystemWithDouble:(jdouble)x
                              withDouble:(jdouble)y
                              withDouble:(jdouble)z
                              withDouble:(jdouble)newScale
                                 withInt:(jint)steps;

- (void)animate;

- (void)updateCursorOnXOYPlane;

- (jboolean)moveCursorIsVisible;

- (void)initPointDecorations OBJC_METHOD_FAMILY_NONE;

- (void)drawPointAlreadyWithInt:(jint)mode;

- (void)setWaitForUpdateOwnDrawables;

- (void)intervalUnionOutsideWithDoubleArray:(IOSDoubleArray *)minmax
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2;

+ (void)intervalUnionWithDoubleArray:(IOSDoubleArray *)minmax
                          withDouble:(jdouble)v1
                          withDouble:(jdouble)v2;

- (void)viewChangedOwnDrawables;

- (void)setProjectionValuesWithInt:(jint)projection;

- (void)updateProjectionPerspectiveEyeDistance;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, kernel3D_, GeogebraCommonGeogebra3DKernel3DKernel3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, drawable3DLists_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, drawable3DListToBeAdded_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, drawable3DListToBeRemoved_, JavaUtilLinkedList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, geosToBeAdded_, JavaUtilTreeSet *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, drawable3DMap_, JavaUtilTreeMap *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, m_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, mInv_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, mInvTranspose_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, undoRotationMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, viewDirection_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, eyePosition_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, xOyPlane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, axis_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, clippingCube_, GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, xOyPlaneDrawable_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, axisDrawable_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, pointDecorations_, GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, previewDrawable_EuclidianView3D_, id<GeogebraCommonEuclidianPreviewable>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, cursor3D_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, cursorOnXOYPlane_, GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, scaleMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, undoScaleMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, translationMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, undoTranslationMatrix_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, rotationMatrix_, GeogebraCommonKernelMatrixCoordMatrix *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, viewDirectionPersp_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, tmpCoordsLength3_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, intersectionPoint_, id<GeogebraCommonKernelKernelNDGeoPointND>)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, tmpMatrix4x4_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, tmpMatrix4x4_2_, GeogebraCommonKernelMatrixCoordMatrix4x4 *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, tmpCoords1_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, tmpCoords2_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, parameters_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, boundsMin_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, boundsMax_, GeogebraCommonKernelMatrixCoords *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, CURSOR_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, CURSOR_DRAG, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, CURSOR_MOVE, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, CURSOR_HIT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, MAX_ANGLE_SPEED_SURFACE, jdouble)

static jdouble GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_BEND_SPEED_SURFACE_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D, MAX_BEND_SPEED_SURFACE_, jdouble)

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_start(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_addNowWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, GeogebraCommonKernelGeosGeoElement *geo);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, GeogebraCommonKernelMatrixCoords *vInOut);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordMatrix *mat, GeogebraCommonKernelMatrixCoords *vInOut);

__attribute__((unused)) static GeogebraCommonKernelMatrixCoordMatrix4x4 *GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateRotationMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateScaleMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateEye(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_translateCoordSystemInPixelsWithInt_withInt_withInt_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint dx, jint dy, jint dz, jint mode);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAnimatedCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jdouble x, jdouble y, jdouble z, jdouble newScale, jint steps);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_animate(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateCursorOnXOYPlane(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_moveCursorIsVisible(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initPointDecorations(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint mode);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setWaitForUpdateOwnDrawables(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, IOSDoubleArray *minmax, GeogebraCommonKernelMatrixCoords *o, GeogebraCommonKernelMatrixCoords *v, GeogebraCommonKernelMatrixCoords *p1, GeogebraCommonKernelMatrixCoords *p2);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_viewChangedOwnDrawables(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint projection);

__attribute__((unused)) static void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self);

J2OBJC_INITIALIZED_DEFN(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D)

jdouble GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_automaticGridDistanceFactor_ = 1.0;

@implementation GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D

- (instancetype)initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:(GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *)ec
                                 withGeogebraCommonMainSettingsEuclidianSettings:(GeogebraCommonMainSettingsEuclidianSettings *)settings {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonMainSettingsEuclidianSettings_(self, ec, settings);
  return self;
}

- (void)initAxesValues {
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesNumberFormat_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonUtilNumberFormatAdapter_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_showAxesNumbers_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabels_(self, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil, nil } count:3 type:NSString_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesLabelsStyle_(self, [IOSIntArray newArrayWithInts:(jint[]){ GeogebraCommonAwtGFont_PLAIN, GeogebraCommonAwtGFont_PLAIN, GeogebraCommonAwtGFont_PLAIN } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesUnitLabels_(self, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil, nil } count:3 type:NSString_class_()]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesTickStyles_(self, [IOSIntArray newArrayWithInts:(jint[]){ GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR, GeogebraCommonPluginEuclidianStyleConstants_AXES_TICK_STYLE_MAJOR } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_automaticAxesNumberingDistances_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ YES, YES, YES } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axesNumberingDistances_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2, 2 } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_drawBorderAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_axisCross_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 0, 0, 0 } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_positiveAxes_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_piAxisUnit_(self, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ NO, NO, NO } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_gridDistances_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 2, 2, JavaLangMath_PI / 6 } count:3]);
  GeogebraCommonEuclidianEuclidianView_setAndConsume_AxesTickInterval_(self, [IOSDoubleArray newArrayWithDoubles:(jdouble[]){ 1, 1, 1 } count:3]);
}

- (jint)getAxisTickStyleWithInt:(jint)i {
  return IOSIntArray_Get(nil_chk(axesTickStyles_), i);
}

- (void)createPanel {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)createRenderer {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)start {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_start(self);
}

- (void)initAxisAndPlane {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_axis_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonKernelKernelNDGeoAxisND_class_()]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_axisDrawable_(self, [IOSObjectArray newArrayWithLength:3 type:GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_class_()]);
  IOSObjectArray_Set(axis_, 0, [((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(kernel3D_)) getXAxis3D]);
  IOSObjectArray_Set(axis_, 1, [kernel3D_ getYAxis3D]);
  IOSObjectArray_Set(axis_, 2, [kernel3D_ getZAxis3D]);
  for (jint i = 0; i < 3; i++) {
    [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(axis_, i))) setLabelVisibleWithBoolean:YES];
    IOSObjectArray_Set(axisDrawable_, i, (GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) check_class_cast([self createDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(axis_, i), [GeogebraCommonKernelGeosGeoElement class])], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D class]));
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_clippingCube_(self, [kernel3D_ getClippingCube]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *) nil_chk(clippingCube_)) setEuclidianVisibleWithBoolean:YES];
  [clippingCube_ setObjColorWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_GRAY_()];
  [clippingCube_ setLineThicknessWithInt:1];
  [clippingCube_ setIsPickableWithBoolean:NO];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_clippingCubeDrawable_(self, (GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) check_class_cast([self createDrawableWithGeogebraCommonKernelGeosGeoElement:clippingCube_], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D class]));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_xOyPlane_(self, [kernel3D_ getXOYPlane]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(xOyPlane_)) setEuclidianVisibleWithBoolean:YES];
  [xOyPlane_ setGridVisibleWithBoolean:YES];
  [xOyPlane_ setPlateVisibleWithBoolean:YES];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_xOyPlaneDrawable_(self, (GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) check_class_cast([self createDrawableWithGeogebraCommonKernelGeosGeoElement:xOyPlane_], [GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D class]));
}

- (JavaUtilArrayList *)getStickyPointList {
  return [new_JavaUtilArrayList_init() autorelease];
}

- (GeogebraCommonGeogebra3DKernel3DKernel3D *)getKernel {
  return kernel3D_;
}

- (GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)getRenderer {
  return renderer_;
}

- (void)addWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInView3D]) {
    [self setWaitForUpdate];
    [((JavaUtilTreeSet *) nil_chk(geosToBeAdded_)) addWithId:geo];
    [self repaintView];
  }
}

- (void)addNowWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_addNowWithGeogebraCommonKernelGeosGeoElement_(self, geo);
}

- (void)addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [((JavaUtilLinkedList *) nil_chk(drawable3DListToBeAdded_)) addWithId:d];
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)newDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = nil;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
    {
      GeogebraCommonKernelGeosGeoFunctionNVar *geoFun;
      switch ([[geo getGeoClassType] ordinal]) {
        case GeogebraCommonPluginGeoClass_LIST:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawList3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoList_(self, (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_POINT:
        case GeogebraCommonPluginGeoClass_POINT3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPoint3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoPointND_(self, (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoPointND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_VECTOR:
        case GeogebraCommonPluginGeoClass_VECTOR3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoVectorND_(self, (id<GeogebraCommonKernelKernelNDGeoVectorND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoVectorND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_SEGMENT:
        case GeogebraCommonPluginGeoClass_SEGMENT3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoSegmentND_(self, (id<GeogebraCommonKernelKernelNDGeoSegmentND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoSegmentND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_PLANE3D:
        if ([geo isKindOfClass:[GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3DConstant class]]) d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlaneConstant3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_withGeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class]), IOSObjectArray_Get(nil_chk(axisDrawable_), GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X), IOSObjectArray_Get(axisDrawable_, GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y)) autorelease];
        else d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_POLYGON:
        case GeogebraCommonPluginGeoClass_POLYGON3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoPolygon_(self, (GeogebraCommonKernelGeosGeoPolygon *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPolygon class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_PENSTROKE:
        case GeogebraCommonPluginGeoClass_POLYLINE:
        case GeogebraCommonPluginGeoClass_POLYLINE3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoElement_(self, geo) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_LINE:
        case GeogebraCommonPluginGeoClass_LINE3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoLineND_(self, (id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoLineND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_RAY:
        case GeogebraCommonPluginGeoClass_RAY3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoRayND_(self, (id<GeogebraCommonKernelKernelNDGeoRayND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoRayND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_CONIC:
        case GeogebraCommonPluginGeoClass_CONIC3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConic3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicND_(self, (GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(geo, [GeogebraCommonKernelKernelNDGeoConicND class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_CONICPART:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConicPart3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoConicPartND_(self, (id<GeogebraCommonKernelKernelNDGeoConicPartND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoConicPartND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_CONICSECTION:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConicSection3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoConicSection_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoConicSection class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_AXIS:
        case GeogebraCommonPluginGeoClass_AXIS3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDGeoAxisND_(self, (id<GeogebraCommonKernelKernelNDGeoAxisND>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDGeoAxisND))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_FUNCTION:
        case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN:
        case GeogebraCommonPluginGeoClass_CURVE_CARTESIAN3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawCurve3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDCurveEvaluable_(self, (id<GeogebraCommonKernelKernelNDCurveEvaluable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelKernelNDCurveEvaluable))) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_LOCUS:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLocus3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoLocusND_(self, (GeogebraCommonKernelGeosGeoLocusND *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoLocusND class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_ANGLE:
        case GeogebraCommonPluginGeoClass_ANGLE3D:
        if ([geo isIndependent]) {
        }
        else {
          d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawAngle3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoAngle_(self, (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoAngle class])) autorelease];
        }
        break;
        case GeogebraCommonPluginGeoClass_QUADRIC:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3D class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_QUADRIC_PART:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DPart_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_QUADRIC_LIMITED:
        if (![((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DPart *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) getSide])) isLabelSet]) {
          d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3DLimited_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoQuadric3DLimited class])) autorelease];
        }
        break;
        case GeogebraCommonPluginGeoClass_POLYHEDRON:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolyhedron class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_FUNCTION_NVAR:
        geoFun = (GeogebraCommonKernelGeosGeoFunctionNVar *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoFunctionNVar class]);
        switch ([geoFun getVarNumber]) {
          case 2:
          d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSurface3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDSurfaceEvaluable_(self, geoFun) autorelease];
          break;
        }
        break;
        case GeogebraCommonPluginGeoClass_SURFACECARTESIAN3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSurface3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelKernelNDSurfaceEvaluable_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoSurfaceCartesian3D class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_TEXT:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawText3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonKernelGeosGeoText_(self, (GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) autorelease];
        break;
        case GeogebraCommonPluginGeoClass_CLIPPINGCUBE3D:
        d = [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withGeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D_(self, (GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *) check_class_cast(geo, [GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D class])) autorelease];
        break;
      }
    }
  }
  return d;
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)createDrawableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [self newDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) putWithId:geo withId:d];
  return d;
}

- (void)toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vInOut {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, vInOut);
}

- (void)toScreenCoords3DWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vInOut {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoords_(m_, vInOut);
}

+ (void)changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix:(GeogebraCommonKernelMatrixCoordMatrix *)mat
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vInOut {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoords_(mat, vInOut);
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getToSceneMatrix {
  return mInv_;
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getToSceneMatrixTranspose {
  return mInvTranspose_;
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getToScreenMatrix {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(self);
}

- (GeogebraCommonKernelMatrixCoordMatrix4x4 *)getUndoRotationMatrix {
  return undoRotationMatrix_;
}

- (jboolean)getYAxisVertical {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getYAxisVertical];
}

- (void)setYAxisVerticalWithBoolean:(jboolean)flag {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setYAxisVerticalWithBoolean:flag];
}

- (jboolean)getUseLight {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getUseLight];
}

- (void)updateRotationMatrix {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateRotationMatrix(self);
}

- (void)updateScaleMatrix {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateScaleMatrix(self);
}

- (void)updateTranslationMatrix {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(translationMatrix_)) setWithInt:1 withInt:4 withDouble:[self getXZero]];
  [translationMatrix_ setWithInt:2 withInt:4 withDouble:[self getYZero]];
  [translationMatrix_ setWithInt:3 withInt:4 withDouble:[self getZZero]];
}

- (void)updateRotationAndScaleMatrices {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateRotationMatrix(self);
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(undoRotationMatrix_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(rotationMatrix_)) inverse]];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateScaleMatrix(self);
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(undoScaleMatrix_)) setWithInt:1 withInt:1 withDouble:1 / [self getXscale]];
  [undoScaleMatrix_ setWithInt:2 withInt:2 withDouble:1 / [self getYscale]];
  [undoScaleMatrix_ setWithInt:3 withInt:3 withDouble:1 / [self getZscale]];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_rotationAndScaleMatrix_(self, [rotationMatrix_ mulWithGeogebraCommonKernelMatrixCoordMatrix:scaleMatrix_]);
}

- (GeogebraCommonKernelMatrixCoordMatrix *)getRotationMatrix {
  return rotationMatrix_;
}

- (void)setGlobalMatrices {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(m_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(rotationAndScaleMatrix_)) mulWithGeogebraCommonKernelMatrixCoordMatrix:translationMatrix_]];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(mInv_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(undoTranslationMatrix_)) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:[((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(undoScaleMatrix_)) mulWithGeogebraCommonKernelMatrixCoordMatrix4x4:undoRotationMatrix_]]];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(mInvTranspose_)) setWithGeogebraCommonKernelMatrixCoordMatrix:[mInv_ transposeCopy]];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateEye(self);
}

- (void)updateMatrix {
  [self updateRotationAndScaleMatrices];
  [self updateTranslationMatrix];
  [self updateUndoTranslationMatrix];
  [self setGlobalMatrices];
}

- (void)updateUndoTranslationMatrix {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(undoTranslationMatrix_)) setWithInt:1 withInt:4 withDouble:-[self getXZero]];
  [undoTranslationMatrix_ setWithInt:2 withInt:4 withDouble:-[self getYZero]];
  [undoTranslationMatrix_ setWithInt:3 withInt:4 withDouble:-[self getZZero]];
}

- (void)updateEye {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateEye(self);
}

- (GeogebraCommonKernelMatrixCoords *)getViewDirection {
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC || projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) return viewDirection_;
  return viewDirectionPersp_;
}

- (GeogebraCommonKernelMatrixCoords *)getEyePosition {
  return eyePosition_;
}

- (void)setRotXYinDegreesWithDouble:(jdouble)a
                         withDouble:(jdouble)b {
  if (JavaLangDouble_isNaNWithDouble_(a) || JavaLangDouble_isNaNWithDouble_(b)) {
    GeogebraCommonMainApp_printStacktraceWithId_(@"NaN values for setRotXYinDegrees");
    return;
  }
  self->a_ = a;
  self->b_ = b;
  if (self->b_ > GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX) self->b_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX;
  else if (self->b_ < -GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX) self->b_ = -GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_MAX;
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setRotXYinDegreesFromViewWithDouble:a withDouble:b];
}

- (GeogebraCommonMainSettingsEuclidianSettings3D *)getSettings {
  return (GeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast([super getSettings], [GeogebraCommonMainSettingsEuclidianSettings3D class]);
}

- (void)translateCoordSystemInPixelsWithInt:(jint)dx
                                    withInt:(jint)dy
                                    withInt:(jint)dz
                                    withInt:(jint)mode {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_translateCoordSystemInPixelsWithInt_withInt_withInt_withInt_(self, dx, dy, dz, mode);
}

- (void)pageUpDownTranslateCoordSystemWithInt:(jint)height {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_translateCoordSystemInPixelsWithInt_withInt_withInt_withInt_(self, 0, 0, height / 100, GeogebraCommonEuclidianEuclidianController_MOVE_VIEW);
}

- (void)setCoordSystemFromMouseMoveWithInt:(jint)dx
                                   withInt:(jint)dy
                                   withInt:(jint)mode {
  {
    GeogebraCommonKernelMatrixCoords *v;
    switch (mode) {
      case GeogebraCommonEuclidianEuclidianController_MOVE_ROTATE_VIEW:
      [self setRotXYinDegreesWithDouble:aOld_ - dx withDouble:bOld_ + dy];
      [self updateMatrix];
      [self setViewChangedByRotate];
      [self setWaitForUpdate];
      break;
      case GeogebraCommonEuclidianEuclidianController_MOVE_VIEW:
      v = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(dx, -dy, 0, 0) autorelease];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, v);
      if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursorOnXOYPlane_)) getRealMoveMode] == GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY) {
        [v projectPlaneThruVIfPossibleWithGeogebraCommonKernelMatrixCoordMatrix:GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withGeogebraCommonKernelMatrixCoords:[self getViewDirection] withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        [self setXZeroWithDouble:XZeroOld_ + [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) getX]];
        [self setYZeroWithDouble:YZeroOld_ + [tmpCoords1_ getY]];
      }
      else {
        [v projectPlaneInPlaneCoordsWithGeogebraCommonKernelMatrixCoordMatrix:GeogebraCommonKernelMatrixCoordMatrix4x4_get_IDENTITY_() withGeogebraCommonKernelMatrixCoords:tmpCoords1_];
        [self setZZeroWithDouble:ZZeroOld_ + [((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords1_)) getZ]];
      }
      [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) updateOriginFromViewWithDouble:[self getXZero] withDouble:[self getYZero] withDouble:[self getZZero]];
      [self updateMatrix];
      [self setViewChangedByTranslate];
      [self setWaitForUpdate];
      break;
    }
  }
}

- (jdouble)getXZero {
  return XZero_;
}

- (jdouble)getYZero {
  return YZero_;
}

- (jdouble)getZZero {
  return ZZero_;
}

- (void)setXZeroWithDouble:(jdouble)val {
  XZero_ = val;
}

- (void)setYZeroWithDouble:(jdouble)val {
  YZero_ = val;
}

- (void)setZZeroWithDouble:(jdouble)val {
  ZZero_ = val;
}

- (void)setZeroFromXMLWithDouble:(jdouble)x
                      withDouble:(jdouble)y
                      withDouble:(jdouble)z {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) fileVersionBeforeWithIntArray:GeogebraCommonMainApp_getSubValuesWithNSString_(@"4.9.14.0")]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateRotationMatrix(self);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateScaleMatrix(self);
    [self setXZeroWithDouble:x];
    [self setYZeroWithDouble:y];
    [self setZZeroWithDouble:z];
    [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) updateOriginFromViewWithDouble:x withDouble:y withDouble:z];
    [self updateTranslationMatrix];
    GeogebraCommonKernelMatrixCoordMatrix *mRS = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(rotationMatrix_)) mulWithGeogebraCommonKernelMatrixCoordMatrix:scaleMatrix_];
    GeogebraCommonKernelMatrixCoordMatrix *matrix = ([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(([((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(mRS)) inverse]))) mulWithGeogebraCommonKernelMatrixCoordMatrix:translationMatrix_])) mulWithGeogebraCommonKernelMatrixCoordMatrix:mRS]);
    GeogebraCommonKernelMatrixCoords *origin = [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(matrix)) getOrigin];
    [self setXZeroWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(origin)) getX]];
    [self setYZeroWithDouble:[origin getY]];
    [self setZZeroWithDouble:[origin getZ]];
    [self updateMatrix];
    return;
  }
  [self setXZeroWithDouble:x];
  [self setYZeroWithDouble:y];
  [self setZZeroWithDouble:z];
}

- (jdouble)getXRot {
  return a_;
}

- (jdouble)getZRot {
  return b_;
}

- (jdouble)getXmin {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 0)), 0);
}

- (jdouble)getXmax {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 0)), 1);
}

- (jdouble)getYmin {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 1)), 0);
}

- (jdouble)getYmax {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 1)), 1);
}

- (jdouble)getZmin {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 2)), 0);
}

- (jdouble)getZmax {
  return IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getMinMax]), 2)), 1);
}

- (GeogebraCommonKernelMatrixCoords *)getCenter {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getCenter];
}

- (jdouble)getFrustumRadius {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getFrustumRadius];
}

- (jdouble)getXscale {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getXscale];
}

- (jdouble)getYscale {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getYscale];
}

- (jdouble)getZscale {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getZscale];
}

- (jdouble)getScaleWithInt:(jint)i {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getXscale];
}

- (void)setAxesIntervalsWithDouble:(jdouble)scale_
                           withInt:(jint)axis {
  [super setAxesIntervalsWithDouble:scale_ withInt:axis];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), axis))) setLabelWaitForUpdate];
  [self setWaitForUpdate];
}

- (void)setScaleWithDouble:(jdouble)val {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setScaleNoCallToSettingsChangedWithDouble:val];
  [self setViewChangedByZoom];
}

- (jdouble)getScale {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getXscale];
}

- (void)rememberOrigins {
  aOld_ = a_;
  bOld_ = b_;
  XZeroOld_ = XZero_;
  YZeroOld_ = YZero_;
  ZZeroOld_ = ZZero_;
}

- (void)updateAnimation {
  if ([self isAnimated]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_animate(self);
    [self setWaitForUpdate];
  }
}

- (void)update {
  [self updateAnimation];
  if (waitForUpdate_ || ![((JavaUtilLinkedList *) nil_chk(drawable3DListToBeRemoved_)) isEmpty] || ![((JavaUtilLinkedList *) nil_chk(drawable3DListToBeAdded_)) isEmpty]) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) removeWithJavaUtilLinkedList:drawable3DListToBeRemoved_];
    [((JavaUtilLinkedList *) nil_chk(drawable3DListToBeRemoved_)) clear];
    [drawable3DLists_ addWithJavaUtilLinkedList:drawable3DListToBeAdded_];
    [((JavaUtilLinkedList *) nil_chk(drawable3DListToBeAdded_)) clear];
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in nil_chk(geosToBeAdded_)) GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_addNowWithGeogebraCommonKernelGeosGeoElement_(self, geo);
    [geosToBeAdded_ clear];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_viewChangedOwnDrawables(self);
    waitForUpdate_ = NO;
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *) nil_chk(pointDecorations_)) update];
}

- (void)setWaitForUpdate {
  waitForUpdate_ = YES;
}

- (GeogebraCommonKernelMatrixCoords *)getPickPointWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouse {
  [self setPickPointFromMouseWithGeogebraCommonAwtGPoint:mouse];
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_viewDirectionPersp_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(pickPoint_)) subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getPerspEye]]);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, viewDirectionPersp_);
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(viewDirectionPersp_)) normalize];
  }
  return [((GeogebraCommonKernelMatrixCoords *) nil_chk(pickPoint_)) copyVector];
}

- (void)setCenteredPositionWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouse
                           withGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)result {
  ((GeogebraCommonAwtGPoint *) nil_chk(result))->x_ = [((GeogebraCommonAwtGPoint *) nil_chk(mouse)) getX] + [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getLeft];
  result->y_ = -[mouse getY] + [renderer_ getTop];
}

- (void)setPickPointFromMouseWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)mouse {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(pickPoint_)) setXWithDouble:[((GeogebraCommonAwtGPoint *) nil_chk(mouse)) getX] + [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getLeft]];
  [pickPoint_ setYWithDouble:-[mouse getY] + [renderer_ getTop]];
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    [pickPoint_ setZWithDouble:0];
  }
  else {
    [pickPoint_ setZWithDouble:[renderer_ getVisibleDepth]];
    if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) {
      [pickPoint_ setXWithDouble:[pickPoint_ getX] - [pickPoint_ getZ] * [renderer_ getObliqueX]];
      [pickPoint_ setYWithDouble:[pickPoint_ getY] - [pickPoint_ getZ] * [renderer_ getObliqueY]];
    }
  }
}

- (GeogebraCommonKernelMatrixCoords *)projectOnScreenWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  GeogebraCommonKernelMatrixCoords *p1 = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(self))) mulWithGeogebraCommonKernelMatrixCoords:p];
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    GeogebraCommonKernelMatrixCoords *eye = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getPerspEye];
    GeogebraCommonKernelMatrixCoords *v = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) subWithGeogebraCommonKernelMatrixCoords:eye];
    return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(eye)) getX] - [eye getZ] * [((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] / [v getZ], [eye getY] - [eye getZ] * [v getY] / [v getZ]) autorelease];
  }
  return [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) getX], [p1 getY]) autorelease];
}

- (GeogebraCommonKernelMatrixCoords *)getPickFromScenePointWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p
                                                                                        withInt:(jint)dx
                                                                                        withInt:(jint)dy {
  GeogebraCommonKernelMatrixCoords *point = [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(self))) mulWithGeogebraCommonKernelMatrixCoords:p];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(pickPoint_)) setXWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(point)) getWithInt:1] + dx];
  [pickPoint_ setYWithDouble:[point getWithInt:2] - dy];
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE || projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_viewDirectionPersp_(self, [pickPoint_ subWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getPerspEye]]);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, viewDirectionPersp_);
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(viewDirectionPersp_)) normalize];
  }
  return [pickPoint_ copyVector];
}

- (void)attachView {
  [((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(kernel3D_)) notifyAddAllWithGeogebraCommonKernelView:self];
  [kernel3D_ attachWithGeogebraCommonKernelView:self];
}

- (void)clearView {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) clear];
  [((JavaUtilTreeSet *) nil_chk(geosToBeAdded_)) clear];
  [((JavaUtilLinkedList *) nil_chk(drawable3DListToBeAdded_)) clear];
  [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) clear];
  [self initViewWithBoolean:NO];
}

- (void)initViewWithBoolean:(jboolean)repaint {
  [super initViewWithBoolean:repaint];
  [self setBackgroundWithGeogebraCommonAwtGColor:GeogebraCommonAwtGColor_get_white_()];
  [self updateMatrix];
}

- (void)removeWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) getWithId:geo];
    [self removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
  }
  [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) removeWithId:geo];
  [((JavaUtilTreeSet *) nil_chk(geosToBeAdded_)) removeWithId:geo];
  [self repaintView];
}

- (void)removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [((JavaUtilLinkedList *) nil_chk(drawable3DListToBeRemoved_)) addWithId:d];
}

- (void)renameWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
}

- (void)repaintView {
}

- (void)waitForNewRepaint {
}

- (void)reset {
  [self resetAllDrawables];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_viewChangedOwnDrawables(self);
  [self setViewChanged];
  [self setWaitForUpdate];
}

- (void)updateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) getWithId:geo];
    if (d != nil) {
      [self updateWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
    }
  }
}

- (void)updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
    GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) getWithId:geo];
    if (d != nil) {
      [d setWaitForUpdateVisualStyle];
    }
  }
  if (styleBar_ != nil) [styleBar_ updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:geo];
}

- (void)updateAllDrawables {
  for (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D * __strong d in nil_chk([((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) values])) {
    [self updateWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setWaitForUpdateOwnDrawables(self);
}

- (void)updateWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *)d {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) nil_chk(d)) setWaitForUpdate];
}

- (GeogebraCommonEuclidianDrawableND *)getDrawableNDWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) hasDrawable3D]) {
    return [((JavaUtilTreeMap *) nil_chk(drawable3DMap_)) getWithId:geo];
  }
  return nil;
}

- (GeogebraCommonKernelGeosGeoElement *)getLabelHitWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
                          withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if (type == GeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH()) {
    return nil;
  }
  return [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) getLabelHitWithGeogebraCommonAwtGPoint:p];
}

- (id<GeogebraCommonEuclidianPreviewable>)getPreviewDrawable {
  return previewDrawable_EuclidianView3D_;
}

- (jboolean)getShowMouseCoords {
  return NO;
}

- (jboolean)getShowXaxis {
  return [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(nil_chk(axis_), GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X))) isEuclidianVisible];
}

- (jboolean)getShowYaxis {
  return [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(nil_chk(axis_), GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y))) isEuclidianVisible];
}

- (jboolean)setShowAxisWithInt:(jint)axis
                   withBoolean:(jboolean)flag
                   withBoolean:(jboolean)update {
  jboolean old = [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(nil_chk(self->axis_), axis))) isEuclidianVisible];
  [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(self->axis_, axis))) setEuclidianVisibleWithBoolean:flag];
  return flag != old;
}

- (jboolean)setShowAxesWithBoolean:(jboolean)flag
                       withBoolean:(jboolean)update {
  jboolean changedX = [self setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:flag withBoolean:NO];
  jboolean changedY = [self setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:flag withBoolean:NO];
  return [self setShowAxisWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_AXIS_Z withBoolean:flag withBoolean:YES] || changedX || changedY;
}

- (void)setShowPlaneWithBoolean:(jboolean)flag {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getxOyPlane])) setEuclidianVisibleWithBoolean:flag];
}

- (void)setShowPlateWithBoolean:(jboolean)flag {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getxOyPlane])) setPlateVisibleWithBoolean:flag];
}

- (jboolean)setShowGridWithBoolean:(jboolean)flag {
  jboolean changed = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getxOyPlane])) setGridVisibleWithBoolean:flag];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) setWaitForUpdate];
  return changed;
}

- (jint)getViewHeight {
  return [self getHeight];
}

- (jint)getViewWidth {
  return [self getWidth];
}

- (jboolean)hitAnimationButtonWithInt:(jint)x
                              withInt:(jint)y {
  return NO;
}

- (void)resetMode {
}

- (jboolean)isAnimated {
  return animatedScale_ || [self isRotAnimated];
}

- (jboolean)isRotAnimated {
  return animatedContinueRot_ || animatedRot_;
}

- (jboolean)isRotAnimatedContinue {
  return animatedContinueRot_;
}

- (jboolean)isInsideWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p {
  jdouble val = [((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX];
  if (val < [self getXmin] || val > [self getXmax]) return NO;
  val = [p getY];
  if (val < [self getYmin] || val > [self getYmax]) return NO;
  val = [p getZ];
  if (val < [self getZmin] || val > [self getZmax]) return NO;
  return YES;
}

- (jboolean)useClippingCube {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) useClippingCube];
}

- (void)setUseClippingCubeWithBoolean:(jboolean)flag {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setUseClippingCubeWithBoolean:flag];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(self);
}

- (void)updateUseClippingCube {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(self);
}

- (jboolean)showClippingCube {
  return [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) showClippingCube];
}

- (void)setShowClippingCubeWithBoolean:(jboolean)flag {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setShowClippingCubeWithBoolean:flag];
  [self setWaitForUpdate];
}

- (void)toggleShowAndUseClippingCube {
  jboolean flag = [self showClippingCube] || [self useClippingCube];
  [self setShowClippingCubeWithBoolean:!flag];
  [self setUseClippingCubeWithBoolean:!flag];
}

- (void)setClippingReductionWithInt:(jint)value {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *) nil_chk(clippingCube_)) setReductionWithInt:value];
  [self setViewChanged];
  [self setWaitForUpdate];
}

- (jint)getClippingReduction {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoClippingCube3D *) nil_chk(clippingCube_)) getReduction];
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)x0
                              withDouble:(jdouble)y0
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAnimatedCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_XZERO_SCENE_STANDARD, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_YZERO_SCENE_STANDARD, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ZZERO_SCENE_STANDARD, GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD, steps);
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)x
                              withDouble:(jdouble)y
                              withDouble:(jdouble)z
                              withDouble:(jdouble)newScale
                                 withInt:(jint)steps {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAnimatedCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_(self, x, y, z, newScale, steps);
}

- (void)setAnimatedCoordSystemWithDouble:(jdouble)ox
                              withDouble:(jdouble)oy
                              withDouble:(jdouble)f
                              withDouble:(jdouble)newScale
                                 withInt:(jint)steps
                             withBoolean:(jboolean)storeUndo {
  animatedScaleStartX_ = [self getXZero];
  animatedScaleStartY_ = [self getYZero];
  animatedScaleStartZ_ = [self getZZero];
  GeogebraCommonKernelMatrixCoords *v;
  if ([self getCursor3DType] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE) {
    v = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-animatedScaleStartX_, -animatedScaleStartY_, -animatedScaleStartZ_, 1) autorelease];
  }
  else {
    v = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursor3D_)) getInhomCoords];
    if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) isDefined]) {
      v = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(-animatedScaleStartX_, -animatedScaleStartY_, -animatedScaleStartZ_, 1) autorelease];
    }
  }
  jdouble factor = [self getScale] / newScale;
  animatedScaleEndX_ = -[((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) getX] + (animatedScaleStartX_ + [v getX]) * factor;
  animatedScaleEndY_ = -[v getY] + (animatedScaleStartY_ + [v getY]) * factor;
  animatedScaleEndZ_ = -[v getZ] + (animatedScaleStartZ_ + [v getZ]) * factor;
  animatedScaleStart_ = [self getScale];
  animatedScaleTimeStart_ = JavaLangSystem_currentTimeMillis();
  animatedScaleEnd_ = newScale;
  animatedScale_ = YES;
  animatedScaleTimeFactor_ = 0.005;
}

- (void)setRotContinueAnimationWithLong:(jlong)delay
                             withDouble:(jdouble)rotSpeed {
  if (JavaLangDouble_isNaNWithDouble_(rotSpeed)) {
    GeogebraCommonMainApp_printStacktraceWithId_(@"NaN values for setRotContinueAnimation");
    [self stopRotAnimation];
    return;
  }
  jdouble rotSpeed2 = rotSpeed;
  if (delay > 200) return;
  if (JavaLangMath_absWithDouble_(rotSpeed2) < 0.01) {
    [self stopRotAnimation];
    return;
  }
  if (rotSpeed2 > 0.1) rotSpeed2 = 0.1;
  else if (rotSpeed2 < -0.1) rotSpeed2 = -0.1;
  animatedContinueRot_ = YES;
  animatedRot_ = NO;
  animatedRotSpeed_ = -rotSpeed2;
  animatedRotTimeStart_ = JavaLangSystem_currentTimeMillis() - delay;
  bOld_ = b_;
  aOld_ = a_;
}

- (void)setRotAnimationWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn {
  GeogebraCommonKernelMatrixCoordMatrixUtil_sphericalCoordsWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(vn, tmpCoordsLength3_);
  [self setRotAnimationWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoordsLength3_)) getWithInt:2] * 180 / JavaLangMath_PI withDouble:[tmpCoordsLength3_ getWithInt:3] * 180 / JavaLangMath_PI withBoolean:YES];
}

- (void)setClosestRotAnimationWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:[self getViewDirection]] > 0) [self setRotAnimationWithGeogebraCommonKernelMatrixCoords:[v mulWithDouble:-1]];
  else [self setRotAnimationWithGeogebraCommonKernelMatrixCoords:v];
}

- (void)setRotAnimationWithDouble:(jdouble)aN
                       withDouble:(jdouble)bN
                      withBoolean:(jboolean)checkSameValues {
  if (JavaLangDouble_isNaNWithDouble_(aN) || JavaLangDouble_isNaNWithDouble_(bN)) {
    GeogebraCommonMainApp_printStacktraceWithId_(@"NaN values for setRotAnimation");
    return;
  }
  animatedRot_ = YES;
  animatedContinueRot_ = NO;
  aOld_ = fmod(self->a_, 360);
  bOld_ = fmod(self->b_, 360);
  aNew_ = aN;
  bNew_ = bN;
  if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(aNew_, 0, GeogebraCommonKernelKernel_STANDARD_PRECISION) && GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_absWithDouble_(bNew_), 90, GeogebraCommonKernelKernel_STANDARD_PRECISION)) aNew_ = -90;
  if (aOld_ - aNew_ > 180) aOld_ -= 360;
  else if (aOld_ - aNew_ < -180) aOld_ += 360;
  else if (checkSameValues) if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(aOld_, aNew_, GeogebraCommonKernelKernel_STANDARD_PRECISION)) if (GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(bOld_, bNew_, GeogebraCommonKernelKernel_STANDARD_PRECISION)) {
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_withDouble_(JavaLangMath_absWithDouble_(bNew_), 90, GeogebraCommonKernelKernel_STANDARD_PRECISION)) aNew_ += 180;
    bNew_ *= -1;
  }
  if (bOld_ > 180) bOld_ -= 360;
  animatedRotTimeStart_ = JavaLangSystem_currentTimeMillis();
}

- (void)stopRotAnimation {
  animatedContinueRot_ = NO;
  animatedRot_ = NO;
}

- (void)animate {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_animate(self);
}

- (void)setHitsWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p
withGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  if ([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) useLogicalPicking]) {
    [renderer_ setHitsWithGeogebraCommonAwtGPoint:p withInt:[self getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type]];
    if (type == GeogebraCommonEuclidianEventPointerEventTypeEnum_get_TOUCH() && [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(self->hits_EuclidianView3D_)) size] == 0) {
      [renderer_ setHitsWithGeogebraCommonAwtGPoint:p withInt:[self getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type] * 3];
    }
    hasMouse__ = YES;
    [self updateCursor3D];
  }
}

- (jint)getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:(GeogebraCommonEuclidianEventPointerEventTypeEnum *)type {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:type];
}

- (void)setHits3DWithGeogebraCommonAwtGPoint:(GeogebraCommonAwtGPoint *)p {
  if (![((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) useLogicalPicking]) {
    [renderer_ setHitsWithGeogebraCommonAwtGPoint:p withInt:0];
  }
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *)getAxisDrawableWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(axisDrawable_), i);
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *)getPlaneDrawable {
  return xOyPlaneDrawable_;
}

- (void)setHitsWithGeogebraCommonGeogebra3DEuclidian3DHits3D:(GeogebraCommonGeogebra3DEuclidian3DHits3D *)hits {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_hits_EuclidianView3D_(self, hits);
}

- (GeogebraCommonGeogebra3DEuclidian3DHits3D *)getHits3D {
  return hits_EuclidianView3D_;
}

- (GeogebraCommonEuclidianHits *)getHits {
  return [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits_EuclidianView3D_)) clone];
}

- (void)updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  [((GeogebraCommonGeogebra3DEuclidian3DHits3D *) nil_chk(hits_EuclidianView3D_)) init__];
  [hits_EuclidianView3D_ addWithId:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])];
  [self updateCursor3D];
}

- (void)setSelectionRectangleWithGeogebraCommonAwtGRectangle:(id<GeogebraCommonAwtGRectangle>)selectionRectangle {
}

- (void)setShowAxesRatioWithBoolean:(jboolean)b {
}

- (void)setShowMouseCoordsWithBoolean:(jboolean)b {
}

- (void)zoomWithDouble:(jdouble)px
            withDouble:(jdouble)py
            withDouble:(jdouble)zoomFactor
               withInt:(jint)steps
           withBoolean:(jboolean)storeUndo {
  [self setScaleWithDouble:[self getXscale] * zoomFactor];
  [self updateMatrix];
  [self setWaitForUpdate];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)getCursor3D {
  return cursor3D_;
}

- (void)setCursor3DTypeWithInt:(jint)v {
  cursor3DType_ = v;
}

- (jint)getCursor3DType {
  return cursor3DType_;
}

- (void)setIntersectionThicknessWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b {
  jint t1 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) getLineThickness];
  jint t2 = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) getLineThickness];
  if (t2 > t1) intersectionThickness_ = t2;
  else intersectionThickness_ = t1;
  intersectionThickness_ += 6;
}

- (jint)getIntersectionThickness {
  return intersectionThickness_;
}

- (void)setIntersectionPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_intersectionPoint_(self, point);
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getIntersectionPoint {
  return intersectionPoint_;
}

- (GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DLists *)getDrawList3D {
  return drawable3DLists_;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawLine3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewSegmentWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawSegment3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewRayWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawRay3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewVectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawVector3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPolygonWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolygon3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_(self, selectedPoints) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPyramidOrPrismWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                     withJavaUtilArrayList:(JavaUtilArrayList *)selectedPolygons
                                                                                   withInt:(jint)mode {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPolyhedron3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_withInt_(self, selectedPoints, selectedPolygons, mode) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewConicWithInt:(jint)mode
                                              withJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return nil;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewSphereWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawQuadric3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withInt_(self, selectedPoints, GeogebraCommonKernelKernelNDGeoQuadricNDConstants_QUADRIC_SPHERE) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewExtrusionWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPolygons
                                                                withJavaUtilArrayList:(JavaUtilArrayList *)selectedConics {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawExtrusion3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(self, selectedPolygons, selectedConics) autorelease];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewConifyWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPolygons
                                                             withJavaUtilArrayList:(JavaUtilArrayList *)selectedConics {
  return [new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawConify3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_withJavaUtilArrayList_withJavaUtilArrayList_(self, selectedPolygons, selectedConics) autorelease];
}

- (void)updatePreviewable {
  if ([self getCursor3DType] != GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE) {
    [((id<GeogebraCommonEuclidianPreviewable>) nil_chk([self getPreviewDrawable])) updatePreview];
  }
}

- (void)updatePreviewableForProcessMode {
  [self updatePreviewable];
}

- (void)updateCursor3DWithGeogebraCommonEuclidianHits:(GeogebraCommonEuclidianHits *)hits {
  if ([self hasMouse]) {
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) updateNewPointWithBoolean:YES withGeogebraCommonEuclidianHits:hits withBoolean:YES withBoolean:YES withBoolean:YES withBoolean:NO withBoolean:NO];
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateCursorOnXOYPlane(self);
    [self updateMatrixForCursor3D];
  }
}

- (void)updateCursorOnXOYPlane {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateCursorOnXOYPlane(self);
}

- (void)switchMoveCursor {
  if (GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_moveCursorIsVisible(self)) [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursorOnXOYPlane_)) switchMoveModeWithInt:[self getMode]];
}

- (jboolean)moveCursorIsVisible {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_moveCursorIsVisible(self);
}

- (void)updateCursor3D {
  if ([((GeogebraCommonEuclidianHits *) nil_chk([self getHits])) containsGeoPoint]) [self updateCursor3DWithGeogebraCommonEuclidianHits:[((GeogebraCommonEuclidianHits *) nil_chk([self getHits])) getTopHits]];
  else [self updateCursor3DWithGeogebraCommonEuclidianHits:[self getHits]];
}

- (void)updateMatrixForCursor3D {
  jdouble t;
  GeogebraCommonKernelMatrixCoords *v;
  GeogebraCommonKernelMatrixCoordMatrix *m;
  if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF) {
    switch ([self getCursor3DType]) {
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION:
      t = 1 / [self getScale];
      v = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getMoveNormalDirection];
      if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:[self getViewDirection]] > 0) v = [v mulWithDouble:-1];
      GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) getOrigin], v, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_);
      [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) mulAllButOriginWithDouble:t];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
      break;
      case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH:
      t = 1 / [self getScale];
      v = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getPath], [GeogebraCommonKernelGeosGeoElement class])))) getMainDirection])) normalized];
      if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(v)) dotproductWithGeogebraCommonKernelMatrixCoords:[self getViewDirection]] > 0) v = [v mulWithDouble:-1];
      GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) getOrigin], v, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_);
      [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) mulAllButOriginWithDouble:t];
      [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
      break;
    }
  }
  else switch ([self getCursor3DType]) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE:
    t = 1 / [self getScale];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VX_())) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VY_())) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VZ_())) mulWithDouble:t]];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION:
    t = 1 / [self getScale];
    v = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getMoveNormalDirection];
    GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) getOrigin], v, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_);
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) mulAllButOriginWithDouble:t];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) setDrawingMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH:
    t = 1 / [self getScale];
    v = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getPath], [GeogebraCommonKernelGeosGeoElement class])))) getMainDirection];
    GeogebraCommonKernelMatrixCoordMatrix4x4_completeOrthoWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(v, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_2_);
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_2_)) getVx])) normalized])) mulWithDouble:t]];
    t *= (10 + [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getPath], [GeogebraCommonKernelGeosGeoElement class])))) getLineThickness]);
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([tmpMatrix4x4_2_ getVy])) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([tmpMatrix4x4_2_ getVz])) mulWithDouble:t]];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT:
    t = [self getIntersectionThickness] / [self getScale];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VX_())) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VY_())) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VZ_())) mulWithDouble:t]];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY:
    t = JavaLangMath_maxWithDouble_withDouble_(1, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getPointSize] / 6.0 + 0.5) / [self getScale];
    if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) hasPath]) {
      v = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getPath], [GeogebraCommonKernelGeosGeoElement class])))) getMainDirection];
      GeogebraCommonKernelMatrixCoordMatrix4x4_completeOrthoWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_(v, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_);
      [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_2_)) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_)) getVy]];
      [tmpMatrix4x4_2_ setVyWithGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ getVz]];
      [tmpMatrix4x4_2_ setVzWithGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ getVx]];
      [tmpMatrix4x4_2_ setOriginWithGeogebraCommonKernelMatrixCoords:[tmpMatrix4x4_ getOrigin]];
    }
    else if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) hasRegion]) {
      v = [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getMoveNormalDirection];
      GeogebraCommonKernelMatrixCoordMatrix4x4_createOrthoToDirectionWithGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withInt_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoordMatrix4x4_([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getCoordsInD3], v, GeogebraCommonKernelMatrixCoordMatrix4x4_VZ, tmpCoords1_, tmpCoords2_, tmpMatrix4x4_2_);
    }
    else {
      GeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithGeogebraCommonKernelMatrixCoordMatrix4x4_(tmpMatrix4x4_2_);
    }
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVxWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_2_)) getVx])) normalized])) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVyWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([tmpMatrix4x4_2_ getVy])) mulWithDouble:t]];
    [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix])) setVzWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk([tmpMatrix4x4_2_ getVz])) mulWithDouble:t]];
    break;
  }
}

- (void)setPreviewWithGeogebraCommonEuclidianPreviewable:(id<GeogebraCommonEuclidianPreviewable>)previewDrawable {
  if (self->previewDrawable_EuclidianView3D_ == previewDrawable) {
    return;
  }
  if (self->previewDrawable_EuclidianView3D_ != nil) {
    [self->previewDrawable_EuclidianView3D_ disposePreview];
  }
  if (previewDrawable != nil && [previewDrawable isKindOfClass:[GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class]]) {
    if ([((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast(previewDrawable, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])) getGeoElement] != nil) [self addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:(GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *) check_class_cast(previewDrawable, [GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D class])];
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_previewDrawable_EuclidianView3D_(self, previewDrawable);
}

- (void)initPointDecorations {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initPointDecorations(self);
}

- (void)updatePointDecorationsWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:(GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *)point {
  if (point == nil) decorationVisible_ = NO;
  else {
    decorationVisible_ = YES;
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *) nil_chk(pointDecorations_)) setPointWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:point];
  }
}

- (void)drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  if (![self hasMouse]) return;
  if ([self getProjection] != GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) return;
  GeogebraCommonAwtGPoint *mouseLoc = [((GeogebraCommonEuclidianEuclidianController *) nil_chk(euclidianController_)) getMouseLoc];
  if (mouseLoc == nil) return;
  GeogebraCommonKernelMatrixCoords *v;
  if ([self getCursor3DType] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT) {
    v = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc))->x_ + [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) getLeft], -mouseLoc->y_ + [renderer1 getTop], 0, 1) autorelease];
  }
  else {
    GeogebraCommonKernelMatrixCoords *eye = [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) getPerspEye];
    jdouble z = [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(self))) mulWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getCoords]])) getZ] + 20;
    jdouble eyeSep = 0;
    if ([self getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
      eyeSep = [renderer1 getEyeSep];
    }
    jdouble x = ((GeogebraCommonAwtGPoint *) nil_chk(mouseLoc))->x_ + [renderer1 getLeft] + eyeSep;
    jdouble y = -mouseLoc->y_ + [renderer1 getTop];
    jdouble dz = [((GeogebraCommonKernelMatrixCoords *) nil_chk(eye)) getZ] - z;
    jdouble coeff = dz / [eye getZ];
    v = [new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(x * coeff - eyeSep, y * coeff, z, 1) autorelease];
  }
  [self drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1 withGeogebraCommonKernelMatrixCoords:v];
}

- (void)drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1
                                        withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoordMatrix4x4_IdentityWithGeogebraCommonKernelMatrixCoordMatrix4x4_(tmpMatrix4x4_3_);
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(tmpMatrix4x4_3_)) setOriginWithGeogebraCommonKernelMatrixCoords:v];
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) setMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:tmpMatrix4x4_3_];
  [renderer1 drawMouseCursor];
}

- (void)drawFreeCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_CROSS2D_()];
}

- (void)drawCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  if ([self hasMouse]) {
    if (GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_moveCursorIsVisible(self)) {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) setMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(cursorOnXOYPlane_)) getDrawingMatrix]];
      GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(self, [cursorOnXOYPlane_ getRealMoveMode]);
      [renderer1 drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_CUBE_()];
    }
    else if (![((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) mouseIsOverLabel] && [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([self getEuclidianController], [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) cursor3DVisibleForCurrentModeWithInt:[self getCursor3DType]]) {
      [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) setMatrixWithGeogebraCommonKernelMatrixCoordMatrix4x4:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getDrawingMatrix]];
      switch (cursor_) {
        case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT:
        switch ([self getCursor3DType]) {
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE:
          [self drawFreeCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY:
          GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getMoveMode]);
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE:
          break;
        }
        break;
        case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_HIT:
        switch ([self getCursor3DType]) {
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE:
          [renderer1 drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_CROSS2D_()];
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION:
          if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF) [renderer1 drawViewInFrontOf];
          else [renderer1 drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_CROSS2D_()];
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH:
          if ([((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_VIEW_IN_FRONT_OF) [renderer1 drawViewInFrontOf];
          else [renderer1 drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_CYLINDER_()];
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT:
          [renderer1 drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_DIAMOND_()];
          break;
          case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY:
          GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(self, [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getMoveMode]);
          break;
        }
        break;
      }
    }
  }
}

- (void)drawPointAlreadyWithInt:(jint)mode {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(self, mode);
}

- (void)setMoveCursor {
  cursor_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_MOVE;
}

- (void)setCursorWithInt:(jint)cursor {
  switch (cursor) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DRAG:
    [self setDragCursor];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_MOVE:
    [self setMoveCursor];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_HIT:
    [self setHitCursor];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT:
    default:
    [self setDefaultCursor];
    break;
  }
}

- (jint)getCursor {
  return cursor_;
}

- (void)setDefaultCursorWillBeHitCursor {
  defaultCursorWillBeHitCursor_ = YES;
}

- (void)setDragCursor {
  cursor_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DRAG;
}

- (jboolean)getShiftDown {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setDefaultCursor {
  if ([self getShiftDown]) return;
  if (defaultCursorWillBeHitCursor_) {
    defaultCursorWillBeHitCursor_ = NO;
    [self setHitCursor];
    return;
  }
  if ([self getProjection] == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    [self setTransparentCursor];
  }
  else {
    [self setDefault2DCursor];
  }
  cursor_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT;
}

- (void)setDefault2DCursor {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)setHitCursor {
  if ([self getShiftDown]) return;
  cursor_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_HIT;
}

- (void)getXMLWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb
                            withBoolean:(jboolean)asPreference {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"<euclidianView3D>\n"];
  [sb appendWithNSString:@"\t<coordSystem"];
  [sb appendWithNSString:@" xZero=\""];
  [sb appendWithDouble:[self getXZero]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" yZero=\""];
  [sb appendWithDouble:[self getYZero]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" zZero=\""];
  [sb appendWithDouble:[self getZZero]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" scale=\""];
  [sb appendWithDouble:[self getXscale]];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" xAngle=\""];
  [sb appendWithDouble:b_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@" zAngle=\""];
  [sb appendWithDouble:a_];
  [sb appendWithNSString:@"\""];
  [sb appendWithNSString:@"/>\n"];
  [sb appendWithNSString:@"\t<evSettings axes=\""];
  [sb appendWithBoolean:[self getShowAxisWithInt:0] || [self getShowAxisWithInt:1] || [self getShowAxisWithInt:2]];
  [sb appendWithNSString:@"\" grid=\""];
  [sb appendWithBoolean:[self getShowGrid]];
  [sb appendWithNSString:@"\" gridIsBold=\""];
  [sb appendWithBoolean:gridIsBold_];
  [sb appendWithNSString:@"\" pointCapturing=\""];
  [sb appendWithInt:[self getPointCapturingMode] > GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_XML_MAX ? GeogebraCommonPluginEuclidianStyleConstants_POINT_CAPTURING_DEFAULT : [self getPointCapturingMode]];
  [sb appendWithNSString:@"\" rightAngleStyle=\""];
  [sb appendWithInt:((GeogebraCommonMainApp *) nil_chk([self getApplication]))->rightAngleStyle_];
  [sb appendWithNSString:@"\" gridType=\""];
  [sb appendWithInt:[self getGridType]];
  [sb appendWithNSString:@"\"/>\n"];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) addAxisXMLWithInt:i withJavaLangStringBuilder:sb];
  }
  [sb appendWithNSString:@"\t<plate show=\""];
  [sb appendWithBoolean:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk([self getxOyPlane])) isPlateVisible]];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<bgColor r=\""];
  [sb appendWithInt:[((GeogebraCommonAwtGColor *) nil_chk(bgColor_)) getRed]];
  [sb appendWithNSString:@"\" g=\""];
  [sb appendWithInt:[bgColor_ getGreen]];
  [sb appendWithNSString:@"\" b=\""];
  [sb appendWithInt:[bgColor_ getBlue]];
  [sb appendWithNSString:@"\"/>\n"];
  if ([self getYAxisVertical]) {
    [sb appendWithNSString:@"\t<yAxisVertical val=\"true\"/>\n"];
  }
  if (![self getUseLight]) {
    [sb appendWithNSString:@"\t<light val=\"false\"/>\n"];
  }
  [sb appendWithNSString:@"\t<clipping use=\""];
  [sb appendWithBoolean:[self useClippingCube]];
  [sb appendWithNSString:@"\" show=\""];
  [sb appendWithBoolean:[self showClippingCube]];
  [sb appendWithNSString:@"\" size=\""];
  [sb appendWithInt:[self getClippingReduction]];
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"\t<projection type=\""];
  [sb appendWithInt:[self getProjection]];
  jint eyeDistance = J2ObjCFpToInt(projectionPerspectiveEyeDistance_);
  if (eyeDistance != GeogebraCommonMainSettingsEuclidianSettings3D_PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT) {
    [sb appendWithNSString:@"\" distance=\""];
    [sb appendWithInt:eyeDistance];
  }
  jint sep = J2ObjCFpToInt(eyeSep_);
  if (sep != GeogebraCommonMainSettingsEuclidianSettings3D_EYE_SEP_DEFAULT) {
    [sb appendWithNSString:@"\" separation=\""];
    [sb appendWithInt:sep];
  }
  if (projectionObliqueAngle_ != GeogebraCommonMainSettingsEuclidianSettings3D_PROJECTION_OBLIQUE_ANGLE_DEFAULT) {
    [sb appendWithNSString:@"\" obliqueAngle=\""];
    [sb appendWithDouble:projectionObliqueAngle_];
  }
  if (projectionObliqueFactor_ != GeogebraCommonMainSettingsEuclidianSettings3D_PROJECTION_OBLIQUE_FACTOR_DEFAULT) {
    [sb appendWithNSString:@"\" obliqueFactor=\""];
    [sb appendWithDouble:projectionObliqueFactor_];
  }
  [sb appendWithNSString:@"\"/>\n"];
  [sb appendWithNSString:@"</euclidianView3D>\n"];
}

- (void)toggleAxis {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) setShowAxesWithBoolean:![self axesAreAllVisible]];
}

- (jboolean)axesAreAllVisible {
  jboolean flag = YES;
  for (jint i = 0; i < 3; i++) flag = (flag && [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(nil_chk(axis_), i))) isEuclidianVisible]);
  return flag;
}

- (jboolean)getShowPlane {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(xOyPlane_)) isPlateVisible];
}

- (void)toggleGrid {
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) showGridWithBoolean:![self getShowGrid]];
}

- (GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *)getxOyPlane {
  return xOyPlane_;
}

- (jboolean)ownsWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  jboolean ret = geo == xOyPlane_;
  for (jint i = 0; (!ret) && (i < 3); i++) ret = (geo == IOSObjectArray_Get(nil_chk(axis_), i));
  return ret;
}

- (void)drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(xOyPlane_)) isPlateVisible]) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
}

- (void)drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
}

- (void)drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  for (jint i = 0; i < 3; i++) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
  if ([self showClippingCube]) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) drawOutlineWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
}

- (void)drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  for (jint i = 0; i < 3; i++) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
  if ([self showClippingCube]) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
  if (decorationVisible_) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *) nil_chk(pointDecorations_)) drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
}

- (void)drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer1)) pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:xOyPlaneDrawable_ withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_SURFACE()];
  for (jint i = 0; i < 3; i++) [renderer1 pickWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:IOSObjectArray_Get(nil_chk(axisDrawable_), i) withGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum:GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer_PickingTypeEnum_get_POINT_OR_CURVE()];
}

- (void)drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:(GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *)renderer1 {
  for (jint i = 0; i < 3; i++) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:renderer1];
}

- (void)setWaitForUpdateOwnDrawables {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setWaitForUpdateOwnDrawables(self);
}

- (void)resetOwnDrawables {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) setWaitForReset];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) setWaitForReset];
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *) nil_chk(pointDecorations_)) setWaitForReset];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) setWaitForReset];
}

- (void)resetAllDrawables {
  [self resetOwnDrawables];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) resetAllDrawables];
}

- (void)resetAllVisualStyles {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) setWaitForUpdateVisualStyle];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) setWaitForUpdateVisualStyle];
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations *) nil_chk(pointDecorations_)) setWaitForUpdateVisualStyle];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) resetAllVisualStyles];
}

- (GeogebraCommonKernelMatrixCoords *)getClippingVertexWithInt:(jint)i {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getVertexWithInt:i];
}

- (void)getMinIntervalOutsideClippingWithDoubleArray:(IOSDoubleArray *)minmax
                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  GeogebraCommonKernelMatrixCoords *p1, *p2;
  p1 = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getVertexWithInt:0];
  p2 = [clippingCubeDrawable_ getVertexWithInt:7];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, minmax, o, v, p1, p2);
  p1 = [clippingCubeDrawable_ getVertexWithInt:1];
  p2 = [clippingCubeDrawable_ getVertexWithInt:6];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, minmax, o, v, p1, p2);
  p1 = [clippingCubeDrawable_ getVertexWithInt:3];
  p2 = [clippingCubeDrawable_ getVertexWithInt:4];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, minmax, o, v, p1, p2);
  p1 = [clippingCubeDrawable_ getVertexWithInt:2];
  p2 = [clippingCubeDrawable_ getVertexWithInt:5];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, minmax, o, v, p1, p2);
}

- (void)intervalUnionOutsideWithDoubleArray:(IOSDoubleArray *)minmax
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p1
       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)p2 {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(self, minmax, o, v, p1, p2);
}

+ (void)intervalUnionWithDoubleArray:(IOSDoubleArray *)minmax
                          withDouble:(jdouble)v1
                          withDouble:(jdouble)v2 {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionWithDoubleArray_withDouble_withDouble_(minmax, v1, v2);
}

- (void)updateBounds {
  [((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DKernel3D *) check_class_cast(kernel_, [GeogebraCommonGeogebra3DKernel3DKernel3D class])))) setEuclidianView3DBoundsWithInt:evNo_ withDouble:[self getXmin] withDouble:[self getXmax] withDouble:[self getYmin] withDouble:[self getYmax] withDouble:[self getZmin] withDouble:[self getZmax] withDouble:[self getXscale] withDouble:[self getYscale] withDouble:[self getZscale]];
}

- (void)viewChangedOwnDrawables {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_viewChangedOwnDrawables(self);
}

- (void)updateOwnDrawablesNow {
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) update];
  }
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(xOyPlaneDrawable_)) update];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) update];
  [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast([self getEuclidianController], [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) updateOwnDrawablesNow];
}

- (NSString *)getAxisLabelWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(axesLabels_), i);
}

- (GeogebraCommonAwtGFont *)getAxisLabelFontWithInt:(jint)i {
  return [((GeogebraCommonAwtGFont *) nil_chk([self getFontLine])) deriveFontWithInt:IOSIntArray_Get(nil_chk(axesLabelsStyle_), i)];
}

- (NSString *)getAxisUnitLabelWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(axesUnitLabels_), i);
}

- (jboolean)getPiAxisUnitWithInt:(jint)i {
  return IOSBooleanArray_Get(nil_chk(piAxisUnit_), i);
}

- (void)setAxesLabelsWithNSStringArray:(IOSObjectArray *)axesLabels {
  GeogebraCommonEuclidianEuclidianView_set_axesLabels_(self, axesLabels);
  for (jint i = 0; i < 3; i++) {
    if (IOSObjectArray_Get(nil_chk(axesLabels), i) != nil && ((jint) [((NSString *) nil_chk(IOSObjectArray_Get(axesLabels, i))) length]) == 0) {
      IOSObjectArray_Set(axesLabels, i, nil);
    }
  }
}

- (void)setAxisLabelWithInt:(jint)axis
               withNSString:(NSString *)axisLabel {
  [super setAxisLabelWithInt:axis withNSString:axisLabel];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), axis))) setLabelWaitForUpdate];
  [self setWaitForUpdate];
}

- (void)setAxesUnitLabelsWithNSStringArray:(IOSObjectArray *)axesUnitLabels {
  [super setAxesUnitLabelsWithNSStringArray:axesUnitLabels];
  [self setAxesIntervalsWithDouble:[self getZscale] withInt:2];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) setLabelWaitForUpdate];
  }
  [self setWaitForUpdate];
}

- (jboolean)getShowAxisNumbersWithInt:(jint)i {
  return IOSBooleanArray_Get(nil_chk(showAxesNumbers_), i);
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewParallelLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                   withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return nil;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints
                                                                        withJavaUtilArrayList:(JavaUtilArrayList *)selectedLines {
  return nil;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPerpendicularBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return nil;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewAngleBisectorWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return nil;
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewPolyLineWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return nil;
}

- (jboolean)getPositiveAxisWithInt:(jint)i {
  return IOSBooleanArray_Get(nil_chk(positiveAxes_), i);
}

- (void)setPositiveAxisWithInt:(jint)axis
                   withBoolean:(jboolean)isPositiveAxis {
  [super setPositiveAxisWithInt:axis withBoolean:isPositiveAxis];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), axis))) setLabelWaitForUpdate];
  [self setWaitForUpdate];
}

- (jboolean)getShowGrid {
  return [((GeogebraCommonGeogebra3DKernel3DGeosGeoPlane3D *) nil_chk(xOyPlane_)) isGridVisible];
}

- (jboolean)showGridWithBoolean:(jboolean)selected {
  return [self setShowGridWithBoolean:selected];
}

- (void)setAutomaticGridDistanceWithBoolean:(jboolean)flag {
  [super setAutomaticGridDistanceWithBoolean:flag];
  [self setAxesIntervalsWithDouble:[self getZscale] withInt:2];
}

- (jint)getMode {
  return [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getMode];
}

- (void)setResizeXAxisCursor {
}

- (void)setResizeYAxisCursor {
}

- (void)setViewChangedByZoom {
  viewChangedByZoom__ = YES;
}

- (void)setViewChangedByTranslate {
  viewChangedByTranslate__ = YES;
}

- (void)setViewChangedByRotate {
  viewChangedByRotate__ = YES;
}

- (void)setViewChanged {
  viewChangedByZoom__ = YES;
  viewChangedByTranslate__ = YES;
  viewChangedByRotate__ = YES;
}

- (jboolean)viewChangedByZoom {
  return viewChangedByZoom__;
}

- (jboolean)viewChangedByTranslate {
  return viewChangedByTranslate__;
}

- (jboolean)viewChangedByRotate {
  return viewChangedByRotate__;
}

- (jboolean)viewChanged {
  return viewChangedByZoom__ || viewChangedByTranslate__ || viewChangedByRotate__;
}

- (void)resetViewChanged {
  viewChangedByZoom__ = NO;
  viewChangedByTranslate__ = NO;
  viewChangedByRotate__ = NO;
}

- (jint)getPointStyle {
  return pointStyle_;
}

- (NSString *)getFromPlaneString {
  return @"space";
}

- (NSString *)getTranslatedFromPlaneString {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) getPlainWithNSString:@"space"];
}

- (id<GeogebraCommonEuclidianPreviewable>)createPreviewAngleWithJavaUtilArrayList:(JavaUtilArrayList *)selectedPoints {
  return nil;
}

- (jboolean)isDefault2D {
  return NO;
}

- (jboolean)isEuclidianView3D {
  return YES;
}

- (jboolean)isMoveableWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveable];
}

- (JavaUtilArrayList *)getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:(GeogebraCommonKernelAlgosAlgoElement *)algoParent {
  return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk(algoParent)) getFreeInputPoints];
}

- (void)setProjectionWithInt:(jint)projection {
  switch (projection) {
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC:
    [self setProjectionOrthographic];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE:
    [self setProjectionPerspective];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES:
    [self setProjectionGlasses];
    break;
    case GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE:
    [self setProjectionOblique];
    break;
  }
}

- (void)setProjectionValuesWithInt:(jint)projection {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(self, projection);
}

- (jint)getProjection {
  return projection_;
}

- (void)setProjectionOrthographic {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) setWaitForDisableStencilLines];
  [renderer_ updateOrthoValues];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC);
  [self setDefault2DCursor];
}

- (void)setProjectionPerspective {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) setWaitForDisableStencilLines];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(self);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE);
  [self setDefault2DCursor];
}

- (void)setProjectionPerspectiveEyeDistanceWithDouble:(jdouble)distance {
  projectionPerspectiveEyeDistance_ = distance;
  if (projection_ != GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE && projection_ != GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) projection_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(self);
  if (projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES) {
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateGlassesValues];
  }
}

- (void)updateProjectionPerspectiveEyeDistance {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(self);
}

- (jdouble)getProjectionPerspectiveEyeDistance {
  return projectionPerspectiveEyeDistance_;
}

- (void)setProjectionGlasses {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(self);
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateGlassesValues];
  if ([self isPolarized]) {
    [renderer_ setWaitForSetStencilLines];
  }
  else {
    [renderer_ setWaitForDisableStencilLines];
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES);
  [self setTransparentCursor];
}

- (jboolean)isGlassesGrayScaled {
  return isGlassesGrayScaled__;
}

- (void)setGlassesGrayScaledWithBoolean:(jboolean)flag {
  if (isGlassesGrayScaled__ == flag) return;
  isGlassesGrayScaled__ = flag;
  [self resetAllDrawables];
}

- (jboolean)isPolarized {
  return NO;
}

- (jboolean)isStereoBuffered {
  return NO;
}

- (jdouble)getScreenZOffset {
  return 0;
}

- (jboolean)isGrayScaled {
  return projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && ![self isPolarized] && ![self isStereoBuffered] && [self isGlassesGrayScaled];
}

- (jboolean)isGlassesShutDownGreen {
  return isGlassesShutDownGreen__;
}

- (void)setGlassesShutDownGreenWithBoolean:(jboolean)flag {
  if (isGlassesShutDownGreen__ == flag) return;
  isGlassesShutDownGreen__ = flag;
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) setWaitForUpdateClearColor];
}

- (jboolean)isShutDownGreen {
  return projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES && [self isGlassesShutDownGreen];
}

- (void)setEyesWithDouble:(jdouble)sep
               withDouble:(jdouble)side
               withDouble:(jdouble)height {
  eyeSep_ = sep;
  eyesSide_ = side;
  eyesHeight_ = height;
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateGlassesValues];
}

- (jdouble)getEyeSep {
  return eyeSep_;
}

- (jdouble)getEyesHeight {
  return eyesHeight_;
}

- (jdouble)getEyesSide {
  return eyesSide_;
}

- (jboolean)isUnitAxesRatio {
  return NO;
}

- (jint)getViewID {
  return GeogebraCommonMainApp_VIEW_EUCLIDIAN3D;
}

- (void)setProjectionOblique {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateProjectionObliqueValues];
  [renderer_ setWaitForDisableStencilLines];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(self, GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE);
  [self setDefault2DCursor];
}

- (void)setProjectionObliqueAngleWithDouble:(jdouble)angle {
  projectionObliqueAngle_ = angle;
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateProjectionObliqueValues];
}

- (jdouble)getProjectionObliqueAngle {
  return projectionObliqueAngle_;
}

- (void)setProjectionObliqueFactorWithDouble:(jdouble)factor {
  projectionObliqueFactor_ = factor;
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) updateProjectionObliqueValues];
}

- (jdouble)getProjectionObliqueFactor {
  return projectionObliqueFactor_;
}

- (jboolean)getShowAxisWithInt:(jint)axisNo {
  return [((id<GeogebraCommonKernelKernelNDGeoAxisND>) nil_chk(IOSObjectArray_Get(nil_chk(self->axis_), axisNo))) isEuclidianVisible];
}

- (void)replaceBoundObjectWithGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)num
                          withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoNumeric {
}

- (GeogebraCommonAwtGColor *)getBackground {
  return bgColor_;
}

- (GeogebraCommonAwtGColor *)getBackgroundCommon {
  return [self getBackground];
}

- (void)addOneGeoToPick {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) addOneGeoToPick];
}

- (void)removeOneGeoToPick {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(renderer_)) removeOneGeoToPick];
}

- (jint)getFontSize {
  return [((GeogebraCommonMainApp *) nil_chk(app_)) getFontSize];
}

- (jint)getEuclidianViewNo {
  return GeogebraCommonMainApp_VIEW_EUCLIDIAN3D;
}

- (void)drawAxesWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g2 {
}

- (GeogebraCommonEuclidianDrawable *)newDrawButtonWithGeogebraCommonKernelGeosGeoButton:(GeogebraCommonKernelGeosGeoButton *)geo {
  return nil;
}

- (GeogebraCommonEuclidianDrawable *)newDrawTextFieldWithGeogebraCommonKernelGeosGeoTextField:(GeogebraCommonKernelGeosGeoTextField *)geo {
  return nil;
}

- (void)initCursor {
}

- (void)setShowAxisWithBoolean:(jboolean)show {
  [self setShowAxisWithInt:0 withBoolean:show withBoolean:NO];
  [self setShowAxisWithInt:1 withBoolean:show withBoolean:NO];
  [self setShowAxisWithInt:2 withBoolean:show withBoolean:YES];
}

- (void)setEraserCursor {
  GeogebraCommonUtilDebugLog_warnWithNSString_(@"unimplemented");
}

- (id<GeogebraCommonAwtGGraphics2D>)getGraphicsForPen {
  return nil;
}

- (void)doDrawPointsWithGeogebraCommonKernelGeosGeoImage:(GeogebraCommonKernelGeosGeoImage *)gi
                                        withJavaUtilList:(id<JavaUtilList>)penPoints2
                             withGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)penColor
                                                 withInt:(jint)penLineStyle
                                                 withInt:(jint)penSize {
}

- (void)drawResetIconWithGeogebraCommonAwtGGraphics2D:(id<GeogebraCommonAwtGGraphics2D>)g {
  GeogebraCommonMainApp_debugWithNSString_(@"unimplemented");
}

- (IOSDoubleArray *)getIntervalClippedWithDoubleArray:(IOSDoubleArray *)minmax
                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)o
                 withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)v {
  return [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(clippingCubeDrawable_)) getIntervalClippedWithDoubleArray:minmax withGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:v];
}

- (jboolean)isOnViewWithDoubleArray:(IOSDoubleArray *)coords {
  if (![super isOnViewWithDoubleArray:coords]) {
    return NO;
  }
  if (((IOSDoubleArray *) nil_chk(coords))->size_ < 3) {
    return (0 >= [self getZmin]) && (0 <= [self getZmax]);
  }
  return (IOSDoubleArray_Get(coords, 2) >= [self getZmin]) && (IOSDoubleArray_Get(coords, 2) <= [self getZmax]);
}

- (IOSDoubleArray *)getOnScreenDiffWithDoubleArray:(IOSDoubleArray *)p1
                                   withDoubleArray:(IOSDoubleArray *)p2 {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(p1))->size_];
  *IOSDoubleArray_GetRef(ret, 0) = (IOSDoubleArray_Get(nil_chk(p2), 0) - IOSDoubleArray_Get(p1, 0)) * [self getXscale];
  *IOSDoubleArray_GetRef(ret, 1) = (IOSDoubleArray_Get(p2, 1) - IOSDoubleArray_Get(p1, 1)) * [self getYscale];
  if (ret->size_ > 2) {
    *IOSDoubleArray_GetRef(ret, 2) = (IOSDoubleArray_Get(p2, 2) - IOSDoubleArray_Get(p1, 2)) * [self getZscale];
  }
  return ret;
}

- (jboolean)isSegmentOffViewWithDoubleArray:(IOSDoubleArray *)p1
                            withDoubleArray:(IOSDoubleArray *)p2 {
  if ([super isSegmentOffViewWithDoubleArray:p1 withDoubleArray:p2]) {
    return YES;
  }
  jdouble tolerance = GeogebraCommonEuclidianEuclidianStatic_CLIP_DISTANCE / [self getZscale];
  jdouble z1, z2;
  if (((IOSDoubleArray *) nil_chk(p1))->size_ < 3) {
    z1 = 0;
    z2 = 0;
  }
  else {
    z1 = IOSDoubleArray_Get(p1, 2);
    z2 = IOSDoubleArray_Get(nil_chk(p2), 2);
  }
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getZmin], z1, tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_([self getZmin], z2, tolerance)) return YES;
  if (GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(z1, [self getZmax], tolerance) && GeogebraCommonKernelKernel_isGreaterWithDouble_withDouble_withDouble_(z2, [self getZmax], tolerance)) return YES;
  return NO;
}

- (jboolean)drawPlayButtonInThisView {
  return NO;
}

- (jdouble)getNumbersDistance {
  return [self getAxisNumberingDistanceWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X];
}

- (jdouble)getAxisNumberingDistanceWithInt:(jint)i {
  return IOSDoubleArray_Get(nil_chk(axesNumberingDistances_), i);
}

- (jdouble)getGridDistancesWithInt:(jint)i {
  if (i == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_AXIS_Z) {
    return [self getAxisNumberingDistanceWithInt:GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_AXIS_Z];
  }
  return [super getGridDistancesWithInt:i];
}

- (id<GeogebraCommonUtilNumberFormatAdapter>)getAxisNumberFormatWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(axesNumberFormat_), i);
}

- (GeogebraCommonEuclidianEuclidianController *)getEuclidianController {
  return euclidianController_;
}

- (jint)getMousePickWidth {
  return 3;
}

- (id<GeogebraCommonKernelKernelNDGeoDirectionND>)getDirection {
  return [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getSpace];
}

- (jint)getDimension {
  return 3;
}

- (jboolean)isGridOrAxesShown {
  for (jint i = 0; i < 3; i++) {
    if ([self getShowAxisWithInt:i]) {
      return YES;
    }
  }
  return [self getShowGrid];
}

- (void)settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:(GeogebraCommonMainSettingsAbstractSettings *)settings {
  [((GeogebraCommonEuclidianEuclidianViewCompanion *) nil_chk(companion_)) settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:settings];
  GeogebraCommonMainSettingsEuclidianSettings3D *evs = (GeogebraCommonMainSettingsEuclidianSettings3D *) check_class_cast(settings, [GeogebraCommonMainSettingsEuclidianSettings3D class]);
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk(evs)) updateOriginWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:self];
  [evs updateRotXYWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D:self];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(self);
  [self setClippingReductionWithInt:[evs getClippingReduction]];
  [self setShowPlateWithBoolean:[evs getShowPlate]];
  [self setProjectionPerspectiveEyeDistanceWithDouble:[evs getProjectionPerspectiveEyeDistance]];
  eyeSep_ = [evs getEyeSep];
  projectionObliqueAngle_ = [evs getProjectionObliqueAngle];
  projectionObliqueFactor_ = [evs getProjectionObliqueFactor];
  [self setProjectionWithInt:[evs getProjection]];
  [self updateMatrix];
  [self setViewChanged];
  [self setWaitForUpdate];
  if (styleBar_ != nil) {
    [styleBar_ updateGUI];
  }
}

- (void)setViewShowAllObjectsWithBoolean:(jboolean)storeUndo {
  if (boundsMin_ == nil) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_boundsMin_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_boundsMax_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMin_)) setPositiveInfinity];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(boundsMax_)) setNegativeInfinity];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) enlargeBoundsWithGeogebraCommonKernelMatrixCoords:boundsMin_ withGeogebraCommonKernelMatrixCoords:boundsMax_];
  if (JavaLangDouble_isInfiniteWithDouble_([boundsMin_ getX])) {
    return;
  }
  jdouble dx0 = [self getXmax] - [self getXmin];
  jdouble dy0 = [self getYmax] - [self getYmin];
  jdouble dz0 = [self getZmax] - [self getZmin];
  jdouble dx = [boundsMax_ getX] - [boundsMin_ getX];
  jdouble dy = [boundsMax_ getY] - [boundsMin_ getY];
  jdouble dz = [boundsMax_ getZ] - [boundsMin_ getZ];
  jdouble scale_ = JavaLangDouble_POSITIVE_INFINITY;
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(dx)) {
    scale_ = dx0 / dx;
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(dy)) {
    jdouble v = dy0 / dy;
    if (scale_ > v) {
      scale_ = v;
    }
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(dz)) {
    jdouble v = dz0 / dz;
    if (scale_ > v) {
      scale_ = v;
    }
  }
  scale_ *= [self getScale];
  if (JavaLangDouble_isNaNWithDouble_(scale_) || GeogebraCommonKernelKernel_isZeroWithDouble_(scale_)) {
    scale_ = GeogebraCommonEuclidianEuclidianView_SCALE_STANDARD;
  }
  else {
    scale_ *= 0.94;
  }
  jdouble x = -([boundsMin_ getX] + [boundsMax_ getX]) / 2;
  jdouble y = -([boundsMin_ getY] + [boundsMax_ getY]) / 2;
  jdouble z = -([boundsMin_ getZ] + [boundsMax_ getZ]) / 2;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAnimatedCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_(self, x, y, z, scale_, 15);
}

- (void)setEuclidianViewNoWithInt:(jint)evNo {
  self->evNo_ = evNo;
}

- (void)disposePreview {
  if (self->previewDrawable_EuclidianView3D_ != nil) {
    [self->previewDrawable_EuclidianView3D_ disposePreview];
  }
}

- (void)updateDrawableFontSize {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(drawable3DLists_)) resetAllLabels];
  for (jint i = 0; i < 3; i++) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(axisDrawable_), i))) setWaitForUpdate];
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(axisDrawable_, i))) setLabelWaitForUpdate];
  }
  [self repaintView];
}

- (void)centerViewWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelMatrixCoords *p = [self getCoordsForViewWithGeogebraCommonKernelMatrixCoords:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point)) getInhomCoordsInD3]];
  [self setXZeroWithDouble:[((GeogebraCommonKernelMatrixCoords *) nil_chk(p)) getX]];
  [self setYZeroWithDouble:[p getY]];
  [self setZZeroWithDouble:[p getZ]];
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) updateOriginFromViewWithDouble:[self getXZero] withDouble:[self getYZero] withDouble:[self getZZero]];
  [self updateTranslationMatrix];
  [self updateUndoTranslationMatrix];
  [self setGlobalMatrices];
  [self setViewChangedByTranslate];
  [self setWaitForUpdate];
}

- (jdouble)getMaxBendSpeedSurface {
  return GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_BEND_SPEED_SURFACE_;
}

- (void)dealloc {
  RELEASE_(kernel3D_);
  RELEASE_(renderer_);
  RELEASE_(drawable3DLists_);
  RELEASE_(drawable3DListToBeAdded_);
  RELEASE_(drawable3DListToBeRemoved_);
  RELEASE_(geosToBeAdded_);
  RELEASE_(drawable3DMap_);
  RELEASE_(m_);
  RELEASE_(mInv_);
  RELEASE_(mInvTranspose_);
  RELEASE_(undoRotationMatrix_);
  RELEASE_(hits_EuclidianView3D_);
  RELEASE_(viewDirection_);
  RELEASE_(eyePosition_);
  RELEASE_(xOyPlane_);
  RELEASE_(axis_);
  RELEASE_(clippingCube_);
  RELEASE_(xOyPlaneDrawable_);
  RELEASE_(axisDrawable_);
  RELEASE_(clippingCubeDrawable_);
  RELEASE_(pointDecorations_);
  RELEASE_(previewDrawable_EuclidianView3D_);
  RELEASE_(cursor3D_);
  RELEASE_(cursorOnXOYPlane_);
  RELEASE_(scaleMatrix_);
  RELEASE_(undoScaleMatrix_);
  RELEASE_(translationMatrix_);
  RELEASE_(undoTranslationMatrix_);
  RELEASE_(rotationMatrix_);
  RELEASE_(rotationAndScaleMatrix_);
  RELEASE_(pickPoint_);
  RELEASE_(viewDirectionPersp_);
  RELEASE_(tmpCoordsLength3_);
  RELEASE_(intersectionPoint_);
  RELEASE_(tmpMatrix4x4_);
  RELEASE_(tmpMatrix4x4_2_);
  RELEASE_(tmpMatrix4x4_3_);
  RELEASE_(tmpCoords1_);
  RELEASE_(tmpCoords2_);
  RELEASE_(parameters_);
  RELEASE_(tempArrayList_EuclidianView3D_);
  RELEASE_(bgColor_);
  RELEASE_(boundsMin_);
  RELEASE_(boundsMax_);
  [super dealloc];
}

+ (void)initialize {
  if (self == [GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D class]) {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_BEND_SPEED_SURFACE_ = JavaLangMath_tanWithDouble_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_ANGLE_SPEED_SURFACE * GeogebraCommonKernelKernel_PI_180);
    J2OBJC_SET_INITIALIZED(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D)
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D:withGeogebraCommonMainSettingsEuclidianSettings:", "EuclidianView3D", NULL, 0x1, NULL, NULL },
    { "initAxesValues", NULL, "V", 0x4, NULL, NULL },
    { "getAxisTickStyleWithInt:", "getAxisTickStyle", "I", 0x1, NULL, NULL },
    { "createPanel", NULL, "V", 0x404, NULL, NULL },
    { "createRenderer", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer;", 0x404, NULL, NULL },
    { "start", NULL, "V", 0x2, NULL, NULL },
    { "initAxisAndPlane", NULL, "V", 0x1, NULL, NULL },
    { "getStickyPointList", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.geogebra3D.kernel3D.Kernel3D;", 0x1, NULL, NULL },
    { "getRenderer", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer;", 0x1, NULL, NULL },
    { "addWithGeogebraCommonKernelGeosGeoElement:", "add", "V", 0x1, NULL, NULL },
    { "addNowWithGeogebraCommonKernelGeosGeoElement:", "addNow", "V", 0x2, NULL, NULL },
    { "addToDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "addToDrawable3DLists", "V", 0x1, NULL, NULL },
    { "newDrawableWithGeogebraCommonKernelGeosGeoElement:", "newDrawable", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0x1, NULL, NULL },
    { "createDrawableWithGeogebraCommonKernelGeosGeoElement:", "createDrawable", "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3D;", 0x4, NULL, NULL },
    { "toSceneCoords3DWithGeogebraCommonKernelMatrixCoords:", "toSceneCoords3D", "V", 0x11, NULL, NULL },
    { "toScreenCoords3DWithGeogebraCommonKernelMatrixCoords:", "toScreenCoords3D", "V", 0x11, NULL, NULL },
    { "changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix:withGeogebraCommonKernelMatrixCoords:", "changeCoords", "V", 0x1a, NULL, NULL },
    { "getToSceneMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x11, NULL, NULL },
    { "getToSceneMatrixTranspose", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x11, NULL, NULL },
    { "getToScreenMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x11, NULL, NULL },
    { "getUndoRotationMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", 0x11, NULL, NULL },
    { "getYAxisVertical", NULL, "Z", 0x1, NULL, NULL },
    { "setYAxisVerticalWithBoolean:", "setYAxisVertical", "V", 0x1, NULL, NULL },
    { "getUseLight", NULL, "Z", 0x1, NULL, NULL },
    { "updateRotationMatrix", NULL, "V", 0x2, NULL, NULL },
    { "updateScaleMatrix", NULL, "V", 0x2, NULL, NULL },
    { "updateTranslationMatrix", NULL, "V", 0x4, NULL, NULL },
    { "updateRotationAndScaleMatrices", NULL, "V", 0x4, NULL, NULL },
    { "getRotationMatrix", NULL, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", 0x1, NULL, NULL },
    { "setGlobalMatrices", NULL, "V", 0x4, NULL, NULL },
    { "updateMatrix", NULL, "V", 0x1, NULL, NULL },
    { "updateUndoTranslationMatrix", NULL, "V", 0x4, NULL, NULL },
    { "updateEye", NULL, "V", 0x2, NULL, NULL },
    { "getViewDirection", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getEyePosition", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setRotXYinDegreesWithDouble:withDouble:", "setRotXYinDegrees", "V", 0x1, NULL, NULL },
    { "getSettings", NULL, "Lgeogebra.common.main.settings.EuclidianSettings3D;", 0x1, NULL, NULL },
    { "translateCoordSystemInPixelsWithInt:withInt:withInt:withInt:", "translateCoordSystemInPixels", "V", 0x11, NULL, NULL },
    { "pageUpDownTranslateCoordSystemWithInt:", "pageUpDownTranslateCoordSystem", "V", 0x11, NULL, NULL },
    { "setCoordSystemFromMouseMoveWithInt:withInt:withInt:", "setCoordSystemFromMouseMove", "V", 0x11, NULL, NULL },
    { "getXZero", NULL, "D", 0x1, NULL, NULL },
    { "getYZero", NULL, "D", 0x1, NULL, NULL },
    { "getZZero", NULL, "D", 0x1, NULL, NULL },
    { "setXZeroWithDouble:", "setXZero", "V", 0x1, NULL, NULL },
    { "setYZeroWithDouble:", "setYZero", "V", 0x1, NULL, NULL },
    { "setZZeroWithDouble:", "setZZero", "V", 0x1, NULL, NULL },
    { "setZeroFromXMLWithDouble:withDouble:withDouble:", "setZeroFromXML", "V", 0x1, NULL, NULL },
    { "getXRot", NULL, "D", 0x1, NULL, NULL },
    { "getZRot", NULL, "D", 0x1, NULL, NULL },
    { "getXmin", NULL, "D", 0x1, NULL, NULL },
    { "getXmax", NULL, "D", 0x1, NULL, NULL },
    { "getYmin", NULL, "D", 0x1, NULL, NULL },
    { "getYmax", NULL, "D", 0x1, NULL, NULL },
    { "getZmin", NULL, "D", 0x1, NULL, NULL },
    { "getZmax", NULL, "D", 0x1, NULL, NULL },
    { "getCenter", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getFrustumRadius", NULL, "D", 0x1, NULL, NULL },
    { "getXscale", NULL, "D", 0x1, NULL, NULL },
    { "getYscale", NULL, "D", 0x1, NULL, NULL },
    { "getZscale", NULL, "D", 0x1, NULL, NULL },
    { "getScaleWithInt:", "getScale", "D", 0x1, NULL, NULL },
    { "setAxesIntervalsWithDouble:withInt:", "setAxesIntervals", "V", 0x4, NULL, NULL },
    { "setScaleWithDouble:", "setScale", "V", 0x1, NULL, NULL },
    { "getScale", NULL, "D", 0x1, NULL, NULL },
    { "rememberOrigins", NULL, "V", 0x1, NULL, NULL },
    { "updateAnimation", NULL, "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "setWaitForUpdate", NULL, "V", 0x1, NULL, NULL },
    { "getPickPointWithGeogebraCommonAwtGPoint:", "getPickPoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setCenteredPositionWithGeogebraCommonAwtGPoint:withGeogebraCommonAwtGPoint:", "setCenteredPosition", "V", 0x1, NULL, NULL },
    { "setPickPointFromMouseWithGeogebraCommonAwtGPoint:", "setPickPointFromMouse", "V", 0x4, NULL, NULL },
    { "projectOnScreenWithGeogebraCommonKernelMatrixCoords:", "projectOnScreen", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getPickFromScenePointWithGeogebraCommonKernelMatrixCoords:withInt:withInt:", "getPickFromScenePoint", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "attachView", NULL, "V", 0x1, NULL, NULL },
    { "clearView", NULL, "V", 0x1, NULL, NULL },
    { "initViewWithBoolean:", "initView", "V", 0x4, NULL, NULL },
    { "removeWithGeogebraCommonKernelGeosGeoElement:", "remove", "V", 0x1, NULL, NULL },
    { "removeWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "remove", "V", 0x1, NULL, NULL },
    { "renameWithGeogebraCommonKernelGeosGeoElement:", "rename", "V", 0x1, NULL, NULL },
    { "repaintView", NULL, "V", 0x1, NULL, NULL },
    { "waitForNewRepaint", NULL, "V", 0x1, NULL, NULL },
    { "reset", NULL, "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonKernelGeosGeoElement:", "update", "V", 0x1, NULL, NULL },
    { "updateVisualStyleWithGeogebraCommonKernelGeosGeoElement:", "updateVisualStyle", "V", 0x1, NULL, NULL },
    { "updateAllDrawables", NULL, "V", 0x1, NULL, NULL },
    { "updateWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:", "update", "V", 0x1, NULL, NULL },
    { "getDrawableNDWithGeogebraCommonKernelGeosGeoElement:", "getDrawableND", "Lgeogebra.common.euclidian.DrawableND;", 0x1, NULL, NULL },
    { "getLabelHitWithGeogebraCommonAwtGPoint:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getLabelHit", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getPreviewDrawable", NULL, "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "getShowMouseCoords", NULL, "Z", 0x1, NULL, NULL },
    { "getShowXaxis", NULL, "Z", 0x1, NULL, NULL },
    { "getShowYaxis", NULL, "Z", 0x1, NULL, NULL },
    { "setShowAxisWithInt:withBoolean:withBoolean:", "setShowAxis", "Z", 0x1, NULL, NULL },
    { "setShowAxesWithBoolean:withBoolean:", "setShowAxes", "Z", 0x1, NULL, NULL },
    { "setShowPlaneWithBoolean:", "setShowPlane", "V", 0x1, NULL, NULL },
    { "setShowPlateWithBoolean:", "setShowPlate", "V", 0x1, NULL, NULL },
    { "setShowGridWithBoolean:", "setShowGrid", "Z", 0x1, NULL, NULL },
    { "getViewHeight", NULL, "I", 0x1, NULL, NULL },
    { "getViewWidth", NULL, "I", 0x1, NULL, NULL },
    { "hitAnimationButtonWithInt:withInt:", "hitAnimationButton", "Z", 0x1, NULL, NULL },
    { "resetMode", NULL, "V", 0x1, NULL, NULL },
    { "isAnimated", NULL, "Z", 0x1, NULL, NULL },
    { "isRotAnimated", NULL, "Z", 0x1, NULL, NULL },
    { "isRotAnimatedContinue", NULL, "Z", 0x1, NULL, NULL },
    { "isInsideWithGeogebraCommonKernelMatrixCoords:", "isInside", "Z", 0x1, NULL, NULL },
    { "useClippingCube", NULL, "Z", 0x1, NULL, NULL },
    { "setUseClippingCubeWithBoolean:", "setUseClippingCube", "V", 0x1, NULL, NULL },
    { "updateUseClippingCube", NULL, "V", 0x2, NULL, NULL },
    { "showClippingCube", NULL, "Z", 0x1, NULL, NULL },
    { "setShowClippingCubeWithBoolean:", "setShowClippingCube", "V", 0x1, NULL, NULL },
    { "toggleShowAndUseClippingCube", NULL, "V", 0x1, NULL, NULL },
    { "setClippingReductionWithInt:", "setClippingReduction", "V", 0x1, NULL, NULL },
    { "getClippingReduction", NULL, "I", 0x1, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:", "setAnimatedCoordSystem", "V", 0x2, NULL, NULL },
    { "setAnimatedCoordSystemWithDouble:withDouble:withDouble:withDouble:withInt:withBoolean:", "setAnimatedCoordSystem", "V", 0x1, NULL, NULL },
    { "setRotContinueAnimationWithLong:withDouble:", "setRotContinueAnimation", "V", 0x1, NULL, NULL },
    { "setRotAnimationWithGeogebraCommonKernelMatrixCoords:", "setRotAnimation", "V", 0x1, NULL, NULL },
    { "setClosestRotAnimationWithGeogebraCommonKernelMatrixCoords:", "setClosestRotAnimation", "V", 0x1, NULL, NULL },
    { "setRotAnimationWithDouble:withDouble:withBoolean:", "setRotAnimation", "V", 0x1, NULL, NULL },
    { "stopRotAnimation", NULL, "V", 0x1, NULL, NULL },
    { "animate", NULL, "V", 0x2, NULL, NULL },
    { "setHitsWithGeogebraCommonAwtGPoint:withGeogebraCommonEuclidianEventPointerEventTypeEnum:", "setHits", "V", 0x1, NULL, NULL },
    { "getCapturingThresholdWithGeogebraCommonEuclidianEventPointerEventTypeEnum:", "getCapturingThreshold", "I", 0x1, NULL, NULL },
    { "setHits3DWithGeogebraCommonAwtGPoint:", "setHits3D", "V", 0x1, NULL, NULL },
    { "getAxisDrawableWithInt:", "getAxisDrawable", "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", 0x1, NULL, NULL },
    { "getPlaneDrawable", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawPlane3D;", 0x1, NULL, NULL },
    { "setHitsWithGeogebraCommonGeogebra3DEuclidian3DHits3D:", "setHits", "V", 0x1, NULL, NULL },
    { "getHits3D", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.Hits3D;", 0x1, NULL, NULL },
    { "getHits", NULL, "Lgeogebra.common.euclidian.Hits;", 0x1, NULL, NULL },
    { "updateCursorWithGeogebraCommonKernelKernelNDGeoPointND:", "updateCursor", "V", 0x1, NULL, NULL },
    { "setSelectionRectangleWithGeogebraCommonAwtGRectangle:", "setSelectionRectangle", "V", 0x1, NULL, NULL },
    { "setShowAxesRatioWithBoolean:", "setShowAxesRatio", "V", 0x1, NULL, NULL },
    { "setShowMouseCoordsWithBoolean:", "setShowMouseCoords", "V", 0x1, NULL, NULL },
    { "zoomWithDouble:withDouble:withDouble:withInt:withBoolean:", "zoom", "V", 0x1, NULL, NULL },
    { "getCursor3D", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", 0x1, NULL, NULL },
    { "setCursor3DTypeWithInt:", "setCursor3DType", "V", 0x1, NULL, NULL },
    { "getCursor3DType", NULL, "I", 0x1, NULL, NULL },
    { "setIntersectionThicknessWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "setIntersectionThickness", "V", 0x1, NULL, NULL },
    { "getIntersectionThickness", NULL, "I", 0x1, NULL, NULL },
    { "setIntersectionPointWithGeogebraCommonKernelKernelNDGeoPointND:", "setIntersectionPoint", "V", 0x1, NULL, NULL },
    { "getIntersectionPoint", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getDrawList3D", NULL, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DLists;", 0x1, NULL, NULL },
    { "createPreviewLineWithJavaUtilArrayList:", "createPreviewLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewSegmentWithJavaUtilArrayList:", "createPreviewSegment", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewRayWithJavaUtilArrayList:", "createPreviewRay", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewVectorWithJavaUtilArrayList:", "createPreviewVector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolygonWithJavaUtilArrayList:", "createPreviewPolygon", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPyramidOrPrismWithJavaUtilArrayList:withJavaUtilArrayList:withInt:", "createPreviewPyramidOrPrism", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewConicWithInt:withJavaUtilArrayList:", "createPreviewConic", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewSphereWithJavaUtilArrayList:", "createPreviewSphere", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewExtrusionWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewExtrusion", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewConifyWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewConify", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "updatePreviewable", NULL, "V", 0x1, NULL, NULL },
    { "updatePreviewableForProcessMode", NULL, "V", 0x1, NULL, NULL },
    { "updateCursor3DWithGeogebraCommonEuclidianHits:", "updateCursor3D", "V", 0x1, NULL, NULL },
    { "updateCursorOnXOYPlane", NULL, "V", 0x2, NULL, NULL },
    { "switchMoveCursor", NULL, "V", 0x1, NULL, NULL },
    { "moveCursorIsVisible", NULL, "Z", 0x2, NULL, NULL },
    { "updateCursor3D", NULL, "V", 0x1, NULL, NULL },
    { "updateMatrixForCursor3D", NULL, "V", 0x1, NULL, NULL },
    { "setPreviewWithGeogebraCommonEuclidianPreviewable:", "setPreview", "V", 0x1, NULL, NULL },
    { "initPointDecorations", NULL, "V", 0x2, NULL, NULL },
    { "updatePointDecorationsWithGeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D:", "updatePointDecorations", "V", 0x1, NULL, NULL },
    { "drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawMouseCursor", "V", 0x1, NULL, NULL },
    { "drawMouseCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:withGeogebraCommonKernelMatrixCoords:", "drawMouseCursor", "V", 0x4, NULL, NULL },
    { "drawFreeCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawFreeCursor", "V", 0x4, NULL, NULL },
    { "drawCursorWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawCursor", "V", 0x1, NULL, NULL },
    { "drawPointAlreadyWithInt:", "drawPointAlready", "V", 0x2, NULL, NULL },
    { "setMoveCursor", NULL, "V", 0x1, NULL, NULL },
    { "setCursorWithInt:", "setCursor", "V", 0x1, NULL, NULL },
    { "getCursor", NULL, "I", 0x1, NULL, NULL },
    { "setDefaultCursorWillBeHitCursor", NULL, "V", 0x1, NULL, NULL },
    { "setDragCursor", NULL, "V", 0x1, NULL, NULL },
    { "getShiftDown", NULL, "Z", 0x404, NULL, NULL },
    { "setDefaultCursor", NULL, "V", 0x1, NULL, NULL },
    { "setDefault2DCursor", NULL, "V", 0x404, NULL, NULL },
    { "setHitCursor", NULL, "V", 0x1, NULL, NULL },
    { "getXMLWithJavaLangStringBuilder:withBoolean:", "getXML", "V", 0x1, NULL, NULL },
    { "toggleAxis", NULL, "V", 0x1, NULL, NULL },
    { "axesAreAllVisible", NULL, "Z", 0x1, NULL, NULL },
    { "getShowPlane", NULL, "Z", 0x1, NULL, NULL },
    { "toggleGrid", NULL, "V", 0x1, NULL, NULL },
    { "getxOyPlane", NULL, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", 0x1, NULL, NULL },
    { "ownsWithGeogebraCommonKernelGeosGeoElement:", "owns", "Z", 0x1, NULL, NULL },
    { "drawTranspWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawTransp", "V", 0x1, NULL, NULL },
    { "drawHidingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHiding", "V", 0x1, NULL, NULL },
    { "drawWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "draw", "V", 0x1, NULL, NULL },
    { "drawHiddenWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawHidden", "V", 0x1, NULL, NULL },
    { "drawForPickingWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawForPicking", "V", 0x1, NULL, NULL },
    { "drawLabelWithGeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer:", "drawLabel", "V", 0x1, NULL, NULL },
    { "setWaitForUpdateOwnDrawables", NULL, "V", 0x2, NULL, NULL },
    { "resetOwnDrawables", NULL, "V", 0x1, NULL, NULL },
    { "resetAllDrawables", NULL, "V", 0x1, NULL, NULL },
    { "resetAllVisualStyles", NULL, "V", 0x1, NULL, NULL },
    { "getClippingVertexWithInt:", "getClippingVertex", "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "getMinIntervalOutsideClippingWithDoubleArray:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getMinIntervalOutsideClipping", "V", 0x1, NULL, NULL },
    { "intervalUnionOutsideWithDoubleArray:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "intervalUnionOutside", "V", 0x2, NULL, NULL },
    { "intervalUnionWithDoubleArray:withDouble:withDouble:", "intervalUnion", "V", 0xa, NULL, NULL },
    { "updateBounds", NULL, "V", 0x1, NULL, NULL },
    { "viewChangedOwnDrawables", NULL, "V", 0x2, NULL, NULL },
    { "updateOwnDrawablesNow", NULL, "V", 0x1, NULL, NULL },
    { "getAxisLabelWithInt:", "getAxisLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAxisLabelFontWithInt:", "getAxisLabelFont", "Lgeogebra.common.awt.GFont;", 0x1, NULL, NULL },
    { "getAxisUnitLabelWithInt:", "getAxisUnitLabel", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getPiAxisUnitWithInt:", "getPiAxisUnit", "Z", 0x1, NULL, NULL },
    { "setAxesLabelsWithNSStringArray:", "setAxesLabels", "V", 0x1, NULL, NULL },
    { "setAxisLabelWithInt:withNSString:", "setAxisLabel", "V", 0x1, NULL, NULL },
    { "setAxesUnitLabelsWithNSStringArray:", "setAxesUnitLabels", "V", 0x1, NULL, NULL },
    { "getShowAxisNumbersWithInt:", "getShowAxisNumbers", "Z", 0x1, NULL, NULL },
    { "createPreviewParallelLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewParallelLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularLineWithJavaUtilArrayList:withJavaUtilArrayList:", "createPreviewPerpendicularLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPerpendicularBisectorWithJavaUtilArrayList:", "createPreviewPerpendicularBisector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewAngleBisectorWithJavaUtilArrayList:", "createPreviewAngleBisector", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "createPreviewPolyLineWithJavaUtilArrayList:", "createPreviewPolyLine", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "getPositiveAxisWithInt:", "getPositiveAxis", "Z", 0x1, NULL, NULL },
    { "setPositiveAxisWithInt:withBoolean:", "setPositiveAxis", "V", 0x1, NULL, NULL },
    { "getShowGrid", NULL, "Z", 0x1, NULL, NULL },
    { "showGridWithBoolean:", "showGrid", "Z", 0x1, NULL, NULL },
    { "setAutomaticGridDistanceWithBoolean:", "setAutomaticGridDistance", "V", 0x1, NULL, NULL },
    { "getMode", NULL, "I", 0x1, NULL, NULL },
    { "setResizeXAxisCursor", NULL, "V", 0x1, NULL, NULL },
    { "setResizeYAxisCursor", NULL, "V", 0x1, NULL, NULL },
    { "setViewChangedByZoom", NULL, "V", 0x4, NULL, NULL },
    { "setViewChangedByTranslate", NULL, "V", 0x4, NULL, NULL },
    { "setViewChangedByRotate", NULL, "V", 0x4, NULL, NULL },
    { "setViewChanged", NULL, "V", 0x1, NULL, NULL },
    { "viewChangedByZoom", NULL, "Z", 0x1, NULL, NULL },
    { "viewChangedByTranslate", NULL, "Z", 0x1, NULL, NULL },
    { "viewChangedByRotate", NULL, "Z", 0x1, NULL, NULL },
    { "viewChanged", NULL, "Z", 0x1, NULL, NULL },
    { "resetViewChanged", NULL, "V", 0x1, NULL, NULL },
    { "getPointStyle", NULL, "I", 0x11, NULL, NULL },
    { "getFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getTranslatedFromPlaneString", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "createPreviewAngleWithJavaUtilArrayList:", "createPreviewAngle", "Lgeogebra.common.euclidian.Previewable;", 0x1, NULL, NULL },
    { "isDefault2D", NULL, "Z", 0x1, NULL, NULL },
    { "isEuclidianView3D", NULL, "Z", 0x1, NULL, NULL },
    { "isMoveableWithGeogebraCommonKernelGeosGeoElement:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "getFreeInputPointsWithGeogebraCommonKernelAlgosAlgoElement:", "getFreeInputPoints", "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setProjectionWithInt:", "setProjection", "V", 0x1, NULL, NULL },
    { "setProjectionValuesWithInt:", "setProjectionValues", "V", 0x2, NULL, NULL },
    { "getProjection", NULL, "I", 0x1, NULL, NULL },
    { "setProjectionOrthographic", NULL, "V", 0x1, NULL, NULL },
    { "setProjectionPerspective", NULL, "V", 0x1, NULL, NULL },
    { "setProjectionPerspectiveEyeDistanceWithDouble:", "setProjectionPerspectiveEyeDistance", "V", 0x1, NULL, NULL },
    { "updateProjectionPerspectiveEyeDistance", NULL, "V", 0x12, NULL, NULL },
    { "getProjectionPerspectiveEyeDistance", NULL, "D", 0x1, NULL, NULL },
    { "setProjectionGlasses", NULL, "V", 0x1, NULL, NULL },
    { "isGlassesGrayScaled", NULL, "Z", 0x1, NULL, NULL },
    { "setGlassesGrayScaledWithBoolean:", "setGlassesGrayScaled", "V", 0x1, NULL, NULL },
    { "isPolarized", NULL, "Z", 0x1, NULL, NULL },
    { "isStereoBuffered", NULL, "Z", 0x1, NULL, NULL },
    { "getScreenZOffset", NULL, "D", 0x1, NULL, NULL },
    { "isGrayScaled", NULL, "Z", 0x1, NULL, NULL },
    { "isGlassesShutDownGreen", NULL, "Z", 0x1, NULL, NULL },
    { "setGlassesShutDownGreenWithBoolean:", "setGlassesShutDownGreen", "V", 0x1, NULL, NULL },
    { "isShutDownGreen", NULL, "Z", 0x1, NULL, NULL },
    { "setEyesWithDouble:withDouble:withDouble:", "setEyes", "V", 0x1, NULL, NULL },
    { "getEyeSep", NULL, "D", 0x1, NULL, NULL },
    { "getEyesHeight", NULL, "D", 0x1, NULL, NULL },
    { "getEyesSide", NULL, "D", 0x1, NULL, NULL },
    { "isUnitAxesRatio", NULL, "Z", 0x1, NULL, NULL },
    { "getViewID", NULL, "I", 0x1, NULL, NULL },
    { "setProjectionOblique", NULL, "V", 0x1, NULL, NULL },
    { "setProjectionObliqueAngleWithDouble:", "setProjectionObliqueAngle", "V", 0x1, NULL, NULL },
    { "getProjectionObliqueAngle", NULL, "D", 0x1, NULL, NULL },
    { "setProjectionObliqueFactorWithDouble:", "setProjectionObliqueFactor", "V", 0x1, NULL, NULL },
    { "getProjectionObliqueFactor", NULL, "D", 0x1, NULL, NULL },
    { "getShowAxisWithInt:", "getShowAxis", "Z", 0x1, NULL, NULL },
    { "replaceBoundObjectWithGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "replaceBoundObject", "V", 0x1, NULL, NULL },
    { "getBackground", NULL, "Lgeogebra.common.awt.GColor;", 0x1, NULL, NULL },
    { "getBackgroundCommon", NULL, "Lgeogebra.common.awt.GColor;", 0x11, NULL, NULL },
    { "addOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "removeOneGeoToPick", NULL, "V", 0x1, NULL, NULL },
    { "getFontSize", NULL, "I", 0x1, NULL, NULL },
    { "getEuclidianViewNo", NULL, "I", 0x1, NULL, NULL },
    { "drawAxesWithGeogebraCommonAwtGGraphics2D:", "drawAxes", "V", 0x4, NULL, NULL },
    { "newDrawButtonWithGeogebraCommonKernelGeosGeoButton:", "newDrawButton", "Lgeogebra.common.euclidian.Drawable;", 0x1, NULL, NULL },
    { "newDrawTextFieldWithGeogebraCommonKernelGeosGeoTextField:", "newDrawTextField", "Lgeogebra.common.euclidian.Drawable;", 0x1, NULL, NULL },
    { "initCursor", NULL, "V", 0x4, NULL, NULL },
    { "setShowAxisWithBoolean:", "setShowAxis", "V", 0x1, NULL, NULL },
    { "setEraserCursor", NULL, "V", 0x1, NULL, NULL },
    { "getGraphicsForPen", NULL, "Lgeogebra.common.awt.GGraphics2D;", 0x1, NULL, NULL },
    { "doDrawPointsWithGeogebraCommonKernelGeosGeoImage:withJavaUtilList:withGeogebraCommonAwtGColor:withInt:withInt:", "doDrawPoints", "V", 0x4, NULL, NULL },
    { "drawResetIconWithGeogebraCommonAwtGGraphics2D:", "drawResetIcon", "V", 0x4, NULL, NULL },
    { "getIntervalClippedWithDoubleArray:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getIntervalClipped", "[D", 0x1, NULL, NULL },
    { "isOnViewWithDoubleArray:", "isOnView", "Z", 0x1, NULL, NULL },
    { "getOnScreenDiffWithDoubleArray:withDoubleArray:", "getOnScreenDiff", "[D", 0x1, NULL, NULL },
    { "isSegmentOffViewWithDoubleArray:withDoubleArray:", "isSegmentOffView", "Z", 0x1, NULL, NULL },
    { "drawPlayButtonInThisView", NULL, "Z", 0x4, NULL, NULL },
    { "getNumbersDistance", NULL, "D", 0x1, NULL, NULL },
    { "getAxisNumberingDistanceWithInt:", "getAxisNumberingDistance", "D", 0x1, NULL, NULL },
    { "getGridDistancesWithInt:", "getGridDistances", "D", 0x1, NULL, NULL },
    { "getAxisNumberFormatWithInt:", "getAxisNumberFormat", "Lgeogebra.common.util.NumberFormatAdapter;", 0x1, NULL, NULL },
    { "getEuclidianController", NULL, "Lgeogebra.common.euclidian.EuclidianController;", 0x1, NULL, NULL },
    { "getMousePickWidth", NULL, "I", 0x1, NULL, NULL },
    { "getDirection", NULL, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", 0x1, NULL, NULL },
    { "getDimension", NULL, "I", 0x1, NULL, NULL },
    { "isGridOrAxesShown", NULL, "Z", 0x11, NULL, NULL },
    { "settingsChangedWithGeogebraCommonMainSettingsAbstractSettings:", "settingsChanged", "V", 0x1, NULL, NULL },
    { "setViewShowAllObjectsWithBoolean:", "setViewShowAllObjects", "V", 0x11, NULL, NULL },
    { "setEuclidianViewNoWithInt:", "setEuclidianViewNo", "V", 0x1, NULL, NULL },
    { "disposePreview", NULL, "V", 0x1, NULL, NULL },
    { "updateDrawableFontSize", NULL, "V", 0x4, NULL, NULL },
    { "centerViewWithGeogebraCommonKernelKernelNDGeoPointND:", "centerView", "V", 0x1, NULL, NULL },
    { "getMaxBendSpeedSurface", NULL, "D", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel3D_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.Kernel3D;", NULL, NULL,  },
    { "renderer_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.openGL.Renderer;", NULL, NULL,  },
    { "automaticGridDistance_EuclidianView3D_", "automaticGridDistance", 0x4, "Z", NULL, NULL,  },
    { "DEFAULT_GRID_DIST_FACTOR_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_DEFAULT_GRID_DIST_FACTOR },
    { "automaticGridDistanceFactor_", NULL, 0x9, "D", &GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_automaticGridDistanceFactor_, NULL,  },
    { "XZERO_SCENE_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_XZERO_SCENE_STANDARD },
    { "YZERO_SCENE_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_YZERO_SCENE_STANDARD },
    { "ZZERO_SCENE_STANDARD_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ZZERO_SCENE_STANDARD },
    { "XZero_", NULL, 0x4, "D", NULL, NULL,  },
    { "YZero_", NULL, 0x4, "D", NULL, NULL,  },
    { "ZZero_", NULL, 0x4, "D", NULL, NULL,  },
    { "XZeroOld_", NULL, 0x4, "D", NULL, NULL,  },
    { "YZeroOld_", NULL, 0x4, "D", NULL, NULL,  },
    { "ZZeroOld_", NULL, 0x4, "D", NULL, NULL,  },
    { "waitForUpdate_", NULL, 0x2, "Z", NULL, NULL,  },
    { "drawable3DLists_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.Drawable3DListsForView;", NULL, NULL,  },
    { "drawable3DListToBeAdded_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;",  },
    { "drawable3DListToBeRemoved_", NULL, 0x2, "Ljava.util.LinkedList;", NULL, "Ljava/util/LinkedList<Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;",  },
    { "geosToBeAdded_", NULL, 0x2, "Ljava.util.TreeSet;", NULL, "Ljava/util/TreeSet<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "drawable3DMap_", NULL, 0x2, "Ljava.util.TreeMap;", NULL, "Ljava/util/TreeMap<Lgeogebra/common/kernel/geos/GeoElement;Lgeogebra/common/geogebra3D/euclidian3D/draw/Drawable3D;>;",  },
    { "m_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "mInv_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "mInvTranspose_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "undoRotationMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "ANGLE_ROT_OZ_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ANGLE_ROT_OZ },
    { "ANGLE_ROT_XOY_", NULL, 0x19, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ANGLE_ROT_XOY },
    { "a_", NULL, 0x2, "D", NULL, NULL,  },
    { "b_", NULL, 0x2, "D", NULL, NULL,  },
    { "aOld_", NULL, 0x4, "D", NULL, NULL,  },
    { "bOld_", NULL, 0x4, "D", NULL, NULL,  },
    { "aNew_", NULL, 0x2, "D", NULL, NULL,  },
    { "bNew_", NULL, 0x2, "D", NULL, NULL,  },
    { "hits_EuclidianView3D_", "hits", 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.Hits3D;", NULL, NULL,  },
    { "viewDirection_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "eyePosition_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "xOyPlane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPlane3D;", NULL, NULL,  },
    { "axis_", NULL, 0x2, "[Lgeogebra.common.kernel.kernelND.GeoAxisND;", NULL, NULL,  },
    { "clippingCube_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoClippingCube3D;", NULL, NULL,  },
    { "xOyPlaneDrawable_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawPlane3D;", NULL, NULL,  },
    { "axisDrawable_", NULL, 0x2, "[Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawAxis3D;", NULL, NULL,  },
    { "clippingCubeDrawable_", NULL, 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawClippingCube3D;", NULL, NULL,  },
    { "DRAWABLES_NB_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_DRAWABLES_NB },
    { "AXIS_Z_", NULL, 0x18, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_AXIS_Z },
    { "pointDecorations_", NULL, 0x2, "Lgeogebra.common.geogebra3D.euclidian3D.draw.DrawPointDecorations;", NULL, NULL,  },
    { "decorationVisible_", NULL, 0x2, "Z", NULL, NULL,  },
    { "previewDrawable_EuclidianView3D_", "previewDrawable", 0x2, "Lgeogebra.common.euclidian.Previewable;", NULL, NULL,  },
    { "cursor3D_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "cursorOnXOYPlane_", NULL, 0x2, "Lgeogebra.common.geogebra3D.kernel3D.geos.GeoPoint3D;", NULL, NULL,  },
    { "PREVIEW_POINT_NONE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE },
    { "PREVIEW_POINT_FREE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_FREE },
    { "PREVIEW_POINT_PATH_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_PATH },
    { "PREVIEW_POINT_REGION_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_REGION },
    { "PREVIEW_POINT_DEPENDENT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_DEPENDENT },
    { "PREVIEW_POINT_ALREADY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_ALREADY },
    { "cursor3DType_", NULL, 0x2, "I", NULL, NULL,  },
    { "CURSOR_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT },
    { "CURSOR_DRAG_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DRAG },
    { "CURSOR_MOVE_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_MOVE },
    { "CURSOR_HIT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_HIT },
    { "cursor_", NULL, 0x2, "I", NULL, NULL,  },
    { "animatedScale_", NULL, 0x2, "Z", NULL, NULL,  },
    { "animatedScaleStart_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleEnd_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleTimeFactor_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleTimeStart_", NULL, 0x2, "J", NULL, NULL,  },
    { "animatedScaleStartX_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleStartY_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleStartZ_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleEndX_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleEndY_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedScaleEndZ_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedContinueRot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "animatedRotSpeed_", NULL, 0x2, "D", NULL, NULL,  },
    { "animatedRotTimeStart_", NULL, 0x2, "J", NULL, NULL,  },
    { "animatedRot_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isFrozen_", NULL, 0x2, "Z", NULL, NULL,  },
    { "scaleMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "undoScaleMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "translationMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "undoTranslationMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "rotationMatrix_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "rotationAndScaleMatrix_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordMatrix;", NULL, NULL,  },
    { "pickPoint_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "viewDirectionPersp_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoordsLength3_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "intersectionThickness_", NULL, 0x2, "I", NULL, NULL,  },
    { "intersectionPoint_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "tmpMatrix4x4_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpMatrix4x4_2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpMatrix4x4_3_", NULL, 0x4, "Lgeogebra.common.kernel.Matrix.CoordMatrix4x4;", NULL, NULL,  },
    { "tmpCoords1_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "tmpCoords2_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "defaultCursorWillBeHitCursor_", NULL, 0x2, "Z", NULL, NULL,  },
    { "parameters_", NULL, 0x2, "[D", NULL, NULL,  },
    { "tempArrayList_EuclidianView3D_", "tempArrayList", 0x4, "Lgeogebra.common.geogebra3D.euclidian3D.Hits3D;", NULL, NULL,  },
    { "viewChangedByZoom__", "viewChangedByZoom", 0x2, "Z", NULL, NULL,  },
    { "viewChangedByTranslate__", "viewChangedByTranslate", 0x2, "Z", NULL, NULL,  },
    { "viewChangedByRotate__", "viewChangedByRotate", 0x2, "Z", NULL, NULL,  },
    { "pointStyle_", NULL, 0x2, "I", NULL, NULL,  },
    { "PROJECTION_ORTHOGRAPHIC_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC },
    { "PROJECTION_PERSPECTIVE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE },
    { "PROJECTION_GLASSES_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_GLASSES },
    { "PROJECTION_OBLIQUE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE },
    { "projection_", NULL, 0x2, "I", NULL, NULL,  },
    { "projectionPerspectiveEyeDistance_", NULL, 0x2, "D", NULL, NULL,  },
    { "PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT },
    { "isGlassesGrayScaled__", "isGlassesGrayScaled", 0x2, "Z", NULL, NULL,  },
    { "isGlassesShutDownGreen__", "isGlassesShutDownGreen", 0x2, "Z", NULL, NULL,  },
    { "eyeSep_", NULL, 0x2, "D", NULL, NULL,  },
    { "eyesHeight_", NULL, 0x2, "D", NULL, NULL,  },
    { "eyesSide_", NULL, 0x2, "D", NULL, NULL,  },
    { "projectionObliqueAngle_", NULL, 0x2, "D", NULL, NULL,  },
    { "projectionObliqueFactor_", NULL, 0x2, "D", NULL, NULL,  },
    { "bgColor_", NULL, 0x4, "Lgeogebra.common.awt.GColor;", NULL, NULL,  },
    { "boundsMin_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "boundsMax_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "MAX_ANGLE_SPEED_SURFACE_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_ANGLE_SPEED_SURFACE },
    { "MAX_BEND_SPEED_SURFACE_", NULL, 0x1a, "D", &GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_MAX_BEND_SPEED_SURFACE_, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D = { 2, "EuclidianView3D", "geogebra.common.geogebra3D.euclidian3D", NULL, 0x401, 308, methods, 118, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_withGeogebraCommonMainSettingsEuclidianSettings_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *ec, GeogebraCommonMainSettingsEuclidianSettings *settings) {
  GeogebraCommonEuclidianEuclidianView_initWithGeogebraCommonEuclidianEuclidianController_withInt_withGeogebraCommonMainSettingsEuclidianSettings_(self, ec, GeogebraCommonEuclidianEuclidianView_get_EVNO_3D_(), settings);
  self->automaticGridDistance_EuclidianView3D_ = YES;
  self->XZero_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_XZERO_SCENE_STANDARD;
  self->YZero_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_YZERO_SCENE_STANDARD;
  self->ZZero_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ZZERO_SCENE_STANDARD;
  self->XZeroOld_ = 0;
  self->YZeroOld_ = 0;
  self->ZZeroOld_ = 0;
  self->waitForUpdate_ = YES;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_drawable3DMap_(self, new_JavaUtilTreeMap_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_m_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_mInv_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_mInvTranspose_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_undoRotationMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  self->a_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ANGLE_ROT_OZ;
  self->b_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_ANGLE_ROT_XOY;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_hits_EuclidianView3D_(self, new_GeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_viewDirection_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VZ_())) copyVector]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_eyePosition_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->decorationVisible_ = NO;
  self->cursor3DType_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PREVIEW_POINT_NONE;
  self->cursor_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_DEFAULT;
  self->animatedScale_ = NO;
  self->animatedContinueRot_ = NO;
  self->animatedRot_ = NO;
  self->isFrozen_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_scaleMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_undoScaleMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_translationMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_undoTranslationMatrix_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_pickPoint_(self, new_GeogebraCommonKernelMatrixCoords_initWithDouble_withDouble_withDouble_withDouble_(0, 0, 0, 1));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_viewDirectionPersp_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_tmpCoordsLength3_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_tmpMatrix4x4_(self, new_GeogebraCommonKernelMatrixCoordMatrix4x4_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_tmpMatrix4x4_2_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_tmpMatrix4x4_3_(self, GeogebraCommonKernelMatrixCoordMatrix4x4_Identity());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_tmpCoords1_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_tmpCoords2_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  self->defaultCursorWillBeHitCursor_ = NO;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_parameters_(self, [IOSDoubleArray newArrayWithLength:2]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_tempArrayList_EuclidianView3D_(self, new_GeogebraCommonGeogebra3DEuclidian3DHits3D_init());
  self->viewChangedByZoom__ = YES;
  self->viewChangedByTranslate__ = YES;
  self->viewChangedByRotate__ = YES;
  self->projection_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC;
  self->projectionPerspectiveEyeDistance_ = GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_PERSPECTIVE_EYE_DISTANCE_DEFAULT;
  self->isGlassesGrayScaled__ = YES;
  self->isGlassesShutDownGreen__ = NO;
  self->eyeSep_ = 200;
  self->eyesHeight_ = 0;
  self->eyesSide_ = 0;
  self->projectionObliqueAngle_ = 30;
  self->projectionObliqueFactor_ = 0.5;
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_kernel3D_(self, (GeogebraCommonGeogebra3DKernel3DKernel3D *) check_class_cast([((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(ec)) getKernel], [GeogebraCommonGeogebra3DKernel3DKernel3D class]));
  [((GeogebraCommonEuclidianEuclidianController *) nil_chk(self->euclidianController_)) setViewWithGeogebraCommonEuclidianEuclidianView:self];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_start(self);
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_start(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_drawable3DLists_(self, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self));
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_drawable3DListToBeAdded_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_drawable3DListToBeRemoved_(self, new_JavaUtilLinkedList_init());
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_geosToBeAdded_(self, new_JavaUtilTreeSet_init());
  GeogebraCommonMainApp_debugWithNSString_(@"create gl renderer");
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_renderer_(self, [self createRenderer]);
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) setDrawable3DListsWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView:self->drawable3DLists_];
  [self createPanel];
  [self attachView];
  [self initAxisAndPlane];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_cursor3D_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonGeogebra3DKernel3DKernel3D *) nil_chk(self->kernel3D_)) getConstruction]));
  [self->cursor3D_ setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  [self->cursor3D_ setIsPickableWithBoolean:NO];
  [self->cursor3D_ setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_()];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_cursorOnXOYPlane_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D_initWithGeogebraCommonKernelConstruction_([self->kernel3D_ getConstruction]));
  [self->cursorOnXOYPlane_ setCoordsWithDouble:0 withDouble:0 withDouble:0 withDouble:1];
  [self->cursorOnXOYPlane_ setIsPickableWithBoolean:NO];
  [self->cursorOnXOYPlane_ setMoveNormalDirectionWithGeogebraCommonKernelMatrixCoords:GeogebraCommonKernelMatrixCoords_get_VZ_()];
  [self->cursorOnXOYPlane_ setRegionWithGeogebraCommonKernelRegion:self->xOyPlane_];
  [self->cursorOnXOYPlane_ setMoveModeWithInt:GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY];
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initPointDecorations(self);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(self);
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_addNowWithGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, GeogebraCommonKernelGeosGeoElement *geo) {
  if ([self getDrawableNDWithGeogebraCommonKernelGeosGeoElement:geo] != nil) return;
  GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D *d = nil;
  d = [self createDrawableWithGeogebraCommonKernelGeosGeoElement:geo];
  if (d != nil) {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawable3DListsForView *) nil_chk(self->drawable3DLists_)) addWithGeogebraCommonGeogebra3DEuclidian3DDrawDrawable3D:d];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, GeogebraCommonKernelMatrixCoords *vInOut) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoords_(self->mInv_, vInOut);
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_changeCoordsWithGeogebraCommonKernelMatrixCoordMatrix_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonKernelMatrixCoordMatrix *mat, GeogebraCommonKernelMatrixCoords *vInOut) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initialize();
  GeogebraCommonKernelMatrixCoords *v1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(vInOut)) getCoordsLast1];
  [vInOut setWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(mat)) mulWithGeogebraCommonKernelMatrixCoords:v1]];
}

GeogebraCommonKernelMatrixCoordMatrix4x4 *GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_getToScreenMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  return self->m_;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateRotationMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  GeogebraCommonKernelMatrixCoordMatrix *m1, *m2;
  if ([self getYAxisVertical]) {
    m1 = GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(GeogebraCommonKernelMatrixCoordMatrix_X_AXIS, (self->b_) * GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES);
    m2 = GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(GeogebraCommonKernelMatrixCoordMatrix_Y_AXIS, (-self->a_ - 90) * GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES);
  }
  else {
    m1 = GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(GeogebraCommonKernelMatrixCoordMatrix_X_AXIS, (self->b_ - 90) * GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES);
    m2 = GeogebraCommonKernelMatrixCoordMatrix_Rotation3DMatrixWithInt_withDouble_(GeogebraCommonKernelMatrixCoordMatrix_Z_AXIS, (-self->a_ - 90) * GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D_ANGLE_TO_DEGREES);
  }
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_rotationMatrix_(self, [((GeogebraCommonKernelMatrixCoordMatrix *) nil_chk(m1)) mulWithGeogebraCommonKernelMatrixCoordMatrix:m2]);
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateScaleMatrix(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk(self->scaleMatrix_)) setWithInt:1 withInt:1 withDouble:[self getXscale]];
  [self->scaleMatrix_ setWithInt:2 withInt:2 withDouble:[self getYscale]];
  [self->scaleMatrix_ setWithInt:3 withInt:3 withDouble:[self getZscale]];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateEye(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  if (self->projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_viewDirection_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) getObliqueOrthoDirection])) copyVector]);
  else GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_viewDirection_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk(GeogebraCommonKernelMatrixCoords_get_VZm_())) copyVector]);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, self->viewDirection_);
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->viewDirection_)) normalize];
  if (self->projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_ORTHOGRAPHIC || self->projection_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_PROJECTION_OBLIQUE) GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_eyePosition_(self, self->viewDirection_);
  else {
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_set_eyePosition_(self, [((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) getPerspEye])) copyVector]);
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_toSceneCoords3DWithGeogebraCommonKernelMatrixCoords_(self, self->eyePosition_);
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_translateCoordSystemInPixelsWithInt_withInt_withInt_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint dx, jint dy, jint dz, jint mode) {
  [self setXZeroWithDouble:self->XZeroOld_ + dx / [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getXscale]];
  [self setYZeroWithDouble:self->YZeroOld_ - dy / [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getYscale]];
  [self setZZeroWithDouble:self->ZZeroOld_ + dz / [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) getZscale]];
  [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) updateOriginFromViewWithDouble:[self getXZero] withDouble:[self getYZero] withDouble:[self getZZero]];
  [self updateMatrix];
  [self setViewChangedByTranslate];
  [self setWaitForUpdate];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateUseClippingCube(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) setEnableClipPlanesWithBoolean:[self useClippingCube]];
  [self setViewChanged];
  [self setWaitForUpdate];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAnimatedCoordSystemWithDouble_withDouble_withDouble_withDouble_withInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jdouble x, jdouble y, jdouble z, jdouble newScale, jint steps) {
  self->animatedScaleStartX_ = [self getXZero];
  self->animatedScaleStartY_ = [self getYZero];
  self->animatedScaleStartZ_ = [self getZZero];
  self->animatedScaleEndX_ = x;
  self->animatedScaleEndY_ = y;
  self->animatedScaleEndZ_ = z;
  self->animatedScaleStart_ = [self getScale];
  self->animatedScaleTimeStart_ = JavaLangSystem_currentTimeMillis();
  self->animatedScaleEnd_ = newScale;
  self->animatedScale_ = YES;
  self->animatedScaleTimeFactor_ = 0.0003 * steps;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_animate(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  if (self->animatedScale_) {
    jdouble t = (JavaLangSystem_currentTimeMillis() - self->animatedScaleTimeStart_) * self->animatedScaleTimeFactor_;
    t += 0.2;
    if (t >= 1) {
      t = 1;
      self->animatedScale_ = NO;
    }
    [self setScaleWithDouble:self->animatedScaleStart_ * (1 - t) + self->animatedScaleEnd_ * t];
    [self setXZeroWithDouble:self->animatedScaleStartX_ * (1 - t) + self->animatedScaleEndX_ * t];
    [self setYZeroWithDouble:self->animatedScaleStartY_ * (1 - t) + self->animatedScaleEndY_ * t];
    [self setZZeroWithDouble:self->animatedScaleStartZ_ * (1 - t) + self->animatedScaleEndZ_ * t];
    [((GeogebraCommonMainSettingsEuclidianSettings3D *) nil_chk([self getSettings])) updateOriginFromViewWithDouble:[self getXZero] withDouble:[self getYZero] withDouble:[self getZZero]];
    [self updateMatrix];
    [self setViewChangedByZoom];
    [self setViewChangedByTranslate];
  }
  if (self->animatedContinueRot_) {
    jdouble da = (JavaLangSystem_currentTimeMillis() - self->animatedRotTimeStart_) * self->animatedRotSpeed_;
    [self setRotXYinDegreesWithDouble:self->aOld_ + da withDouble:self->bOld_];
    [self updateMatrix];
    [self setViewChangedByRotate];
  }
  if (self->animatedRot_) {
    jdouble t = (JavaLangSystem_currentTimeMillis() - self->animatedRotTimeStart_) * 0.001;
    t *= t;
    if (t >= 1) {
      t = 1;
      self->animatedRot_ = NO;
    }
    [self setRotXYinDegreesWithDouble:self->aOld_ * (1 - t) + self->aNew_ * t withDouble:self->bOld_ * (1 - t) + self->bNew_ * t];
    [self updateMatrix];
    [self setViewChangedByRotate];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateCursorOnXOYPlane(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk(self->cursorOnXOYPlane_)) setWillingCoordsWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) nil_chk([self getCursor3D])) getCoords]];
  [self->cursorOnXOYPlane_ setWillingDirectionWithGeogebraCommonKernelMatrixCoords:[self getViewDirection]];
  [self->cursorOnXOYPlane_ doRegion];
  [((GeogebraCommonKernelMatrixCoordMatrix4x4 *) nil_chk([self->cursorOnXOYPlane_ getDrawingMatrix])) setDiagWithDouble:1 / [self getScale]];
}

jboolean GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_moveCursorIsVisible(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  return self->cursor_ == GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_CURSOR_MOVE || [((GeogebraCommonEuclidianEuclidianController *) nil_chk([self getEuclidianController])) getMode] == GeogebraCommonEuclidianEuclidianConstants_MODE_TRANSLATEVIEW;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initPointDecorations(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setAndConsume_pointDecorations_(self, new_GeogebraCommonGeogebra3DEuclidian3DDrawDrawPointDecorations_initWithGeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_(self));
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_drawPointAlreadyWithInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint mode) {
  jint pointMoveMode = mode;
  if (pointMoveMode == GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_TOOL_DEFAULT) {
    pointMoveMode = [((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) nil_chk(((GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D *) check_class_cast(self->euclidianController_, [GeogebraCommonGeogebra3DEuclidian3DEuclidianController3D class])))) getPointMoveMode];
  }
  switch (pointMoveMode) {
    case GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_XY:
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_ALREADY_XY_()];
    break;
    case GeogebraCommonKernelKernelNDGeoPointND_MOVE_MODE_Z:
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) drawCursorWithInt:GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterCursor_get_TYPE_ALREADY_Z_()];
    break;
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setWaitForUpdateOwnDrawables(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(self->xOyPlaneDrawable_)) setWaitForUpdate];
  for (jint i = 0; i < 3; i++) [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->axisDrawable_), i))) setWaitForUpdate];
  [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(self->clippingCubeDrawable_)) setWaitForUpdate];
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionOutsideWithDoubleArray_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_withGeogebraCommonKernelMatrixCoords_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, IOSDoubleArray *minmax, GeogebraCommonKernelMatrixCoords *o, GeogebraCommonKernelMatrixCoords *v, GeogebraCommonKernelMatrixCoords *p1, GeogebraCommonKernelMatrixCoords *p2) {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(p1)) projectLineWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:v withGeogebraCommonKernelMatrixCoords:self->tmpCoords1_ withDoubleArray:self->parameters_];
  jdouble t1 = IOSDoubleArray_Get(nil_chk(self->parameters_), 0);
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(p2)) projectLineWithGeogebraCommonKernelMatrixCoords:o withGeogebraCommonKernelMatrixCoords:v withGeogebraCommonKernelMatrixCoords:self->tmpCoords1_ withDoubleArray:self->parameters_];
  jdouble t2 = IOSDoubleArray_Get(self->parameters_, 0);
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionWithDoubleArray_withDouble_withDouble_(minmax, t1, t2);
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_intervalUnionWithDoubleArray_withDouble_withDouble_(IOSDoubleArray *minmax, jdouble v1, jdouble v2) {
  GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_initialize();
  if (JavaLangDouble_isNaNWithDouble_(v2)) {
    return;
  }
  if (v1 > v2) {
    jdouble v = v1;
    v1 = v2;
    v2 = v;
  }
  if (v1 < IOSDoubleArray_Get(nil_chk(minmax), 0) && !JavaLangDouble_isInfiniteWithDouble_(v1)) *IOSDoubleArray_GetRef(minmax, 0) = v1;
  if (v2 > IOSDoubleArray_Get(minmax, 1) && !JavaLangDouble_isInfiniteWithDouble_(v2)) *IOSDoubleArray_GetRef(minmax, 1) = v2;
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_viewChangedOwnDrawables(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  if (![self viewChanged] || [self viewChangedByTranslate] || [self viewChangedByZoom]) {
    IOSObjectArray *minMax = [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(self->clippingCubeDrawable_)) updateMinMax];
    [self->clippingCubeDrawable_ setWaitForUpdate];
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyEuclidianViewCE];
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawPlane3D *) nil_chk(self->xOyPlaneDrawable_)) setWaitForUpdate];
    for (jint i = 0; i < 3; i++) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->axisDrawable_), i))) setDrawMinMaxImmediatlyWithDoubleArray2:minMax];
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(self->axisDrawable_, i))) updateDecorations];
      [self setAxesIntervalsWithDouble:[self getScaleWithInt:i] withInt:i];
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(self->axisDrawable_, i))) setWaitForUpdate];
    }
  }
  else {
    [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawClippingCube3D *) nil_chk(self->clippingCubeDrawable_)) updateRendererClipPlanes];
    for (jint i = 0; i < 3; i++) {
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(nil_chk(self->axisDrawable_), i))) updateDecorations];
      [((GeogebraCommonGeogebra3DEuclidian3DDrawDrawAxis3D *) nil_chk(IOSObjectArray_Get(self->axisDrawable_, i))) setLabelWaitForUpdate];
    }
    [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) notifyEuclidianViewCE];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_setProjectionValuesWithInt_(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self, jint projection) {
  if (self->projection_ != projection) {
    self->projection_ = projection;
    GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateEye(self);
    [self setViewChanged];
    [self setWaitForUpdate];
    [self resetAllVisualStyles];
    [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) setWaitForUpdateClearColor];
  }
}

void GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D_updateProjectionPerspectiveEyeDistance(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D *self) {
  [((GeogebraCommonGeogebra3DEuclidian3DOpenGLRenderer *) nil_chk(self->renderer_)) setNearWithDouble:self->projectionPerspectiveEyeDistance_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DEuclidianView3D)
