//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoAxes3D.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoAxes3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoLine3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/algos/AlgoAxesQuadricND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoQuadricND.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D () {
 @public
  GeogebraCommonKernelMatrixCoords *midpoint_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D, midpoint_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
            withGeogebraCommonKernelKernelNDGeoQuadricND:(GeogebraCommonKernelKernelNDGeoQuadricND *)c {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, c);
  return self;
}

- (void)createInput {
  jint d = [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c_)) getDimension];
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_setAndConsume_axes_(self, [IOSObjectArray newArrayWithLength:d type:GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_class_()]);
  for (jint i = 0; i < d; i++) {
    IOSObjectArray_SetAndConsume(axes_, i, new_GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D_initWithGeogebraCommonKernelConstruction_(cons_));
  }
}

- (void)compute {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_set_midpoint_(self, [((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c_)) getMidpoint3D]);
  [super compute];
}

- (void)setAxisCoordsWithInt:(jint)i {
  GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *axis = (GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) check_class_cast(IOSObjectArray_Get(nil_chk(axes_), i), [GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D class]);
  [((GeogebraCommonGeogebra3DKernel3DGeosGeoLine3D *) nil_chk(axis)) setCoordWithGeogebraCommonKernelMatrixCoords:midpoint_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelKernelNDGeoQuadricND *) nil_chk(c_)) getEigenvec3DWithInt:i]];
}

- (void)dealloc {
  RELEASE_(midpoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoAxes3D", NULL, 0x0, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoQuadricND:", "AlgoAxes3D", NULL, 0x1, NULL, NULL },
    { "createInput", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setAxisCoordsWithInt:", "setAxisCoords", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "midpoint_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D = { 2, "AlgoAxes3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, c);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, label, c);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonKernelAlgosAlgoAxesQuadricND_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, c);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, GeogebraCommonKernelKernelNDGeoQuadricND *c) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoQuadricND_(self, cons, labels, c);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoAxes3D)
