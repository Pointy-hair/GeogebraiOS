//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoBoolean.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceSlim.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/arithmetic/MyBoolean.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelGeosGeoBoolean () {
 @public
  jboolean value_;
  jboolean isDefined__;
  jboolean checkboxFixed_;
  JavaUtilArrayList *condListenersShowObject_;
  jboolean showExtendedAV_;
}

- (void)initScreenLocation OBJC_METHOD_FAMILY_NONE;

- (jint)countCheckboxes;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoBoolean, condListenersShowObject_, JavaUtilArrayList *)

__attribute__((unused)) static jboolean GeogebraCommonKernelGeosGeoBoolean_getBoolean(GeogebraCommonKernelGeosGeoBoolean *self);

__attribute__((unused)) static NSString *GeogebraCommonKernelGeosGeoBoolean_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoBoolean *self, GeogebraCommonKernelStringTemplate *tpl);

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoBoolean_initScreenLocation(GeogebraCommonKernelGeosGeoBoolean *self);

__attribute__((unused)) static jint GeogebraCommonKernelGeosGeoBoolean_countCheckboxes(GeogebraCommonKernelGeosGeoBoolean *self);

@implementation GeogebraCommonKernelGeosGeoBoolean

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                             withBoolean:(jboolean)value {
  GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, value);
  return self;
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_SHOW_HIDE_CHECKBOX;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_BOOLEAN();
}

- (void)setValueWithBoolean:(jboolean)val {
  value_ = val;
}

- (jboolean)getBoolean {
  return GeogebraCommonKernelGeosGeoBoolean_getBoolean(self);
}

- (GeogebraCommonKernelArithmeticMyBoolean *)getMyBoolean {
  return [new_GeogebraCommonKernelArithmeticMyBoolean_initWithGeogebraCommonKernelKernel_withBoolean_(kernel_, value_) autorelease];
}

- (GeogebraCommonKernelGeosGeoBoolean *)copy__ {
  GeogebraCommonKernelGeosGeoBoolean *ret = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
  [ret setValueWithBoolean:value_];
  return ret;
}

- (void)registerConditionListenerWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (condListenersShowObject_ == nil) GeogebraCommonKernelGeosGeoBoolean_setAndConsume_condListenersShowObject_(self, new_JavaUtilArrayList_init());
  [((JavaUtilArrayList *) nil_chk(condListenersShowObject_)) addWithId:geo];
}

- (void)unregisterConditionListenerWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if (condListenersShowObject_ != nil) {
    [condListenersShowObject_ removeWithId:geo];
  }
}

- (void)update {
  [super update];
  if (condListenersShowObject_ != nil) {
    for (jint i = 0; i < [condListenersShowObject_ size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [condListenersShowObject_ getWithInt:i];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
}

- (void)doRemove {
  if (condListenersShowObject_ != nil) {
    IOSObjectArray *geos = [condListenersShowObject_ toArray];
    [condListenersShowObject_ clear];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(geos))->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = (GeogebraCommonKernelGeosGeoElement *) check_class_cast(IOSObjectArray_Get(geos, i), [GeogebraCommonKernelGeosGeoElement class]);
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) removeConditionWithGeogebraCommonKernelGeosGeoBoolean:self];
      [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyUpdateWithGeogebraCommonKernelGeosGeoElement:geo];
    }
  }
  [super doRemove];
}

- (jboolean)showInEuclidianView {
  return [self isIndependent];
}

- (jboolean)showInAlgebraView {
  return YES;
}

- (jboolean)isFixable {
  return [self isIndependent] && ![self isSetEuclidianVisible] && self->condShowObject_ == nil;
}

- (void)setWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
    [self setValueWithBoolean:GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getDouble] - 1)];
    isDefined__ = YES;
  }
  else {
    GeogebraCommonKernelGeosGeoBoolean *b = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class]);
    [self setValueWithBoolean:b->value_];
    isDefined__ = b->isDefined__;
  }
}

- (void)setUndefined {
  isDefined__ = NO;
}

- (void)setDefined {
  isDefined__ = YES;
}

- (jboolean)isDefined {
  return isDefined__;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return GeogebraCommonKernelGeosGeoBoolean_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  JavaLangStringBuilder *sbToString = [new_JavaLangStringBuilder_init() autorelease];
  [sbToString setLengthWithInt:0];
  [sbToString appendWithNSString:label_];
  [sbToString appendWithNSString:@" = "];
  [sbToString appendWithNSString:GeogebraCommonKernelGeosGeoBoolean_toValueStringWithGeogebraCommonKernelStringTemplate_(self, tpl)];
  return [sbToString description];
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<value val=\""];
  [sb appendWithBoolean:value_];
  [sb appendWithNSString:@"\"/>\n"];
  [self getXMLvisualTagsWithJavaLangStringBuilder:sb withBoolean:[self isIndependent]];
  [self getXMLfixedTagWithJavaLangStringBuilder:sb];
  [self getAuxiliaryXMLWithJavaLangStringBuilder:sb];
  if (checkboxFixed_) {
    [sb appendWithNSString:@"\t<checkbox fixed=\""];
    [sb appendWithBoolean:checkboxFixed_];
    [sb appendWithNSString:@"\"/>\n"];
  }
  [self getScriptTagsWithJavaLangStringBuilder:sb];
}

- (jboolean)isGeoBoolean {
  return YES;
}

- (jdouble)getRealWorldLocX {
  return 0;
}

- (jdouble)getRealWorldLocY {
  return 0;
}

- (jboolean)isAbsoluteScreenLocActive {
  return YES;
}

- (jboolean)isAbsoluteScreenLocateable {
  return [self isIndependent];
}

- (void)setAbsoluteScreenLocWithInt:(jint)x
                            withInt:(jint)y {
  if (checkboxFixed_) return;
  labelOffsetX_ = x;
  labelOffsetY_ = y;
}

- (jint)getAbsoluteScreenLocX {
  return labelOffsetX_;
}

- (jint)getAbsoluteScreenLocY {
  return labelOffsetY_;
}

- (void)setAbsoluteScreenLocActiveWithBoolean:(jboolean)flag {
}

- (void)setRealWorldLocWithDouble:(jdouble)x
                       withDouble:(jdouble)y {
}

- (jboolean)isCheckboxFixed {
  return checkboxFixed_;
}

- (void)setCheckboxFixedWithBoolean:(jboolean)checkboxFixed {
  self->checkboxFixed_ = checkboxFixed;
}

- (jboolean)isEqualWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoBoolean]) {
    return value_ == GeogebraCommonKernelGeosGeoBoolean_getBoolean(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class])));
  }
  return NO;
}

- (jboolean)isNumberValue {
  return YES;
}

- (jdouble)getDouble {
  return value_ ? 1 : 0;
}

- (GeogebraCommonKernelArithmeticMyDouble *)getNumber {
  return [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel_, [self getDouble]) autorelease];
}

- (jboolean)isLabelValueShowable {
  return NO;
}

- (jboolean)canHaveClickScript {
  return NO;
}

- (jboolean)isCasEvaluableObject {
  return YES;
}

- (void)moveDependenciesWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)oldGeo {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(oldGeo)) isGeoBoolean] && ((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoBoolean class]))->condListenersShowObject_ != nil) {
    GeogebraCommonKernelGeosGeoBoolean_set_condListenersShowObject_(self, ((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoBoolean class]))->condListenersShowObject_);
    for (GeogebraCommonKernelGeosGeoElement * __strong geo in condListenersShowObject_) GeogebraCommonKernelGeosGeoElement_set_condShowObject_(nil_chk(geo), self);
    GeogebraCommonKernelGeosGeoBoolean_set_condListenersShowObject_(((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(oldGeo, [GeogebraCommonKernelGeosGeoBoolean class])), nil);
  }
}

- (void)setEuclidianVisibleWithBoolean:(jboolean)visible {
  if (visible && labelOffsetX_ == 0 && labelOffsetY_ == 0 && [self isIndependent]) {
    GeogebraCommonKernelGeosGeoBoolean_initScreenLocation(self);
  }
  [super setEuclidianVisibleWithBoolean:visible];
}

- (void)initScreenLocation {
  GeogebraCommonKernelGeosGeoBoolean_initScreenLocation(self);
}

- (jint)countCheckboxes {
  return GeogebraCommonKernelGeosGeoBoolean_countCheckboxes(self);
}

- (GeogebraCommonKernelGeosGeoElement_HitTypeEnum *)getLastHitType {
  return GeogebraCommonKernelGeosGeoElement_HitTypeEnum_get_ON_FILLING();
}

- (jboolean)isShowingExtendedAV {
  return showExtendedAV_;
}

- (void)setShowExtendedAVWithBoolean:(jboolean)showExtendedAV {
  self->showExtendedAV_ = showExtendedAV;
}

- (void)dealloc {
  RELEASE_(condListenersShowObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoBoolean", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withBoolean:", "GeoBoolean", NULL, 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "setValueWithBoolean:", "setValue", "V", 0x1, NULL, NULL },
    { "getBoolean", NULL, "Z", 0x11, NULL, NULL },
    { "getMyBoolean", NULL, "Lgeogebra.common.kernel.arithmetic.MyBoolean;", 0x11, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoBoolean;", 0x1, NULL, NULL },
    { "registerConditionListenerWithGeogebraCommonKernelGeosGeoElement:", "registerConditionListener", "V", 0x1, NULL, NULL },
    { "unregisterConditionListenerWithGeogebraCommonKernelGeosGeoElement:", "unregisterConditionListener", "V", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "doRemove", NULL, "V", 0x1, NULL, NULL },
    { "showInEuclidianView", NULL, "Z", 0x1, NULL, NULL },
    { "showInAlgebraView", NULL, "Z", 0x11, NULL, NULL },
    { "isFixable", NULL, "Z", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelGeosGeoElement:", "set", "V", 0x1, NULL, NULL },
    { "setUndefined", NULL, "V", 0x11, NULL, NULL },
    { "setDefined", NULL, "V", 0x11, NULL, NULL },
    { "isDefined", NULL, "Z", 0x11, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "isGeoBoolean", NULL, "Z", 0x1, NULL, NULL },
    { "getRealWorldLocX", NULL, "D", 0x1, NULL, NULL },
    { "getRealWorldLocY", NULL, "D", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocActive", NULL, "Z", 0x1, NULL, NULL },
    { "isAbsoluteScreenLocateable", NULL, "Z", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocWithInt:withInt:", "setAbsoluteScreenLoc", "V", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocX", NULL, "I", 0x1, NULL, NULL },
    { "getAbsoluteScreenLocY", NULL, "I", 0x1, NULL, NULL },
    { "setAbsoluteScreenLocActiveWithBoolean:", "setAbsoluteScreenLocActive", "V", 0x1, NULL, NULL },
    { "setRealWorldLocWithDouble:withDouble:", "setRealWorldLoc", "V", 0x1, NULL, NULL },
    { "isCheckboxFixed", NULL, "Z", 0x11, NULL, NULL },
    { "setCheckboxFixedWithBoolean:", "setCheckboxFixed", "V", 0x11, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelGeosGeoElement:", "isEqual", "Z", 0x11, NULL, NULL },
    { "isNumberValue", NULL, "Z", 0x1, NULL, NULL },
    { "getDouble", NULL, "D", 0x1, NULL, NULL },
    { "getNumber", NULL, "Lgeogebra.common.kernel.arithmetic.MyDouble;", 0x1, NULL, NULL },
    { "isLabelValueShowable", NULL, "Z", 0x11, NULL, NULL },
    { "canHaveClickScript", NULL, "Z", 0x1, NULL, NULL },
    { "isCasEvaluableObject", NULL, "Z", 0x11, NULL, NULL },
    { "moveDependenciesWithGeogebraCommonKernelGeosGeoElement:", "moveDependencies", "V", 0x1, NULL, NULL },
    { "setEuclidianVisibleWithBoolean:", "setEuclidianVisible", "V", 0x1, NULL, NULL },
    { "initScreenLocation", NULL, "V", 0x2, NULL, NULL },
    { "countCheckboxes", NULL, "I", 0x2, NULL, NULL },
    { "getLastHitType", NULL, "Lgeogebra.common.kernel.geos.GeoElement$HitType;", 0x11, NULL, NULL },
    { "isShowingExtendedAV", NULL, "Z", 0x1, NULL, NULL },
    { "setShowExtendedAVWithBoolean:", "setShowExtendedAV", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "value_", NULL, 0x2, "Z", NULL, NULL,  },
    { "isDefined__", "isDefined", 0x2, "Z", NULL, NULL,  },
    { "checkboxFixed_", NULL, 0x2, "Z", NULL, NULL,  },
    { "condListenersShowObject_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/geos/GeoElement;>;",  },
    { "showExtendedAV_", NULL, 0x2, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoBoolean = { 2, "GeoBoolean", "geogebra.common.kernel.geos", NULL, 0x1, 48, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoBoolean;
}

@end

void GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoBoolean *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoElement_initWithGeogebraCommonKernelConstruction_(self, c);
  self->value_ = NO;
  self->isDefined__ = YES;
  self->checkboxFixed_ = NO;
  self->showExtendedAV_ = YES;
  [self setEuclidianVisibleWithBoolean:NO];
}

GeogebraCommonKernelGeosGeoBoolean *new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoBoolean *self = [GeogebraCommonKernelGeosGeoBoolean alloc];
  GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelGeosGeoBoolean *self, GeogebraCommonKernelConstruction *cons, jboolean value) {
  GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->value_ = value;
}

GeogebraCommonKernelGeosGeoBoolean *new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(GeogebraCommonKernelConstruction *cons, jboolean value) {
  GeogebraCommonKernelGeosGeoBoolean *self = [GeogebraCommonKernelGeosGeoBoolean alloc];
  GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_withBoolean_(self, cons, value);
  return self;
}

jboolean GeogebraCommonKernelGeosGeoBoolean_getBoolean(GeogebraCommonKernelGeosGeoBoolean *self) {
  return self->value_;
}

NSString *GeogebraCommonKernelGeosGeoBoolean_toValueStringWithGeogebraCommonKernelStringTemplate_(GeogebraCommonKernelGeosGeoBoolean *self, GeogebraCommonKernelStringTemplate *tpl) {
  return self->value_ ? @"true" : @"false";
}

void GeogebraCommonKernelGeosGeoBoolean_initScreenLocation(GeogebraCommonKernelGeosGeoBoolean *self) {
  jint count = GeogebraCommonKernelGeosGeoBoolean_countCheckboxes(self);
  self->labelOffsetX_ = 5;
  id<GeogebraCommonEuclidianEuclidianViewInterfaceSlim> ev = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getActiveEuclidianView];
  if (ev != nil) {
    self->labelOffsetY_ = [ev getSliderOffsetY] - 45 + 30 * count;
  }
  else {
    self->labelOffsetY_ = 5 + 30 * count;
  }
  self->labelOffsetY_ = self->labelOffsetY_ / 400 * 10 + self->labelOffsetY_ % 400;
}

jint GeogebraCommonKernelGeosGeoBoolean_countCheckboxes(GeogebraCommonKernelGeosGeoBoolean *self) {
  jint count = 0;
  JavaUtilTreeSet *bools = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getGeoSetLabelOrderWithGeogebraCommonPluginGeoClassEnum:GeogebraCommonPluginGeoClassEnum_get_BOOLEAN()];
  if (bools != nil) {
    id<JavaUtilIterator> it = [bools iterator];
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      GeogebraCommonKernelGeosGeoBoolean *num = (GeogebraCommonKernelGeosGeoBoolean *) check_class_cast([it next], [GeogebraCommonKernelGeosGeoBoolean class]);
      if ([((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(num)) isIndependent] && [num isEuclidianVisible]) {
        count++;
      }
    }
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoBoolean)
