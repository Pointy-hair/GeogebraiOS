//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoTMean2Estimate.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoTMean2Estimate.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "org/apache/commons/math/MathException.h"
#include "org/apache/commons/math/distribution/TDistributionImpl.h"
#include "org/apache/commons/math/stat/descriptive/SummaryStatistics.h"

@interface GeogebraCommonKernelStatisticsAlgoTMean2Estimate () {
 @public
  GeogebraCommonKernelGeosGeoList *geoList1_, *geoList2_;
  GeogebraCommonKernelGeosGeoNumeric *geoLevel_, *geoMean1_, *geoSD1_, *geoN1_, *geoMean2_, *geoSD2_, *geoN2_;
  GeogebraCommonKernelGeosGeoBoolean *geoPooled_;
  GeogebraCommonKernelGeosGeoList *result_;
  IOSDoubleArray *val1_, *val2_;
  jint size1_, size2_;
  jdouble level_, mean1_, var1_, n1_, mean2_, var2_, n2_, me_;
  OrgApacheCommonsMathStatDescriptiveSummaryStatistics *stats_;
  OrgApacheCommonsMathDistributionTDistributionImpl *tDist_;
  jdouble difference_;
}

+ (jdouble)getDegreeOfFreedomWithDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2
                            withBoolean:(jboolean)pooled;

- (jdouble)getMarginOfErrorWithDouble:(jdouble)v1
                           withDouble:(jdouble)n1
                           withDouble:(jdouble)v2
                           withDouble:(jdouble)n2
                           withDouble:(jdouble)confLevel
                          withBoolean:(jboolean)pooled;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoList1_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoList2_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoLevel_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoMean1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoSD1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoN1_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoMean2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoSD2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoN2_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, geoPooled_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, result_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, val1_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, val2_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, stats_, OrgApacheCommonsMathStatDescriptiveSummaryStatistics *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoTMean2Estimate, tDist_, OrgApacheCommonsMathDistributionTDistributionImpl *)

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(jdouble v1, jdouble v2, jdouble n1, jdouble n2, jboolean pooled);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, jdouble v1, jdouble n1, jdouble v2, jdouble n2, jdouble confLevel, jboolean pooled);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self);

@implementation GeogebraCommonKernelStatisticsAlgoTMean2Estimate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList1
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geoList2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList1, geoList2, geoLevel, geoPooled);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoMean1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoSD1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoN1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoMean2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoSD2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoN2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoMean1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoSD1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoN1
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoMean2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoSD2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoN2
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)geoLevel
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)geoPooled {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_TMean2Estimate();
}

- (void)setInputOutput {
  if (geoList1_ != nil) {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoList1_);
    IOSObjectArray_Set(input_, 1, geoList2_);
    IOSObjectArray_Set(input_, 2, geoLevel_);
    IOSObjectArray_Set(input_, 3, geoPooled_);
  }
  else {
    GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:8 type:GeogebraCommonKernelGeosGeoElement_class_()]);
    IOSObjectArray_Set(input_, 0, geoMean1_);
    IOSObjectArray_Set(input_, 1, geoSD1_);
    IOSObjectArray_Set(input_, 2, geoN1_);
    IOSObjectArray_Set(input_, 3, geoMean2_);
    IOSObjectArray_Set(input_, 4, geoSD2_);
    IOSObjectArray_Set(input_, 5, geoN2_);
    IOSObjectArray_Set(input_, 6, geoLevel_);
    IOSObjectArray_Set(input_, 7, geoPooled_);
  }
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:result_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return result_;
}

+ (jdouble)getDegreeOfFreedomWithDouble:(jdouble)v1
                             withDouble:(jdouble)v2
                             withDouble:(jdouble)n1
                             withDouble:(jdouble)n2
                            withBoolean:(jboolean)pooled {
  return GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled);
}

- (jdouble)getMarginOfErrorWithDouble:(jdouble)v1
                           withDouble:(jdouble)n1
                           withDouble:(jdouble)v2
                           withDouble:(jdouble)n2
                           withDouble:(jdouble)confLevel
                          withBoolean:(jboolean)pooled {
  return GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, v1, n1, v2, n2, confLevel, pooled);
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
}

- (void)dealloc {
  RELEASE_(geoList1_);
  RELEASE_(geoList2_);
  RELEASE_(geoLevel_);
  RELEASE_(geoMean1_);
  RELEASE_(geoSD1_);
  RELEASE_(geoN1_);
  RELEASE_(geoMean2_);
  RELEASE_(geoSD2_);
  RELEASE_(geoN2_);
  RELEASE_(geoPooled_);
  RELEASE_(result_);
  RELEASE_(val1_);
  RELEASE_(val2_);
  RELEASE_(stats_);
  RELEASE_(tDist_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoTMean2Estimate", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "getDegreeOfFreedomWithDouble:withDouble:withDouble:withDouble:withBoolean:", "getDegreeOfFreedom", "D", 0xa, NULL, NULL },
    { "getMarginOfErrorWithDouble:withDouble:withDouble:withDouble:withDouble:withBoolean:", "getMarginOfError", "D", 0x2, "Lorg.apache.commons.math.MathException;", NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geoList1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoList2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geoLevel_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoMean1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoSD1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoN1_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoMean2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoSD2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoN2_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "geoPooled_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "val1_", NULL, 0x2, "[D", NULL, NULL,  },
    { "val2_", NULL, 0x2, "[D", NULL, NULL,  },
    { "size1_", NULL, 0x2, "I", NULL, NULL,  },
    { "size2_", NULL, 0x2, "I", NULL, NULL,  },
    { "level_", NULL, 0x2, "D", NULL, NULL,  },
    { "mean1_", NULL, 0x2, "D", NULL, NULL,  },
    { "var1_", NULL, 0x2, "D", NULL, NULL,  },
    { "n1_", NULL, 0x2, "D", NULL, NULL,  },
    { "mean2_", NULL, 0x2, "D", NULL, NULL,  },
    { "var2_", NULL, 0x2, "D", NULL, NULL,  },
    { "n2_", NULL, 0x2, "D", NULL, NULL,  },
    { "me_", NULL, 0x2, "D", NULL, NULL,  },
    { "pooled_", NULL, 0x0, "Z", NULL, NULL,  },
    { "stats_", NULL, 0x2, "Lorg.apache.commons.math.stat.descriptive.SummaryStatistics;", NULL, NULL,  },
    { "tDist_", NULL, 0x2, "Lorg.apache.commons.math.distribution.TDistributionImpl;", NULL, NULL,  },
    { "difference_", NULL, 0x2, "D", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoTMean2Estimate = { 2, "AlgoTMean2Estimate", "geogebra.common.kernel.statistics", NULL, 0x1, 9, methods, 27, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoTMean2Estimate;
}

@end

void GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList1, GeogebraCommonKernelGeosGeoList *geoList2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoList1_(self, geoList1);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoList2_(self, geoList2);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoLevel_(self, geoLevel);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoPooled_(self, geoPooled);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoMean1_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoSD1_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoN1_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoMean2_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoSD2_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoN2_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
  [self->result_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geoList1, GeogebraCommonKernelGeosGeoList *geoList2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [GeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoList1, geoList2, geoLevel, geoPooled);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *geoMean1, GeogebraCommonKernelGeosGeoNumeric *geoSD1, GeogebraCommonKernelGeosGeoNumeric *geoN1, GeogebraCommonKernelGeosGeoNumeric *geoMean2, GeogebraCommonKernelGeosGeoNumeric *geoSD2, GeogebraCommonKernelGeosGeoNumeric *geoN2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoNumeric *geoMean1, GeogebraCommonKernelGeosGeoNumeric *geoSD1, GeogebraCommonKernelGeosGeoNumeric *geoN1, GeogebraCommonKernelGeosGeoNumeric *geoMean2, GeogebraCommonKernelGeosGeoNumeric *geoSD2, GeogebraCommonKernelGeosGeoNumeric *geoN2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [GeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *geoMean1, GeogebraCommonKernelGeosGeoNumeric *geoSD1, GeogebraCommonKernelGeosGeoNumeric *geoN1, GeogebraCommonKernelGeosGeoNumeric *geoMean2, GeogebraCommonKernelGeosGeoNumeric *geoSD2, GeogebraCommonKernelGeosGeoNumeric *geoN2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoList1_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoList2_(self, nil);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoLevel_(self, geoLevel);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoPooled_(self, geoPooled);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoMean1_(self, geoMean1);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoSD1_(self, geoSD1);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoN1_(self, geoN1);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoMean2_(self, geoMean2);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoSD2_(self, geoSD2);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_set_geoN2_(self, geoN2);
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_result_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(self);
}

GeogebraCommonKernelStatisticsAlgoTMean2Estimate *new_GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoNumeric *geoMean1, GeogebraCommonKernelGeosGeoNumeric *geoSD1, GeogebraCommonKernelGeosGeoNumeric *geoN1, GeogebraCommonKernelGeosGeoNumeric *geoMean2, GeogebraCommonKernelGeosGeoNumeric *geoSD2, GeogebraCommonKernelGeosGeoNumeric *geoN2, GeogebraCommonKernelGeosGeoNumeric *geoLevel, GeogebraCommonKernelGeosGeoBoolean *geoPooled) {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self = [GeogebraCommonKernelStatisticsAlgoTMean2Estimate alloc];
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, geoMean1, geoSD1, geoN1, geoMean2, geoSD2, geoN2, geoLevel, geoPooled);
  return self;
}

jdouble GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(jdouble v1, jdouble v2, jdouble n1, jdouble n2, jboolean pooled) {
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_initialize();
  if (pooled) return n1 + n2 - 2;
  return (((v1 / n1) + (v2 / n2)) * ((v1 / n1) + (v2 / n2))) / ((v1 * v1) / (n1 * n1 * (n1 - 1.0)) + (v2 * v2) / (n2 * n2 * (n2 - 1.0)));
}

jdouble GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self, jdouble v1, jdouble n1, jdouble v2, jdouble n2, jdouble confLevel, jboolean pooled) {
  if (pooled) {
    jdouble pooledVariance = ((n1 - 1) * v1 + (n2 - 1) * v2) / (n1 + n2 - 2);
    jdouble se = JavaLangMath_sqrtWithDouble_(pooledVariance * (1.0 / n1 + 1.0 / n2));
    GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled)));
    jdouble a = [self->tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
    return a * se;
  }
  jdouble se = JavaLangMath_sqrtWithDouble_((v1 / n1) + (v2 / n2));
  GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_tDist_(self, new_OrgApacheCommonsMathDistributionTDistributionImpl_initWithDouble_(GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getDegreeOfFreedomWithDouble_withDouble_withDouble_withDouble_withBoolean_(v1, v2, n1, n2, pooled)));
  jdouble a = [self->tDist_ inverseCumulativeProbabilityWithDouble:(confLevel + 1.0) / 2];
  return a * se;
}

void GeogebraCommonKernelStatisticsAlgoTMean2Estimate_compute(GeogebraCommonKernelStatisticsAlgoTMean2Estimate *self) {
  @try {
    if (((IOSObjectArray *) nil_chk(self->input_))->size_ == 4) {
      self->size1_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList1_)) size];
      if (![self->geoList1_ isDefined] || self->size1_ < 2) {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
      self->size2_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geoList2_)) size];
      if (![self->geoList2_ isDefined] || self->size2_ < 2) {
        [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
        return;
      }
      GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_val1_(self, [IOSDoubleArray newArrayWithLength:self->size1_]);
      for (jint i = 0; i < self->size1_; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = [self->geoList1_ getWithInt:i];
        if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
          id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
          *IOSDoubleArray_GetRef(self->val1_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
        }
        else {
          [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
          return;
        }
      }
      GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_val2_(self, [IOSDoubleArray newArrayWithLength:self->size2_]);
      for (jint i = 0; i < self->size2_; i++) {
        GeogebraCommonKernelGeosGeoElement *geo = [self->geoList2_ getWithInt:i];
        if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) {
          id<GeogebraCommonKernelArithmeticNumberValue> num = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue));
          *IOSDoubleArray_GetRef(self->val2_, i) = [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num)) getDouble];
        }
        else {
          [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
          return;
        }
      }
      GeogebraCommonKernelStatisticsAlgoTMean2Estimate_setAndConsume_stats_(self, new_OrgApacheCommonsMathStatDescriptiveSummaryStatistics_init());
      for (jint i = 0; i < self->val1_->size_; i++) {
        [self->stats_ addValueWithDouble:IOSDoubleArray_Get(self->val1_, i)];
      }
      self->n1_ = [self->stats_ getN];
      self->var1_ = [self->stats_ getVariance];
      self->mean1_ = [self->stats_ getMean];
      [self->stats_ clear];
      for (jint i = 0; i < self->val2_->size_; i++) {
        [self->stats_ addValueWithDouble:IOSDoubleArray_Get(self->val2_, i)];
      }
      self->n2_ = [self->stats_ getN];
      self->var2_ = [self->stats_ getVariance];
      self->mean2_ = [self->stats_ getMean];
    }
    else {
      self->mean1_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoMean1_)) getDouble];
      self->var1_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoSD1_)) getDouble] * [self->geoSD1_ getDouble];
      self->n1_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoN1_)) getDouble];
      self->mean2_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoMean2_)) getDouble];
      self->var2_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoSD2_)) getDouble] * [self->geoSD2_ getDouble];
      self->n2_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoN2_)) getDouble];
    }
    self->level_ = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->geoLevel_)) getDouble];
    self->pooled_ = [((GeogebraCommonKernelGeosGeoBoolean *) nil_chk(self->geoPooled_)) getBoolean];
    if (self->level_ < 0 || self->level_ > 1 || self->var1_ < 0 || self->n1_ < 1 || self->var2_ < 0 || self->n2_ < 1) {
      [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) setUndefined];
      return;
    }
    self->me_ = GeogebraCommonKernelStatisticsAlgoTMean2Estimate_getMarginOfErrorWithDouble_withDouble_withDouble_withDouble_withDouble_withBoolean_(self, self->var1_, self->n1_, self->var2_, self->n2_, self->level_, self->pooled_);
    self->difference_ = self->mean1_ - self->mean2_;
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->result_)) clear];
    jboolean oldSuppress = [((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) isSuppressLabelsActive];
    [self->cons_ setSuppressLabelCreationWithBoolean:YES];
    [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->difference_ - self->me_) autorelease]];
    [self->result_ addWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(self->cons_, self->difference_ + self->me_) autorelease]];
    [self->cons_ setSuppressLabelCreationWithBoolean:oldSuppress];
  }
  @catch (JavaLangIllegalArgumentException *e) {
    [((JavaLangIllegalArgumentException *) nil_chk(e)) printStackTrace];
  }
  @catch (OrgApacheCommonsMathMathException *e) {
    [((OrgApacheCommonsMathMathException *) nil_chk(e)) printStackTrace];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoTMean2Estimate)
