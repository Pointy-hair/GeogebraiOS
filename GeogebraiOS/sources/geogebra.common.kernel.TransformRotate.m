//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/TransformRotate.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/TransformRotate.h"
#include "geogebra/common/kernel/algos/AlgoRotate.h"
#include "geogebra/common/kernel/algos/AlgoRotatePoint.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"

@implementation GeogebraCommonKernelTransformRotate

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle {
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, angle);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
              withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)angle
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center {
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, angle, center);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAlgosAlgoTransformation *algo = nil;
  if (center_ == nil) {
    algo = [new_GeogebraCommonKernelAlgosAlgoRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoNumberValue_(cons_, geo, angle_) autorelease];
  }
  else algo = [new_GeogebraCommonKernelAlgosAlgoRotatePoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(cons_, geo, angle_, center_) autorelease];
  return algo;
}

- (void)dealloc {
  RELEASE_(center_);
  RELEASE_(angle_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumberValue:", "TransformRotate", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "TransformRotate", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "center_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "angle_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoNumberValue;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelTransformRotate = { 2, "TransformRotate", "geogebra.common.kernel", NULL, 0x1, 3, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelTransformRotate;
}

@end

void GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelTransformRotate *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformRotate_set_angle_(self, angle);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformRotate *new_GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle) {
  GeogebraCommonKernelTransformRotate *self = [GeogebraCommonKernelTransformRotate alloc];
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_(self, cons, angle);
  return self;
}

void GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelTransformRotate *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelTransformRotate_set_angle_(self, angle);
  GeogebraCommonKernelTransformRotate_set_center_(self, center);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelTransformRotate *new_GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelGeosGeoNumberValue> angle, id<GeogebraCommonKernelKernelNDGeoPointND> center) {
  GeogebraCommonKernelTransformRotate *self = [GeogebraCommonKernelTransformRotate alloc];
  GeogebraCommonKernelTransformRotate_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoNumberValue_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, angle, center);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelTransformRotate)
