//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/arithmetic/PolyFunction.java
//


#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/plugin/Operation.h"

@interface GeogebraCommonKernelArithmeticPolyFunction () {
 @public
  jint degree_;
  GeogebraCommonKernelArithmeticPolyFunction *derivative_, *integral_;
}

- (GeogebraCommonKernelArithmeticPolyFunction *)buildDerivative;

- (GeogebraCommonKernelArithmeticPolyFunction *)buildIntegral;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticPolyFunction, derivative_, GeogebraCommonKernelArithmeticPolyFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelArithmeticPolyFunction, integral_, GeogebraCommonKernelArithmeticPolyFunction *)

__attribute__((unused)) static GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticPolyFunction_buildDerivative(GeogebraCommonKernelArithmeticPolyFunction *self);

__attribute__((unused)) static GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticPolyFunction_buildIntegral(GeogebraCommonKernelArithmeticPolyFunction *self);

__attribute__((unused)) static IOSDoubleArray *GeogebraCommonKernelArithmeticPolyFunction_evaluateDerivFuncWithDouble_(GeogebraCommonKernelArithmeticPolyFunction *self, jdouble x);

@implementation GeogebraCommonKernelArithmeticPolyFunction

- (instancetype)initWithInt:(jint)degree {
  GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self, degree);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)c {
  GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelArithmeticPolyFunction:(GeogebraCommonKernelArithmeticPolyFunction *)pf {
  GeogebraCommonKernelArithmeticPolyFunction_initWithGeogebraCommonKernelArithmeticPolyFunction_(self, pf);
  return self;
}

- (IOSDoubleArray *)getCoeffs {
  return coeffs_;
}

- (IOSDoubleArray *)getCoeffsCopy {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:((IOSDoubleArray *) nil_chk(coeffs_))->size_];
  for (jint i = 0; i < coeffs_->size_; i++) {
    *IOSDoubleArray_GetRef(ret, i) = IOSDoubleArray_Get(coeffs_, i);
  }
  return ret;
}

- (jboolean)updateCoeffValues {
  return YES;
}

- (jint)getDegree {
  return degree_;
}

- (GeogebraCommonKernelArithmeticPolyFunction *)getDerivative {
  if (derivative_ == nil) {
    GeogebraCommonKernelArithmeticPolyFunction_set_derivative_(self, GeogebraCommonKernelArithmeticPolyFunction_buildDerivative(self));
  }
  return derivative_;
}

- (GeogebraCommonKernelArithmeticPolyFunction *)getIntegral {
  if (integral_ == nil) {
    GeogebraCommonKernelArithmeticPolyFunction_set_integral_(self, GeogebraCommonKernelArithmeticPolyFunction_buildIntegral(self));
  }
  return integral_;
}

- (GeogebraCommonKernelArithmeticPolyFunction *)buildDerivative {
  return GeogebraCommonKernelArithmeticPolyFunction_buildDerivative(self);
}

- (GeogebraCommonKernelArithmeticPolyFunction *)buildIntegral {
  return GeogebraCommonKernelArithmeticPolyFunction_buildIntegral(self);
}

- (IOSDoubleArray *)evaluateDerivFuncWithDouble:(jdouble)x {
  return GeogebraCommonKernelArithmeticPolyFunction_evaluateDerivFuncWithDouble_(self, x);
}

- (jdouble)evaluateDerivativeWithDouble:(jdouble)x {
  return IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelArithmeticPolyFunction_evaluateDerivFuncWithDouble_(self, x)), 1);
}

- (jdouble)evaluateWithDouble:(jdouble)x {
  jdouble p = IOSDoubleArray_Get(nil_chk(coeffs_), degree_);
  for (jint i = degree_ - 1; i >= 0; i--) {
    p = p * x + IOSDoubleArray_Get(coeffs_, i);
  }
  return p;
}

- (IOSDoubleArray *)evaluateDerivativesWithDouble:(jdouble)x
                                          withInt:(jint)order {
  IOSDoubleArray *pd = [IOSDoubleArray arrayWithLength:order + 1];
  jint nnd, j, i;
  jdouble cnst = 1.0;
  *IOSDoubleArray_GetRef(pd, 0) = IOSDoubleArray_Get(nil_chk(coeffs_), degree_);
  for (j = 1; j <= order; j++) *IOSDoubleArray_GetRef(pd, j) = 0.0;
  for (i = degree_ - 1; i >= 0; i--) {
    nnd = (order < (degree_ - i) ? order : degree_ - i);
    for (j = nnd; j >= 1; j--) *IOSDoubleArray_GetRef(pd, j) = IOSDoubleArray_Get(pd, j) * x + IOSDoubleArray_Get(pd, j - 1);
    *IOSDoubleArray_GetRef(pd, 0) = IOSDoubleArray_Get(pd, 0) * x + IOSDoubleArray_Get(coeffs_, i);
  }
  for (i = 2; i <= order; i++) {
    cnst *= i;
    *IOSDoubleArray_GetRef(pd, i) *= cnst;
  }
  return pd;
}

- (GeogebraCommonKernelArithmeticFunction *)getFunctionWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel
                                   withGeogebraCommonKernelArithmeticFunctionVariable:(GeogebraCommonKernelArithmeticFunctionVariable *)fv {
  GeogebraCommonKernelArithmeticExpressionNode *fvEn = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, fv) autorelease];
  if (degree_ == 0) {
    GeogebraCommonKernelArithmeticExpressionNode *en = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, IOSDoubleArray_Get(nil_chk(coeffs_), 0)) autorelease]) autorelease];
    return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
  }
  else if (degree_ == 1) {
    GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fvEn multiplyRWithDouble:IOSDoubleArray_Get(nil_chk(coeffs_), 1)])) plusWithDouble:IOSDoubleArray_Get(coeffs_, 0)];
    return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
  }
  GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fvEn powerWithDouble:(degree_)])) multiplyRWithDouble:IOSDoubleArray_Get(nil_chk(coeffs_), degree_)];
  if (degree_ > 2) {
    for (jint i = degree_ - 1; i > 1; i--) {
      if (IOSDoubleArray_Get(coeffs_, i) != 0) {
        GeogebraCommonKernelArithmeticExpressionNode *term = [((GeogebraCommonKernelArithmeticExpressionNode *) [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(kernel, fv, GeogebraCommonPluginOperationEnum_get_POWER(), [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, i) autorelease]) autorelease]) multiplyRWithDouble:IOSDoubleArray_Get(coeffs_, i)];
        en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) plusWithGeogebraCommonKernelArithmeticExpressionValue:term];
      }
    }
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 1))) {
    en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) plusWithGeogebraCommonKernelArithmeticExpressionValue:[fvEn multiplyRWithDouble:IOSDoubleArray_Get(coeffs_, 1)]];
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_(IOSDoubleArray_Get(coeffs_, 0))) {
    en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) plusWithDouble:IOSDoubleArray_Get(coeffs_, 0)];
  }
  return [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(en, fv) autorelease];
}

- (jboolean)isEqualWithGeogebraCommonKernelArithmeticPolyFunction:(GeogebraCommonKernelArithmeticPolyFunction *)poly {
  if ([((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(poly)) getDegree] != degree_) {
    return NO;
  }
  IOSDoubleArray *polyCoeffs = [poly getCoeffs];
  for (jint i = 0; i <= degree_; i++) {
    if (!GeogebraCommonKernelKernel_isEqualWithDouble_withDouble_(IOSDoubleArray_Get(nil_chk(polyCoeffs), i), IOSDoubleArray_Get(nil_chk(coeffs_), i))) {
      return NO;
    }
  }
  return YES;
}

- (void)dealloc {
  RELEASE_(coeffs_);
  RELEASE_(derivative_);
  RELEASE_(integral_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithInt:", "PolyFunction", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:", "PolyFunction", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelArithmeticPolyFunction:", "PolyFunction", NULL, 0x1, NULL, NULL },
    { "getCoeffs", NULL, "[D", 0x1, NULL, NULL },
    { "getCoeffsCopy", NULL, "[D", 0x1, NULL, NULL },
    { "updateCoeffValues", NULL, "Z", 0x1, NULL, NULL },
    { "getDegree", NULL, "I", 0x1, NULL, NULL },
    { "getDerivative", NULL, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "getIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x11, NULL, NULL },
    { "buildDerivative", NULL, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x2, NULL, NULL },
    { "buildIntegral", NULL, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", 0x2, NULL, NULL },
    { "evaluateDerivFuncWithDouble:", "evaluateDerivFunc", "[D", 0x11, NULL, NULL },
    { "evaluateDerivativeWithDouble:", "evaluateDerivative", "D", 0x11, NULL, NULL },
    { "evaluateWithDouble:", "evaluate", "D", 0x11, NULL, NULL },
    { "evaluateDerivativesWithDouble:withInt:", "evaluateDerivatives", "[D", 0x11, NULL, NULL },
    { "getFunctionWithGeogebraCommonKernelKernel:withGeogebraCommonKernelArithmeticFunctionVariable:", "getFunction", "Lgeogebra.common.kernel.arithmetic.Function;", 0x1, NULL, NULL },
    { "isEqualWithGeogebraCommonKernelArithmeticPolyFunction:", "isEqual", "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "coeffs_", NULL, 0x4, "[D", NULL, NULL,  },
    { "degree_", NULL, 0x2, "I", NULL, NULL,  },
    { "derivative_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", NULL, NULL,  },
    { "integral_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.PolyFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelArithmeticPolyFunction = { 2, "PolyFunction", "geogebra.common.kernel.arithmetic", NULL, 0x1, 17, methods, 4, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelArithmeticPolyFunction;
}

@end

void GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(GeogebraCommonKernelArithmeticPolyFunction *self, jint degree) {
  NSObject_init(self);
  self->degree_ = degree;
  GeogebraCommonKernelArithmeticPolyFunction_setAndConsume_coeffs_(self, [IOSDoubleArray newArrayWithLength:degree + 1]);
}

GeogebraCommonKernelArithmeticPolyFunction *new_GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(jint degree) {
  GeogebraCommonKernelArithmeticPolyFunction *self = [GeogebraCommonKernelArithmeticPolyFunction alloc];
  GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self, degree);
  return self;
}

void GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(GeogebraCommonKernelArithmeticPolyFunction *self, IOSDoubleArray *c) {
  NSObject_init(self);
  GeogebraCommonKernelArithmeticPolyFunction_setAndConsume_coeffs_(self, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(c))->size_]);
  for (jint i = 0; i < c->size_; i++) {
    *IOSDoubleArray_GetRef(self->coeffs_, i) = IOSDoubleArray_Get(c, i);
  }
  self->degree_ = self->coeffs_->size_ - 1;
}

GeogebraCommonKernelArithmeticPolyFunction *new_GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(IOSDoubleArray *c) {
  GeogebraCommonKernelArithmeticPolyFunction *self = [GeogebraCommonKernelArithmeticPolyFunction alloc];
  GeogebraCommonKernelArithmeticPolyFunction_initWithDoubleArray_(self, c);
  return self;
}

void GeogebraCommonKernelArithmeticPolyFunction_initWithGeogebraCommonKernelArithmeticPolyFunction_(GeogebraCommonKernelArithmeticPolyFunction *self, GeogebraCommonKernelArithmeticPolyFunction *pf) {
  NSObject_init(self);
  self->degree_ = ((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk(pf))->degree_;
  GeogebraCommonKernelArithmeticPolyFunction_set_coeffs_(self, [pf getCoeffsCopy]);
}

GeogebraCommonKernelArithmeticPolyFunction *new_GeogebraCommonKernelArithmeticPolyFunction_initWithGeogebraCommonKernelArithmeticPolyFunction_(GeogebraCommonKernelArithmeticPolyFunction *pf) {
  GeogebraCommonKernelArithmeticPolyFunction *self = [GeogebraCommonKernelArithmeticPolyFunction alloc];
  GeogebraCommonKernelArithmeticPolyFunction_initWithGeogebraCommonKernelArithmeticPolyFunction_(self, pf);
  return self;
}

GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticPolyFunction_buildDerivative(GeogebraCommonKernelArithmeticPolyFunction *self) {
  if (self->degree_ < 1) return [new_GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(0) autorelease];
  GeogebraCommonKernelArithmeticPolyFunction *deriv = [new_GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self->degree_ - 1) autorelease];
  for (jint i = 1; i <= self->degree_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(deriv->coeffs_), i - 1) = i * IOSDoubleArray_Get(self->coeffs_, i);
  }
  return deriv;
}

GeogebraCommonKernelArithmeticPolyFunction *GeogebraCommonKernelArithmeticPolyFunction_buildIntegral(GeogebraCommonKernelArithmeticPolyFunction *self) {
  GeogebraCommonKernelArithmeticPolyFunction *integ = [new_GeogebraCommonKernelArithmeticPolyFunction_initWithInt_(self->degree_ + 1) autorelease];
  for (jint i = 0; i <= self->degree_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(integ->coeffs_), i + 1) = IOSDoubleArray_Get(self->coeffs_, i) / (i + 1);
  }
  return integ;
}

IOSDoubleArray *GeogebraCommonKernelArithmeticPolyFunction_evaluateDerivFuncWithDouble_(GeogebraCommonKernelArithmeticPolyFunction *self, jdouble x) {
  IOSDoubleArray *ret = [IOSDoubleArray arrayWithLength:2];
  *IOSDoubleArray_GetRef(ret, 0) = IOSDoubleArray_Get(nil_chk(self->coeffs_), self->degree_);
  *IOSDoubleArray_GetRef(ret, 1) = 0;
  for (jint i = self->degree_ - 1; i >= 0; i--) {
    *IOSDoubleArray_GetRef(ret, 1) = IOSDoubleArray_Get(ret, 1) * x + IOSDoubleArray_Get(ret, 0);
    *IOSDoubleArray_GetRef(ret, 0) = IOSDoubleArray_Get(ret, 0) * x + IOSDoubleArray_Get(self->coeffs_, i);
  }
  return ret;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelArithmeticPolyFunction)
