//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/prover/AlgoProveDetails.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/factories/UtilFactory.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/RelationNumerical.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/prover/AlgoProveDetails.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "geogebra/common/main/ProverSettings.h"
#include "geogebra/common/util/Prover.h"
#include "java/lang/Boolean.h"
#include "java/util/Comparator.h"
#include "java/util/Date.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

@interface GeogebraCommonKernelProverAlgoProveDetails () {
 @public
  GeogebraCommonKernelGeosGeoElement *root_;
  GeogebraCommonKernelGeosGeoList *list_;
  JavaLangBoolean *result_, *unreadable_;
  JavaUtilHashSet *ndgresult_;
  jboolean relTool_;
  jint processing_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProveDetails, root_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProveDetails, list_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProveDetails, result_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProveDetails, unreadable_, JavaLangBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelProverAlgoProveDetails, ndgresult_, JavaUtilHashSet *)

__attribute__((unused)) static void GeogebraCommonKernelProverAlgoProveDetails_initialCompute(GeogebraCommonKernelProverAlgoProveDetails *self);

@implementation GeogebraCommonKernelProverAlgoProveDetails

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)root {
  GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)root
                                             withBoolean:(jboolean)relationTool {
  GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, root, relationTool);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ProveDetails();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, root_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:list_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getGeoList {
  return list_;
}

- (void)initialCompute {
  GeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
}

- (NSString *)getCommandNameWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return @"ProveDetails";
}

- (void)compute {
  if (processing_ == 1) {
    GeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list undefined (1->2)");
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setUndefined];
    processing_ = 2;
    return;
  }
  if (processing_ == 2) {
    GeogebraCommonMainApp_debugWithNSString_(@"PROCESSING mode: list should be created (2->3)");
    processing_ = 3;
    GeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
  }
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) setDefinedWithBoolean:YES];
  [list_ clear];
  if (result_ != nil) {
    GeogebraCommonKernelGeosGeoBoolean *answer = [new_GeogebraCommonKernelGeosGeoBoolean_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
    [answer setValueWithBoolean:[result_ booleanValue]];
    [list_ addWithGeogebraCommonKernelGeosGeoElement:answer];
    if ([result_ booleanValue]) {
      GeogebraCommonKernelGeosGeoList *ndgConditionsList = [new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
      [ndgConditionsList clear];
      [ndgConditionsList setDrawAsComboBoxWithBoolean:YES];
      id<JavaUtilIterator> it = [((JavaUtilHashSet *) nil_chk(ndgresult_)) iterator];
      JavaUtilTreeSet *sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoText_getComparator()) autorelease];
      while (![((JavaLangBoolean *) nil_chk(unreadable_)) booleanValue] && [((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        GeogebraCommonKernelGeosGeoText *ndgConditionText = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
        GeogebraCommonUtilProver_NDGCondition *ndgc = [((id<JavaUtilIterator>) nil_chk(it)) next];
        if ([((GeogebraCommonUtilProver_NDGCondition *) nil_chk(ndgc)) getReadability] > 0) {
          [ndgc rewriteWithGeogebraCommonKernelConstruction:cons_];
          NSString *s = nil;
          if (relTool_) {
            NSString *cond = [ndgc getCondition];
            if ([@"AreParallel" isEqual:cond]) {
              s = GeogebraCommonKernelRelationNumerical_intersectStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), YES, [self getLoc]);
            }
            else if ([@"AreCollinear" isEqual:cond]) {
              s = GeogebraCommonKernelRelationNumerical_triangleNonDegenerateStringWithGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonKernelGeosGeoPoint_withGeogebraCommonMainLocalization_((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [GeogebraCommonKernelGeosGeoPoint class]), (GeogebraCommonKernelGeosGeoPoint *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 2), [GeogebraCommonKernelGeosGeoPoint class]), [self getLoc]);
            }
            else if ([@"AreEqual" isEqual:cond]) {
              s = GeogebraCommonKernelRelationNumerical_equalityStringWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_withBoolean_withGeogebraCommonMainLocalization_(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), NO, [self getLoc]);
            }
            else if ([@"ArePerpendicular" isEqual:cond]) {
              s = GeogebraCommonKernelRelationNumerical_perpendicularStringWithGeogebraCommonKernelGeosGeoLine_withGeogebraCommonKernelGeosGeoLine_withBoolean_withGeogebraCommonMainLocalization_((GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 0), [GeogebraCommonKernelGeosGeoLine class]), (GeogebraCommonKernelGeosGeoLine *) check_class_cast(IOSObjectArray_Get(nil_chk([ndgc getGeos]), 1), [GeogebraCommonKernelGeosGeoLine class]), NO, [self getLoc]);
            }
          }
          if (s == nil || !relTool_) {
            s = [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getCommandWithNSString:[ndgc getCondition]];
            s = JreStrcat("$C", s, '[');
            for (jint i = 0; i < ((IOSObjectArray *) nil_chk([ndgc getGeos]))->size_; ++i) {
              if (i > 0) {
                s = JreStrcat("$C", s, ',');
              }
              GeogebraCommonKernelGeosGeoElement *geo = IOSObjectArray_Get(nil_chk([ndgc getGeos]), i);
              if (geo != nil) s = JreStrcat("$$", s, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk([ndgc getGeos]), i))) getLabelSimple]);
              else s = JreStrcat("$$", s, @"...");
            }
            s = JreStrcat("$C", s, ']');
            if (relTool_) {
              s = JreStrcat("$C$", [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"not"], ' ', s);
            }
          }
          [ndgConditionText setTextStringWithNSString:s];
          [ndgConditionText setLabelVisibleWithBoolean:NO];
          [ndgConditionText setEuclidianVisibleWithBoolean:NO];
          [sortedSet addWithId:ndgConditionText];
        }
      }
      id<JavaUtilIterator> it2 = [sortedSet iterator];
      while ([((id<JavaUtilIterator>) nil_chk(it2)) hasNext]) {
        [ndgConditionsList addWithGeogebraCommonKernelGeosGeoElement:[it2 next]];
      }
      if ([unreadable_ booleanValue]) {
        GeogebraCommonKernelGeosGeoText *ndgConditionText = [new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons_) autorelease];
        NSString *cond = @"...";
        [ndgConditionText setTextStringWithNSString:cond];
        [ndgConditionText setLabelVisibleWithBoolean:NO];
        [ndgConditionText setEuclidianVisibleWithBoolean:NO];
        [sortedSet addWithId:ndgConditionText];
        [ndgConditionsList addWithGeogebraCommonKernelGeosGeoElement:ndgConditionText];
      }
      if ([ndgConditionsList size] > 0) [list_ addWithGeogebraCommonKernelGeosGeoElement:ndgConditionsList];
    }
  }
}

- (void)dealloc {
  RELEASE_(root_);
  RELEASE_(list_);
  RELEASE_(result_);
  RELEASE_(unreadable_);
  RELEASE_(ndgresult_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:", "AlgoProveDetails", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "AlgoProveDetails", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getGeoList", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "initialCompute", NULL, "V", 0x11, NULL, NULL },
    { "getCommandNameWithGeogebraCommonKernelStringTemplate:", "getCommandName", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "root_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "list_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "result_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "unreadable_", NULL, 0x2, "Ljava.lang.Boolean;", NULL, NULL,  },
    { "ndgresult_", NULL, 0x2, "Ljava.util.HashSet;", NULL, "Ljava/util/HashSet<Lgeogebra/common/util/Prover$NDGCondition;>;",  },
    { "relTool_", NULL, 0x2, "Z", NULL, NULL,  },
    { "processing_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelProverAlgoProveDetails = { 2, "AlgoProveDetails", "geogebra.common.kernel.prover", NULL, 0x1, 8, methods, 7, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelProverAlgoProveDetails;
}

@end

void GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelProverAlgoProveDetails *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->relTool_ = NO;
  self->processing_ = 0;
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) addCASAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  GeogebraCommonKernelProverAlgoProveDetails_set_root_(self, root);
  GeogebraCommonKernelProverAlgoProveDetails_setAndConsume_list_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelProverAlgoProveDetails_initialCompute(self);
  [self compute];
  [self->list_ setLabelWithNSString:label];
}

GeogebraCommonKernelProverAlgoProveDetails *new_GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root) {
  GeogebraCommonKernelProverAlgoProveDetails *self = [GeogebraCommonKernelProverAlgoProveDetails alloc];
  GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  return self;
}

void GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelProverAlgoProveDetails *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root, jboolean relationTool) {
  GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, root);
  self->relTool_ = relationTool;
}

GeogebraCommonKernelProverAlgoProveDetails *new_GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoElement *root, jboolean relationTool) {
  GeogebraCommonKernelProverAlgoProveDetails *self = [GeogebraCommonKernelProverAlgoProveDetails alloc];
  GeogebraCommonKernelProverAlgoProveDetails_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoElement_withBoolean_(self, cons, label, root, relationTool);
  return self;
}

void GeogebraCommonKernelProverAlgoProveDetails_initialCompute(GeogebraCommonKernelProverAlgoProveDetails *self) {
  GeogebraCommonUtilProver *p = [((GeogebraCommonFactoriesUtilFactory *) nil_chk(GeogebraCommonFactoriesUtilFactory_get_prototype_())) newProver];
  if ([@"OpenGeoProver" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) {
    if ([@"Wu" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverMethod_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_WU()];
    else if ([@"Area" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverMethod_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_OPENGEOPROVER_AREA()];
  }
  else if ([@"Botana" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_BOTANAS_PROVER()];
  else if ([@"Recio" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_RECIOS_PROVER()];
  else if ([@"PureSymbolic" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_PURE_SYMBOLIC_PROVER()];
  else if ([@"Auto" equalsIgnoreCase:GeogebraCommonMainProverSettings_get_proverEngine_()]) [((GeogebraCommonUtilProver *) nil_chk(p)) setProverEngineWithGeogebraCommonUtilProver_ProverEngineEnum:GeogebraCommonUtilProver_ProverEngineEnum_get_AUTO()];
  [((GeogebraCommonUtilProver *) nil_chk(p)) setTimeoutWithInt:GeogebraCommonMainProverSettings_get_proverTimeout_()];
  [p setConstructionWithGeogebraCommonKernelConstruction:self->cons_];
  [p setStatementWithGeogebraCommonKernelGeosGeoElement:self->root_];
  [p setReturnExtraNDGsWithBoolean:YES];
  JavaUtilDate *date = [new_JavaUtilDate_init() autorelease];
  jlong startTime = [date getTime];
  [p compute];
  date = [new_JavaUtilDate_init() autorelease];
  jlong elapsedTime = [date getTime] - startTime;
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$J$", @"Benchmarking: ", elapsedTime, @" ms"));
  GeogebraCommonKernelProverAlgoProveDetails_set_result_(self, [p getYesNoAnswer]);
  GeogebraCommonKernelProverAlgoProveDetails_set_ndgresult_(self, [p getNDGConditions]);
  if ([p getProofResult] == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE_NDG_UNREADABLE()) {
    GeogebraCommonKernelProverAlgoProveDetails_set_unreadable_(self, JavaLangBoolean_valueOfWithBoolean_(YES));
  }
  if ([p getProofResult] == GeogebraCommonUtilProver_ProofResultEnum_get_TRUE()) {
    GeogebraCommonKernelProverAlgoProveDetails_set_unreadable_(self, JavaLangBoolean_valueOfWithBoolean_(NO));
  }
  if ([p getProofResult] == GeogebraCommonUtilProver_ProofResultEnum_get_PROCESSING()) {
    self->processing_ = 1;
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$@", @"Statement is ", self->result_));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelProverAlgoProveDetails)
