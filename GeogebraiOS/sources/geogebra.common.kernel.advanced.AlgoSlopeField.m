//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/AlgoSlopeField.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/MyPoint.h"
#include "geogebra/common/kernel/advanced/AlgoSlopeField.h"
#include "geogebra/common/kernel/algos/AlgoDenominator.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoNumerator.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLocus.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelAdvancedAlgoSlopeField () {
 @public
  id<GeogebraCommonKernelArithmeticFunctionalNVar> func_;
  GeogebraCommonKernelGeosGeoNumeric *n_, *lengthRatio_, *minX_, *minY_, *maxX_, *maxY_;
  GeogebraCommonKernelGeosGeoLocus *locus_;
  GeogebraCommonKernelAlgosAlgoNumerator *numAlgo_;
  GeogebraCommonKernelAlgosAlgoDenominator *denAlgo_;
  id<GeogebraCommonKernelArithmeticFunctionalNVar> num_, den_;
  jboolean quotient_;
  GeogebraCommonEuclidianEuclidianView *mainView_;
}

- (void)drawLineWithDouble:(jdouble)dx
                withDouble:(jdouble)dy
                withDouble:(jdouble)length
                withDouble:(jdouble)xx
                withDouble:(jdouble)yy;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, func_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, n_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, lengthRatio_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, minX_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, minY_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, maxX_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, maxY_, GeogebraCommonKernelGeosGeoNumeric *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, locus_, GeogebraCommonKernelGeosGeoLocus *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, numAlgo_, GeogebraCommonKernelAlgosAlgoNumerator *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, denAlgo_, GeogebraCommonKernelAlgosAlgoDenominator *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, num_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, den_, id<GeogebraCommonKernelArithmeticFunctionalNVar>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedAlgoSlopeField, mainView_, GeogebraCommonEuclidianEuclidianView *)

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoSlopeField_compute(GeogebraCommonKernelAdvancedAlgoSlopeField *self);

__attribute__((unused)) static void GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelAdvancedAlgoSlopeField *self, jdouble dx, jdouble dy, jdouble length, jdouble xx, jdouble yy);

@implementation GeogebraCommonKernelAdvancedAlgoSlopeField

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
        withGeogebraCommonKernelArithmeticFunctionalNVar:(id<GeogebraCommonKernelArithmeticFunctionalNVar>)func
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)n
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)lengthRatio
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)minX
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)minY
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)maxX
                  withGeogebraCommonKernelGeosGeoNumeric:(GeogebraCommonKernelGeosGeoNumeric *)maxY {
  GeogebraCommonKernelAdvancedAlgoSlopeField_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, func, n, lengthRatio, minX, minY, maxX, maxY);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_SlopeField();
}

- (void)setInputOutput {
  jint noOfInputs = 1;
  if (n_ != nil) noOfInputs++;
  if (lengthRatio_ != nil) noOfInputs++;
  if (minX_ != nil) noOfInputs++;
  if (minY_ != nil) noOfInputs++;
  if (maxX_ != nil) noOfInputs++;
  if (maxY_ != nil) noOfInputs++;
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:noOfInputs type:GeogebraCommonKernelGeosGeoElement_class_()]);
  jint i = 0;
  IOSObjectArray_Set(input_, i++, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [GeogebraCommonKernelGeosGeoElement class]));
  if (n_ != nil) IOSObjectArray_Set(input_, i++, n_);
  if (lengthRatio_ != nil) IOSObjectArray_Set(input_, i++, lengthRatio_);
  if (minX_ != nil) IOSObjectArray_Set(input_, i++, minX_);
  if (minY_ != nil) IOSObjectArray_Set(input_, i++, minY_);
  if (maxX_ != nil) IOSObjectArray_Set(input_, i++, maxX_);
  if (maxY_ != nil) IOSObjectArray_Set(input_, i++, maxY_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:locus_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoLocus *)getResult {
  return locus_;
}

- (void)compute {
  GeogebraCommonKernelAdvancedAlgoSlopeField_compute(self);
}

- (void)drawLineWithDouble:(jdouble)dx
                withDouble:(jdouble)dy
                withDouble:(jdouble)length
                withDouble:(jdouble)xx
                withDouble:(jdouble)yy {
  GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, dx, dy, length, xx, yy);
}

- (void)remove {
  if (removed_) return;
  [super remove];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [GeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:numAlgo_];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(func_, [GeogebraCommonKernelGeosGeoElement class])))) removeAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:denAlgo_];
}

- (void)dealloc {
  RELEASE_(func_);
  RELEASE_(n_);
  RELEASE_(lengthRatio_);
  RELEASE_(minX_);
  RELEASE_(minY_);
  RELEASE_(maxX_);
  RELEASE_(maxY_);
  RELEASE_(locus_);
  RELEASE_(al_);
  RELEASE_(numAlgo_);
  RELEASE_(denAlgo_);
  RELEASE_(num_);
  RELEASE_(den_);
  RELEASE_(mainView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelArithmeticFunctionalNVar:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:withGeogebraCommonKernelGeosGeoNumeric:", "AlgoSlopeField", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoLocus;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "drawLineWithDouble:withDouble:withDouble:withDouble:withDouble:", "drawLine", "V", 0x2, NULL, NULL },
    { "remove", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "func_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "lengthRatio_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "minX_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "minY_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "maxX_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "maxY_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoNumeric;", NULL, NULL,  },
    { "locus_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLocus;", NULL, NULL,  },
    { "al_", NULL, 0x0, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/MyPoint;>;",  },
    { "numAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoNumerator;", NULL, NULL,  },
    { "denAlgo_", NULL, 0x2, "Lgeogebra.common.kernel.algos.AlgoDenominator;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "den_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.FunctionalNVar;", NULL, NULL,  },
    { "quotient_", NULL, 0x2, "Z", NULL, NULL,  },
    { "mainView_", NULL, 0x2, "Lgeogebra.common.euclidian.EuclidianView;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedAlgoSlopeField = { 2, "AlgoSlopeField", "geogebra.common.kernel.advanced", NULL, 0x1, 7, methods, 15, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedAlgoSlopeField;
}

@end

void GeogebraCommonKernelAdvancedAlgoSlopeField_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelAdvancedAlgoSlopeField *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> func, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *lengthRatio, GeogebraCommonKernelGeosGeoNumeric *minX, GeogebraCommonKernelGeosGeoNumeric *minY, GeogebraCommonKernelGeosGeoNumeric *maxX, GeogebraCommonKernelGeosGeoNumeric *maxY) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_func_(self, func);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_n_(self, n);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_lengthRatio_(self, lengthRatio);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_minX_(self, minX);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_minY_(self, minY);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_maxX_(self, maxX);
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_maxY_(self, maxY);
  GeogebraCommonKernelAdvancedAlgoSlopeField_setAndConsume_numAlgo_(self, new_GeogebraCommonKernelAlgosAlgoNumerator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(cons, func));
  GeogebraCommonKernelAdvancedAlgoSlopeField_setAndConsume_denAlgo_(self, new_GeogebraCommonKernelAlgosAlgoDenominator_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelArithmeticFunctionalNVar_(cons, func));
  [((GeogebraCommonKernelConstruction *) nil_chk(cons)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->numAlgo_];
  [cons removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:self->denAlgo_];
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_num_(self, (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self->numAlgo_ getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar)));
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_den_(self, (id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(IOSObjectArray_Get(nil_chk([self->denAlgo_ getGeoElements]), 0), @protocol(GeogebraCommonKernelArithmeticFunctionalNVar)));
  self->quotient_ = ([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->num_)) isDefined] && [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->den_)) isDefined]);
  if (!self->quotient_) {
    [cons removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self->numAlgo_];
    [cons removeFromAlgorithmListWithGeogebraCommonKernelAlgosAlgoElement:self->denAlgo_];
  }
  GeogebraCommonKernelAdvancedAlgoSlopeField_setAndConsume_locus_(self, new_GeogebraCommonKernelGeosGeoLocus_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelAdvancedAlgoSlopeField_compute(self);
  [self->locus_ setLabelWithNSString:label];
  [cons registerEuclidianViewCEWithGeogebraCommonKernelEuclidianViewCE:self];
}

GeogebraCommonKernelAdvancedAlgoSlopeField *new_GeogebraCommonKernelAdvancedAlgoSlopeField_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelArithmeticFunctionalNVar> func, GeogebraCommonKernelGeosGeoNumeric *n, GeogebraCommonKernelGeosGeoNumeric *lengthRatio, GeogebraCommonKernelGeosGeoNumeric *minX, GeogebraCommonKernelGeosGeoNumeric *minY, GeogebraCommonKernelGeosGeoNumeric *maxX, GeogebraCommonKernelGeosGeoNumeric *maxY) {
  GeogebraCommonKernelAdvancedAlgoSlopeField *self = [GeogebraCommonKernelAdvancedAlgoSlopeField alloc];
  GeogebraCommonKernelAdvancedAlgoSlopeField_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelArithmeticFunctionalNVar_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_withGeogebraCommonKernelGeosGeoNumeric_(self, cons, label, func, n, lengthRatio, minX, minY, maxX, maxY);
  return self;
}

void GeogebraCommonKernelAdvancedAlgoSlopeField_compute(GeogebraCommonKernelAdvancedAlgoSlopeField *self) {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(self->func_, [GeogebraCommonKernelGeosGeoElement class])))) isDefined]) {
    [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setUndefined];
    return;
  }
  if (self->al_ == nil) GeogebraCommonKernelAdvancedAlgoSlopeField_setAndConsume_al_(self, new_JavaUtilArrayList_init());
  else [self->al_ clear];
  GeogebraCommonKernelAdvancedAlgoSlopeField_set_mainView_(self, nil);
  jdouble xmax = -JavaLangDouble_MAX_VALUE;
  jdouble ymin = JavaLangDouble_MAX_VALUE;
  jdouble xmin = JavaLangDouble_MAX_VALUE;
  jdouble ymax = -JavaLangDouble_MAX_VALUE;
  if (self->minX_ != nil) {
    xmax = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->maxX_)) getDouble];
    ymax = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->maxY_)) getDouble];
    xmin = [self->minX_ getDouble];
    ymin = [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(self->minY_)) getDouble];
    GeogebraCommonKernelAdvancedAlgoSlopeField_set_mainView_(self, [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getEuclidianView1]);
    if ([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) hasEuclidianView2WithInt:1] && [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1])) isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:self->locus_] && ![((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:self->locus_]) {
      GeogebraCommonKernelAdvancedAlgoSlopeField_set_mainView_(self, [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1]);
    }
  }
  else {
    GeogebraCommonEuclidianEuclidianView *view = [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) getApplication])) getEuclidianView1];
    if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view)) isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:self->locus_]) {
      GeogebraCommonKernelAdvancedAlgoSlopeField_set_mainView_(self, view);
      xmax = JavaLangMath_maxWithDouble_withDouble_(xmax, [view toRealWorldCoordXWithDouble:([view getWidth])]);
      ymax = JavaLangMath_maxWithDouble_withDouble_(ymax, [view toRealWorldCoordYWithDouble:0]);
      xmin = JavaLangMath_minWithDouble_withDouble_(xmin, [view toRealWorldCoordXWithDouble:0]);
      ymin = JavaLangMath_minWithDouble_withDouble_(ymin, [view toRealWorldCoordYWithDouble:([view getHeight])]);
    }
    if ([((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) hasEuclidianView2WithInt:1]) {
      GeogebraCommonEuclidianEuclidianView *view2 = [((GeogebraCommonMainApp *) nil_chk([self->kernel_ getApplication])) getEuclidianView2WithInt:1];
      if ([((GeogebraCommonEuclidianEuclidianView *) nil_chk(view2)) isVisibleInThisViewWithGeogebraCommonKernelGeosGeoElement:self->locus_]) {
        if (self->mainView_ == nil) GeogebraCommonKernelAdvancedAlgoSlopeField_set_mainView_(self, view2);
        xmax = JavaLangMath_maxWithDouble_withDouble_(xmax, [view2 toRealWorldCoordXWithDouble:([view getWidth])]);
        ymax = JavaLangMath_maxWithDouble_withDouble_(ymax, [view2 toRealWorldCoordYWithDouble:0]);
        xmin = JavaLangMath_minWithDouble_withDouble_(xmin, [view2 toRealWorldCoordXWithDouble:0]);
        ymin = JavaLangMath_minWithDouble_withDouble_(ymin, [view2 toRealWorldCoordYWithDouble:([view getHeight])]);
      }
    }
  }
  if (xmax > -JavaLangDouble_MAX_VALUE) {
    jint nD = J2ObjCFpToInt((self->n_ == nil ? 39 : [self->n_ getDouble] - 1));
    if (nD < 2 || nD > 100) {
      nD = 39;
    }
    jdouble xStep = (xmax - xmin) / nD;
    jdouble yStep = (ymax - ymin) / nD;
    jdouble length = (self->lengthRatio_ == nil ? 0.5 : [self->lengthRatio_ getDouble]);
    if (length < 0 || length > 1 || JavaLangDouble_isInfiniteWithDouble_(length) || JavaLangDouble_isNaNWithDouble_(length)) {
      length = 0.5;
    }
    length = JavaLangMath_minWithDouble_withDouble_(xStep, yStep * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) getScaleRatio]) * length * 0.5;
    jboolean funcOfJustY = [self->func_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->func_, [GeogebraCommonKernelGeosGeoFunction class])))) isFunctionOfY];
    for (jdouble xx = xmin; xx < xmax + xStep / 2; xx += xStep) {
      for (jdouble yy = ymin; yy < ymax + yStep / 2; yy += yStep) {
        IOSDoubleArray *input1 = [IOSDoubleArray arrayWithDoubles:(jdouble[]){ xx, yy } count:2];
        if ([((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->num_)) isDefined] && [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->den_)) isDefined]) {
          jboolean numfuncOfJustY = [self->num_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->num_, [GeogebraCommonKernelGeosGeoFunction class])) isFunctionOfY];
          jboolean denfuncOfJustY = [self->den_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]] && [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->den_, [GeogebraCommonKernelGeosGeoFunction class])) isFunctionOfY];
          jdouble numD = numfuncOfJustY ? [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->num_, [GeogebraCommonKernelGeosGeoFunction class])) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)] : [self->num_ evaluateWithDoubleArray:input1];
          jdouble denD = denfuncOfJustY ? [((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->den_, [GeogebraCommonKernelGeosGeoFunction class])) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)] : [self->den_ evaluateWithDoubleArray:input1];
          if (GeogebraCommonKernelKernel_isZeroWithDouble_(denD)) {
            if (GeogebraCommonKernelKernel_isZeroWithDouble_(numD)) {
              [((JavaUtilArrayList *) nil_chk(self->al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx, yy, NO) autorelease]];
              [self->al_ addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx, yy, YES) autorelease]];
            }
            else {
              GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 0, 1, length, xx, yy);
            }
          }
          else {
            jdouble gradient = numD / denD;
            GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 1, gradient, length, xx, yy);
          }
        }
        else {
          jdouble gradient;
          if (funcOfJustY) {
            gradient = [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->func_, [GeogebraCommonKernelGeosGeoFunction class])))) evaluateWithDouble:IOSDoubleArray_Get(input1, 1)];
          }
          else {
            gradient = [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) nil_chk(self->func_)) evaluateWithDoubleArray:input1];
          }
          GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(self, 1, gradient, length, xx, yy);
        }
      }
    }
  }
  [((GeogebraCommonKernelGeosGeoLocus *) nil_chk(self->locus_)) setPointsWithJavaUtilArrayList:self->al_];
  [self->locus_ setDefinedWithBoolean:YES];
}

void GeogebraCommonKernelAdvancedAlgoSlopeField_drawLineWithDouble_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelAdvancedAlgoSlopeField *self, jdouble dx, jdouble dy, jdouble length, jdouble xx, jdouble yy) {
  jdouble dyScaled = dy * [((GeogebraCommonEuclidianEuclidianView *) nil_chk(self->mainView_)) getScaleRatio];
  jdouble coeff = JavaLangMath_sqrtWithDouble_(dx * dx + dyScaled * dyScaled);
  dx *= length / coeff;
  dy *= length / coeff;
  [((JavaUtilArrayList *) nil_chk(self->al_)) addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx - dx, yy - dy, NO) autorelease]];
  [self->al_ addWithId:[new_GeogebraCommonKernelMyPoint_initWithDouble_withDouble_withBoolean_(xx + dx, yy + dy, YES) autorelease]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedAlgoSlopeField)
