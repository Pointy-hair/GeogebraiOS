//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoFitSin.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/statistics/AlgoFitSin.h"
#include "geogebra/common/kernel/statistics/RegressionMath.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/plugin/Operation.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

#define GeogebraCommonKernelStatisticsAlgoFitSin_NOISEKILLER 0.2
#define GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORDIV 3.0
#define GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORMULT 2.0
#define GeogebraCommonKernelStatisticsAlgoFitSin_MAXITERATIONS 200
#define GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON 1.0E-14
#define GeogebraCommonKernelStatisticsAlgoFitSin_EPSSING 1.0E-20
#define GeogebraCommonKernelStatisticsAlgoFitSin_PI 3.141592653589793
#define GeogebraCommonKernelStatisticsAlgoFitSin_TWO_PI 6.283185307179586

@interface GeogebraCommonKernelStatisticsAlgoFitSin () {
 @public
  GeogebraCommonKernelGeosGeoList *geolist_;
  GeogebraCommonKernelGeosGeoFunction *geofunction_;
}

+ (jdouble)sinWithDouble:(jdouble)x
              withDouble:(jdouble)c
              withDouble:(jdouble)d;

+ (jdouble)cosWithDouble:(jdouble)x
              withDouble:(jdouble)c
              withDouble:(jdouble)d;

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)a
            withDouble:(jdouble)b
            withDouble:(jdouble)c
            withDouble:(jdouble)d;

+ (jdouble)df_a;

+ (jdouble)df_bWithDouble:(jdouble)x
               withDouble:(jdouble)c
               withDouble:(jdouble)d;

+ (jdouble)df_cWithDouble:(jdouble)x
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d;

+ (jdouble)df_dWithDouble:(jdouble)x
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d;

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)a
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d;

+ (jdouble)betaWithDoubleArray:(IOSDoubleArray *)x
               withDoubleArray:(IOSDoubleArray *)y
                    withDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)c
                    withDouble:(jdouble)d;

+ (jint)directionWithDouble:(jdouble)y1
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)y3;

- (void)getPoints;

+ (jboolean)nearmaxminWithDouble:(jdouble)a
                      withDouble:(jdouble)b
                         withInt:(jint)state
                         withInt:(jint)current
                      withDouble:(jdouble)max
                      withDouble:(jdouble)min;

+ (void)errorMsgWithNSString:(NSString *)s;

+ (jint)findNumberOfHalfPeriodsWithInt:(jint)k
                               withInt:(jint)xmin
                               withInt:(jint)xmax;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitSin, geolist_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitSin, geofunction_, GeogebraCommonKernelGeosGeoFunction *)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, NOISEKILLER, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, LMFACTORDIV, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, LMFACTORMULT, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, MAXITERATIONS, jint)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, EPSILON, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, EPSSING, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, PI, jdouble)

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, TWO_PI, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_a_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, a_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, a_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_b_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, b_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, b_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_c_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, c_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, c_, jdouble)

static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_d_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, d_, jdouble)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, d_, jdouble)

static IOSDoubleArray *GeogebraCommonKernelStatisticsAlgoFitSin_xd_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, xd_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitSin, xd_, IOSDoubleArray *)

static IOSDoubleArray *GeogebraCommonKernelStatisticsAlgoFitSin_yd_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, yd_, IOSDoubleArray *)
J2OBJC_STATIC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoFitSin, yd_, IOSDoubleArray *)

static jint GeogebraCommonKernelStatisticsAlgoFitSin_size_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, size_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, size_, jint)

static jint GeogebraCommonKernelStatisticsAlgoFitSin_iterations_;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, iterations_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, iterations_, jint)

static jboolean GeogebraCommonKernelStatisticsAlgoFitSin_error_ = NO;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, error_, jboolean)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoFitSin, error_, jboolean)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitSin_compute(GeogebraCommonKernelStatisticsAlgoFitSin *self);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_sinWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_cosWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_fWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_a();

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_bWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_cWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_dWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble a, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static jdouble GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *x, IOSDoubleArray *y, jdouble a, jdouble b, jdouble c, jdouble d);

__attribute__((unused)) static jint GeogebraCommonKernelStatisticsAlgoFitSin_directionWithDouble_withDouble_withDouble_(jdouble y1, jdouble y2, jdouble y3);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitSin_getPoints(GeogebraCommonKernelStatisticsAlgoFitSin *self);

__attribute__((unused)) static jboolean GeogebraCommonKernelStatisticsAlgoFitSin_nearmaxminWithDouble_withDouble_withInt_withInt_withDouble_withDouble_(jdouble a, jdouble b, jint state, jint current, jdouble max, jdouble min);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(NSString *s);

__attribute__((unused)) static jint GeogebraCommonKernelStatisticsAlgoFitSin_findNumberOfHalfPeriodsWithInt_withInt_withInt_(jint k, jint xmin, jint xmax);

@implementation GeogebraCommonKernelStatisticsAlgoFitSin

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)geolist {
  GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_FitSin();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, geolist_);
  [self setOnlyOutputWithGeogebraCommonKernelGeosToGeoElement:geofunction_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoFunction *)getFitSin {
  return geofunction_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoFitSin_compute(self);
}

+ (void)doReg {
  GeogebraCommonKernelStatisticsAlgoFitSin_doReg();
}

+ (void)findParameters {
  GeogebraCommonKernelStatisticsAlgoFitSin_findParameters();
}

+ (void)sinus_Reg {
  GeogebraCommonKernelStatisticsAlgoFitSin_sinus_Reg();
}

+ (jdouble)sinWithDouble:(jdouble)x
              withDouble:(jdouble)c
              withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_sinWithDouble_withDouble_withDouble_(x, c, d);
}

+ (jdouble)cosWithDouble:(jdouble)x
              withDouble:(jdouble)c
              withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_cosWithDouble_withDouble_withDouble_(x, c, d);
}

+ (jdouble)fWithDouble:(jdouble)x
            withDouble:(jdouble)a
            withDouble:(jdouble)b
            withDouble:(jdouble)c
            withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_fWithDouble_withDouble_withDouble_withDouble_withDouble_(x, a, b, c, d);
}

+ (jdouble)df_a {
  return GeogebraCommonKernelStatisticsAlgoFitSin_df_a();
}

+ (jdouble)df_bWithDouble:(jdouble)x
               withDouble:(jdouble)c
               withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_df_bWithDouble_withDouble_withDouble_(x, c, d);
}

+ (jdouble)df_cWithDouble:(jdouble)x
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_df_cWithDouble_withDouble_withDouble_withDouble_(x, b, c, d);
}

+ (jdouble)df_dWithDouble:(jdouble)x
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_df_dWithDouble_withDouble_withDouble_withDouble_(x, b, c, d);
}

+ (jdouble)betaWithDouble:(jdouble)x
               withDouble:(jdouble)y
               withDouble:(jdouble)a
               withDouble:(jdouble)b
               withDouble:(jdouble)c
               withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x, y, a, b, c, d);
}

+ (jdouble)beta2WithDoubleArray:(IOSDoubleArray *)x
                withDoubleArray:(IOSDoubleArray *)y
                     withDouble:(jdouble)a
                     withDouble:(jdouble)b
                     withDouble:(jdouble)c
                     withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(x, y, a, b, c, d);
}

+ (jdouble)betaWithDoubleArray:(IOSDoubleArray *)x
               withDoubleArray:(IOSDoubleArray *)y
                    withDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)c
                    withDouble:(jdouble)d {
  return GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(x, y, a, b, c, d);
}

+ (jint)directionWithDouble:(jdouble)y1
                 withDouble:(jdouble)y2
                 withDouble:(jdouble)y3 {
  return GeogebraCommonKernelStatisticsAlgoFitSin_directionWithDouble_withDouble_withDouble_(y1, y2, y3);
}

- (void)getPoints {
  GeogebraCommonKernelStatisticsAlgoFitSin_getPoints(self);
}

+ (jboolean)nearmaxminWithDouble:(jdouble)a
                      withDouble:(jdouble)b
                         withInt:(jint)state
                         withInt:(jint)current
                      withDouble:(jdouble)max
                      withDouble:(jdouble)min {
  return GeogebraCommonKernelStatisticsAlgoFitSin_nearmaxminWithDouble_withDouble_withInt_withInt_withDouble_withDouble_(a, b, state, current, max, min);
}

+ (void)errorMsgWithNSString:(NSString *)s {
  GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(s);
}

+ (jint)findNumberOfHalfPeriodsWithInt:(jint)k
                               withInt:(jint)xmin
                               withInt:(jint)xmax {
  return GeogebraCommonKernelStatisticsAlgoFitSin_findNumberOfHalfPeriodsWithInt_withInt_withInt_(k, xmin, xmax);
}

- (void)dealloc {
  RELEASE_(geolist_);
  RELEASE_(geofunction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoFitSin", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "AlgoFitSin", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getFitSin", NULL, "Lgeogebra.common.kernel.geos.GeoFunction;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "doReg", NULL, "V", 0x19, NULL, NULL },
    { "findParameters", NULL, "V", 0x19, NULL, NULL },
    { "sinus_Reg", NULL, "V", 0x19, NULL, NULL },
    { "sinWithDouble:withDouble:withDouble:", "sin", "D", 0x1a, NULL, NULL },
    { "cosWithDouble:withDouble:withDouble:", "cos", "D", 0x1a, NULL, NULL },
    { "fWithDouble:withDouble:withDouble:withDouble:withDouble:", "f", "D", 0x1a, NULL, NULL },
    { "df_a", NULL, "D", 0x1a, NULL, NULL },
    { "df_bWithDouble:withDouble:withDouble:", "df_b", "D", 0x1a, NULL, NULL },
    { "df_cWithDouble:withDouble:withDouble:withDouble:", "df_c", "D", 0x1a, NULL, NULL },
    { "df_dWithDouble:withDouble:withDouble:withDouble:", "df_d", "D", 0x1a, NULL, NULL },
    { "betaWithDouble:withDouble:withDouble:withDouble:withDouble:withDouble:", "beta", "D", 0x1a, NULL, NULL },
    { "beta2WithDoubleArray:withDoubleArray:withDouble:withDouble:withDouble:withDouble:", "beta2", "D", 0x19, NULL, NULL },
    { "betaWithDoubleArray:withDoubleArray:withDouble:withDouble:withDouble:withDouble:", "beta", "D", 0x1a, NULL, NULL },
    { "directionWithDouble:withDouble:withDouble:", "direction", "I", 0x1a, NULL, NULL },
    { "getPoints", NULL, "V", 0x12, NULL, NULL },
    { "nearmaxminWithDouble:withDouble:withInt:withInt:withDouble:withDouble:", "nearmaxmin", "Z", 0x1a, NULL, NULL },
    { "errorMsgWithNSString:", "errorMsg", "V", 0x1a, NULL, NULL },
    { "findNumberOfHalfPeriodsWithInt:withInt:withInt:", "findNumberOfHalfPeriods", "I", 0x1a, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "NOISEKILLER_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_NOISEKILLER },
    { "LMFACTORDIV_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORDIV },
    { "LMFACTORMULT_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORMULT },
    { "MAXITERATIONS_", NULL, 0x1a, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonKernelStatisticsAlgoFitSin_MAXITERATIONS },
    { "EPSILON_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON },
    { "EPSSING_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_EPSSING },
    { "PI_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_PI },
    { "TWO_PI_", NULL, 0x1a, "D", NULL, NULL, .constantValue.asDouble = GeogebraCommonKernelStatisticsAlgoFitSin_TWO_PI },
    { "a_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitSin_a_, NULL,  },
    { "b_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitSin_b_, NULL,  },
    { "c_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitSin_c_, NULL,  },
    { "d_", NULL, 0xa, "D", &GeogebraCommonKernelStatisticsAlgoFitSin_d_, NULL,  },
    { "xd_", NULL, 0xa, "[D", &GeogebraCommonKernelStatisticsAlgoFitSin_xd_, NULL,  },
    { "yd_", NULL, 0xa, "[D", &GeogebraCommonKernelStatisticsAlgoFitSin_yd_, NULL,  },
    { "size_", NULL, 0xa, "I", &GeogebraCommonKernelStatisticsAlgoFitSin_size_, NULL,  },
    { "iterations_", NULL, 0xa, "I", &GeogebraCommonKernelStatisticsAlgoFitSin_iterations_, NULL,  },
    { "error_", NULL, 0xa, "Z", &GeogebraCommonKernelStatisticsAlgoFitSin_error_, NULL,  },
    { "geolist_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "geofunction_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoFitSin = { 2, "AlgoFitSin", "geogebra.common.kernel.statistics", NULL, 0x1, 24, methods, 19, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoFitSin;
}

@end

void GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitSin *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoFitSin *new_GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitSin *self = [GeogebraCommonKernelStatisticsAlgoFitSin alloc];
  GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelStatisticsAlgoFitSin *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoFitSin_set_geolist_(self, geolist);
  GeogebraCommonKernelStatisticsAlgoFitSin_setAndConsume_geofunction_(self, new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoFitSin_compute(self);
}

GeogebraCommonKernelStatisticsAlgoFitSin *new_GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *geolist) {
  GeogebraCommonKernelStatisticsAlgoFitSin *self = [GeogebraCommonKernelStatisticsAlgoFitSin alloc];
  GeogebraCommonKernelStatisticsAlgoFitSin_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, geolist);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoFitSin_compute(GeogebraCommonKernelStatisticsAlgoFitSin *self) {
  GeogebraCommonKernelStatisticsAlgoFitSin_size_ = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) size];
  GeogebraCommonKernelStatisticsAlgoFitSin_error_ = NO;
  if (![self->geolist_ isDefined] || (GeogebraCommonKernelStatisticsAlgoFitSin_size_ < 4)) {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(@"List not properly defined or too small (4 points needed).");
    return;
  }
  @try {
    GeogebraCommonKernelStatisticsAlgoFitSin_getPoints(self);
    GeogebraCommonKernelStatisticsAlgoFitSin_doReg();
  }
  @catch (JavaLangException *all) {
    GeogebraCommonKernelStatisticsAlgoFitSin_error_ = YES;
  }
  if (!GeogebraCommonKernelStatisticsAlgoFitSin_error_) {
    GeogebraCommonKernelArithmeticMyDouble *A = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitSin_a_) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *B = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitSin_b_) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *C = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitSin_c_) autorelease];
    GeogebraCommonKernelArithmeticMyDouble *D = [new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(self->kernel_, GeogebraCommonKernelStatisticsAlgoFitSin_d_) autorelease];
    GeogebraCommonKernelArithmeticFunctionVariable *X = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(self->kernel_) autorelease];
    id<GeogebraCommonKernelArithmeticExpressionValue> expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, C, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), X) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, expr, GeogebraCommonPluginOperationEnum_get_PLUS(), D) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, expr, GeogebraCommonPluginOperationEnum_get_SIN(), nil) autorelease];
    expr = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, B, GeogebraCommonPluginOperationEnum_get_MULTIPLY(), expr) autorelease];
    GeogebraCommonKernelArithmeticExpressionNode *node = [new_GeogebraCommonKernelArithmeticExpressionNode_initWithGeogebraCommonKernelKernel_withGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonPluginOperationEnum_withGeogebraCommonKernelArithmeticExpressionValue_(self->kernel_, A, GeogebraCommonPluginOperationEnum_get_PLUS(), expr) autorelease];
    GeogebraCommonKernelArithmeticFunction *f = [new_GeogebraCommonKernelArithmeticFunction_initWithGeogebraCommonKernelArithmeticExpressionNode_withGeogebraCommonKernelArithmeticFunctionVariable_(node, X) autorelease];
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setFunctionWithGeogebraCommonKernelArithmeticFunction:f];
    [self->geofunction_ setDefinedWithBoolean:YES];
  }
  else {
    [((GeogebraCommonKernelGeosGeoFunction *) nil_chk(self->geofunction_)) setUndefined];
    return;
  }
}

void GeogebraCommonKernelStatisticsAlgoFitSin_doReg() {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  GeogebraCommonKernelStatisticsAlgoFitSin_findParameters();
  GeogebraCommonKernelStatisticsAlgoFitSin_sinus_Reg();
}

void GeogebraCommonKernelStatisticsAlgoFitSin_findParameters() {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  jdouble y;
  jdouble min_max_distance;
  jint numberofhalfperiods = 1;
  jint xmax_abs = 0, xmin_abs = 0;
  GeogebraCommonKernelStatisticsAlgoFitSin_size_ = ((IOSDoubleArray *) nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_xd_))->size_;
  jdouble sum = 0.0, max = -JavaLangDouble_MAX_VALUE, min = JavaLangDouble_MAX_VALUE;
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitSin_size_; i++) {
    y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_yd_), i);
    sum += y;
    if (y > max) {
      max = y;
      xmax_abs = i;
    }
    if (y < min) {
      min = y;
      xmin_abs = i;
    }
  }
  GeogebraCommonKernelStatisticsAlgoFitSin_a_ = sum / GeogebraCommonKernelStatisticsAlgoFitSin_size_;
  GeogebraCommonKernelStatisticsAlgoFitSin_b_ = (max - min) / 2.0;
  jint xmax = xmax_abs, xmin = xmin_abs;
  jint state = 0;
  jint current = 0;
  jint changes = 0;
  for (jint i = 2; i < GeogebraCommonKernelStatisticsAlgoFitSin_size_; i++) {
    y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_yd_), i);
    current = GeogebraCommonKernelStatisticsAlgoFitSin_directionWithDouble_withDouble_withDouble_(IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_yd_, i - 2), IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_yd_, i - 1), y);
    if ((current == 1) || (current == -1)) {
      if (state == 0) {
        state = current;
      }
      else {
        if ((current != state) && (current != 0)) {
          if (GeogebraCommonKernelStatisticsAlgoFitSin_nearmaxminWithDouble_withDouble_withInt_withInt_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, state, current, max, min)) {
            changes++;
            state = current;
          }
        }
      }
      if (changes >= 2) {
      }
      else {
        if (current == 1) {
          max = y;
          xmax = i;
        }
        else if (current == -1) {
          min = y;
          xmin = i;
        }
      }
    }
    else {
    }
  }
  min_max_distance = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmax) - IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmin));
  if (changes <= 1) {
    xmin = xmin_abs;
    xmax = xmax_abs;
    min_max_distance = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmin) - IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmax));
    numberofhalfperiods = GeogebraCommonKernelStatisticsAlgoFitSin_findNumberOfHalfPeriodsWithInt_withInt_withInt_(GeogebraCommonKernelStatisticsAlgoFitSin_size_ / 4, xmin, xmax);
  }
  GeogebraCommonKernelStatisticsAlgoFitSin_c_ = GeogebraCommonKernelStatisticsAlgoFitSin_PI * numberofhalfperiods / min_max_distance;
  jdouble c2 = 2 * JavaLangMath_PI / ((IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_size_ - 1) - IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, 0)) * 2 / changes);
  if (changes > 2) GeogebraCommonKernelStatisticsAlgoFitSin_c_ = (GeogebraCommonKernelStatisticsAlgoFitSin_c_ + c2) / 2;
  GeogebraCommonKernelStatisticsAlgoFitSin_d_ = -JavaLangMath_PI;
  jdouble deltad = JavaLangMath_PI * 2 * 0.01;
  jdouble err = 0.0;
  jdouble bestd = 0.0;
  jdouble old_err = GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_yd_, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
  for (jint i = 0; i < 100; i++) {
    GeogebraCommonKernelStatisticsAlgoFitSin_d_ += deltad;
    err = GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_yd_, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
    if (err < old_err) {
      old_err = err;
      bestd = GeogebraCommonKernelStatisticsAlgoFitSin_d_;
    }
  }
  GeogebraCommonKernelStatisticsAlgoFitSin_d_ = bestd;
}

void GeogebraCommonKernelStatisticsAlgoFitSin_sinus_Reg() {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  jdouble lambda = 0.0;
  jdouble multfaktor = GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORMULT;
  jdouble residual, old_residual = GeogebraCommonKernelStatisticsAlgoFitSin_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_yd_, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
  jdouble da = GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON, db = GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON, dc = GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON, dd = GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON;
  jdouble b1, b2, b3, b4;
  jdouble m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44, n;
  jdouble x, y;
  jdouble dfa, dfb, dfc, dfd, beta, newa, newb, newc, newd;
  GeogebraCommonKernelStatisticsAlgoFitSin_iterations_ = 0;
  b1 = b2 = b3 = b4 = 0.0;
  m11 = m22 = m33 = m44 = 0.0;
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitSin_size_; i++) {
    x = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_xd_), i);
    y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_yd_), i);
    beta = GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x, y, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
    dfa = GeogebraCommonKernelStatisticsAlgoFitSin_df_a();
    dfb = GeogebraCommonKernelStatisticsAlgoFitSin_df_bWithDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
    dfc = GeogebraCommonKernelStatisticsAlgoFitSin_df_cWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
    dfd = GeogebraCommonKernelStatisticsAlgoFitSin_df_dWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
    b1 += beta * dfa;
    b2 += beta * dfb;
    b3 += beta * dfc;
    b4 += beta * dfd;
    m11 += dfa * dfa;
    m22 += dfb * dfb;
    m33 += dfc * dfc;
    m44 += dfd * dfd;
  }
  jdouble startfaktor = JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(JavaLangMath_maxWithDouble_withDouble_(m11, m22), m33), m44);
  lambda = startfaktor * 0.001;
  while (JavaLangMath_absWithDouble_(da) + JavaLangMath_absWithDouble_(db) + JavaLangMath_absWithDouble_(dc) + JavaLangMath_absWithDouble_(dd) > GeogebraCommonKernelStatisticsAlgoFitSin_EPSILON) {
    GeogebraCommonKernelStatisticsAlgoFitSin_iterations_++;
    if ((GeogebraCommonKernelStatisticsAlgoFitSin_iterations_ > GeogebraCommonKernelStatisticsAlgoFitSin_MAXITERATIONS) || (GeogebraCommonKernelStatisticsAlgoFitSin_error_)) {
      GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(JreStrcat("$I$", @"More than ", GeogebraCommonKernelStatisticsAlgoFitSin_MAXITERATIONS, @" iterations..."));
      GeogebraCommonKernelStatisticsAlgoFitSin_error_ = YES;
      break;
    }
    b1 = b2 = b3 = b4 = 0.0;
    m11 = m12 = m13 = m14 = m21 = m22 = m23 = m24 = m31 = m32 = m33 = m34 = m41 = m42 = m43 = m44 = 0.0;
    for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitSin_size_; i++) {
      x = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_xd_), i);
      y = IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_yd_), i);
      beta = GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(x, y, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
      dfa = GeogebraCommonKernelStatisticsAlgoFitSin_df_a();
      dfb = GeogebraCommonKernelStatisticsAlgoFitSin_df_bWithDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
      dfc = GeogebraCommonKernelStatisticsAlgoFitSin_df_cWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
      dfd = GeogebraCommonKernelStatisticsAlgoFitSin_df_dWithDouble_withDouble_withDouble_withDouble_(x, GeogebraCommonKernelStatisticsAlgoFitSin_b_, GeogebraCommonKernelStatisticsAlgoFitSin_c_, GeogebraCommonKernelStatisticsAlgoFitSin_d_);
      b1 += beta * dfa;
      b2 += beta * dfb;
      b3 += beta * dfc;
      b4 += beta * dfd;
      m11 += dfa * dfa + lambda;
      m12 += dfa * dfb;
      m13 += dfa * dfc;
      m14 += dfa * dfd;
      m22 += dfb * dfb + lambda;
      m23 += dfb * dfc;
      m24 += dfb * dfd;
      m33 += dfc * dfc + lambda;
      m34 += dfc * dfd;
      m44 += dfd * dfd + lambda;
    }
    m21 = m12;
    m31 = m13;
    m32 = m23;
    m41 = m14;
    m42 = m24;
    m43 = m34;
    n = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44);
    if (JavaLangMath_absWithDouble_(n) < GeogebraCommonKernelStatisticsAlgoFitSin_EPSSING) {
      GeogebraCommonKernelStatisticsAlgoFitSin_error_ = YES;
      GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(@"Singular matrix...");
      da = db = dc = dd = 0;
    }
    else {
      da = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(b1, m12, m13, m14, b2, m22, m23, m24, b3, m32, m33, m34, b4, m42, m43, m44) / n;
      db = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, b1, m13, m14, m21, b2, m23, m24, m31, b3, m33, m34, m41, b4, m43, m44) / n;
      dc = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, m12, b1, m14, m21, m22, b2, m24, m31, m32, b3, m34, m41, m42, b4, m44) / n;
      dd = GeogebraCommonKernelStatisticsRegressionMath_det44WithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(m11, m12, m13, b1, m21, m22, m23, b2, m31, m32, m33, b3, m41, m42, m43, b4) / n;
      newa = GeogebraCommonKernelStatisticsAlgoFitSin_a_ + da;
      newb = GeogebraCommonKernelStatisticsAlgoFitSin_b_ + db;
      newc = GeogebraCommonKernelStatisticsAlgoFitSin_c_ + dc;
      newd = GeogebraCommonKernelStatisticsAlgoFitSin_d_ + dd;
      residual = GeogebraCommonKernelStatisticsAlgoFitSin_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_yd_, newa, newb, newc, newd);
      if (residual < old_residual) {
        lambda = lambda / GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORDIV;
        old_residual = residual;
        multfaktor = GeogebraCommonKernelStatisticsAlgoFitSin_LMFACTORMULT;
        GeogebraCommonKernelStatisticsAlgoFitSin_a_ = newa;
        GeogebraCommonKernelStatisticsAlgoFitSin_b_ = newb;
        GeogebraCommonKernelStatisticsAlgoFitSin_c_ = newc;
        GeogebraCommonKernelStatisticsAlgoFitSin_d_ = newd;
      }
      else {
        lambda = lambda * multfaktor;
        multfaktor *= 2;
      }
    }
  }
  jdouble reduction = JavaLangMath_PI * 2;
  while (JavaLangMath_absWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_d_) > JavaLangMath_PI) {
    if (GeogebraCommonKernelStatisticsAlgoFitSin_d_ > JavaLangMath_PI) {
      GeogebraCommonKernelStatisticsAlgoFitSin_d_ -= reduction;
    }
    if (GeogebraCommonKernelStatisticsAlgoFitSin_d_ < -JavaLangMath_PI) {
      GeogebraCommonKernelStatisticsAlgoFitSin_d_ += reduction;
    }
  }
  if (JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_a_) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_b_) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_c_) || JavaLangDouble_isNaNWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_d_)) {
    GeogebraCommonKernelStatisticsAlgoFitSin_error_ = YES;
    GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(@"findParameters(): a,b or c undefined (NaN).");
    return;
  }
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_sinWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return JavaLangMath_sinWithDouble_(c * x + d);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_cosWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return JavaLangMath_cosWithDouble_(c * x + d);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_fWithDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble a, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return a + b * GeogebraCommonKernelStatisticsAlgoFitSin_sinWithDouble_withDouble_withDouble_(x, c, d);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_a() {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return 1.0;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_bWithDouble_withDouble_withDouble_(jdouble x, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return GeogebraCommonKernelStatisticsAlgoFitSin_sinWithDouble_withDouble_withDouble_(x, c, d);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_cWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return GeogebraCommonKernelStatisticsAlgoFitSin_cosWithDouble_withDouble_withDouble_(x, c, d) * b * x;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_df_dWithDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return GeogebraCommonKernelStatisticsAlgoFitSin_cosWithDouble_withDouble_withDouble_(x, c, d) * b;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jdouble x, jdouble y, jdouble a, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  return y - GeogebraCommonKernelStatisticsAlgoFitSin_fWithDouble_withDouble_withDouble_withDouble_withDouble_(x, a, b, c, d);
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *x, IOSDoubleArray *y, jdouble a, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  jdouble sum = 0.0, beta;
  jint n = ((IOSDoubleArray *) nil_chk(x))->size_;
  for (jint i = 0; i < n; i++) {
    beta = GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(x, i), IOSDoubleArray_Get(nil_chk(y), i), a, b, c, d);
    sum += beta * beta;
  }
  return sum;
}

jdouble GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray *x, IOSDoubleArray *y, jdouble a, jdouble b, jdouble c, jdouble d) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  jdouble sum = 0.0;
  jint n = ((IOSDoubleArray *) nil_chk(x))->size_;
  for (jint i = 0; i < n; i++) {
    sum += JavaLangMath_absWithDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_betaWithDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(IOSDoubleArray_Get(x, i), IOSDoubleArray_Get(nil_chk(y), i), a, b, c, d));
  }
  return sum;
}

jint GeogebraCommonKernelStatisticsAlgoFitSin_directionWithDouble_withDouble_withDouble_(jdouble y1, jdouble y2, jdouble y3) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  if ((y3 > y2) && (y2 > y1)) {
    return 1;
  }
  else if ((y1 > y2) && (y2 > y3)) {
    return -1;
  }
  else {
    return 0;
  }
}

void GeogebraCommonKernelStatisticsAlgoFitSin_getPoints(GeogebraCommonKernelStatisticsAlgoFitSin *self) {
  IOSDoubleArray *xlist = nil, *ylist = nil;
  IOSDoubleArray *xy = [IOSDoubleArray arrayWithLength:2];
  GeogebraCommonKernelGeosGeoElement *geoelement;
  JavaUtilTreeSet *sortedSet;
  sortedSet = [new_JavaUtilTreeSet_initWithJavaUtilComparator_(GeogebraCommonKernelGeosGeoPoint_getComparatorX()) autorelease];
  for (jint i = 0; i < GeogebraCommonKernelStatisticsAlgoFitSin_size_; i++) {
    geoelement = [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->geolist_)) getWithInt:i];
    if ([geoelement isKindOfClass:[GeogebraCommonKernelGeosGeoPoint class]]) {
      [sortedSet addWithId:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geoelement, [GeogebraCommonKernelGeosGeoPoint class])];
    }
    else {
      GeogebraCommonKernelStatisticsAlgoFitSin_error_ = YES;
    }
  }
  id<JavaUtilIterator> iter = [sortedSet iterator];
  jint i = 0;
  xlist = [IOSDoubleArray arrayWithLength:GeogebraCommonKernelStatisticsAlgoFitSin_size_];
  ylist = [IOSDoubleArray arrayWithLength:GeogebraCommonKernelStatisticsAlgoFitSin_size_];
  GeogebraCommonKernelGeosGeoPoint *gp;
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    gp = [iter next];
    [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(gp)) getInhomCoordsWithDoubleArray:xy];
    *IOSDoubleArray_GetRef(xlist, i) = IOSDoubleArray_Get(xy, 0);
    *IOSDoubleArray_GetRef(ylist, i) = IOSDoubleArray_Get(xy, 1);
    i++;
  }
  JreStrongAssign(&GeogebraCommonKernelStatisticsAlgoFitSin_xd_, nil, xlist);
  JreStrongAssign(&GeogebraCommonKernelStatisticsAlgoFitSin_yd_, nil, ylist);
  if (GeogebraCommonKernelStatisticsAlgoFitSin_error_) {
    GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(@"getPoints(): Wrong list format, must be points.");
  }
}

jboolean GeogebraCommonKernelStatisticsAlgoFitSin_nearmaxminWithDouble_withDouble_withInt_withInt_withDouble_withDouble_(jdouble a, jdouble b, jint state, jint current, jdouble max, jdouble min) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  if ((state == 1) && (current == -1)) {
    if (max > a + GeogebraCommonKernelStatisticsAlgoFitSin_NOISEKILLER * b) {
      return YES;
    }
    return NO;
  }
  else if ((state == -1) && (current == 1)) {
    if (min < a - GeogebraCommonKernelStatisticsAlgoFitSin_NOISEKILLER * b) {
      return YES;
    }
    return NO;
  }
  else {
    return NO;
  }
}

void GeogebraCommonKernelStatisticsAlgoFitSin_errorMsgWithNSString_(NSString *s) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  GeogebraCommonMainApp_debugWithNSString_(s);
}

jint GeogebraCommonKernelStatisticsAlgoFitSin_findNumberOfHalfPeriodsWithInt_withInt_withInt_(jint k, jint xmin, jint xmax) {
  GeogebraCommonKernelStatisticsAlgoFitSin_initialize();
  jdouble min_error = JavaLangDouble_MAX_VALUE;
  jdouble error;
  jdouble period, c;
  jint n = 0, best = 0;
  for (jint i = 1; i <= k; i++) {
    n = 2 * i - 1;
    period = JavaLangMath_absWithDouble_(IOSDoubleArray_Get(nil_chk(GeogebraCommonKernelStatisticsAlgoFitSin_xd_), xmax) - IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmin)) * 2.0 / n;
    c = GeogebraCommonKernelStatisticsAlgoFitSin_TWO_PI / period;
    error = GeogebraCommonKernelStatisticsAlgoFitSin_beta2WithDoubleArray_withDoubleArray_withDouble_withDouble_withDouble_withDouble_(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, GeogebraCommonKernelStatisticsAlgoFitSin_yd_, GeogebraCommonKernelStatisticsAlgoFitSin_a_, GeogebraCommonKernelStatisticsAlgoFitSin_b_, c, GeogebraCommonKernelStatisticsAlgoFitSin_PI / 2.0 - c * IOSDoubleArray_Get(GeogebraCommonKernelStatisticsAlgoFitSin_xd_, xmax));
    if (error < min_error) {
      min_error = error;
      best = n;
    }
  }
  return best;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoFitSin)
