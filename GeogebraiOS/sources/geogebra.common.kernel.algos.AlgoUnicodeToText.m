//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoUnicodeToText.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoUnicodeToText.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoText.h"

@implementation GeogebraCommonKernelAlgosAlgoUnicodeToText

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  GeogebraCommonKernelAlgosAlgoUnicodeToText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_UnicodeToText();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, list_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:text_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoText *)getResult {
  return text_;
}

- (void)compute {
  jint size = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list_)) size];
  if (size == 0) {
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:@""];
    return;
  }
  NSString *s = @"";
  for (jint i = 0; i < size; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [list_ getWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoNumeric]) {
      s = JreStrcat("$C", s, J2ObjCFpToUnichar([((GeogebraCommonKernelGeosGeoNumeric *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoNumeric class])) getDouble]));
    }
  }
  [((GeogebraCommonKernelGeosGeoText *) nil_chk(text_)) setTextStringWithNSString:s];
}

- (void)dealloc {
  RELEASE_(list_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:", "AlgoUnicodeToText", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoText;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "list_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "text_", NULL, 0x4, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoUnicodeToText = { 2, "AlgoUnicodeToText", "geogebra.common.kernel.algos", NULL, 0x1, 5, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoUnicodeToText;
}

@end

void GeogebraCommonKernelAlgosAlgoUnicodeToText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAlgosAlgoUnicodeToText *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoUnicodeToText_set_list_(self, list);
  GeogebraCommonKernelAlgosAlgoUnicodeToText_setAndConsume_text_(self, new_GeogebraCommonKernelGeosGeoText_initWithGeogebraCommonKernelConstruction_(cons));
  [self->text_ setIsTextCommandWithBoolean:YES];
  [self setInputOutput];
  [self compute];
  [self->text_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoUnicodeToText *new_GeogebraCommonKernelAlgosAlgoUnicodeToText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoUnicodeToText *self = [GeogebraCommonKernelAlgosAlgoUnicodeToText alloc];
  GeogebraCommonKernelAlgosAlgoUnicodeToText_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self, cons, label, list);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoUnicodeToText)
