//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/view/spreadsheet/CreateObjectModel.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/view/spreadsheet/CellRange.h"
#include "geogebra/common/gui/view/spreadsheet/CellRangeProcessor.h"
#include "geogebra/common/gui/view/spreadsheet/CreateObjectModel.h"
#include "geogebra/common/gui/view/spreadsheet/MyTable.h"
#include "geogebra/common/gui/view/spreadsheet/MyTableInterface.h"
#include "geogebra/common/gui/view/spreadsheet/SpreadsheetViewInterface.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPolyLine.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/util/IndexHTMLBuilder.h"
#include "java/lang/Exception.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface GeogebraCommonGuiViewSpreadsheetCreateObjectModel () {
 @public
  GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *cp_;
  JavaUtilArrayList *selectedCellRanges_;
  jint objectType_;
  GeogebraCommonKernelGeosGeoElement *newGeo_;
  jboolean keepNewGeo_;
  id<GeogebraCommonGuiViewSpreadsheetMyTable> table_;
  GeogebraCommonMainApp *app_;
  id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener> listener_;
}

- (void)addNewGeoToConstruction;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, cp_, GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, selectedCellRanges_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, newGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, table_, id<GeogebraCommonGuiViewSpreadsheetMyTable>)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, app_, GeogebraCommonMainApp *)
J2OBJC_FIELD_SETTER(GeogebraCommonGuiViewSpreadsheetCreateObjectModel, listener_, id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>)

__attribute__((unused)) static void GeogebraCommonGuiViewSpreadsheetCreateObjectModel_addNewGeoToConstruction(GeogebraCommonGuiViewSpreadsheetCreateObjectModel *self);

@interface GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener : NSObject
@end

@implementation GeogebraCommonGuiViewSpreadsheetCreateObjectModel

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface:(id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>)view
                                      withInt:(jint)objectType
withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener:(id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>)listener {
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface_withInt_withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener_(self, app, view, objectType, listener);
  return self;
}

- (id<JavaUtilList>)getObjectTypeNames {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"List"], [app_ getMenuWithNSString:@"Matrix"], [app_ getMenuWithNSString:@"ListOfPoints"], [app_ getMenuWithNSString:@"Table"], [app_ getMenuWithNSString:@"PolyLine"] } count:5 type:NSString_class_()]);
}

- (NSString *)getTitle {
  NSString *titleText = @"";
  switch ([self getObjectType]) {
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST:
    titleText = [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"CreateList"];
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS:
    titleText = [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"CreateListOfPoints"];
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_TABLETEXT:
    titleText = [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"CreateTable"];
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE:
    titleText = [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"CreatePolyLine"];
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_MATRIX:
    titleText = [((GeogebraCommonMainApp *) nil_chk(app_)) getMenuWithNSString:@"CreateMatrix"];
    break;
  }
  GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$", @"[CO] title is ", titleText));
  return titleText;
}

- (void)update {
  if (newGeo_ == nil) {
    [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) setNameWithNSString:@""];
  }
  else [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) setNameWithNSString:[newGeo_ getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]];
  [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) setSortVisibleWithBoolean:[self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE];
}

- (void)cancel {
  keepNewGeo_ = YES;
  [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) setVisibleWithBoolean:NO];
}

- (void)apply {
}

- (void)ok {
  if (newGeo_ != nil) {
    [newGeo_ remove];
  }
  [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) setVisibleWithBoolean:NO];
}

- (void)close {
  if (keepNewGeo_ && newGeo_ != nil) {
    GeogebraCommonGuiViewSpreadsheetCreateObjectModel_addNewGeoToConstruction(self);
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) remove];
  }
}

- (void)addNewGeoToConstruction {
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_addNewGeoToConstruction(self);
}

- (void)createNewGeoWithNSString:(NSString *)name {
  jboolean nullGeo = newGeo_ == nil;
  if (!nullGeo) {
    if ([self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS) {
      GeogebraCommonKernelGeosGeoList *gl = (GeogebraCommonKernelGeosGeoList *) check_class_cast(newGeo_, [GeogebraCommonKernelGeosGeoList class]);
      for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) nil_chk(gl)) size]; i++) [((GeogebraCommonKernelGeosGeoElement *) nil_chk([gl getWithInt:i])) remove];
    }
    if ([self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE) {
      IOSObjectArray *pts = [((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolyLine class])))) getPoints];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_; i++) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) remove];
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) remove];
  }
  jint column1 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([((JavaUtilArrayList *) nil_chk(selectedCellRanges_)) getWithInt:0])) getMinColumn];
  jint column2 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([selectedCellRanges_ getWithInt:0])) getMaxColumn];
  jint row1 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([selectedCellRanges_ getWithInt:0])) getMinRow];
  jint row2 = [((GeogebraCommonGuiViewSpreadsheetCellRange *) nil_chk([selectedCellRanges_ getWithInt:0])) getMaxRow];
  jboolean copyByValue = [((id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener>) nil_chk(listener_)) isCopiedByValue];
  jboolean scanByColumn = [listener_ isScannedByColumn];
  jboolean leftToRight = [listener_ isLeftToRight];
  jboolean transpose = [listener_ isTranspose];
  jboolean doCreateFreePoints = YES;
  jboolean doStoreUndo = YES;
  jboolean isSorted = NO;
  @try {
    {
      IOSObjectArray *pts;
      switch ([self getObjectType]) {
        case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST:
        GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_newGeo_(self, [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createListWithJavaUtilArrayList:[self getSelectedCellRanges] withBoolean:scanByColumn withBoolean:copyByValue]);
        break;
        case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS:
        GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_newGeo_(self, [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createPointGeoListWithJavaUtilArrayList:[self getSelectedCellRanges] withBoolean:copyByValue withBoolean:leftToRight withBoolean:isSorted withBoolean:doStoreUndo withBoolean:doCreateFreePoints]);
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) setLabelWithNSString:nil];
        for (jint i = 0; i < [((GeogebraCommonKernelGeosGeoList *) check_class_cast(newGeo_, [GeogebraCommonKernelGeosGeoList class])) size]; i++) {
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) check_class_cast(newGeo_, [GeogebraCommonKernelGeosGeoList class])) getWithInt:i])) setAuxiliaryObjectWithBoolean:YES];
          [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoList *) check_class_cast(newGeo_, [GeogebraCommonKernelGeosGeoList class])) getWithInt:i])) setEuclidianVisibleWithBoolean:NO];
        }
        [newGeo_ updateRepaint];
        break;
        case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_MATRIX:
        GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_newGeo_(self, [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createMatrixWithInt:column1 withInt:column2 withInt:row1 withInt:row2 withBoolean:copyByValue withBoolean:transpose]);
        break;
        case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_TABLETEXT:
        GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_newGeo_(self, [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createTableTextWithInt:column1 withInt:column2 withInt:row1 withInt:row2 withBoolean:copyByValue withBoolean:transpose]);
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) setEuclidianVisibleWithBoolean:NO];
        [newGeo_ updateRepaint];
        break;
        case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE:
        GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_newGeo_(self, [((GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *) nil_chk(cp_)) createPolyLineWithJavaUtilArrayList:[self getSelectedCellRanges] withBoolean:copyByValue withBoolean:leftToRight]);
        [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) setLabelWithNSString:nil];
        pts = [((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([newGeo_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolyLine class])))) getPoints];
        for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_; i++) {
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) setAuxiliaryObjectWithBoolean:YES];
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) setEuclidianVisibleWithBoolean:NO];
          [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) updateRepaint];
        }
        [newGeo_ updateRepaint];
        break;
      }
    }
    [listener_ updatePreviewWithNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) getFormulaStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_latexTemplate_() withBoolean:YES] withBoolean:[newGeo_ isLaTeXDrawableGeo]];
    ;
    if (!nullGeo) {
      [newGeo_ setLabelWithNSString:name];
      [newGeo_ setAuxiliaryObjectWithBoolean:YES];
      [newGeo_ setEuclidianVisibleWithBoolean:NO];
    }
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
}

- (void)cleanUp {
  if (newGeo_ == nil) {
    return;
  }
  if (keepNewGeo_) {
    GeogebraCommonGuiViewSpreadsheetCreateObjectModel_addNewGeoToConstruction(self);
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) remove];
  }
}

- (NSString *)getNonLatexText {
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(newGeo_)) getAlgebraDescriptionTextOrHTMLDefaultWithGeogebraCommonUtilIndexHTMLBuilder:[new_GeogebraCommonUtilIndexHTMLBuilder_initWithBoolean_(YES) autorelease]];
}

- (GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)getCellRangeProcessor {
  return cp_;
}

- (void)setCellRangeProcessorWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor:(GeogebraCommonGuiViewSpreadsheetCellRangeProcessor *)cp {
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_cp_(self, cp);
}

- (JavaUtilArrayList *)getSelectedCellRanges {
  return selectedCellRanges_;
}

- (void)setSelectedCellRangesWithJavaUtilArrayList:(JavaUtilArrayList *)selectedCellRanges {
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_selectedCellRanges_(self, selectedCellRanges);
}

- (jint)getObjectType {
  return objectType_;
}

- (void)setObjectTypeWithInt:(jint)objectType {
  self->objectType_ = objectType;
}

- (void)setListType {
  objectType_ = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST;
}

- (jint)getOptionType {
  jint idx = 0;
  switch ([self getObjectType]) {
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST:
    idx = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_ORDER;
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS:
    idx = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_XY;
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_MATRIX:
    idx = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_TRANSPOSE;
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_TABLETEXT:
    idx = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_TRANSPOSE;
    break;
    case GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE:
    idx = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_XY;
  }
  return idx;
}

- (void)dealloc {
  RELEASE_(cp_);
  RELEASE_(selectedCellRanges_);
  RELEASE_(newGeo_);
  RELEASE_(table_);
  RELEASE_(app_);
  RELEASE_(listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface:withInt:withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener:", "CreateObjectModel", NULL, 0x1, NULL, NULL },
    { "getObjectTypeNames", NULL, "Ljava.util.List;", 0x1, NULL, NULL },
    { "getTitle", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "update", NULL, "V", 0x1, NULL, NULL },
    { "cancel", NULL, "V", 0x1, NULL, NULL },
    { "apply", NULL, "V", 0x1, NULL, NULL },
    { "ok", NULL, "V", 0x1, NULL, NULL },
    { "close", NULL, "V", 0x1, NULL, NULL },
    { "addNewGeoToConstruction", NULL, "V", 0x2, NULL, NULL },
    { "createNewGeoWithNSString:", "createNewGeo", "V", 0x1, NULL, NULL },
    { "cleanUp", NULL, "V", 0x1, NULL, NULL },
    { "getNonLatexText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getCellRangeProcessor", NULL, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor;", 0x1, NULL, NULL },
    { "setCellRangeProcessorWithGeogebraCommonGuiViewSpreadsheetCellRangeProcessor:", "setCellRangeProcessor", "V", 0x1, NULL, NULL },
    { "getSelectedCellRanges", NULL, "Ljava.util.ArrayList;", 0x1, NULL, NULL },
    { "setSelectedCellRangesWithJavaUtilArrayList:", "setSelectedCellRanges", "V", 0x1, NULL, NULL },
    { "getObjectType", NULL, "I", 0x1, NULL, NULL },
    { "setObjectTypeWithInt:", "setObjectType", "V", 0x1, NULL, NULL },
    { "setListType", NULL, "V", 0x1, NULL, NULL },
    { "getOptionType", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cp_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.CellRangeProcessor;", NULL, NULL,  },
    { "selectedCellRanges_", NULL, 0x2, "Ljava.util.ArrayList;", NULL, "Ljava/util/ArrayList<Lgeogebra/common/gui/view/spreadsheet/CellRange;>;",  },
    { "TYPE_LIST_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST },
    { "TYPE_MATRIX_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_MATRIX },
    { "TYPE_LISTOFPOINTS_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS },
    { "TYPE_TABLETEXT_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_TABLETEXT },
    { "TYPE_POLYLINE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE },
    { "objectType_", NULL, 0x2, "I", NULL, NULL,  },
    { "newGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "keepNewGeo_", NULL, 0x2, "Z", NULL, NULL,  },
    { "table_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.MyTable;", NULL, NULL,  },
    { "app_", NULL, 0x2, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "listener_", NULL, 0x2, "Lgeogebra.common.gui.view.spreadsheet.CreateObjectModel$ICreateObjectListener;", NULL, NULL,  },
    { "OPTION_ORDER_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_ORDER },
    { "OPTION_XY_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_XY },
    { "OPTION_TRANSPOSE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_OPTION_TRANSPOSE },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.view.spreadsheet.CreateObjectModel$ICreateObjectListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCreateObjectModel = { 2, "CreateObjectModel", "geogebra.common.gui.view.spreadsheet", NULL, 0x1, 20, methods, 16, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCreateObjectModel;
}

@end

void GeogebraCommonGuiViewSpreadsheetCreateObjectModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface_withInt_withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener_(GeogebraCommonGuiViewSpreadsheetCreateObjectModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> view, jint objectType, id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener> listener) {
  NSObject_init(self);
  self->objectType_ = GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LIST;
  self->keepNewGeo_ = NO;
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_app_(self, app);
  self->objectType_ = objectType;
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_listener_(self, listener);
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_set_table_(self, (id<GeogebraCommonGuiViewSpreadsheetMyTable>) check_protocol_cast([((id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface>) nil_chk(view)) getSpreadsheetTable], @protocol(GeogebraCommonGuiViewSpreadsheetMyTable)));
}

GeogebraCommonGuiViewSpreadsheetCreateObjectModel *new_GeogebraCommonGuiViewSpreadsheetCreateObjectModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface_withInt_withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface> view, jint objectType, id<GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener> listener) {
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel *self = [GeogebraCommonGuiViewSpreadsheetCreateObjectModel alloc];
  GeogebraCommonGuiViewSpreadsheetCreateObjectModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiViewSpreadsheetSpreadsheetViewInterface_withInt_withGeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener_(self, app, view, objectType, listener);
  return self;
}

void GeogebraCommonGuiViewSpreadsheetCreateObjectModel_addNewGeoToConstruction(GeogebraCommonGuiViewSpreadsheetCreateObjectModel *self) {
  if ([self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS || [self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE) {
    [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(self->app_)) getKernel])) getConstruction])) addToConstructionListWithGeogebraCommonKernelAlgosConstructionElement:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->newGeo_)) getParentAlgorithm] withBoolean:YES];
  }
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->newGeo_)) setEuclidianVisibleWithBoolean:YES];
  if (![self->newGeo_ isGeoText]) [self->newGeo_ setAuxiliaryObjectWithBoolean:NO];
  if ([self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_LISTOFPOINTS) {
    GeogebraCommonKernelGeosGeoList *gl = (GeogebraCommonKernelGeosGeoList *) check_class_cast(self->newGeo_, [GeogebraCommonKernelGeosGeoList class]);
    for (jint i = 0; i < [gl size]; i++) {
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([gl getWithInt:i])) setEuclidianVisibleWithBoolean:YES];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk([gl getWithInt:i])) setAuxiliaryObjectWithBoolean:NO];
    }
  }
  if ([self getObjectType] == GeogebraCommonGuiViewSpreadsheetCreateObjectModel_TYPE_POLYLINE) {
    IOSObjectArray *pts = [((GeogebraCommonKernelAlgosAlgoPolyLine *) nil_chk(((GeogebraCommonKernelAlgosAlgoPolyLine *) check_class_cast([self->newGeo_ getParentAlgorithm], [GeogebraCommonKernelAlgosAlgoPolyLine class])))) getPoints];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(pts))->size_; i++) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) setEuclidianVisibleWithBoolean:YES];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) setAuxiliaryObjectWithBoolean:NO];
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(pts, i))) updateRepaint];
    }
  }
  [self->newGeo_ update];
  [((GeogebraCommonMainApp *) nil_chk(self->app_)) storeUndoInfo];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCreateObjectModel)

@implementation GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "setNameWithNSString:", "setName", "V", 0x401, NULL, NULL },
    { "isVisible", NULL, "Z", 0x401, NULL, NULL },
    { "setVisibleWithBoolean:", "setVisible", "V", 0x401, NULL, NULL },
    { "setSortVisibleWithBoolean:", "setSortVisible", "V", 0x401, NULL, NULL },
    { "isCopiedByValue", NULL, "Z", 0x401, NULL, NULL },
    { "isScannedByColumn", NULL, "Z", 0x401, NULL, NULL },
    { "isLeftToRight", NULL, "Z", 0x401, NULL, NULL },
    { "isTranspose", NULL, "Z", 0x401, NULL, NULL },
    { "updatePreviewWithNSString:withBoolean:", "updatePreview", "V", 0x401, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener = { 2, "ICreateObjectListener", "geogebra.common.gui.view.spreadsheet", "CreateObjectModel", 0x609, 9, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiViewSpreadsheetCreateObjectModel_ICreateObjectListener)
