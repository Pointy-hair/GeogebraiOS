//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/plugin/GgbAPI.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/GeoGebraConstants.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/awt/GFont.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianPen.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/euclidian/EuclidianViewInterfaceCommon.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/gui/Layout.h"
#include "geogebra/common/gui/toolbar/ToolBar.h"
#include "geogebra/common/io/layout/Perspective.h"
#include "geogebra/common/io/layout/PerspectiveDecoder.h"
#include "geogebra/common/kernel/AnimationManager.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/GeoGebraCasInterface.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Locateable.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/UserAwarenessListener.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/arithmetic/Traversing.h"
#include "geogebra/common/kernel/arithmetic/ValidExpression.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/AbsoluteScreenLocateable.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoCasCell.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/kernel/geos/PointProperties.h"
#include "geogebra/common/kernel/geos/TextProperties.h"
#include "geogebra/common/kernel/geos/Traceable.h"
#include "geogebra/common/kernel/parser/Parser.h"
#include "geogebra/common/kernel/scripting/CmdSetValue.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/GuiManagerInterface.h"
#include "geogebra/common/main/SelectionManager.h"
#include "geogebra/common/main/settings/EuclidianSettings.h"
#include "geogebra/common/main/settings/Settings.h"
#include "geogebra/common/move/ggtapi/models/AuthenticationModel.h"
#include "geogebra/common/move/ggtapi/models/GeoGebraTubeAPI.h"
#include "geogebra/common/move/ggtapi/operations/LogInOperation.h"
#include "geogebra/common/plugin/EuclidianStyleConstants.h"
#include "geogebra/common/plugin/GgbAPI.h"
#include "geogebra/common/plugin/ScriptManager.h"
#include "geogebra/common/util/StringUtil.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/Throwable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/TreeSet.h"

#pragma clang diagnostic ignored "-Wprotocol"

@interface GeogebraCommonPluginGgbAPI () {
 @public
  IOSObjectArray *objNames_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonPluginGgbAPI, objNames_, IOSObjectArray *)

__attribute__((unused)) static GeogebraCommonMainApp *GeogebraCommonPluginGgbAPI_getApplication(GeogebraCommonPluginGgbAPI *self);

@implementation GeogebraCommonPluginGgbAPI

- (GeogebraCommonKernelConstruction *)getConstruction {
  return self->construction_;
}

- (GeogebraCommonKernelKernel *)getKernel {
  return self->kernel_;
}

- (GeogebraCommonKernelCommandsAlgebraProcessor *)getAlgebraProcessor {
  return self->algebraprocessor_;
}

- (void)evalXMLWithNSString:(NSString *)xmlString {
  @synchronized(self) {
    JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_init() autorelease];
    [sb appendWithNSString:@"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"];
    [sb appendWithNSString:JreStrcat("$$$", @"<geogebra format=\"", GeogebraCommonGeoGebraConstants_get_XML_FILE_FORMAT_(), @"\">\n")];
    [sb appendWithNSString:@"<construction>\n"];
    [sb appendWithNSString:xmlString];
    [sb appendWithNSString:@"</construction>\n"];
    [sb appendWithNSString:@"</geogebra>\n"];
    [((GeogebraCommonMainApp *) nil_chk(GeogebraCommonPluginGgbAPI_getApplication(self))) setXMLWithNSString:[sb description] withBoolean:NO];
  }
}

- (NSString *)evalCommandCASWithNSString:(NSString *)cmdString {
  @synchronized(self) {
    NSString *ret = @"?";
    @try {
      GeogebraCommonKernelGeosGeoCasCell *f = [new_GeogebraCommonKernelGeosGeoCasCell_initWithGeogebraCommonKernelConstruction_([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction]) autorelease];
      [f setInputWithNSString:cmdString];
      [f computeOutput];
      jboolean includesNumericCommand = NO;
      JavaUtilHashSet *commands = [new_JavaUtilHashSet_init() autorelease];
      [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([f getInputVE])) traverseWithGeogebraCommonKernelArithmeticTraversing:GeogebraCommonKernelArithmeticTraversing_CommandCollector_getCollectorWithJavaUtilSet_(commands)];
      if (![commands isEmpty]) {
        for (GeogebraCommonKernelArithmeticCommand * __strong cmd in commands) {
          NSString *cmdName = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(cmd)) getName];
          includesNumericCommand = (includesNumericCommand || ([@"Numeric" isEqual:cmdName] && [cmd getArgumentNumber] > 1));
        }
      }
      ret = [f getOutputValidExpression] != nil ? [((GeogebraCommonKernelArithmeticValidExpression *) nil_chk([f getOutputValidExpression])) toStringWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_()] : [f getOutputWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_testTemplate_()];
    }
    @catch (JavaLangThrowable *e) {
      [((JavaLangThrowable *) nil_chk(e)) printStackTrace];
    }
    return ret;
  }
}

- (jboolean)evalCommandWithNSString:(NSString *)cmdString {
  @synchronized(self) {
    IOSObjectArray *result;
    jboolean oldVal = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) isUsingInternalCommandNames];
    [kernel_ setUseInternalCommandNamesWithBoolean:YES];
    jboolean ret = YES;
    if ([((NSString *) nil_chk(cmdString)) indexOf:0x000a] == -1) {
      result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) processAlgebraCommandWithNSString:cmdString withBoolean:NO];
      ret = (result != nil);
    }
    else {
      IOSObjectArray *cmdStrings = [cmdString split:@"[\\n]+"];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(cmdStrings))->size_; i++) {
        result = [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([kernel_ getAlgebraProcessor])) processAlgebraCommandWithNSString:IOSObjectArray_Get(cmdStrings, i) withBoolean:NO];
        ret = (ret & (result != nil));
      }
    }
    [kernel_ setUseInternalCommandNamesWithBoolean:oldVal];
    return ret;
  }
}

- (void)debugWithNSString:(NSString *)string {
  @synchronized(self) {
    GeogebraCommonMainApp_debugWithNSString_(string);
  }
}

- (NSString *)getXMLWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) {
      return @"";
    }
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getXML];
  }
}

- (NSString *)getAlgorithmXMLWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) {
      return @"";
    }
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent]) {
      return @"";
    }
    return [((GeogebraCommonKernelAlgosAlgoElement *) nil_chk([geo getParentAlgorithm])) getXML];
  }
}

- (void)setVisibleWithNSString:(NSString *)objName
                   withBoolean:(jboolean)visible {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setEuclidianVisibleWithBoolean:visible];
    [geo updateRepaint];
  }
}

- (jboolean)getVisibleWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return NO;
    return ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isEuclidianVisible]);
  }
}

- (void)setLayerWithNSString:(NSString *)objName
                     withInt:(jint)layer {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLayerWithInt:layer];
    [geo updateRepaint];
  }
}

- (jint)getLayerWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return -1;
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLayer];
  }
}

- (void)setLayerVisibleWithInt:(jint)layer
                   withBoolean:(jboolean)visible {
  @synchronized(self) {
    if (layer < 0 || layer > GeogebraCommonPluginEuclidianStyleConstants_MAX_LAYERS) return;
    IOSObjectArray *names = [self getObjNames];
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:IOSObjectArray_Get(names, i)];
      if (geo != nil) if ([geo getLayer] == layer) {
        [geo setEuclidianVisibleWithBoolean:visible];
        [geo updateRepaint];
      }
    }
  }
}

- (IOSObjectArray *)getObjNames {
  GeogebraCommonKernelConstruction *cons = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction];
  JavaUtilTreeSet *geoSet = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getGeoSetConstructionOrder];
  jint size = [((JavaUtilTreeSet *) nil_chk(geoSet)) size];
  lastGeoElementsIteratorSize_ = size;
  GeogebraCommonPluginGgbAPI_setAndConsume_objNames_(self, [IOSObjectArray newArrayWithLength:size type:NSString_class_()]);
  jint i = 0;
  id<JavaUtilIterator> it = [geoSet iterator];
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    GeogebraCommonKernelGeosGeoElement *geo = [it next];
    IOSObjectArray_Set(objNames_, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelSimple]);
    i++;
  }
  return objNames_;
}

- (IOSObjectArray *)getAllObjectNames {
  @synchronized(self) {
    return [self getObjNames];
  }
}

- (void)setFixedWithNSString:(NSString *)objName
                 withBoolean:(jboolean)flag {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo != nil && [geo isFixable]) {
      [geo setFixedWithBoolean:flag];
      [geo updateRepaint];
    }
  }
}

- (void)setTraceWithNSString:(NSString *)objName
                 withBoolean:(jboolean)flag {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo != nil && [geo isTraceable]) {
      [((id<GeogebraCommonKernelGeosTraceable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTraceable))) setTraceWithBoolean:flag];
      [geo updateRepaint];
    }
  }
}

- (void)setLabelVisibleWithNSString:(NSString *)objName
                        withBoolean:(jboolean)visible {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelVisibleWithBoolean:visible];
    [geo updateRepaint];
  }
}

- (void)setLabelStyleWithNSString:(NSString *)objName
                          withInt:(jint)style {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLabelModeWithInt:style];
    [geo updateRepaint];
  }
}

- (void)setColorWithNSString:(NSString *)objName
                     withInt:(jint)red
                     withInt:(jint)green
                     withInt:(jint)blue {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setObjColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue]];
    [geo updateRepaint];
  }
}

- (void)setCornerWithNSString:(NSString *)objName
                   withDouble:(jdouble)x
                   withDouble:(jdouble)y {
  @synchronized(self) {
    [self setCornerWithNSString:objName withDouble:x withDouble:y withInt:1];
  }
}

- (void)setCornerWithNSString:(NSString *)objName
                   withDouble:(jdouble)x
                   withDouble:(jdouble)y
                      withInt:(jint)index {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (!([GeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:geo])) return;
    id<GeogebraCommonKernelGeosAbsoluteScreenLocateable> loc = ((id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable)));
    if ([((id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) nil_chk(loc)) isAbsoluteScreenLocActive]) {
      [loc setAbsoluteScreenLocWithInt:(jint) JavaLangMath_roundWithDouble_(x) withInt:(jint) JavaLangMath_roundWithDouble_(y)];
    }
    else if ([GeogebraCommonKernelLocateable_class_() isInstance:geo]) {
      GeogebraCommonKernelGeosGeoPoint *corner = [new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_([kernel_ getConstruction]) autorelease];
      GeogebraCommonEuclidianEuclidianView *ev = [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1];
      if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ev)) getViewID]] && [app_ hasEuclidianView2EitherShowingOrNotWithInt:1] && [geo isVisibleInViewWithInt:[((GeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView2WithInt:1])) getViewID]]) {
        GeogebraCommonMainApp_debugWithNSString_(@"EV2");
      }
      [corner setCoordsWithDouble:[ev toRealWorldCoordXWithDouble:x] withDouble:[ev toRealWorldCoordYWithDouble:y] withDouble:1];
      @try {
        [((id<GeogebraCommonKernelLocateable>) check_protocol_cast(loc, @protocol(GeogebraCommonKernelLocateable))) setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:corner withInt:index];
      }
      @catch (GeogebraCommonKernelCircularDefinitionException *e) {
        [((GeogebraCommonKernelCircularDefinitionException *) nil_chk(e)) printStackTrace];
      }
    }
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
  }
}

- (void)setAnimatingWithNSString:(NSString *)objName
                     withBoolean:(jboolean)animate {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
  if (geo != nil) [geo setAnimatingWithBoolean:animate];
}

- (void)setAnimationSpeedWithNSString:(NSString *)objName
                           withDouble:(jdouble)speed {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
  if (geo != nil) {
    [geo setAnimationSpeedWithDouble:speed];
  }
}

- (NSString *)getColorWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return @"";
    return JreStrcat("C$", '#', GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getObjectColor]));
  }
}

- (jint)getLineThicknessWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return -1;
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLineThickness];
  }
}

- (void)setLineThicknessWithNSString:(NSString *)objName
                             withInt:(jint)lineThickness {
  @synchronized(self) {
    jint thickness = lineThickness;
    if (thickness == -1) thickness = GeogebraCommonPluginEuclidianStyleConstants_DEFAULT_LINE_THICKNESS;
    if (thickness < 1 || thickness > 13) return;
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineThicknessWithInt:thickness];
    [geo updateRepaint];
  }
}

- (jint)getPointStyleWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) {
      return -1;
    }
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      return [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))))) getPointStyle];
    }
    return -1;
  }
}

- (void)setPointStyleWithNSString:(NSString *)objName
                          withInt:(jint)style {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))))) setPointStyleWithInt:style];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
  }
}

- (jint)getPointSizeWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) {
      return -1;
    }
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      return [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))))) getPointSize];
    }
    return -1;
  }
}

- (void)setPointSizeWithNSString:(NSString *)objName
                         withInt:(jint)style {
  @synchronized(self) {
    if (style < 1 || style > 9) return;
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    if ([GeogebraCommonKernelGeosPointProperties_class_() isInstance:geo]) {
      [((id<GeogebraCommonKernelGeosPointProperties>) nil_chk(((id<GeogebraCommonKernelGeosPointProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosPointProperties))))) setPointSizeWithInt:style];
      [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
    }
  }
}

- (jdouble)getFillingWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return -1;
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getAlphaValue];
  }
}

- (void)setFillingWithNSString:(NSString *)objName
                    withDouble:(jdouble)filling {
  @synchronized(self) {
    if (filling < 0.0 || filling > 1.0) return;
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAlphaValueWithFloat:(jfloat) filling];
    [geo updateRepaint];
  }
}

- (void)setOnTheFlyPointCreationActiveWithBoolean:(jboolean)flag {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setOnTheFlyPointCreationActiveWithBoolean:flag];
}

- (void)setUndoPoint {
  [((GeogebraCommonKernelConstruction *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getConstruction])) storeUndoInfo];
}

- (void)initCAS {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet]) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) refreshCASCommands];
    GeogebraCommonMainApp_debugWithNSString_(@"all CAS up");
    [kernel_ notifyRepaint];
  }
}

- (void)uploadToGeoGebraTube {
  [((GeogebraCommonMainApp *) nil_chk(app_)) uploadToGeoGebraTube];
}

- (void)startAnimation {
  [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager])) startAnimation];
}

- (void)stopAnimation {
  [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager])) stopAnimation];
}

- (void)hideCursorWhenDraggingWithBoolean:(jboolean)hideCursorWhenDragging {
  [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) setUseTransparentCursorWhenDraggingWithBoolean:hideCursorWhenDragging];
}

- (jboolean)isAnimationRunning {
  return [((GeogebraCommonKernelAnimationManager *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAnimatonManager])) isRunning];
}

- (void)registerAddListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerAddListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterAddListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterAddListenerWithNSString:JSFunctionName];
  }
}

- (void)registerRemoveListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerRemoveListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterRemoveListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterRemoveListenerWithNSString:JSFunctionName];
  }
}

- (void)registerClearListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerClearListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterClearListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterClearListenerWithNSString:JSFunctionName];
  }
}

- (void)registerRenameListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerRenameListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterRenameListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterRenameListenerWithNSString:JSFunctionName];
  }
}

- (void)registerUpdateListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerUpdateListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterUpdateListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterUpdateListenerWithNSString:JSFunctionName];
  }
}

- (void)registerObjectUpdateListenerWithNSString:(NSString *)objName
                                    withNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerObjectUpdateListenerWithNSString:objName withNSString:JSFunctionName];
  }
}

- (void)unregisterObjectUpdateListenerWithNSString:(NSString *)objName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterObjectUpdateListenerWithNSString:objName];
  }
}

- (void)registerClickListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerClickListenerWithNSString:JSFunctionName];
  }
}

- (void)unregisterClickListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterClickListenerWithNSString:JSFunctionName];
  }
}

- (void)registerClientListenerWithNSString:(NSString *)JSFunctionName {
  [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerClientListenerWithNSString:JSFunctionName];
}

- (void)unregisterClientListenerWithNSString:(NSString *)JSFunctionName {
  [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterClientListenerWithNSString:JSFunctionName];
}

- (void)registerObjectClickListenerWithNSString:(NSString *)objName
                                   withNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerObjectClickListenerWithNSString:objName withNSString:JSFunctionName];
  }
}

- (void)unregisterObjectClickListenerWithNSString:(NSString *)objName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) unregisterObjectClickListenerWithNSString:objName];
  }
}

- (void)registerStoreUndoListenerWithNSString:(NSString *)JSFunctionName {
  @synchronized(self) {
    [((GeogebraCommonPluginScriptManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getScriptManager])) registerStoreUndoListenerWithNSString:JSFunctionName];
  }
}

- (jboolean)isMoveableWithNSString:(NSString *)objName {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
  if (geo == nil) return NO;
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isMoveable];
}

- (NSString *)getObjectTypeWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    return (geo == nil) ? @"" : GeogebraCommonUtilStringUtil_toLowerCaseWithNSString_([geo getTypeString]);
  }
}

- (void)setModeWithInt:(jint)mode {
  @synchronized(self) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) setModeWithInt:mode];
  }
}

- (jint)getLineStyleWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return -1;
    jint type = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLineType];
    IOSObjectArray *types = GeogebraCommonEuclidianEuclidianView_getLineTypes();
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(types))->size_; i++) {
      if (type == [((JavaLangInteger *) nil_chk(IOSObjectArray_Get(types, i))) intValue]) return i;
    }
    return -1;
  }
}

- (void)setLineStyleWithNSString:(NSString *)objName
                         withInt:(jint)style {
  @synchronized(self) {
    IOSObjectArray *types = GeogebraCommonEuclidianEuclidianView_getLineTypes();
    if (style < 0 || style >= ((IOSObjectArray *) nil_chk(types))->size_) return;
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setLineTypeWithInt:[((JavaLangInteger *) nil_chk(IOSObjectArray_Get(nil_chk(types), style))) intValue]];
    [geo updateRepaint];
  }
}

- (void)deleteObjectWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) remove];
    [kernel_ notifyRepaint];
  }
}

- (jboolean)renameObjectWithNSString:(NSString *)oldName
                        withNSString:(NSString *)newName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:oldName];
    if (geo == nil) return NO;
    jboolean success = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) renameWithNSString:newName];
    [kernel_ notifyRepaint];
    return success;
  }
}

- (jboolean)existsWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    return (geo != nil);
  }
}

- (jboolean)isDefinedWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return NO;
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isDefined];
  }
}

- (jboolean)isIndependentWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return NO;
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isIndependent];
  }
}

- (NSString *)getValueStringWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return @"";
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoText]) return [((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])) getTextString];
    return [geo getAlgebraDescriptionDefault];
  }
}

- (NSString *)getDefinitionStringWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return @"";
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getDefinitionDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
}

- (NSString *)getCommandStringWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return @"";
    return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getCommandDescriptionWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()];
  }
}

- (jdouble)getXcoordWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return 0;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) return ((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]))->inhomX_;
    else if ([geo isGeoVector]) return ((GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoVector class]))->x_;
    else return 0;
  }
}

- (jdouble)getYcoordWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return 0;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) return ((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class]))->inhomY_;
    else if ([geo isGeoVector]) return ((GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoVector class]))->y_;
    else return 0;
  }
}

- (void)setCoordsWithNSString:(NSString *)objName
                   withDouble:(jdouble)x
                   withDouble:(jdouble)y {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return;
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoPoint]) {
      [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoPoint class])) setCoordsWithDouble:x withDouble:y withDouble:1];
    }
    else if ([geo isGeoVector]) {
      [((GeogebraCommonKernelGeosGeoVector *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoVector class])) setCoordsWithDouble:x withDouble:y withDouble:0];
    }
    else if ([GeogebraCommonKernelGeosAbsoluteScreenLocateable_class_() isInstance:geo]) {
      id<GeogebraCommonKernelGeosAbsoluteScreenLocateable> asl = (id<GeogebraCommonKernelGeosAbsoluteScreenLocateable>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosAbsoluteScreenLocateable));
      if ([asl isAbsoluteScreenLocActive]) {
        [asl setAbsoluteScreenLocWithInt:J2ObjCFpToInt(x) withInt:J2ObjCFpToInt(y)];
      }
      else {
        [asl setRealWorldLocWithDouble:x withDouble:y];
      }
    }
    else {
      return;
    }
    [geo updateRepaint];
  }
}

- (jdouble)getValueWithNSString:(NSString *)objName {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil) return 0;
    if ([GeogebraCommonKernelArithmeticNumberValue_class_() isInstance:geo]) return [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(((id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelArithmeticNumberValue))))) getDouble];
    else if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoBoolean]) return [((GeogebraCommonKernelGeosGeoBoolean *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoBoolean class])) getBoolean] ? 1 : 0;
    return 0;
  }
}

- (void)setValueWithNSString:(NSString *)objName
                  withDouble:(jdouble)x {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil || ![geo isIndependent]) {
      return;
    }
    IOSObjectArray *arg = [IOSObjectArray arrayWithObjects:(id[]){ geo, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_([kernel_ getConstruction], x) autorelease] } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()];
    GeogebraCommonKernelScriptingCmdSetValue_setValue2WithGeogebraCommonKernelGeosGeoElementArray_(arg);
  }
}

- (void)setTextValueWithNSString:(NSString *)objName
                    withNSString:(NSString *)x {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil || ![geo isGeoText] || ![geo isIndependent]) {
      return;
    }
    [((GeogebraCommonKernelGeosGeoText *) nil_chk(((GeogebraCommonKernelGeosGeoText *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoText class])))) setTextStringWithNSString:x];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
  }
}

- (void)setListValueWithNSString:(NSString *)objName
                      withDouble:(jdouble)x
                      withDouble:(jdouble)y {
  @synchronized(self) {
    GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
    if (geo == nil || ![geo isGeoList] || ![geo isIndependent]) {
      return;
    }
    GeogebraCommonKernelConstruction *cons = [kernel_ getConstruction];
    GeogebraCommonKernelScriptingCmdSetValue_setValue3WithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoList_withInt_withGeogebraCommonKernelGeosGeoElement_(kernel_, (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]), J2ObjCFpToInt(x), [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons, y) autorelease]);
  }
}

- (void)setRepaintingActiveWithBoolean:(jboolean)flag {
  @synchronized(self) {
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) setNotifyRepaintActiveWithBoolean:flag];
  }
}

- (void)setCoordSystemWithDouble:(jdouble)xmin
                      withDouble:(jdouble)xmax
                      withDouble:(jdouble)ymin
                      withDouble:(jdouble)ymax {
  @synchronized(self) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1])) setRealWorldCoordSystemWithDouble:xmin withDouble:xmax withDouble:ymin withDouble:ymax];
  }
}

- (void)setAxesVisibleWithBoolean:(jboolean)xVisible
                      withBoolean:(jboolean)yVisible {
  @synchronized(self) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1])) setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_X withBoolean:xVisible withBoolean:NO];
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView1])) setShowAxisWithInt:GeogebraCommonEuclidianEuclidianViewInterfaceCommon_AXIS_Y withBoolean:yVisible withBoolean:NO];
    [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) notifyRepaint];
  }
}

- (void)setAxesCornerCoordsVisibleWithBoolean:(jboolean)showAxesCornerCoords {
  @synchronized(self) {
    [((GeogebraCommonEuclidianEuclidianView *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1])) setAxesCornerCoordsVisibleWithBoolean:showAxesCornerCoords];
    if ([app_ hasEuclidianView2WithInt:1]) {
      [((GeogebraCommonEuclidianEuclidianView *) nil_chk([app_ getEuclidianView2WithInt:1])) setAxesCornerCoordsVisibleWithBoolean:showAxesCornerCoords];
    }
  }
}

- (void)setGridVisibleWithBoolean:(jboolean)flag {
  @synchronized(self) {
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSettings])) getEuclidianWithInt:1])) showGridWithBoolean:flag];
    [((GeogebraCommonMainSettingsEuclidianSettings *) nil_chk([((GeogebraCommonMainSettingsSettings *) nil_chk([app_ getSettings])) getEuclidianWithInt:2])) showGridWithBoolean:flag];
  }
}

- (IOSObjectArray *)getSelectedObjectNames {
  @synchronized(self) {
    JavaUtilArrayList *selGeos = [((GeogebraCommonMainSelectionManager *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getSelectionManager])) getSelectedGeos];
    IOSObjectArray *selObjNames = [IOSObjectArray arrayWithLength:[((JavaUtilArrayList *) nil_chk(selGeos)) size] type:NSString_class_()];
    for (jint i = 0; i < [selGeos size]; i++) {
      GeogebraCommonKernelGeosGeoElement *geo = [selGeos getWithInt:i];
      IOSObjectArray_Set(selObjNames, i, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_defaultTemplate_()]);
    }
    return selObjNames;
  }
}

- (jint)getObjectNumber {
  @synchronized(self) {
    return ((IOSObjectArray *) nil_chk([self getObjNames]))->size_;
  }
}

- (NSString *)getObjectNameWithInt:(jint)i {
  @synchronized(self) {
    IOSObjectArray *names = [self getObjNames];
    @try {
      return IOSObjectArray_Get(nil_chk(names), i);
    }
    @catch (JavaLangException *e) {
      return @"";
    }
  }
}

- (void)setXMLWithNSString:(NSString *)xml {
  @synchronized(self) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) setXMLWithNSString:xml withBoolean:YES];
  }
}

- (NSString *)getXML {
  @synchronized(self) {
    return [((GeogebraCommonMainApp *) nil_chk(app_)) getXML];
  }
}

- (GeogebraCommonMainApp *)getApplication {
  return GeogebraCommonPluginGgbAPI_getApplication(self);
}

- (NSString *)getBase64WithBoolean:(jboolean)includeThumbnail {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getBase64 {
  return [self getBase64WithBoolean:NO];
}

- (void)setPenColorWithInt:(jint)red
                   withInt:(jint)green
                   withInt:(jint)blue {
  [((GeogebraCommonEuclidianEuclidianPen *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) getEuclidianController])) getPen])) setPenColorWithGeogebraCommonAwtGColor:[((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue]];
}

- (void)setPenSizeWithInt:(jint)size {
  [((GeogebraCommonEuclidianEuclidianPen *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) getEuclidianController])) getPen])) setPenSizeWithInt:size];
}

- (jint)getPenSize {
  return [((GeogebraCommonEuclidianEuclidianPen *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) getEuclidianController])) getPen])) getPenSize];
}

- (NSString *)getPenColor {
  return JreStrcat("C$", '#', GeogebraCommonUtilStringUtil_toHexStringWithGeogebraCommonAwtGColor_([((GeogebraCommonEuclidianEuclidianPen *) nil_chk([((GeogebraCommonEuclidianEuclidianController *) nil_chk([((id<GeogebraCommonEuclidianEuclidianViewInterfaceCommon>) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getActiveEuclidianView])) getEuclidianController])) getPen])) getPenColor]));
}

- (jdouble)getListValueWithNSString:(NSString *)objName
                            withInt:(jint)index {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:objName];
  if (geo == nil || ![geo isGeoList]) {
    return JavaLangDouble_NaN;
  }
  GeogebraCommonKernelGeosGeoList *list = (GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class]);
  if (index < 1 || index >= [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) size] + 1) {
    return JavaLangDouble_NaN;
  }
  GeogebraCommonKernelGeosGeoElement *ret = [((GeogebraCommonKernelGeosGeoList *) nil_chk(list)) getWithInt:index - 1];
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(ret)) evaluateDouble];
}

- (void)addUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:(id<GeogebraCommonKernelUserAwarenessListener>)listener {
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) addUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:listener];
}

- (void)removeUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:(id<GeogebraCommonKernelUserAwarenessListener>)listener {
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) removeUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:listener];
}

- (void)undoWithBoolean:(jboolean)repaint {
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) undo];
  if (repaint) {
    [app_ doRepaintViews];
  }
}

- (void)redoWithBoolean:(jboolean)repaint {
  [((GeogebraCommonKernelKernel *) nil_chk([((GeogebraCommonMainApp *) nil_chk(app_)) getKernel])) redo];
  if (repaint) {
    [app_ doRepaintViews];
  }
}

- (void)setSaved {
  [((GeogebraCommonMainApp *) nil_chk(app_)) setSaved];
}

- (void)newConstruction {
  [((GeogebraCommonMainApp *) nil_chk(app_)) fileNew];
}

- (NSString *)getViewPropertiesWithInt:(jint)view {
  GeogebraCommonEuclidianEuclidianView *ev = view == 2 ? [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView2WithInt:1] : [((GeogebraCommonMainApp *) nil_chk(app_)) getEuclidianView1];
  JavaLangStringBuilder *sb = [new_JavaLangStringBuilder_initWithInt_(100) autorelease];
  [sb appendWithNSString:@"{\"invXscale\":"];
  [sb appendWithDouble:[ev getInvXscale]];
  [sb appendWithNSString:@",\"invYscale\":"];
  [sb appendWithDouble:[ev getInvYscale]];
  [sb appendWithNSString:@",\"xMin\":"];
  [sb appendWithDouble:[ev getXmin]];
  [sb appendWithNSString:@",\"yMin\":"];
  [sb appendWithDouble:[ev getYmin]];
  [sb appendWithNSString:@",\"width\":"];
  [sb appendWithInt:[ev getWidth]];
  [sb appendWithNSString:@",\"height\":"];
  [sb appendWithInt:[ev getHeight]];
  [sb appendWithNSString:@",\"left\":"];
  [sb appendWithInt:[ev getAbsoluteLeft]];
  [sb appendWithNSString:@",\"top\":"];
  [sb appendWithInt:[ev getAbsoluteTop]];
  [sb appendWithNSString:@"}"];
  return [sb description];
}

- (void)setFontWithNSString:(NSString *)label
                    withInt:(jint)size
                withBoolean:(jboolean)bold
                withBoolean:(jboolean)italic
                withBoolean:(jboolean)serif {
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:label];
  if ([GeogebraCommonKernelGeosTextProperties_class_() isInstance:geo]) {
    id<GeogebraCommonKernelGeosTextProperties> text = (id<GeogebraCommonKernelGeosTextProperties>) check_protocol_cast(geo, @protocol(GeogebraCommonKernelGeosTextProperties));
    [((id<GeogebraCommonKernelGeosTextProperties>) nil_chk(text)) setFontSizeMultiplierWithDouble:size / (0.0 + [((GeogebraCommonMainApp *) nil_chk(app_)) getFontSize])];
    [text setFontStyleWithInt:(bold ? GeogebraCommonAwtGFont_BOLD : GeogebraCommonAwtGFont_PLAIN) | (italic ? GeogebraCommonAwtGFont_ITALIC : GeogebraCommonAwtGFont_PLAIN)];
    [text setSerifFontWithBoolean:serif];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) updateRepaint];
  }
}

- (NSString *)evalGeoGebraCASWithNSString:(NSString *)cmdString {
  @synchronized(self) {
    return [self evalGeoGebraCASWithNSString:cmdString withBoolean:NO];
  }
}

- (NSString *)evalGeoGebraCASWithNSString:(NSString *)cmdString
                              withBoolean:(jboolean)debugOutput {
  @synchronized(self) {
    NSString *ret = @"";
    id<GeogebraCommonKernelGeoGebraCasInterface> ggbcas = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getGeoGebraCAS];
    @try {
      ret = [((id<GeogebraCommonKernelGeoGebraCasInterface>) nil_chk(ggbcas)) evaluateGeoGebraCASWithNSString:cmdString withGeogebraCommonKernelArithmeticMyArbitraryConstant:nil withGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_numericDefault_() withGeogebraCommonKernelKernel:kernel_];
    }
    @catch (JavaLangThrowable *t) {
      GeogebraCommonMainApp_debugWithNSString_([((JavaLangThrowable *) nil_chk(t)) description]);
    }
    if (debugOutput) GeogebraCommonMainApp_debugWithNSString_(JreStrcat("$$$$", @"evalGeoGebraCAS\n input:", cmdString, @"\noutput: ", ret));
    return ret;
  }
}

- (void)loginWithNSString:(NSString *)token {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getLoginOperation] != nil) {
    GeogebraCommonMainApp_debugWithNSString_(@"LTOKEN send via API");
    [((GeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([app_ getLoginOperation])) performTokenLoginWithNSString:token withBoolean:NO];
  }
}

- (void)logout {
  if ([((GeogebraCommonMainApp *) nil_chk(app_)) getLoginOperation] != nil && [((GeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([app_ getLoginOperation])) getModel] != nil) {
    [((GeogebraCommonMoveGgtapiModelsGeoGebraTubeAPI *) nil_chk([((GeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([app_ getLoginOperation])) getGeoGebraTubeAPI])) logoutWithNSString:[((GeogebraCommonMoveGgtapiModelsAuthenticationModel *) nil_chk([((GeogebraCommonMoveGgtapiOperationsLogInOperation *) nil_chk([app_ getLoginOperation])) getModel])) getLoginToken]];
  }
}

- (void)setPerspectiveWithNSString:(NSString *)code {
  if ([((NSString *) nil_chk(code)) hasPrefix:@"search:"]) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) openSearchWithNSString:[code substring:((jint) [@"search:" length])]];
    return;
  }
  if ([code hasPrefix:@"customize:"]) {
    [((GeogebraCommonMainApp *) nil_chk(app_)) showCustomizeToolbarGUI];
    return;
  }
  GeogebraCommonIoLayoutPerspective *ps = GeogebraCommonIoLayoutPerspectiveDecoder_decodeWithNSString_withGeogebraCommonKernelParserParser_withNSString_(code, [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getParser], GeogebraCommonGuiToolbarToolBar_getAllToolsNoMacrosWithBoolean_withBoolean_([((GeogebraCommonMainApp *) nil_chk(app_)) isHTML5Applet], [app_ isExam]));
  @try {
    [app_ persistWidthAndHeight];
    [((GeogebraCommonGuiLayout *) nil_chk([((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) getLayout])) applyPerspectiveWithGeogebraCommonIoLayoutPerspective:ps];
    [app_ updateViewSizes];
    [((id<GeogebraCommonMainGuiManagerInterface>) nil_chk([app_ getGuiManager])) updateMenubar];
  }
  @catch (JavaLangException *e) {
    [((JavaLangException *) nil_chk(e)) printStackTrace];
  }
  return;
}

- (jboolean)getVisibleWithNSString:(NSString *)label
                           withInt:(jint)view {
  if (view < 1 || view > 2) {
    return NO;
  }
  GeogebraCommonKernelGeosGeoElement *geo = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) lookupLabelWithNSString:label];
  if (geo == nil) {
    return NO;
  }
  return [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isVisibleInViewWithInt:view == 1 ? GeogebraCommonMainApp_VIEW_EUCLIDIAN : GeogebraCommonMainApp_VIEW_EUCLIDIAN2];
}

- (instancetype)init {
  GeogebraCommonPluginGgbAPI_init(self);
  return self;
}

- (void)dealloc {
  RELEASE_(kernel_);
  RELEASE_(construction_);
  RELEASE_(algebraprocessor_);
  RELEASE_(app_);
  RELEASE_(objNames_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getConstruction", NULL, "Lgeogebra.common.kernel.Construction;", 0x1, NULL, NULL },
    { "getKernel", NULL, "Lgeogebra.common.kernel.Kernel;", 0x1, NULL, NULL },
    { "getAlgebraProcessor", NULL, "Lgeogebra.common.kernel.commands.AlgebraProcessor;", 0x1, NULL, NULL },
    { "evalXMLWithNSString:", "evalXML", "V", 0x21, NULL, NULL },
    { "evalCommandCASWithNSString:", "evalCommandCAS", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "evalCommandWithNSString:", "evalCommand", "Z", 0x21, NULL, NULL },
    { "debugWithNSString:", "debug", "V", 0x21, NULL, NULL },
    { "getXMLWithNSString:", "getXML", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getAlgorithmXMLWithNSString:", "getAlgorithmXML", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "setVisibleWithNSString:withBoolean:", "setVisible", "V", 0x21, NULL, NULL },
    { "getVisibleWithNSString:", "getVisible", "Z", 0x21, NULL, NULL },
    { "setLayerWithNSString:withInt:", "setLayer", "V", 0x21, NULL, NULL },
    { "getLayerWithNSString:", "getLayer", "I", 0x21, NULL, NULL },
    { "setLayerVisibleWithInt:withBoolean:", "setLayerVisible", "V", 0x21, NULL, NULL },
    { "getObjNames", NULL, "[Ljava.lang.String;", 0x1, NULL, NULL },
    { "getAllObjectNames", NULL, "[Ljava.lang.String;", 0x21, NULL, NULL },
    { "setFixedWithNSString:withBoolean:", "setFixed", "V", 0x21, NULL, NULL },
    { "setTraceWithNSString:withBoolean:", "setTrace", "V", 0x21, NULL, NULL },
    { "setLabelVisibleWithNSString:withBoolean:", "setLabelVisible", "V", 0x21, NULL, NULL },
    { "setLabelStyleWithNSString:withInt:", "setLabelStyle", "V", 0x21, NULL, NULL },
    { "setColorWithNSString:withInt:withInt:withInt:", "setColor", "V", 0x21, NULL, NULL },
    { "setCornerWithNSString:withDouble:withDouble:", "setCorner", "V", 0x21, NULL, NULL },
    { "setCornerWithNSString:withDouble:withDouble:withInt:", "setCorner", "V", 0x21, NULL, NULL },
    { "setAnimatingWithNSString:withBoolean:", "setAnimating", "V", 0x1, NULL, NULL },
    { "setAnimationSpeedWithNSString:withDouble:", "setAnimationSpeed", "V", 0x1, NULL, NULL },
    { "getColorWithNSString:", "getColor", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getLineThicknessWithNSString:", "getLineThickness", "I", 0x21, NULL, NULL },
    { "setLineThicknessWithNSString:withInt:", "setLineThickness", "V", 0x21, NULL, NULL },
    { "getPointStyleWithNSString:", "getPointStyle", "I", 0x21, NULL, NULL },
    { "setPointStyleWithNSString:withInt:", "setPointStyle", "V", 0x21, NULL, NULL },
    { "getPointSizeWithNSString:", "getPointSize", "I", 0x21, NULL, NULL },
    { "setPointSizeWithNSString:withInt:", "setPointSize", "V", 0x21, NULL, NULL },
    { "getFillingWithNSString:", "getFilling", "D", 0x21, NULL, NULL },
    { "setFillingWithNSString:withDouble:", "setFilling", "V", 0x21, NULL, NULL },
    { "setOnTheFlyPointCreationActiveWithBoolean:", "setOnTheFlyPointCreationActive", "V", 0x1, NULL, NULL },
    { "setUndoPoint", NULL, "V", 0x1, NULL, NULL },
    { "initCAS", NULL, "V", 0x1, NULL, NULL },
    { "uploadToGeoGebraTube", NULL, "V", 0x1, NULL, NULL },
    { "startAnimation", NULL, "V", 0x1, NULL, NULL },
    { "stopAnimation", NULL, "V", 0x1, NULL, NULL },
    { "hideCursorWhenDraggingWithBoolean:", "hideCursorWhenDragging", "V", 0x1, NULL, NULL },
    { "isAnimationRunning", NULL, "Z", 0x1, NULL, NULL },
    { "registerAddListenerWithNSString:", "registerAddListener", "V", 0x21, NULL, NULL },
    { "unregisterAddListenerWithNSString:", "unregisterAddListener", "V", 0x21, NULL, NULL },
    { "registerRemoveListenerWithNSString:", "registerRemoveListener", "V", 0x21, NULL, NULL },
    { "unregisterRemoveListenerWithNSString:", "unregisterRemoveListener", "V", 0x21, NULL, NULL },
    { "registerClearListenerWithNSString:", "registerClearListener", "V", 0x21, NULL, NULL },
    { "unregisterClearListenerWithNSString:", "unregisterClearListener", "V", 0x21, NULL, NULL },
    { "registerRenameListenerWithNSString:", "registerRenameListener", "V", 0x21, NULL, NULL },
    { "unregisterRenameListenerWithNSString:", "unregisterRenameListener", "V", 0x21, NULL, NULL },
    { "registerUpdateListenerWithNSString:", "registerUpdateListener", "V", 0x21, NULL, NULL },
    { "unregisterUpdateListenerWithNSString:", "unregisterUpdateListener", "V", 0x21, NULL, NULL },
    { "registerObjectUpdateListenerWithNSString:withNSString:", "registerObjectUpdateListener", "V", 0x21, NULL, NULL },
    { "unregisterObjectUpdateListenerWithNSString:", "unregisterObjectUpdateListener", "V", 0x21, NULL, NULL },
    { "registerClickListenerWithNSString:", "registerClickListener", "V", 0x21, NULL, NULL },
    { "unregisterClickListenerWithNSString:", "unregisterClickListener", "V", 0x21, NULL, NULL },
    { "registerClientListenerWithNSString:", "registerClientListener", "V", 0x1, NULL, NULL },
    { "unregisterClientListenerWithNSString:", "unregisterClientListener", "V", 0x1, NULL, NULL },
    { "registerObjectClickListenerWithNSString:withNSString:", "registerObjectClickListener", "V", 0x21, NULL, NULL },
    { "unregisterObjectClickListenerWithNSString:", "unregisterObjectClickListener", "V", 0x21, NULL, NULL },
    { "registerStoreUndoListenerWithNSString:", "registerStoreUndoListener", "V", 0x21, NULL, NULL },
    { "isMoveableWithNSString:", "isMoveable", "Z", 0x1, NULL, NULL },
    { "getObjectTypeWithNSString:", "getObjectType", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "setModeWithInt:", "setMode", "V", 0x21, NULL, NULL },
    { "getLineStyleWithNSString:", "getLineStyle", "I", 0x21, NULL, NULL },
    { "setLineStyleWithNSString:withInt:", "setLineStyle", "V", 0x21, NULL, NULL },
    { "deleteObjectWithNSString:", "deleteObject", "V", 0x21, NULL, NULL },
    { "renameObjectWithNSString:withNSString:", "renameObject", "Z", 0x21, NULL, NULL },
    { "existsWithNSString:", "exists", "Z", 0x21, NULL, NULL },
    { "isDefinedWithNSString:", "isDefined", "Z", 0x21, NULL, NULL },
    { "isIndependentWithNSString:", "isIndependent", "Z", 0x21, NULL, NULL },
    { "getValueStringWithNSString:", "getValueString", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getDefinitionStringWithNSString:", "getDefinitionString", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getCommandStringWithNSString:", "getCommandString", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getXcoordWithNSString:", "getXcoord", "D", 0x21, NULL, NULL },
    { "getYcoordWithNSString:", "getYcoord", "D", 0x21, NULL, NULL },
    { "setCoordsWithNSString:withDouble:withDouble:", "setCoords", "V", 0x21, NULL, NULL },
    { "getValueWithNSString:", "getValue", "D", 0x21, NULL, NULL },
    { "setValueWithNSString:withDouble:", "setValue", "V", 0x21, NULL, NULL },
    { "setTextValueWithNSString:withNSString:", "setTextValue", "V", 0x21, NULL, NULL },
    { "setListValueWithNSString:withDouble:withDouble:", "setListValue", "V", 0x21, NULL, NULL },
    { "setRepaintingActiveWithBoolean:", "setRepaintingActive", "V", 0x21, NULL, NULL },
    { "setCoordSystemWithDouble:withDouble:withDouble:withDouble:", "setCoordSystem", "V", 0x21, NULL, NULL },
    { "setAxesVisibleWithBoolean:withBoolean:", "setAxesVisible", "V", 0x21, NULL, NULL },
    { "setAxesCornerCoordsVisibleWithBoolean:", "setAxesCornerCoordsVisible", "V", 0x21, NULL, NULL },
    { "setGridVisibleWithBoolean:", "setGridVisible", "V", 0x21, NULL, NULL },
    { "getSelectedObjectNames", NULL, "[Ljava.lang.String;", 0x21, NULL, NULL },
    { "getObjectNumber", NULL, "I", 0x21, NULL, NULL },
    { "getObjectNameWithInt:", "getObjectName", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "setXMLWithNSString:", "setXML", "V", 0x21, NULL, NULL },
    { "getXML", NULL, "Ljava.lang.String;", 0x21, NULL, NULL },
    { "getApplication", NULL, "Lgeogebra.common.main.App;", 0x11, NULL, NULL },
    { "getBase64WithBoolean:", "getBase64", "Ljava.lang.String;", 0x401, NULL, NULL },
    { "getBase64", NULL, "Ljava.lang.String;", 0x11, NULL, NULL },
    { "setPenColorWithInt:withInt:withInt:", "setPenColor", "V", 0x11, NULL, NULL },
    { "setPenSizeWithInt:", "setPenSize", "V", 0x11, NULL, NULL },
    { "getPenSize", NULL, "I", 0x1, NULL, NULL },
    { "getPenColor", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "getListValueWithNSString:withInt:", "getListValue", "D", 0x1, NULL, NULL },
    { "addUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:", "addUserAwarenessListener", "V", 0x1, NULL, NULL },
    { "removeUserAwarenessListenerWithGeogebraCommonKernelUserAwarenessListener:", "removeUserAwarenessListener", "V", 0x1, NULL, NULL },
    { "undoWithBoolean:", "undo", "V", 0x1, NULL, NULL },
    { "redoWithBoolean:", "redo", "V", 0x1, NULL, NULL },
    { "setSaved", NULL, "V", 0x1, NULL, NULL },
    { "newConstruction", NULL, "V", 0x1, NULL, NULL },
    { "getViewPropertiesWithInt:", "getViewProperties", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setFontWithNSString:withInt:withBoolean:withBoolean:withBoolean:", "setFont", "V", 0x1, NULL, NULL },
    { "evalGeoGebraCASWithNSString:", "evalGeoGebraCAS", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "evalGeoGebraCASWithNSString:withBoolean:", "evalGeoGebraCAS", "Ljava.lang.String;", 0x21, NULL, NULL },
    { "loginWithNSString:", "login", "V", 0x1, NULL, NULL },
    { "logout", NULL, "V", 0x1, NULL, NULL },
    { "setPerspectiveWithNSString:", "setPerspective", "V", 0x1, NULL, NULL },
    { "getVisibleWithNSString:withInt:", "getVisible", "Z", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "kernel_", NULL, 0x4, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
    { "construction_", NULL, 0x4, "Lgeogebra.common.kernel.Construction;", NULL, NULL,  },
    { "algebraprocessor_", NULL, 0x4, "Lgeogebra.common.kernel.commands.AlgebraProcessor;", NULL, NULL,  },
    { "app_", NULL, 0x4, "Lgeogebra.common.main.App;", NULL, NULL,  },
    { "objNames_", NULL, 0x2, "[Ljava.lang.String;", NULL, NULL,  },
    { "lastGeoElementsIteratorSize_", NULL, 0x1, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonPluginGgbAPI = { 2, "GgbAPI", "geogebra.common.plugin", NULL, 0x401, 114, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonPluginGgbAPI;
}

@end

GeogebraCommonMainApp *GeogebraCommonPluginGgbAPI_getApplication(GeogebraCommonPluginGgbAPI *self) {
  return self->app_;
}

void GeogebraCommonPluginGgbAPI_init(GeogebraCommonPluginGgbAPI *self) {
  NSObject_init(self);
  GeogebraCommonPluginGgbAPI_set_kernel_(self, nil);
  GeogebraCommonPluginGgbAPI_set_construction_(self, nil);
  GeogebraCommonPluginGgbAPI_set_algebraprocessor_(self, nil);
  GeogebraCommonPluginGgbAPI_set_app_(self, nil);
  self->lastGeoElementsIteratorSize_ = 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonPluginGgbAPI)
