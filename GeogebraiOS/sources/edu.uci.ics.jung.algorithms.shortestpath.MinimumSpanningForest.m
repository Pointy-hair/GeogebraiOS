//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/edu/uci/ics/jung/algorithms/shortestpath/MinimumSpanningForest.java
//


#include "J2ObjC_source.h"
#include "edu/uci/ics/jung/algorithms/shortestpath/MinimumSpanningForest.h"
#include "edu/uci/ics/jung/graph/Forest.h"
#include "edu/uci/ics/jung/graph/Graph.h"
#include "edu/uci/ics/jung/graph/util/EdgeType.h"
#include "edu/uci/ics/jung/graph/util/Pair.h"
#include "java/lang/Double.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/apache/commons/collections15/Factory.h"
#include "org/apache/commons/collections15/functors/ConstantTransformer.h"
#include "org/apache/commons/collections15/map/LazyMap.h"

@implementation EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest

- (instancetype)initWithEduUciIcsJungGraphGraph:(id<EduUciIcsJungGraphGraph>)graph
       withOrgApacheCommonsCollections15Factory:(id<OrgApacheCommonsCollections15Factory>)factory
                                         withId:(id)root
                                withJavaUtilMap:(id<JavaUtilMap>)weights {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withOrgApacheCommonsCollections15Factory_withId_withJavaUtilMap_(self, graph, factory, root, weights);
  return self;
}

- (instancetype)initWithEduUciIcsJungGraphGraph:(id<EduUciIcsJungGraphGraph>)graph
                   withEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)forest
                                         withId:(id)root
                                withJavaUtilMap:(id<JavaUtilMap>)weights {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_withJavaUtilMap_(self, graph, forest, root, weights);
  return self;
}

- (instancetype)initWithEduUciIcsJungGraphGraph:(id<EduUciIcsJungGraphGraph>)graph
                   withEduUciIcsJungGraphForest:(id<EduUciIcsJungGraphForest>)forest
                                         withId:(id)root {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_(self, graph, forest, root);
  return self;
}

- (id<EduUciIcsJungGraphForest>)getForest {
  return forest_;
}

- (void)updateForestWithJavaUtilCollection:(id<JavaUtilCollection>)tv
                    withJavaUtilCollection:(id<JavaUtilCollection>)unfinishedEdges {
  jdouble minCost = JavaLangDouble_MAX_VALUE;
  id nextEdge = nil;
  id nextVertex = nil;
  id currentVertex = nil;
  for (id __strong e in nil_chk(unfinishedEdges)) {
    if ([((id<JavaUtilCollection>) nil_chk([((id<EduUciIcsJungGraphForest>) nil_chk(forest_)) getEdges])) containsWithId:e]) continue;
    EduUciIcsJungGraphUtilPair *endpoints = [((id<EduUciIcsJungGraphGraph>) nil_chk(graph_)) getEndpointsWithId:e];
    id first = [((EduUciIcsJungGraphUtilPair *) nil_chk(endpoints)) getFirst];
    id second = [endpoints getSecond];
    if ([((id<JavaUtilCollection>) nil_chk(tv)) containsWithId:first] == YES && [tv containsWithId:second] == NO) {
      if ([((JavaLangDouble *) nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) getWithId:e])) doubleValue] < minCost) {
        minCost = [((JavaLangDouble *) nil_chk([weights_ getWithId:e])) doubleValue];
        nextEdge = e;
        currentVertex = first;
        nextVertex = second;
      }
    }
    if ([graph_ getEdgeTypeWithId:e] == EduUciIcsJungGraphUtilEdgeTypeEnum_get_UNDIRECTED() && [tv containsWithId:second] == YES && [tv containsWithId:first] == NO) {
      if ([((JavaLangDouble *) nil_chk([((id<JavaUtilMap>) nil_chk(weights_)) getWithId:e])) doubleValue] < minCost) {
        minCost = [((JavaLangDouble *) nil_chk([weights_ getWithId:e])) doubleValue];
        nextEdge = e;
        currentVertex = second;
        nextVertex = first;
      }
    }
  }
  if (nextVertex != nil && nextEdge != nil) {
    [unfinishedEdges removeWithId:nextEdge];
    [((id<EduUciIcsJungGraphForest>) nil_chk(forest_)) addEdgeWithId:nextEdge withId:currentVertex withId:nextVertex];
    [self updateForestWithJavaUtilCollection:[forest_ getVertices] withJavaUtilCollection:unfinishedEdges];
  }
  id<JavaUtilCollection> leftovers = [new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(graph_)) getVertices]) autorelease];
  [leftovers removeAllWithJavaUtilCollection:[((id<EduUciIcsJungGraphForest>) nil_chk(forest_)) getVertices]];
  if ([leftovers size] > 0) {
    id anotherRoot = [((id<JavaUtilIterator>) nil_chk([leftovers iterator])) next];
    [forest_ addVertexWithId:anotherRoot];
    [self updateForestWithJavaUtilCollection:[forest_ getVertices] withJavaUtilCollection:unfinishedEdges];
  }
}

- (void)dealloc {
  RELEASE_(graph_);
  RELEASE_(forest_);
  RELEASE_(weights_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithEduUciIcsJungGraphGraph:withOrgApacheCommonsCollections15Factory:withId:withJavaUtilMap:", "MinimumSpanningForest", NULL, 0x1, NULL, "(Ledu/uci/ics/jung/graph/Graph<TV;TE;>;Lorg/apache/commons/collections15/Factory<Ledu/uci/ics/jung/graph/Forest<TV;TE;>;>;TV;Ljava/util/Map<TE;Ljava/lang/Double;>;)V" },
    { "initWithEduUciIcsJungGraphGraph:withEduUciIcsJungGraphForest:withId:withJavaUtilMap:", "MinimumSpanningForest", NULL, 0x1, NULL, "(Ledu/uci/ics/jung/graph/Graph<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TV;Ljava/util/Map<TE;Ljava/lang/Double;>;)V" },
    { "initWithEduUciIcsJungGraphGraph:withEduUciIcsJungGraphForest:withId:", "MinimumSpanningForest", NULL, 0x1, NULL, "(Ledu/uci/ics/jung/graph/Graph<TV;TE;>;Ledu/uci/ics/jung/graph/Forest<TV;TE;>;TV;)V" },
    { "getForest", NULL, "Ledu.uci.ics.jung.graph.Forest;", 0x1, NULL, NULL },
    { "updateForestWithJavaUtilCollection:withJavaUtilCollection:", "updateForest", "V", 0x4, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "graph_", NULL, 0x4, "Ledu.uci.ics.jung.graph.Graph;", NULL, "Ledu/uci/ics/jung/graph/Graph<TV;TE;>;",  },
    { "forest_", NULL, 0x4, "Ledu.uci.ics.jung.graph.Forest;", NULL, "Ledu/uci/ics/jung/graph/Forest<TV;TE;>;",  },
    { "weights_", NULL, 0x4, "Ljava.util.Map;", NULL, "Ljava/util/Map<TE;Ljava/lang/Double;>;",  },
  };
  static const J2ObjcClassInfo _EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest = { 2, "MinimumSpanningForest", "edu.uci.ics.jung.algorithms.shortestpath", NULL, 0x1, 5, methods, 3, fields, 0, NULL, 0, NULL, NULL, "<V:Ljava/lang/Object;E:Ljava/lang/Object;>Ljava/lang/Object;" };
  return &_EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest;
}

@end

void EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withOrgApacheCommonsCollections15Factory_withId_withJavaUtilMap_(EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self, id<EduUciIcsJungGraphGraph> graph, id<OrgApacheCommonsCollections15Factory> factory, id root, id<JavaUtilMap> weights) {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_withJavaUtilMap_(self, graph, [((id<OrgApacheCommonsCollections15Factory>) nil_chk(factory)) create], root, weights);
}

EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *new_EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withOrgApacheCommonsCollections15Factory_withId_withJavaUtilMap_(id<EduUciIcsJungGraphGraph> graph, id<OrgApacheCommonsCollections15Factory> factory, id root, id<JavaUtilMap> weights) {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self = [EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest alloc];
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withOrgApacheCommonsCollections15Factory_withId_withJavaUtilMap_(self, graph, factory, root, weights);
  return self;
}

void EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_withJavaUtilMap_(EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self, id<EduUciIcsJungGraphGraph> graph, id<EduUciIcsJungGraphForest> forest, id root, id<JavaUtilMap> weights) {
  NSObject_init(self);
  if ([((id<EduUciIcsJungGraphForest>) nil_chk(forest)) getVertexCount] != 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Supplied Forest must be empty") autorelease];
  }
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_graph_(self, graph);
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_forest_(self, forest);
  if (weights != nil) {
    EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_weights_(self, weights);
  }
  id<JavaUtilSet> unfinishedEdges = [new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(graph)) getEdges]) autorelease];
  if ([((id<JavaUtilCollection>) nil_chk([graph getVertices])) containsWithId:root]) {
    [self->forest_ addVertexWithId:root];
  }
  [self updateForestWithJavaUtilCollection:[forest getVertices] withJavaUtilCollection:unfinishedEdges];
}

EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *new_EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_withJavaUtilMap_(id<EduUciIcsJungGraphGraph> graph, id<EduUciIcsJungGraphForest> forest, id root, id<JavaUtilMap> weights) {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self = [EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest alloc];
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_withJavaUtilMap_(self, graph, forest, root, weights);
  return self;
}

void EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_(EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self, id<EduUciIcsJungGraphGraph> graph, id<EduUciIcsJungGraphForest> forest, id root) {
  NSObject_init(self);
  if ([((id<EduUciIcsJungGraphForest>) nil_chk(forest)) getVertexCount] != 0) {
    @throw [new_JavaLangIllegalArgumentException_initWithNSString_(@"Supplied Forest must be empty") autorelease];
  }
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_graph_(self, graph);
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_forest_(self, forest);
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_set_weights_(self, OrgApacheCommonsCollections15MapLazyMap_decorateWithJavaUtilMap_withOrgApacheCommonsCollections15Transformer_([new_JavaUtilHashMap_init() autorelease], [new_OrgApacheCommonsCollections15FunctorsConstantTransformer_initWithId_(JavaLangDouble_valueOfWithDouble_(1.0)) autorelease]));
  id<JavaUtilSet> unfinishedEdges = [new_JavaUtilHashSet_initWithJavaUtilCollection_([((id<EduUciIcsJungGraphGraph>) nil_chk(graph)) getEdges]) autorelease];
  if ([((id<JavaUtilCollection>) nil_chk([graph getVertices])) containsWithId:root]) {
    [self->forest_ addVertexWithId:root];
  }
  [self updateForestWithJavaUtilCollection:[forest getVertices] withJavaUtilCollection:unfinishedEdges];
}

EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *new_EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_(id<EduUciIcsJungGraphGraph> graph, id<EduUciIcsJungGraphForest> forest, id root) {
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest *self = [EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest alloc];
  EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest_initWithEduUciIcsJungGraphGraph_withEduUciIcsJungGraphForest_withId_(self, graph, forest, root);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(EduUciIcsJungAlgorithmsShortestpathMinimumSpanningForest)
