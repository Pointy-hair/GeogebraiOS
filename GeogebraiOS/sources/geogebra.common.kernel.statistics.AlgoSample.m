//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/AlgoSample.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoBoolean.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/statistics/AlgoSample.h"
#include "geogebra/common/main/App.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@interface GeogebraCommonKernelStatisticsAlgoSample () {
 @public
  GeogebraCommonKernelGeosGeoList *inputList_;
  GeogebraCommonKernelGeosGeoBoolean *replacement_;
  id<GeogebraCommonKernelArithmeticNumberValue> num_;
  GeogebraCommonKernelGeosGeoList *outputList_;
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSample, inputList_, GeogebraCommonKernelGeosGeoList *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSample, replacement_, GeogebraCommonKernelGeosGeoBoolean *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSample, num_, id<GeogebraCommonKernelArithmeticNumberValue>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelStatisticsAlgoSample, outputList_, GeogebraCommonKernelGeosGeoList *)

static jint GeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_ = 10000;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelStatisticsAlgoSample, SAMPLE_MAXSIZE_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelStatisticsAlgoSample, SAMPLE_MAXSIZE_, jint)

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoSample_compute(GeogebraCommonKernelStatisticsAlgoSample *self);

__attribute__((unused)) static void GeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withDouble_(GeogebraCommonKernelStatisticsAlgoSample *self, jint index, jdouble value);

@implementation GeogebraCommonKernelStatisticsAlgoSample

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)inputList
           withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
                  withGeogebraCommonKernelGeosGeoBoolean:(GeogebraCommonKernelGeosGeoBoolean *)replacement {
  GeogebraCommonKernelStatisticsAlgoSample_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, num, replacement);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Sample();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:replacement_ == nil ? 2 : 3 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, inputList_);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(num_)) toGeoElement]);
  if (replacement_ != nil) IOSObjectArray_Set(input_, 2, replacement_);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:outputList_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoList *)getResult {
  return outputList_;
}

- (void)compute {
  GeogebraCommonKernelStatisticsAlgoSample_compute(self);
}

- (void)setListElementWithInt:(jint)index
                   withDouble:(jdouble)value {
  GeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withDouble_(self, index, value);
}

- (void)dealloc {
  RELEASE_(inputList_);
  RELEASE_(replacement_);
  RELEASE_(num_);
  RELEASE_(outputList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoList:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelGeosGeoBoolean:", "AlgoSample", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoList;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "setListElementWithInt:withDouble:", "setListElement", "V", 0x2, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "SAMPLE_MAXSIZE_", NULL, 0xa, "I", &GeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_, NULL,  },
    { "inputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
    { "replacement_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoBoolean;", NULL, NULL,  },
    { "num_", NULL, 0x2, "Lgeogebra.common.kernel.arithmetic.NumberValue;", NULL, NULL,  },
    { "outputList_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsAlgoSample = { 2, "AlgoSample", "geogebra.common.kernel.statistics", NULL, 0x1, 6, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsAlgoSample;
}

@end

void GeogebraCommonKernelStatisticsAlgoSample_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelStatisticsAlgoSample *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelArithmeticNumberValue> num, GeogebraCommonKernelGeosGeoBoolean *replacement) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelStatisticsAlgoSample_set_inputList_(self, inputList);
  GeogebraCommonKernelStatisticsAlgoSample_set_replacement_(self, replacement);
  GeogebraCommonKernelStatisticsAlgoSample_set_num_(self, num);
  GeogebraCommonKernelStatisticsAlgoSample_setAndConsume_outputList_(self, new_GeogebraCommonKernelGeosGeoList_initWithGeogebraCommonKernelConstruction_(cons));
  [self setInputOutput];
  GeogebraCommonKernelStatisticsAlgoSample_compute(self);
  [self->outputList_ setLabelWithNSString:label];
}

GeogebraCommonKernelStatisticsAlgoSample *new_GeogebraCommonKernelStatisticsAlgoSample_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoList *inputList, id<GeogebraCommonKernelArithmeticNumberValue> num, GeogebraCommonKernelGeosGeoBoolean *replacement) {
  GeogebraCommonKernelStatisticsAlgoSample *self = [GeogebraCommonKernelStatisticsAlgoSample alloc];
  GeogebraCommonKernelStatisticsAlgoSample_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelGeosGeoBoolean_(self, cons, label, inputList, num, replacement);
  return self;
}

void GeogebraCommonKernelStatisticsAlgoSample_compute(GeogebraCommonKernelStatisticsAlgoSample *self) {
  jint size = J2ObjCFpToInt([((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(self->num_)) getDouble]);
  if (![((GeogebraCommonKernelGeosGeoList *) nil_chk(self->inputList_)) isDefined] || [self->num_ getDouble] < 1 || [self->num_ getDouble] > GeogebraCommonKernelStatisticsAlgoSample_SAMPLE_MAXSIZE_) {
    [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) setUndefined];
    return;
  }
  jboolean withReplacement = YES;
  if (self->replacement_ != nil) {
    withReplacement = [self->replacement_ getBoolean];
  }
  jint inputListSize = [self->inputList_ size];
  [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) clear];
  if (withReplacement) {
    for (jint i = 0; i < size; i++) {
      id<GeogebraCommonKernelArithmeticNumberValue> geo;
      @try {
        geo = (id<GeogebraCommonKernelArithmeticNumberValue>) check_protocol_cast([self->inputList_ getWithInt:J2ObjCFpToInt(JavaLangMath_floorWithDouble_([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication])) getRandomNumber] * inputListSize))], @protocol(GeogebraCommonKernelArithmeticNumberValue));
      }
      @catch (JavaLangClassCastException *e) {
        [self->outputList_ setUndefined];
        return;
      }
      GeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withDouble_(self, i, [((id<GeogebraCommonKernelArithmeticNumberValue>) nil_chk(geo)) getDouble]);
    }
  }
  else {
    if (size > inputListSize) {
      [self->outputList_ setUndefined];
      return;
    }
    JavaUtilArrayList *list = [new_JavaUtilArrayList_init() autorelease];
    for (jint i = 0; i < inputListSize; i++) {
      [list addWithId:[self->inputList_ getWithInt:i]];
    }
    for (jint i = 0; i < size; i++) {
      jint pos = J2ObjCFpToInt(JavaLangMath_floorWithDouble_([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelConstruction *) nil_chk(self->cons_)) getApplication])) getRandomNumber] * (inputListSize - i)));
      [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:[list getWithInt:pos]];
      [list removeWithInt:pos];
    }
  }
  [self->outputList_ setDefinedWithBoolean:YES];
}

void GeogebraCommonKernelStatisticsAlgoSample_setListElementWithInt_withDouble_(GeogebraCommonKernelStatisticsAlgoSample *self, jint index, jdouble value) {
  GeogebraCommonKernelGeosGeoNumeric *listElement;
  if (index < [((GeogebraCommonKernelGeosGeoList *) nil_chk(self->outputList_)) getCacheSize]) {
    listElement = (GeogebraCommonKernelGeosGeoNumeric *) check_class_cast([self->outputList_ getCachedWithInt:index], [GeogebraCommonKernelGeosGeoNumeric class]);
  }
  else {
    listElement = [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_(self->cons_) autorelease];
    [listElement setParentAlgorithmWithGeogebraCommonKernelAlgosAlgoElement:self];
    [listElement setConstructionDefaults];
    [listElement setUseVisualDefaultsWithBoolean:NO];
  }
  [self->outputList_ addWithGeogebraCommonKernelGeosGeoElement:listElement];
  [((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(listElement)) setValueWithDouble:value];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsAlgoSample)
