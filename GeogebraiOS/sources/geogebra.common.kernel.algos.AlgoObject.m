//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoObject.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoObject.h"
#include "geogebra/common/kernel/algos/AlgorithmSet.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "java/util/Iterator.h"

@interface GeogebraCommonKernelAlgosAlgoObject () {
 @public
  GeogebraCommonKernelGeosGeoElement *geo_;
  GeogebraCommonKernelGeosGeoText *text_;
  NSString *currentLabel_;
  GeogebraCommonKernelGeosGeoElement *refObject_;
  IOSObjectArray *inputForUpdateSetPropagation_;
}

- (void)updateReferencedObject;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoObject, geo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoObject, text_, GeogebraCommonKernelGeosGeoText *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoObject, currentLabel_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoObject, refObject_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoObject, inputForUpdateSetPropagation_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoObject_compute(GeogebraCommonKernelAlgosAlgoObject *self);

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(GeogebraCommonKernelAlgosAlgoObject *self);

@implementation GeogebraCommonKernelAlgosAlgoObject

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoText:(GeogebraCommonKernelGeosGeoText *)text {
  GeogebraCommonKernelAlgosAlgoObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Object();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, text_);
  GeogebraCommonKernelAlgosAlgoObject_setAndConsume_inputForUpdateSetPropagation_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(inputForUpdateSetPropagation_, 0, text_);
  GeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
  if (refObject_ != nil) {
    GeogebraCommonKernelAlgosAlgoObject_set_geo_(self, [refObject_ copyInternalWithGeogebraCommonKernelConstruction:cons_]);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) setVisualStyleWithGeogebraCommonKernelGeosGeoElement:refObject_];
    [geo_ setUseVisualDefaultsWithBoolean:NO];
  }
  else {
    GeogebraCommonKernelAlgosAlgoObject_set_geo_(self, [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getOutputGeo]);
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo_)) setUndefined];
  }
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:geo_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoElement *)getResult {
  return geo_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoObject_compute(self);
}

- (void)updateReferencedObject {
  GeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
}

- (IOSObjectArray *)getInputForUpdateSetPropagation {
  if (refObject_ == nil) {
    return input_;
  }
  return inputForUpdateSetPropagation_;
}

- (void)dealloc {
  RELEASE_(geo_);
  RELEASE_(text_);
  RELEASE_(currentLabel_);
  RELEASE_(refObject_);
  RELEASE_(inputForUpdateSetPropagation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoText:", "AlgoObject", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getResult", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "updateReferencedObject", NULL, "V", 0x2, NULL, NULL },
    { "getInputForUpdateSetPropagation", NULL, "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "geo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoText;", NULL, NULL,  },
    { "currentLabel_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "refObject_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "inputForUpdateSetPropagation_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoObject = { 2, "AlgoObject", "geogebra.common.kernel.algos", NULL, 0x1, 7, methods, 5, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoObject;
}

@end

void GeogebraCommonKernelAlgosAlgoObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelAlgosAlgoObject *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoObject_set_text_(self, text);
  if (![((GeogebraCommonKernelGeosGeoText *) nil_chk(text)) isLabelSet]) [text setPrintDecimalsWithInt:0 withBoolean:YES];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoObject_compute(self);
  [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) registerRenameListenerAlgoWithGeogebraCommonKernelAlgosAlgoElement:self];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoObject *new_GeogebraCommonKernelAlgosAlgoObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoText *text) {
  GeogebraCommonKernelAlgosAlgoObject *self = [GeogebraCommonKernelAlgosAlgoObject alloc];
  GeogebraCommonKernelAlgosAlgoObject_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoText_(self, cons, label, text);
  return self;
}

void GeogebraCommonKernelAlgosAlgoObject_compute(GeogebraCommonKernelAlgosAlgoObject *self) {
  GeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(self);
  if (self->refObject_ != nil && [self->refObject_ getGeoClassType] == [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) getGeoClassType]) {
    [self->geo_ setWithGeogebraCommonKernelGeosGeoElement:self->refObject_];
  }
  else {
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(self->geo_)) setUndefined];
  }
}

void GeogebraCommonKernelAlgosAlgoObject_updateReferencedObject(GeogebraCommonKernelAlgosAlgoObject *self) {
  GeogebraCommonKernelAlgosAlgoObject_set_currentLabel_(self, [((GeogebraCommonKernelGeosGeoText *) nil_chk(self->text_)) getTextString]);
  GeogebraCommonKernelAlgosAlgoObject_set_refObject_(self, [((GeogebraCommonKernelKernel *) nil_chk(self->kernel_)) lookupLabelWithNSString:self->currentLabel_]);
  IOSObjectArray_Set(nil_chk(self->inputForUpdateSetPropagation_), 1, self->refObject_);
  if (self->refObject_ != nil) {
    [self->refObject_ addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:self];
    if (self->geo_ != nil) {
      id<JavaUtilIterator> it = [((GeogebraCommonKernelAlgosAlgorithmSet *) nil_chk([self->geo_ getAlgoUpdateSet])) getIterator];
      while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
        [self->refObject_ addToUpdateSetOnlyWithGeogebraCommonKernelAlgosAlgoElement:[it next]];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoObject)
