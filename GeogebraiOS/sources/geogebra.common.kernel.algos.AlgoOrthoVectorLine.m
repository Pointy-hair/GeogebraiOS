//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoOrthoVectorLine.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/CircularDefinitionException.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoOrthoVectorLine.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoVector.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoOrthoVectorLine () {
 @public
  GeogebraCommonKernelGeosGeoLine *g_;
  GeogebraCommonKernelGeosGeoVector *n_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoVectorLine, g_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoOrthoVectorLine, n_, GeogebraCommonKernelGeosGeoVector *)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoOrthoVectorLine_compute(GeogebraCommonKernelAlgosAlgoOrthoVectorLine *self);

@implementation GeogebraCommonKernelAlgosAlgoOrthoVectorLine

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)g {
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_OrthogonalVector();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_ORTHOGONAL;
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:1 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, g_);
  [super setOutputLengthWithInt:1];
  [super setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:n_];
  [self setDependencies];
}

- (GeogebraCommonKernelGeosGeoVector *)getVector {
  return n_;
}

- (GeogebraCommonKernelGeosGeoLine *)getg {
  return g_;
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"VectorPerpendicularToA" withNSString:[((GeogebraCommonKernelGeosGeoLine *) nil_chk(g_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(g_);
  RELEASE_(n_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelGeosGeoLine:", "AlgoOrthoVectorLine", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "getVector", NULL, "Lgeogebra.common.kernel.geos.GeoVector;", 0x1, NULL, NULL },
    { "getg", NULL, "Lgeogebra.common.kernel.geos.GeoLine;", 0x0, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "g_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "n_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoVector;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoOrthoVectorLine = { 2, "AlgoOrthoVectorLine", "geogebra.common.kernel.algos", NULL, 0x1, 8, methods, 2, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoOrthoVectorLine;
}

@end

void GeogebraCommonKernelAlgosAlgoOrthoVectorLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelAlgosAlgoOrthoVectorLine *self, GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_set_g_(self, g);
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_setAndConsume_n_(self, new_GeogebraCommonKernelGeosGeoVector_initWithGeogebraCommonKernelConstruction_(cons));
  GeogebraCommonKernelGeosGeoPoint *possStartPoint = [((GeogebraCommonKernelGeosGeoLine *) nil_chk(g)) getStartPoint];
  if (possStartPoint != nil && [possStartPoint isLabelSet]) {
    @try {
      [self->n_ setStartPointWithGeogebraCommonKernelKernelNDGeoPointND:possStartPoint];
    }
    @catch (GeogebraCommonKernelCircularDefinitionException *e) {
    }
  }
  [self setInputOutput];
  self->n_->z_ = 0.0;
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_compute(self);
  [self->n_ setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoOrthoVectorLine *new_GeogebraCommonKernelAlgosAlgoOrthoVectorLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *cons, NSString *label, GeogebraCommonKernelGeosGeoLine *g) {
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine *self = [GeogebraCommonKernelAlgosAlgoOrthoVectorLine alloc];
  GeogebraCommonKernelAlgosAlgoOrthoVectorLine_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoLine_(self, cons, label, g);
  return self;
}

void GeogebraCommonKernelAlgosAlgoOrthoVectorLine_compute(GeogebraCommonKernelAlgosAlgoOrthoVectorLine *self) {
  ((GeogebraCommonKernelGeosGeoVector *) nil_chk(self->n_))->x_ = ((GeogebraCommonKernelGeosGeoLine *) nil_chk(self->g_))->x_;
  self->n_->y_ = self->g_->y_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoOrthoVectorLine)
