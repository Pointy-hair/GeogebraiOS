//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianConstants.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoRoots.h"
#include "geogebra/common/kernel/algos/AlgoSimpleRootsPolynomial.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/arithmetic/PolyFunction.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoLine.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/implicit/AlgoIntersectImplicitpolyParametric.h"
#include "geogebra/common/kernel/implicit/AlgoTangentImplicitpoly.h"
#include "geogebra/common/kernel/implicit/GeoImplicitPoly.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "org/apache/commons/math/analysis/polynomials/PolynomialFunction.h"

@interface GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric () {
 @public
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *tx_;
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *ty_;
  GeogebraCommonKernelImplicitGeoImplicitPoly *p_;
  GeogebraCommonKernelGeosGeoLine *l_;
  GeogebraCommonKernelGeosGeoFunction *f_;
  IOSObjectArray *tangentPoints_;
}

- (void)mergeWithTangentPoints;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, tx_, OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, ty_, OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, p_, GeogebraCommonKernelImplicitGeoImplicitPoly *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, l_, GeogebraCommonKernelGeosGeoLine *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, f_, GeogebraCommonKernelGeosGeoFunction *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric, tangentPoints_, IOSObjectArray *)

__attribute__((unused)) static void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_mergeWithTangentPoints(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self);

@implementation GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(self, c, p, l);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(self, c, p, f);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                                             withBoolean:(jboolean)setLabels
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                     withGeogebraCommonKernelGeosGeoLine:(GeogebraCommonKernelGeosGeoLine *)l {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(self, c, labels, setLabels, p, l);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c
                                       withNSStringArray:(IOSObjectArray *)labels
                                             withBoolean:(jboolean)setLabels
         withGeogebraCommonKernelImplicitGeoImplicitPoly:(GeogebraCommonKernelImplicitGeoImplicitPoly *)p
                 withGeogebraCommonKernelGeosGeoFunction:(GeogebraCommonKernelGeosGeoFunction *)f {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(self, c, labels, setLabels, p, f);
  return self;
}

- (jdouble)getYValueWithDouble:(jdouble)t {
  return [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(ty_)) valueWithDouble:t];
}

- (jdouble)getXValueWithDouble:(jdouble)t {
  return [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk(tx_)) valueWithDouble:t];
}

- (void)compute {
  if (![((GeogebraCommonKernelImplicitGeoImplicitPoly *) nil_chk(p_)) isDefined]) {
    return;
  }
  jdouble maxT;
  jdouble minT;
  if (f_ != nil) {
    if (![f_ isDefined]) {
      return;
    }
    if (![f_ isPolynomialFunctionWithBoolean:NO]) {
      GeogebraCommonKernelKernel *ker = [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) getKernel];
      [((GeogebraCommonKernelKernel *) nil_chk(ker)) setSilentModeWithBoolean:YES];
      GeogebraCommonKernelGeosGeoFunction *paramEquation = [new_GeogebraCommonKernelGeosGeoFunction_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelGeosGeoFunction_(cons_, p_, nil, f_) autorelease];
      GeogebraCommonKernelAlgosAlgoRoots *algo = [new_GeogebraCommonKernelAlgosAlgoRoots_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoFunction_withGeogebraCommonKernelArithmeticNumberValue_withGeogebraCommonKernelArithmeticNumberValue_(cons_, paramEquation, [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [f_ getMinParameter]) autorelease], [new_GeogebraCommonKernelGeosGeoNumeric_initWithGeogebraCommonKernelConstruction_withDouble_(cons_, [f_ getMaxParameter]) autorelease]) autorelease];
      IOSObjectArray *rootPoints = [algo getRootPoints];
      id<JavaUtilList> valPairs = [new_JavaUtilArrayList_init() autorelease];
      for (jint i = 0; i < ((IOSObjectArray *) nil_chk(rootPoints))->size_; i++) {
        jdouble t = [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(rootPoints, i))) getX];
        [valPairs addWithId:[IOSDoubleArray arrayWithDoubles:(jdouble[]){ t, [f_ evaluateWithDouble:t] } count:2]];
      }
      [ker setSilentModeWithBoolean:NO];
      [self setPointsWithJavaUtilList:valPairs];
      return;
    }
    GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_setAndConsume_tx_(self, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ 0, 1 } count:2]));
    GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_setAndConsume_ty_(self, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([((GeogebraCommonKernelArithmeticPolyFunction *) nil_chk([((GeogebraCommonKernelArithmeticFunction *) nil_chk([f_ getFunction])) getNumericPolynomialDerivativeWithInt:0 withBoolean:NO])) getCoeffs]));
    maxT = [f_ getMaxParameter];
    minT = [f_ getMinParameter];
  }
  else if (l_ != nil) {
    if (![l_ isDefined]) {
      [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(points_)) adjustOutputSizeWithInt:0];
      return;
    }
    IOSDoubleArray *startP = [IOSDoubleArray arrayWithLength:2];
    [l_ getInhomPointOnLineWithDoubleArray:startP];
    GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_setAndConsume_tx_(self, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(startP, 0), [l_ getY] } count:2]));
    GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_setAndConsume_ty_(self, new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(startP, 1), -[l_ getX] } count:2]));
    maxT = [l_ getMaxParameter];
    minT = [l_ getMinParameter];
    if ([[l_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelImplicitAlgoTangentImplicitpoly class]]) {
      GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_set_tangentPoints_(self, [((GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *) nil_chk(((GeogebraCommonKernelImplicitAlgoTangentImplicitpoly *) check_class_cast([l_ getParentAlgorithm], [GeogebraCommonKernelImplicitAlgoTangentImplicitpoly class])))) getTangentPoints]);
    }
  }
  else {
    return;
  }
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *sum = nil;
  OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *zs = nil;
  IOSObjectArray *coeff = [p_ getCoeff];
  if (coeff != nil) for (jint i = coeff->size_ - 1; i >= 0; i--) {
    zs = [new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_ - 1) } count:1]) autorelease];
    for (jint j = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(coeff, i)))->size_ - 2; j >= 0; j--) {
      zs = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk([zs multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:ty_])) addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:[new_OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction_initWithDoubleArray_([IOSDoubleArray arrayWithDoubles:(jdouble[]){ IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(coeff, i)), j) } count:1]) autorelease]];
    }
    if (sum == nil) sum = zs;
    else sum = [((OrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction *) nil_chk([sum multiplyWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:tx_])) addWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:zs];
  }
  [self setRootsPolynomialWithinRangeWithOrgApacheCommonsMathAnalysisPolynomialsPolynomialFunction:sum withDouble:minT withDouble:maxT];
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_mergeWithTangentPoints(self);
}

- (void)mergeWithTangentPoints {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_mergeWithTangentPoints(self);
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_Intersect();
}

- (jint)getRelatedModeID {
  return GeogebraCommonEuclidianEuclidianConstants_MODE_INTERSECT;
}

- (void)dealloc {
  RELEASE_(tx_);
  RELEASE_(ty_);
  RELEASE_(p_);
  RELEASE_(l_);
  RELEASE_(f_);
  RELEASE_(tangentPoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:", "AlgoIntersectImplicitpolyParametric", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:", "AlgoIntersectImplicitpolyParametric", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withBoolean:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoLine:", "AlgoIntersectImplicitpolyParametric", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withBoolean:withGeogebraCommonKernelImplicitGeoImplicitPoly:withGeogebraCommonKernelGeosGeoFunction:", "AlgoIntersectImplicitpolyParametric", NULL, 0x1, NULL, NULL },
    { "getYValueWithDouble:", "getYValue", "D", 0x4, NULL, NULL },
    { "getXValueWithDouble:", "getXValue", "D", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "mergeWithTangentPoints", NULL, "V", 0x2, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "getRelatedModeID", NULL, "I", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "tx_", NULL, 0x2, "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", NULL, NULL,  },
    { "ty_", NULL, 0x2, "Lorg.apache.commons.math.analysis.polynomials.PolynomialFunction;", NULL, NULL,  },
    { "p_", NULL, 0x2, "Lgeogebra.common.kernel.implicit.GeoImplicitPoly;", NULL, NULL,  },
    { "l_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoLine;", NULL, NULL,  },
    { "f_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoFunction;", NULL, NULL,  },
    { "tangentPoints_", NULL, 0x2, "[Lgeogebra.common.kernel.geos.GeoPoint;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric = { 2, "AlgoIntersectImplicitpolyParametric", "geogebra.common.kernel.implicit", NULL, 0x1, 10, methods, 6, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric;
}

@end

void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(self, c, nil, NO, p, l);
}

GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self = [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric alloc];
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(self, c, p, l);
  return self;
}

void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self, GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(self, c, nil, NO, p, f);
}

GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *c, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self = [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric alloc];
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(self, c, p, f);
  return self;
}

void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(self, c, [IOSObjectArray arrayWithObjects:(id[]){ p, l } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_set_p_(self, p);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_set_l_(self, l);
  [self compute];
}

GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoLine *l) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self = [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric alloc];
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoLine_(self, c, labels, setLabels, p, l);
  return self;
}

void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self, GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelAlgosAlgoSimpleRootsPolynomial_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElementArray_(self, c, [IOSObjectArray arrayWithObjects:(id[]){ p, f } count:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_set_p_(self, p);
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_set_f_(self, f);
  [self compute];
}

GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *new_GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(GeogebraCommonKernelConstruction *c, IOSObjectArray *labels, jboolean setLabels, GeogebraCommonKernelImplicitGeoImplicitPoly *p, GeogebraCommonKernelGeosGeoFunction *f) {
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self = [GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric alloc];
  GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_initWithGeogebraCommonKernelConstruction_withNSStringArray_withBoolean_withGeogebraCommonKernelImplicitGeoImplicitPoly_withGeogebraCommonKernelGeosGeoFunction_(self, c, labels, setLabels, p, f);
  return self;
}

void GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric_mergeWithTangentPoints(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric *self) {
  if (self->tangentPoints_ == nil || self->tangentPoints_->size_ == 0) return;
  IOSBooleanArray *addTangent = [IOSBooleanArray arrayWithLength:((IOSObjectArray *) nil_chk(self->tangentPoints_))->size_];
  jint orgSize = [((GeogebraCommonKernelAlgosAlgoElement_OutputHandler *) nil_chk(self->points_)) size];
  while (![((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:orgSize - 1])) isDefined]) --orgSize;
  jint newSize = orgSize;
  jdouble EPS2 = GeogebraCommonKernelKernel_STANDARD_PRECISION;
  for (jint i = 0; i < self->tangentPoints_->size_; ++i) {
    if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->tangentPoints_, i))) getIncidenceList] != nil && [((JavaUtilArrayList *) nil_chk([((GeogebraCommonKernelGeosGeoPoint *) nil_chk(IOSObjectArray_Get(self->tangentPoints_, i))) getIncidenceList])) containsWithId:self->l_]) {
      *IOSBooleanArray_GetRef(addTangent, i) = YES;
      for (jint j = 0; j < orgSize; ++j) {
        if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:j])) distanceSqrWithGeogebraCommonKernelGeosGeoPoint:IOSObjectArray_Get(self->tangentPoints_, i)] < EPS2) {
          if (IOSBooleanArray_Get(addTangent, i)) {
            [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:j])) setUndefined];
            --newSize;
          }
          else {
            *IOSBooleanArray_GetRef(addTangent, i) = NO;
            [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:i])) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->tangentPoints_, j)];
          }
        }
      }
      if (IOSBooleanArray_Get(addTangent, i)) ++newSize;
    }
    else {
      *IOSBooleanArray_GetRef(addTangent, i) = NO;
    }
  }
  jint definedCount = 0;
  for (jint i = 0; i < orgSize; ++i) {
    if ([((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:i])) isDefined]) {
      if (definedCount != i) [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:definedCount])) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:[self->points_ getElementWithInt:i]];
      ++definedCount;
    }
  }
  [self->points_ adjustOutputSizeWithInt:newSize];
  for (jint i = 0; i < self->tangentPoints_->size_; ++i) {
    if (IOSBooleanArray_Get(addTangent, i)) {
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk([self->points_ getElementWithInt:definedCount++])) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:IOSObjectArray_Get(self->tangentPoints_, i)];
    }
  }
  if (self->setLabels__) [self->points_ updateLabels];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelImplicitAlgoIntersectImplicitpolyParametric)
