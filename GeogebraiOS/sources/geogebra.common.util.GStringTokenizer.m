//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/util/GStringTokenizer.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/util/GStringTokenizer.h"

@interface GeogebraCommonUtilGStringTokenizer () {
 @public
  jint cursor_;
  NSString *st_;
  jchar split_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonUtilGStringTokenizer, st_, NSString *)

@implementation GeogebraCommonUtilGStringTokenizer

- (instancetype)initWithNSString:(NSString *)st
                        withChar:(jchar)split {
  GeogebraCommonUtilGStringTokenizer_initWithNSString_withChar_(self, st, split);
  return self;
}

- (jboolean)hasMoreTokens {
  return cursor_ < ((jint) [((NSString *) nil_chk(st_)) length]);
}

- (NSString *)nextToken {
  jint oldCursor = cursor_;
  cursor_ = [((NSString *) nil_chk(st_)) indexOf:split_ fromIndex:cursor_] + 1;
  if (cursor_ == 0) {
    cursor_ = ((jint) [st_ length]);
  }
  return [st_ substring:oldCursor endIndex:cursor_ - 1];
}

- (void)dealloc {
  RELEASE_(st_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithNSString:withChar:", "GStringTokenizer", NULL, 0x1, NULL, NULL },
    { "hasMoreTokens", NULL, "Z", 0x1, NULL, NULL },
    { "nextToken", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "cursor_", NULL, 0x2, "I", NULL, NULL,  },
    { "st_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "split_", NULL, 0x2, "C", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonUtilGStringTokenizer = { 2, "GStringTokenizer", "geogebra.common.util", NULL, 0x1, 3, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonUtilGStringTokenizer;
}

@end

void GeogebraCommonUtilGStringTokenizer_initWithNSString_withChar_(GeogebraCommonUtilGStringTokenizer *self, NSString *st, jchar split) {
  NSObject_init(self);
  self->cursor_ = 0;
  GeogebraCommonUtilGStringTokenizer_set_st_(self, st);
  self->split_ = split;
}

GeogebraCommonUtilGStringTokenizer *new_GeogebraCommonUtilGStringTokenizer_initWithNSString_withChar_(NSString *st, jchar split) {
  GeogebraCommonUtilGStringTokenizer *self = [GeogebraCommonUtilGStringTokenizer alloc];
  GeogebraCommonUtilGStringTokenizer_initWithNSString_withChar_(self, st, split);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonUtilGStringTokenizer)
