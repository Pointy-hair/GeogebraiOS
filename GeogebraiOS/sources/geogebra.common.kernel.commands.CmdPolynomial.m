//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/commands/CmdPolynomial.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromCoordinates.h"
#include "geogebra/common/kernel/algos/AlgoPolynomialFromFunction.h"
#include "geogebra/common/kernel/arithmetic/Command.h"
#include "geogebra/common/kernel/commands/CmdPolynomial.h"
#include "geogebra/common/kernel/commands/CommandProcessor.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoFunctionable.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"

@interface GeogebraCommonKernelCommandsCmdPolynomial ()

- (GeogebraCommonKernelGeosGeoFunction *)PolynomialFunctionWithNSString:(NSString *)label
                                    withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list;

@end

__attribute__((unused)) static GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsCmdPolynomial_PolynomialFunctionWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdPolynomial *self, NSString *label, GeogebraCommonKernelGeosGeoList *list);

@implementation GeogebraCommonKernelCommandsCmdPolynomial

- (instancetype)initWithGeogebraCommonKernelKernel:(GeogebraCommonKernelKernel *)kernel {
  GeogebraCommonKernelCommandsCmdPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

- (IOSObjectArray *)processWithGeogebraCommonKernelArithmeticCommand:(GeogebraCommonKernelArithmeticCommand *)c {
  jint n = [((GeogebraCommonKernelArithmeticCommand *) nil_chk(c)) getArgumentNumber];
  IOSObjectArray *arg;
  arg = [self resArgsWithGeogebraCommonKernelArithmeticCommand:c];
  {
    GeogebraCommonKernelGeosGeoList *list;
    switch (n) {
      case 1:
      if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(arg), 0))) isGeoFunctionable])) {
        GeogebraCommonKernelAlgosAlgoPolynomialFromFunction *algo = [new_GeogebraCommonKernelAlgosAlgoPolynomialFromFunction_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoFunction_(cons_, [c getLabel], [((id<GeogebraCommonKernelGeosGeoFunctionable>) nil_chk(((id<GeogebraCommonKernelGeosGeoFunctionable>) check_protocol_cast(IOSObjectArray_Get(arg, 0), @protocol(GeogebraCommonKernelGeosGeoFunctionable))))) getGeoFunction]) autorelease];
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ [algo getPolynomial] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else if (([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(arg, 0))) isGeoList])) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdPolynomial_PolynomialFunctionWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], ((GeogebraCommonKernelGeosGeoList *) check_class_cast(IOSObjectArray_Get(arg, 0), [GeogebraCommonKernelGeosGeoList class]))) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      else @throw [self argErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withGeogebraCommonKernelArithmeticExpressionValue:IOSObjectArray_Get(arg, 0)];
      default:
      list = GeogebraCommonKernelCommandsCommandProcessor_wrapInListWithGeogebraCommonKernelKernel_withGeogebraCommonKernelGeosGeoElementArray_withInt_withGeogebraCommonPluginGeoClassEnum_(kernelA_, arg, ((IOSObjectArray *) nil_chk(arg))->size_, GeogebraCommonPluginGeoClassEnum_get_POINT());
      if (list != nil) {
        IOSObjectArray *ret = [IOSObjectArray arrayWithObjects:(id[]){ GeogebraCommonKernelCommandsCmdPolynomial_PolynomialFunctionWithNSString_withGeogebraCommonKernelGeosGeoList_(self, [c getLabel], list) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
        return ret;
      }
      @throw [self argNumErrWithGeogebraCommonMainApp:app_ withNSString:[c getName] withInt:n];
    }
  }
}

- (GeogebraCommonKernelGeosGeoFunction *)PolynomialFunctionWithNSString:(NSString *)label
                                    withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)list {
  return GeogebraCommonKernelCommandsCmdPolynomial_PolynomialFunctionWithNSString_withGeogebraCommonKernelGeosGeoList_(self, label, list);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelKernel:", "CmdPolynomial", NULL, 0x1, NULL, NULL },
    { "processWithGeogebraCommonKernelArithmeticCommand:", "process", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x11, "Lgeogebra.common.main.MyError;", NULL },
    { "PolynomialFunctionWithNSString:withGeogebraCommonKernelGeosGeoList:", "PolynomialFunction", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x12, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelCommandsCmdPolynomial = { 2, "CmdPolynomial", "geogebra.common.kernel.commands", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelCommandsCmdPolynomial;
}

@end

void GeogebraCommonKernelCommandsCmdPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelCommandsCmdPolynomial *self, GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCommandProcessor_initWithGeogebraCommonKernelKernel_(self, kernel);
}

GeogebraCommonKernelCommandsCmdPolynomial *new_GeogebraCommonKernelCommandsCmdPolynomial_initWithGeogebraCommonKernelKernel_(GeogebraCommonKernelKernel *kernel) {
  GeogebraCommonKernelCommandsCmdPolynomial *self = [GeogebraCommonKernelCommandsCmdPolynomial alloc];
  GeogebraCommonKernelCommandsCmdPolynomial_initWithGeogebraCommonKernelKernel_(self, kernel);
  return self;
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelCommandsCmdPolynomial_PolynomialFunctionWithNSString_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelCommandsCmdPolynomial *self, NSString *label, GeogebraCommonKernelGeosGeoList *list) {
  GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates *algo = [new_GeogebraCommonKernelAlgosAlgoPolynomialFromCoordinates_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelGeosGeoList_(self->cons_, label, list) autorelease];
  return [algo getPolynomial];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelCommandsCmdPolynomial)
