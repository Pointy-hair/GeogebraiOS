//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/ConstructionElementCycle.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/ConstructionElementCycle.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuffer.h"
#include "java/util/ArrayList.h"

#define GeogebraCommonKernelConstructionElementCycle_serialVersionUID -880160148856127100LL

@interface GeogebraCommonKernelConstructionElementCycle () {
 @public
  jlong minID_;
  jint minIndex_;
  jint direction_;
  jint cycleIndex_;
}

- (void)setCycleFirst;

- (GeogebraCommonKernelAlgosConstructionElement *)getCycleNext;

@end

J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelConstructionElementCycle, serialVersionUID, jlong)

__attribute__((unused)) static void GeogebraCommonKernelConstructionElementCycle_setCycleFirst(GeogebraCommonKernelConstructionElementCycle *self);

__attribute__((unused)) static GeogebraCommonKernelAlgosConstructionElement *GeogebraCommonKernelConstructionElementCycle_getCycleNext(GeogebraCommonKernelConstructionElementCycle *self);

@implementation GeogebraCommonKernelConstructionElementCycle

+ (GeogebraCommonKernelConstructionElementCycle *)SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)P1
                                                                    withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)P2 {
  return GeogebraCommonKernelConstructionElementCycle_SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(P1, P2);
}

- (jboolean)addWithId:(GeogebraCommonKernelAlgosConstructionElement *)ce {
  if (minID_ > [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(ce)) getID]) {
    minID_ = [ce getID];
    minIndex_ = [self size];
  }
  return [super addWithId:ce];
}

- (void)setDirection {
  if ([self size] < 3) direction_ = 1;
  else {
    jint before = minIndex_ - 1;
    if (before == -1) before = [self size] - 1;
    jint after = minIndex_ + 1;
    if (after == [self size]) after = 0;
    if ([((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([self getWithInt:before])) getID] < [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk([self getWithInt:after])) getID]) direction_ = -1;
    else direction_ = 1;
  }
}

- (jint)compareToWithId:(GeogebraCommonKernelConstructionElementCycle *)cycle {
  check_class_cast(cycle, [GeogebraCommonKernelConstructionElementCycle class]);
  if (self == cycle) return 0;
  if ([self size] < [((GeogebraCommonKernelConstructionElementCycle *) nil_chk(cycle)) size]) return -1;
  if ([self size] > [cycle size]) return 1;
  GeogebraCommonKernelConstructionElementCycle_setCycleFirst(self);
  GeogebraCommonKernelConstructionElementCycle_setCycleFirst(cycle);
  jint diff = 0;
  for (jint i = 0; diff == 0 && i < [self size]; i++) diff = [((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(GeogebraCommonKernelConstructionElementCycle_getCycleNext(self))) compareToWithId:GeogebraCommonKernelConstructionElementCycle_getCycleNext(cycle)];
  return diff;
}

- (jboolean)isEqual:(id)obj {
  if (!([obj isKindOfClass:[GeogebraCommonKernelConstructionElementCycle class]])) return NO;
  return [self compareToWithId:(GeogebraCommonKernelConstructionElementCycle *) check_class_cast(obj, [GeogebraCommonKernelConstructionElementCycle class])] == 0;
}

- (void)setCycleFirst {
  GeogebraCommonKernelConstructionElementCycle_setCycleFirst(self);
}

- (GeogebraCommonKernelAlgosConstructionElement *)getCycleNext {
  return GeogebraCommonKernelConstructionElementCycle_getCycleNext(self);
}

- (NSString *)description {
  JavaLangStringBuffer *sb = [new_JavaLangStringBuffer_init() autorelease];
  GeogebraCommonKernelConstructionElementCycle_setCycleFirst(self);
  for (jint i = 0; i < [self size]; i++) {
    [sb appendWithNSString:[((GeogebraCommonKernelAlgosConstructionElement *) nil_chk(GeogebraCommonKernelConstructionElementCycle_getCycleNext(self))) description]];
    [sb appendWithNSString:@" - "];
  }
  return [sb description];
}

- (instancetype)init {
  GeogebraCommonKernelConstructionElementCycle_init(self);
  return self;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf, len);
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:", "SegmentDescription", "Lgeogebra.common.kernel.ConstructionElementCycle;", 0x19, NULL, NULL },
    { "addWithId:", "add", "Z", 0x1, NULL, NULL },
    { "setDirection", NULL, "V", 0x1, NULL, NULL },
    { "compareToWithId:", "compareTo", "I", 0x1, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "setCycleFirst", NULL, "V", 0x2, NULL, NULL },
    { "getCycleNext", NULL, "Lgeogebra.common.kernel.algos.ConstructionElement;", 0x2, NULL, NULL },
    { "description", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = GeogebraCommonKernelConstructionElementCycle_serialVersionUID },
    { "minID_", NULL, 0x2, "J", NULL, NULL,  },
    { "minIndex_", NULL, 0x2, "I", NULL, NULL,  },
    { "direction_", NULL, 0x2, "I", NULL, NULL,  },
    { "cycleIndex_", NULL, 0x2, "I", NULL, NULL,  },
  };
  static const char *superclass_type_args[] = {"Lgeogebra.common.kernel.algos.ConstructionElement;"};
  static const J2ObjcClassInfo _GeogebraCommonKernelConstructionElementCycle = { 2, "ConstructionElementCycle", "geogebra.common.kernel", NULL, 0x1, 9, methods, 5, fields, 1, superclass_type_args, 0, NULL, NULL, "Ljava/util/ArrayList<Lgeogebra/common/kernel/algos/ConstructionElement;>;Ljava/lang/Comparable<Lgeogebra/common/kernel/ConstructionElementCycle;>;" };
  return &_GeogebraCommonKernelConstructionElementCycle;
}

@end

GeogebraCommonKernelConstructionElementCycle *GeogebraCommonKernelConstructionElementCycle_SegmentDescriptionWithGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelGeosGeoElement *P1, GeogebraCommonKernelGeosGeoElement *P2) {
  GeogebraCommonKernelConstructionElementCycle_initialize();
  GeogebraCommonKernelConstructionElementCycle *cycle = [new_GeogebraCommonKernelConstructionElementCycle_init() autorelease];
  [cycle addWithId:P1];
  [cycle addWithId:P2];
  return cycle;
}

void GeogebraCommonKernelConstructionElementCycle_setCycleFirst(GeogebraCommonKernelConstructionElementCycle *self) {
  self->cycleIndex_ = self->minIndex_;
}

GeogebraCommonKernelAlgosConstructionElement *GeogebraCommonKernelConstructionElementCycle_getCycleNext(GeogebraCommonKernelConstructionElementCycle *self) {
  GeogebraCommonKernelAlgosConstructionElement *ret = [self getWithInt:self->cycleIndex_];
  self->cycleIndex_ += self->direction_;
  if (self->cycleIndex_ == -1) self->cycleIndex_ = [self size] - 1;
  else if (self->cycleIndex_ == [self size]) self->cycleIndex_ = 0;
  return ret;
}

void GeogebraCommonKernelConstructionElementCycle_init(GeogebraCommonKernelConstructionElementCycle *self) {
  JavaUtilArrayList_init(self);
  self->minID_ = JavaLangLong_MAX_VALUE;
  self->minIndex_ = 0;
  self->direction_ = 1;
}

GeogebraCommonKernelConstructionElementCycle *new_GeogebraCommonKernelConstructionElementCycle_init() {
  GeogebraCommonKernelConstructionElementCycle *self = [GeogebraCommonKernelConstructionElementCycle alloc];
  GeogebraCommonKernelConstructionElementCycle_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelConstructionElementCycle)
