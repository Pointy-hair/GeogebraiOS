//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/gui/dialog/options/model/AnimationSpeedModel.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/gui/dialog/options/model/AnimationSpeedModel.h"
#include "geogebra/common/gui/dialog/options/model/AnimationStepModel.h"
#include "geogebra/common/gui/dialog/options/model/IComboListener.h"
#include "geogebra/common/gui/dialog/options/model/MultipleOptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/NumberOptionsModel.h"
#include "geogebra/common/gui/dialog/options/model/OptionsModel.h"
#include "geogebra/common/kernel/ConstructionDefaults.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoNumeric.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/Localization.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@interface GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel () {
 @public
  jboolean showSliders_;
  GeogebraCommonKernelKernel *kernel_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel, kernel_, GeogebraCommonKernelKernel *)

@interface GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener : NSObject
@end

@implementation GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel

- (id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>)getListener {
  return (id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>) check_protocol_cast([super getListener], @protocol(GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener));
}

- (instancetype)initWithGeogebraCommonMainApp:(GeogebraCommonMainApp *)app
withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener:(id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>)listener {
  GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener_(self, app, listener);
  return self;
}

- (jboolean)isValidAtWithInt:(jint)index {
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isPointOnPath] || [geo getDefaultGeoType] == GeogebraCommonKernelConstructionDefaults_DEFAULT_POINT_ON_PATH) {
    if (![geo isChangeable]) return NO;
  }
  else if ([geo isGeoNumeric] && [geo isIndependent]) {
    if (![self isShowSliders] || ![geo isChangeable]) return NO;
  }
  else {
    return NO;
  }
  return YES;
}

- (void)updateProperties {
  GeogebraCommonKernelGeosGeoElement *temp, *geo0 = [self getGeoAtWithInt:0];
  jboolean equalSpeed = YES;
  jboolean equalAnimationType = YES;
  for (jint i = 0; i < [self getGeosLength]; i++) {
    temp = [self getGeoAtWithInt:i];
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationSpeedObject] != [((GeogebraCommonKernelGeosGeoElement *) nil_chk(temp)) getAnimationSpeedObject]) {
      equalSpeed = NO;
    }
    if ([geo0 getAnimationType] != [temp getAnimationType]) {
      equalAnimationType = NO;
    }
  }
  [((id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>) nil_chk([self getListener])) setSelectedIndexWithInt:equalAnimationType ? [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationType] : -1];
  GeogebraCommonKernelStringTemplate *highPrecision = GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), GeogebraCommonGuiDialogOptionsModelAnimationStepModel_TEXT_FIELD_FRACTION_DIGITS, NO);
  if (equalSpeed) {
    GeogebraCommonKernelGeosGeoElement *speedObj = [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo0)) getAnimationSpeedObject];
    GeogebraCommonKernelGeosGeoNumeric *num = [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgoDispatcher])) getDefaultNumberWithBoolean:[geo0 isAngle]];
    [((id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>) nil_chk([self getListener])) setTextWithNSString:speedObj == nil ? [((GeogebraCommonKernelGeosGeoElement *) nil_chk([((GeogebraCommonKernelGeosGeoNumeric *) nil_chk(num)) getAnimationSpeedObject])) getLabelWithGeogebraCommonKernelStringTemplate:highPrecision] : [speedObj getLabelWithGeogebraCommonKernelStringTemplate:highPrecision]];
  }
  else [((id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener>) nil_chk([self getListener])) setTextWithNSString:@""];
}

- (id<JavaUtilList>)getChoichesWithGeogebraCommonMainLocalization:(GeogebraCommonMainLocalization *)loc {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ JreStrcat("$$", @"\u21d4 ", [((GeogebraCommonMainLocalization *) nil_chk(loc)) getPlainWithNSString:@"Oscillating"]), JreStrcat("$$", @"\u21d2 ", [loc getPlainWithNSString:@"Increasing"]), JreStrcat("$$", @"\u21d0 ", [loc getPlainWithNSString:@"Decreasing"]), JreStrcat("$$", @"\u21d2 ", [loc getPlainWithNSString:@"IncreasingOnce"]) } count:4 type:NSString_class_()]);
}

- (void)applyTypeChangesWithInt:(jint)value {
  [self applyChangesWithInt:value];
}

- (void)applySpeedChangesWithGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)value {
  for (jint i = 0; i < [self getGeosLength]; i++) {
    GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:i];
    [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAnimationSpeedObjectWithGeogebraCommonKernelArithmeticNumberValue:value];
    [geo updateCascade];
  }
  [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) udpateNeedToShowAnimationButton];
  [kernel_ notifyRepaint];
}

- (void)applyWithInt:(jint)index
             withInt:(jint)value {
  GeogebraCommonKernelGeosGeoElement *geo = [self getGeoAtWithInt:index];
  [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) setAnimationTypeWithInt:value];
  [geo updateRepaint];
}

- (jint)getValueAtWithInt:(jint)index {
  return -1;
}

- (jboolean)isShowSliders {
  return showSliders_;
}

- (void)setShowSlidersWithBoolean:(jboolean)showSliders {
  self->showSliders_ = showSliders;
}

- (void)dealloc {
  RELEASE_(kernel_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "getListener", NULL, "Lgeogebra.common.gui.dialog.options.model.AnimationSpeedModel$IAnimationSpeedListener;", 0x1, NULL, NULL },
    { "initWithGeogebraCommonMainApp:withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener:", "AnimationSpeedModel", NULL, 0x1, NULL, NULL },
    { "isValidAtWithInt:", "isValidAt", "Z", 0x1, NULL, NULL },
    { "updateProperties", NULL, "V", 0x1, NULL, NULL },
    { "getChoichesWithGeogebraCommonMainLocalization:", "getChoiches", "Ljava.util.List;", 0x1, NULL, NULL },
    { "applyTypeChangesWithInt:", "applyTypeChanges", "V", 0x1, NULL, NULL },
    { "applySpeedChangesWithGeogebraCommonKernelArithmeticNumberValue:", "applySpeedChanges", "V", 0x1, NULL, NULL },
    { "applyWithInt:withInt:", "apply", "V", 0x4, NULL, NULL },
    { "getValueAtWithInt:", "getValueAt", "I", 0x1, NULL, NULL },
    { "isShowSliders", NULL, "Z", 0x1, NULL, NULL },
    { "setShowSlidersWithBoolean:", "setShowSliders", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "showSliders_", NULL, 0x2, "Z", NULL, NULL,  },
    { "kernel_", NULL, 0x2, "Lgeogebra.common.kernel.Kernel;", NULL, NULL,  },
  };
  static const char *inner_classes[] = {"Lgeogebra.common.gui.dialog.options.model.AnimationSpeedModel$IAnimationSpeedListener;"};
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel = { 2, "AnimationSpeedModel", "geogebra.common.gui.dialog.options.model", NULL, 0x1, 11, methods, 2, fields, 0, NULL, 1, inner_classes, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel;
}

@end

void GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener_(GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel *self, GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener> listener) {
  GeogebraCommonGuiDialogOptionsModelMultipleOptionsModel_initWithGeogebraCommonGuiDialogOptionsModelIComboListener_(self, listener);
  self->showSliders_ = NO;
  GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_set_kernel_(self, [((GeogebraCommonMainApp *) nil_chk(app)) getKernel]);
}

GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel *new_GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener_(GeogebraCommonMainApp *app, id<GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener> listener) {
  GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel *self = [GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel alloc];
  GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_initWithGeogebraCommonMainApp_withGeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener_(self, app, listener);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel)

@implementation GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcClassInfo _GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener = { 2, "IAnimationSpeedListener", "geogebra.common.gui.dialog.options.model", "AnimationSpeedModel", 0x609, 0, NULL, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(GeogebraCommonGuiDialogOptionsModelAnimationSpeedModel_IAnimationSpeedListener)
