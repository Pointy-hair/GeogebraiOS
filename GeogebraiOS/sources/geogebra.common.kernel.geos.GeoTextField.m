//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/geos/GeoTextField.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/awt/GColor.h"
#include "geogebra/common/euclidian/draw/DrawTextField.h"
#include "geogebra/common/factories/AwtFactory.h"
#include "geogebra/common/factories/SwingFactory.h"
#include "geogebra/common/gui/inputfield/AutoCompleteTextField.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/AlgoPointInRegion.h"
#include "geogebra/common/kernel/algos/AlgoPointOnPath.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNodeConstants.h"
#include "geogebra/common/kernel/arithmetic/FunctionalNVar.h"
#include "geogebra/common/kernel/commands/AlgebraProcessor.h"
#include "geogebra/common/kernel/geos/GeoButton.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoText.h"
#include "geogebra/common/kernel/geos/GeoTextField.h"
#include "geogebra/common/main/App.h"
#include "geogebra/common/main/MyError.h"
#include "geogebra/common/plugin/GeoClass.h"
#include "geogebra/common/util/StringUtil.h"
#include "geogebra/common/util/TextObject.h"
#include "geogebra/common/util/Unicode.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/StringBuilder.h"

@interface GeogebraCommonKernelGeosGeoTextField () {
 @public
  jint length_;
  GeogebraCommonKernelGeosGeoElement *linkedGeo_;
  NSString *text_;
  id<GeogebraCommonGuiInputfieldAutoCompleteTextField> textField_, textField2_;
  jint printDecimals_;
  jint printFigures_;
  jboolean useSignificantFigures__;
  GeogebraCommonKernelStringTemplate *tpl_;
}

- (void)updateTemplate;

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTextField, linkedGeo_, GeogebraCommonKernelGeosGeoElement *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTextField, text_, NSString *)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTextField, textField_, id<GeogebraCommonGuiInputfieldAutoCompleteTextField>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTextField, textField2_, id<GeogebraCommonGuiInputfieldAutoCompleteTextField>)
J2OBJC_FIELD_SETTER(GeogebraCommonKernelGeosGeoTextField, tpl_, GeogebraCommonKernelStringTemplate *)

static jint GeogebraCommonKernelGeosGeoTextField_defaultLength_ = 20;
J2OBJC_STATIC_FIELD_GETTER(GeogebraCommonKernelGeosGeoTextField, defaultLength_, jint)
J2OBJC_STATIC_FIELD_REF_GETTER(GeogebraCommonKernelGeosGeoTextField, defaultLength_, jint)

__attribute__((unused)) static void GeogebraCommonKernelGeosGeoTextField_updateTemplate(GeogebraCommonKernelGeosGeoTextField *self);

@implementation GeogebraCommonKernelGeosGeoTextField

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)c {
  GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                 withInt:(jint)labelOffsetX
                                                 withInt:(jint)labelOffsetY {
  GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

- (jboolean)isChangeable {
  return YES;
}

- (GeogebraCommonPluginGeoClassEnum *)getGeoClassType {
  return GeogebraCommonPluginGeoClassEnum_get_TEXTFIELD();
}

- (jboolean)isTextField {
  return YES;
}

- (void)setLinkedGeoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelGeosGeoTextField_set_linkedGeo_(self, geo);
  GeogebraCommonKernelGeosGeoTextField_set_text_(self, [((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) getValueForInputBar]);
  if (((jint) [((NSString *) nil_chk(text_)) length]) > 0 && [text_ charAtWithInt:0] == '"') {
    GeogebraCommonKernelGeosGeoTextField_set_text_(self, [text_ substring:1]);
  }
  if (((jint) [((NSString *) nil_chk(text_)) length]) > 0 && [text_ charAtWithInt:((jint) [text_ length]) - 1] == '"') {
    GeogebraCommonKernelGeosGeoTextField_set_text_(self, [text_ substring:0 endIndex:((jint) [text_ length]) - 1]);
  }
}

- (GeogebraCommonKernelGeosGeoElement *)getLinkedGeo {
  return linkedGeo_;
}

- (NSString *)toValueStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl1 {
  if (linkedGeo_ == nil) return @"";
  return text_;
}

- (void)setTextWithNSString:(NSString *)newText {
  GeogebraCommonKernelGeosGeoTextField_set_text_(self, newText);
}

- (NSString *)getText {
  return text_;
}

- (jboolean)isGeoTextField {
  return YES;
}

- (void)setLengthWithInt:(jint)l {
  length_ = l;
  [self updateVisualStyle];
}

- (jint)getLength {
  return length_;
}

- (void)getXMLtagsWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [super getXMLtagsWithJavaLangStringBuilder:sb];
  if (linkedGeo_ != nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<linkedGeo exp=\""];
    GeogebraCommonUtilStringUtil_encodeXMLWithJavaLangStringBuilder_withNSString_(sb, [linkedGeo_ getLabelWithGeogebraCommonKernelStringTemplate:GeogebraCommonKernelStringTemplate_get_xmlTemplate_()]);
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
    if (printDecimals_ >= 0 && !useSignificantFigures__) {
      [sb appendWithNSString:@"\t<decimals val=\""];
      [sb appendWithInt:printDecimals_];
      [sb appendWithNSString:@"\"/>\n"];
    }
    if (printFigures_ >= 0 && useSignificantFigures__) {
      [sb appendWithNSString:@"\t<significantfigures val=\""];
      [sb appendWithInt:printFigures_];
      [sb appendWithNSString:@"\"/>\n"];
    }
  }
  if ([self getLength] != GeogebraCommonKernelGeosGeoTextField_defaultLength_) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"\t<length val=\""];
    [sb appendWithInt:[self getLength]];
    [sb appendWithNSString:@"\""];
    [sb appendWithNSString:@"/>\n"];
  }
}

- (GeogebraCommonKernelGeosGeoElement *)copy__ {
  return [new_GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_withInt_withInt_(cons_, labelOffsetX_, labelOffsetY_) autorelease];
}

- (void)updateLinkedGeoWithNSString:(NSString *)inputText {
  NSString *defineText = inputText;
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(linkedGeo_)) isGeoLine]) {
    if (([((NSString *) nil_chk(defineText)) indexOf:'='] == -1) && ([defineText indexOf:'['] == -1)) {
      defineText = JreStrcat("$$", @"y=", defineText);
    }
    NSString *prefix = JreStrcat("$C", [linkedGeo_ getLabelWithGeogebraCommonKernelStringTemplate:tpl_], ':');
    if (![defineText hasPrefix:prefix]) {
      defineText = JreStrcat("$$", prefix, defineText);
    }
  }
  else if ([linkedGeo_ isGeoText]) {
    defineText = JreStrcat("C$C", '"', defineText, '"');
  }
  else if ([linkedGeo_ isGeoPoint]) {
    if (linkedGeo_->toStringMode_ == GeogebraCommonKernelKernel_COORD_COMPLEX) {
      defineText = JreStrcat("$$$", defineText, @"+0", GeogebraCommonUtilUnicode_get_IMAGINARY_());
    }
  }
  else if ([GeogebraCommonKernelArithmeticFunctionalNVar_class_() isInstance:linkedGeo_]) {
    defineText = JreStrcat("$C$$$", [linkedGeo_ getLabelWithGeogebraCommonKernelStringTemplate:tpl_], '(', [((id<GeogebraCommonKernelArithmeticFunctionalNVar>) check_protocol_cast(linkedGeo_, @protocol(GeogebraCommonKernelArithmeticFunctionalNVar))) getVarStringWithGeogebraCommonKernelStringTemplate:tpl_], @")=", defineText);
  }
  if ([@"" isEqual:[((NSString *) nil_chk(defineText)) trim]]) {
    return;
  }
  jdouble num = JavaLangDouble_NaN;
  if ([linkedGeo_ isGeoNumeric] && ![linkedGeo_ isGeoAngle] && (printDecimals_ > -1 || printFigures_ > -1)) {
    @try {
      num = JavaLangDouble_parseDoubleWithNSString_(inputText);
      defineText = [((GeogebraCommonKernelKernel *) nil_chk(kernel_)) formatWithDouble:num withGeogebraCommonKernelStringTemplate:tpl_];
    }
    @catch (JavaLangException *e) {
      [((JavaLangException *) nil_chk(e)) printStackTrace];
    }
  }
  @try {
    GeogebraCommonKernelGeosGeoTextField_set_linkedGeo_(self, [((GeogebraCommonKernelCommandsAlgebraProcessor *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getAlgebraProcessor])) changeGeoElementNoExceptionHandlingWithGeogebraCommonKernelGeosGeoElement:linkedGeo_ withNSString:defineText withBoolean:[linkedGeo_ isIndependent] withBoolean:YES]);
  }
  @catch (GeogebraCommonMainMyError *e1) {
    [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) showErrorWithGeogebraCommonMainMyError:e1];
    return;
  }
  @catch (JavaLangException *e1) {
    [((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) showErrorWithNSString:[((JavaLangException *) nil_chk(e1)) getMessage]];
    return;
  }
  [self setLinkedGeoWithGeogebraCommonKernelGeosGeoElement:linkedGeo_];
}

- (void)updateTextWithGeogebraCommonUtilTextObject:(id<GeogebraCommonUtilTextObject>)textFieldToUpdate {
  if (linkedGeo_ != nil) {
    NSString *linkedText;
    if ([linkedGeo_ isGeoText]) {
      linkedText = [((GeogebraCommonKernelGeosGeoText *) check_class_cast(linkedGeo_, [GeogebraCommonKernelGeosGeoText class])) getTextString];
    }
    else if ([[linkedGeo_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointOnPath class]] || [[linkedGeo_ getParentAlgorithm] isKindOfClass:[GeogebraCommonKernelAlgosAlgoPointInRegion class]]) {
      linkedText = [linkedGeo_ toValueStringWithGeogebraCommonKernelStringTemplate:tpl_];
    }
    else {
      jboolean substituteNos = [linkedGeo_ isGeoNumeric] && [linkedGeo_ isIndependent];
      linkedText = [linkedGeo_ getFormulaStringWithGeogebraCommonKernelStringTemplate:tpl_ withBoolean:substituteNos];
    }
    if ([linkedGeo_ isGeoText] && ([((NSString *) nil_chk(linkedText)) indexOfString:@"\n"] > -1)) {
      while ([linkedText indexOfString:@"\n"] > -1) {
        linkedText = [linkedText replaceAll:@"\n" withReplacement:@"\\\\\\\\n"];
      }
    }
    if (![((NSString *) nil_chk([((id<GeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText])) isEqual:linkedText]) {
      [textFieldToUpdate setTextWithNSString:linkedText];
    }
  }
  else {
    [((id<GeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) setTextWithNSString:text_];
  }
  [self setTextWithNSString:[((id<GeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
}

- (void)textObjectUpdatedWithGeogebraCommonUtilTextObject:(id<GeogebraCommonUtilTextObject>)textFieldToUpdate {
  if (linkedGeo_ != nil) {
    [self updateLinkedGeoWithNSString:[((id<GeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
    [self updateTextWithGeogebraCommonUtilTextObject:textFieldToUpdate];
  }
  else {
    [self setTextWithNSString:[((id<GeogebraCommonUtilTextObject>) nil_chk(textFieldToUpdate)) getText]];
  }
}

- (void)textSubmitted {
  [self runClickScriptsWithNSString:[self getText]];
}

- (id<GeogebraCommonGuiInputfieldAutoCompleteTextField>)getTextFieldWithInt:(jint)viewID
                               withGeogebraCommonEuclidianDrawDrawTextField:(GeogebraCommonEuclidianDrawDrawTextField *)drawTextField {
  if (textField_ == nil) {
    GeogebraCommonKernelGeosGeoTextField_set_textField_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSwingFactory])) newAutoCompleteTextFieldWithInt:[self getLength] withGeogebraCommonMainApp:[kernel_ getApplication] withGeogebraCommonEuclidianDrawable:drawTextField]);
    if ([linkedGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) {
      [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) removeSymbolTable];
    }
    else {
    }
    [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) setAutoCompleteWithBoolean:NO];
    [textField_ enableColoringWithBoolean:NO];
    [textField_ setFocusTraversalKeysEnabledWithBoolean:NO];
    [textField_ setUsedForInputBoxWithGeogebraCommonKernelGeosGeoTextField:self];
  }
  if (viewID != GeogebraCommonMainApp_VIEW_EUCLIDIAN2) {
    return textField_;
  }
  if (textField2_ == nil) {
    GeogebraCommonKernelGeosGeoTextField_set_textField2_(self, [((GeogebraCommonFactoriesSwingFactory *) nil_chk([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) getSwingFactory])) newAutoCompleteTextFieldWithInt:[self getLength] withGeogebraCommonMainApp:[kernel_ getApplication] withGeogebraCommonEuclidianDrawable:drawTextField]);
    if ([linkedGeo_ isKindOfClass:[GeogebraCommonKernelGeosGeoText class]]) {
      [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) removeSymbolTable];
    }
    else {
      [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) prepareShowSymbolButtonWithBoolean:YES];
    }
    [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField2_)) setAutoCompleteWithBoolean:NO];
    [textField2_ enableColoringWithBoolean:NO];
    [((id<GeogebraCommonGuiInputfieldAutoCompleteTextField>) nil_chk(textField_)) setFocusTraversalKeysEnabledWithBoolean:NO];
    [textField_ setUsedForInputBoxWithGeogebraCommonKernelGeosGeoTextField:self];
  }
  return textField2_;
}

- (void)setSelectedWithBoolean:(jboolean)flag {
  [super setSelectedWithBoolean:flag];
  if (flag && textField_ != nil && ![textField_ hasFocus]) {
    [textField_ requestFocus];
  }
  if (flag && textField2_ != nil && ![textField2_ hasFocus]) {
    [textField2_ requestFocus];
  }
}

- (void)updateTemplate {
  GeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (jint)getPrintDecimals {
  return printDecimals_;
}

- (jint)getPrintFigures {
  return printFigures_;
}

- (void)setPrintDecimalsWithInt:(jint)printDecimals
                    withBoolean:(jboolean)update {
  self->printDecimals_ = printDecimals;
  printFigures_ = -1;
  useSignificantFigures__ = NO;
  GeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (void)setPrintFiguresWithInt:(jint)printFigures
                   withBoolean:(jboolean)update {
  self->printFigures_ = printFigures;
  printDecimals_ = -1;
  useSignificantFigures__ = YES;
  GeogebraCommonKernelGeosGeoTextField_updateTemplate(self);
}

- (jboolean)useSignificantFigures {
  return useSignificantFigures__;
}

- (void)setBackgroundColorWithGeogebraCommonAwtGColor:(GeogebraCommonAwtGColor *)bgCol {
  jint red = 255, green = 255, blue = 255;
  if (bgCol != nil && [bgCol getAlpha] != 0) {
    red = [bgCol getRed];
    green = [bgCol getGreen];
    blue = [bgCol getBlue];
  }
  GeogebraCommonKernelGeosGeoElement_set_bgColor_(self, [((GeogebraCommonFactoriesAwtFactory *) nil_chk(GeogebraCommonFactoriesAwtFactory_get_prototype_())) newColorWithInt:red withInt:green withInt:blue]);
}

- (jboolean)isFixed {
  if ([((GeogebraCommonMainApp *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(kernel_)) getApplication])) isHTML5Applet]) {
    return NO;
  }
  return [super isFixed];
}

- (void)dealloc {
  RELEASE_(linkedGeo_);
  RELEASE_(text_);
  RELEASE_(textField_);
  RELEASE_(textField2_);
  RELEASE_(tpl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:", "GeoTextField", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withInt:withInt:", "GeoTextField", NULL, 0x1, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
    { "getGeoClassType", NULL, "Lgeogebra.common.plugin.GeoClass;", 0x1, NULL, NULL },
    { "isTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setLinkedGeoWithGeogebraCommonKernelGeosGeoElement:", "setLinkedGeo", "V", 0x1, NULL, NULL },
    { "getLinkedGeo", NULL, "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "toValueStringWithGeogebraCommonKernelStringTemplate:", "toValueString", "Ljava.lang.String;", 0x1, NULL, NULL },
    { "setTextWithNSString:", "setText", "V", 0x1, NULL, NULL },
    { "getText", NULL, "Ljava.lang.String;", 0x1, NULL, NULL },
    { "isGeoTextField", NULL, "Z", 0x1, NULL, NULL },
    { "setLengthWithInt:", "setLength", "V", 0x1, NULL, NULL },
    { "getLength", NULL, "I", 0x1, NULL, NULL },
    { "getXMLtagsWithJavaLangStringBuilder:", "getXMLtags", "V", 0x4, NULL, NULL },
    { "copy__", "copy", "Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "updateLinkedGeoWithNSString:", "updateLinkedGeo", "V", 0x1, NULL, NULL },
    { "updateTextWithGeogebraCommonUtilTextObject:", "updateText", "V", 0x1, NULL, NULL },
    { "textObjectUpdatedWithGeogebraCommonUtilTextObject:", "textObjectUpdated", "V", 0x1, NULL, NULL },
    { "textSubmitted", NULL, "V", 0x1, NULL, NULL },
    { "getTextFieldWithInt:withGeogebraCommonEuclidianDrawDrawTextField:", "getTextField", "Lgeogebra.common.gui.inputfield.AutoCompleteTextField;", 0x1, NULL, NULL },
    { "setSelectedWithBoolean:", "setSelected", "V", 0x1, NULL, NULL },
    { "updateTemplate", NULL, "V", 0x2, NULL, NULL },
    { "getPrintDecimals", NULL, "I", 0x1, NULL, NULL },
    { "getPrintFigures", NULL, "I", 0x1, NULL, NULL },
    { "setPrintDecimalsWithInt:withBoolean:", "setPrintDecimals", "V", 0x1, NULL, NULL },
    { "setPrintFiguresWithInt:withBoolean:", "setPrintFigures", "V", 0x1, NULL, NULL },
    { "useSignificantFigures", NULL, "Z", 0x1, NULL, NULL },
    { "setBackgroundColorWithGeogebraCommonAwtGColor:", "setBackgroundColor", "V", 0x1, NULL, NULL },
    { "isFixed", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "defaultLength_", NULL, 0xa, "I", &GeogebraCommonKernelGeosGeoTextField_defaultLength_, NULL,  },
    { "length_", NULL, 0x2, "I", NULL, NULL,  },
    { "linkedGeo_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoElement;", NULL, NULL,  },
    { "text_", NULL, 0x2, "Ljava.lang.String;", NULL, NULL,  },
    { "textField_", NULL, 0x2, "Lgeogebra.common.gui.inputfield.AutoCompleteTextField;", NULL, NULL,  },
    { "textField2_", NULL, 0x2, "Lgeogebra.common.gui.inputfield.AutoCompleteTextField;", NULL, NULL,  },
    { "printDecimals_", NULL, 0x2, "I", NULL, NULL,  },
    { "printFigures_", NULL, 0x2, "I", NULL, NULL,  },
    { "useSignificantFigures__", "useSignificantFigures", 0x2, "Z", NULL, NULL,  },
    { "tpl_", NULL, 0x2, "Lgeogebra.common.kernel.StringTemplate;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelGeosGeoTextField = { 2, "GeoTextField", "geogebra.common.kernel.geos", NULL, 0x1, 29, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelGeosGeoTextField;
}

@end

void GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelGeosGeoTextField *self, GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoButton_initWithGeogebraCommonKernelConstruction_(self, c);
  GeogebraCommonKernelGeosGeoTextField_set_linkedGeo_(self, nil);
  GeogebraCommonKernelGeosGeoTextField_set_text_(self, nil);
  self->printDecimals_ = -1;
  self->printFigures_ = -1;
  self->useSignificantFigures__ = NO;
  GeogebraCommonKernelGeosGeoTextField_set_tpl_(self, GeogebraCommonKernelStringTemplate_get_defaultTemplate_());
  self->length_ = GeogebraCommonKernelGeosGeoTextField_defaultLength_;
}

GeogebraCommonKernelGeosGeoTextField *new_GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *c) {
  GeogebraCommonKernelGeosGeoTextField *self = [GeogebraCommonKernelGeosGeoTextField alloc];
  GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_(self, c);
  return self;
}

void GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonKernelGeosGeoTextField *self, GeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_(self, cons);
  self->labelOffsetX_ = labelOffsetX;
  self->labelOffsetY_ = labelOffsetY;
}

GeogebraCommonKernelGeosGeoTextField *new_GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_withInt_withInt_(GeogebraCommonKernelConstruction *cons, jint labelOffsetX, jint labelOffsetY) {
  GeogebraCommonKernelGeosGeoTextField *self = [GeogebraCommonKernelGeosGeoTextField alloc];
  GeogebraCommonKernelGeosGeoTextField_initWithGeogebraCommonKernelConstruction_withInt_withInt_(self, cons, labelOffsetX, labelOffsetY);
  return self;
}

void GeogebraCommonKernelGeosGeoTextField_updateTemplate(GeogebraCommonKernelGeosGeoTextField *self) {
  if ([self useSignificantFigures] && self->printFigures_ > -1) {
    GeogebraCommonKernelGeosGeoTextField_set_tpl_(self, GeogebraCommonKernelStringTemplate_printFiguresWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), self->printFigures_, NO));
  }
  else if (!self->useSignificantFigures__ && self->printDecimals_ > -1) {
    GeogebraCommonKernelGeosGeoTextField_set_tpl_(self, GeogebraCommonKernelStringTemplate_printDecimalsWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_withInt_withBoolean_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA(), self->printDecimals_, NO));
  }
  else {
    GeogebraCommonKernelGeosGeoTextField_set_tpl_(self, GeogebraCommonKernelStringTemplate_getWithGeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_(GeogebraCommonKernelArithmeticExpressionNodeConstants_StringTypeEnum_get_GEOGEBRA()));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelGeosGeoTextField)
