//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/algos/AlgoClosestPoint.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoClosestPoint.h"
#include "geogebra/common/kernel/algos/AlgoDistancePointObject.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/Function.h"
#include "geogebra/common/kernel/commands/Commands.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonKernelAlgosAlgoClosestPoint () {
 @public
  id<GeogebraCommonKernelPath> path_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAlgosAlgoClosestPoint, path_, id<GeogebraCommonKernelPath>)

__attribute__((unused)) static void GeogebraCommonKernelAlgosAlgoClosestPoint_compute(GeogebraCommonKernelAlgosAlgoClosestPoint *self);

@implementation GeogebraCommonKernelAlgosAlgoClosestPoint

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, path, point);
  return self;
}

- (void)createOutputPointWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                 withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path {
  GeogebraCommonKernelAlgosAlgoClosestPoint_setAndConsume_P_(self, new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons));
  [((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])) setPathWithGeogebraCommonKernelPath:path];
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, path, point);
  return self;
}

- (GeogebraCommonKernelCommandsCommandsEnum *)getClassName {
  return GeogebraCommonKernelCommandsCommandsEnum_get_ClosestPoint();
}

- (void)setInputOutput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:2 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, [((id<GeogebraCommonKernelPath>) nil_chk(path_)) toGeoElement]);
  IOSObjectArray_Set(input_, 1, [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(point_)) toGeoElement]);
  [self setOutputLengthWithInt:1];
  [self setOutputWithInt:0 withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoElement class])];
  [self setDependencies];
}

- (void)addIncidence {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])))) addIncidenceWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(path_, [GeogebraCommonKernelGeosGeoElement class]) withBoolean:NO];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getP {
  return P_;
}

- (void)setCoords {
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(P_, [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithGeogebraCommonKernelGeosGeoVec3D:(GeogebraCommonKernelGeosGeoPoint *) check_class_cast(point_, [GeogebraCommonKernelGeosGeoPoint class])];
}

- (void)compute {
  GeogebraCommonKernelAlgosAlgoClosestPoint_compute(self);
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"PointOnAClosestToB" withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(input_), 0))) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(input_, 1))) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (jboolean)isChangeable {
  return NO;
}

- (void)dealloc {
  RELEASE_(path_);
  RELEASE_(point_);
  RELEASE_(P_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelPath:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoClosestPoint", NULL, 0x1, NULL, NULL },
    { "createOutputPointWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelPath:", "createOutputPoint", "V", 0x4, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelPath:withGeogebraCommonKernelKernelNDGeoPointND:", "AlgoClosestPoint", NULL, 0x1, NULL, NULL },
    { "getClassName", NULL, "Lgeogebra.common.kernel.commands.Commands;", 0x1, NULL, NULL },
    { "setInputOutput", NULL, "V", 0x4, NULL, NULL },
    { "addIncidence", NULL, "V", 0x4, NULL, NULL },
    { "getP", NULL, "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "setCoords", NULL, "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x11, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x11, NULL, NULL },
    { "isChangeable", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "path_", NULL, 0x2, "Lgeogebra.common.kernel.Path;", NULL, NULL,  },
    { "point_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
    { "P_", NULL, 0x4, "Lgeogebra.common.kernel.kernelND.GeoPointND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAlgosAlgoClosestPoint = { 2, "AlgoClosestPoint", "geogebra.common.kernel.algos", NULL, 0x1, 11, methods, 3, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAlgosAlgoClosestPoint;
}

@end

void GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoClosestPoint *self, GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelPath> path, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonKernelAlgosAlgoElement_initWithGeogebraCommonKernelConstruction_(self, cons);
  GeogebraCommonKernelAlgosAlgoClosestPoint_set_path_(self, path);
  GeogebraCommonKernelAlgosAlgoClosestPoint_set_point_(self, point);
  [self createOutputPointWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelPath:path];
  [self setInputOutput];
  GeogebraCommonKernelAlgosAlgoClosestPoint_compute(self);
  [self addIncidence];
}

GeogebraCommonKernelAlgosAlgoClosestPoint *new_GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, id<GeogebraCommonKernelPath> path, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonKernelAlgosAlgoClosestPoint *self = [GeogebraCommonKernelAlgosAlgoClosestPoint alloc];
  GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, path, point);
  return self;
}

void GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelAlgosAlgoClosestPoint *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelPath> path, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, path, point);
  [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) setLabelWithNSString:label];
}

GeogebraCommonKernelAlgosAlgoClosestPoint *new_GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelPath> path, id<GeogebraCommonKernelKernelNDGeoPointND> point) {
  GeogebraCommonKernelAlgosAlgoClosestPoint *self = [GeogebraCommonKernelAlgosAlgoClosestPoint alloc];
  GeogebraCommonKernelAlgosAlgoClosestPoint_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelPath_withGeogebraCommonKernelKernelNDGeoPointND_(self, cons, label, path, point);
  return self;
}

void GeogebraCommonKernelAlgosAlgoClosestPoint_compute(GeogebraCommonKernelAlgosAlgoClosestPoint *self) {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(IOSObjectArray_Get(nil_chk(self->input_), 0))) isDefined] && [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->point_)) isDefined]) {
    if ([self->path_ isKindOfClass:[GeogebraCommonKernelGeosGeoFunction class]]) {
      GeogebraCommonKernelArithmeticFunction *fun = (GeogebraCommonKernelArithmeticFunction *) check_class_cast([((GeogebraCommonKernelArithmeticFunction *) nil_chk([((GeogebraCommonKernelGeosGeoFunction *) nil_chk(((GeogebraCommonKernelGeosGeoFunction *) check_class_cast(self->path_, [GeogebraCommonKernelGeosGeoFunction class])))) getFunction])) deepCopyWithGeogebraCommonKernelKernel:self->kernel_], [GeogebraCommonKernelArithmeticFunction class]);
      GeogebraCommonKernelMatrixCoords *coords = [self->point_ getCoordsInD2];
      jdouble val = GeogebraCommonKernelAlgosAlgoDistancePointObject_getClosestFunctionValueToPointWithGeogebraCommonKernelArithmeticFunction_withDouble_withDouble_(fun, [((GeogebraCommonKernelMatrixCoords *) nil_chk(coords)) getX], [coords getY]);
      [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(((GeogebraCommonKernelGeosGeoPoint *) check_class_cast(self->P_, [GeogebraCommonKernelGeosGeoPoint class])))) setCoordsWithDouble:val withDouble:[((GeogebraCommonKernelArithmeticFunction *) nil_chk(fun)) evaluateWithDouble:val] withDouble:1.0];
    }
    else {
      [self setCoords];
      [((id<GeogebraCommonKernelPath>) nil_chk(self->path_)) pointChangedWithGeogebraCommonKernelKernelNDGeoPointND:self->P_];
    }
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) updateCoords];
  }
  else {
    [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(self->P_)) setUndefined];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAlgosAlgoClosestPoint)
