//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/statistics/DistributionFunctionFactory.java
//


#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/arithmetic/ExpressionNode.h"
#include "geogebra/common/kernel/arithmetic/ExpressionValue.h"
#include "geogebra/common/kernel/arithmetic/FunctionVariable.h"
#include "geogebra/common/kernel/arithmetic/MyDouble.h"
#include "geogebra/common/kernel/geos/GeoFunction.h"
#include "geogebra/common/kernel/statistics/DistributionFunctionFactory.h"

@implementation GeogebraCommonKernelStatisticsDistributionFunctionFactory

+ (GeogebraCommonKernelGeosGeoFunction *)zeroWhenNegativeWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenNegativeWithGeogebraCommonKernelConstruction_(cons);
}

+ (GeogebraCommonKernelGeosGeoFunction *)zeroWhenLessThanWithGeogebraCommonKernelArithmeticExpressionValue:(id<GeogebraCommonKernelArithmeticExpressionValue>)border
                                                                      withGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons {
  return GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelConstruction_(border, cons);
}

- (instancetype)init {
  GeogebraCommonKernelStatisticsDistributionFunctionFactory_init(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "zeroWhenNegativeWithGeogebraCommonKernelConstruction:", "zeroWhenNegative", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "zeroWhenLessThanWithGeogebraCommonKernelArithmeticExpressionValue:withGeogebraCommonKernelConstruction:", "zeroWhenLessThan", "Lgeogebra.common.kernel.geos.GeoFunction;", 0x9, NULL, NULL },
    { "init", NULL, NULL, 0x1, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelStatisticsDistributionFunctionFactory = { 2, "DistributionFunctionFactory", "geogebra.common.kernel.statistics", NULL, 0x1, 3, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelStatisticsDistributionFunctionFactory;
}

@end

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenNegativeWithGeogebraCommonKernelConstruction_(GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelStatisticsDistributionFunctionFactory_initialize();
  return GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelConstruction_([new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_([((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel], 0) autorelease], cons);
}

GeogebraCommonKernelGeosGeoFunction *GeogebraCommonKernelStatisticsDistributionFunctionFactory_zeroWhenLessThanWithGeogebraCommonKernelArithmeticExpressionValue_withGeogebraCommonKernelConstruction_(id<GeogebraCommonKernelArithmeticExpressionValue> border, GeogebraCommonKernelConstruction *cons) {
  GeogebraCommonKernelStatisticsDistributionFunctionFactory_initialize();
  GeogebraCommonKernelKernel *kernel = [((GeogebraCommonKernelConstruction *) nil_chk(cons)) getKernel];
  GeogebraCommonKernelArithmeticFunctionVariable *fv = [new_GeogebraCommonKernelArithmeticFunctionVariable_initWithGeogebraCommonKernelKernel_(kernel) autorelease];
  GeogebraCommonKernelArithmeticExpressionNode *en = [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk([fv wrap])) lessThanWithGeogebraCommonKernelArithmeticExpressionValue:border])) ifElseWithGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease] withGeogebraCommonKernelArithmeticExpressionValue:[new_GeogebraCommonKernelArithmeticMyDouble_initWithGeogebraCommonKernelKernel_withDouble_(kernel, 0) autorelease]];
  return [((GeogebraCommonKernelArithmeticExpressionNode *) nil_chk(en)) buildFunctionWithGeogebraCommonKernelArithmeticFunctionVariable:fv];
}

void GeogebraCommonKernelStatisticsDistributionFunctionFactory_init(GeogebraCommonKernelStatisticsDistributionFunctionFactory *self) {
  NSObject_init(self);
}

GeogebraCommonKernelStatisticsDistributionFunctionFactory *new_GeogebraCommonKernelStatisticsDistributionFunctionFactory_init() {
  GeogebraCommonKernelStatisticsDistributionFunctionFactory *self = [GeogebraCommonKernelStatisticsDistributionFunctionFactory alloc];
  GeogebraCommonKernelStatisticsDistributionFunctionFactory_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelStatisticsDistributionFunctionFactory)
