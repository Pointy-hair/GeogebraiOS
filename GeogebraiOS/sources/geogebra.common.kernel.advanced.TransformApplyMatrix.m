//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/kernel/advanced/TransformApplyMatrix.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Transform.h"
#include "geogebra/common/kernel/advanced/AlgoApplyMatrix.h"
#include "geogebra/common/kernel/advanced/TransformApplyMatrix.h"
#include "geogebra/common/kernel/algos/AlgoTransformation.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"

@interface GeogebraCommonKernelAdvancedTransformApplyMatrix () {
 @public
  GeogebraCommonKernelGeosGeoList *matrix_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonKernelAdvancedTransformApplyMatrix, matrix_, GeogebraCommonKernelGeosGeoList *)

@implementation GeogebraCommonKernelAdvancedTransformApplyMatrix

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                     withGeogebraCommonKernelGeosGeoList:(GeogebraCommonKernelGeosGeoList *)matrix {
  GeogebraCommonKernelAdvancedTransformApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, matrix);
  return self;
}

- (GeogebraCommonKernelAlgosAlgoTransformation *)getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo {
  GeogebraCommonKernelAdvancedAlgoApplyMatrix *algo = [new_GeogebraCommonKernelAdvancedAlgoApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelGeosGeoList_(cons_, geo, matrix_) autorelease];
  return algo;
}

- (jboolean)isSimilar {
  return NO;
}

- (jboolean)changesOrientation {
  GeogebraCommonKernelAlgosAlgoTransformation *at = [self getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:[new_GeogebraCommonKernelGeosGeoPoint_initWithGeogebraCommonKernelConstruction_(cons_) autorelease]];
  [((GeogebraCommonKernelConstruction *) nil_chk(cons_)) removeFromConstructionListWithGeogebraCommonKernelAlgosConstructionElement:at];
  return [((GeogebraCommonKernelAlgosAlgoTransformation *) nil_chk(at)) swapOrientationWithGeogebraCommonKernelGeosGeoConicPart:nil];
}

- (void)dealloc {
  RELEASE_(matrix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelGeosGeoList:", "TransformApplyMatrix", NULL, 0x1, NULL, NULL },
    { "getTransformAlgoWithGeogebraCommonKernelGeosGeoElement:", "getTransformAlgo", "Lgeogebra.common.kernel.algos.AlgoTransformation;", 0x4, NULL, NULL },
    { "isSimilar", NULL, "Z", 0x1, NULL, NULL },
    { "changesOrientation", NULL, "Z", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "matrix_", NULL, 0x2, "Lgeogebra.common.kernel.geos.GeoList;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonKernelAdvancedTransformApplyMatrix = { 2, "TransformApplyMatrix", "geogebra.common.kernel.advanced", NULL, 0x1, 4, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonKernelAdvancedTransformApplyMatrix;
}

@end

void GeogebraCommonKernelAdvancedTransformApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelAdvancedTransformApplyMatrix *self, GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelTransform_init(self);
  GeogebraCommonKernelAdvancedTransformApplyMatrix_set_matrix_(self, matrix);
  GeogebraCommonKernelTransform_set_cons_(self, cons);
}

GeogebraCommonKernelAdvancedTransformApplyMatrix *new_GeogebraCommonKernelAdvancedTransformApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(GeogebraCommonKernelConstruction *cons, GeogebraCommonKernelGeosGeoList *matrix) {
  GeogebraCommonKernelAdvancedTransformApplyMatrix *self = [GeogebraCommonKernelAdvancedTransformApplyMatrix alloc];
  GeogebraCommonKernelAdvancedTransformApplyMatrix_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelGeosGeoList_(self, cons, matrix);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonKernelAdvancedTransformApplyMatrix)
