//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3D.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolygon3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPolygon3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/algos/AlgoPolygon.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoPoint.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/main/App.h"

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)label
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)polyhedron {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, points, polyhedron);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                       withNSStringArray:(IOSObjectArray *)labels
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                             withBoolean:(jboolean)createSegments
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)polyhedron {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(self, cons, labels, points, createSegments, polyhedron);
  return self;
}

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
         withGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points
                                             withBoolean:(jboolean)createSegments
                  withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)polyhedron {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(self, cons, points, createSegments, polyhedron);
  return self;
}

- (void)createPolygonWithBoolean:(jboolean)createSegments {
  GeogebraCommonKernelAlgosAlgoPolygon_setAndConsume_poly_(self, new_GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelMatrixCoordSys_withBoolean_(cons_, points_, cs2D_, createSegments));
  if (polyhedron_ != nil) {
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(poly_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) setIsPartOfClosedSurfaceWithBoolean:YES];
    [((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(poly_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])) addMetaWithGeogebraCommonKernelGeosGeoElement:polyhedron_];
  }
}

- (void)compute {
  if ([((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) nil_chk(((GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D *) check_class_cast(poly_, [GeogebraCommonGeogebra3DKernel3DGeosGeoPolygon3D class])))) updateCoordSys]) [super compute];
  else [((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(poly_)) setUndefined];
}

- (void)calcCentroidWithGeogebraCommonKernelGeosGeoPoint:(GeogebraCommonKernelGeosGeoPoint *)p {
  GeogebraCommonMainApp_debugWithNSString_(@"centroid unimplemented for 3D polys");
  [((GeogebraCommonKernelGeosGeoPoint *) nil_chk(p)) setUndefined];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withGeogebraCommonKernelGeosGeoElement:", "AlgoPolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withNSStringArray:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withGeogebraCommonKernelGeosGeoElement:", "AlgoPolygon3D", NULL, 0x1, NULL, NULL },
    { "initWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointNDArray:withBoolean:withGeogebraCommonKernelGeosGeoElement:", "AlgoPolygon3D", NULL, 0x1, NULL, NULL },
    { "createPolygonWithBoolean:", "createPolygon", "V", 0x4, NULL, NULL },
    { "compute", NULL, "V", 0x1, NULL, NULL },
    { "calcCentroidWithGeogebraCommonKernelGeosGeoPoint:", "calcCentroid", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "createSegments_", NULL, 0x0, "Z", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D = { 2, "AlgoPolygon3D", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 6, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *label, IOSObjectArray *points, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, points, YES, polyhedron);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *label, IOSObjectArray *points, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoElement_(self, cons, label, points, polyhedron);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, labels, points, nil, nil, createSegments, polyhedron, nil);
  self->createSegments_ = YES;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *labels, IOSObjectArray *points, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withNSStringArray_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(self, cons, labels, points, createSegments, polyhedron);
  return self;
}

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self, GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonKernelAlgosAlgoPolygon_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withGeogebraCommonKernelGeosGeoList_withGeogebraCommonKernelMatrixCoordSys_withBoolean_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonKernelKernelNDGeoDirectionND_(self, cons, points, nil, nil, createSegments, polyhedron, nil);
  self->createSegments_ = YES;
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(GeogebraCommonKernelConstruction *cons, IOSObjectArray *points, jboolean createSegments, GeogebraCommonKernelGeosGeoElement *polyhedron) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointNDArray_withBoolean_withGeogebraCommonKernelGeosGeoElement_(self, cons, points, createSegments, polyhedron);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolygon3D)
