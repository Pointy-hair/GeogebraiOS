//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/euclidian/EuclidianController.h"
#include "geogebra/common/euclidian/EuclidianControllerCompanion.h"
#include "geogebra/common/euclidian/EuclidianView.h"
#include "geogebra/common/geogebra3D/euclidianFor3D/EuclidianControllerFor3DCompanion.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoJoinPoints3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoMidpoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoPolarLine3D.h"
#include "geogebra/common/geogebra3D/kernel3D/geos/GeoPoint3D.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Manager3DInterface.h"
#include "geogebra/common/kernel/Matrix/CoordMatrix.h"
#include "geogebra/common/kernel/Path.h"
#include "geogebra/common/kernel/algos/AlgoDispatcher.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/arithmetic/NumberValue.h"
#include "geogebra/common/kernel/geos/GeoAngle.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/geos/GeoList.h"
#include "geogebra/common/kernel/geos/GeoNumberValue.h"
#include "geogebra/common/kernel/geos/GeoPolygon.h"
#include "geogebra/common/kernel/kernelND/GeoConicND.h"
#include "geogebra/common/kernel/kernelND/GeoConicPartND.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoLineND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/kernel/kernelND/GeoSegmentND.h"
#include "geogebra/common/kernel/kernelND/GeoVectorND.h"
#include "geogebra/common/plugin/GeoClass.h"

@implementation GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion

- (instancetype)initWithGeogebraCommonEuclidianEuclidianController:(GeogebraCommonEuclidianEuclidianController *)ec {
  GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(A, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(B, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(C, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getSpace]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
    }
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getXOYPlane]) {
    return [super createAngleWithGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
}

- (IOSObjectArray *)createAnglesWithGeogebraCommonKernelGeosGeoPolygon:(GeogebraCommonKernelGeosGeoPolygon *)p {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  if ([((GeogebraCommonKernelGeosGeoPolygon *) nil_chk(p)) isGeoElement3D]) {
    if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getSpace]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angles3DWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:p];
    }
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angles3DWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:p withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getXOYPlane]) {
    return [super createAnglesWithGeogebraCommonKernelGeosGeoPolygon:p];
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angles3DWithNSStringArray:nil withGeogebraCommonKernelGeosGeoPolygon:p withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v1
                                                 withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v2 {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  if ([((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v2)) isGeoElement3D]) {
    if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getSpace]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoVectorND:v1 withGeogebraCommonKernelKernelNDGeoVectorND:v2];
    }
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoVectorND:v1 withGeogebraCommonKernelKernelNDGeoVectorND:v2 withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getXOYPlane]) {
    return [super createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:v1 withGeogebraCommonKernelKernelNDGeoVectorND:v2];
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Angle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoVectorND:v1 withGeogebraCommonKernelKernelNDGeoVectorND:v2 withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
}

- (GeogebraCommonKernelGeosGeoAngle *)createAngleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                 withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)a
                                                                                withBoolean:(jboolean)clockWise {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> direction = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  if (direction == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getXOYPlane] || direction == [ec_->kernel_ getSpace]) {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D]) {
      return (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) AngleWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a withGeogebraCommonKernelKernelNDGeoDirectionND:[ec_->kernel_ getXOYPlane] withBoolean:!clockWise]), 0), [GeogebraCommonKernelGeosGeoAngle class]);
    }
    return [super createAngleWithGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a withBoolean:clockWise];
  }
  return (GeogebraCommonKernelGeosGeoAngle *) check_class_cast(IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) AngleWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelGeosGeoNumberValue:a withGeogebraCommonKernelKernelNDGeoDirectionND:direction withBoolean:!clockWise]), 0), [GeogebraCommonKernelGeosGeoAngle class]);
}

- (GeogebraCommonKernelGeosGeoAngle *)createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h)) isGeoElement3D]) {
    if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getSpace]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h];
    }
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
  }
  if (orientation == [((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getXOYPlane]) {
    return [super createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h];
  }
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h withGeogebraCommonKernelKernelNDGeoDirectionND:orientation];
}

- (IOSObjectArray *)translateWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                        withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)vec {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(vec, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Translate3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoVectorND:vec];
  }
  return [super translateWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoVectorND:vec];
}

- (IOSObjectArray *)mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Mirror3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoPointND:point];
  }
  return [super mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoPointND:point];
}

- (IOSObjectArray *)mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                             withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(line, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Mirror3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoLineND:line];
  }
  return [super mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelKernelNDGeoLineND:line];
}

- (IOSObjectArray *)dilateFromPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)geo
                            withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)num
                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(point, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Dilate3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelArithmeticNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:point];
  }
  return [super dilateFromPointWithGeogebraCommonKernelGeosGeoElement:geo withGeogebraCommonKernelArithmeticNumberValue:num withGeogebraCommonKernelKernelNDGeoPointND:point];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointFrom2DWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                                                              withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                                                                         withBoolean:(jboolean)coords2D {
  return [super getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b withBoolean:coords2D];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)a
                                                                        withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *)b
                                                                                                   withBoolean:(jboolean)coords2D {
  if (![((GeogebraCommonKernelGeosGeoElement *) nil_chk(a)) isGeoElement3D] && ![((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoElement3D]) return [self getSingleIntersectionPointFrom2DWithGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b withBoolean:coords2D];
  id<GeogebraCommonKernelKernelNDGeoPointND> point = nil;
  if ([a isGeoLine]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
      point = (GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) IntersectWithNSString:nil withGeogebraCommonKernelGeosGeoElement:a withGeogebraCommonKernelGeosGeoElement:b], [GeogebraCommonGeogebra3DKernel3DGeosGeoPoint3D class]);
    }
    else if ([b isGeoConic]) {
      point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(a, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_ withGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getInverseMatrix]];
    }
    else {
      return nil;
    }
  }
  else if ([a isGeoConic]) {
    if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(b)) isGeoLine]) {
      point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) IntersectLineConicSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>) check_protocol_cast(b, @protocol(GeogebraCommonKernelKernelNDGeoLineND)) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_ withGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getInverseMatrix]];
    }
    else if ([b isGeoConic] && ![a isEqualWithGeogebraCommonKernelGeosGeoElement:b]) {
      point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) IntersectConicsSingleWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(a, [GeogebraCommonKernelKernelNDGeoConicND class]) withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *) check_class_cast(b, [GeogebraCommonKernelKernelNDGeoConicND class]) withDouble:ec_->xRW_ withDouble:ec_->yRW_ withGeogebraCommonKernelMatrixCoordMatrix:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getInverseMatrix]];
    }
    else {
      return nil;
    }
  }
  if (point != nil) {
    if (coords2D) {
      [point setCartesian];
    }
    else {
      [point setCartesian3D];
    }
    [point update];
  }
  return point;
}

- (IOSObjectArray *)orthogonalWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)point
                               withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)line {
  return [IOSObjectArray arrayWithObjects:(id[]){ (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) OrthogonalLine3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:point withGeogebraCommonKernelKernelNDGeoDirectionND:line withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]], [GeogebraCommonKernelGeosGeoElement class]) } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (id<GeogebraCommonKernelKernelNDGeoPointND>)createNewPointWithNSString:(NSString *)label
                                                             withBoolean:(jboolean)forPreviewable
                                            withGeogebraCommonKernelPath:(id<GeogebraCommonKernelPath>)path
                                                              withDouble:(jdouble)x
                                                              withDouble:(jdouble)y
                                                              withDouble:(jdouble)z
                                                             withBoolean:(jboolean)complex
                                                             withBoolean:(jboolean)coords2D {
  GeogebraCommonKernelGeosGeoElement *geo = [((id<GeogebraCommonKernelPath>) nil_chk(path)) toGeoElement];
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(geo)) isGeoElement3D] || ([geo isGeoList] && [((GeogebraCommonKernelGeosGeoList *) check_class_cast(geo, [GeogebraCommonKernelGeosGeoList class])) containsGeoElement3D])) {
    [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) checkZoomingWithBoolean:forPreviewable];
    id<GeogebraCommonKernelKernelNDGeoPointND> point = [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getManager3D])) Point3DWithNSString:label withGeogebraCommonKernelPath:path withDouble:x withDouble:y withDouble:z withBoolean:!forPreviewable withBoolean:coords2D];
    return point;
  }
  return [((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_)) createNewPoint2DWithNSString:label withBoolean:forPreviewable withGeogebraCommonKernelPath:path withDouble:x withDouble:y withBoolean:complex withBoolean:coords2D];
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(segment, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) MidpointWithNSString:nil withGeogebraCommonKernelKernelNDGeoSegmentND:segment], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:segment];
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)conic {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk((conic))) isGeoElement3D]) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) CenterWithNSString:nil withGeogebraCommonKernelKernelNDGeoConicND:conic], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super midpointWithGeogebraCommonKernelKernelNDGeoConicND:conic];
}

- (GeogebraCommonKernelGeosGeoElement *)midpointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  if ([((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p1, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D] || [((GeogebraCommonKernelGeosGeoElement *) nil_chk(((GeogebraCommonKernelGeosGeoElement *) check_class_cast(p2, [GeogebraCommonKernelGeosGeoElement class])))) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoMidpoint3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction], p1, p2) autorelease];
    return [algo getPoint];
  }
  return [super midpointWithGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2];
}

- (IOSObjectArray *)regularPolygonWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint1
                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)geoPoint2
                                  withGeogebraCommonKernelGeosGeoNumberValue:(id<GeogebraCommonKernelGeosGeoNumberValue>)value {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geoPoint1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(geoPoint2)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) RegularPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:geoPoint1 withGeogebraCommonKernelKernelNDGeoPointND:geoPoint2 withGeogebraCommonKernelArithmeticNumberValue:value withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]];
  }
  return [((GeogebraCommonKernelAlgosAlgoDispatcher *) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getAlgoDispatcher])) RegularPolygonWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:geoPoint1 withGeogebraCommonKernelKernelNDGeoPointND:geoPoint2 withGeogebraCommonKernelArithmeticNumberValue:value];
}

- (GeogebraCommonKernelAlgosAlgoElement *)segmentAlgoWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                               withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D]) {
    return [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoJoinPoints3D_initWithGeogebraCommonKernelConstruction_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelGeosGeoElement_withGeogebraCommonPluginGeoClassEnum_(cons, p1, p2, nil, GeogebraCommonPluginGeoClassEnum_get_SEGMENT3D()) autorelease];
  }
  return [super segmentAlgoWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2];
}

- (IOSObjectArray *)createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p0
                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p0)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D]) {
    return [self createCircle2For3DWithGeogebraCommonKernelKernelNDGeoPointND:p0 withGeogebraCommonKernelKernelNDGeoPointND:p1];
  }
  return [super createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:p0 withGeogebraCommonKernelKernelNDGeoPointND:p1];
}

- (IOSObjectArray *)createCircle2For3DWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p0
                                      withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1 {
  return [IOSObjectArray arrayWithObjects:(id[]){ [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Circle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:p0 withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]] } count:1 type:GeogebraCommonKernelGeosGeoElement_class_()];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)circleWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                                         withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(center)) isGeoElement3D]) {
    return [self circleFor3DWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelArithmeticNumberValue:radius];
  }
  return [super circleWithGeogebraCommonKernelConstruction:cons withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelArithmeticNumberValue:radius];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)circleFor3DWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                                 withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)center
                                              withGeogebraCommonKernelArithmeticNumberValue:(id<GeogebraCommonKernelArithmeticNumberValue>)radius {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Circle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:center withGeogebraCommonKernelArithmeticNumberValue:radius withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]];
}

- (IOSObjectArray *)angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)g
                                   withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)h {
  if ([((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(g)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(h)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) AngularBisector3DWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h];
  }
  return [super angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:g withGeogebraCommonKernelKernelNDGeoLineND:h];
}

- (GeogebraCommonKernelGeosGeoElement *)angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) AngularBisector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
  }
  return [super angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C];
}

- (GeogebraCommonKernelGeosGeoElement *)circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
                                                                                          withInt:(jint)type {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getManager3D])) CircleArcSector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoPointND:C withGeogebraCommonKernelKernelNDGeoDirectionND:orientation withInt:type], [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelGeosGeoElement *)semicircleWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
                                                  withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B {
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation = [((GeogebraCommonEuclidianEuclidianView *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->view_)) getDirection];
  return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(ec_->kernel_)) getManager3D])) Semicircle3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:A withGeogebraCommonKernelKernelNDGeoPointND:B withGeogebraCommonKernelKernelNDGeoDirectionND:orientation], [GeogebraCommonKernelGeosGeoElement class]);
}

- (GeogebraCommonKernelGeosGeoElement *)circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                       withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p3)) isGeoElement3D]) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) CircumcircleArc3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3];
}

- (GeogebraCommonKernelGeosGeoElement *)circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p1
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p2
                                                          withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)p3 {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p1)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p2)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(p3)) isGeoElement3D]) {
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) CircumcircleSector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:p1 withGeogebraCommonKernelKernelNDGeoPointND:p2 withGeogebraCommonKernelKernelNDGeoPointND:p3];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Tangent3DWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
                          withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Tangent3DWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoLineND:l withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (IOSObjectArray *)tangentWithGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c1
                           withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c2 {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) CommonTangents3DWithNSStringArray:nil withGeogebraCommonKernelKernelNDGeoConicND:c1 withGeogebraCommonKernelKernelNDGeoConicND:c2];
}

- (GeogebraCommonKernelGeosGeoElement *)polarLineWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)P
                                                 withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(P)) isGeoElement3D] || [((GeogebraCommonKernelKernelNDGeoConicND *) nil_chk(c)) isGeoElement3D]) {
    GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D *algo = [new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoPolarLine3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoConicND_withGeogebraCommonKernelKernelNDGeoPointND_([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getConstruction], nil, c, P) autorelease];
    return (GeogebraCommonKernelGeosGeoElement *) check_class_cast([algo getLine], [GeogebraCommonKernelGeosGeoElement class]);
  }
  return [super polarLineWithGeogebraCommonKernelKernelNDGeoPointND:P withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)diameterLineWithGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l
                                                   withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) DiameterLine3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoLineND:l withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)diameterLineWithGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v
                                                     withGeogebraCommonKernelKernelNDGeoConicND:(GeogebraCommonKernelKernelNDGeoConicND *)c {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) DiameterLine3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoVectorND:v withGeogebraCommonKernelKernelNDGeoConicND:c];
}

- (GeogebraCommonKernelGeosGeoElement *)lineBisectorWithGeogebraCommonKernelKernelNDGeoSegmentND:(id<GeogebraCommonKernelKernelNDGeoSegmentND>)segment {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) LineBisector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoSegmentND:segment withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]];
}

- (GeogebraCommonKernelGeosGeoElement *)lineBisectorWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                    withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) LineBisector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection]];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:(IOSObjectArray *)points {
  for (jint i = 0; i < 5; i++) {
    if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(IOSObjectArray_Get(nil_chk(points), i))) isGeoElement3D]) {
      return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Conic3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointNDArray:points];
    }
  }
  return [super conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:points];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b
                                                            withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)c
                                                                                               withInt:(jint)type {
  return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) EllipseHyperbola3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b withGeogebraCommonKernelKernelNDGeoPointND:c withGeogebraCommonKernelKernelNDGeoDirectionND:[((GeogebraCommonEuclidianEuclidianView *) nil_chk(ec_->view_)) getDirection] withInt:type];
}

- (GeogebraCommonKernelKernelNDGeoConicND *)parabolaWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                     withGeogebraCommonKernelKernelNDGeoLineND:(id<GeogebraCommonKernelKernelNDGeoLineND>)l {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(a)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoLineND>) nil_chk(l)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Parabola3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoLineND:l];
  }
  return [super parabolaWithGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoLineND:l];
}

- (GeogebraCommonKernelGeosGeoElement *)vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                                  withGeogebraCommonKernelKernelNDGeoVectorND:(id<GeogebraCommonKernelKernelNDGeoVectorND>)v {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(a)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoVectorND>) nil_chk(v)) isGeoElement3D]) {
    id<GeogebraCommonKernelKernelNDGeoPointND> endPoint = (id<GeogebraCommonKernelKernelNDGeoPointND>) check_protocol_cast(IOSObjectArray_Get(nil_chk([((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Translate3DWithNSString:nil withGeogebraCommonKernelGeosGeoElement:(GeogebraCommonKernelGeosGeoElement *) check_class_cast(a, [GeogebraCommonKernelGeosGeoElement class]) withGeogebraCommonKernelKernelNDGeoVectorND:v]), 0), @protocol(GeogebraCommonKernelKernelNDGeoPointND));
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([ec_->kernel_ getManager3D])) Vector3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:endPoint];
  }
  return [super vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoVectorND:v];
}

- (GeogebraCommonKernelGeosGeoElement *)locusWithGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)a
                                             withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)b {
  if ([((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(a)) isGeoElement3D] || [((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(b)) isGeoElement3D]) {
    return [((id<GeogebraCommonKernelManager3DInterface>) nil_chk([((GeogebraCommonKernelKernel *) nil_chk(((GeogebraCommonEuclidianEuclidianController *) nil_chk(ec_))->kernel_)) getManager3D])) Locus3DWithNSString:nil withGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b];
  }
  return [super locusWithGeogebraCommonKernelKernelNDGeoPointND:a withGeogebraCommonKernelKernelNDGeoPointND:b];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonEuclidianEuclidianController:", "EuclidianControllerFor3DCompanion", NULL, 0x1, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "createAnglesWithGeogebraCommonKernelGeosGeoPolygon:", "createAngles", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoVectorND:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "createAngleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:withBoolean:", "createAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x1, NULL, NULL },
    { "createLineAngleWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "createLineAngle", "Lgeogebra.common.kernel.geos.GeoAngle;", 0x4, NULL, NULL },
    { "translateWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoVectorND:", "translate", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "mirrorAtPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoPointND:", "mirrorAtPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "mirrorAtLineWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelKernelNDGeoLineND:", "mirrorAtLine", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "dilateFromPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelArithmeticNumberValue:withGeogebraCommonKernelKernelNDGeoPointND:", "dilateFromPoint", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "getSingleIntersectionPointFrom2DWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "getSingleIntersectionPointFrom2D", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "getSingleIntersectionPointWithGeogebraCommonKernelGeosGeoElement:withGeogebraCommonKernelGeosGeoElement:withBoolean:", "getSingleIntersectionPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "orthogonalWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "orthogonal", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createNewPointWithNSString:withBoolean:withGeogebraCommonKernelPath:withDouble:withDouble:withDouble:withBoolean:withBoolean:", "createNewPoint", "Lgeogebra.common.kernel.kernelND.GeoPointND;", 0x1, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoSegmentND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoConicND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "midpointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "midpoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "regularPolygonWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelGeosGeoNumberValue:", "regularPolygon", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x1, NULL, NULL },
    { "segmentAlgoWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "segmentAlgo", "Lgeogebra.common.kernel.algos.AlgoElement;", 0x4, NULL, NULL },
    { "createCircle2WithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createCircle2", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "createCircle2For3DWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "createCircle2For3D", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "circle", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "circleFor3DWithGeogebraCommonKernelConstruction:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelArithmeticNumberValue:", "circleFor3D", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "angularBisectorWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoLineND:", "angularBisector", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "angularBisectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "angularBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circleArcSectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "circleArcSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "semicircleWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "semicircle", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circumcircleArcWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circumcircleArc", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "circumcircleSectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "circumcircleSector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "tangentWithGeogebraCommonKernelKernelNDGeoConicND:withGeogebraCommonKernelKernelNDGeoConicND:", "tangent", "[Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "polarLineWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoConicND:", "polarLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "diameterLineWithGeogebraCommonKernelKernelNDGeoLineND:withGeogebraCommonKernelKernelNDGeoConicND:", "diameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "diameterLineWithGeogebraCommonKernelKernelNDGeoVectorND:withGeogebraCommonKernelKernelNDGeoConicND:", "diameterLine", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "lineBisectorWithGeogebraCommonKernelKernelNDGeoSegmentND:", "lineBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "lineBisectorWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "lineBisector", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "conic5WithGeogebraCommonKernelKernelNDGeoPointNDArray:", "conic5", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "ellipseHyperbolaWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withInt:", "ellipseHyperbola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "parabolaWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoLineND:", "parabola", "Lgeogebra.common.kernel.kernelND.GeoConicND;", 0x4, NULL, NULL },
    { "vectorPointWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoVectorND:", "vectorPoint", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
    { "locusWithGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:", "locus", "Lgeogebra.common.kernel.geos.GeoElement;", 0x4, NULL, NULL },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion = { 2, "EuclidianControllerFor3DCompanion", "geogebra.common.geogebra3D.euclidianFor3D", NULL, 0x1, 42, methods, 0, NULL, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion;
}

@end

void GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *self, GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonEuclidianEuclidianControllerCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
}

GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *new_GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(GeogebraCommonEuclidianEuclidianController *ec) {
  GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion *self = [GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion alloc];
  GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion_initWithGeogebraCommonEuclidianEuclidianController_(self, ec);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidianFor3DEuclidianControllerFor3DCompanion)
