//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrushSection.java
//


#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/euclidian3D/openGL/PlotterBrushSection.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "java/lang/Math.h"

@interface GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection () {
 @public
  GeogebraCommonKernelMatrixCoords *clockU_;
  GeogebraCommonKernelMatrixCoords *clockV_;
  GeogebraCommonKernelMatrixCoords *direction_;
  GeogebraCommonKernelMatrixCoords *normal_;
  jdouble normalDevD_;
  jdouble normalDevN_;
  jfloat thickness_;
  GeogebraCommonKernelMatrixCoords *tmpCoords_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection, clockU_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection, clockV_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection, direction_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection, normal_, GeogebraCommonKernelMatrixCoords *)
J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection, tmpCoords_, GeogebraCommonKernelMatrixCoords *)

@implementation GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection

- (instancetype)init {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_init(self);
  return self;
}

- (void)setWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
                                      withFloat:(jfloat)thickness
           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)clockU
           withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)clockV {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->center_)) setWithGeogebraCommonKernelMatrixCoords:point];
  self->thickness_ = thickness;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->clockU_)) setWithGeogebraCommonKernelMatrixCoords:clockU];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->clockV_)) setWithGeogebraCommonKernelMatrixCoords:clockV];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) setUndefined];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setUndefined];
  normalDevD_ = 0;
}

- (void)setWithGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
                                      withFloat:(jfloat)thickness {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->center_)) setWithGeogebraCommonKernelMatrixCoords:point];
  self->thickness_ = thickness;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(clockU_)) setUndefined];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(clockV_)) setUndefined];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) setUndefined];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setUndefined];
  normalDevD_ = 0;
}

- (void)setWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *)s
                                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
                                                                  withFloat:(jfloat)thickness
                                                                withBoolean:(jboolean)updateClock {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->center_)) setWithGeogebraCommonKernelMatrixCoords:point];
  self->thickness_ = thickness;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(direction_)) setSubWithGeogebraCommonKernelMatrixCoords:center_ withGeogebraCommonKernelMatrixCoords:((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *) nil_chk(s))->center_];
  if ([center_ equalsForKernelWithGeogebraCommonKernelMatrixCoords:s->center_ withDouble:GeogebraCommonKernelKernel_STANDARD_PRECISION]) {
    if (self->thickness_ < s->thickness_) {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setWithGeogebraCommonKernelMatrixCoords:s->direction_];
    }
    else {
      [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setMulWithGeogebraCommonKernelMatrixCoords:s->direction_ withDouble:-1];
    }
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(s->normal_)) setWithGeogebraCommonKernelMatrixCoords:normal_];
    [direction_ setWithGeogebraCommonKernelMatrixCoords:s->direction_];
    normalDevD_ = 0;
  }
  else {
    jdouble dt = self->thickness_ - s->thickness_;
    if (dt != 0) {
      [direction_ calcNorm];
      jdouble l = [direction_ getNorm];
      jdouble h = JavaLangMath_sqrtWithDouble_(l * l + dt * dt);
      normalDevD_ = -dt / h;
      normalDevN_ = l / h;
      s->normalDevD_ = normalDevD_;
      s->normalDevN_ = normalDevN_;
    }
    else {
      normalDevD_ = 0;
    }
    [direction_ normalize];
    [s->direction_ setWithGeogebraCommonKernelMatrixCoords:direction_];
    [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setUndefined];
    [s->normal_ setUndefined];
    if (updateClock) {
      [direction_ completeOrthonormalWithGeogebraCommonKernelMatrixCoords:s->clockU_ withGeogebraCommonKernelMatrixCoords:s->clockV_];
    }
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(clockU_)) setWithGeogebraCommonKernelMatrixCoords:s->clockU_];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(clockV_)) setWithGeogebraCommonKernelMatrixCoords:s->clockV_];
}

- (void)getNormalAndPositionWithDouble:(jdouble)u
                            withDouble:(jdouble)v
  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)vn
  withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)pos {
  [vn setAddWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) setMulWithGeogebraCommonKernelMatrixCoords:clockU_ withDouble:u] withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(tmpCoords_)) setMulWithGeogebraCommonKernelMatrixCoords:clockV_ withDouble:v]];
  [pos setAddWithGeogebraCommonKernelMatrixCoords:[((GeogebraCommonKernelMatrixCoords *) nil_chk(pos)) setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:thickness_] withGeogebraCommonKernelMatrixCoords:center_];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) isDefined]) {
    [vn setValuesWithGeogebraCommonKernelMatrixCoords:normal_ withInt:3];
  }
  else if (normalDevD_ != 0) {
    [vn setAddWithGeogebraCommonKernelMatrixCoords:[vn setMulWithGeogebraCommonKernelMatrixCoords:vn withDouble:normalDevN_] withGeogebraCommonKernelMatrixCoords:[tmpCoords_ setMulWithGeogebraCommonKernelMatrixCoords:direction_ withDouble:normalDevD_]];
  }
}

- (GeogebraCommonKernelMatrixCoords *)getCenter {
  return center_;
}

- (void)setWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection:(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *)s
                                       withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)point
                                                                  withFloat:(jfloat)thickness {
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->center_)) setWithGeogebraCommonKernelMatrixCoords:point];
  self->thickness_ = thickness;
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(self->direction_)) setSubWithGeogebraCommonKernelMatrixCoords:center_ withGeogebraCommonKernelMatrixCoords:[((GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *) nil_chk(s)) getCenter]];
  [direction_ calcNorm];
  length_ = [direction_ getNorm];
  [direction_ mulInsideWithDouble:1 / length_];
  if (![((GeogebraCommonKernelMatrixCoords *) nil_chk(s->clockU_)) isDefined]) {
    [direction_ completeOrthonormalWithGeogebraCommonKernelMatrixCoords:s->clockU_ withGeogebraCommonKernelMatrixCoords:s->clockV_];
  }
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(clockV_)) setCrossProductWithGeogebraCommonKernelMatrixCoords:direction_ withGeogebraCommonKernelMatrixCoords:s->clockU_];
  [clockV_ normalize];
  [clockU_ setCrossProductWithGeogebraCommonKernelMatrixCoords:clockV_ withGeogebraCommonKernelMatrixCoords:direction_];
  [clockU_ normalize];
  [((GeogebraCommonKernelMatrixCoords *) nil_chk(normal_)) setUndefined];
  normalDevD_ = 0;
}

- (void)dealloc {
  RELEASE_(center_);
  RELEASE_(clockU_);
  RELEASE_(clockV_);
  RELEASE_(direction_);
  RELEASE_(normal_);
  RELEASE_(tmpCoords_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "PlotterBrushSection", NULL, 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoords:withFloat:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonKernelMatrixCoords:withFloat:", "set", "V", 0x1, NULL, NULL },
    { "setWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection:withGeogebraCommonKernelMatrixCoords:withFloat:withBoolean:", "set", "V", 0x1, NULL, NULL },
    { "getNormalAndPositionWithDouble:withDouble:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "getNormalAndPosition", "V", 0x1, NULL, NULL },
    { "getCenter", NULL, "Lgeogebra.common.kernel.Matrix.Coords;", 0x1, NULL, NULL },
    { "setWithGeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection:withGeogebraCommonKernelMatrixCoords:withFloat:", "set", "V", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "center_", NULL, 0x0, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "clockU_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "clockV_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "direction_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "length_", NULL, 0x0, "D", NULL, NULL,  },
    { "normal_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
    { "normalDevD_", NULL, 0x2, "D", NULL, NULL,  },
    { "normalDevN_", NULL, 0x2, "D", NULL, NULL,  },
    { "thickness_", NULL, 0x2, "F", NULL, NULL,  },
    { "tmpCoords_", NULL, 0x2, "Lgeogebra.common.kernel.Matrix.Coords;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection = { 2, "PlotterBrushSection", "geogebra.common.geogebra3D.euclidian3D.openGL", NULL, 0x1, 7, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection;
}

@end

void GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_init(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *self) {
  NSObject_init(self);
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_set_normal_(self, nil);
  self->normalDevD_ = 0;
  self->normalDevN_ = 1;
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_setAndConsume_tmpCoords_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(3));
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_set_center_(self, GeogebraCommonKernelMatrixCoords_createInhomCoorsInD3());
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_setAndConsume_clockU_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [self->clockU_ setUndefined];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_setAndConsume_clockV_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [self->clockV_ setUndefined];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_setAndConsume_direction_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [self->direction_ setUndefined];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_setAndConsume_normal_(self, new_GeogebraCommonKernelMatrixCoords_initWithInt_(4));
  [self->normal_ setUndefined];
  self->normalDevD_ = 0;
}

GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *new_GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_init() {
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection *self = [GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection alloc];
  GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection_init(self);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DEuclidian3DOpenGLPlotterBrushSection)
