//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3DOriented.java
//


#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3D.h"
#include "geogebra/common/geogebra3D/kernel3D/algos/AlgoEllipseHyperbolaFociPoint3DOriented.h"
#include "geogebra/common/kernel/Construction.h"
#include "geogebra/common/kernel/Kernel.h"
#include "geogebra/common/kernel/Matrix/CoordSys.h"
#include "geogebra/common/kernel/Matrix/Coords.h"
#include "geogebra/common/kernel/StringTemplate.h"
#include "geogebra/common/kernel/algos/AlgoElement.h"
#include "geogebra/common/kernel/algos/ConstructionElement.h"
#include "geogebra/common/kernel/geos/GeoElement.h"
#include "geogebra/common/kernel/kernelND/GeoConicNDConstants.h"
#include "geogebra/common/kernel/kernelND/GeoCoordSys2D.h"
#include "geogebra/common/kernel/kernelND/GeoDirectionND.h"
#include "geogebra/common/kernel/kernelND/GeoPointND.h"
#include "geogebra/common/main/Localization.h"

@interface GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented () {
 @public
  id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation_;
}

@end

J2OBJC_FIELD_SETTER(GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented, orientation_, id<GeogebraCommonKernelKernelNDGeoDirectionND>)

@implementation GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented

- (instancetype)initWithGeogebraCommonKernelConstruction:(GeogebraCommonKernelConstruction *)cons
                                            withNSString:(NSString *)label
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)A
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)B
              withGeogebraCommonKernelKernelNDGeoPointND:(id<GeogebraCommonKernelKernelNDGeoPointND>)C
          withGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation
                                                 withInt:(jint)type {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, label, A, B, C, orientation, type);
  return self;
}

- (void)setOrientationWithGeogebraCommonKernelKernelNDGeoDirectionND:(id<GeogebraCommonKernelKernelNDGeoDirectionND>)orientation {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_set_orientation_(self, orientation);
}

- (void)setInput {
  GeogebraCommonKernelAlgosAlgoElement_setAndConsume_input_(self, [IOSObjectArray newArrayWithLength:4 type:GeogebraCommonKernelGeosGeoElement_class_()]);
  IOSObjectArray_Set(input_, 0, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(A_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 1, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(B_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 2, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(C_, [GeogebraCommonKernelGeosGeoElement class]));
  IOSObjectArray_Set(input_, 3, (GeogebraCommonKernelGeosGeoElement *) check_class_cast(orientation_, [GeogebraCommonKernelGeosGeoElement class]));
}

- (jboolean)setCoordSysWithGeogebraCommonKernelMatrixCoordSys:(GeogebraCommonKernelMatrixCoordSys *)cs
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Ac
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Bc
                         withGeogebraCommonKernelMatrixCoords:(GeogebraCommonKernelMatrixCoords *)Cc {
  GeogebraCommonKernelMatrixCoords *vn = [((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getDirectionInD3];
  if ([((GeogebraCommonKernelMatrixCoords *) nil_chk(vn)) isZero]) {
    return NO;
  }
  GeogebraCommonKernelMatrixCoords *d1 = [((GeogebraCommonKernelMatrixCoords *) nil_chk(Bc)) subWithGeogebraCommonKernelMatrixCoords:Ac];
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk(d1)) dotproductWithGeogebraCommonKernelMatrixCoords:vn])) {
    return NO;
  }
  if (!GeogebraCommonKernelKernel_isZeroWithDouble_([((GeogebraCommonKernelMatrixCoords *) nil_chk([((GeogebraCommonKernelMatrixCoords *) nil_chk(Cc)) subWithGeogebraCommonKernelMatrixCoords:Ac])) dotproductWithGeogebraCommonKernelMatrixCoords:vn])) {
    return NO;
  }
  [((GeogebraCommonKernelMatrixCoordSys *) nil_chk(cs)) addPointWithGeogebraCommonKernelMatrixCoords:Ac];
  [cs addVectorWithGeogebraCommonKernelMatrixCoords:d1];
  [cs addVectorWithGeogebraCommonKernelMatrixCoords:[vn crossProduct4WithGeogebraCommonKernelMatrixCoords:d1]];
  return [cs makeOrthoMatrixWithBoolean:NO withBoolean:NO];
}

- (NSString *)toStringWithGeogebraCommonKernelStringTemplate:(GeogebraCommonKernelStringTemplate *)tpl {
  if ([GeogebraCommonKernelKernelNDGeoCoordSys2D_class_() isInstance:orientation_]) {
    if (type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
      return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"HyperbolaWithFociABPassingThroughCParallelToD" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
    }
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"EllipseWithFociABPassingThroughCParallelToD" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  if (type_ == GeogebraCommonKernelKernelNDGeoConicNDConstants_CONIC_HYPERBOLA) {
    return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"HyperbolaWithFociABPassingThroughCPerpendicularToD" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
  }
  return [((GeogebraCommonMainLocalization *) nil_chk([self getLoc])) getPlainWithNSString:@"EllipseWithFociABPassingThroughCPerpendicularToD" withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(A_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(B_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoPointND>) nil_chk(C_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl] withNSString:[((id<GeogebraCommonKernelKernelNDGeoDirectionND>) nil_chk(orientation_)) getLabelWithGeogebraCommonKernelStringTemplate:tpl]];
}

- (void)dealloc {
  RELEASE_(orientation_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "initWithGeogebraCommonKernelConstruction:withNSString:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoPointND:withGeogebraCommonKernelKernelNDGeoDirectionND:withInt:", "AlgoEllipseHyperbolaFociPoint3DOriented", NULL, 0x1, NULL, NULL },
    { "setOrientationWithGeogebraCommonKernelKernelNDGeoDirectionND:", "setOrientation", "V", 0x4, NULL, NULL },
    { "setInput", NULL, "V", 0x4, NULL, NULL },
    { "setCoordSysWithGeogebraCommonKernelMatrixCoordSys:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:withGeogebraCommonKernelMatrixCoords:", "setCoordSys", "Z", 0x4, NULL, NULL },
    { "toStringWithGeogebraCommonKernelStringTemplate:", "toString", "Ljava.lang.String;", 0x1, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "orientation_", NULL, 0x2, "Lgeogebra.common.kernel.kernelND.GeoDirectionND;", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented = { 2, "AlgoEllipseHyperbolaFociPoint3DOriented", "geogebra.common.geogebra3D.kernel3D.algos", NULL, 0x1, 5, methods, 1, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented;
}

@end

void GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented *self, GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3D_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, label, A, B, C, orientation, type);
}

GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented *new_GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(GeogebraCommonKernelConstruction *cons, NSString *label, id<GeogebraCommonKernelKernelNDGeoPointND> A, id<GeogebraCommonKernelKernelNDGeoPointND> B, id<GeogebraCommonKernelKernelNDGeoPointND> C, id<GeogebraCommonKernelKernelNDGeoDirectionND> orientation, jint type) {
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented *self = [GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented alloc];
  GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented_initWithGeogebraCommonKernelConstruction_withNSString_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoPointND_withGeogebraCommonKernelKernelNDGeoDirectionND_withInt_(self, cons, label, A, B, C, orientation, type);
  return self;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(GeogebraCommonGeogebra3DKernel3DAlgosAlgoEllipseHyperbolaFociPoint3DOriented)
