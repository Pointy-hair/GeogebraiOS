//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/jacky/GSoC/geogebra_iOS/geogebra/geogebra/common/src/org/apache/commons/math/util/ResizableDoubleArray.java
//


#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "org/apache/commons/math/MathRuntimeException.h"
#include "org/apache/commons/math/exception/util/LocalizedFormats.h"
#include "org/apache/commons/math/util/FastMath.h"
#include "org/apache/commons/math/util/ResizableDoubleArray.h"

#define OrgApacheCommonsMathUtilResizableDoubleArray_serialVersionUID -3485529955529426875LL

@interface OrgApacheCommonsMathUtilResizableDoubleArray ()

- (void)discardExtremeElementsWithInt:(jint)i
                          withBoolean:(jboolean)front;

- (void)expandToWithInt:(jint)size;

- (jboolean)shouldContract;

@end

J2OBJC_STATIC_FIELD_GETTER(OrgApacheCommonsMathUtilResizableDoubleArray, serialVersionUID, jlong)

__attribute__((unused)) static void OrgApacheCommonsMathUtilResizableDoubleArray_discardExtremeElementsWithInt_withBoolean_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint i, jboolean front);

__attribute__((unused)) static void OrgApacheCommonsMathUtilResizableDoubleArray_expandToWithInt_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint size);

__attribute__((unused)) static jboolean OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(OrgApacheCommonsMathUtilResizableDoubleArray *self);

@implementation OrgApacheCommonsMathUtilResizableDoubleArray

- (instancetype)init {
  OrgApacheCommonsMathUtilResizableDoubleArray_init(self);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_(self, initialCapacity);
  return self;
}

- (instancetype)initWithDoubleArray:(IOSDoubleArray *)initialArray {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithDoubleArray_(self, initialArray);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)expansionFactor {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_(self, initialCapacity, expansionFactor);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)expansionFactor
                  withFloat:(jfloat)contractionCriteria {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_(self, initialCapacity, expansionFactor, contractionCriteria);
  return self;
}

- (instancetype)initWithInt:(jint)initialCapacity
                  withFloat:(jfloat)expansionFactor
                  withFloat:(jfloat)contractionCriteria
                    withInt:(jint)expansionMode {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_withInt_(self, initialCapacity, expansionFactor, contractionCriteria, expansionMode);
  return self;
}

- (instancetype)initWithOrgApacheCommonsMathUtilResizableDoubleArray:(OrgApacheCommonsMathUtilResizableDoubleArray *)original {
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithOrgApacheCommonsMathUtilResizableDoubleArray_(self, original);
  return self;
}

- (void)addElementWithDouble:(jdouble)value {
  @synchronized(self) {
    numElements_++;
    if ((startIndex_ + numElements_) > ((IOSDoubleArray *) nil_chk(internalArray_))->size_) {
      [self expand];
    }
    *IOSDoubleArray_GetRef(internalArray_, startIndex_ + (numElements_ - 1)) = value;
    if (OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(self)) {
      [self contract];
    }
  }
}

- (void)addElementsWithDoubleArray:(IOSDoubleArray *)values {
  @synchronized(self) {
    IOSDoubleArray *tempArray = [IOSDoubleArray arrayWithLength:numElements_ + ((IOSDoubleArray *) nil_chk(values))->size_ + 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(internalArray_, startIndex_, tempArray, 0, numElements_);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(values, 0, tempArray, numElements_, values->size_);
    OrgApacheCommonsMathUtilResizableDoubleArray_set_internalArray_(self, tempArray);
    startIndex_ = 0;
    numElements_ += values->size_;
  }
}

- (jdouble)addElementRollingWithDouble:(jdouble)value {
  @synchronized(self) {
    jdouble discarded = IOSDoubleArray_Get(nil_chk(internalArray_), startIndex_);
    if ((startIndex_ + (numElements_ + 1)) > internalArray_->size_) {
      [self expand];
    }
    startIndex_ += 1;
    *IOSDoubleArray_GetRef(internalArray_, startIndex_ + (numElements_ - 1)) = value;
    if (OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(self)) {
      [self contract];
    }
    return discarded;
  }
}

- (jdouble)substituteMostRecentElementWithDouble:(jdouble)value {
  @synchronized(self) {
    if (numElements_ < 1) {
      @throw OrgApacheCommonsMathMathRuntimeException_createArrayIndexOutOfBoundsExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_SUBSTITUTE_ELEMENT_FROM_EMPTY_ARRAY(), [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    }
    jdouble discarded = IOSDoubleArray_Get(nil_chk(internalArray_), startIndex_ + (numElements_ - 1));
    *IOSDoubleArray_GetRef(internalArray_, startIndex_ + (numElements_ - 1)) = value;
    return discarded;
  }
}

- (void)checkContractExpandWithFloat:(jfloat)contraction
                           withFloat:(jfloat)expansion {
  if (contraction < expansion) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CONTRACTION_CRITERIA_SMALLER_THAN_EXPANSION_FACTOR(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(contraction), JavaLangFloat_valueOfWithFloat_(expansion) } count:2 type:NSObject_class_()]);
  }
  if (contraction <= 1.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CONTRACTION_CRITERIA_SMALLER_THAN_ONE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(contraction) } count:1 type:NSObject_class_()]);
  }
  if (expansion <= 1.0) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_EXPANSION_FACTOR_SMALLER_THAN_ONE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(expansion) } count:1 type:NSObject_class_()]);
  }
}

- (void)clear {
  @synchronized(self) {
    numElements_ = 0;
    startIndex_ = 0;
    OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:initialCapacity_]);
  }
}

- (void)contract {
  @synchronized(self) {
    IOSDoubleArray *tempArray = [IOSDoubleArray arrayWithLength:numElements_ + 1];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(internalArray_, startIndex_, tempArray, 0, numElements_);
    OrgApacheCommonsMathUtilResizableDoubleArray_set_internalArray_(self, tempArray);
    startIndex_ = 0;
  }
}

- (void)discardFrontElementsWithInt:(jint)i {
  @synchronized(self) {
    OrgApacheCommonsMathUtilResizableDoubleArray_discardExtremeElementsWithInt_withBoolean_(self, i, YES);
  }
}

- (void)discardMostRecentElementsWithInt:(jint)i {
  @synchronized(self) {
    OrgApacheCommonsMathUtilResizableDoubleArray_discardExtremeElementsWithInt_withBoolean_(self, i, NO);
  }
}

- (void)discardExtremeElementsWithInt:(jint)i
                          withBoolean:(jboolean)front {
  OrgApacheCommonsMathUtilResizableDoubleArray_discardExtremeElementsWithInt_withBoolean_(self, i, front);
}

- (void)expand {
  @synchronized(self) {
    jint newSize = 0;
    if (expansionMode_ == OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE) {
      newSize = J2ObjCFpToInt(OrgApacheCommonsMathUtilFastMath_ceilWithDouble_(((IOSDoubleArray *) nil_chk(internalArray_))->size_ * expansionFactor_));
    }
    else {
      newSize = ((IOSDoubleArray *) nil_chk(internalArray_))->size_ + OrgApacheCommonsMathUtilFastMath_roundWithFloat_(expansionFactor_);
    }
    IOSDoubleArray *tempArray = [IOSDoubleArray arrayWithLength:newSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(internalArray_, 0, tempArray, 0, ((IOSDoubleArray *) nil_chk(internalArray_))->size_);
    OrgApacheCommonsMathUtilResizableDoubleArray_set_internalArray_(self, tempArray);
  }
}

- (void)expandToWithInt:(jint)size {
  OrgApacheCommonsMathUtilResizableDoubleArray_expandToWithInt_(self, size);
}

- (jfloat)getContractionCriteria {
  return contractionCriteria_;
}

- (jdouble)getElementWithInt:(jint)index {
  @synchronized(self) {
    if (index >= numElements_) {
      @throw OrgApacheCommonsMathMathRuntimeException_createArrayIndexOutOfBoundsExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INDEX_LARGER_THAN_MAX(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index), JavaLangInteger_valueOfWithInt_(numElements_ - 1) } count:2 type:NSObject_class_()]);
    }
    else if (index >= 0) {
      return IOSDoubleArray_Get(nil_chk(internalArray_), startIndex_ + index);
    }
    else {
      @throw OrgApacheCommonsMathMathRuntimeException_createArrayIndexOutOfBoundsExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_RETRIEVE_AT_NEGATIVE_INDEX(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index) } count:1 type:NSObject_class_()]);
    }
  }
}

- (IOSDoubleArray *)getElements {
  @synchronized(self) {
    IOSDoubleArray *elementArray = [IOSDoubleArray arrayWithLength:numElements_];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(internalArray_, startIndex_, elementArray, 0, numElements_);
    return elementArray;
  }
}

- (jfloat)getExpansionFactor {
  return expansionFactor_;
}

- (jint)getExpansionMode {
  return expansionMode_;
}

- (jint)getInternalLength {
  @synchronized(self) {
    return ((IOSDoubleArray *) nil_chk(internalArray_))->size_;
  }
}

- (jint)getNumElements {
  @synchronized(self) {
    return numElements_;
  }
}

- (IOSDoubleArray *)getValues {
  @synchronized(self) {
    return internalArray_;
  }
}

- (IOSDoubleArray *)getInternalValues {
  @synchronized(self) {
    return internalArray_;
  }
}

- (void)setContractionCriteriaWithFloat:(jfloat)contractionCriteria {
  [self checkContractExpandWithFloat:contractionCriteria withFloat:[self getExpansionFactor]];
  @synchronized(self) {
    self->contractionCriteria_ = contractionCriteria;
  }
}

- (void)setElementWithInt:(jint)index
               withDouble:(jdouble)value {
  @synchronized(self) {
    if (index < 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createArrayIndexOutOfBoundsExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_SET_AT_NEGATIVE_INDEX(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(index) } count:1 type:NSObject_class_()]);
    }
    if (index + 1 > numElements_) {
      numElements_ = index + 1;
    }
    if ((startIndex_ + index) >= ((IOSDoubleArray *) nil_chk(internalArray_))->size_) {
      OrgApacheCommonsMathUtilResizableDoubleArray_expandToWithInt_(self, startIndex_ + (index + 1));
    }
    *IOSDoubleArray_GetRef(internalArray_, startIndex_ + index) = value;
  }
}

- (void)setExpansionFactorWithFloat:(jfloat)expansionFactor {
  [self checkContractExpandWithFloat:[self getContractionCriteria] withFloat:expansionFactor];
  @synchronized(self) {
    self->expansionFactor_ = expansionFactor;
  }
}

- (void)setExpansionModeWithInt:(jint)expansionMode {
  if (expansionMode != OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE && expansionMode != OrgApacheCommonsMathUtilResizableDoubleArray_ADDITIVE_MODE) {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_UNSUPPORTED_EXPANSION_MODE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(expansionMode), JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE), @"MULTIPLICATIVE_MODE", JavaLangInteger_valueOfWithInt_(OrgApacheCommonsMathUtilResizableDoubleArray_ADDITIVE_MODE), @"ADDITIVE_MODE" } count:5 type:NSObject_class_()]);
  }
  @synchronized(self) {
    self->expansionMode_ = expansionMode;
  }
}

- (void)setInitialCapacityWithInt:(jint)initialCapacity {
  if (initialCapacity > 0) {
    @synchronized(self) {
      self->initialCapacity_ = initialCapacity;
    }
  }
  else {
    @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INITIAL_CAPACITY_NOT_POSITIVE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(initialCapacity) } count:1 type:NSObject_class_()]);
  }
}

- (void)setNumElementsWithInt:(jint)i {
  @synchronized(self) {
    if (i < 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_INDEX_NOT_POSITIVE(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]);
    }
    if ((startIndex_ + i) > ((IOSDoubleArray *) nil_chk(internalArray_))->size_) {
      OrgApacheCommonsMathUtilResizableDoubleArray_expandToWithInt_(self, startIndex_ + i);
    }
    numElements_ = i;
  }
}

- (jboolean)shouldContract {
  return OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(self);
}

- (jint)start {
  @synchronized(self) {
    return startIndex_;
  }
}

+ (void)copy__WithOrgApacheCommonsMathUtilResizableDoubleArray:(OrgApacheCommonsMathUtilResizableDoubleArray *)source
              withOrgApacheCommonsMathUtilResizableDoubleArray:(OrgApacheCommonsMathUtilResizableDoubleArray *)dest {
  OrgApacheCommonsMathUtilResizableDoubleArray_copy__WithOrgApacheCommonsMathUtilResizableDoubleArray_withOrgApacheCommonsMathUtilResizableDoubleArray_(source, dest);
}

- (OrgApacheCommonsMathUtilResizableDoubleArray *)copy__ {
  @synchronized(self) {
    OrgApacheCommonsMathUtilResizableDoubleArray *result = [new_OrgApacheCommonsMathUtilResizableDoubleArray_init() autorelease];
    OrgApacheCommonsMathUtilResizableDoubleArray_copy__WithOrgApacheCommonsMathUtilResizableDoubleArray_withOrgApacheCommonsMathUtilResizableDoubleArray_(self, result);
    return result;
  }
}

- (jboolean)isEqual:(id)object {
  if (object == self) {
    return YES;
  }
  if ([object isKindOfClass:[OrgApacheCommonsMathUtilResizableDoubleArray class]] == NO) {
    return NO;
  }
  @synchronized(self) {
    @synchronized(object) {
      jboolean result = YES;
      OrgApacheCommonsMathUtilResizableDoubleArray *other = (OrgApacheCommonsMathUtilResizableDoubleArray *) check_class_cast(object, [OrgApacheCommonsMathUtilResizableDoubleArray class]);
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->initialCapacity_ == initialCapacity_));
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->contractionCriteria_ == contractionCriteria_));
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->expansionFactor_ == expansionFactor_));
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->expansionMode_ == expansionMode_));
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->numElements_ == numElements_));
      result = (result && (((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->startIndex_ == startIndex_));
      if (!result) {
        return NO;
      }
      else {
        return JavaUtilArrays_equalsWithDoubleArray_withDoubleArray_(internalArray_, ((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(other))->internalArray_);
      }
    }
  }
}

- (NSUInteger)hash {
  @synchronized(self) {
    IOSIntArray *hashData = [IOSIntArray arrayWithLength:7];
    *IOSIntArray_GetRef(hashData, 0) = ((jint) [((JavaLangFloat *) [new_JavaLangFloat_initWithFloat_(expansionFactor_) autorelease]) hash]);
    *IOSIntArray_GetRef(hashData, 1) = ((jint) [((JavaLangFloat *) [new_JavaLangFloat_initWithFloat_(contractionCriteria_) autorelease]) hash]);
    *IOSIntArray_GetRef(hashData, 2) = expansionMode_;
    *IOSIntArray_GetRef(hashData, 3) = JavaUtilArrays_hashCodeWithDoubleArray_(internalArray_);
    *IOSIntArray_GetRef(hashData, 4) = initialCapacity_;
    *IOSIntArray_GetRef(hashData, 5) = numElements_;
    *IOSIntArray_GetRef(hashData, 6) = startIndex_;
    return JavaUtilArrays_hashCodeWithIntArray_(hashData);
  }
}

- (void)dealloc {
  RELEASE_(internalArray_);
  [super dealloc];
}

+ (IOSObjectArray *)__annotations_getValues {
  return [IOSObjectArray arrayWithObjects:(id[]) { [[[JavaLangDeprecated alloc] init] autorelease] } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcMethodInfo methods[] = {
    { "init", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithDoubleArray:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:withFloat:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithInt:withFloat:withFloat:withInt:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "initWithOrgApacheCommonsMathUtilResizableDoubleArray:", "ResizableDoubleArray", NULL, 0x1, NULL, NULL },
    { "addElementWithDouble:", "addElement", "V", 0x21, NULL, NULL },
    { "addElementsWithDoubleArray:", "addElements", "V", 0x21, NULL, NULL },
    { "addElementRollingWithDouble:", "addElementRolling", "D", 0x21, NULL, NULL },
    { "substituteMostRecentElementWithDouble:", "substituteMostRecentElement", "D", 0x21, NULL, NULL },
    { "checkContractExpandWithFloat:withFloat:", "checkContractExpand", "V", 0x4, NULL, NULL },
    { "clear", NULL, "V", 0x21, NULL, NULL },
    { "contract", NULL, "V", 0x21, NULL, NULL },
    { "discardFrontElementsWithInt:", "discardFrontElements", "V", 0x21, NULL, NULL },
    { "discardMostRecentElementsWithInt:", "discardMostRecentElements", "V", 0x21, NULL, NULL },
    { "discardExtremeElementsWithInt:withBoolean:", "discardExtremeElements", "V", 0x22, NULL, NULL },
    { "expand", NULL, "V", 0x24, NULL, NULL },
    { "expandToWithInt:", "expandTo", "V", 0x22, NULL, NULL },
    { "getContractionCriteria", NULL, "F", 0x1, NULL, NULL },
    { "getElementWithInt:", "getElement", "D", 0x21, NULL, NULL },
    { "getElements", NULL, "[D", 0x21, NULL, NULL },
    { "getExpansionFactor", NULL, "F", 0x1, NULL, NULL },
    { "getExpansionMode", NULL, "I", 0x1, NULL, NULL },
    { "getInternalLength", NULL, "I", 0x20, NULL, NULL },
    { "getNumElements", NULL, "I", 0x21, NULL, NULL },
    { "getValues", NULL, "[D", 0x21, NULL, NULL },
    { "getInternalValues", NULL, "[D", 0x21, NULL, NULL },
    { "setContractionCriteriaWithFloat:", "setContractionCriteria", "V", 0x1, NULL, NULL },
    { "setElementWithInt:withDouble:", "setElement", "V", 0x21, NULL, NULL },
    { "setExpansionFactorWithFloat:", "setExpansionFactor", "V", 0x1, NULL, NULL },
    { "setExpansionModeWithInt:", "setExpansionMode", "V", 0x1, NULL, NULL },
    { "setInitialCapacityWithInt:", "setInitialCapacity", "V", 0x4, NULL, NULL },
    { "setNumElementsWithInt:", "setNumElements", "V", 0x21, NULL, NULL },
    { "shouldContract", NULL, "Z", 0x22, NULL, NULL },
    { "start", NULL, "I", 0x21, NULL, NULL },
    { "copy__WithOrgApacheCommonsMathUtilResizableDoubleArray:withOrgApacheCommonsMathUtilResizableDoubleArray:", "copy", "V", 0x9, NULL, NULL },
    { "copy__", "copy", "Lorg.apache.commons.math.util.ResizableDoubleArray;", 0x21, NULL, NULL },
    { "isEqual:", "equals", "Z", 0x1, NULL, NULL },
    { "hash", "hashCode", "I", 0x21, NULL, NULL },
  };
  static const J2ObjcFieldInfo fields[] = {
    { "ADDITIVE_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathUtilResizableDoubleArray_ADDITIVE_MODE },
    { "MULTIPLICATIVE_MODE_", NULL, 0x19, "I", NULL, NULL, .constantValue.asInt = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE },
    { "serialVersionUID_", NULL, 0x1a, "J", NULL, NULL, .constantValue.asLong = OrgApacheCommonsMathUtilResizableDoubleArray_serialVersionUID },
    { "contractionCriteria_", NULL, 0x4, "F", NULL, NULL,  },
    { "expansionFactor_", NULL, 0x4, "F", NULL, NULL,  },
    { "expansionMode_", NULL, 0x4, "I", NULL, NULL,  },
    { "initialCapacity_", NULL, 0x4, "I", NULL, NULL,  },
    { "internalArray_", NULL, 0x4, "[D", NULL, NULL,  },
    { "numElements_", NULL, 0x4, "I", NULL, NULL,  },
    { "startIndex_", NULL, 0x4, "I", NULL, NULL,  },
  };
  static const J2ObjcClassInfo _OrgApacheCommonsMathUtilResizableDoubleArray = { 2, "ResizableDoubleArray", "org.apache.commons.math.util", NULL, 0x1, 40, methods, 10, fields, 0, NULL, 0, NULL, NULL, NULL };
  return &_OrgApacheCommonsMathUtilResizableDoubleArray;
}

@end

void OrgApacheCommonsMathUtilResizableDoubleArray_init(OrgApacheCommonsMathUtilResizableDoubleArray *self) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:self->initialCapacity_]);
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_init() {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_init(self);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint initialCapacity) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  [self setInitialCapacityWithInt:initialCapacity];
  OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:self->initialCapacity_]);
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_(jint initialCapacity) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_(self, initialCapacity);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithDoubleArray_(OrgApacheCommonsMathUtilResizableDoubleArray *self, IOSDoubleArray *initialArray) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  if (initialArray == nil) {
    OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:self->initialCapacity_]);
  }
  else {
    OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:initialArray->size_]);
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(initialArray, 0, self->internalArray_, 0, initialArray->size_);
    self->initialCapacity_ = initialArray->size_;
    self->numElements_ = initialArray->size_;
  }
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithDoubleArray_(IOSDoubleArray *initialArray) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithDoubleArray_(self, initialArray);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint initialCapacity, jfloat expansionFactor) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  self->expansionFactor_ = expansionFactor;
  [self setInitialCapacityWithInt:initialCapacity];
  OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:initialCapacity]);
  [self setContractionCriteriaWithFloat:expansionFactor + 0.5f];
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_(jint initialCapacity, jfloat expansionFactor) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_(self, initialCapacity, expansionFactor);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint initialCapacity, jfloat expansionFactor, jfloat contractionCriteria) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  self->expansionFactor_ = expansionFactor;
  [self setContractionCriteriaWithFloat:contractionCriteria];
  [self setInitialCapacityWithInt:initialCapacity];
  OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:initialCapacity]);
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_(jint initialCapacity, jfloat expansionFactor, jfloat contractionCriteria) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_(self, initialCapacity, expansionFactor, contractionCriteria);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_withInt_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint initialCapacity, jfloat expansionFactor, jfloat contractionCriteria, jint expansionMode) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  self->expansionFactor_ = expansionFactor;
  [self setContractionCriteriaWithFloat:contractionCriteria];
  [self setInitialCapacityWithInt:initialCapacity];
  [self setExpansionModeWithInt:expansionMode];
  OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(self, [IOSDoubleArray newArrayWithLength:initialCapacity]);
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_withInt_(jint initialCapacity, jfloat expansionFactor, jfloat contractionCriteria, jint expansionMode) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithInt_withFloat_withFloat_withInt_(self, initialCapacity, expansionFactor, contractionCriteria, expansionMode);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_initWithOrgApacheCommonsMathUtilResizableDoubleArray_(OrgApacheCommonsMathUtilResizableDoubleArray *self, OrgApacheCommonsMathUtilResizableDoubleArray *original) {
  NSObject_init(self);
  self->contractionCriteria_ = 2.5f;
  self->expansionFactor_ = 2.0f;
  self->expansionMode_ = OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE;
  self->initialCapacity_ = 16;
  self->numElements_ = 0;
  self->startIndex_ = 0;
  OrgApacheCommonsMathUtilResizableDoubleArray_copy__WithOrgApacheCommonsMathUtilResizableDoubleArray_withOrgApacheCommonsMathUtilResizableDoubleArray_(original, self);
}

OrgApacheCommonsMathUtilResizableDoubleArray *new_OrgApacheCommonsMathUtilResizableDoubleArray_initWithOrgApacheCommonsMathUtilResizableDoubleArray_(OrgApacheCommonsMathUtilResizableDoubleArray *original) {
  OrgApacheCommonsMathUtilResizableDoubleArray *self = [OrgApacheCommonsMathUtilResizableDoubleArray alloc];
  OrgApacheCommonsMathUtilResizableDoubleArray_initWithOrgApacheCommonsMathUtilResizableDoubleArray_(self, original);
  return self;
}

void OrgApacheCommonsMathUtilResizableDoubleArray_discardExtremeElementsWithInt_withBoolean_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint i, jboolean front) {
  @synchronized(self) {
    if (i > self->numElements_) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_TOO_MANY_ELEMENTS_TO_DISCARD_FROM_ARRAY(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i), JavaLangInteger_valueOfWithInt_(self->numElements_) } count:2 type:NSObject_class_()]);
    }
    else if (i < 0) {
      @throw OrgApacheCommonsMathMathRuntimeException_createIllegalArgumentExceptionWithOrgApacheCommonsMathExceptionUtilLocalizable_withNSObjectArray_(OrgApacheCommonsMathExceptionUtilLocalizedFormatsEnum_get_CANNOT_DISCARD_NEGATIVE_NUMBER_OF_ELEMENTS(), [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(i) } count:1 type:NSObject_class_()]);
    }
    else {
      self->numElements_ -= i;
      if (front) self->startIndex_ += i;
    }
    if (OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(self)) {
      [self contract];
    }
  }
}

void OrgApacheCommonsMathUtilResizableDoubleArray_expandToWithInt_(OrgApacheCommonsMathUtilResizableDoubleArray *self, jint size) {
  @synchronized(self) {
    IOSDoubleArray *tempArray = [IOSDoubleArray arrayWithLength:size];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->internalArray_, 0, tempArray, 0, ((IOSDoubleArray *) nil_chk(self->internalArray_))->size_);
    OrgApacheCommonsMathUtilResizableDoubleArray_set_internalArray_(self, tempArray);
  }
}

jboolean OrgApacheCommonsMathUtilResizableDoubleArray_shouldContract(OrgApacheCommonsMathUtilResizableDoubleArray *self) {
  @synchronized(self) {
    if (self->expansionMode_ == OrgApacheCommonsMathUtilResizableDoubleArray_MULTIPLICATIVE_MODE) {
      return (((IOSDoubleArray *) nil_chk(self->internalArray_))->size_ / ((jfloat) self->numElements_)) > self->contractionCriteria_;
    }
    else {
      return (((IOSDoubleArray *) nil_chk(self->internalArray_))->size_ - self->numElements_) > self->contractionCriteria_;
    }
  }
}

void OrgApacheCommonsMathUtilResizableDoubleArray_copy__WithOrgApacheCommonsMathUtilResizableDoubleArray_withOrgApacheCommonsMathUtilResizableDoubleArray_(OrgApacheCommonsMathUtilResizableDoubleArray *source, OrgApacheCommonsMathUtilResizableDoubleArray *dest) {
  OrgApacheCommonsMathUtilResizableDoubleArray_initialize();
  @synchronized(source) {
    @synchronized(dest) {
      ((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(dest))->initialCapacity_ = ((OrgApacheCommonsMathUtilResizableDoubleArray *) nil_chk(source))->initialCapacity_;
      dest->contractionCriteria_ = source->contractionCriteria_;
      dest->expansionFactor_ = source->expansionFactor_;
      dest->expansionMode_ = source->expansionMode_;
      OrgApacheCommonsMathUtilResizableDoubleArray_setAndConsume_internalArray_(dest, [IOSDoubleArray newArrayWithLength:((IOSDoubleArray *) nil_chk(source->internalArray_))->size_]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->internalArray_, 0, dest->internalArray_, 0, dest->internalArray_->size_);
      dest->numElements_ = source->numElements_;
      dest->startIndex_ = source->startIndex_;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgApacheCommonsMathUtilResizableDoubleArray)
